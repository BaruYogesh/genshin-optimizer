{"version":3,"sources":["Build/Build.js","Character/Character.js","Weapon/Weapon.js","StatDependency.js","Components/CustomFormControl.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Components/StarDisplay.js","Data/WeaponData.js","Data/CharacterData.js","Util/ReactUtil.js","Components/StatIcon.js","Components/CharacterSelection.js","Character/StatInput.jsx","Components/StatDisplay.js","Components/ConditionalSelector.js","Character/CharacterDisplay/DamageOptionsAndCalculation.jsx","Character/CharacterDisplay/StatDisplayComponent.jsx","Character/CharacterCard.jsx","Util/TimeUtil.js","Build/BuildWorker.js","Build/BuildDisplay.js"],"names":["calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","getTalentStatKey","skillKey","stats","elemental","hitMode","autoInfused","reactionMode","characterEle","weaponType","ElementalData","includes","eleKey","getTalentStatKeyVariant","Character","this","Error","characterKey","talentKey","formula","formulaDB","getCDataObj","formulaKey","tk","find","character","CharacterDatabase","get","equippedArtifacts","values","forEach","artid","ArtifactDatabase","moveToNewLocation","remove","getCharacterDataImport","CharacterDataImport","getBaseStatValue","statKey","defVal","levelKey","getSpecializedStatKey","getSpeicalizedStatVal","Weapon","getWeaponMainStatValWithOverride","weapon","getLevel","characterStatBase","characterObj","baseStat","getIndexFromlevelkey","charKey","CharacterData","getElementalName","elementalKey","name","getAllCharacterKeys","getName","getStar","star","getElementalKey","elementKey","getElementalKeys","getElementalKeysWithoutPhysical","filter","e","getWeaponTypeKey","weaponTypeKey","getConstellationName","constellationName","getTitles","titles","getlevelKeys","LevelsData","getlevelTemplateName","getLevelString","levelOverride","getStatValueWithOverride","indexOf","level","getAscension","asend","getSpecializedStat","specializeStat","value","getThumb","thumbImg","getCard","cardImg","getTalentImg","getTalent","img","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","constellation","talents","talentBoost","boostEntry","getTalentDocument","document","getTalentDocumentSections","section","getTalentField","sectionIndex","fieldIndex","field","fields","getTalentFieldValue","getTalentStats","talentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","sections","cond","tempCond","conditional","getTalentConditionalStats","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","fromEntries","val","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","hasTalentPage","Boolean","getDisplayStatKeys","basicKeys","transReactions","deepClone","ElementToReactionKeys","charFormulas","genericAvgHit","reactions","startsWith","replace","hasOverride","baseStatOverrides","equipArtifacts","artifactIds","artIdsOnCharacter","artIdsNotOnCharacter","Artifact","getSlotKeys","artNotOnChar","location","artOnChar","notCharLoc","id","equipArtifact","sKey","update","calculateBuild","art","initialStats","calculateCharacterWithWeaponStats","calculateBuildWithObjs","artifactConditionals","setToSlots","artifactSetEffectsStats","getArtifactSetEffectsStats","mainStatKey","getMainStatValue","numStars","artifactsAssumeFull","substats","substat","stat","statVal","srcKey","setNumKey","srcKey2","parseInt","getConditionalStats","dependencies","GetDependencies","modifiers","PreprocessFormulas","finalStats","mergeStats","modifier","mkey","multiplier","talentLevelKeys","talentConditionals","ascension","statKeys","tlvl","overrides","hasOwnProperty","specializedStatVal","specialStatKey","s","weaponSubKey","getWeaponSubStatKey","getWeaponSubStatValWithOverride","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","getWeaponDataImport","WeaponDataImport","getLevelName","LevelNameData","getLevelIndex","WeaponLevelKeys","getWeaponName","weaponKey","WeaponData","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","charFinalStats","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","subStatKey","getWeaponsOfType","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal","objMultiplication","GetFormulaDependency","dependency","Proxy","target","prop","receiver","add","formulaKeyDependency","Formulas","StatData","InsertDependencies","k","CustomFormControl","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","useEffect","aria-label","className","type","onBlur","onKeyDown","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","StarIcon","icon","faStar","Stars","stars","colored","Array","_","then","imp","default","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","useForceUpdate","StatIcon","characterHP","faTint","finalHP","hp_","hp","baseATK","faFistRaised","characterATK","finalATK","atk_","atk","characterDEF","faShieldAlt","finalDEF","def_","def","eleMas","faMagic","faDice","faDiceD20","faSync","heal_","faFirstAid","StatIconEle","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","Item","onClick","StatInput","prependEle","defaultValue","onValueChange","percent","restProps","Prepend","Text","Append","undefined","placement","overlay","style","pointerEvents","faUndo","DisplayStatDiff","label","oldVal","fixed","unit","variant","diff","oldText","diffText","toFixed","xs","StatDisplay","equippedBuild","newBuild","editable","build","invalid","Stat","getStatUnit","fixedUnit","getStatName","labelVariant","ConditionalSelector","props","setConditional","defEle","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","count","Toggle","size","Menu","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","ReactionToggle","characterDispatch","charEleKey","src","HitModeToggle","m","CalculationDisplay","header","bg","Header","Body","subFormulaKeys","getPrintableFormulaStatKeyList","reverse","as","Card","eventKey","printStat","Collapse","subKey","printFormula","talentField","fieldText","fieldVariant","fieldFormulaText","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","DamageOptionsAndCalculation","Button","href","rel","xl","getStatNameRaw","immunityStatKey","elementImmunity","StatDisplayComponent","statsDisplayKeys","cardbg","md","JSON","stringify","CharacterCard","onEdit","onDelete","cardClassName","footer","forceUpdate","Promise","all","getDataImport","registerCharListener","unregisterCharListener","weaponName","weaponMainVal","weaponSubVal","weaponLevelName","weaponPassiveName","faEdit","faTrashAlt","thumbnail","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","Footer","Link","to","pathname","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","maxBuildsToShowList","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","setState","getInitialState","buildSetting","maxBuildsToShow","showCharacterModal","splitArtifacts","artifactDatabase","getArtifactDatabase","useLockedArts","lock","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","dropdownitemsForStar","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","every","Dropdown","totBuildNumber","generateBuilds","builds","generationProgress","generationDuration","generationSkipped","turbo","generatingBuilds","statFilters","ascending","optimizationTarget","getFormulaPath","artifactSetEffects","getAllArtifactSetEffectsObj","artArr","mainStatVal","minFilters","min","maxFilters","data","worker","terminate","onmessage","progress","timing","skipped","ReactGA","category","variable","obj","postMessage","BuildGeneratorEditorCard","characterName","artsAccounted","hasMinFilters","hasMaxFilters","disabledTurbo","totalBuildNumberString","toLocaleString","totalUnskipped","generationProgressString","generationSkippedString","totalUnskippedString","buildAlert","generationSkippedText","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cKey","Row","Col","lg","HitModeCard","StatFilterCard","setStatFilters","sFs","showArtCondModal","Badge","setNum","ButtonGroup","ItemText","setNkey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","conditionalElement","getSetEffectText","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","OverlayTrigger","Tooltip","class","borderTop","padding","borderRadius","SortByStatDropdown","updater","closeModal","modalBuild","BuildModal","Modal","show","onHide","contentClassName","Suspense","fallback","setCharacterKey","onClose","closeArtCondModal","ArtConditionalModal","artSetKeyList","flat","faTimes","getPieceIcon","getPieces","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","localStorage","loadFromLocalStorage","pageview","Container","ListGroup","ArtifactDisplayItem","join","React","Component","sortByText","getStatVariant","getStatNamePretty","drop","align","minWidth","faSortAmountDownAlt","faSortAmountUp","StatFilterItem","close","setFilter","isFloat","inputProps","minInputProps","maxInputProps","InputGroup","faTrash","remainingKeys","action","slotarr1","slotarr","getSlotIcon","initialState"],"mappings":"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","file":"static/js/11.c9391af1.chunk.js","sourcesContent":["import ElementalData from \"../Data/ElementalData\"\r\n\r\n/**\r\n * Remove artifacts that can never be used in optimized builds\r\n * @param {artifact[]} artifacts - List of artifacts of the same slot\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - The list of the set effects\r\n * @param {Set.<statKey>} significantStats - A set of stats that pruning needs to take into consideration\r\n * @param {bool} ascending - Whether the sorting is ascending or descending\r\n * @param {Set.<setKey>} alwaysAccepted - The list of artifact sets that are always included\r\n */\r\nexport function pruneArtifacts(artifacts, artifactSetEffects, significantStats, ascending, alwaysAccepted = new Set()) {\r\n  function shouldKeepFirst(first, second, preferFirst) {\r\n    let firstBetter = Object.entries(first).some(([k, v]) => v > (second[k] ?? 0))\r\n    let secondBetter = Object.entries(second).some(([k, v]) => v > (first[k] ?? 0))\r\n    if (ascending) [firstBetter, secondBetter] = [secondBetter, firstBetter]\r\n    // Keep if first is strictly better, uncomparable, or equal + prefer first\r\n    return firstBetter || (!secondBetter && preferFirst)\r\n  }\r\n\r\n  // Prune unused set effects. Sets with no relevant effects are regrouped to \"other\"\r\n  const prunedSetEffects = { \"other\": {} }\r\n  for (const set in artifactSetEffects)\r\n    for (const num in artifactSetEffects[set]) {\r\n      const effects = Object.entries(artifactSetEffects[set][num]).filter(([key]) => significantStats.has(key))\r\n      if (effects.length > 0) {\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set][num] = Object.fromEntries(effects)\r\n      }\r\n    }\r\n\r\n  // array of artifacts, artifact stats, and set (may be \"other\")\r\n  let tmp = artifacts.map(artifact => {\r\n    let stats = {}, set = (artifact.setKey in prunedSetEffects) ? artifact.setKey : \"other\"\r\n    if (significantStats.has(artifact.mainStatKey))\r\n      stats[artifact.mainStatKey] = artifact.mainStatVal\r\n    for (const { key, value } of artifact.substats)\r\n      if (significantStats.has(key))\r\n        stats[key] = (stats[key] ?? 0) + value\r\n    return { artifact, stats, set }\r\n  })\r\n\r\n  // Compare artifacts' base stats from the same set\r\n  tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) =>\r\n    tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) =>\r\n      candidateSet !== otherSet || shouldKeepFirst(candidateStats, otherStats, candidate.id <= other.id)\r\n    ))\r\n\r\n  if (!ascending) {\r\n    // Cross-check with different sets\r\n    tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) => {\r\n      // Possible \"additional stats\" if a build equips `candidate` on an empty slot.\r\n      let possibleStats = [...Object.values(prunedSetEffects[candidateSet]), {}].map(c => {\r\n        const current = { ...candidateStats }\r\n        Object.entries(c).forEach(([key, value]) => current[key] = (current[key] ?? 0) + value)\r\n        return current\r\n      })\r\n      return tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) => {\r\n        if (candidateSet === otherSet) return true // Already checked same-set\r\n\r\n        // Remove possibilities that shouldn't be kept\r\n        possibleStats = possibleStats.filter(current =>\r\n          shouldKeepFirst(current, otherStats, candidate.id <= other.id))\r\n        return possibleStats.length !== 0\r\n      })\r\n    })\r\n  }\r\n  // Reinstate `alwaysAccepted`\r\n  return [\r\n    ...artifacts.filter(artifact => alwaysAccepted.has(artifact.set)),\r\n    ...tmp.map(tmp => tmp.artifact).filter(artifact => !alwaysAccepted.has(artifact.set)),\r\n  ]\r\n}\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot, setFilters) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet = {}\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\r\n        else artifactsBySet[null] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu = {}, result = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The character. Will extract hitMode, autoInfused...\r\n  * @param {*} elemental - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, elemental = false) {\r\n  const { hitMode = \"\", autoInfused = false, reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (Object.keys(ElementalData).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, elemental = false) {\r\n  if (Object.keys(ElementalData).includes(skillKey)) return skillKey\r\n  const { autoInfused = false, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  let { reactionMode } = stats\r\n  //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n  if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n    reactionMode = \"vaporize\"\r\n  else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n    reactionMode = \"melt\"\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return eleKey\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelTemplateName = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getLevelString = (character) => {\r\n    const levelOverride = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n    return Character.getLevel(character.levelKey) === levelOverride ? Character.getlevelTemplateName(character.levelKey) : `Lvl. ${levelOverride}`\r\n  }\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentDocumentSections = (stats, talentKey) =>\r\n    this.getTalentDocument(stats.characterKey, talentKey).map(section => typeof section === \"function\" ? section(stats) : section)\r\n\r\n  static getTalentField = (stats, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\r\n    if (!stats) return defVal\r\n    const field = this.getTalentDocumentSections(stats, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\r\n    if (!field) return defVal\r\n    return typeof field === \"function\" ? field(stats) : field\r\n  }\r\n  static getTalentFieldValue = (field, key, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    return typeof field?.[key] === \"function\" ? field[key](stats) : field[key]\r\n  }\r\n\r\n  static getTalentStats = (charKey, talentKey, stats, defVal = null) => {\r\n    const talentStats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof talentStats === \"function\")\r\n      return talentStats(stats)\r\n    return talentStats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, stats) => {\r\n    const talents = this.getCDataObj(charKey)?.talent || {}\r\n    const statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      const talentStats = this.getTalentStats(charKey, talentKey, stats)\r\n      if (talentStats) statsArr.push(talentStats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (stats, talentKey, conditionalKey, defVal = null) => {\r\n    const sections = this.getTalentDocumentSections(stats, talentKey)\r\n    let cond = null\r\n    for (const section of sections) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(stats)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  //look up the formula, and generate the formulaPath to send to worker.\r\n  static getFormulaPath(characterKey, talentKey, formula) {\r\n    const formulaDB = this.getCDataObj(characterKey)?.formula\r\n    if (!formulaDB) return\r\n    let formulaKey\r\n    if (talentKey === \"auto\") {\r\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\r\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\r\n        if (formulaKey) {\r\n          talentKey = tk\r\n          break;\r\n        }\r\n      }\r\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\r\n    if (!formulaKey) return\r\n    return { characterKey, talentKey, formulaKey }\r\n  }\r\n\r\n\r\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\r\n\r\n  static getDisplayStatKeys = (stats, defVal = { basicKeys: [] }) => {\r\n    if (!stats) return defVal\r\n    const { characterKey } = stats\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    const isAutoElemental = Character.isAutoElemental(characterKey)\r\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    if (!isAutoElemental)\r\n      basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    if (this.hasTalentPage(characterKey)) {\r\n      const charFormulas = {}\r\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\r\n        Character.getTalentDocumentSections(stats, talentKey)?.forEach((section, sectionIndex) =>\r\n          section?.fields?.forEach((field, fieldIndex) => {\r\n            const hasFormula = field?.formula || this.getTalentField(stats, talentKey, sectionIndex, fieldIndex)?.formula\r\n            if (!hasFormula) return\r\n            if (!charFormulas[talentKey]) charFormulas[talentKey] = []\r\n            charFormulas[talentKey].push({ talentKey, sectionIndex, fieldIndex })\r\n          })))\r\n      return { basicKeys, ...charFormulas, transReactions }\r\n    } else {\r\n      //generic average hit parameters.\r\n      const genericAvgHit = []\r\n      if (!isAutoElemental) //add phy auto + charged + physical \r\n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\r\n\r\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\r\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\r\n      }\r\n      //show skill/burst \r\n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\r\n\r\n      //add reactions.\r\n      if (eleKey === \"pyro\") {\r\n        const reactions = []\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n        genericAvgHit.push(...reactions)\r\n      } else if (eleKey === \"cryo\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n      else if (eleKey === \"hydro\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n      return { basicKeys, genericAvgHit, transReactions }\r\n    }\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey, artifactIds) => {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    const artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      const artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar?.location === characterKey) return; //it is already equipped\r\n      const artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      const notCharLoc = (artNotOnChar?.location ?? \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = Object.fromEntries(Artifact.getSlotKeys().map(sKey => [sKey, \"\"]))\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.update(character);\r\n  }\r\n  static remove(characterKey) {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts\r\n    if (character.artifacts) //from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    else return {}//probably won't happen. just in case.\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    if (!character) return {}\r\n    character = deepClone(character)\r\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    initialStats.characterEle = this.getElementalKey(characterKey);\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.talentConditionals = talentConditionals\r\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, initialStats).forEach(s => this.mergeStats(initialStats, s))\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      const conditional = Character.getTalentConditional(initialStats, talentKey, conditionalKey)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    return initialStats\r\n  }\r\n}","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nimport { objMultiplication } from '../Util/Util.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    stats = stats(refineIndex)\r\n    if (stacks !== 1) objMultiplication(stats, stacks)\r\n    return stats\r\n  }\r\n}","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key => \r\n      !StatData[key]?.const &&\r\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20/40\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40/50\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50/60\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60/70\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70/80\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80/90\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20/40\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40/50\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50/60\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60/70\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70/80\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80/90\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { useCallback, useState } from \"react\"\r\n\r\nexport function useForceUpdate() {\r\n  const [, update] = useState()\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return forceUpdateHook\r\n}","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  characterHP: faTint,\r\n  finalHP: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  baseATK: faFistRaised,\r\n  characterATK: faFistRaised,\r\n  finalATK: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  characterDEF: faShieldAlt,\r\n  finalDEF: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  eleMas: faMagic,\r\n  critRate_: faDice,\r\n  critDMG_: faDiceD20,\r\n  enerRech_: faSync,\r\n  heal_: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText = \"\", diffText = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\nexport default function StatDisplay({ character, equippedBuild, newBuild, editable, statKey }) {\r\n  let val, oldVal, fixed, unit, variant;\r\n  let label = \"\"\r\n  if (typeof statKey === \"string\") {//basic statKey\r\n    if (newBuild && equippedBuild) {//comparable\r\n      //newbuild -> val\r\n      //equippedbuild ->old\r\n      val = newBuild?.finalStats?.[statKey] ?? 0\r\n      oldVal = equippedBuild?.finalStats?.[statKey] ?? 0\r\n    } else {\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      //build ->val\r\n      val = build?.finalStats?.[statKey] ?? 0\r\n      //statvaluewith override -> old\r\n      const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n      oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\r\n      oldVal === invalid && (oldVal = undefined)\r\n      if (statKey === \"finalHP\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\r\n      else if (statKey === \"finalDEF\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\r\n      else if (statKey === \"finalATK\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\r\n    }\r\n    unit = Stat.getStatUnit(statKey)\r\n    fixed = Stat.fixedUnit(statKey)\r\n    label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n  } else {//from character sheet\r\n    const build = newBuild ? newBuild : equippedBuild\r\n    const { talentKey, sectionIndex, fieldIndex } = statKey\r\n    const field = Character.getTalentField(build.finalStats, talentKey, sectionIndex, fieldIndex)\r\n    const labelVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n    label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build.finalStats)}</span>\r\n    fixed = Character.getTalentFieldValue(field, \"fixed\", build.finalStats, 0)\r\n    val = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n    if (newBuild && equippedBuild) {//comparable\r\n      oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n    }\r\n  }\r\n\r\n  if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nfunction ReactionToggle({ character: { characterKey, reactionMode = \"none\" }, characterDispatch, className }) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  return [\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"hydro\" && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"cryo\" && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nfunction HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ character, character: { characterKey }, build }) {\r\n  return <div>\r\n    {Object.entries(Character.getDisplayStatKeys(build.finalStats)).map(([talentKey, fields]) => {\r\n      let header = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n      return <Card bg=\"darkcontent\" text=\"lightfont\" key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              //simple statKey field\r\n              if (typeof field === \"string\") {\r\n                const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, [field]), build?.finalStats?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build.finalStats)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              //fields\r\n              const talentField = Character.getTalentField(build.finalStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n              const fieldText = Character.getTalentFieldValue(talentField, \"text\", build.finalStats)\r\n              const fieldVariant = Character.getTalentFieldValue(talentField, \"variant\", build.finalStats)\r\n              const fieldFormulaText = Character.getTalentFieldValue(talentField, \"formulaText\", build.finalStats)\r\n              const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(talentField, \"formula\", build.finalStats, [])\r\n              if (!fieldFormula || !fieldFormulaDependency) return null\r\n              const fieldValue = fieldFormula?.(build.finalStats)?.toFixed?.()\r\n              const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, fieldFormulaDependency), build?.finalStats?.modifiers).reverse()\r\n              return <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                  <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                  <Card.Body className=\"p-2\">\r\n                    <div className=\"mb-n2\">\r\n                      <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n                      {subFormulaKeys.map(subKey =>\r\n                        <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                      )}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DamageOptionsAndCalculation({ character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Accordion className={className}>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} characterDispatch={characterDispatch} /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n            <small>Expand below to edit enemy details and view calculation details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"details\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"details\">\r\n        <Card.Body className=\"p-2\">\r\n          <Card className=\"mb-2\" bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>Enemy Editor</Col>\r\n                <Col xs=\"auto\">\r\n                  <Button variant=\"warning\" size=\"sm\">\r\n                    <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                  </Button >\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            <Card.Body className=\"p-2\">\r\n              <Row >\r\n                <Col xs={12} xl={6} className=\"mb-2\">\r\n                  <StatInput\r\n                    name={<b>Enemy Level</b>}\r\n                    value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\r\n                    placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                    defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\r\n                    onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value })}\r\n                  />\r\n                </Col>\r\n                {Character.getElementalKeys().map(eleKey => {\r\n                  let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\r\n                  let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\r\n                  let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                  return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity })} className=\"text-darkcontent\">\r\n                        <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                      name={<b>{Stat.getStatName(statKey)}</b>}\r\n                      value={Character.getStatValueWithOverride(character, statKey)}\r\n                      placeholder={Stat.getStatNameRaw(statKey)}\r\n                      defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                      disabled={elementImmunity}\r\n                      percent\r\n                    />\r\n                  </Col>\r\n                })}\r\n                <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n          <CalculationDisplay character={character} build={build} />\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  </Accordion>\r\n}\r\nexport {\r\n  HitModeToggle,\r\n  ReactionToggle,\r\n};\r\n\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{fields.map(field => <StatDisplay key={JSON.stringify(field)} {...{ character, equippedBuild, newBuild, editable, statKey: field }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { useForceUpdate } from '../Util/ReactUtil';\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer }) {\r\n  const forceUpdate = useForceUpdate()\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(forceUpdate)\r\n    characterKey && CharacterDatabase.registerCharListener(characterKey, forceUpdate)\r\n    return () =>\r\n      characterKey && CharacterDatabase.unregisterCharListener(characterKey, forceUpdate)\r\n  }, [characterKey, forceUpdate])\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null;\r\n  const build = Character.calculateBuild(character)\r\n  const { setToSlots } = build\r\n\r\n  const { weapon = {}, constellation } = character\r\n  const name = Character.getName(characterKey)\r\n  const elementKey = Character.getElementalKey(characterKey)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const weaponName = Weapon.getWeaponName(weapon.key)\r\n  const weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  const weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  const weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  const weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  const weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => onEdit(characterKey)}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete(characterKey)}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={() => onEdit(characterKey)} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`thumb-big grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h3 className=\"mb-0\">{Character.getLevelString(character)} {`C${constellation}`}</h3>\r\n          <h5 className=\"mb-0\"><Stars stars={Character.getStar(characterKey)} colored /></h5>\r\n          <h2 className=\"mb-0\"><Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        characterKey\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nexport function msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.a6c3586f.worker.js\");\n}\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Modal, OverlayTrigger, ProgressBar, Row, Tooltip } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { HitModeToggle, ReactionToggle } from '../Character/CharacterDisplay/DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from '../Character/CharacterDisplay/StatDisplayComponent';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport { calculateTotalBuildNumber } from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nconst maxBuildsToShowList = [50, 25, 10, 5]\r\nconst maxBuildsToShowDefault = 25\r\nconst autoBuildGenLimit = 100\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { characterKey = \"\", maxBuildsToShow = maxBuildsToShowDefault } = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n      this.state = { ...this.state, characterKey, maxBuildsToShow }\r\n    }\r\n    if (props.location.characterKey) //override the one stored in BuildsDisplay.state\r\n      this.state.characterKey = props.location.characterKey\r\n\r\n    if (this.state.characterKey) {\r\n      const character = CharacterDatabase.get(this.state.characterKey)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.characterKey = \"\"\r\n    }\r\n\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    characterKey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    statFilters: {},\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    optimizationTarget: \"finalATK\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: maxBuildsToShowDefault,\r\n    generationSkipped: 0,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (characterKey = \"\") => {\r\n    if (!characterKey)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), characterKey: \"\" })\r\n    if (characterKey === this.state.characterKey) return\r\n    const character = CharacterDatabase.get(characterKey)\r\n    return this.setState(state => ({\r\n      ...BuildDisplay.getInitialState(), //get default state\r\n      characterKey, //add character key\r\n      ...(character?.buildSetting ?? {}), //override build settings, if character has any\r\n      maxBuildsToShow: state.maxBuildsToShow,//maintain build settings\r\n      showCharacterModal: state.showCharacterModal//maintain modal\r\n    }))\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.characterKey) // Make sure we have all slotKeys\r\n      return Object.fromEntries(Artifact.getSlotKeys().map(slotKey => [slotKey, []]))\r\n    const artifactDatabase = deepClone(ArtifactDatabase.getArtifactDatabase())\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        //if its equipped on the selected character, bypass the lock check\r\n        if (this.state.characterKey && val.location === this.state.characterKey) return\r\n        //if its locked, or equipped, remove from consideration\r\n        if (val.lock || val.location)\r\n          delete artifactDatabase[key]\r\n      })\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= autoBuildGenLimit)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0, generationSkipped: 0 })\r\n  }\r\n\r\n  generateBuilds = (turbo = false) => {\r\n    if (typeof turbo !== \"boolean\") turbo = false\r\n    let { split, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0, generationSkipped: 0 })\r\n    let { characterKey, setFilters, statFilters = {}, ascending, optimizationTarget, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    //get the formula for this targer\r\n    if (typeof optimizationTarget === \"object\") {\r\n      const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n      const { formula } = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex)\r\n      optimizationTarget = Character.getFormulaPath(characterKey, talentKey, formula)\r\n    }\r\n\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    const minFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { min }]) => [statKey, min]).filter(([, min]) => typeof min === \"number\"))\r\n    const maxFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { max }]) => [statKey, max]).filter(([, max]) => typeof max === \"number\"))\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, initialStats, artifactSetEffects,\r\n      setFilters, minFilters, maxFilters, maxBuildsToShow, optimizationTarget, ascending, turbo\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (typeof e.data.progress === \"number\") {\r\n        const { progress, timing = 0, skipped = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing, generationSkipped: skipped })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: this.totBuildNumber\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = ({ statsDisplayKeys, initialStats }) => {\r\n    let { setFilters, statFilters = {}, characterKey, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationSkipped, generationDuration, optimizationTarget, ascending } = this.state\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    const hasMinFilters = Object.entries(statFilters).some(([statKey, { min }]) => typeof min === \"number\")\r\n    const hasMaxFilters = Object.entries(statFilters).some(([statKey, { max }]) => typeof max === \"number\")\r\n    const disabledTurbo = ascending ? hasMinFilters : hasMaxFilters\r\n    this.split = this.splitArtifacts();\r\n    this.totBuildNumber = calculateTotalBuildNumber(this.split, setFilters)\r\n    let { totBuildNumber } = this\r\n    let totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n    let totalUnskipped = totBuildNumber - generationSkipped\r\n    let generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n    let generationSkippedString = generationSkipped?.toLocaleString() ?? generationSkipped\r\n    let totalUnskippedString = totalUnskipped?.toLocaleString() ?? totalUnskipped\r\n    let buildAlert = null\r\n    const generationSkippedText = Boolean(generationSkipped) && <span>(<b>{generationSkippedString}</b> skipped)</span>\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / (totalUnskipped)\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b className=\"text-monospace\">{generationProgressString}/{totalUnskippedString}</b> build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span><br />\r\n        <h6>Time elapsed: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b className=\"text-monospace\">{totalUnskippedString}</b> Build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span>\r\n        <h6>Total duration: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite a while to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={Character.getName(characterKey, \"Select Character\")} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cKey => this.selectCharacter(cKey)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6}>\r\n            {/* character selection */}\r\n            {characterKey ?\r\n              <CharacterCard header={characterDropDown} characterKey={characterKey} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* Hit mode options */}\r\n            {Character.hasTalentPage(characterKey) && <HitModeCard className=\"mb-2\" characterKey={characterKey} forceUpdate={() => { this.forceUpdateBuildDisplay(); this.autoGenerateBuilds() }} />}\r\n            {/* Final Stat Filter */}\r\n            <StatFilterCard className=\"mb-2\" statFilters={statFilters} statsDisplayKeys={statsDisplayKeys} setStatFilters={sFs => this.setState({ statFilters: sFs })} />\r\n          </Col>\r\n          <Col xs={12} lg={6}><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> Use Locked {\"&\"} Equipped Artifacts</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* main stat selector */}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <span>Artifact Main Stat</span>\r\n                  <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                    <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                  </Button>\r\n                </Card.Header>\r\n                <Card.Body className=\"mb-n2\">\r\n                  {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                  (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                    <h6 className=\"d-inline mb-0\">\r\n                      {Artifact.getSlotNameWithIcon(slotKey)}\r\n                    </h6>\r\n                    <DropdownButton disabled={generatingBuilds} size=\"sm\"\r\n                      title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                      className=\"d-inline\">\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                      {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                        <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                          {Stat.getStatNameWithPercent(mainStatKey)}\r\n                        </Dropdown.Item>\r\n                      )}\r\n                    </DropdownButton>\r\n                  </div>))}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{characterKey && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!characterKey || generatingBuilds}\r\n                variant={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              {totBuildNumber > warningBuildNumber && <OverlayTrigger\r\n                overlay={<Tooltip>\r\n                  Dramatically speeds up build time.<br />Yields only 1 build.\r\n                  {Boolean(disabledTurbo) && <span><hr />Does not work with <b>{Boolean(ascending) ? 'min' : 'max'}imum</b> stat filter when sort by <b>{Boolean(ascending) ? 'as' : 'des'}cending</b></span>}\r\n                </Tooltip>}\r\n              ><div class=\"btn\" style={{ borderTop: 'none', padding: 0 }}>\r\n                  <Button variant=\"success\" disabled={disabledTurbo} style={{ borderRadius: 0, ...disabledTurbo && { pointerEvents: 'none' } }} onClick={() => this.generateBuilds(true)}><strong>TURBO</strong></Button>\r\n                </div></OverlayTrigger>}\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0, generationSkipped: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <SortByStatDropdown\r\n              characterKey={characterKey}\r\n              disabled={generatingBuilds || !characterKey}\r\n              autoGenerateBuilds={this.autoGenerateBuilds}\r\n              setState={(updater) => this.setState(updater, this.autoGenerateBuilds)}\r\n              optimizationTarget={optimizationTarget}\r\n              ascending={ascending}\r\n              statsDisplayKeys={statsDisplayKeys}\r\n              initialStats={initialStats}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterKey }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard\r\n          characterKey={characterKey}\r\n          setCharacterKey={cKey => this.selectCharacter(cKey)}\r\n          newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.characterKey !== this.state.characterKey || prevState.maxBuildsToShow !== this.state.maxBuildsToShow) {\r\n      let { characterKey, maxBuildsToShow } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { characterKey, maxBuildsToShow })\r\n    }\r\n\r\n    if (this.state.characterKey) {\r\n      let character = CharacterDatabase.get(this.state.characterKey)\r\n      if (!character) return\r\n      const { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.update(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    const { characterKey, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    const characterName = Character.getName(characterKey, \"Character Name\")\r\n    const statsDisplayKeys = Character.getDisplayStatKeys(initialStats)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterKey={characterKey} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} initialStats={initialStats} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>{characterKey ? <span>Showing <b>{builds.length}</b> Builds generated for {characterName}</span> : <span>Select a character to generate builds.</span>}</Col>\r\n                <Col xs=\"auto\">\r\n                  <DropdownButton title={<span>Max builds to show: <b>{maxBuildsToShow}</b></span>} size=\"sm\">\r\n                    {maxBuildsToShowList.map(v => <Dropdown.Item key={v} onClick={() => this.setState({ maxBuildsToShow: v }, this.autoGenerateBuilds)}>{v}</Dropdown.Item>)}\r\n                  </DropdownButton>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <ArtifactDisplayItem build={build} characterKey={characterKey} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} setState={s => this.setState(s)} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\nfunction SortByStatDropdown({ characterKey, statsDisplayKeys, initialStats, disabled, optimizationTarget, ascending, setState }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  let sortByText = \"VALUE\"\r\n  if (typeof optimizationTarget === \"object\") {\r\n    const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n    const field = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex) ?? {}\r\n    const variant = Character.getTalentFieldValue(field, \"variant\", initialStats)\r\n    const text = Character.getTalentFieldValue(field, \"text\", initialStats)\r\n    sortByText = <b>{Character.getTalentName(characterKey, talentKey)}: <span className={`text-${variant}`}>{text}</span></b>\r\n  } else\r\n    sortByText = <b>Basic Stat: <span className={`text-${Stat.getStatVariant(optimizationTarget)}`}>{Stat.getStatNamePretty(optimizationTarget)}</span></b>\r\n\r\n  return <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle disabled={disabled} >\r\n        <span>Sort by {sortByText}</span>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu drop=\"up\" align=\"right\" style={{ minWidth: \"35rem\" }} >\r\n        <Row>\r\n          {Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n            let header = \"\"\r\n            if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n            else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n            else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n            else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n            return <Col xs={12} md={6} key={talentKey}>\r\n              <Dropdown.Header><b>{header}</b></Dropdown.Header>\r\n              {fields.map((field, i) => {\r\n                if (typeof field === \"string\")\r\n                  return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>{Stat.getStatNamePretty(field)}</Dropdown.Item>\r\n                const talentField = Character.getTalentField(initialStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n                return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>\r\n                  <span className={`text-${Character.getTalentFieldValue(talentField, \"variant\", initialStats)}`}>{Character.getTalentFieldValue(talentField, \"text\", initialStats)}</span>\r\n                </Dropdown.Item>\r\n              })}\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <Button onClick={() => setState(state => ({ ascending: !state.ascending }))} disabled={disabled} variant={ascending ? \"danger\" : \"primary\"}>\r\n      <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n      <span>{ascending ? \"Ascending\" : \"Descending\"}</span>\r\n    </Button>\r\n  </ButtonGroup >\r\n}\r\nfunction StatFilterItem({ statKey, statKeys = [], min, max, close, setFilter }) {\r\n  const isFloat = Stat.getStatUnit(statKey) === \"%\"\r\n  const inputProps = {\r\n    disabled: !statKey,\r\n    allowEmpty: true,\r\n    float: isFloat,\r\n  }\r\n  const minInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MIN\",\r\n    value: min,\r\n    onChange: (s) => setFilter(statKey, s, max)\r\n  }\r\n  const maxInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MAX\",\r\n    value: max,\r\n    onChange: (s) => setFilter(statKey, min, s)\r\n  }\r\n  return <InputGroup className=\"mb-2\">\r\n    <DropdownButton\r\n      as={InputGroup.Prepend}\r\n      title={Stat.getStatNamePretty(statKey, \"New Stat\")}\r\n      id=\"input-group-dropdown-1\"\r\n    >\r\n      {statKeys.map(sKey => <Dropdown.Item key={sKey} onClick={() => { close?.(); setFilter(sKey, min, max) }}>{Stat.getStatNamePretty(sKey)}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <CustomFormControl {...minInputProps} />\r\n    <CustomFormControl {...maxInputProps} />\r\n    {Boolean(close) && <InputGroup.Append>\r\n      <Button variant=\"danger\" onClick={close}><FontAwesomeIcon icon={faTrash} /></Button>\r\n    </InputGroup.Append>}\r\n  </InputGroup>\r\n}\r\n\r\nfunction HitModeCard({ characterKey, forceUpdate, className }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  const { hitMode } = character\r\n  const setHitmode = ({ hitMode }) => {\r\n    CharacterDatabase.update({ ...CharacterDatabase.get(characterKey), hitMode })\r\n    forceUpdate()\r\n  }\r\n  const setReactionMode = ({ reactionMode }) => {\r\n    CharacterDatabase.update({ ...CharacterDatabase.get(characterKey), reactionMode })\r\n    forceUpdate()\r\n  }\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Hit Mode Options</Card.Header>\r\n    <Card.Body>\r\n      <HitModeToggle hitMode={hitMode} characterDispatch={setHitmode} className=\"w-100\" />\r\n      <ReactionToggle character={character} characterDispatch={setReactionMode} className=\"w-100 mt-2\" />\r\n    </Card.Body>\r\n  </Card >\r\n}\r\n\r\nfunction StatFilterCard({ statsDisplayKeys = { basicKeys: [] }, statFilters = {}, setStatFilters, className }) {\r\n  const remainingKeys = statsDisplayKeys.basicKeys.filter(key => !Object.keys(statFilters).some(k => k === key))\r\n  const setFilter = (sKey, min, max) => setStatFilters({ ...statFilters, [sKey]: { min, max } })\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Final Stat Filter</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-n2\">\r\n        {Object.entries(statFilters).map(([statKey, { min, max }]) => {\r\n          return <Col xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} min={min} max={max} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Col>\r\n        })}\r\n        <Col xs={12}>\r\n          <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} />\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\n//for displaying each artifact build\r\nfunction ArtifactDisplayItem({ index, characterKey, build, statsDisplayKeys, setState }) {\r\n  return (<div>\r\n    <ListGroup.Item\r\n      variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n      onClick={() => setState({ modalBuild: build })}\r\n    >\r\n      <h5>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n        <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n          {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n        </Badge>\r\n      )}</h5>\r\n      <StatDisplayComponent {...{ character: CharacterDatabase.get(characterKey), newBuild: build, statsDisplayKeys, cardbg: (index % 2 ? \"lightcontent\" : \"darkcontent\") }} />\r\n    </ListGroup.Item>\r\n  </div>)\r\n}"],"sourceRoot":""}