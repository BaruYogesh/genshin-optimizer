{"version":3,"sources":["Character/CharacterDisplay/Components/FieldDisplay.jsx","Components/CustomFormControl.js","Conditional/ConditionalSelector.jsx","Character/CharacterDisplay/Components/ConditionalDisplay.jsx","Components/CharacterSelection.js","Components/StatDisplay.jsx","Character/StatInput.jsx","Artifact/ArtifactCard.jsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.jsx","Character/CharacterDisplay/CharacterOverviewPane.jsx","Character/CharacterDisplay/CharacterTalentPane.jsx","Character/CharacterDisplayCard.jsx","Components/WIPComponent.js","Artifact/Component/SetEffectDisplay.jsx","Character/CharacterDisplay/StatDisplayComponent.jsx","Character/CharacterDisplay/DamageOptionsAndCalculation.jsx"],"names":["FieldDisplay","field","index","equippedBuild","newBuild","className","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","value","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","parseInt","toFixed","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","icon","faQuestionCircle","style","cursor","unit","Item","variant","CustomFormControl","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","useEffect","aria-label","type","e","target","onBlur","onKeyDown","key","ConditionalSelector","conditional","conditionalValue","setConditional","name","conditionalNum","conditionalStateKey","states","text","maxStack","badge","Badge","Dropdown","Toggle","size","whiteSpace","Menu","onClick","Object","entries","map","i","stateKey","condial","Fragment","Array","keys","v","stack","Button","faCheckSquare","faSquare","ConditionalDisplay","characterDispatch","editable","fieldClassName","Conditional","resolve","conditionalStats","fields","conditionalFields","displayFields","statsToFields","condV","layeredAssignment","conditionalValues","deletePropPath","objClearEmpties","Card","bg","Header","ListGroup","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","characterKey","getName","DisplayStatDiff","label","val","oldVal","undefined","oldText","diffText","xs","StatDisplay","character","statKey","build","invalid","getStatValueWithOverride","Stat","getStatUnit","fixedUnit","StatIconEle","getStatName","Formula","get","labelVariant","hasOverride","StatInput","prependEle","defaultValue","onValueChange","percent","restProps","Prepend","Text","Append","Boolean","pointerEvents","faUndo","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","forceUpdateHook","useForceUpdate","Artifact","getDataImport","then","ArtifactDatabase","registerArtListener","unregisterArtListener","equipOnChar","charKey","equipArtifactOnChar","art","maximumEfficiency","substatsValidation","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","mainStatLevel","Math","max","min","mainStatVal","getMainStatValue","artifactValid","every","sstat","rolls","length","border","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","stat","numRolls","efficiency","effOpacity","statName","opacity","valid","Footer","Divider","ckey","update","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","equipArts","window","confirm","equipArtifacts","equippedArtifacts","unequipArts","fromEntries","getSlotKeys","sKey","StatDisplayComponent","statsDisplayKeys","Alert","Row","Col","getSetEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","CharacterOverviewPane","constellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","clamp","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","getConstellationImg","roundedCircle","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","weapon","editing","SetEditing","showDescription","setShowDescription","setStateWeapon","talentConditionals","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","conditionals","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","ItemText","getWeaponsOfType","filter","rarity","weaponObj","getLevelName","LevelNameData","refineIndex","faGavel","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","getElementalKeys","forEach","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","getStatNameRaw","xl","CharacterTalentPane","props","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","crystalize_hit","geo","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","artifactConditionals","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","updateState","forceUpdate","char","Promise","all","getCharacterDataImport","getWeaponDataImport","CharacterFormulaImport","current","newCKey","deepClone","flexArts","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","DamageOptionsAndCalculationEle","hasTalentPage","DamageOptionsAndCalculation","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","WIPComponent","Content","Pane","setEffectText","getSetEffectText","setStats","getArtifactSetNumStats","setStatsFields","getSetEffectConditionals","cardbg","sectionValues","JSON","stringify","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","eleKey","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/17.ea702966.chunk.js","sourcesContent":["import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../../Character\";\r\nimport { compareAgainstEquippedContext } from \"../../CharacterDisplayCard\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => field.canShow(stats), [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip>{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled }) {\r\n  const [conditionalNum=0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name\r\n  if (conditional.states) {//complex conditional \r\n    const state = conditional.states[conditionalStateKey] ?? {}\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(state.maxStack > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial], i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {//single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n    </Button>\r\n  }\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../../../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../../../Conditional/ConditionalSelector\"\r\nimport statsToFields from \"../../../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../../../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [stats.conditionalValues, conditional.keys, characterDispatch])\r\n\r\n  if (!canShow) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText = \"\", diffText = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\nexport default function StatDisplay({ character, equippedBuild, newBuild, editable, statKey }) {\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const formula = Formula.get(statKey)\r\n      const field = formula.field\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, equippedBuild, newBuild, editable, statKey])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { useForceUpdate } from '../Util/ReactUtil';\r\nimport Artifact from './Artifact';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }) {\r\n  const forceUpdateHook = useForceUpdate()\r\n  useEffect(() => {\r\n    Artifact.getDataImport()?.then(forceUpdateHook)\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () =>\r\n      artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook)\r\n  }, [artifactId, forceUpdateHook])\r\n  const equipOnChar = useCallback(\r\n    (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey),\r\n    [artifactId],\r\n  )\r\n  if (!artifactId && !artifactObj) return null;\r\n  const editable = !artifactObj//dont allow edit for flex artifacts\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n  const { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} className=\"float-right\" /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location, \"Inventory\")}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.update(art);\r\n                  }}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import React, { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport Character from \"../Character\";\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\nfunction CharacterArtifactPane({ character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => Character.getDisplayStatKeys(stats), [stats])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    }), [history])\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    Character.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild?.equippedArtifacts, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(Artifact.getSlotKeys().map(sKey => [sKey, \"\"])))\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text=\"lightfont\">\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {Object.entries(Artifact.getSetEffects(stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text=\"lightfont\">\r\n            <Card.Header>{Artifact.getSetName(setKey)}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        Artifact.getSlotKeys().map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : Artifact.getSlotKeys().map(slotKey =>\r\n          Boolean(stats.equippedArtifacts[slotKey]) && <Col {...artLayoutSize} key={stats.equippedArtifacts[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats.equippedArtifacts[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats.equippedArtifacts[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nimport ConditionalDisplay from \"./Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"./Components/FieldDisplay\"\r\nexport default function CharacterOverviewPane({ editable, character, character: { characterKey, constellation }, characterDispatch, equippedBuild, newBuild }) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const elementKey = Character.getElementalKey(characterKey)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90) })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey) })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats = {} }) {\r\n  if (Object.keys(statsVals ?? {}).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\nfunction WeaponStatsEditorCard({ editable, character, character: { characterKey, weapon = {} }, characterDispatch, equippedBuild, newBuild }) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { talentConditionals } = character\r\n        delete talentConditionals.weapon\r\n        characterDispatch({ talentConditionals })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  const weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key]\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <p><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></p>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, build)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{Weapon.getWeaponDescription(weapon.key)}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards({ editable, character, characterDispatch, equippedBuild, newBuild }) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = []\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, \"specializedStatKey\") })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, \"specializedStatVal\") })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport Character from \"../Character\";\r\nimport ConditionalDisplay from './Components/ConditionalDisplay';\r\nimport FieldDisplay from './Components/FieldDisplay';\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  const { character, character: { characterKey, levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ character, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey }, newBuild, equippedBuild }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n}\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ stats }) {\r\n  const sKey = \"crystalize_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard({ character: { characterKey, constellation, talentLevelKeys = {}, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" ? 1 : 0)).keys()].map(i =>\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = Character.getTalentStats(characterKey, talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (!section.canShow(build)) return null\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(build)\r\n        let fields = section.fields ?? []\r\n        return <div className=\"my-2\" key={\"section\" + i}>\r\n          <div xs={12}>\r\n            <div className=\"mb-2\">{talentText}</div>\r\n            {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n              {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n            </ListGroup>}\r\n          </div>\r\n          {Boolean(section.conditional) && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n        </div>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport { CharacterFormulaImport } from '../Formula';\r\n\r\nexport const compareAgainstEquippedContext = createContext()\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey) => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: {},\r\n  artifactConditionals: [],\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0] ?? \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  talentConditionals: [],\r\n  constellation: 0,\r\n})\r\n\r\nfunction characterReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey, {}) }\r\n    case \"statOverride\": {\r\n      const { statKey, value } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable, onClose, tabName }) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const [updateState, update] = useState({})\r\n  const forceUpdate = useCallback(() => update({}), [])\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey, {}) }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n      CharacterFormulaImport\r\n    ]).then(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild)\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => updateState && Character.calculateBuild(character, mainStatAssumptionLevel), [character, updateState, mainStatAssumptionLevel])\r\n\r\n  const HeaderIconDisplay = characterKey ? <span >\r\n    <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) commonPaneProps.artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = Character.hasTalentPage(characterKey) && <DamageOptionsAndCalculation {...{ character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          {editable ? <ButtonGroup>\r\n            <Dropdown as={ButtonGroup}>\r\n              <DropdownToggle as={Button}>\r\n                {HeaderIconDisplay}\r\n              </DropdownToggle>\r\n              <Dropdown.Menu as={CustomMenu}>\r\n                {Character.getAllCharacterKeys().map(charKey =>\r\n                  <Dropdown.Item key={charKey} onClick={() => setCharacterKey(charKey)}>\r\n                    <span >\r\n                      <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                      <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                    </span>\r\n                  </Dropdown.Item>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n              <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n            }>\r\n              <Dropdown.ItemText>\r\n                <span>Select Base Stat Template</span>\r\n              </Dropdown.ItemText>\r\n              {Character.getlevelKeys().map(lvlKey =>\r\n                <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n                  <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </ButtonGroup> : <span>{HeaderIconDisplay} {Character.getLevelString(character)}</span>}\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifact</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {Boolean(characterKey) && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled><h5 className=\"mb-0\">Talents</h5> <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Character/CharacterDisplay/Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Character/CharacterDisplay/Components/FieldDisplay\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport Artifact from \"../Artifact\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const setEffectText = Artifact.getSetEffectText(setKey, setNumKey, stats)\r\n  const setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = Artifact.getSetEffectConditionals(setKey, setNumKey)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals).map(([ckey, conditional]) => <ConditionalDisplay key={ckey} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, sectionValues]) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\n\r\nexport function InfusionAuraDropdown({ character: { infusionAura = \"\", characterKey }, characterDispatch, className }) {\r\n  if (!Character.isMelee(characterKey)) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\nexport function ReactionToggle({ character: { characterKey, reactionMode = \"none\", infusionAura }, characterDispatch, className }) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  let charEleKey = Character.getElementalKey(characterKey)\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ build }) {\r\n  const displayStatKeys = useMemo(() => Character.getDisplayStatKeys(build), [build])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([talentKey, fields]) => {\r\n      let header = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = Character.getTalentName(build.characterKey, talentKey, talentKey)\r\n      return <Card bg=\"darkcontent\" text=\"lightfont\" key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              //simple statKey field\r\n              if (typeof field === \"string\") {\r\n                const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              //fields\r\n              const formula = Formula.get(field)\r\n              const formulaField = formula.field//Character.getDisplayStatKeys already calls formula.field.canShow\r\n              const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n              const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n              const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n              const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [])\r\n              if (!fieldFormula || !fieldFormulaDependency) return null\r\n              const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n              const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n              return <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                  <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                  <Card.Body className=\"p-2\">\r\n                    <div className=\"mb-n2\">\r\n                      <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n                      {subFormulaKeys.map(subKey =>\r\n                        <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                      )}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DamageOptionsAndCalculation({ character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle as={Button} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text=\"lightfont\">\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value })}\r\n                    />\r\n                  </Col>\r\n                  {Character.getElementalKeys().map(eleKey => {\r\n                    let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}