{"version":3,"sources":["Build/Build.ts","Util/FormulaUtil.ts","Data/Characters/Albedo/data.ts","Data/Characters/Amber/data.ts","Data/Characters/Barbara/data.ts","Data/Characters/Beidou/data.ts","Data/Characters/Bennett/data.ts","Data/Characters/Chongyun/data.ts","Data/Characters/Diluc/data.ts","Data/Characters/Diona/data.ts","Data/Characters/Eula/data.ts","Data/Characters/Fischl/data.ts","Data/Characters/Ganyu/data.ts","Data/Characters/HuTao/data.ts","Data/Characters/Jean/data.ts","Data/Characters/Kaeya/data.ts","Data/Characters/Keqing/data.ts","Data/Characters/Klee/data.ts","Data/Characters/Lisa/data.ts","Data/Characters/Mona/data.ts","Data/Characters/Ningguang/data.ts","Data/Characters/Noelle/data.ts","Data/Characters/Qiqi/data.ts","Data/Characters/Razor/data.ts","Data/Characters/Rosaria/data.ts","Data/Characters/Sucrose/data.ts","Data/Characters/Tartaglia/data.ts","Data/Characters/Traveler/anemoData.ts","Data/Characters/Traveler/geoData.ts","Data/Characters/Venti/data.ts","Data/Characters/Xiao/data.ts","Data/Characters/Xiangling/data.ts","Data/Characters/Xingqiu/data.ts","Data/Characters/Xinyan/data.ts","Data/Characters/Yanfei/data.ts","Data/Characters/Zhongli/data.ts"],"names":["calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","getTalentStatKey","skillKey","stats","overwriteElement","hitMode","infusionAura","infusionSelf","reactionMode","characterEle","weaponType","ElementalData","includes","startsWith","eleKey","getTalentStatKeyVariant","basicDMGFormula","percent","elemental","val","statKey","s","data","baseStat","characterHP","characterATK","characterDEF","specializeStat","value","normal","hitArr","charged","atk1","atk2","plunging","dmg","low","high","skill","press","blossom","burst","burDMG","stacks","stacksVal","finalATK","finalDEF","formula","fromEntries","percentArr","tlvl","auto","arr","blossom50","hitModeMultiKey","geo_skill_hit_base_multi","enemyLevel_multi","geo_enemyRes_multi","dmg1c2","dmg2c2","dmg3c2","dmg4c2","blossom1c2","blossom2c2","blossom3c2","blossom4c2","aimedShot","fullAimedShot","hp","dmgPerWave","totDMG","aimShot","finalHP","detonationDMG","hpFlat","contHP","contHPFlat","flat","regenPerHit","heal_multi","contRegen","regen","spinning","onHit","lightningDMG","dmgRed","shield","powShield_","shieldElectro","hit1","hit2","constellation1","constellation4","lvl1hit1","lvl1hit2","lvl2hit1","lvl2hit2","explosion","healHP","healHPFlat","atkRatio","atkBonus","constellation","baseATK","infusionDuration","name","passive2","final","hit3","slashing","dot","hit2b","hit3b","dmgPerPaw","shieldFlat","shieldHp","durationPerPaw","continuousDmg","hpPercent","shieldCryo","shdStr","shieldHoldCryo","shieldHold","pressDMG","holdDMG","brandDMG","phyResDec","cyroResDec","baseDMG","stackDMG","physicalBurst25","physical_burst_hit_base_multi","physical_enemyRes_multi","Array","passive1","dmg50","oz","fullAimedShotOz","activeChar","addDmg","aimShot1","frostflake","frostflakeBloom","conditionalValues","character","ganyu","a1","Math","min","critRate_","charged_critRate_","critDMG_","atk_inc","low_dmg","low_regen","dmgC2","field_dmg","heal_flat","heal_atk","regen_flat","regen_atk","dmg_hold","anemo_skill_hit_base_multi","anemo_enemyRes_multi","heal","atk","stilleto","thunderclasp_slash","consec_slash","last","thunderclap_slashing","jumpyDmg","mineDmg","hit","stack0","stack1","stack2","stack3","summon","bubble_explosion","dmg_","omen_duration","jade","inheri_hp","dmg_per_gem","skill_dmg","shield_def","shield_flat","heal_def","heal_trigger","burst_dmg","bonus","herald","hitregen","base","continuousregen","healing","hold","atkspd","constellation6","ele","skillDmg","charged1","charged2","melee","ranged","riptide","flash","slash","blast","initial_dmg","initial_max","storm_dmg","storm_max","ele_dmg","passive3","windAuto","exp","geoAuto","full","hit_bonus","full_bonus","flatMap","totBurst","absorptionEle","swirlTicks","burstStatKey","absorptionStatKey","swirlStatKey","burstScaling","absorptionTicks","atk_bonus","drain","constellation2","filter","hydro_dmg_","def1","flat1","def2","flat2","def3","flat3","nyanDMG","defMulti","spinningDEF","_","steeleDMG","resonanceDMG","shieldBase","shieldMaxHP","petriDur","zliDMG","hpMulti","dmgHP","lowHP","highHP","steeleDMGHP","resonanceDMGHP","holdDMGHP"],"mappings":"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","file":"static/js/5.c038096a.chunk.js","sourcesContent":["import ElementalData from \"../Data/ElementalData\"\r\nimport { StatKey, StatDict, IArtifact, SubstatKey } from \"../Types/artifact\"\r\nimport { ArtifactSetEffects, PrunedArtifactSetEffects, ArtifactsBySlot, SetFilter } from \"../Types/Build\"\r\nimport { ArtifactSetKey, ElementKey } from \"../Types/consts\"\r\n\r\n/**\r\n * Remove artifacts that can never be used in optimized builds\r\n * @param {artifact[]} artifacts - List of artifacts of the same slot\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - The list of the set effects\r\n * @param {Set.<statKey>} significantStats - A set of stats that pruning needs to take into consideration\r\n * @param {bool} ascending - Whether the sorting is ascending or descending\r\n * @param {Set.<setKey>} alwaysAccepted - The list of artifact sets that are always included\r\n */\r\nexport function pruneArtifacts(artifacts: IArtifact[], artifactSetEffects: ArtifactSetEffects, significantStats: Set<StatKey>, ascending: boolean = false, alwaysAccepted: Set<ArtifactSetKey> = new Set()): IArtifact[] {\r\n  function shouldKeepFirst(first: StatDict, second: StatDict, preferFirst: boolean) {\r\n    let firstBetter = Object.entries(first).some(([k, v]) => v! > (second[k] ?? 0))\r\n    let secondBetter = Object.entries(second).some(([k, v]) => v! > (first[k] ?? 0))\r\n    if (ascending) [firstBetter, secondBetter] = [secondBetter, firstBetter]\r\n    // Keep if first is strictly better, uncomparable, or equal + prefer first\r\n    return firstBetter || (!secondBetter && preferFirst)\r\n  }\r\n\r\n  // Prune unused set effects. Sets with no relevant effects are regrouped to \"other\"\r\n  const prunedSetEffects: PrunedArtifactSetEffects = { \"other\": {} }\r\n  for (const set in artifactSetEffects)\r\n    for (const num in artifactSetEffects[set]) {\r\n      const effects = Object.entries(artifactSetEffects[set]![num]).filter(([key]) => significantStats.has(key as StatKey))\r\n      if (effects.length > 0) {\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = Object.fromEntries(effects)\r\n      }\r\n    }\r\n\r\n  // array of artifacts, artifact stats, and set (may be \"other\")\r\n  let tmp: { artifact: IArtifact, stats: Dict<StatKey, number>, set: ArtifactSetKey | \"other\" }[] = artifacts.map(artifact => {\r\n    let stats = {}, set: ArtifactSetKey | \"other\" = (artifact.setKey in prunedSetEffects) ? artifact.setKey : \"other\"\r\n    if (significantStats.has(artifact.mainStatKey as any))\r\n      stats[artifact.mainStatKey] = artifact.mainStatVal!\r\n    for (const { key, value } of artifact.substats)\r\n      if (significantStats.has(key as SubstatKey))\r\n        stats[key] = (stats[key] ?? 0) + value\r\n    for (const key in stats)\r\n      if (key.endsWith(\"enemyRes_\"))\r\n        stats[key] = -stats[key]\r\n    return { artifact, stats, set }\r\n  })\r\n\r\n  // Compare artifacts' base stats from the same set\r\n  tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) =>\r\n    tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) =>\r\n      candidateSet !== otherSet || shouldKeepFirst(candidateStats, otherStats, candidate.id! <= other.id!)\r\n    ))\r\n\r\n  if (!ascending) {\r\n    // Cross-check with different sets\r\n    tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) => {\r\n      // Possible \"additional stats\" if a build equips `candidate` on an empty slot.\r\n      let possibleStats = [...Object.values(prunedSetEffects[candidateSet]!), {}].map(c => {\r\n        const current: Dict<string, number> = { ...candidateStats }\r\n        Object.entries(c).forEach(([key, value]: any) => current[key] = (current[key] ?? 0) + (value ?? 0))\r\n        return current\r\n      })\r\n      return tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) => {\r\n        if (candidateSet === otherSet) return true // Already checked same-set\r\n\r\n        // Remove possibilities that shouldn't be kept\r\n        possibleStats = possibleStats.filter(current =>\r\n          shouldKeepFirst(current, otherStats, candidate.id! <= other.id!))\r\n        return possibleStats.length !== 0\r\n      })\r\n    })\r\n  }\r\n  // Reinstate `alwaysAccepted`\r\n  return [\r\n    ...artifacts.filter(artifact => alwaysAccepted.has(artifact.setKey)),\r\n    ...tmp.map(tmp => tmp.artifact).filter(artifact => !alwaysAccepted.has(artifact.setKey)),\r\n  ]\r\n}\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet: { [setKey in ArtifactSetKey]?: IArtifact[] } = {}\r\n    for (const artifact of (artifactsBySlot[slotKey] as any)) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey]!.push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet['null']) artifactsBySet['null'].push(artifact)\r\n        else artifactsBySet['null'] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu: ArtifactsBySlot = {}, result: ArtifactsBySlot[] = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1]!.length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot: ArtifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of (artifactsBySlot[slotKey] as any)) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art: IArtifact, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal!\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]: any) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The calcualted stats\r\n  * @param {*} overwriteElement - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, overwriteElement?: ElementKey | \"physical\") {\r\n  const { hitMode = \"\", infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n    return `${overwriteElement || characterEle}_${skillKey}_${hitMode}`\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, overwriteElement: ElementKey | \"physical\" | undefined | \"\" = \"\") {\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return skillKey//elemental DMG\r\n  const { infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) {\r\n      if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n      else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n    }\r\n    return overwriteElement || characterEle\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) {\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n  }\r\n  return eleKey\r\n}\r\n","import { getTalentStatKey } from \"../Build/Build\"\r\nimport { FormulaItem } from \"../Types/character\"\r\nimport { ElementKey } from \"../Types/consts\"\r\n\r\n//for basic formula in the format of \"percent/100 * s[statKey]\"\r\nexport function basicDMGFormula(percent, stats, skillKey, elemental?: \"physical\" | ElementKey): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats, elemental)\r\n  return [s => val * s[statKey], [statKey]]\r\n}\r\n","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1030, 2671, 3554, 5317, 5944, 6839, 7675, 8579, 9207, 10119, 10746, 11669, 12296, 13226],\r\n    characterATK: [20, 51, 67, 101, 113, 130, 146, 163, 175, 192, 204, 222, 233, 251],\r\n    characterDEF: [68, 17, 23, 352, 394, 453, 508, 568, 610, 670, 712, 773, 815, 876]\r\n  },\r\n\r\n  specializeStat: {\r\n    key: \"geo_dmg_\",\r\n    value: [0, 0, 0, 0, 7.2, 7.2, 14.4, 14.4, 14.4, 14.4, 21.6, 21.6, 28.8, 28.8]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [47.45, 51.32, 55.18, 60.7, 64.56, 68.98, 75.04, 81.11, 87.18, 93.81, 101.39, 110.32, 119.24, 128.16, 137.89],\r\n      [49.75, 53.8, 57.85, 63.64, 67.68, 72.31, 78.68, 85.04, 91.4, 98.35, 106.3, 115.65, 125.01, 134.36, 144.57],\r\n      [62.07, 67.13, 72.18, 79.4, 84.45, 90.22, 98.16, 106.1, 114.04, 122.7, 132.63, 144.3, 155.97, 167.64, 180.38]\r\n    ],\r\n  },\r\n  charged: {\r\n    atk1: [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 101.06, 109.96, 118.85, 127.74, 137.45],\r\n    atk2: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 128.62, 139.94, 151.26, 162.58, 174.93],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [130.4, 140.18, 149.96, 163, 172.78, 182.56, 195.6, 208.64, 221.68, 234.72, 247.76, 260.8, 277.1, 293.4, 309.7],\r\n    blossom: [133.6, 143.62, 153.64, 167, 177.02, 187.04, 200.4, 213.76, 227.12, 240.48, 253.84, 267.2, 283.9, 300.6, 317.3]\r\n  },\r\n  burst: {\r\n    dmg: [367.2, 394.74, 422.28, 459, 486.54, 514.08, 550.8, 587.52, 624.24, 660.96, 697.68, 734.4, 780.3, 826.2, 872.1],\r\n    blossom: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171]\r\n  }\r\n}\r\nfunction burDMG(percent, stats, skillKey, stacks = 0): [(stat: any) => number, string[]] {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  const stacksVal = stacks * 0.3\r\n  return [s => (val * s.finalATK + stacksVal * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")\r\n  ])),\r\n  charged: {\r\n    atk1: stats => basicDMGFormula(data.charged.atk1[stats.tlvl.auto], stats, \"charged\"),\r\n    atk2: stats => basicDMGFormula(data.charged.atk2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    blossom: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => val * s.finalDEF * s[statKey], [\"finalDEF\", statKey]]\r\n    },\r\n    blossom50: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalDEF * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.geo_skill_hit_base_multi + 0.25) * s.enemyLevel_multi * s.geo_enemyRes_multi,\r\n      [\"finalDEF\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"geo_skill_hit_base_multi\", \"enemyLevel_multi\", \"geo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg1c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 1),\r\n    dmg2c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 2),\r\n    dmg3c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 3),\r\n    dmg4c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 4),\r\n    blossom: stats => basicDMGFormula(data.burst.blossom[stats.tlvl.burst], stats, \"burst\"),\r\n    blossom1c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 1),\r\n    blossom2c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 2),\r\n    blossom3c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 3),\r\n    blossom4c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 4),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [793, 2038, 2630, 3940, 4361, 5016, 5578, 6233, 6654, 7309, 7730, 8385, 8806, 9461],\r\n    characterATK: [19, 48, 62, 93, 103, 118, 131, 147, 157, 172, 182, 198, 208, 223],\r\n    characterDEF: [50, 129, 167, 250, 277, 318, 354, 396, 423, 464, 491, 532, 559, 601]\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [46.44, 50.22, 54, 59.4, 63.18, 67.5, 73.44, 79.38, 85.32, 91.8, 98.28, 104.76, 111.24, 117.72, 124.2],\r\n      [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 100.1, 106.7, 113.3, 119.9, 126.5],\r\n      [59.34, 64.17, 69, 75.9, 80.73, 86.25, 93.84, 101.43, 109.02, 117.3, 125.58, 133.86, 142.14, 150.42, 158.7],\r\n    ],\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [41.36, 44.46, 47.56, 51.7, 54.8, 57.9, 62.04, 66.18, 70.31, 74.45, 78.58, 82.72, 87.89, 93.06, 98.23],\r\n    dmg: [123.2, 132.44, 141.68, 154, 163.24, 172.48, 184.8, 197.12, 209.44, 221.76, 234.08, 246.4, 261.8, 277.2, 292.6],\r\n  },\r\n  burst: {\r\n    dmgPerWave: [28.08, 30.19, 32.29, 35.1, 37.21, 39.31, 42.12, 44.93, 47.74, 50.54, 53.35, 56.16, 59.67, 63.18, 66.69],\r\n    totDMG: [505.44, 543.35, 581.26, 631.8, 669.71, 707.62, 758.16, 808.7, 859.25, 909.79, 960.34, 1010.88, 1074.06, 1137.24, 1200.42],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"pyro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    detonationDMG: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 200, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmgPerWave: stats => basicDMGFormula(data.burst.dmgPerWave[stats.tlvl.burst], stats, \"burst\"),\r\n    totDMG: stats => basicDMGFormula(data.burst.totDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [821, 2108, 2721, 4076, 4512, 5189, 5770, 6448, 6884, 7561, 7996, 8674, 9110, 9787],\r\n    characterATK: [13, 34, 44, 66, 73, 84, 94, 105, 112, 123, 130, 141, 148, 159],\r\n    characterDEF: [56, 144, 186, 279, 308, 355, 394, 441, 470, 517, 546, 593, 623, 669]\r\n  },\r\n  specializeStat: {\r\n    key: \"hp_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [37.84, 40.68, 43.52, 47.3, 50.14, 52.98, 56.76, 60.54, 64.33, 68.11, 72.05, 77.19, 82.34, 87.49, 92.63],\r\n      [35.52, 38.18, 40.85, 44.4, 47.06, 49.73, 53.28, 56.83, 60.38, 63.94, 67.63, 72.46, 77.29, 82.12, 86.95],\r\n      [41.04, 44.12, 47.2, 51.3, 54.38, 57.46, 61.56, 65.66, 69.77, 73.87, 78.14, 83.72, 89.3, 94.88, 100.47],\r\n      [55.2, 59.34, 63.48, 69, 73.14, 77.28, 82.8, 88.32, 93.84, 99.36, 105.1, 112.61, 120.12, 127.62, 135.13],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [166.24, 178.71, 191.18, 207.8, 220.27, 232.74, 249.36, 265.98, 282.61, 299.23, 316.52, 339.13, 361.74, 384.35, 406.96],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [0.75, 0.81, 0.86, 0.94, 0.99, 1.05, 1.13, 1.2, 1.27, 1.35, 1.43, 1.5, 1.59, 1.69, 1.78],\r\n    hpFlat: [72, 79, 87, 96, 105, 114, 125, 135, 147, 159, 172, 185, 199, 213, 228],\r\n    contHP: [4, 4.3, 4.6, 5, 5.3, 5.6, 6, 6.4, 6.8, 7.2, 7.6, 8, 8.5, 9, 9.5],\r\n    contHPFlat: [385, 424, 465, 510, 559, 610, 664, 722, 783, 847, 915, 986, 1059, 1136, 1217],\r\n    dmg: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n  },\r\n  burst: {\r\n    hp: [17.6, 18.92, 20.24, 22, 23.32, 24.64, 26.4, 28.16, 29.92, 31.68, 33.44, 35.2, 37.4, 39.6, 41.8],\r\n    flat: [1694, 1864, 2047, 2245, 2457, 2683, 2923, 3177, 3445, 3728, 4024, 4335, 4660, 4999, 5352],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    regenPerHit: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.hpFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    contRegen: stats => {\r\n      const hp = data.skill.contHP[stats.tlvl.skill] / 100\r\n      const flat = data.skill.contHPFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hp[stats.tlvl.burst] / 100\r\n      const flat = data.burst.flat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1094, 2811, 3628, 5435, 6015, 6919, 7694, 8597, 9178, 10081, 10662, 11565, 12146, 13050],\r\n    characterATK: [19, 49, 63, 94, 104, 119, 133, 148, 158, 174, 184, 200, 210, 225],\r\n    characterDEF: [54, 140, 180, 270, 299, 344, 382, 427, 456, 501, 530, 575, 603, 648]\r\n  },\r\n  specializeStat: {\r\n    key: \"electro_dmg_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [71.12, 76.91, 82.7, 90.97, 96.76, 103.38, 112.47, 121.57, 130.67, 140.59, 151.96, 165.33, 178.71, 192.08, 206.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.32, 95.51, 102.7, 112.97, 120.16, 128.38, 139.67, 150.97, 162.27, 174.59, 188.71, 205.32, 221.92, 238.53, 256.65],\r\n      [86.52, 93.56, 100.6, 110.66, 117.7, 125.75, 136.82, 147.88, 158.95, 171.02, 184.85, 201.12, 217.39, 233.65, 251.4],\r\n      [112.14, 121.27, 130.4, 143.44, 152.57, 163, 177.34, 191.69, 206.03, 221.68, 239.61, 260.7, 281.78, 302.87, 325.87],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.24, 60.82, 65.4, 71.94, 76.52, 81.75, 88.94, 96.14, 103.33, 111.18, 120.17, 130.75, 141.32, 151.9, 163.43],\r\n    finalATK: [101.82, 110.11, 118.4, 130.24, 138.53, 148, 161.02, 174.05, 187.07, 201.28, 217.56, 236.71, 255.85, 275, 295.88]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    hp: [14.4, 15.48, 16.56, 18, 19.08, 20.16, 21.6, 23.04, 24.48, 25.92, 27.36, 28.8, 30.6, 32.4, 34.2],\r\n    flat: [1386, 1525, 1675, 1837, 2010, 2195, 2392, 2600, 2819, 3050, 3293, 3547, 3813, 4090, 4379],\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    onHit: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n  },\r\n  burst: {\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    lightningDMG: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    dmgRed: [20, 21, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 37, 38, 39],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  },\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    finalATK: stats => basicDMGFormula(data.charged.finalATK[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shield: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.powShield_ / 100), [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    shieldElectro: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.powShield_ / 100) * 2.5, [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    hit1: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n    hit2: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 2 * data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    lightningDMG: stats => basicDMGFormula(data.burst.lightningDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    shield: stats => [s => 0.16 * s.finalHP * (1 + s.powShield_ / 100), [\"finalHP\", \"powShield_\"]],\r\n    shieldElectro: stats => [s => 0.16 * s.finalHP * (1 + s.powShield_ / 100) * 2.5, [\"finalHP\", \"powShield_\"]],\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(20, stats, \"electro\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1039, 2670, 3447, 5163, 5715, 6573, 7309, 8168, 8719, 9577, 10129, 10987, 11539, 12397],\r\n    characterATK: [16, 41, 53, 80, 88, 101, 113, 126, 134, 148, 156, 169, 178, 191],\r\n    characterDEF: [65, 166, 214, 321, 356, 409, 455, 508, 542, 596, 630, 684, 718, 771]\r\n  },\r\n  specializeStat: {\r\n    key: \"enerRech_\",\r\n    value: [0, 0, 0, 0, 6.7, 6.7, 13.3, 13.3, 13.3, 13.3, 20, 20, 26.7, 26.7]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [44.55, 48.17, 51.8, 56.98, 60.61, 64.75, 70.45, 76.15, 81.84, 88.06, 94.28, 100.49, 106.71, 112.92, 119.14],\r\n      [42.74, 46.22, 49.7, 54.67, 58.15, 62.13, 67.59, 73.06, 78.53, 84.49, 90.45, 96.42, 102.38, 108.35, 114.31],\r\n      [54.61, 59.06, 63.5, 69.85, 74.3, 79.38, 86.36, 93.35, 100.33, 107.95, 115.57, 123.19, 130.81, 138.43, 146.05],\r\n      [59.68, 64.54, 69.4, 76.34, 81.2, 86.75, 94.38, 102.02, 109.65, 117.98, 126.31, 134.64, 142.96, 151.29, 159.62],\r\n      [71.9, 77.75, 83.6, 91.96, 97.81, 104.5, 113.7, 122.89, 132.09, 142.12, 152.15, 162.18, 172.22, 182.25, 192.28]\r\n    ],\r\n  },\r\n  charged: {\r\n    atk1: [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n    atk2: [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [137.6, 147.92, 158.24, 172, 182.32, 192.64, 206.4, 220.16, 233.92, 247.68, 261.44, 275.2, 292.4, 309.6, 326.8],\r\n    lvl1hit1: [84, 90.3, 96.6, 105, 111.3, 117.6, 126, 134.4, 142.8, 151.2, 159.6, 168, 178.5, 189, 199.5],\r\n    lvl1hit2: [92, 98.9, 105.8, 115, 121.9, 128.8, 138, 147.2, 156.4, 165.6, 174.8, 184, 195.5, 207, 218.5],\r\n    lvl2hit1: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    lvl2hit2: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    explosion: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5]\r\n  },\r\n  burst: {\r\n    dmg: [232.8, 250.26, 267.72, 291, 308.46, 325.92, 349.2, 372.48, 395.76, 419.04, 442.32, 465.6, 494.7, 523.8, 552.9],\r\n    healHP: [6, 6.45, 6.9, 7.5, 7.95, 8.4, 9, 9.6, 10.2, 10.8, 11.4, 12, 12.75, 13.5, 14.25],\r\n    healHPFlat: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n    atkRatio: [56, 60.2, 64.4, 70, 74.2, 78.4, 84, 89.6, 95.2, 100.8, 106.4, 112, 119, 126, 133]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    atk1: stats => basicDMGFormula(data.charged.atk1[stats.tlvl.auto], stats, \"charged\"),\r\n    atk2: stats => basicDMGFormula(data.charged.atk2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const hp = data.burst.healHP[stats.tlvl.burst] / 100\r\n      const flat = data.burst.healHPFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    atkBonus: stats => {\r\n      const { constellation } = stats\r\n      const percent = (data.burst.atkRatio[stats.tlvl.burst] + (constellation < 1 ? 0 : 20)) / 100\r\n      return [s => percent * s.baseATK, [\"baseATK\"]]\r\n    }\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [921, 2366, 3054, 4574, 5063, 5824, 6475, 7236, 7725, 8485, 8974, 9734, 10223, 10984],\r\n    characterATK: [19, 48, 62, 93, 103, 118, 131, 147, 157, 172, 182, 198, 208, 223],\r\n    characterDEF: [54, 140, 180, 270, 299, 344, 382, 427, 456, 501, 530, 575, 603, 648]\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [70, 75.7, 81.4, 89.54, 95.24, 101.75, 110.7, 119.66, 128.61, 138.38, 148.15, 157.92, 167.68, 177.45, 187.22],\r\n      [63.12, 68.26, 73.4, 80.74, 85.88, 91.75, 99.82, 107.9, 115.97, 124.78, 133.59, 142.4, 151.2, 160.01, 168.82],\r\n      [80.32, 86.86, 93.4, 102.74, 109.28, 116.75, 127.02, 137.3, 147.57, 158.78, 169.99, 181.2, 192.4, 203.61, 214.82],\r\n      [101.22, 109.46, 117.7, 129.47, 137.71, 147.13, 160.07, 173.02, 185.97, 200.09, 214.21, 228.34, 242.46, 256.59, 270.71],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.29, 60.87, 65.45, 71.99, 76.57, 81.81, 89.01, 96.21, 103.41, 111.26, 119.12, 126.97, 134.82, 142.68, 150.53],\r\n    finalATK: [101.78, 110.07, 118.35, 130.19, 138.47, 147.94, 160.96, 173.97, 186.99, 201.2, 215.4, 229.6, 243.8, 258, 272.21]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.40, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    dmg: [172.04, 184.94, 197.85, 215.05, 227.95, 240.86, 258.06, 275.26, 292.47, 309.67, 326.88, 344.08, 365.59, 387.09, 408.60],\r\n    infusionDuration: [2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3, 3, 3, 3],\r\n  },\r\n  burst: {\r\n    dmg: [142.40, 153.08, 163.76, 178, 188.68, 199.36, 213.60, 227.84, 242.08, 256.32, 270.56, 284.80, 302.60, 320.40, 338.20],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    finalATK: stats => basicDMGFormula(data.charged.finalATK[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(50, stats, \"elemental\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1011, 2621, 3488, 5219, 5834, 6712, 7533, 8421, 9036, 9932, 10547, 11453, 12068, 12981],\r\n    characterATK: [26, 68, 90, 135, 151, 173, 194, 217, 233, 256, 272, 295, 311, 335],\r\n    characterDEF: [61, 158, 211, 315, 352, 405, 455, 509, 546, 600, 637, 692, 729, 784]\r\n  },\r\n  specializeStat: {\r\n    key: \"critRate_\",\r\n    value: [0, 0, 0, 0, 4.8, 4.8, 9.6, 9.6, 9.6, 9.6, 14.4, 14.4, 19.2, 19.2]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [89.7, 97, 104.3, 114.73, 122.03, 130.38, 141.85, 153.32, 164.79, 177.31, 191.65, 208.52, 225.38, 242.25, 260.65],\r\n      [87.63, 94.77, 101.9, 112.09, 119.22, 127.38, 138.58, 149.79, 161, 173.23, 187.24, 203.72, 220.2, 236.67, 254.65],\r\n      [98.81, 106.86, 114.9, 126.39, 134.43, 143.63, 156.26, 168.9, 181.54, 195.33, 211.13, 229.71, 248.29, 266.87, 287.14],\r\n      [133.99, 144.89, 155.8, 171.38, 182.29, 194.75, 211.89, 229.03, 246.16, 264.86, 286.28, 311.48, 336.67, 361.86, 389.34],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [68.8, 74.4, 80, 88, 93.6, 100, 108.8, 117.6, 126.4, 136, 147, 159.94, 172.87, 185.81, 199.92],\r\n    final: [124.7, 134.85, 145, 159.5, 169.65, 181.25, 197.2, 213.15, 229.1, 246.5, 266.44, 289.88, 313.33, 336.78, 362.36]\r\n  },\r\n  plunging: {\r\n    dmg: [89.51, 96.79, 104.08, 114.48, 121.77, 130.1, 141.54, 152.99, 164.44, 176.93, 189.42, 201.91, 214.4, 226.89, 239.37],\r\n    low: [178.97, 193.54, 208.11, 228.92, 243.49, 260.13, 283.03, 305.92, 328.81, 353.78, 378.76, 403.73, 428.7, 453.68, 478.65],\r\n    high: [223.55, 241.74, 259.94, 285.93, 304.13, 324.92, 353.52, 382.11, 410.7, 441.89, 473.09, 504.28, 535.47, 566.66, 597.86]\r\n  },\r\n  skill: {\r\n    hit1: [94.4, 101.48, 108.56, 118, 125.08, 132.16, 141.6, 151.04, 160.48, 169.92, 179.36, 188.8, 200.6, 212.4, 224.2],\r\n    hit2: [97.6, 104.92, 112.24, 122, 129.32, 136.64, 146.4, 156.16, 165.92, 175.68, 185.44, 195.2, 207.4, 219.6, 231.8],\r\n    hit3: [128.8, 138.46, 148.12, 161, 170.66, 180.32, 193.2, 206.08, 218.96, 231.84, 244.72, 257.6, 273.7, 289.8, 305.9],\r\n  },\r\n  burst: {\r\n    slashing: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n    dot: [60, 64.5, 69, 75, 79.5, 84, 90, 96, 102, 108, 114, 120, 127.5, 135, 142.5],\r\n    explosion: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    ...Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n      [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n    hit2b: stats => basicDMGFormula(data.skill.hit2[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n    hit3b: stats => basicDMGFormula(data.skill.hit3[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [802, 2061, 2661, 3985, 4411, 5074, 5642, 6305, 6731, 7393, 7818, 8481, 8907, 9570],\r\n    characterATK: [18, 46, 59, 88, 98, 113, 125, 140, 149, 164, 174, 188, 198, 212],\r\n    characterDEF: [50, 129, 167, 250, 277, 318, 354, 396, 422, 464, 491, 532, 559, 601]\r\n  },\r\n  specializeStat: {\r\n    key: \"cryo_dmg_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 77.18, 83.97, 90.76, 97.55, 104.96],\r\n      [33.54, 36.27, 39, 42.9, 45.63, 48.75, 53.04, 57.33, 61.62, 66.3, 71.66, 77.97, 84.28, 90.58, 97.46],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91.88, 99.96, 108.05, 116.13, 124.95],\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19]\r\n    ],\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmgPerPaw: [41.92, 45.06, 48.21, 52.4, 55.54, 58.69, 62.88, 67.07, 71.26, 75.46, 79.65, 83.84, 89.08, 94.32, 99.56],\r\n    shieldFlat: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    shieldHp: [7.2, 7.74, 8.28, 9, 9.54, 10.08, 10.8, 11.52, 12.24, 12.96, 13.68, 14.4, 15.3, 16.2, 17.1],\r\n    durationPerPaw: [1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4]\r\n  },\r\n  burst: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    continuousDmg: [52.64, 56.59, 60.54, 65.8, 69.75, 73.7, 78.96, 84.22, 89.49, 94.75, 100.02, 105.28, 111.86, 118.44, 125.02],\r\n    hpFlat: [513, 565, 620, 680, 744, 813, 885, 962, 1044, 1129, 1219, 1313, 1411, 1514, 1621],\r\n    hpPercent: [5.34, 5.74, 6.14, 6.67, 7.07, 7.47, 8, 8.54, 9.07, 9.6, 10.14, 10.67, 11.34, 12.01, 12.67]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shieldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.powShield_ / 100) * shdStr, [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    shield: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.powShield_ / 100) * shdStr, [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    shieldHoldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.powShield_ / 100) * shdStr, [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    shieldHold: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.powShield_ / 100) * shdStr, [\"finalHP\", \"powShield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmgPerPaw[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hpPercent[stats.tlvl.burst] / 100\r\n      const flat = data.burst.hpFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    continuousDmg: stats => basicDMGFormula(data.burst.continuousDmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1030, 2671, 3554, 5317, 5944, 6839, 7675, 8579, 9207, 10119, 10746, 11669, 12296, 13226],\r\n    characterATK: [27, 69, 92, 138, 154, 177, 198, 222, 238, 262, 278, 302, 318, 342],\r\n    characterDEF: [58, 152, 202, 302, 337, 388, 436, 487, 523, 574, 610, 662, 698, 751]\r\n  },\r\n  specializeStat: {\r\n    key: \"critDMG_\",\r\n    value: [0, 0, 0, 0, 9.6, 9.6, 19.2, 19.2, 19.2, 19.2, 28.8, 28.8, 38.4, 38.4]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [89.73, 97.04, 104.34, 114.77, 122.08, 130.43, 141.9, 153.38, 164.86, 177.38, 191.72, 208.6, 225.47, 242.34, 260.75],\r\n      [93.55, 101.17, 108.78, 119.66, 127.27, 135.98, 147.94, 159.91, 171.87, 184.93, 199.88, 217.47, 235.06, 252.65, 271.84],\r\n      [56.8, 61.42, 66.05, 72.65, 77.27, 82.56, 89.82, 97.09, 104.35, 112.28, 121.36, 132.04, 142.72, 153.4, 165.05],//x2\r\n      [112.64, 121.81, 130.98, 144.08, 153.25, 163.73, 178.13, 192.54, 206.95, 222.67, 240.68, 261.86, 283.03, 304.21, 327.32],\r\n      [71.83, 77.68, 83.53, 91.88, 97.73, 104.41, 113.6, 122.79, 131.97, 142, 153.48, 166.99, 180.49, 194, 208.74],//x2\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [68.8, 74.4, 80, 88, 93.6, 100, 108.8, 117.6, 126.4, 136, 147, 159.94, 172.87, 185.81, 199.92],\r\n    final: [124.4, 134.52, 144.65, 159.12, 169.24, 180.81, 196.72, 212.64, 228.55, 245.91, 265.79, 289.18, 312.57, 335.96, 361.48],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 159.37, 173.39, 187.41, 201.44, 216.74],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 318.67, 346.71, 374.75, 402.79, 433.38],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 398.03, 433.06, 468.08, 503.11, 541.32],\r\n  },\r\n  skill: {\r\n    pressDMG: [146.4, 157.38, 168.36, 183, 193.98, 204.96, 219.6, 234.24, 248.88, 263.52, 278.16, 292.8, 311.1, 329.4, 347.7],\r\n    holdDMG: [245.6, 264.02, 282.44, 307, 325.42, 343.84, 368.4, 392.96, 417.52, 442.08, 466.64, 491.2, 521.9, 552.6, 583.3],\r\n    brandDMG: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    phyResDec: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25, 25],\r\n    cyroResDec: [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 25, 25, 25, 25]\r\n  },\r\n  burst: {\r\n    dmg: [245.6, 264.02, 282.44, 307, 325.42, 343.84, 368.4, 392.96, 417.52, 442.08, 466.64, 491.2, 521.9, 552.6, 583.3],\r\n    baseDMG: [367.05, 396.92, 426.8, 469.48, 499.36, 533.5, 580.45, 627.4, 674.34, 725.56, 784.25, 853.26, 922.27, 991.29, 1066.57],\r\n    stackDMG: [74.99, 81.1, 87.2, 95.92, 102.02, 109, 118.59, 128.18, 137.78, 148.24, 160.23, 174.33, 188.43, 202.53, 217.91]\r\n  }\r\n}\r\nconst physicalBurst25 = (val, stats): FormulaItem => {\r\n  val = val / 100\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"burst_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.physical_burst_hit_base_multi + 0.25) * s.enemyLevel_multi * s.physical_enemyRes_multi, [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"physical_burst_hit_base_multi\", \"enemyLevel_multi\", \"physical_enemyRes_multi\"]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    pressDMG: stats => basicDMGFormula(data.skill.pressDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    brandDMG: stats => basicDMGFormula(data.skill.brandDMG[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [i, stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats, \"burst\", \"physical\")])),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [`${i}_50`, stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats)]))\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] / 2, stats, \"burst\", \"physical\"),\r\n    dmg50: stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] / 2, stats)\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [770, 1979, 2555, 3827, 4236, 4872, 5418, 6054, 6463, 7099, 7508, 8144, 8553, 9189],\r\n    characterATK: [20, 53, 68, 102, 113, 130, 144, 161, 172, 189, 200, 216, 227, 244],\r\n    characterDEF: [50, 128, 165, 247, 274, 315, 350, 391, 418, 459, 485, 526, 553, 594]\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [44.12, 47.71, 51.3, 56.43, 60.02, 64.13, 69.77, 75.41, 81.05, 87.21, 93.37, 99.52, 105.68, 111.83, 117.99],\r\n      [46.78, 50.59, 54.4, 59.84, 63.65, 68, 73.98, 79.97, 85.95, 92.48, 99.01, 105.54, 112.06, 118.59, 125.12],\r\n      [58.14, 62.87, 67.6, 74.36, 79.09, 84.5, 91.94, 99.37, 106.81, 114.92, 123.03, 131.14, 139.26, 147.37, 155.48],\r\n      [57.71, 62.4, 67.1, 73.81, 78.51, 83.88, 91.26, 98.64, 106.02, 114.07, 122.12, 130.17, 138.23, 146.28, 154.33],\r\n      [72.07, 77.93, 83.8, 92.18, 98.05, 104.75, 113.97, 123.19, 132.4, 142.46, 152.52, 162.57, 172.63, 182.68, 192.74],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    oz: [88.8, 95.46, 102.12, 111, 117.66, 124.32, 133.2, 142.08, 150.96, 159.84, 168.72, 177.6, 188.7, 199.8, 210.9],\r\n    dmg: [115.44, 124.1, 132.76, 144.3, 152.96, 161.62, 173.16, 184.7, 196.25, 207.79, 219.34, 230.88, 245.31, 259.74, 274.17],\r\n  },\r\n  burst: {\r\n    dmg: [208, 223.6, 239.2, 260, 275.6, 291.2, 312, 332.8, 353.6, 374.4, 395.2, 416, 442, 468, 494],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"electro\"),\r\n    fullAimedShotOz: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto] * (152.7 / 100), stats, \"charged\", \"electro\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    oz: stats => basicDMGFormula(data.skill.oz[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + (stats.constellation >= 2 ? 200 : 0), stats, \"skill\"),\r\n    activeChar: stats => basicDMGFormula(30, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    addDmg: stats => basicDMGFormula(222, stats, \"burst\"),\r\n    regen: stats => [s => 0.2 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"skill\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(22, stats, \"normal\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [763, 1978, 2632, 3939, 4403, 5066, 5686, 6355, 6820, 7495, 7960, 8643, 9108, 9797],\r\n    characterATK: [26, 68, 90, 135, 151, 173, 194, 217, 233, 256, 272, 295, 311, 335],\r\n    characterDEF: [49, 127, 169, 253, 283, 326, 366, 409, 439, 482, 512, 556, 586, 630]\r\n  },\r\n  specializeStat: {\r\n    key: \"critDMG_\",\r\n    value: [0, 0, 0, 0, 9.6, 9.6, 19.2, 19.2, 19.2, 19.2, 28.8, 28.8, 38.4, 38.4]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [31.73, 34.32, 36.9, 40.59, 43.17, 46.13, 50.18, 54.24, 58.3, 62.73, 67.8, 73.77, 79.74, 85.7, 92.21],\r\n      [35.6, 38.5, 41.4, 45.54, 48.44, 51.75, 56.3, 60.86, 65.41, 70.38, 76.07, 82.77, 89.46, 96.16, 103.46],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [48.25, 52.17, 56.1, 61.71, 65.64, 70.13, 76.3, 82.47, 88.64, 95.37, 103.08, 112.16, 121.23, 130.3, 140.19],\r\n      [57.62, 62.31, 67, 73.7, 78.39, 83.75, 91.12, 98.49, 105.86, 113.9, 123.11, 133.95, 144.78, 155.61, 167.43],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    aimShot1: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n    frostflake: [128, 137.6, 147.2, 160, 169.6, 179.2, 192, 204.8, 217.6, 230.4, 243.2, 256, 272, 288, 304],\r\n    frostflakeBloom: [217.6, 233.92, 250.24, 272, 288.32, 304.64, 326.4, 348.16, 369.92, 391.68, 413.44, 435.2, 462.4, 489.6, 516.8]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    dmg: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  },\r\n  burst: {\r\n    dmg: [70.27, 75.54, 80.81, 87.84, 93.11, 98.38, 105.41, 112.44, 119.46, 126.49, 133.52, 140.54, 149.33, 158.11, 166.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    aimShot1: stats => basicDMGFormula(data.charged.aimShot1[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n    frostflake: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.ganyu?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflake[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflake[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n    frostflakeBloom: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.ganyu?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflakeBloom[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflakeBloom[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1211, 3141, 4179, 6253, 6990, 8042, 9026, 10089, 10826, 11899, 12637, 13721, 14459, 15552],\r\n    characterATK: [8, 21, 29, 43, 48, 55, 62, 69, 74, 81, 86, 94, 99, 106],\r\n    characterDEF: [68, 177, 235, 352, 394, 453, 508, 568, 610, 670, 712, 773, 815, 876]\r\n  },\r\n  specializeStat: {\r\n    key: \"critDMG_\",\r\n    value: [0, 0, 0, 0, 9.6, 9.6, 19.2, 19.2, 19.2, 19.2, 28.8, 28.8, 38.4, 38.4]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [46.89, 50.08, 53.28, 57.54, 60.74, 64.47, 69.26, 74.06, 78.85, 83.65, 88.44, 93.24, 98.04, 102.83, 107.63],\r\n      [48.25, 51.54, 54.83, 59.22, 62.51, 66.35, 71.28, 76.22, 81.15, 86.09, 91.02, 95.96, 100.89, 105.83, 110.76],\r\n      [61.05, 65.21, 69.38, 74.93, 79.09, 83.94, 90.19, 96.43, 102.68, 108.92, 115.16, 121.41, 127.65, 133.89, 140.14],\r\n      [65.64, 70.12, 74.59, 80.56, 85.03, 90.26, 96.97, 103.68, 110.4, 117.11, 123.82, 130.54, 137.25, 143.96, 150.68],\r\n      [33.27, 35.54, 37.81, 40.84, 43.1, 45.75, 49.15, 52.56, 55.96, 59.36, 62.77, 66.17, 69.57, 72.98, 76.38],//5.1\r\n      [35.2, 37.6, 40, 43.2, 45.6, 48.4, 52, 55.6, 59.2, 62.8, 66.4, 70, 73.6, 77.2, 80.8],//5.2\r\n      [85.96, 91.82, 97.68, 105.49, 111.36, 118.19, 126.98, 135.78, 144.57, 153.36, 162.15, 170.94, 179.73, 188.52, 197.31],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [135.96, 145.23, 154.5, 166.86, 176.13, 186.95, 200.85, 214.76, 228.66, 242.57, 256.47, 270.38, 284.28, 298.19, 312.09],\r\n  },\r\n  plunging: {\r\n    dmg: [65.42, 69.88, 74.34, 80.29, 84.75, 89.95, 96.64, 103.33, 110.02, 116.71, 123.4, 130.1, 136.79, 143.48, 150.17],\r\n    low: [130.81, 139.73, 148.65, 160.54, 169.46, 179.86, 193.24, 206.62, 220, 233.38, 246.76, 260.13, 273.51, 286.89, 300.27],\r\n    high: [163.39, 174.53, 185.67, 200.52, 211.66, 224.66, 241.37, 258.08, 274.79, 291.5, 308.21, 324.92, 341.63, 358.34, 375.05],\r\n  },\r\n  skill: {\r\n    atk_inc: [3.84, 4.07, 4.3, 4.6, 4.83, 5.06, 5.36, 5.66, 5.96, 6.26, 6.56, 6.85, 7.15, 7.45, 7.75],\r\n    dmg: [64, 68.8, 73.6, 80, 84.8, 89.6, 96, 102.4, 108.8, 115.2, 121.6, 128, 136, 144, 152],\r\n  },\r\n  burst: {\r\n    dmg: [303.27, 321.43, 339.59, 363.2, 381.36, 399.52, 423.13, 446.74, 470.34, 493.95, 517.56, 541.17, 564.78, 588.38, 611.99],\r\n    low_dmg: [379.09, 401.79, 424.49, 454, 476.7, 499.4, 528.91, 558.42, 587.93, 617.44, 646.95, 676.46, 705.97, 735.48, 764.99],\r\n    regen: [6.26, 6.64, 7.01, 7.5, 7.88, 8.25, 8.74, 9.23, 9.71, 10.2, 10.69, 11.18, 11.66, 12.15, 12.64],\r\n    low_regen: [8.35, 8.85, 9.35, 10, 10.5, 11, 11.65, 12.3, 12.95, 13.6, 14.25, 14.9, 15.55, 16.2, 16.85]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    atk_inc: stats => {\r\n      const val = data.skill.atk_inc[stats.tlvl.skill] / 100\r\n      // TODO Check if we need to cap the bonus here or elsewhere.\r\n      return [s => Math.min(val * s.finalHP, 4 * s.baseATK), [\"finalHP\", \"baseATK\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmgC2: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => (val * s.finalATK + 0.1 * s.finalHP) * s[statKey], [\"finalATK\", statKey]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    low_dmg: stats => basicDMGFormula(data.burst.low_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const val = data.burst.regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    low_regen: stats => {\r\n      const val = data.burst.low_regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1144, 2967, 3948, 5908, 6605, 7599, 8528, 9533, 10230, 11243, 11940, 12965, 13662, 14695],\r\n    characterATK: [19, 48, 64, 96, 108, 124, 139, 155, 166, 183, 194, 211, 222, 239],\r\n    characterDEF: [60, 155, 206, 309, 345, 397, 446, 499, 535, 588, 624, 678, 715, 769]\r\n  },\r\n  specializeStat: {\r\n    key: \"heal_\",\r\n    value: [0, 0, 0, 0, 5.5, 5.5, 11.1, 11.1, 11.1, 11.1, 16.6, 16.6, 22.2, 22.2]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [48.33, 52.27, 56.2, 61.82, 65.75, 70.25, 76.43, 82.61, 88.8, 95.54, 103.27, 112.36, 121.44, 130.53, 140.44],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [60.29, 65.19, 70.1, 77.11, 82.02, 87.63, 95.34, 103.05, 110.76, 119.17, 128.81, 140.14, 151.48, 162.81, 175.18],\r\n      [65.88, 71.24, 76.6, 84.26, 89.62, 95.75, 104.18, 112.6, 121.03, 130.22, 140.75, 153.14, 165.52, 177.91, 191.42],\r\n      [79.21, 85.65, 92.1, 101.31, 107.76, 115.13, 125.26, 135.39, 145.52, 156.57, 169.23, 184.13, 199.02, 213.91, 230.16],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [162.02, 175.21, 188.4, 207.24, 220.43, 235.5, 256.22, 276.95, 297.67, 320.28, 346.19, 376.65, 407.11, 437.58, 470.81],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [292, 313.9, 335.8, 365, 386.9, 408.8, 438, 467.2, 496.4, 525.6, 554.8, 584, 620.5, 657, 693.5],\r\n  },\r\n  burst: {\r\n    skill: [424.8, 456.66, 488.52, 531, 562.86, 594.72, 637.2, 679.68, 722.16, 764.64, 807.12, 849.6, 902.7, 955.8, 1008.9],\r\n    field_dmg: [78.4, 84.28, 90.16, 98, 103.88, 109.76, 117.6, 125.44, 133.28, 141.12, 148.96, 156.8, 166.6, 176.4, 186.2],\r\n    heal_flat: [1540, 1694, 1861, 2041, 2234, 2439, 2657, 2888, 3132, 3389, 3659, 3941, 4236, 4544, 4865],\r\n    heal_atk: [251.2, 270.04, 288.88, 314, 332.84, 351.68, 376.8, 401.92, 427.04, 452.16, 477.28, 502.4, 533.8, 565.2, 596.6],\r\n    regen_flat: [154, 169, 186, 204, 223, 244, 266, 289, 313, 339, 366, 394, 424, 454, 487],\r\n    regen_atk: [25.12, 27, 28.89, 31.4, 33.28, 35.17, 37.68, 40.19, 42.7, 45.22, 47.73, 50.24, 53.38, 56.52, 59.66],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg_hold: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + 0.4) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    field_dmg: stats => basicDMGFormula(data.burst.field_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    heal: stats => {\r\n      const atk = data.burst.heal_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    regen: stats => {\r\n      const atk = data.burst.regen_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.regen_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [976, 2506, 3235, 4846, 5364, 6170, 6860, 7666, 8184, 8989, 9507, 10312, 10830, 11636],\r\n    characterATK: [19, 48, 62, 93, 103, 118, 131, 147, 157, 172, 182, 198, 208, 223],\r\n    characterDEF: [66, 171, 220, 330, 365, 420, 467, 522, 557, 612, 647, 702, 737, 792]\r\n  },\r\n  specializeStat: {\r\n    key: \"enerRech_\",\r\n    value: [0, 0, 0, 0, 6.7, 6.7, 13.3, 13.3, 13.3, 13.3, 20, 20, 26.7, 26.7]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19],\r\n      [51.69, 55.89, 60.1, 66.11, 70.32, 75.13, 81.74, 88.35, 94.96, 102.17, 110.43, 120.15, 129.87, 139.59, 150.19],\r\n      [65.27, 70.59, 75.9, 83.49, 88.8, 94.88, 103.22, 111.57, 119.92, 129.03, 139.47, 151.74, 164.01, 176.29, 189.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.24, 95.42, 102.6, 112.86, 120.04, 128.25, 139.54, 150.82, 162.11, 174.42, 188.53, 205.12, 221.71, 238.3, 256.4]\r\n    ]\r\n  },\r\n  charged: {\r\n    atk1: [55.04, 59.52, 64, 70.4, 74.88, 80, 87.04, 94.08, 101.12, 108.8, 117.6, 127.95, 138.3, 148.65, 159.94,],\r\n    atk2: [73.1, 79.05, 85, 93.5, 99.45, 106.25, 115.6, 124.95, 134.3, 144.5, 156.19, 169.93, 183.68, 197.42, 212.42],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [191.2, 205.54, 219.88, 239, 253.34, 267.68, 286.8, 305.92, 325.04, 344.16, 363.28, 382.4, 406.3, 430.2, 454.1],\r\n  },\r\n  burst: {\r\n    dmg: [77.6, 83.42, 89.24, 97, 102.82, 108.64, 116.4, 124.16, 131.92, 139.68, 147.44, 155.2, 164.9, 174.6, 184.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.3 * s.finalHP * (1 + s.powShield_ / 100), [\"finalHP\", \"powShield_\"]],\r\n    shieldCryo: stats => [s => 0.3 * s.finalHP * (1 + s.powShield_ / 100) * 2.5, [\"finalHP\", \"powShield_\"]],\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1020, 2646, 3521, 5268, 5889, 6776, 7604, 8500, 9121, 10025, 10647, 11561, 12182, 13103],\r\n    characterATK: [25, 65, 87, 130, 145, 167, 187, 209, 225, 247, 262, 285, 300, 323],\r\n    characterDEF: [62, 161, 215, 321, 359, 413, 464, 519, 556, 612, 649, 705, 743, 799]\r\n  },\r\n  specializeStat: {\r\n    key: \"critDMG_\",\r\n    value: [0, 0, 0, 0, 9.6, 9.6, 19.2, 19.2, 19.2, 19.2, 28.8, 28.8, 38.4, 38.4]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [41.02, 44.36, 47.7, 52.47, 55.81, 59.62, 64.87, 70.12, 75.37, 81.09, 86.81, 92.54, 98.26, 103.99, 109.71],//1\r\n      [41.02, 44.36, 47.7, 52.47, 55.81, 59.62, 64.87, 70.12, 75.37, 81.09, 86.81, 92.54, 98.26, 103.99, 109.71],//2\r\n      [54.44, 58.87, 63.3, 69.63, 74.06, 79.13, 86.09, 93.05, 100.01, 107.61, 115.21, 122.8, 130.4, 137.99, 145.59],//3\r\n      [31.48, 34.04, 36.6, 40.26, 42.82, 45.75, 49.78, 53.8, 57.83, 62.22, 66.61, 71, 75.4, 79.79, 84.18],//4.1\r\n      [34.4, 37.2, 40, 44, 46.8, 50, 54.4, 58.8, 63.2, 68, 72.8, 77.6, 82.4, 87.2, 92],//4.2\r\n      [66.99, 72.45, 77.9, 85.69, 91.14, 97.38, 105.94, 114.51, 123.08, 132.43, 141.78, 151.13, 160.47, 169.82, 179.17],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    hit1: [76.8, 83.05, 89.3, 98.23, 104.48, 111.63, 121.45, 131.27, 141.09, 151.81, 162.53, 173.24, 183.96, 194.67, 205.39],\r\n    hit2: [86, 93, 100, 110, 117, 125, 136, 147, 158, 170, 182, 194, 206, 218, 230],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    stilleto: [50.4, 54.18, 57.96, 63, 66.78, 70.56, 75.6, 80.64, 85.68, 90.72, 95.76, 100.8, 107.1, 113.4, 119.7],\r\n    slashing: [168, 180.6, 193.2, 210, 222.6, 235.2, 252, 268.8, 285.6, 302.4, 319.2, 336, 357, 378, 399],\r\n    thunderclasp_slash: [84, 90.3, 96.6, 105, 111.3, 117.6, 126, 134.4, 142.8, 151.2, 159.6, 168, 178.5, 189, 199.5],\r\n  },\r\n  burst: {\r\n    skill: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    consec_slash: [24, 25.8, 27.6, 30, 31.8, 33.6, 36, 38.4, 40.8, 43.2, 45.6, 48, 51, 54, 57],\r\n    last: [188.8, 202.96, 217.12, 236, 250.16, 264.32, 283.2, 302.08, 320.96, 339.84, 358.72, 377.6, 401.2, 424.8, 448.4],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    stilleto: stats => basicDMGFormula(data.skill.stilleto[stats.tlvl.skill], stats, \"skill\"),\r\n    slashing: stats => basicDMGFormula(data.skill.slashing[stats.tlvl.skill], stats, \"skill\"),\r\n    thunderclap_slashing: stats => basicDMGFormula(data.skill.thunderclasp_slash[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    consec_slash: stats => basicDMGFormula(data.burst.consec_slash[stats.tlvl.burst], stats, \"burst\"),\r\n    last: stats => basicDMGFormula(data.burst.last[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(50, stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [801, 2077, 2764, 4136, 4623, 5319, 5970, 6673, 7161, 7870, 8358, 9076, 9563, 10287],\r\n    characterATK: [24, 63, 84, 125, 140, 161, 180, 202, 216, 238, 253, 274, 289, 311],\r\n    characterDEF: [48, 124, 165, 247, 276, 318, 357, 399, 428, 470, 500, 542, 572, 615]\r\n  },\r\n  specializeStat: {\r\n    key: \"pyro_dmg_\",\r\n    value: [0, 0, 0, 0, 7.2, 7.2, 14.4, 14.4, 14.4, 14.4, 21.6, 21.6, 28.8, 28.8]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [72.16, 77.57, 82.98, 90.2, 95.61, 101.02, 108.24, 115.46, 122.67, 129.89, 137.39, 147.21, 157.02, 166.83, 176.65],\r\n      [62.4, 67.08, 71.76, 78, 82.68, 87.36, 93.6, 99.84, 106.08, 112.32, 118.81, 127.3, 135.78, 144.27, 152.76],\r\n      [89.92, 96.66, 103.41, 112.4, 119.14, 125.89, 134.88, 143.87, 152.86, 161.86, 171.21, 183.44, 195.67, 207.9, 220.12]\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [157.36, 169.16, 180.96, 196.7, 208.5, 220.3, 236.04, 251.78, 267.51, 283.25, 299.61, 321.01, 342.42, 363.82, 385.22],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    jumpyDmg: [95.2, 102.34, 109.48, 119, 126.14, 133.28, 142.8, 152.32, 161.84, 171.36, 180.88, 190.4, 202.3, 214.2, 226.1],\r\n    mineDmg: [32.8, 35.26, 37.72, 41, 43.46, 45.92, 49.2, 52.48, 55.76, 59.04, 62.32, 65.6, 69.7, 73.8, 77.9],\r\n  },\r\n  burst: {\r\n    dmg: [42.64, 45.84, 49.04, 53.3, 56.5, 59.7, 63.96, 68.22, 72.49, 76.75, 81.02, 85.28, 90.61, 95.94, 101.27],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    jumpyDmg: stats => basicDMGFormula(data.skill.jumpyDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    mineDmg: stats => basicDMGFormula(data.skill.mineDmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * 1.2, stats, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(555, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [802, 2061, 2661, 3985, 4411, 5074, 5642, 6305, 6731, 7393, 7818, 8481, 8907, 9570],\r\n    characterATK: [19, 50, 64, 96, 107, 123, 136, 153, 163, 179, 189, 205, 215, 232],\r\n    characterDEF: [48, 123, 159, 239, 264, 304, 338, 378, 403, 443, 468, 508, 533, 573]\r\n  },\r\n  specializeStat: {\r\n    key: \"eleMas\",\r\n    value: [0, 0, 0, 0, 24, 24, 48, 48, 48, 48, 72, 72, 96, 96]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [39.6, 42.57, 45.54, 49.5, 52.47, 55.44, 59.4, 63.36, 67.32, 71.28, 75.4, 80.78, 86.17, 91.56, 96.94],\r\n      [35.92, 38.61, 41.31, 44.9, 47.59, 50.29, 53.88, 57.47, 61.06, 64.66, 68.39, 73.28, 78.16, 83.05, 87.93],\r\n      [42.8, 46.01, 49.22, 53.5, 56.71, 59.92, 64.2, 68.48, 72.76, 77.04, 81.49, 87.31, 93.13, 98.95, 104.77],\r\n      [54.96, 59.08, 63.2, 68.7, 72.82, 76.94, 82.44, 87.94, 93.43, 98.93, 104.64, 112.12, 119.59, 127.07, 134.54],\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [177.12, 190.4, 203.69, 221.4, 234.68, 247.97, 265.68, 283.39, 301.1, 318.82, 337.24, 361.32, 385.41, 409.5, 433.59],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    stack0: [320, 344, 368, 400, 424, 448, 480, 512, 544, 576, 608, 640, 680, 720, 760],\r\n    stack1: [368, 395.6, 423.2, 460, 487.6, 515.2, 552, 588.8, 625.6, 662.4, 699.2, 736, 782, 828, 874],\r\n    stack2: [424, 455.8, 487.6, 530, 561.8, 593.6, 636, 678.4, 720.8, 763.2, 805.6, 848, 901, 954, 1007],\r\n    stack3: [487.2, 523.74, 560.28, 609, 645.54, 682.08, 730.8, 779.52, 828.24, 876.96, 925.68, 974.4, 1035.3, 1096.2, 1157.1],\r\n\r\n  },\r\n  burst: {\r\n    summon: [9.14, 9.825, 10.51, 11.425, 12.11, 12.795, 13.71, 14.625, 15.5375, 16.4525, 17.365, 18.28, 19.4225, 20.565, 21.7075],//not shown in game nor honey, just dmg/4\r\n    dmg: [36.56, 39.3, 42.04, 45.7, 48.44, 51.18, 54.84, 58.5, 62.15, 65.81, 69.46, 73.12, 77.69, 82.26, 86.83],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [810, 2102, 2797, 4185, 4678, 5383, 6041, 6752, 7246, 7964, 8458, 9184, 9677, 10409],\r\n    characterATK: [22, 58, 77, 115, 129, 148, 167, 186, 200, 220, 233, 253, 267, 287],\r\n    characterDEF: [51, 132, 176, 263, 294, 338, 379, 424, 455, 500, 531, 576, 607, 653]\r\n  },\r\n  specializeStat: {\r\n    key: \"enerRech_\",\r\n    value: [0, 0, 0, 0, 8, 8, 16, 16, 16, 16, 24, 24, 32, 32]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n      [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n      [44.8, 48.16, 51.52, 56, 59.36, 62.72, 67.2, 71.68, 76.16, 80.64, 85.12, 89.6, 95.2, 100.8, 106.4],\r\n      [56.16, 60.37, 64.58, 70.2, 74.41, 78.62, 84.24, 89.86, 95.47, 101.09, 106.7, 112.32, 119.34, 126.36, 133.38],\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [149.72, 160.95, 172.18, 187.15, 198.38, 209.61, 224.58, 239.55, 254.52, 269.5, 285.07, 305.43, 325.79, 346.15, 366.51],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [132.8, 142.76, 152.72, 166, 175.96, 185.92, 199.2, 212.48, 225.76, 239.04, 252.32, 265.6, 282.2, 298.8, 315.4],\r\n    dot: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n  },\r\n  burst: {\r\n    bubble_explosion: [442.4, 475.58, 508.76, 553, 586.18, 619.36, 663.6, 707.84, 752.08, 796.32, 840.56, 884.8, 940.1, 995.4, 1050.7],\r\n    dmg_: [42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 60, 60, 60, 60, 60],\r\n    omen_duration: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\n  }\r\n}\r\nconst formula = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    bubble_explosion: stats => basicDMGFormula(data.burst.bubble_explosion[stats.tlvl.burst], stats, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] / 2, stats, \"skill\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [821, 2108, 2721, 4076, 4512, 5189, 5770, 6448, 6884, 7561, 7996, 8674, 9110, 9787],\r\n    characterATK: [18, 46, 59, 89, 98, 113, 125, 140, 150, 164, 174, 188, 198, 212],\r\n    characterDEF: [48, 123, 159, 239, 264, 304, 338, 378, 403, 443, 468, 508, 533, 573]\r\n  },\r\n  specializeStat: {\r\n    key: \"geo_dmg_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hit: [28, 30.1, 32.2, 35, 37.1, 39.2, 42, 44.8, 47.6, 50.4, 53.31, 57.12, 60.93, 64.74, 68.54]\r\n  },\r\n  charged: {\r\n    dmg: [174.08, 187.14, 200.19, 217.6, 230.66, 243.71, 261.12, 278.53, 295.94, 313.34, 331.45, 355.12, 378.8, 402.47, 426.15],\r\n    jade: [49.6, 53.32, 57.04, 62, 65.72, 69.44, 74.4, 79.36, 84.32, 89.28, 94.44, 101.18, 107.93, 114.68, 121.42],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    inheri_hp: [50.1, 53.1, 56.1, 60, 63, 66, 69.9, 73.8, 77.7, 81.6, 85.5, 89.4, 93.3, 97.2, 101.1],\r\n    dmg: [230.4, 247.68, 264.96, 288, 305.28, 322.56, 345.6, 368.64, 391.68, 414.72, 437.76, 460.8, 489.6, 518.4, 547.2],\r\n  },\r\n  burst: {\r\n    dmg_per_gem: [86.96, 93.48, 100, 108.7, 115.22, 121.74, 130.44, 139.14, 147.83, 156.53, 165.22, 173.92, 184.79, 195.66, 206.53],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    hit: stats => basicDMGFormula(data.normal.hit[stats.tlvl.auto], stats, \"normal\")\r\n  },\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    inheri_hp: stats => {\r\n      const val = data.skill.inheri_hp[stats.tlvl.skill] / 100\r\n      return [s => val * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg_per_gem: stats => basicDMGFormula(data.burst.dmg_per_gem[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1012, 2600, 3356, 5027, 5564, 6400, 7117, 7953, 8490, 9325, 9862, 10698, 11235, 12071],\r\n    characterATK: [16, 41, 53, 80, 88, 101, 113, 126, 134, 148, 156, 169, 178, 191],\r\n    characterDEF: [67, 172, 222, 333, 368, 423, 471, 526, 562, 617, 652, 708, 743, 799]\r\n  },\r\n  specializeStat: {\r\n    key: \"def_\",\r\n    value: [0, 0, 0, 0, 7.5, 7.5, 15, 15, 15, 15, 22.5, 22.5, 30, 30]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [79.12, 85.56, 92, 101.2, 107.64, 115, 125.12, 135.24, 145.36, 156.4, 167.44, 178.48, 189.52, 200.56, 211.6],\r\n      [73.36, 79.33, 85.3, 93.83, 99.8, 106.63, 116.01, 125.39, 134.77, 145.01, 155.25, 165.48, 175.72, 185.95, 196.19],\r\n      [86.26, 93.28, 100.3, 110.33, 117.35, 125.38, 136.41, 147.44, 158.47, 170.51, 182.55, 194.58, 206.62, 218.65, 230.69],\r\n      [113.43, 122.67, 131.9, 145.09, 154.32, 164.88, 179.38, 193.89, 208.4, 224.23, 240.06, 255.89, 271.71, 287.54, 303.37],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [50.74, 54.87, 59, 64.9, 69.03, 73.75, 80.24, 86.73, 93.22, 100.3, 107.38, 114.46, 121.54, 128.62, 135.7],\r\n    final: [90.47, 97.84, 105.2, 115.72, 123.08, 131.5, 143.07, 154.64, 166.22, 178.84, 191.46, 204.09, 216.71, 229.34, 241.96],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21],\r\n  },\r\n  skill: {\r\n    skill_dmg: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    shield_def: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n    shield_flat: [770, 847, 930, 1020, 1116, 1219, 1328, 1443, 1565, 1694, 1828, 1970, 2117, 2271, 2431],\r\n    heal_def: [21.28, 22.88, 24.47, 26.6, 28.2, 29.79, 31.92, 34.05, 36.18, 38.3, 40.43, 42.56, 45.22, 47.88, 50.54],\r\n    heal_flat: [103, 113, 124, 136, 149, 163, 177, 193, 209, 226, 244, 263, 282, 303, 324],\r\n    heal_trigger: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59, 60, 60, 60, 60],\r\n  },\r\n  burst: {\r\n    burst_dmg: [67.2, 72.24, 77.28, 84, 89.04, 94.08, 100.8, 107.52, 114.24, 120.96, 127.68, 134.4, 142.8, 151.2, 159.6],\r\n    skill_dmg: [92.8, 99.76, 106.72, 116, 122.96, 129.92, 139.2, 148.48, 157.76, 167.04, 176.32, 185.6, 197.2, 208.8, 220.4],\r\n    bonus: [40, 43, 46, 50, 53, 56, 60, 64, 68, 72, 76, 80, 85, 90, 95],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    skill_dmg: stats => {\r\n      const percent = data.skill.skill_dmg[stats.tlvl.skill] / 100, key = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => percent * s[key] * s.finalDEF, [key, \"finalDEF\"]]\r\n    },\r\n    shield: stats => {\r\n      const percent = data.skill.shield_def[stats.tlvl.skill] / 100, flat = data.skill.shield_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * (1 + s.powShield_ / 100) * 1.5, [\"finalDEF\", \"powShield_\"]]\r\n    },\r\n    heal: stats => {\r\n      const percent = data.skill.heal_def[stats.tlvl.skill] / 100, flat = data.skill.heal_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * s.heal_multi, [\"finalDEF\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    burst_dmg: stats => basicDMGFormula(data.burst.burst_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    skill_dmg: stats => basicDMGFormula(data.burst.skill_dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    bonus: stats => {\r\n      const val = (data.burst.bonus[stats.tlvl.burst] + (stats.constellation >= 6 ? 50 : 0)) / 100\r\n      return [s => val * s.finalDEF, [\"finalDEF\"]]\r\n    }\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(400, stats, \"elemental\"),\r\n  },\r\n  passive1: {\r\n    hp: stats => [s => 4 * s.finalDEF * (1 + s.powShield_ / 100) * 1.5, [\"finalDEF\", \"powShield_\"]],\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [963, 2498, 3323, 4973, 5559, 6396, 7178, 8023, 8610, 9463, 10050, 10912, 11499, 12368],\r\n    characterATK: [22, 58, 77, 115, 129, 148, 167, 186, 200, 220, 233, 253, 267, 287],\r\n    characterDEF: [72, 186, 248, 371, 415, 477, 535, 598, 642, 706, 749, 814, 857, 922]\r\n  },\r\n  specializeStat: {\r\n    key: \"heal_\",\r\n    value: [0, 0, 0, 0, 5.5, 5.5, 11.1, 11.1, 11.1, 11.1, 16.6, 16.6, 22.2, 22.2]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [37.75, 40.83, 43.9, 48.29, 51.36, 54.88, 59.7, 64.53, 69.36, 74.63, 79.9, 85.17, 90.43, 95.7, 100.97],//1\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//2\r\n      [24.17, 26.13, 28.1, 30.91, 32.88, 35.13, 38.22, 41.31, 44.4, 47.77, 51.14, 54.51, 57.89, 61.26, 64.63],//3 x2\r\n      [24.68, 26.69, 28.7, 31.57, 33.58, 35.88, 39.03, 42.19, 45.35, 48.79, 52.23, 55.68, 59.12, 62.57, 66.01],//4 x2\r\n      [63.04, 68.17, 73.3, 80.63, 85.76, 91.63, 99.69, 107.75, 115.81, 124.61, 133.41, 142.2, 151, 159.79, 168.59],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [64.33, 69.56, 74.8, 82.28, 87.52, 93.5, 101.73, 109.96, 118.18, 127.16, 136.14, 145.11, 154.09, 163.06, 172.0],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n\r\n  skill: {\r\n    hit: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    herald: [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n    hitregen: {\r\n      base: [67, 74, 81, 89, 98, 107, 116, 126, 137, 148, 160, 172, 185, 199, 213],\r\n      atk: [10.56, 11.35, 12.14, 13.2, 13.99, 14.78, 15.84, 16.9, 17.95, 19.01, 20.06, 21.12, 22.44, 23.76, 25.08],\r\n    },\r\n    continuousregen: {\r\n      base: [451, 496, 544, 597, 653, 713, 777, 845, 916, 991, 1070, 1153, 1239, 1329, 1423],\r\n      atk: [69.6, 74.82, 80.04, 87, 92.22, 97.44, 104.4, 111.36, 118.32, 125.28, 132.24, 139.2, 147.9, 156.6, 165.3],\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: [284.8, 306.16, 327.52, 356, 377.36, 398.72, 427.2, 455.68, 484.16, 512.64, 541.12, 569.6, 605.2, 640.8, 676.4],\r\n    healing: {\r\n      base: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n      atk: [90, 96.75, 103.5, 112.5, 119.25, 126, 135, 144, 153, 162, 171, 180, 191.25, 202.5, 213.75],\r\n    }\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * (i === 2 || i === 3 ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hit: stats => basicDMGFormula(data.skill.hit[stats.tlvl.skill], stats, \"skill\"),\r\n    herald: stats => basicDMGFormula(data.skill.herald[stats.tlvl.skill], stats, \"skill\"),\r\n    hitregen: stats => {\r\n      const base = data.skill.hitregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.hitregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    continuousregen: stats => {\r\n      const base = data.skill.continuousregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.continuousregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    healing: stats => {\r\n      const base = data.burst.healing.base[stats.tlvl.burst];\r\n      const atk = data.burst.healing.atk[stats.tlvl.burst] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1003, 2577, 3326, 4982, 5514, 6343, 7052, 7881, 8413, 9241, 9773, 10602, 11134, 11962],\r\n    characterATK: [20, 50, 65, 97, 108, 124, 138, 154, 164, 180, 191, 207, 217, 234],\r\n    characterDEF: [63, 162, 209, 313, 346, 398, 443, 495, 528, 580, 613, 665, 699, 751]\r\n  },\r\n  specializeStat: {\r\n    key: \"physical_dmg_\",\r\n    value: [0, 0, 0, 0, 7.5, 7.5, 15, 15, 15, 15, 22.5, 22.5, 30, 30]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [95.92, 102.46, 109, 117.72, 124.26, 131.89, 141.7, 151.51, 161.32, 171.13, 180.94, 190.75, 200.56, 210.37, 220.18],\r\n      [82.63, 88.27, 93.9, 101.41, 107.05, 113.62, 122.07, 130.52, 138.97, 147.42, 155.87, 164.33, 172.78, 181.23, 189.68],\r\n      [103.31, 110.36, 117.4, 126.79, 133.84, 142.05, 152.62, 163.19, 173.75, 184.32, 194.88, 205.45, 216.02, 226.58, 237.15],\r\n      [136.05, 145.32, 154.6, 166.97, 176.24, 187.07, 200.98, 214.89, 228.81, 242.72, 256.64, 270.55, 284.46, 298.38, 312.29],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.54, 67.63, 72.72, 79.99, 85.08, 90.9, 98.9, 106.9, 114.9, 123.62, 132.35, 141.08, 149.8, 158.53, 167.26],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45]\r\n  },\r\n  plunging: {\r\n    dmg: [82.05, 88.72, 95.4, 104.94, 111.62, 119.25, 129.75, 140.24, 150.74, 162.19, 173.63, 185.08, 196.53, 207.98, 219.43],\r\n    low: [164.06, 177.41, 190.77, 209.84, 223.2, 238.46, 259.44, 280.43, 301.41, 324.3, 347.19, 370.09, 392.98, 415.87, 438.76],\r\n    high: [204.92, 221.6, 238.28, 262.1, 278.78, 297.85, 324.06, 350.27, 376.48, 405.07, 433.66, 462.26, 490.85, 519.44, 548.04]\r\n  },\r\n  skill: {\r\n    press: [199.2, 214.14, 229.08, 249, 263.94, 278.88, 298.8, 318.72, 338.64, 358.56, 378.48, 398.4, 423.3, 448.2, 473.1],\r\n    hold: [295.2, 317.34, 339.48, 369, 391.14, 413.28, 442.8, 472.32, 501.84, 531.36, 560.88, 590.4, 627.3, 664.2, 701.1],\r\n  },\r\n  burst: {\r\n    summon: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n    dmg: [24, 25.8, 27.6, 30, 31.8, 33.6, 36, 38.4, 40.8, 43.2, 45.6, 48, 51, 54, 57],\r\n    atkspd: [26, 28, 30, 32, 34, 36, 37, 38, 39, 40, 40, 40, 40, 40, 40],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    hold: stats => basicDMGFormula(data.skill.hold[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    summon: stats => basicDMGFormula(data.burst.summon[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * percentArr[stats.tlvl.auto] / 100, stats, \"burst\")])),\r\n  },\r\n  constellation6: {\r\n    dmg: stats => basicDMGFormula(100, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1030, 2647, 3417, 5118, 5665, 6516, 7245, 8096, 8643, 9493, 10040, 10891, 11438, 12289],\r\n    characterATK: [20, 52, 67, 100, 111, 127, 141, 158, 169, 185, 196, 213, 223, 240],\r\n    characterDEF: [60, 153, 197, 296, 327, 376, 418, 468, 499, 548, 580, 629, 661, 710]\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [52.46, 56.73, 61, 67.1, 71.37, 76.25, 82.96, 89.67, 96.38, 103.7, 111.02, 118.34, 125.66, 132.98, 140.3],//1\r\n      [51.6, 55.8, 60, 66, 70.2, 75, 81.6, 88.2, 94.8, 102, 109.2, 116.4, 123.6, 130.8, 138],//2\r\n      [31.82, 34.41, 37, 40.7, 43.29, 46.25, 50.32, 54.39, 58.46, 62.9, 67.34, 71.78, 76.22, 80.66, 85.1],//3 x2\r\n      [69.66, 75.33, 81, 89.1, 94.77, 101.25, 110.16, 119.07, 127.98, 137.7, 147.42, 157.14, 166.86, 176.58, 186.3],//4\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//5.1\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91, 97, 103, 109, 115]//5.2\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [136.74, 147.87, 159, 174.9, 186.03, 198.75, 216.24, 233.73, 251.22, 270.3, 289.38, 308.46, 327.54, 346.62, 365.7],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hit1: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n    hit2: [136, 146.2, 156.4, 170, 180.2, 190.4, 204, 217.6, 231.2, 244.8, 258.4, 272, 289, 306, 323]\r\n  },\r\n  burst: {\r\n    hit1: [104, 111.8, 119.6, 130, 137.8, 145.6, 156, 166.4, 176.8, 187.2, 197.6, 208, 221, 234, 247],\r\n    hit2: [152, 163.4, 174.8, 190, 201.4, 212.8, 228, 243.2, 258.4, 273.6, 288.8, 304, 323, 342, 361],\r\n    dot: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((arr[stats.tlvl.auto]), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [775, 1991, 2570, 3850, 4261, 4901, 5450, 6090, 6501, 7141, 7552, 8192, 8604, 9244],\r\n    characterATK: [14, 37, 47, 71, 78, 90, 100, 112, 120, 131, 139, 151, 158, 170],\r\n    characterDEF: [59, 151, 195, 293, 324, 373, 414, 463, 494, 543, 574, 623, 654, 703]\r\n  },\r\n  specializeStat: {\r\n    key: \"anemo_dmg_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [33.46, 35.97, 38.48, 41.83, 44.34, 46.85, 50.2, 53.54, 56.89, 60.24, 63.58, 66.93, 71.11, 75.29, 79.48], // 1\r\n      [30.62, 32.91, 35.21, 38.27, 40.57, 42.86, 45.92, 48.99, 52.05, 55.11, 58.17, 61.23, 65.06, 68.89, 72.71], // 2\r\n      [38.45, 41.33, 44.22, 48.06, 50.94, 53.83, 57.67, 61.52, 65.36, 69.21, 73.05, 76.9, 81.7, 86.51, 91.31], // 3\r\n      [47.92, 51.51, 55.11, 59.9, 63.49, 67.08, 71.88, 76.67, 81.46, 86.25, 91.04, 95.84, 101.82, 107.81, 113.8], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [120.16, 129.17, 138.18, 150.2, 159.21, 168.22, 180.24, 192.26, 204.27, 216.29, 228.3, 240.32, 255.34, 270.36, 285.38],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [211.2, 227.04, 242.88, 264, 279.84, 295.68, 316.8, 337.92, 359.04, 380.16, 401.28, 422.4, 448.8, 475.2, 501.6],\r\n  },\r\n  burst: {\r\n    dot: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n    dmg_: [44, 47.3, 50.6, 55, 58.3, 61.6, 66, 70.4, 74.8, 79.2, 83.6, 88, 93.5, 99, 104.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(([\"hydro\", \"pyro\", \"cryo\", \"electro\"]).map(ele =>\r\n      [`${ele}_dmg_bonus`, stats => [s => { return (data.burst.dmg_[stats.tlvl.burst] / 100) * s[`${ele}_burst_${stats.hitMode}`] }, [`${ele}_burst_${stats.hitMode}`]]])),//not optimizationTarget, dont need to precompute\r\n  },\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [1020, 2646, 3521, 5268, 5889, 6776, 7604, 8500, 9121, 10025, 10647, 11561, 12182, 13103],\r\n    characterATK: [23, 61, 81, 121, 135, 156, 175, 195, 210, 231, 245, 266, 280, 301],\r\n    characterDEF: [63, 165, 219, 328, 366, 421, 473, 528, 567, 623, 662, 719, 757, 815]\r\n  },\r\n  specializeStat: {\r\n    key: \"hydro_dmg_\",\r\n    value: [0, 0, 0, 0, 7.2, 7.2, 14.4, 14.4, 14.4, 14.4, 21.6, 21.6, 28.8, 28.8]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [41.28, 44.64, 48, 52.8, 56.16, 60, 65.28, 70.56, 75.84, 81.6, 87.36, 93.12, 98.88, 104.64, 110.4],//1\r\n      [46.27, 50.03, 53.8, 59.18, 62.95, 67.25, 73.17, 79.09, 85, 91.46, 97.92, 104.37, 110.83, 117.28, 123.74],//2\r\n      [55.38, 59.89, 64.4, 70.84, 75.35, 80.5, 87.58, 94.67, 101.75, 109.48, 117.21, 124.94, 132.66, 140.39, 148.12],//3\r\n      [57.02, 61.66, 66.3, 72.93, 77.57, 82.88, 90.17, 97.46, 104.75, 112.71, 120.67, 128.62, 136.58, 144.53, 152.49],//4\r\n      [60.89, 65.84, 70.8, 77.88, 82.84, 88.5, 96.29, 104.08, 111.86, 120.36, 128.86, 137.35, 145.85, 154.34, 162.84],//5\r\n      [72.76, 78.68, 84.6, 93.06, 98.98, 105.75, 115.06, 124.36, 133.67, 143.82, 153.97, 164.12, 174.28, 184.43, 194.58],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hitArr: [\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//1\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//2\r\n      [56.33, 60.92, 65.5, 72.05, 76.64, 81.88, 89.08, 96.29, 103.49, 111.35, 119.21, 127.07, 134.93, 142.79, 150.65],//3\r\n      [59.94, 64.82, 69.7, 76.67, 81.55, 87.13, 94.79, 102.46, 110.13, 118.49, 126.85, 135.22, 143.58, 151.95, 160.31],//4\r\n      [55.3, 59.8, 64.3, 70.73, 75.23, 80.38, 87.45, 94.52, 101.59, 109.31, 117.03, 124.74, 132.46, 140.17, 147.89],//5\r\n      [35.43, 38.32, 41.2, 45.32, 48.2, 51.5, 56.03, 60.56, 65.1, 70.04, 74.98, 79.93, 84.87, 89.82, 94.76],//6.1 (1st hit)\r\n      [37.67, 40.73, 43.8, 48.18, 51.25, 54.75, 59.57, 64.39, 69.2, 74.46, 79.72, 84.97, 90.23, 95.48, 100.74],//6.2 (2nd hit)\r\n    ],\r\n    skillDmg: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    charged1: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//1st hit\r\n    charged2: [71.98, 77.84, 83.7, 92.07, 97.93, 104.62, 113.83, 123.04, 132.25, 142.29, 152.33, 162.38, 172.42, 182.47, 192.51],//2nd hit\r\n  },\r\n  burst: {\r\n    melee: [464, 498.8, 533.6, 580, 614.8, 649.6, 696, 742.4, 788.8, 835.2, 881.6, 928, 986, 1044, 1102],\r\n    ranged: [378.4, 406.78, 435.16, 473, 501.38, 529.76, 567.6, 605.44, 643.28, 681.12, 718.96, 756.8, 804.1, 851.4, 898.7],\r\n  },\r\n  riptide: {\r\n    flash: [12.4, 13.33, 14.26, 15.5, 16.43, 17.36, 18.6, 19.84, 21.08, 22.32, 23.56, 24.8, 26.35, 27.9, 29.45],//x3, fully charged\r\n    burst: [62, 66.65, 71.3, 77.5, 82.15, 86.8, 93, 99.2, 105.4, 111.6, 117.8, 124, 131.75, 139.5, 147.25],//death\r\n    slash: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//melee\r\n    blast: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],//burst\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    flash: stats => basicDMGFormula(data.riptide.flash[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n    burst: stats => basicDMGFormula(data.riptide.burst[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n  },\r\n  charged: {\r\n    aimedShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"hydro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(data.skill.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.skill], stats, \"normal\", \"hydro\")])),\r\n    skillDmg: stats => basicDMGFormula(data.skill.skillDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    charged1: stats => basicDMGFormula(data.skill.charged1[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    charged2: stats => basicDMGFormula(data.skill.charged2[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    slash: stats => basicDMGFormula(data.riptide.slash[stats.tlvl.skill], stats, \"skill\", \"hydro\"),\r\n  },\r\n  burst: {\r\n    melee: stats => basicDMGFormula(data.burst.melee[stats.tlvl.burst], stats, \"burst\"),\r\n    ranged: stats => basicDMGFormula(data.burst.ranged[stats.tlvl.burst], stats, \"burst\"),\r\n    blast: stats => basicDMGFormula(data.riptide.blast[stats.tlvl.burst], stats, \"burst\", \"hydro\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    initial_dmg: [12, 12.9, 13.8, 15, 15.9, 16.8, 18, 19.2, 20.4, 21.6, 22.8, 24, 25.5, 27, 28.5],\r\n    initial_max: [16.8, 18.06, 19.32, 21, 22.26, 23.52, 25.2, 26.88, 28.56, 30.24, 31.92, 33.6, 35.7, 37.8, 39.9],\r\n    storm_dmg: [176, 189.2, 202.4, 220, 233.2, 246.4, 264, 281.6, 299.2, 316.8, 334.4, 352, 374, 396, 418],\r\n    storm_max: [192, 206.4, 220.8, 240, 254.4, 268.8, 288, 307.2, 326.4, 345.6, 364.8, 384, 408, 432, 456],\r\n  },\r\n  burst: {\r\n    dmg: [80.8, 86.86, 92.92, 101, 107.06, 113.12, 121.2, 129.28, 137.36, 145.44, 153.52, 161.6, 171.7, 181.8, 191.9],\r\n    ele_dmg: [24.8, 26.66, 28.52, 31, 32.86, 34.72, 37.2, 39.68, 42.16, 44.64, 47.12, 49.6, 52.7, 55.8, 58.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(([\"hydro\", \"pyro\", \"cryo\", \"electro\"]).map(ele =>\r\n      [`${ele}_hit`, stats => [s => { return (data.burst.ele_dmg[stats.tlvl.burst] / 100) * s[`${ele}_burst_${stats.hitMode}`] }, [`${ele}_burst_${stats.hitMode}`]]])),//not optimizationTarget, dont need to precompute\r\n  },\r\n  passive2: {\r\n    heal: stats => [s => 0.02 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]],\r\n  },\r\n  passive3: {\r\n    windAuto: stats => basicDMGFormula(60, stats, \"normal\", \"anemo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [248, 266.6, 285.2, 310, 328.6, 347.2, 372, 396.8, 421.6, 446.4, 471.2, 496, 527, 558, 589],\r\n  },\r\n  burst: {\r\n    dmg: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    exp: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),//not optimizationTarget, dont need to precompute\r\n  passive2: {\r\n    geoAuto: stats => basicDMGFormula(60, stats, \"normal\", \"geo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [820, 2127, 2830, 4234, 4734, 5446, 6112, 6832, 7331, 8058, 8557, 9292, 9791, 10531],\r\n    characterATK: [20, 53, 71, 106, 118, 136, 153, 171, 183, 201, 214, 232, 245, 263],\r\n    characterDEF: [52, 135, 180, 269, 301, 346, 388, 434, 465, 512, 543, 590, 622, 669],\r\n  },\r\n  specializeStat: {\r\n    key: \"enerRech_\",\r\n    value: [0, 0, 0, 0, 8, 8, 16, 16, 16, 16, 24, 24, 32, 32],\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [20.38, 22.04, 23.7, 26.07, 27.73, 29.63, 32.23, 34.84, 37.45, 40.29, 43.55, 47.38, 51.21, 55.05, 59.23],//1\r\n      [44.38, 47.99, 51.6, 56.76, 60.37, 64.5, 70.18, 75.85, 81.53, 87.72, 94.82, 103.16, 111.5, 119.85, 128.95],//2\r\n      [52.37, 56.64, 60.9, 66.99, 71.25, 76.13, 82.82, 89.52, 96.22, 103.53, 111.9, 121.75, 131.6, 141.45, 152.19],//3\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//4\r\n      [50.65, 54.78, 58.9, 64.79, 68.91, 73.63, 80.1, 86.58, 93.06, 100.13, 108.23, 117.75, 127.28, 136.8, 147.19],//5\r\n      [70.95, 76.73, 82.5, 90.75, 96.53, 103.13, 112.2, 121.28, 130.35, 140.25, 151.59, 164.93, 178.27, 191.61, 206.17],//6\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [276, 296.7, 317.4, 345, 365.7, 386.4, 414, 441.6, 469.2, 496.8, 524.4, 552, 586.5, 621, 655.5],\r\n    hold: [380, 408.5, 437, 475, 503.5, 532, 570, 608, 646, 684, 722, 760, 807.5, 855, 902.5],\r\n  },\r\n  burst: {\r\n    hit: [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"anemo\"),\r\n    hit_bonus: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto] * 0.33, stats, \"charged\"),\r\n    full_bonus: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto] * 0.33, stats, \"charged\", \"anemo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries([\r\n    [\"hit\", stats => basicDMGFormula(data.burst.hit[stats.tlvl.burst], stats, \"burst\")],\r\n    ...([\"hydro\", \"pyro\", \"cryo\", \"electro\"]).map(eleKey => [`${eleKey}_hit`, stats => {\r\n      const val = data.burst.hit[stats.tlvl.burst] / 2 / 100\r\n      const statKey = `${eleKey}_burst_${stats.hitMode}`\r\n      return [s => val * s[statKey], [statKey]]\r\n    }]),\r\n    ...([\"hydro\", \"pyro\", \"cryo\", \"electro\"]).flatMap(eleKey => [\r\n      [`${eleKey}_tot_7`, stats => totBurst(stats, eleKey, 7)],\r\n      [`${eleKey}_tot_14`, stats => totBurst(stats, eleKey, 14)],\r\n    ])\r\n  ]),\r\n}\r\nfunction totBurst(stats, absorptionEle, swirlTicks) {\r\n  const ultTicks = 20\r\n  const absorptionTicks = 15\r\n  const burstStatKey = `anemo_burst_${stats.hitMode}`\r\n  const absorptionStatKey = `${absorptionEle}_burst_${stats.hitMode}`\r\n  const swirlStatKey = `${absorptionEle}_swirl_hit`\r\n  const burstScaling = data.burst.hit[stats.tlvl.burst] / 100\r\n  return [s => ultTicks * burstScaling * s[burstStatKey] + absorptionTicks * 0.5 * burstScaling * s[absorptionStatKey] + swirlTicks * s[swirlStatKey], [burstStatKey, absorptionStatKey, swirlStatKey]]\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [991, 2572, 3422, 5120, 5724, 6586, 7391, 8262, 8866, 9744, 10348, 11236, 11840, 12736],\r\n    characterATK: [27, 71, 94, 140, 157, 181, 203, 227, 243, 267, 284, 308, 325, 349],\r\n    characterDEF: [62, 161, 215, 321, 359, 413, 464, 519, 556, 612, 649, 705, 743, 799]\r\n  },\r\n  specializeStat: {\r\n    key: \"critRate_\",\r\n    value: [0, 0, 0, 0, 4.8, 4.8, 9.6, 9.6, 9.6, 9.6, 14.4, 14.4, 19.2, 19.2]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [27.54, 29.42, 31.3, 33.8, 35.68, 37.87, 40.69, 43.51, 46.32, 49.14, 51.96, 54.78, 57.59, 60.41, 63.23],//1 hits twice\r\n      [56.94, 60.82, 64.7, 69.88, 73.76, 78.29, 84.11, 89.93, 95.76, 101.58, 107.4, 113.23, 119.05, 124.87, 130.69],//2\r\n      [68.55, 73.23, 77.9, 84.13, 88.81, 94.26, 101.27, 108.28, 115.29, 122.3, 129.31, 136.33, 143.34, 150.35, 157.36],//3\r\n      [37.66, 40.23, 42.8, 46.22, 48.79, 51.79, 55.64, 59.49, 63.34, 67.2, 71.05, 74.9, 78.75, 82.6, 86.46],//4 hits twice\r\n      [71.54, 76.42, 81.3, 87.8, 92.68, 98.37, 105.69, 113.01, 120.32, 127.64, 134.96, 142.28, 149.59, 156.91, 164.23],\r\n      [95.83, 102.37, 108.9, 117.61, 124.15, 131.77, 141.57, 151.37, 161.17, 170.97, 180.77, 190.58, 200.38, 210.18, 219.98],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [121.09, 129.34, 137.6, 148.61, 156.86, 166.5, 178.88, 191.26, 203.65, 216.03, 228.42, 240.8, 253.18, 265.57, 277.95],\r\n  },\r\n  plunging: {\r\n    dmg: [81.83, 88.49, 95.16, 104.67, 111.33, 118.94, 129.41, 139.88, 150.35, 161.76, 173.18, 184.6, 196.02, 207.44, 218.86],\r\n    low: [163.63, 176.95, 190.27, 209.3, 222.62, 237.84, 258.77, 279.7, 300.63, 323.46, 346.29, 369.12, 391.96, 414.79, 437.62],\r\n    high: [204.39, 221.02, 237.66, 261.42, 278.06, 297.07, 323.21, 349.36, 375.5, 404.02, 432.54, 461.06, 489.57, 518.09, 546.61],\r\n  },\r\n  skill: {\r\n    hit: [252.8, 271.76, 290.72, 316, 334.96, 353.92, 379.2, 404.48, 429.76, 455.04, 480.32, 505.6, 537.2, 568.8, 600.4],\r\n  },\r\n  burst: {\r\n    atk_bonus: [58.45, 61.95, 65.45, 70, 73.5, 77, 81.55, 86.1, 90.65, 95.2, 99.75, 104.3, 108.85, 113.4, 117.95],\r\n    drain: [3, 3, 3, 2.5, 2.5, 2.5, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * ((i === 0 || i === 3) ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {}\r\n}\r\n\r\nexport default formula\r\n","import { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [912, 2342, 3024, 4529, 5013, 5766, 6411, 7164, 7648, 8401, 8885, 9638, 10122, 10875],\r\n    characterATK: [19, 49, 63, 94, 104, 119, 133, 149, 159, 174, 184, 200, 210, 225],\r\n    characterDEF: [56, 144, 186, 279, 308, 355, 394, 441, 470, 517, 546, 593, 623, 669]\r\n  },\r\n  specializeStat: {\r\n    key: \"eleMas\",\r\n    value: [0, 0, 0, 0, 24, 24, 48, 48, 48, 48, 72, 72, 96, 96]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [42.05, 45.48, 48.9, 53.79, 57.21, 61.13, 66.5, 71.88, 77.26, 83.13, 89.85, 97.76, 105.67, 113.58, 122.2],//1\r\n      [42.14, 45.57, 49, 53.9, 57.33, 61.25, 66.64, 72.03, 77.42, 83.3, 90.04, 97.96, 105.88, 113.81, 122.45],//2\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//3 x2\r\n      [14.1, 15.25, 16.4, 18.04, 19.19, 20.5, 22.3, 24.11, 25.91, 27.88, 30.14, 32.79, 35.44, 38.09, 40.98],//4 x4\r\n      [71.04, 76.82, 82.6, 90.86, 96.64, 103.25, 112.34, 121.42, 130.51, 140.42, 151.78, 165.13, 178.49, 191.85, 206.42],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [121.69, 131.6, 141.5, 155.65, 165.56, 176.88, 192.44, 208.01, 223.57, 240.55, 260.01, 282.89, 305.77, 328.65, 353.61],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    dmg: [111.28, 119.63, 127.97, 139.1, 147.45, 155.79, 166.92, 178.05, 189.18, 200.3, 211.43, 222.56, 236.47, 250.38, 264.29],\r\n  },\r\n  burst: {\r\n    hit1: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    hit2: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    hit3: [109.6, 117.82, 126.04, 137, 145.22, 153.44, 164.4, 175.36, 186.32, 197.28, 208.24, 219.2, 232.9, 246.6, 260.3],\r\n    dmg: [112, 120.4, 128.8, 140, 148.4, 156.8, 168, 179.2, 190.4, 201.6, 212.8, 224, 238, 252, 266],\r\n  }\r\n}\r\nconst formula = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: stats => basicDMGFormula(data.burst.hit1[stats.tlvl.burst], stats, \"burst\"),\r\n    hit2: stats => basicDMGFormula(data.burst.hit2[stats.tlvl.burst], stats, \"burst\"),\r\n    hit3: stats => basicDMGFormula(data.burst.hit3[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: stats => basicDMGFormula(75, stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [857, 2202, 2842, 4257, 4712, 5420, 6027, 6735, 7190, 7897, 8352, 9060, 9515, 10222],\r\n    characterATK: [17, 43, 56, 84, 93, 107, 119, 133, 142, 156, 165, 179, 188, 202],\r\n    characterDEF: [64, 163, 211, 316, 349, 402, 447, 499, 533, 585, 619, 671, 705, 758]\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [46.61, 50.41, 54.2, 59.62, 63.41, 67.75, 73.71, 79.67, 85.64, 92.14, 99.59, 108.36, 117.12, 125.88, 135.45],//1\r\n      [47.64, 51.52, 55.4, 60.94, 64.82, 69.25, 75.34, 81.44, 87.53, 94.18, 101.8, 110.76, 119.71, 128.67, 138.44],//2\r\n      [28.55, 30.88, 33.2, 36.52, 38.84, 41.5, 45.15, 48.8, 52.46, 56.44, 61.01, 66.37, 71.74, 77.11, 82.97],//3 x2\r\n      [55.99, 60.54, 65.1, 71.61, 76.17, 81.38, 88.54, 95.7, 102.86, 110.67, 119.62, 130.15, 140.67, 151.2, 162.68],//4\r\n      [35.86, 38.78, 41.7, 45.87, 48.79, 52.13, 56.71, 61.3, 65.89, 70.89, 76.62, 83.37, 90.11, 96.85, 104.21],//5\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 101.06, 109.96, 118.85, 127.74, 137.45],\r\n    hit2: [56.16, 60.73, 65.3, 71.83, 76.4, 81.63, 88.81, 95.99, 103.17, 111.01, 119.99, 130.55, 141.11, 151.67, 163.18]\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hit1: [168, 180.6, 193.2, 210, 222.6, 235.2, 252, 268.8, 285.6, 302.4, 319.2, 336, 357, 378, 399],\r\n    hit2: [191.2, 205.54, 219.88, 239, 253.34, 267.68, 286.8, 305.92, 325.04, 344.16, 363.28, 382.4, 406.3, 430.2, 454.1],\r\n    dmgRed: [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29, 29, 29, 29, 29],\r\n  },\r\n  burst: {\r\n    dmg: [54.27, 58.34, 62.41, 67.84, 71.91, 75.98, 81.41, 86.84, 92.26, 97.69, 103.12, 108.54, 115.33, 122.11, 128.9],\r\n  },\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) =>\r\n    [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries([\r\n    ...Object.entries(data.skill).filter(([name]) => name !== \"dmgRed\").map(([name, arr]) =>\r\n      [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")]),\r\n    ...Object.entries(data.skill).filter(([name]) => name !== \"dmgRed\").map(([name, arr]) =>\r\n      [`${name}RainCutter`, stats => basicDMGFormula(1.5 * arr[stats.tlvl.skill], stats, \"skill\")]),\r\n    [\"dmgRed\", stats => {\r\n      const flat = data.skill.dmgRed[stats.tlvl.skill]\r\n      return [s => (flat + Math.min(24, 0.2 * s.hydro_dmg_)), [\"hydro_dmg_\"]]\r\n    }],\r\n  ]),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\nimport { getTalentStatKey } from \"../../../Build/Build\";\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\";\r\n\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [939, 2413, 3114, 4665, 5163, 5939, 6604, 7379, 7878, 8653, 9151, 9927, 10425, 11201],\r\n    characterATK: [21, 54, 69, 103, 115, 132, 147, 164, 175, 192, 203, 220, 231, 249],\r\n    characterDEF: [67, 172, 222, 333, 368, 423, 471, 526, 562, 617, 652, 708, 743, 799],\r\n  },\r\n  specializeStat: {\r\n    key: \"atk_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24],\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [76.54, 82.77, 89, 97.9, 104.13, 111.25, 121.04, 130.83, 140.62, 151.3, 161.98, 172.66, 183.34, 194.02, 204.7],//1\r\n      [73.96, 79.98, 86, 94.6, 100.62, 107.5, 116.96, 126.42, 135.88, 146.2, 156.52, 166.84, 177.16, 187.48, 197.8],//2\r\n      [95.46, 103.23, 111, 122.1, 129.87, 138.75, 150.96, 163.17, 175.38, 188.7, 202.02, 215.34, 228.66, 241.98, 255.3],//3\r\n      [115.84, 125.27, 134.7, 148.17, 157.6, 168.38, 183.19, 198.01, 212.83, 228.99, 245.15, 261.32, 277.48, 293.65, 309.81],//4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.55, 67.64, 72.73, 80, 85.09, 90.91, 98.91, 106.91, 114.91, 123.64, 132.36, 141.09, 149.82, 158.55, 167.27],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21],\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n    def1: [104.04, 111.84, 119.65, 130.05, 137.85, 145.66, 156.06, 166.46, 176.87, 187.27, 197.68, 208.08, 221.09, 234.09, 247.1],\r\n    flat1: [501, 551, 605, 663, 726, 793, 864, 939, 1018, 1101, 1189, 1281, 1377, 1477, 1581],\r\n    def2: [122.4, 131.58, 140.76, 153, 162.18, 171.36, 183.6, 195.84, 208.08, 220.32, 232.56, 244.8, 260.1, 275.4, 290.7],\r\n    flat2: [589, 648, 712, 780, 854, 932, 1016, 1104, 1197, 1296, 1399, 1507, 1620, 1737, 1860],\r\n    def3: [144, 154.8, 165.6, 180, 190.8, 201.6, 216, 230.4, 244.8, 259.2, 273.6, 288, 306, 324, 342],\r\n    flat3: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    dot: [33.6, 36.12, 38.64, 42, 44.52, 47.04, 50.4, 53.76, 57.12, 60.48, 63.84, 67.2, 71.4, 75.6, 79.8],\r\n  },\r\n  burst: {\r\n    dmg: [340.8, 366.36, 391.92, 426, 451.56, 477.12, 511.2, 545.28, 579.36, 613.44, 647.52, 681.6, 724.2, 766.8, 809.4],\r\n    dot: [40, 43, 46, 50, 53, 56, 60, 64, 68, 72, 76, 80, 85, 90, 95],\r\n  }\r\n}\r\nfunction nyanDMG(percent, defMulti, stats, skillKey = \"charged\"): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => val * (s.finalATK + defMulti * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    spinningDEF: stats => nyanDMG(data.charged.spinning[stats.tlvl.auto], 0.5, stats),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n    finalDEF: stats => nyanDMG(data.charged.final[stats.tlvl.auto], 0.5, stats),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    ...Object.fromEntries([...Array(3)].map((_, i) => i + 1).flatMap(i => [\r\n      [`shield${i}`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.powShield_ / 100), [\"finalDEF\", \"powShield_\"]]\r\n      }],\r\n      [`shield${i}Pyro`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.powShield_ / 100) * 2.5, [\"finalDEF\", \"powShield_\"]]\r\n      }],\r\n    ])),\r\n    dot: stats => basicDMGFormula(data.skill.dot[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => {\r\n      const val = data.burst.dmg[stats.tlvl.burst] / 100\r\n      const statKey = stats.constellation >= 2 ? `physical_burst_critHit` : `physical_burst_${stats.hitMode}`\r\n      return [s => val * s[statKey], [statKey]]\r\n    },\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  baseStat: {\r\n    characterHP: [784, 2014, 2600, 3895, 4311, 4959, 5514, 6161, 6578, 7225, 7641, 8289, 8705, 9352],\r\n    characterATK: [20, 52, 67, 100, 111, 127, 141, 158, 169, 185, 196, 213, 223, 240],\r\n    characterDEF: [49, 126, 163, 244, 271, 311, 346, 387, 413, 453, 480, 520, 546, 587]\r\n  },\r\n  specializeStat: {\r\n    key: \"pyro_dmg_\",\r\n    value: [0, 0, 0, 0, 6, 6, 12, 12, 12, 12, 18, 18, 24, 24]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [58.34, 62.72, 67.09, 72.93, 77.3, 81.68, 87.51, 93.35, 99.18, 105.01, 110.85, 116.68, 123.98, 131.27, 138.56],\r\n      [52.13, 56.04, 59.94, 65.16, 69.07, 72.98, 78.19, 83.4, 88.61, 93.83, 99.04, 104.25, 110.77, 117.28, 123.8],\r\n      [76.01, 81.71, 87.41, 95.02, 100.72, 106.42, 114.02, 121.62, 129.22, 136.82, 144.42, 152.03, 161.53, 171.03, 180.53]\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [98.23, 104.11, 109.99, 117.64, 123.52, 129.4, 137.05, 144.7, 152.34, 159.99, 167.64, 175.28, 182.93, 190.58, 198.22],\r\n      [115.56, 122.48, 129.4, 138.4, 145.32, 152.24, 161.24, 170.23, 179.23, 188.22, 197.22, 206.22, 215.21, 224.21, 233.2],\r\n      [132.9, 140.86, 148.81, 159.16, 167.12, 175.08, 185.42, 195.77, 206.11, 216.46, 226.8, 237.15, 247.49, 257.84, 268.18],\r\n      [150.23, 159.23, 168.23, 179.92, 188.92, 197.91, 209.61, 221.3, 233, 244.69, 256.39, 268.08, 279.78, 291.47, 303.17],\r\n      [167.57, 177.6, 187.64, 200.68, 210.71, 220.75, 233.79, 246.84, 259.88, 272.92, 285.97, 299.01, 312.06, 325.1, 338.15],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n  },\r\n  burst: {\r\n    dmg: [182.4, 196.08, 209.76, 228, 241.68, 255.36, 273.6, 291.84, 310.08, 328.32, 346.56, 364.8, 387.6, 410.4, 433.2],\r\n    dmg_: [33.4, 35.4, 37.4, 40, 42, 44, 46.6, 49.2, 51.8, 54.4, 57, 59.6, 62.2, 64.8, 67.4]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"charged\"),\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.45 * s.finalHP * (1 + s.powShield_ / 100), [\"finalHP\", \"powShield_\"]],\r\n    shieldCryo: stats => [s => 0.45 * s.finalHP * (1 + s.powShield_ / 100) * 2.5, [\"finalHP\", \"powShield_\"]],\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  baseStat: {\r\n    characterHP: [1144, 2967, 3948, 5908, 6605, 7599, 8528, 9533, 10230, 11243, 11940, 12965, 13662, 14695],\r\n    characterATK: [20, 51, 67, 101, 113, 130, 146, 163, 175, 192, 204, 222, 233, 251],\r\n    characterDEF: [57, 149, 198, 297, 332, 382, 428, 479, 514, 564, 699, 651, 686, 738]\r\n  },\r\n  specializeStat: {\r\n    key: \"geo_dmg_\",\r\n    value: [0, 0, 0, 0, 7.2, 7.2, 14.4, 14.4, 14.4, 14.4, 21.6, 21.6, 28.8, 28.8]\r\n  },\r\n  normal: {\r\n    hitArr: [\r\n      [30.77, 33.27, 35.78, 39.36, 41.86, 44.72, 48.66, 52.59, 56.53, 60.82, 65.74, 71.53, 77.31, 83.1, 89.41],//1\r\n      [31.15, 33.69, 36.22, 39.85, 42.38, 45.28, 49.26, 53.25, 57.23, 61.58, 66.56, 72.42, 78.27, 84.13, 90.52],//2\r\n      [38.58, 41.72, 44.86, 49.34, 52.48, 56.07, 61, 65.94, 70.87, 76.26, 82.42, 89.68, 96.93, 104.18, 112.1],//3\r\n      [42.94, 46.43, 49.93, 54.92, 58.42, 62.41, 67.9, 73.4, 78.89, 84.88, 91.74, 99.82, 107.89, 115.97, 124.77],//4\r\n      [10.75, 11.63, 12.5, 13.75, 14.63, 15.63, 17, 18.38, 19.75, 21.25, 22.97, 24.99, 27.01, 29.03, 31.24],//5 ×4\r\n      [54.5, 58.93, 63.37, 69.7, 74.14, 79.21, 86.18, 93.15, 100.12, 107.73, 116.44, 126.69, 136.93, 147.18, 158.36]\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [111.03, 120.06, 129.1, 142.01, 151.05, 161.38, 175.58, 189.78, 203.98, 219.47, 237.22, 258.1, 278.97, 299.85, 322.62],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    steeleDMG: [16, 17.2, 18.4, 20, 21.2, 22.4, 24, 25.6, 27.2, 28.8, 30.4, 32, 34, 36, 38],\r\n    resonanceDMG: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n    holdDMG: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    shieldBase: [1232, 1356, 1489, 1633, 1787, 1951, 2126, 2311, 2506, 2712, 2927, 3153, 3389, 3636, 3893],\r\n    shieldMaxHP: [12.8, 13.76, 14.72, 16, 16.96, 17.92, 19.2, 20.48, 21.76, 23.04, 24.32, 25.6, 27.2, 28.8, 30.4]\r\n  },\r\n  burst: {\r\n    dmg: [401.08, 444.44, 487.8, 542, 590.78, 639.56, 704.6, 769.64, 834.68, 899.72, 964.76, 1029.8, 1084, 1138.2, 1192.4],\r\n    petriDur: [3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4, 4, 4, 4, 4]\r\n  }\r\n}\r\nfunction zliDMG(percent, hpMulti, stats, skillKey): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => (val * s.finalATK + hpMulti * s.finalHP) * s[statKey], [\"finalATK\", \"finalHP\", statKey]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`${i}HP`, stats =>\r\n      zliDMG(percentArr[stats.tlvl.auto], 0.0139, stats, \"normal\")])),\r\n  },\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n    dmgHP: stats => zliDMG(data.charged.dmg[stats.tlvl.auto], 0.0139, stats, \"charged\")\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    dmgHP: stats => zliDMG(data.plunging.dmg[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    lowHP: stats => zliDMG(data.plunging.low[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n    highHP: stats => zliDMG(data.plunging.high[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    steeleDMG: stats => basicDMGFormula(data.skill.steeleDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    steeleDMGHP: stats => zliDMG(data.skill.steeleDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    resonanceDMG: stats => basicDMGFormula(data.skill.resonanceDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    resonanceDMGHP: stats => zliDMG(data.skill.resonanceDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMGHP: stats => zliDMG(data.skill.holdDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    shield: stats => {\r\n      const base = data.skill.shieldBase[stats.tlvl.skill]\r\n      const hpMulti = data.skill.shieldMaxHP[stats.tlvl.skill] / 100\r\n      return [s => (hpMulti * s.finalHP + base) * (1 + s.powShield_ / 100) * 1.5, [\"finalHP\", \"powShield_\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmgHP: stats => zliDMG(data.burst.dmg[stats.tlvl.burst], 0.33, stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}"],"sourceRoot":""}