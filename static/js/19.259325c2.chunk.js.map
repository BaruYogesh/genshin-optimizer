{"version":3,"sources":["Components/CustomFormControl.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Artifact/Component/ArtifactSetDropDownMenuFragment.tsx","Util/BorrowManager.ts","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Artifact/UploadDisplay.tsx","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","t","useTranslation","database","useContext","DatabaseContext","databaseArtifact","updateDatabaseArtifact","followArt","sheet","usePromise","ArtifactSheet","get","_getArt","setKey","equipOnChar","charKey","setArtLocation","editable","localDatabase","art","characterSheet","CharacterSheet","location","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","levelVariant","floor","mainStatVal","valueStringWithUnit","Artifact","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","name","nameWIthIcon","icon","faBriefcase","slotName","getSlotName","slotDesc","getSlotDesc","slotDescEle","placement","overlay","faInfoCircle","setEffects","setDesc","Object","keys","map","setNumKey","variant","setNum","setEffectDesc","setDescEle","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","size","onClick","updateArt","faLock","faLockOpen","stars","Body","Title","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","style","opacity","has","valid","process","Footer","Toggle","Menu","Item","Divider","onSelect","faEdit","faBan","faChartLine","faTrashAlt","PercentBadge","toFixed","badgeColor","ArtifactSetDropDownMenuFragment","sheets","click","Fragment","entries","setKeysByRarities","reverse","star","sets","Dropdown","Trans","i18nKey","nameWithIcon","BorrowManager","init","deinit","data","this","callback","a","refCount","box","result","starColor","r","g","b","schedulers","language","scheduler","createScheduler","promises","Array","fill","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","show","onHide","contentClassName","faTimes","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","objectFromKeyMap","allArtifactRarities","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","relevantMainStatValues","filter","unit","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","uploadDisplayReset","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactSheets","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","artifactReducer","editorArtifact","artifactDispatch","useMemo","parseArtifact","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newValue","newSheet","pick","prefer","slots","setSubstat","isValid","InputGroup","as","Prepend","DropdownButton","Append","title","Text","l","sKey","getStatNameWithPercent","ItemText","mainStatK","FormControl","valueString","readOnly","OverlayTrigger","Popover","Content","faQuestionCircle","cursor","SubstatInput","Alert","createArt","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","sort","val","indexOf","ButtonGroup","artifactSubstatRollCorrection","action","oldIndex","current","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterExcluded","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","dbStorage","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","removeArt","editArtifact","scrollIntoView","behavior","cancelEditArtifact","pageview","locationDisplay","excludedDisplay","allArtifacts","_getArts","artifacts","filterKey","some","item","numUnequip","numExclude","numInclude","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","faUserShield","paginationCard","showingValue","Container","InfoComponent","pageKey","modalTitle","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","faUserSlash","faTrash","ButtonToolbar","slicep","n"],"mappings":"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","file":"static/js/19.259325c2.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { faBan, faBriefcase, faChartLine, faEdit, faInfoCircle, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Character/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext, database as localDatabase } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport usePromise from '../ReactHooks/usePromise';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: ICachedArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as ICachedArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact, database])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = (Math.floor(Math.max(level - 1, 0) / 4) + 1) + \"roll\"\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ? characterSheet.nameWIthIcon : <span><FontAwesomeIcon icon={faBriefcase} /> {t`filterLocation.inventory`}</span>\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescEle = slotDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"slotdesc-tooltip\">{slotDesc}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n  const setEffects = sheet?.setEffects\r\n  const setDesc = sheet && setEffects && <Tooltip id=\"setdesc-tooltop\">\r\n    {Object.keys(setEffects).map(setNumKey => <span key={setNumKey} className=\"text-left\">\r\n      <h6 className=\"mb-0\"><Badge variant=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</Badge></h6>\r\n      <p>{sheet.setEffectDesc(setNumKey as any)}</p>\r\n    </span>)}\r\n  </Tooltip>\r\n  const setDescEle = setDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={setDesc}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n\r\n  return (<Card className=\"h-100\" border={`${rarity}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${rarity}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-2\">\r\n          <h6><strong>{slotName} {slotDescEle}</strong></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} /> <span className=\"float-right mr-4\"> <Button size=\"sm\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}><FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" /></Button></span></div>\r\n          <div><small><Stars stars={rarity} /></small></div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <Badge variant={levelVariant} ><strong className=\"text-dark\">{` +${level}`}</strong></Badge> {sheet?.name ?? \"Artifact Set\"} {setDescEle}\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <Row>\r\n          <Col ><small>{t`editor.curSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={currentEfficiency} valid={artifactValid} /></Col>\r\n        </Row>\r\n        {currentEfficiency !== maxEfficiency && <Row>\r\n          <Col ><small>{t`editor.maxSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>\r\n        </Row>}\r\n      </div>\r\n      {process.env.NODE_ENV === \"development\" && <span className=\"text-warning\">{id || `\"\"`} </span>}\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}><FontAwesomeIcon icon={faBriefcase} /> Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        {editable && <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\" onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"exclude-artifact-tip\">{t`excludeArtifactTip`}</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.updateArt({ exclude: !exclude }, id)} className=\"rounded-0\" variant={exclude ? \"danger\" : \"success\"}>\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger>\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card >)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import React from \"react\"\r\nimport { Dropdown } from \"react-bootstrap\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { ArtifactSetKey, Rarity } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\ntype Data = {\r\n  sheets?: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  click: (ArtifactSetKey) => void\r\n}\r\nexport default function ArtifactSetDropDownMenuFragment({ sheets, click }: Data) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <React.Fragment>\r\n    {sheets && Object.entries(ArtifactSheet.setKeysByRarities(sheets)).reverse().map(([star, sets], i) =>\r\n      <React.Fragment key={star}>\r\n        {i > 0 && <Dropdown.Divider />}\r\n        <Dropdown.Header><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans></Dropdown.Header>\r\n        {sets.map(setKey => <Dropdown.Item key={setKey} onClick={() => click(setKey)}>{sheets[setKey].nameWithIcon}</Dropdown.Item >)}\r\n      </React.Fragment>)}\r\n  </React.Fragment>\r\n}\r\n","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp, hammingDistance, objectFromKeyMap } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }: { setState: (art: IArtifact) => void, setReset: (reset: () => void) => void, artifactInEditor: boolean }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.rarity}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n            </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectFromKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{valueStringWithUnit(value.value, Stat.getStatUnit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useContext, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact, validateArtifact } from '../Database/validation';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, IArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\nimport artifactSubstatRollCorrection from './artifact_sub_rolls_correction_gen.json'\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\n\r\ntype ArtifactEditorArgument = { artifactIdToEdit: string, cancelEdit: () => void }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nlet uploadDisplayReset: (() => void) | undefined\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: ArtifactEditorArgument) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const database = useContext(DatabaseContext)\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    const databaseArtifact = dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const getUpdloadDisplayReset = (reset: () => void) => uploadDisplayReset = reset\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.nameWithIcon ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(setKey => update({ setKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={rarity} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as ArtifactRarity[]).map((rarity, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(rarity)} onClick={() => update({ rarity })}>\r\n                {<Stars stars={rarity} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2 w-100 d-flex flex-row\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {sheet?.slots?.map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <InputGroup.Text as={InputGroup.Append} className=\"flex-grow-1\">{sheet?.getSlotName(artifact!.slotKey) ?? t`editor.unknownPieceName` as any}</InputGroup.Text>\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${valueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), Stat.getStatUnit(artifact.mainStatKey))}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substats Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={isValid} value={isValid ? currentEfficiency : \"ERR\"} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substats Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={isValid} value={isValid ? maxEfficiency : \"ERR\"} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={!!artifact} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={cachedArtifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactObj={old} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {!isValid && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      {oldType === \"edit\" ?\r\n        <Button className=\"mr-2\" onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} variant={\"primary\"}>\r\n          {t`editor.btnSave`}\r\n        </Button> :\r\n        <Button className=\"mr-2\" onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} variant={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n          {t`editor.btnAdd`}\r\n        </Button>}\r\n      <Button className=\"mr-2\" disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {old && oldType !== \"edit\" && <Button className=\"float-right\" onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, className: string }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = [...rolls].sort().map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key)\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : undefined}\r\n        onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          let newValue = valueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nexport function artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n","import { faBan, faBriefcase, faChartLine, faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserShield, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, ButtonToolbar, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { CharacterSelectionDropdownList } from '../Character/CharacterSelection';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { dbStorage } from '../Database/DBStorage';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, ICachedArtifact, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { clamp } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterExcluded: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50,\r\n  effFilter: [...allSubstats]\r\n})\r\nfunction filterReducer(state, action) {\r\n  //reset all except the efficiency filter, since its a separate UI with its own reset\r\n  if (action.type === \"reset\") return { ...initialFilter(), effFilter: state.effFilter }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(dbStorage.get(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const { effFilter } = filters\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback(\r\n    (id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  useEffect(() => {\r\n    dbStorage.set(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numInclude, numExclude } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterExcluded = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const allArtifacts = database._getArts()\r\n    const artifacts: ICachedArtifact[] = allArtifacts.filter(art => {\r\n      if (filterExcluded) {\r\n        if (filterExcluded === \"excluded\" && !art.exclude) return false\r\n        if (filterExcluded === \"included\" && art.exclude) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.rarity)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).map((art) => {\r\n      switch (sortType) {\r\n        case \"quality\": return { value: [art.rarity], art }\r\n        case \"level\": return { value: [art.level, art.rarity], art }\r\n        case \"efficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency], art }\r\n        case \"mefficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency], art }\r\n      }\r\n      return { value: [0], art }\r\n    }).sort((a, b) => {\r\n      for (let i = 0; i < a.value.length; i++) {\r\n        if (a.value[i] !== b.value[i])\r\n          return (a.value[i] - b.value[i]) * (ascending ? 1 : -1)\r\n      }\r\n      return 0\r\n    }).map(item => item.art)\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { artifacts, totalArtNum: allArtifacts.length, numInclude, numExclude, numUnequip, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty, effFilterSet, database])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterExcluded = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation), [filterLocation])\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"filterLocation.any\")\r\n  else if (filterLocation === \"Inventory\") locationDisplay = <span><FontAwesomeIcon icon={faBriefcase} /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (filterLocation === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (filterExcluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (filterExcluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => database.setArtLocation(art.id!, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => database.removeArt(art.id!))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifacts.map(art => database.updateArt({ exclude: true }, art.id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifacts.map(art => database.updateArt({ exclude: false }, art.id))\r\n\r\n  const paginationCard = useMemo(() => {\r\n    const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n    return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }, [numPages, currentPageIndex, artifactsToShow.length, artifacts.length, totalArtNum, t])\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"resetFilters\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(filterArtSetKey => filterDispatch({ filterArtSetKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><FontAwesomeIcon icon={faBriefcase} /> <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><FontAwesomeIcon icon={faUserShield} /> <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterExcluded ? \"success\" : \"primary\"} >\r\n                    {excludedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"excluded\" })}><span><FontAwesomeIcon icon={faBan} /> <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"included\" })}><span><FontAwesomeIcon icon={faChartLine} /> <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numInclude} onClick={excludeArtifacts}><FontAwesomeIcon icon={faBan} /> <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numExclude} onClick={includeArtifacts}><FontAwesomeIcon icon={faChartLine} /> <Trans t={t} i18nKey=\"button.includeArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Efficiency Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ effFilter: [...allSubstats] })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"ui:reset\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ButtonToolbar as={Row} className=\"w-100 d-flex flex-row\">\r\n          {[[0, 6], [6]].map(slicep => <ToggleButtonGroup key={slicep.toString()} as={Col} type=\"checkbox\" value={effFilter} onChange={n => filterDispatch({ effFilter: n })} className=\"flex-grow-1 mb-2\">\r\n            {allSubstats.slice(...slicep).map(substat => <ToggleButton key={substat} value={substat} variant={effFilter.includes(substat) ? \"success\" : \"primary\"}>{Stat.getStatNameWithPercent(substat)}</ToggleButton>)}\r\n          </ToggleButtonGroup>)}\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n    {paginationCard}\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            effFilter={effFilterSet}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && paginationCard}\r\n  </Container >\r\n}\r\n"],"sourceRoot":""}