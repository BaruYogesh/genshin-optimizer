{"version":3,"sources":["StatData.js","Weapon/Weapon.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Components/StarDisplay.js","Components/CustomFormControl.js","StatDependency.js","Data/WeaponData.js","Components/ConditionalSelector.js","Database/dbV2KeyMap.js","Database/DatabaseUtil.js","Data/CharacterData.js","Components/StatIcon.js","StatConstants.js","Components/CharacterSelection.js","Character/CharacterDisplay/DamageOptionsAndCalculation.js","Character/StatInput.js","Components/StatDisplay.js","Character/CharacterDisplay/StatDisplayComponent.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/BuildDisplay.js","Stat.js","Util/Util.js","Build/Build.js","Character/Character.js","Database/CharacterDatabase.js","Components/SlotIcon.js","Data/ArtifactData.js","Artifact/ArtifactBase.js","Artifact/Artifact.js","Util/ConditionalsUtil.js","Database/ArtifactDatabase.js","Data/ElementalData.js"],"names":["StatData","flat","name","default","characterHP","pretty","const","characterDEF","characterATK","characterEle","characterLevel","weaponATK","baseATK","hp","hp_","unit","atk","atk_","def","def_","dmg_","finalHP","finalATK","finalDEF","critHit_base_multi","eleMas","enerRech_","critRate_","critDMG_","weakspotDMG_","heal_","incHeal_","powShield_","cdRed_","skillCDRed_","burstCDRed_","moveSPD_","atkSPD_","stamina","staminaDec_","staminaGlidingDec_","staminaChargedDec_","heal_multi","transformative_level_multi","amplificative_dmg_","transformative_dmg_","crystalize_eleMas_","variant","crystalize_multi","crystalize_dmg_","crystalize_hit","burning_dmg_","enemyLevel","enemyLevel_multi","enemyDEFRed_","Formulas","s","c","transformativeReactionLevelMultipliers","crystalizeLevelMultipliers","ElementToReactionKeys","physical","anemo","geo","electro","hydro","pyro","cryo","dendro","PreprocessFormulas","dependencyKeys","stats","debug","modifiers","initialStats","constData","formulaList","map","key","tmp","modifier","constModifier","Object","entries","filter","k","dynamicModifier","constFunc","reduce","accu","m","dynamicFunc","funcIndicator","length","func","console","log","error","formula","forEach","assign","hitMoves","move","moveName","clamp","hitElements","ele","eleName","opt","res","hitTypes","type","typeName","transformativeReactions","reaction","multi","variants","amplifyingReactions","baseMulti","Weapon","this","Error","getWeaponDataImport","WeaponDataImport","getLevelName","levelKey","defVal","LevelNameData","getLevelIndex","WeaponLevelKeys","indexOf","getWeaponName","weaponKey","WeaponData","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","refineIndex","charFinalStats","character","passiveDescription","getWeaponDescription","description","getWeaponConditional","conditional","getWeaponImg","img","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","getWeaponSubStatKey","subStatKey","getWeaponBonusStat","getWeaponsOfType","weaponType","fromEntries","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","keys","getWeaponMainStatValWithOverride","weaponObj","overrideMainVal","getWeaponSubStatValWithOverride","overrideSubVal","getWeaponConditionalStat","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","objMultiplication","Assets","elements","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","StarIcon","icon","faStar","Stars","stars","colored","className","Array","_","i","CustomFormControl","float","placeholder","value","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","toString","onChange","e","target","parseFloat","parseInt","onFocus","onBlur","aria-label","GetFormulaDependency","dependency","Set","Proxy","get","prop","receiver","add","formulaKeyDependency","freeze","GetDependencies","dependencies","InsertDependencies","has","then","imp","ConditionalSelector","setConditional","defEle","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","changes","char_ele_key","char_level","hp_base","hp_final","atk_character_base","atk_base","atk_final","atk_weapon","def_base","def_final","phy_dmg_bonus","phy_res","anemo_ele_dmg_bonus","geo_ele_dmg_bonus","electro_ele_dmg_bonus","hydro_ele_dmg_bonus","pyro_ele_dmg_bonus","cryo_ele_dmg_bonus","anemo_ele_res","geo_ele_res","electro_ele_res","hydro_ele_res","pyro_ele_res","cryo_ele_res","ener_rech","crit_rate","crit_dmg","stam","heal_bonu","inc_heal","pow_shield","red_cd","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","skill_dmg_bonus","burst_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_crit_rate","burst_crit_rate","anemo_skill_dmg","anemo_burst_dmg","anemo_skill_crit_dmg","anemo_burst_crit_dmg","anemo_skill_avg_dmg","anemo_burst_avg_dmg","geo_skill_dmg","geo_burst_dmg","geo_skill_crit_dmg","geo_burst_crit_dmg","geo_skill_avg_dmg","geo_burst_avg_dmg","electro_skill_dmg","electro_burst_dmg","electro_skill_crit_dmg","electro_burst_crit_dmg","electro_skill_avg_dmg","electro_burst_avg_dmg","hydro_skill_dmg","hydro_burst_dmg","hydro_skill_crit_dmg","hydro_burst_crit_dmg","hydro_skill_avg_dmg","hydro_burst_avg_dmg","pyro_skill_dmg","pyro_burst_dmg","pyro_skill_crit_dmg","pyro_burst_crit_dmg","pyro_skill_avg_dmg","pyro_burst_avg_dmg","cryo_skill_dmg","cryo_burst_dmg","cryo_skill_crit_dmg","cryo_burst_crit_dmg","cryo_skill_avg_dmg","cryo_burst_avg_dmg","phy_dmg","phy_crit_dmg","phy_avg_dmg","anemo_ele_dmg","anemo_ele_crit_dmg","anemo_ele_avg_dmg","geo_ele_dmg","geo_ele_crit_dmg","geo_ele_avg_dmg","electro_ele_dmg","electro_ele_crit_dmg","electro_ele_avg_dmg","hydro_ele_dmg","hydro_ele_crit_dmg","hydro_ele_avg_dmg","pyro_ele_dmg","pyro_ele_crit_dmg","pyro_ele_avg_dmg","cryo_ele_dmg","cryo_ele_crit_dmg","cryo_ele_avg_dmg","overload_dmg","overload_dmg_bonus","overload_multi","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","burning_dmg","burning_dmg_bonus","swirl_dmg","swirl_dmg_bonus","swirl_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","melt_dmg_bonus","vaporize_dmg_bonus","pyro_vaporize_normal_dmg","pyro_vaporize_normal_crit_dmg","pyro_vaporize_normal_avg_dmg","pyro_vaporize_chraged_dmg","pyro_vaporize_chraged_crit_dmg","pyro_vaporize_chraged_avg_dmg","pyro_vaporize_plunge_dmg","pyro_vaporize_plunge_crit_dmg","pyro_vaporize_plunge_avg_dmg","pyro_vaporize_skill_dmg","pyro_vaporize_skill_crit_dmg","pyro_vaporize_skill_avg_dmg","pyro_vaporize_burst_dmg","pyro_vaporize_burst_crit_dmg","pyro_vaporize_burst_avg_dmg","pyro_vaporize_ele_dmg","pyro_vaporize_ele_crit_dmg","pyro_vaporize_ele_avg_dmg","hydro_vaporize_normal_dmg","hydro_vaporize_normal_crit_dmg","hydro_vaporize_normal_avg_dmg","hydro_vaporize_chraged_dmg","hydro_vaporize_chraged_crit_dmg","hydro_vaporize_chraged_avg_dmg","hydro_vaporize_plunge_dmg","hydro_vaporize_plunge_crit_dmg","hydro_vaporize_plunge_avg_dmg","hydro_vaporize_skill_dmg","hydro_vaporize_skill_crit_dmg","hydro_vaporize_skill_avg_dmg","hydro_vaporize_burst_dmg","hydro_vaporize_burst_crit_dmg","hydro_vaporize_burst_avg_dmg","hydro_vaporize_ele_dmg","hydro_vaporize_ele_crit_dmg","hydro_vaporize_ele_avg_dmg","pyro_melt_normal_dmg","pyro_melt_normal_crit_dmg","pyro_melt_normal_avg_dmg","pyro_melt_chraged_dmg","pyro_melt_chraged_crit_dmg","pyro_melt_chraged_avg_dmg","pyro_melt_plunge_dmg","pyro_melt_plunge_crit_dmg","pyro_melt_plunge_avg_dmg","pyro_melt_skill_dmg","pyro_melt_skill_crit_dmg","pyro_melt_skill_avg_dmg","pyro_melt_burst_dmg","pyro_melt_burst_crit_dmg","pyro_melt_burst_avg_dmg","pyro_melt_ele_dmg","pyro_melt_ele_crit_dmg","pyro_melt_ele_avg_dmg","cryo_melt_normal_dmg","cryo_melt_normal_crit_dmg","cryo_melt_normal_avg_dmg","cryo_melt_chraged_dmg","cryo_melt_chraged_crit_dmg","cryo_melt_chraged_avg_dmg","cryo_melt_plunge_dmg","cryo_melt_plunge_crit_dmg","cryo_melt_plunge_avg_dmg","cryo_melt_skill_dmg","cryo_melt_skill_crit_dmg","cryo_melt_skill_avg_dmg","cryo_melt_burst_dmg","cryo_melt_burst_crit_dmg","cryo_melt_burst_avg_dmg","cryo_melt_ele_dmg","cryo_melt_ele_crit_dmg","cryo_melt_ele_avg_dmg","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","anemo_enemy_ele_res","anemo_enemy_ele_res_multi","anemo_enemy_ele_immunity","geo_enemy_ele_res","geo_enemy_ele_res_multi","geo_enemy_ele_immunity","electro_enemy_ele_res","electro_enemy_ele_res_multi","electro_enemy_ele_immunity","hydro_enemy_ele_res","hydro_enemy_ele_res_multi","hydro_enemy_ele_immunity","pyro_enemy_ele_res","pyro_enemy_ele_res_multi","pyro_enemy_ele_immunity","cryo_enemy_ele_res","cryo_enemy_ele_res_multi","cryo_enemy_ele_immunity","ele_mas","amp_reaction_base_multi","enemy_level_multi","enemy_level","dmgModeToHitMode","avg_dmg","dmg","CurrentDatabaseVersion","DatabaseInitAndVerify","dbVersion","getDatabaseVersion","localStorage","startsWith","loadFromLocalStorage","characterKey","equippedArtifacts","dbKey","getItem","id","dmgMode","rest","buildSetting","mainStat","stat","v2change","statFilters","hitMode","saveToLocalStorage","values","artid","art","location","removeItem","ArtifactDisplayState","filterMainStatKey","filterSubstats","charDBJustPopualted","CharacterDatabase","populateDatebaseFromLocalStorage","artDBJustPopualted","ArtifactDatabase","getArtifactDatabase","valid","artInSlotId","getArtifactIDFromSlot","slotKey","equipArtifact","Artifact","substatsValidation","numStars","keyMapping","setKey","mainStatKey","endsWith","replace","substats","obj","update","chars","getCharacterDatabase","equippedArt","moveToNewLocation","artifactConditionals","cond","srcKey","srcKey2","setDatabaseVersion","version","createDatabaseObj","characterDatabase","artifactDatabase","artifactDisplay","characterDisplay","buildsDisplay","loadDatabaseObj","clearDatabase","charKey","char","CharacterData","CharacterDataImport","LevelsData","level","asend","characterStatBase","CharacterSpecializedStatKey","StatIcon","faTint","faFistRaised","faShieldAlt","faMagic","faDice","faDiceD20","faSync","faFirstAid","StatIconEle","statKey","hit","avgHit","critHit","normal","charged","plunging","elemental","skill","burst","ElementalData","overloaded","shattered","electrocharged","superconduct","swirl","vaporize","melt","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","Character","getName","ReactionToggle","reactionMode","setReactionMode","charEleKey","getElementalKey","includes","defaultValue","val","src","HitModeToggle","setHitMode","CalculationDisplay","build","getDisplayStatKeys","finalStats","talentKey","fields","header","getTalentName","bg","Header","Body","field","fieldIndex","subFormulaKeys","Stat","getPrintableFormulaStatKeyList","reverse","Boolean","as","Card","eventKey","printStat","Collapse","subKey","printFormula","talentField","getTalentField","sectionIndex","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","fieldFormula","fieldFormulaDependency","fieldValue","toFixed","ContextAwareToggle","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","DamageOptionsAndCalculation","setState","setOverride","newBuild","equippedBuild","xs","r","Button","href","rel","xl","getStatValueWithOverride","getStatNameRaw","getBaseStatValue","getElementalKeys","eleKey","immunityStatKey","elementImmunity","prependEle","StatInput","percent","restProps","Prepend","Text","Append","undefined","placement","overlay","style","pointerEvents","faUndo","DisplayStatDiff","label","oldVal","fixed","diff","oldText","diffText","StatDisplay","editable","invalid","getStatUnit","fixedUnit","getStatName","labelVariant","hasOverride","StatDisplayComponent","statsDisplayKeys","cardbg","md","JSON","stringify","CharacterCard","onEdit","onDelete","cardClassName","footer","useReducer","x","forceUpdate","useEffect","Promise","all","getCharacterDataImport","getDataImport","calculateBuild","setToSlots","weapon","constellation","elementKey","weaponTypeKey","getWeaponTypeKey","weaponName","weaponMainVal","weaponSubKey","weaponSubVal","weaponLevelName","weaponPassiveName","faEdit","faTrashAlt","getThumb","getStar","thumbnail","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","statVal","Footer","Link","to","pathname","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","maxBuildsToShowList","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","getInitialState","state","maxBuildsToShow","showCharacterModal","splitArtifacts","getSlotKeys","useLockedArts","lock","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","index","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","setFilters","num","dropdownitemsForStar","star","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","every","Dropdown","totBuildNumber","generateBuilds","builds","generationProgress","generationDuration","generatingBuilds","ascending","optimizationTarget","artifactsAssumeFull","calculateCharacterWithWeaponStats","getFormulaPath","artifactSetEffects","getAllArtifactSetEffectsObj","deepClone","artArr","mainStatVal","getMainStatValue","minFilters","min","maxFilters","data","worker","terminate","onmessage","progress","timing","ReactGA","category","variable","calculateBuildWithObjs","artifacts","postMessage","BuildGeneratorEditorCard","characterName","artsAccounted","calculateTotalBuildNumber","totalBuildNumberString","toLocaleString","generationProgressString","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cKey","Row","Col","lg","hasTalentPage","HitModeCard","StatFilterCard","setStatFilters","sFs","showArtCondModal","Badge","setNum","ButtonGroup","ItemText","setNkey","setNumKey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","getConditionalStats","conditionalElement","getSetEffectText","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","SortByStatDropdown","updater","closeModal","modalBuild","BuildModal","Modal","show","onHide","contentClassName","Suspense","fallback","setCharacterKey","onClose","closeArtCondModal","ArtConditionalModal","artSetKeyList","faTimes","getPieceIcon","getPieces","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","pageview","Container","ListGroup","ArtifactDisplayItem","artifactIds","join","React","Component","sortByText","getStatVariant","getStatNamePretty","drop","align","minWidth","faSortAmountDownAlt","faSortAmountUp","StatFilterItem","statKeys","close","setFilter","isFloat","inputProps","minInputProps","maxInputProps","InputGroup","sKey","faTrash","basicKeys","remainingKeys","action","slotarr1","slotarr","getSlotIcon","initialState","htmlStatsData","f","expand","statList","FormulaText","modifierText","mkey","multiplier","options","statName","statUnit","o","getRandomElementFromArray","array","random","getRandomIntInclusive","ceil","parse","setItem","closeEnoughFloat","abs","closeEnoughInt","low","high","getArrLastElement","clampPercent","string","pad","slice","hammingDistance","str1","str2","dist","toLowerCase","j","match","artifactsBySlot","setKeys","filteredArtifactsBySlot","slotKeys","artifactsBySet","artifact","push","setCount","result","slotPerm","artifactSetPermutations","getTalentStatKey","skillKey","autoInfused","getTalentStatKeyVariant","formulaDB","getCDataObj","formulaKey","tk","find","remove","getSpecializedStatKey","getSpeicalizedStatVal","getLevel","characterObj","baseStat","getIndexFromlevelkey","getElementalName","elementalKey","getAllCharacterKeys","getElementalKeysWithoutPhysical","getConstellationName","constellationName","getTitles","titles","getlevelKeys","getlevelNames","getAscension","getSpecializedStat","specializeStat","thumbImg","getCard","cardImg","getTalentImg","getTalent","getConstellationImg","constIndex","talent","getTalentLevelBoost","talents","talentBoost","boostEntry","getTalentDocument","document","getTalentDocumentSections","section","getTalentStats","talentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","sections","tempCond","getTalentConditionalStats","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","transReactions","charFormulas","genericAvgHit","reactions","baseStatOverrides","equipArtifacts","artIdsOnCharacter","artIdsNotOnCharacter","artNotOnChar","artOnChar","notCharLoc","artifactSetEffectsStats","getArtifactSetEffectsStats","substat","mergeStats","talentLevelKeys","talentConditionals","ascension","tlvl","overrides","hasOwnProperty","specializedStatVal","specialStatKey","initiated","isInvalid","getIdList","dchar","unequipArtifactOnSlot","equipArtifactBuild","unequipAllArtifacts","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","ArtifactData","ArtifactDataImport","ArtifactMainSlotKeys","ArtifactStarsData","3","subsBaselow","subBaseHigh","numUpgradesOrUnlocks","4","5","ArtifactMainStatsData","1","physical_dmg_","ele_dmg_","2","ArtifactSubStatsData","ArtifactSubstatsMinMax","ArtifactSlotsData","ArtifactBase","rollArr","getSubstatRolls","rolls","efficiency","getSubstatEfficiency","getArtifactEfficiency","currentEfficiency","maximumEfficiency","errMsgs","currentNumOfRolls","sum","leastNumRolls","getBaseSubRollNumLow","rollslen","moreRolls","rollsRemaining","totalPossbleRolls","totalPossibleRolls","totalCurrentEfficiency","maxPerRoll","getSubstatAllMax","artifactId","currentLocation","intendedLocation","artifactToSwapWithid","artifactToSwapWith","swapLocations","getSetKeys","pieces","getPieceName","icons","setEffects","artifactSetEffect","setNumKeys","setEffectText","getSlotName","slotIcon","databaseObj","getStars","getMainStatKeys","getMainStatValues","numStar","getBaseSubRollNumHigh","getNumUpgradesOrUnlocks","getSubStatKeys","subStatCloseEnough","value1","value2","numberOfSubstatUnlocked","getSubstatRollData","subStatValue","rollData","maxNumRoll","round","rollOption","roll","len","ArtifactSetEffectsObj","setObj","setEffect","setEffectObj","condStats","conditionals","srcKeyObj","findIndex","splice","newCond","fieldName","artIdIndex","removeArtifactById","removeArtifact","dart","artId","artA","artB","locA","locB","swapLocationsById","artAid","artBid"],"mappings":"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","file":"static/js/14.39905d19.chunk.js","sourcesContent":["import { clamp } from \"./Util/Util\";\r\nimport { hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions, transformativeReactionLevelMultipliers, crystalizeLevelMultipliers } from \"./StatConstants\"\r\n\r\nconst StatData = {\r\n  flat: { name: \"\", default: 1 },\r\n\r\n  // Character Stats\r\n  characterHP: { name: \"HP\", pretty: \"Character Base HP\", const: true },\r\n  characterDEF: { name: \"DEF\", pretty: \"Character Base DEF\", const: true },\r\n  characterATK: { name: \"ATK\", pretty: \"Character Base ATK\", const: true },\r\n  characterEle: { name: \"Character Element Key\", default: \"anemo\", const: true },\r\n  characterLevel: { name: \"Character Level\", default: 1, const: true },\r\n\r\n  // Weapon Stats\r\n  weaponATK: { name: \"Weapon ATK\", pretty: \"ATK Weapon\", const: true },\r\n\r\n  // Character & Weapon Stats\r\n  baseATK: { name: \"ATK\", pretty: \"ATK Base\", const: true }, // characterATK + weaponATK\r\n\r\n  // Weapon & Artifact Stats\r\n  hp: { name: \"HP\", pretty: \"Flat HP\" },//flat hp\r\n  hp_: { name: \"HP\", unit: \"%\", pretty: \"HP Bonus\" },\r\n  atk: { name: \"ATK\", pretty: \"Flat ATK\" },\r\n  atk_: { name: \"ATK\", unit: \"%\", pretty: \"ATK Bonus\" },\r\n  def: { name: \"DEF\", pretty: \"Flat DEF\" },\r\n  def_: { name: \"DEF\", unit: \"%\", pretty: \"DEF Bonus\" },\r\n  dmg_: { name: \"All DMG Bonus\", unit: \"%\" },\r\n\r\n  // Attack-related Character, Weapon & Artifact Stats\r\n  finalHP: { name: \"HP\", pretty: \"HP\" },\r\n  finalATK: { name: \"ATK\", pretty: \"ATK\" },\r\n  finalDEF: { name: \"DEF\", pretty: \"DEF\" },\r\n\r\n  critHit_base_multi: { name: `Crit Multiplier`, unit: \"multi\" },\r\n\r\n  eleMas: { name: \"Elemental Mastery\", },\r\n  enerRech_: { name: \"Energy Recharge\", unit: \"%\", default: 100 },\r\n  critRate_: { name: \"CRIT Rate\", unit: \"%\", default: 5 },\r\n\r\n  critDMG_: { name: \"CRIT DMG\", unit: \"%\", default: 50 },\r\n  weakspotDMG_: { name: \"Weakspot DMG\", unit: \"%\" },\r\n\r\n  // Misc. Stats\r\n  heal_: { name: \"Healing Bonus\", unit: \"%\" },\r\n  incHeal_: { name: \"Incoming Healing Bonus\", unit: \"%\" },\r\n  powShield_: { name: \"Shield Strength\", unit: \"%\" },\r\n  cdRed_: { name: \"CD Red.\", unit: \"%\" },\r\n  skillCDRed_: { name: \"Ele. Skill CD Red.\", unit: \"%\" },\r\n  burstCDRed_: { name: \"Ele. Burst CD Red.\", unit: \"%\" },\r\n  moveSPD_: { name: \"Movement SPD\", unit: \"%\" },\r\n  atkSPD_: { name: \"ATK SPD\", unit: \"%\" },\r\n  stamina: { name: \"Stamina\" },\r\n  staminaDec_: { name: \"Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaGlidingDec_: { name: \"Gliding Stamina Consumption Dec.\", unit: \"%\" },\r\n  staminaChargedDec_: { name: \"Charged Attack Stamina Consumption Dec.\", unit: \"%\" },\r\n\r\n  heal_multi: { name: \"Heal multiplier\", unit: \"multi\" },\r\n\r\n  // Reaction\r\n  transformative_level_multi: { name: \"Reaction Level Multiplier\", unit: \"multi\", const: true },\r\n  amplificative_dmg_: { name: \"Amplificative Reaction DMG Bonus\", unit: \"%\" },\r\n  transformative_dmg_: { name: \"Transformative Reaction DMG Bonus\", unit: \"%\" },\r\n  crystalize_eleMas_: { name: \"Crystalize Bonus (Elemental Mastery)\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_multi: { name: \"Crystalize Multiplier\", unit: \"multi\", const: true, variant: \"crystalize\" },\r\n  crystalize_dmg_: { name: \"Crystalize Bonus\", unit: \"%\", variant: \"crystalize\" },\r\n  crystalize_hit: { name: \"Crystalize Shield HP\", variant: \"crystalize\" },\r\n  burning_dmg_: { name: \"Burning DMG Bonus\", variant: \"burning\" },\r\n\r\n  // Enemy\r\n  enemyLevel: { name: \"Enemy Level\", const: true },\r\n  enemyLevel_multi: { name: \"Enemy Level RES Multiplier\", unit: \"multi\", const: true },\r\n  enemyDEFRed_: { name: \"Enemy DEF Reduction\", unit: \"%\", const: true }\r\n}\r\nconst Formulas = {\r\n  // Basic Stats\r\n  baseATK: (s, c) => c.characterATK + c.weaponATK,\r\n  finalATK: (s, c) => c.baseATK * (1 + s.atk_ / 100) + s.atk,\r\n  finalHP: (s, c) => c.characterHP * (1 + s.hp_ / 100) + s.hp,\r\n  finalDEF: (s, c) => c.characterDEF * (1 + s.def_ / 100) + s.def,\r\n\r\n  critHit_base_multi: (s) => (1 + s.critDMG_ / 100),\r\n\r\n  enemyLevel_multi: (s, c) => (100 + c.characterLevel) / ((100 + c.characterLevel) + (100 + c.enemyLevel) * (1 - c.enemyDEFRed_ / 100)),\r\n\r\n  heal_multi: (s) => (1 + s.heal_ / 100 + s.incHeal_ / 100),\r\n\r\n  // Reactions\r\n  transformative_level_multi: (s, c) => transformativeReactionLevelMultipliers[c.characterLevel],\r\n  amplificative_dmg_: (s) => 2500 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  transformative_dmg_: (s) => 6000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n\r\n  crystalize_eleMas_: (s) => 4000 / 9 * s.eleMas / (1400 + s.eleMas),\r\n  crystalize_multi: (s, c) => crystalizeLevelMultipliers[c.characterLevel],\r\n  crystalize_hit: (s, c) => (100 + s.crystalize_dmg_ + s.crystalize_eleMas_) / 100 * c.crystalize_multi,\r\n}\r\n\r\nconst ElementToReactionKeys = {\r\n  physical: [],\r\n  anemo: [\"electro_swirl_hit\", \"pyro_swirl_hit\", \"cryo_swirl_hit\", \"hydro_swirl_hit\"],\r\n  geo: [\"crystalize_hit\", \"shattered_hit\"],\r\n  electro: [\"overloaded_hit\", \"electrocharged_hit\", \"superconduct_hit\"],\r\n  hydro: [\"electrocharged_hit\", \"shattered_hit\"],//\"hydro_vaporize_multi\",\r\n  pyro: [\"overloaded_hit\"],// \"burning_hit\",\"pyro_vaporize_multi\", \"pyro_melt_multi\", \r\n  cryo: [\"shattered_hit\", \"superconduct_hit\"],//\"cryo_melt_multi\", \r\n  dendro: []\r\n}\r\nfunction resMultiplier(res) {\r\n  res = res / 100\r\n  if (res < 0) return 1 - res / 2\r\n  else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n  return 1 - res\r\n}\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  StatData[`${move}_dmg_`] = { name: `${moveName} DMG Bonus`, unit: \"%\" }\r\n  StatData[`${move}_critRate_`] = { name: `${moveName} CRIT Rate Bonus`, unit: \"%\" }\r\n  StatData[`final_${move}_critRate_`] = { name: `${moveName} CRIT Rate`, unit: \"%\" }\r\n\r\n  Formulas[`final_${move}_critRate_`] = (s) => clamp(s.critRate_ + s[`${move}_critRate_`], 0, 100)\r\n})\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  const opt = { variant: ele }\r\n  // DONT CHANGE. needed for screenshot parsing\r\n  StatData[`${ele}_dmg_`] = { name: `${eleName} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${ele}_res_`] = { name: `${eleName} DMG RES`, unit: \"%\", ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_`] = { name: `Enemy ${eleName} DMG RES`, unit: \"%\", default: 10, const: true, ...opt }\r\n  StatData[`${ele}_enemyImmunity`] = { name: `Enemy ${eleName} Immunity`, default: false, const: true, ...opt }\r\n\r\n  StatData[`${ele}_enemyRes_multi`] = { name: `Enemy ${eleName} RES Multiplier`, unit: \"multi\", const: true, ...opt }\r\n  StatData[`${ele}_bonus_multi`] = { name: `${eleName} Attack Bonus DMG Multiplier`, unit: \"multi\", ...opt }\r\n\r\n  Formulas[`${ele}_enemyRes_multi`] = (s, c) => c[`${ele}_enemyImmunity`] ? 0 : resMultiplier(c[`${ele}_enemyRes_`])\r\n})\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  StatData[`${move}_avgHit_base_multi`] = { name: `${moveName} Avg. Multiplier`, unit: \"multi\" }\r\n  Formulas[`${move}_avgHit_base_multi`] = (s) => (1 + s.critDMG_ * s[`final_${move}_critRate_`] / 10000)\r\n  Object.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n    const opt = { variant: ele }\r\n    StatData[`${ele}_${move}_hit_base_multi`] = { name: `${moveName} Base Multiplier`, unit: \"multi\", ...opt }\r\n    Formulas[`${ele}_${move}_hit_base_multi`] = (s, c) => (100 + s.dmg_ + s[`${ele}_dmg_`] + s[`${move}_dmg_`]) / 100\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      StatData[`${ele}_${move}_${type}`] = { name: `${moveName} ${typeName}`, ...opt }\r\n      Formulas[`${ele}_${move}_${type}`] = (s) => s.finalATK * s[`${ele}_${move}_${type}_multi`]\r\n      StatData[`${ele}_${move}_${type}_multi`] = { name: `${moveName} ${typeName} Multiplier`, unit: \"multi\", ...opt }\r\n    })\r\n\r\n    Formulas[`${ele}_${move}_hit_multi`] = (s, c) => s[`${ele}_${move}_hit_base_multi`] * c.enemyLevel_multi * c[`${ele}_enemyRes_multi`]\r\n    Formulas[`${ele}_${move}_critHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * s[`critHit_base_multi`]\r\n    Formulas[`${ele}_${move}_avgHit_multi`] = (s) => s[`${ele}_${move}_hit_multi`] * s[`${move}_avgHit_base_multi`]\r\n  })\r\n})\r\n\r\nObject.entries(transformativeReactions).forEach(([reaction, { name, multi, variants }]) => {\r\n  const opt = { variant: reaction }\r\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\r\n  StatData[`${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", const: true, ...opt }\r\n  Formulas[`${reaction}_multi`] = (s, c) => multi * c.transformative_level_multi\r\n  if (variants.length === 1) {\r\n    const [ele] = variants, opt = { variant: reaction }\r\n    StatData[`${reaction}_hit`] = { name: `${name} DMG`, ...opt }\r\n    Formulas[`${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\r\n  } else {\r\n    variants.forEach(ele => {\r\n      const opt = { variant: ele }\r\n\r\n      StatData[`${ele}_${reaction}_hit`] = { name: `${hitElements[ele].name} ${name} DMG`, ...opt }\r\n      Formulas[`${ele}_${reaction}_hit`] = (s, c) => (100 + s.transformative_dmg_ + s[`${reaction}_dmg_`]) / 100 * c[`${reaction}_multi`] * c[`${ele}_enemyRes_multi`]\r\n    })\r\n  }\r\n})\r\n\r\nObject.entries(amplifyingReactions).forEach(([reaction, { name, variants }]) => {\r\n  const opt = { variant: reaction }\r\n  StatData[`${reaction}_dmg_`] = { name: `${name} DMG Bonus`, unit: \"%\", ...opt }\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    StatData[`${ele}_${reaction}_multi`] = { name: `${name} Multiplier`, unit: \"multi\", ...opt }\r\n    Formulas[`${ele}_${reaction}_multi`] = (s) => baseMulti * (100 + s.amplificative_dmg_ + s[`${reaction}_dmg_`]) / 100\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        StatData[`${ele}_${reaction}_${move}_${type}_multi`] = { name: `${name} ${moveName} ${typeName} Multiplier`, unit: \"multi\", ...opt }\r\n        StatData[`${ele}_${reaction}_${move}_${type}`] = { name: `${name} ${moveName} ${typeName}`, ...opt }\r\n\r\n        Formulas[`${ele}_${reaction}_${move}_${type}_multi`] = (s) => s[`${ele}_${move}_${type}_multi`] * s[`${ele}_${reaction}_multi`]\r\n        Formulas[`${ele}_${reaction}_${move}_${type}`] = (s) => s.finalATK * s[`${ele}_${reaction}_${move}_${type}_multi`]\r\n      })\r\n    })\r\n  })\r\n})\r\nif (process.env.NODE_ENV === \"development\") console.log(StatData)\r\n\r\n//assume all the dependency for the modifiers are part of the dependencyKeys as well\r\nfunction PreprocessFormulas(dependencyKeys, stats, debug = false) {\r\n  const { modifiers = {} } = stats, initialStats = {}, constData = {}\r\n  const formulaList = dependencyKeys.map(key => {\r\n    const modifier = modifiers[key] ?? {}\r\n    const constModifier = Object.entries(modifier).filter(([k]) => StatData[k]?.const)\r\n    const dynamicModifier = Object.entries(modifier).filter(([k]) => !(StatData[k]?.const))\r\n    const constFunc = (s, c) => constModifier.reduce((accu, [k, m]) => accu + c[k] * m, 0)\r\n    const dynamicFunc = (s) => dynamicModifier.reduce((accu, [k, m]) => accu + s[k] * m, 0)\r\n\r\n    let funcIndicator = 0\r\n    if (constModifier.length) funcIndicator += 1\r\n    if (dynamicModifier.length) funcIndicator += 2\r\n    if (!Formulas[key]) funcIndicator += StatData[key]?.const ? 4 : 8\r\n\r\n    let tmp\r\n    switch (funcIndicator) {\r\n      case 0: tmp = Formulas[key]; break\r\n      case 1: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c); break\r\n      case 2: tmp = (s, c) => Formulas[key](s, c) + dynamicFunc(s, c); break\r\n      case 3: tmp = (s, c) => Formulas[key](s, c) + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 4: tmp = (s, c) => c[key]; break\r\n      case 5: tmp = (s, c) => c[key] + constFunc(s, c); break\r\n      case 6: tmp = (s, c) => c[key] + dynamicFunc(s, c); break\r\n      case 7: tmp = (s, c) => c[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n      case 8: tmp = (s, c) => s[key]; break\r\n      case 9: tmp = (s, c) => s[key] + constFunc(s, c); break\r\n      case 10: tmp = (s, c) => s[key] + dynamicFunc(s, c); break\r\n      default: tmp = (s, c) => s[key] + constFunc(s, c) + dynamicFunc(s, c); break\r\n    }\r\n    const func = tmp\r\n\r\n    if (debug) console.log(StatData[key]?.const ? \"Const\" : \"Dynamic\", key, constModifier, dynamicModifier, \"\" + Formulas[key])\r\n\r\n    if (!(key in Formulas))\r\n      stats[key] = stats[key] ?? StatData[key]?.default ?? 0\r\n\r\n    if (StatData[key]?.const) {\r\n      constData[key] = stats[key]\r\n      constData[key] = func(stats, constData)\r\n      stats[key] = constData[key]\r\n      if (dynamicModifier.length)\r\n        console.error(`Constant key ${key} depends on a dynamic modifer ${dynamicModifier}. The result will be incorrect.`)\r\n      return null\r\n    }\r\n\r\n    if (!(key in Formulas))\r\n      initialStats[key] = stats[key]\r\n\r\n    return [key, func]\r\n  }).filter((func) => func)\r\n\r\n  if (debug) console.log(initialStats, constData)\r\n\r\n  return {\r\n    initialStats,\r\n    formula: s => {\r\n      formulaList.forEach(([key, formula]) => s[key] = formula(s, constData))\r\n      // TODO: we shouldn't need to copy *all* constData, only ones that are targets.\r\n      Object.assign(s, constData)\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  Formulas,\r\n  StatData,\r\n  ElementToReactionKeys,\r\n  PreprocessFormulas,\r\n}\r\n","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nimport { objMultiplication } from '../Util/Util.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    stats = stats(refineIndex)\r\n    if (stacks !== 1) objMultiplication(stats, stacks)\r\n    return stats\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key => \r\n      !StatData[key]?.const &&\r\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","//for DB v2, we changed a bunch of keys.\r\nconst changes = {\r\n  char_ele_key: \"characterEle\",\r\n  char_level: \"characterLevel\",\r\n\r\n  hp_base: \"characterHP\",\r\n  hp_final: \"finalHP\",\r\n  atk_character_base: \"characterATK\",\r\n  atk_base: \"baseATK\",\r\n  atk_final: \"finalATK\",\r\n  atk_weapon: \"weaponATK\",\r\n  def_base: \"characterDEF\",\r\n  def_final: \"finalDEF\",\r\n  phy_dmg_bonus: \"physical_dmg_\",\r\n  phy_res: \"physical_res_\",\r\n  anemo_ele_dmg_bonus: \"anemo_dmg_\",\r\n  geo_ele_dmg_bonus: \"geo_dmg_\",\r\n  electro_ele_dmg_bonus: \"electro_dmg_\",\r\n  hydro_ele_dmg_bonus: \"hydro_dmg_\",\r\n  pyro_ele_dmg_bonus: \"pyro_dmg_\",\r\n  cryo_ele_dmg_bonus: \"cryo_dmg_\",\r\n  anemo_ele_res: \"anemo_res_\",\r\n  geo_ele_res: \"geo_res_\",\r\n  electro_ele_res: \"electro_res_\",\r\n  hydro_ele_res: \"hydro_res_\",\r\n  pyro_ele_res: \"pyro_res_\",\r\n  cryo_ele_res: \"cryo_res_\",\r\n  ener_rech: \"enerRech_\",\r\n  crit_rate: \"critRate_\",\r\n  crit_dmg: \"critDMG_\",\r\n  stam: \"stamina\",\r\n  heal_bonu: \"heal_\",\r\n  inc_heal: \"incHeal_\",\r\n  pow_shield: \"powShield_\",\r\n  red_cd: \"cdRed_\",\r\n  skill_cd_red: \"skillCDRed_\",\r\n  burst_cd_red: \"burstCDRed_\",\r\n  all_dmg_bonus: \"dmg_\",\r\n  move_spd: \"moveSPD_\",\r\n  atk_spd: \"atkSPD_\",\r\n  weakspot_dmg: \"weakspotDMG_\",\r\n  stamina_dec: \"staminaDec_\",\r\n  stamina_gliding_dec: \"staminaGlidingDec_\",\r\n  stamina_charged_dec: \"staminaChargedDec_\",\r\n  ele_mas_multi_x: \"eleMasX\",\r\n  ele_mas_multi_y: \"eleMasY\",\r\n  ele_mas_multi_z: \"eleMasZ\",\r\n\r\n  norm_atk_dmg: \"physical_normal_hit\",\r\n  char_atk_dmg: \"physical_charged_hit\",\r\n  plunge_dmg: \"physical_plunging_hit\",\r\n  norm_atk_crit_dmg: \"physical_normal_critHit\",\r\n  char_atk_crit_dmg: \"physical_charged_critHit\",\r\n  plunge_crit_dmg: \"physical_plunging_critHit\",\r\n  norm_atk_avg_dmg: \"physical_normal_avgHit\",\r\n  char_atk_avg_dmg: \"physical_charged_avgHit\",\r\n  plunge_avg_dmg: \"physical_plunging_avgHit\",\r\n  norm_atk_dmg_bonus: \"normal_dmg_\",\r\n  char_atk_dmg_bonus: \"charged_dmg_\",\r\n  plunge_atk_dmg_bonus: \"plunging_dmg_\",\r\n  skill_dmg_bonus: \"skill_dmg_\",\r\n  burst_dmg_bonus: \"burst_dmg_\",\r\n  norm_atk_crit_rate: \"normal_critRate_\",\r\n  char_atk_crit_rate: \"charged_critRate_\",\r\n  skill_crit_rate: \"skill_critRate_\",\r\n  burst_crit_rate: \"burst_critRate_\",\r\n\r\n  anemo_skill_dmg: \"anemo_skill_hit\",\r\n  anemo_burst_dmg: \"anemo_burst_hit\",\r\n  anemo_skill_crit_dmg: \"anemo_skill_critHit\",\r\n  anemo_burst_crit_dmg: \"anemo_burst_critHit\",\r\n  anemo_skill_avg_dmg: \"anemo_skill_avgHit\",\r\n  anemo_burst_avg_dmg: \"anemo_burst_avgHit\",\r\n  geo_skill_dmg: \"geo_skill_hit\",\r\n  geo_burst_dmg: \"geo_burst_hit\",\r\n  geo_skill_crit_dmg: \"geo_skill_critHit\",\r\n  geo_burst_crit_dmg: \"geo_burst_critHit\",\r\n  geo_skill_avg_dmg: \"geo_skill_avgHit\",\r\n  geo_burst_avg_dmg: \"geo_burst_avgHit\",\r\n  electro_skill_dmg: \"electro_skill_hit\",\r\n  electro_burst_dmg: \"electro_burst_hit\",\r\n  electro_skill_crit_dmg: \"electro_skill_critHit\",\r\n  electro_burst_crit_dmg: \"electro_burst_critHit\",\r\n  electro_skill_avg_dmg: \"electro_skill_avgHit\",\r\n  electro_burst_avg_dmg: \"electro_burst_avgHit\",\r\n  hydro_skill_dmg: \"hydro_skill_hit\",\r\n  hydro_burst_dmg: \"hydro_burst_hit\",\r\n  hydro_skill_crit_dmg: \"hydro_skill_critHit\",\r\n  hydro_burst_crit_dmg: \"hydro_burst_critHit\",\r\n  hydro_skill_avg_dmg: \"hydro_skill_avgHit\",\r\n  hydro_burst_avg_dmg: \"hydro_burst_avgHit\",\r\n  pyro_skill_dmg: \"pyro_skill_hit\",\r\n  pyro_burst_dmg: \"pyro_burst_hit\",\r\n  pyro_skill_crit_dmg: \"pyro_skill_critHit\",\r\n  pyro_burst_crit_dmg: \"pyro_burst_critHit\",\r\n  pyro_skill_avg_dmg: \"pyro_skill_avgHit\",\r\n  pyro_burst_avg_dmg: \"pyro_burst_avgHit\",\r\n  cryo_skill_dmg: \"cryo_skill_hit\",\r\n  cryo_burst_dmg: \"cryo_burst_hit\",\r\n  cryo_skill_crit_dmg: \"cryo_skill_critHit\",\r\n  cryo_burst_crit_dmg: \"cryo_burst_critHit\",\r\n  cryo_skill_avg_dmg: \"cryo_skill_avgHit\",\r\n  cryo_burst_avg_dmg: \"cryo_burst_avgHit\",\r\n\r\n  phy_dmg: \"physical_hit\",\r\n  phy_crit_dmg: \"physical_critHit\",\r\n  phy_avg_dmg: \"physical_avgHit\",\r\n  anemo_ele_dmg: \"anemo_hit\",\r\n  anemo_ele_crit_dmg: \"anemo_critHit\",\r\n  anemo_ele_avg_dmg: \"anemo_avgHit\",\r\n  geo_ele_dmg: \"geo_hit\",\r\n  geo_ele_crit_dmg: \"geo_critHit\",\r\n  geo_ele_avg_dmg: \"geo_avgHit\",\r\n  electro_ele_dmg: \"electro_hit\",\r\n  electro_ele_crit_dmg: \"electro_critHit\",\r\n  electro_ele_avg_dmg: \"electro_avgHit\",\r\n  hydro_ele_dmg: \"hydro_hit\",\r\n  hydro_ele_crit_dmg: \"hydro_critHit\",\r\n  hydro_ele_avg_dmg: \"hydro_avgHit\",\r\n  pyro_ele_dmg: \"pyro_hit\",\r\n  pyro_ele_crit_dmg: \"pyro_critHit\",\r\n  pyro_ele_avg_dmg: \"pyro_avgHit\",\r\n  cryo_ele_dmg: \"cryo_hit\",\r\n  cryo_ele_crit_dmg: \"cryo_critHit\",\r\n  cryo_ele_avg_dmg: \"cryo_avgHit\",\r\n\r\n  overload_dmg: \"overload_hit\",\r\n  overload_dmg_bonus: \"overload_dmg_\",\r\n  overload_multi: \"overload_multi\",\r\n  electrocharged_dmg: \"electrocharged_hit\",\r\n  electrocharged_dmg_bonus: \"electrocharged_dmg_\",\r\n  electrocharged_multi: \"electrocharged_multi\",\r\n  superconduct_dmg: \"superconduct_hit\",\r\n  superconduct_dmg_bonus: \"superconduct_dmg_\",\r\n  superconduct_multi: \"superconduct_multi\",\r\n  burning_dmg: \"burning_hit\",\r\n  burning_dmg_bonus: \"burning_dmg_\",\r\n  swirl_dmg: \"swirl_hit\",\r\n  swirl_dmg_bonus: \"swirl_dmg_\",\r\n  swirl_multi: \"swirl_multi\",\r\n  shatter_dmg: \"shattered_hit\",\r\n  shatter_dmg_bonus: \"shattered_dmg_\",\r\n  shatter_multi: \"shattered_multi\",\r\n  crystalize_dmg: \"crystalize_hit\",\r\n  crystalize_dmg_bonus: \"crystalize_dmg_\",\r\n\r\n  melt_dmg_bonus: \"melt_dmg_\",\r\n  vaporize_dmg_bonus: \"vaporize_dmg_\",\r\n\r\n  pyro_vaporize_normal_dmg: \"pyro_vaporize_normal_hit\",\r\n  pyro_vaporize_normal_crit_dmg: \"pyro_vaporize_normal_critHit\",\r\n  pyro_vaporize_normal_avg_dmg: \"pyro_vaporize_normal_avgHit\",\r\n  pyro_vaporize_chraged_dmg: \"pyro_vaporize_chraged_hit\",\r\n  pyro_vaporize_chraged_crit_dmg: \"pyro_vaporize_chraged_critHit\",\r\n  pyro_vaporize_chraged_avg_dmg: \"pyro_vaporize_chraged_avgHit\",\r\n  pyro_vaporize_plunge_dmg: \"pyro_vaporize_plunging_hit\",\r\n  pyro_vaporize_plunge_crit_dmg: \"pyro_vaporize_plunging_critHit\",\r\n  pyro_vaporize_plunge_avg_dmg: \"pyro_vaporize_plunging_avgHit\",\r\n  pyro_vaporize_skill_dmg: \"pyro_vaporize_skill_hit\",\r\n  pyro_vaporize_skill_crit_dmg: \"pyro_vaporize_skill_critHit\",\r\n  pyro_vaporize_skill_avg_dmg: \"pyro_vaporize_skill_avgHit\",\r\n  pyro_vaporize_burst_dmg: \"pyro_vaporize_burst_hit\",\r\n  pyro_vaporize_burst_crit_dmg: \"pyro_vaporize_burst_critHit\",\r\n  pyro_vaporize_burst_avg_dmg: \"pyro_vaporize_burst_avgHit\",\r\n  pyro_vaporize_ele_dmg: \"pyro_vaporize_hit\",\r\n  pyro_vaporize_ele_crit_dmg: \"pyro_vaporize_critHit\",\r\n  pyro_vaporize_ele_avg_dmg: \"pyro_vaporize_avgHit\",\r\n  hydro_vaporize_normal_dmg: \"hydro_vaporize_normal_hit\",\r\n  hydro_vaporize_normal_crit_dmg: \"hydro_vaporize_normal_critHit\",\r\n  hydro_vaporize_normal_avg_dmg: \"hydro_vaporize_normal_avgHit\",\r\n  hydro_vaporize_chraged_dmg: \"hydro_vaporize_chraged_hit\",\r\n  hydro_vaporize_chraged_crit_dmg: \"hydro_vaporize_chraged_critHit\",\r\n  hydro_vaporize_chraged_avg_dmg: \"hydro_vaporize_chraged_avgHit\",\r\n  hydro_vaporize_plunge_dmg: \"hydro_vaporize_plunging_hit\",\r\n  hydro_vaporize_plunge_crit_dmg: \"hydro_vaporize_plunging_critHit\",\r\n  hydro_vaporize_plunge_avg_dmg: \"hydro_vaporize_plunging_avgHit\",\r\n  hydro_vaporize_skill_dmg: \"hydro_vaporize_skill_hit\",\r\n  hydro_vaporize_skill_crit_dmg: \"hydro_vaporize_skill_critHit\",\r\n  hydro_vaporize_skill_avg_dmg: \"hydro_vaporize_skill_avgHit\",\r\n  hydro_vaporize_burst_dmg: \"hydro_vaporize_burst_hit\",\r\n  hydro_vaporize_burst_crit_dmg: \"hydro_vaporize_burst_critHit\",\r\n  hydro_vaporize_burst_avg_dmg: \"hydro_vaporize_burst_avgHit\",\r\n  hydro_vaporize_ele_dmg: \"hydro_vaporize_hit\",\r\n  hydro_vaporize_ele_crit_dmg: \"hydro_vaporize_critHit\",\r\n  hydro_vaporize_ele_avg_dmg: \"hydro_vaporize_avgHit\",\r\n  pyro_melt_normal_dmg: \"pyro_melt_normal_hit\",\r\n  pyro_melt_normal_crit_dmg: \"pyro_melt_normal_critHit\",\r\n  pyro_melt_normal_avg_dmg: \"pyro_melt_normal_avgHit\",\r\n  pyro_melt_chraged_dmg: \"pyro_melt_chraged_hit\",\r\n  pyro_melt_chraged_crit_dmg: \"pyro_melt_chraged_critHit\",\r\n  pyro_melt_chraged_avg_dmg: \"pyro_melt_chraged_avgHit\",\r\n  pyro_melt_plunge_dmg: \"pyro_melt_plunging_hit\",\r\n  pyro_melt_plunge_crit_dmg: \"pyro_melt_plunging_critHit\",\r\n  pyro_melt_plunge_avg_dmg: \"pyro_melt_plunging_avgHit\",\r\n  pyro_melt_skill_dmg: \"pyro_melt_skill_hit\",\r\n  pyro_melt_skill_crit_dmg: \"pyro_melt_skill_critHit\",\r\n  pyro_melt_skill_avg_dmg: \"pyro_melt_skill_avgHit\",\r\n  pyro_melt_burst_dmg: \"pyro_melt_burst_hit\",\r\n  pyro_melt_burst_crit_dmg: \"pyro_melt_burst_critHit\",\r\n  pyro_melt_burst_avg_dmg: \"pyro_melt_burst_avgHit\",\r\n  pyro_melt_ele_dmg: \"pyro_melt_hit\",\r\n  pyro_melt_ele_crit_dmg: \"pyro_melt_critHit\",\r\n  pyro_melt_ele_avg_dmg: \"pyro_melt_avgHit\",\r\n  cryo_melt_normal_dmg: \"cryo_melt_normal_hit\",\r\n  cryo_melt_normal_crit_dmg: \"cryo_melt_normal_critHit\",\r\n  cryo_melt_normal_avg_dmg: \"cryo_melt_normal_avgHit\",\r\n  cryo_melt_chraged_dmg: \"cryo_melt_chraged_hit\",\r\n  cryo_melt_chraged_crit_dmg: \"cryo_melt_chraged_critHit\",\r\n  cryo_melt_chraged_avg_dmg: \"cryo_melt_chraged_avgHit\",\r\n  cryo_melt_plunge_dmg: \"cryo_melt_plunging_hit\",\r\n  cryo_melt_plunge_crit_dmg: \"cryo_melt_plunging_critHit\",\r\n  cryo_melt_plunge_avg_dmg: \"cryo_melt_plunging_avgHit\",\r\n  cryo_melt_skill_dmg: \"cryo_melt_skill_hit\",\r\n  cryo_melt_skill_crit_dmg: \"cryo_melt_skill_critHit\",\r\n  cryo_melt_skill_avg_dmg: \"cryo_melt_skill_avgHit\",\r\n  cryo_melt_burst_dmg: \"cryo_melt_burst_hit\",\r\n  cryo_melt_burst_crit_dmg: \"cryo_melt_burst_critHit\",\r\n  cryo_melt_burst_avg_dmg: \"cryo_melt_burst_avgHit\",\r\n  cryo_melt_ele_dmg: \"cryo_melt_hit\",\r\n  cryo_melt_ele_crit_dmg: \"cryo_melt_critHit\",\r\n  cryo_melt_ele_avg_dmg: \"cryo_melt_avgHit\",\r\n\r\n  enemy_phy_res: \"physical_enemyRes_\",\r\n  enemy_phy_res_multi: \"physical_enemyRes_multi\",\r\n  enemy_phy_immunity: \"physical_enemyImmunity\",\r\n  anemo_enemy_ele_res: \"anemo_enemyRes_\",\r\n  anemo_enemy_ele_res_multi: \"anemo_enemyRes_multi\",\r\n  anemo_enemy_ele_immunity: \"anemo_enemyImmunity\",\r\n  geo_enemy_ele_res: \"geo_enemyRes_\",\r\n  geo_enemy_ele_res_multi: \"geo_enemyRes_multi\",\r\n  geo_enemy_ele_immunity: \"geo_enemyImmunity\",\r\n  electro_enemy_ele_res: \"electro_enemyRes_\",\r\n  electro_enemy_ele_res_multi: \"electro_enemyRes_multi\",\r\n  electro_enemy_ele_immunity: \"electro_enemyImmunity\",\r\n  hydro_enemy_ele_res: \"hydro_enemyRes_\",\r\n  hydro_enemy_ele_res_multi: \"hydro_enemyRes_multi\",\r\n  hydro_enemy_ele_immunity: \"hydro_enemyImmunity\",\r\n  pyro_enemy_ele_res: \"pyro_enemyRes_\",\r\n  pyro_enemy_ele_res_multi: \"pyro_enemyRes_multi\",\r\n  pyro_enemy_ele_immunity: \"pyro_enemyImmunity\",\r\n  cryo_enemy_ele_res: \"cryo_enemyRes_\",\r\n  cryo_enemy_ele_res_multi: \"cryo_enemyRes_multi\",\r\n  cryo_enemy_ele_immunity: \"cryo_enemyImmunity\",\r\n\r\n  ele_mas: \"eleMas\",\r\n  amp_reaction_base_multi: \"ampReactionBase_multi\",\r\n\r\n  enemy_level_multi: \"enemyLevel_multi\",\r\n  enemy_level: \"enemyLevel\"\r\n}\r\n/*\r\nconst same = [\r\n  hp, hp_, atk, atk_, def, def_, pyro_vaporize_multi, hydro_vaporize_multi, pyro_melt_multi, cryo_melt_multi,\r\n]\r\n\r\nconst removed = [\r\n  norm_atk_crit_multi, char_atk_crit_multi, norm_atk_bonus_multi, char_atk_bonus_multi, plunge_bonus_multi, skill_crit_multi, burst_crit_multi, skill_bonus_multi, burst_bonus_multi, phy_bonus_multi, anemo_ele_bonus_multi, geo_ele_bonus_multi, electro_ele_bonus_multi, hydro_ele_bonus_multi, pyro_ele_bonus_multi, cryo_ele_bonus_multi, crit_dmg_multi, crit_multi,\r\n]\r\n\r\nconst aded = [\r\n  plunging_critRate_, final_normal_critRate_, final_charged_critRate_, final_plunging_critRate_, final_skill_critRate_, final_burst_critRate_,\r\n]\r\n*/\r\n\r\n//renamed dmgMode to hitMode\r\nconst dmgModeToHitMode = {\r\n  avg_dmg: \"avgHit\",\r\n  dmg: \"hit\",\r\n  crit_dmg: \"critHit\"\r\n}\r\nexport { changes, dmgModeToHitMode }","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"./ArtifactDatabase\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { changes as v2change, dmgModeToHitMode } from \"./dbV2KeyMap\";\r\nimport { loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\n\r\nconst CurrentDatabaseVersion = 2\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  const dbVersion = getDatabaseVersion()\r\n  //edit the data before the database is populated\r\n  if (dbVersion < 2) {\r\n    //made characters unique, so need to convert character_{NUMBER} to char_{characterKey}. Will only save the 1st instance of a character.\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"character_\")).forEach(key => {\r\n      const character = loadFromLocalStorage(key);\r\n      const { characterKey, equippedArtifacts = {} } = character\r\n      const dbKey = `char_${characterKey}`\r\n      if (localStorage.getItem(dbKey) === null) {\r\n        //if there is no character saved, create a new character\r\n        const { id, name, dmgMode, ...rest } = character\r\n        if (Array.isArray(rest?.buildSetting?.mainStat))\r\n          rest.buildSetting.mainStat = rest.buildSetting.mainStat.map(stat => stat in v2change ? v2change[stat] : stat)\r\n        if (typeof rest?.buildSetting?.statFilters === \"object\")\r\n          rest.buildSetting.statFilters = Object.fromEntries(Object.entries(rest.buildSetting.statFilters).map(([stat, value]) => [stat in v2change ? v2change[stat] : stat, value]))\r\n        rest.hitMode = dmgModeToHitMode[dmgMode] ?? Object.keys(dmgModeToHitMode)[0]\r\n        saveToLocalStorage(dbKey, rest)\r\n        //equip to the new character\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = characterKey\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      } else {\r\n        //if the character does exist, \"move\" the artifacts equipped to inventory\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = \"\"\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      }\r\n      //delete the old database\r\n      localStorage.removeItem(key)\r\n    })\r\n    //reset the ArtifactDisplay keys\r\n    const ArtifactDisplayState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n    if (ArtifactDisplayState) {\r\n      if (ArtifactDisplayState.filterMainStatKey in v2change)\r\n        ArtifactDisplayState.filterMainStatKey = v2change[ArtifactDisplayState.filterMainStatKey]\r\n      ArtifactDisplayState.filterSubstats = ArtifactDisplayState.filterSubstats.map(stat => stat in v2change ? v2change[stat] : stat)\r\n      saveToLocalStorage(\"ArtifactDisplay.state\", ArtifactDisplayState)\r\n    }\r\n  }\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\r\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\r\n  if (!charDBJustPopualted && !artDBJustPopualted) return\r\n\r\n  Object.values(ArtifactDatabase.getArtifactDatabase()).forEach(art => {\r\n    let valid = true\r\n\r\n    //verify the linking of artifacts and characters\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.get(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifact(art.location, art)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 1) {\r\n      //generate artifact efficiency again for artifacts\r\n      Artifact.substatsValidation(art)\r\n      valid = false\r\n\r\n      //there was a bug that saved the numStars as strings. convert to number.\r\n      if (typeof art.numStars === \"string\") {\r\n        art.numStars = parseInt(art.numStars)\r\n        valid = false\r\n      }\r\n\r\n      //the set keys were changed to camelcase, need to convert for old databases.\r\n      let keyMapping = {\r\n        \"Wanderer's Troupe\": \"WanderersTroupe\",\r\n        \"Viridescent Venerer\": \"ViridescentVenerer\",\r\n        \"Thundering Fury\": \"ThunderingFury\",\r\n        \"Retracing Bolide\": \"RetracingBolide\",\r\n        \"Noblesse Oblige\": \"NoblesseOblige\",\r\n        \"Maiden Beloved\": \"MaidenBeloved\",\r\n        \"Gladiator's Finale\": \"GladiatorsFinale\",\r\n        \"Crimson Witch of Flames\": \"CrimsonWitchOfFlames\",\r\n        \"Bloodstained Chivalry\": \"BloodstainedChivalry\",\r\n        \"Archaic Petra\": \"ArchaicPetra\",\r\n        \"Brave Heart\": \"BraveHeart\",\r\n        \"Tiny Miracle\": \"TinyMiracle\",\r\n        \"Defender's Will\": \"DefendersWill\",\r\n        \"Martial Artist\": \"MartialArtist\",\r\n        \"Resolution of Sojourner\": \"ResolutionOfSojourner\",\r\n        \"The Exile\": \"TheExile\",\r\n        \"Traveling Doctor\": \"TravelingDoctor\",\r\n        \"Lucky Dog\": \"LuckyDog\",\r\n        \"Prayers of Wisdom\": \"PrayersForWisdom\",\r\n        \"Prayers of Springtime\": \"PrayersToSpringtime\",\r\n        \"Prayers of Illumination\": \"PrayersForIllumination\",\r\n        \"Prayers of Destiny\": \"PrayersForDestiny\",\r\n      }\r\n      if (keyMapping[art.setKey]) {\r\n        art.setKey = keyMapping[art.setKey]\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey?.endsWith?.(\"ele_dmg\")) {\r\n        art.mainStatKey = art.mainStatKey.replace(\"ele_dmg\", \"ele_dmg_bonus\")\r\n        valid = false\r\n      }\r\n      //key names were changed. convert old DB\r\n      if (art?.mainStatKey === \"phy_dmg\") {\r\n        art.mainStatKey = \"phy_dmg_bonus\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 2) {\r\n      if (art.mainStatKey in v2change) {\r\n        art.mainStatKey = v2change[art.mainStatKey]\r\n        valid = false\r\n      }\r\n      art?.substats?.forEach((obj, i) => {\r\n        if (obj.key in v2change) {\r\n          art.substats[i].key = v2change[obj.key]\r\n          valid = false\r\n        }\r\n      })\r\n    }\r\n\r\n    //Update any invalid artifacts in DB\r\n    if (!valid) ArtifactDatabase.update(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach(character => {\r\n    let valid = true;\r\n    const { characterKey } = character\r\n    //verify character database equipment validity\r\n    if (!character.equippedArtifacts) {\r\n      character.equippedArtifacts = {}\r\n      valid = false\r\n    }\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.get(artid)\r\n      if (equippedArt && equippedArt.location !== characterKey) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, characterKey)\r\n      if (!equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey] = \"\"\r\n      }\r\n    })\r\n\r\n    if (dbVersion < 1) {\r\n      //conditional format was refactored. this makes sure there is no error when using old DB.\r\n      character.artifactConditionals = character.artifactConditionals?.filter?.(cond => {\r\n        if (!cond.srcKey || !cond.srcKey2) {\r\n          valid = false\r\n          return false\r\n        }\r\n        return true\r\n      }) ?? []\r\n\r\n      //check for dmgMode\r\n      if (!character.hitMode) {\r\n        character.hitMode = \"hit\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    //update any invalid characters in DB\r\n    if (!valid) CharacterDatabase.update(character)\r\n  })\r\n  setDatabaseVersion(CurrentDatabaseVersion)\r\n}\r\nconst getDatabaseVersion = (defVal = 0) =>\r\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\r\n\r\nconst setDatabaseVersion = (version) =>\r\n  saveToLocalStorage(\"db_ver\", version)\r\n\r\nfunction createDatabaseObj() {\r\n  const characterDatabase = CharacterDatabase.getCharacterDatabase()\r\n  const artifactDatabase = ArtifactDatabase.getArtifactDatabase()\r\n  const artifactDisplay = loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}\r\n  const characterDisplay = loadFromLocalStorage(\"CharacterDisplay.state\") ?? {}\r\n  const buildsDisplay = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n\r\n  return {\r\n    version: getDatabaseVersion(),\r\n    characterDatabase,\r\n    artifactDatabase,\r\n    artifactDisplay,\r\n    characterDisplay,\r\n    buildsDisplay,\r\n  }\r\n}\r\n\r\nfunction loadDatabaseObj({ version = 0, characterDatabase, artifactDatabase, artifactDisplay, characterDisplay, buildsDisplay, }) {\r\n  clearDatabase()\r\n  //load from obj charDB,artDB\r\n  Object.entries(characterDatabase).forEach(([charKey, char]) => saveToLocalStorage(`char_${charKey}`, char))\r\n  Object.entries(artifactDatabase).forEach(([id, art]) => saveToLocalStorage(id, art))\r\n  //override version\r\n  setDatabaseVersion(version)\r\n  saveToLocalStorage(\"ArtifactDisplay.state\", artifactDisplay)\r\n  saveToLocalStorage(\"CharacterDisplay.state\", characterDisplay)\r\n  saveToLocalStorage(\"BuildsDisplay.state\", buildsDisplay)\r\n\r\n  DatabaseInitAndVerify()\r\n}\r\nfunction clearDatabase() {\r\n  //delete all characters and artifacts\r\n  Object.keys(localStorage).filter(key => key.startsWith(\"char_\") || key.startsWith(\"artifact_\")).forEach(id =>\r\n    localStorage.removeItem(id))\r\n  localStorage.removeItem(\"db_ver\")\r\n  localStorage.removeItem(\"ArtifactDisplay.state\")\r\n  localStorage.removeItem(\"CharacterDisplay.state\")\r\n  localStorage.removeItem(\"BuildsDisplay.state\")\r\n  //clear the database to validate again\r\n  CharacterDatabase.clearDatabase()\r\n  ArtifactDatabase.clearDatabase()\r\n}\r\nexport {\r\n  DatabaseInitAndVerify,\r\n  createDatabaseObj,\r\n  loadDatabaseObj,\r\n  clearDatabase,\r\n  CurrentDatabaseVersion\r\n};\r\n","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  characterHP: faTint,\r\n  finalHP: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  baseATK: faFistRaised,\r\n  characterATK: faFistRaised,\r\n  finalATK: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  characterDEF: faShieldAlt,\r\n  finalDEF: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  eleMas: faMagic,\r\n  critRate_: faDice,\r\n  critDMG_: faDiceD20,\r\n  enerRech_: faSync,\r\n  heal_: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","import ElementalData from \"./Data/ElementalData\";\r\n\r\nexport const hitTypes = { hit: \"DMG\", avgHit: \"Avg. DMG\", critHit: \"CRIT Hit DMG\" }\r\nexport const hitMoves = { normal: \"Normal Att.\", charged: \"Charged Att.\", plunging: \"Plunging Att.\", elemental: \"Elemental Att.\", skill: \"Ele. Skill\", burst: \"Ele. Burst\" }\r\nexport const hitElements = ElementalData\r\nexport const transformativeReactions = {\r\n  overloaded: { name: \"Overloaded\", multi: 2, variants: [ \"pyro\" ] },\r\n  shattered: { name: \"Shattered\", multi: 1.5, variants: [ \"physical\" ] },\r\n  electrocharged: { name: \"Electro-Charged\", multi: 1.2, variants: [ \"electro\" ] },\r\n  superconduct: { name: \"Superconduct\", multi: 0.5, variants: [ \"cryo\" ] },\r\n  swirl: { name: \"Swirl\", multi: 0.6, variants: [ \"pyro\", \"hydro\", \"electro\", \"cryo\" ] },\r\n}\r\nexport const amplifyingReactions = {\r\n  vaporize: { name: \"Vaporize\", variants: { pyro: 1.5, hydro: 2 } },\r\n  melt: { name: \"Melt\", variants: { pyro: 2, cryo: 1.5 } },\r\n}\r\nexport const otherReactions = {\r\n  burning: \"Burning\",\r\n  crystalize: \"Crystalize\",\r\n}\r\nexport const transformativeReactionLevelMultipliers = [ 0,\r\n  17.2,  18.5,  19.9,  21.3,  22.6,  24.6,  26.6,  28.9,  31.4,  34.1,\r\n  37.2,  40.7,  44.4,  48.6,  53.7,  59.1,  64.4,  69.7,  75.1,  80.6,\r\n  86.1,  91.7,  97.2, 102.8, 108.4, 113.2, 118.1, 123.0, 129.7, 136.3,\r\n 142.7, 149.0, 155.4, 161.8, 169.1, 176.5, 184.1, 191.7, 199.6, 207.4,\r\n 215.4, 224.2, 233.5, 243.4, 256.1, 268.5, 281.5, 295.0, 309.1, 323.6,\r\n 336.8, 350.5, 364.5, 378.6, 398.6, 416.4, 434.4, 452.6, 471.4, 490.5,\r\n 509.5, 532.8, 556.4, 580.1, 607.9, 630.2, 652.9, 675.2, 697.8, 720.2,\r\n 742.5, 765.2, 784.4, 803.4, 830.9, 854.4, 877.8, 900.1, 923.8, 946.4,\r\n 968.6, 991.0,1013.5,1036.1,1066.6,1090.0,1115.0,1141.7,1171.9,1202.8,\r\n1202.8,1233.9,1264.7,1305.7,1346.1,1468.9,1524.0,1577.0,1627.6,1674.8,\r\n]\r\nexport const crystalizeLevelMultipliers = [ 0,\r\n  91,  99, 106, 114, 121, 129, 136, 144, 151, 159,\r\n 170, 181, 192, 204, 216, 228, 248, 268, 287, 304,\r\n 320, 337, 352, 368, 384, 394, 405, 416, 427, 438,\r\n 448, 459, 470, 481, 490, 499, 513, 529, 544, 557,\r\n 574, 591, 607, 622, 638, 649, 667, 684, 702, 715,\r\n 733, 750, 767, 784, 800, 814, 834, 855, 876, 896,\r\n 915, 936, 956, 982,1003,1017,1036,1057,1075,1096,\r\n1114,1135,1149,1170,1191,1205,1224,1243,1260,1277,\r\n1293,1308,1317,1327,1336,1349,1366,1384,1403,1424,\r\n1450,1478,1507,1543,1570,1580,1589,1673,1682,1691,\r\n]","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nfunction ReactionToggle({ character: { characterKey, reactionMode = \"none\" }, setReactionMode, className }) {\r\n  reactionMode === null && (reactionMode = \"none\")\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  return [\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup className={className}\r\n    type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setReactionMode(val === \"none\" ? null : val)}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"hydro\" && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"cryo\" && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nfunction HitModeToggle({ hitMode, setHitMode, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={setHitMode} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Normal Hit, No Crit</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ character, character: { characterKey }, build }) {\r\n  return <div>\r\n    {Object.entries(Character.getDisplayStatKeys(build.finalStats)).map(([talentKey, fields]) => {\r\n      let header = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n      return <Card bg=\"darkcontent\" text=\"lightfont\" key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              //simple statKey field\r\n              if (typeof field === \"string\") {\r\n                const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, [field]), build?.finalStats?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build.finalStats)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              //fields\r\n              const talentField = Character.getTalentField(build.finalStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n              const fieldText = Character.getTalentFieldValue(talentField, \"text\", build.finalStats)\r\n              const fieldVariant = Character.getTalentFieldValue(talentField, \"variant\", build.finalStats)\r\n              const fieldFormulaText = Character.getTalentFieldValue(talentField, \"formulaText\", build.finalStats)\r\n              const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(talentField, \"formula\", build.finalStats, [])\r\n              if (!fieldFormula || !fieldFormulaDependency) return null\r\n              const fieldValue = fieldFormula?.(build.finalStats)?.toFixed?.()\r\n              const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, fieldFormulaDependency), build?.finalStats?.modifiers).reverse()\r\n              return <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                  <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                  <Card.Body className=\"p-2\">\r\n                    <div className=\"mb-n2\">\r\n                      <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n                      {subFormulaKeys.map(subKey =>\r\n                        <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                      )}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} >\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DamageOptionsAndCalculation({ character, character: { hitMode }, setState, setOverride, newBuild, equippedBuild }) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Accordion>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Options</span>\r\n            <small>Expand below to edit enemy details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* TODO reaction interaction UI */}\r\n            <ReactionToggle {...{ character, setReactionMode: r => setState({ reactionMode: r }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"1\">\r\n        <Card.Body>\r\n          <Row className=\"mb-2\"><Col>\r\n            <Button variant=\"warning\" >\r\n              <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                To get the specific resistance values of enemies, please visit the wiki.\r\n          </a>\r\n            </Button >\r\n          </Col></Row>\r\n          <Row>\r\n            <Col xs={12} xl={6} className=\"mb-2\">\r\n              <StatInput\r\n                name={<b>Enemy Level</b>}\r\n                value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\r\n                placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\r\n                onValueChange={(val) => setOverride?.(\"enemyLevel\", val)}\r\n              />\r\n            </Col>\r\n            {Character.getElementalKeys().map(eleKey => {\r\n              let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\r\n              let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\r\n              let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n              return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                <StatInput\r\n                  prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                    <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                  name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  placeholder={Stat.getStatNameRaw(statKey)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                  onValueChange={(val) => setOverride?.(statKey, val)}\r\n                  disabled={elementImmunity}\r\n                />\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n\r\n    <Card bg=\"lightcontent\" text=\"lightfont\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Formulas</span>\r\n            <small>Expand below to see calculation details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <HitModeToggle {...{ hitMode, setHitMode: m => setState({ hitMode: m }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"2\">\r\n        <Card.Body className=\"p-2\">\r\n          <CalculationDisplay character={character} build={build} />\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  </Accordion>\r\n}\r\nexport {\r\n  HitModeToggle,\r\n  ReactionToggle,\r\n};\r\n\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onValueChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText = \"\", diffText = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\nexport default function StatDisplay({ character, character: { characterKey }, equippedBuild, newBuild, editable, statKey }) {\r\n  let val, oldVal, fixed, unit, variant;\r\n  let label = \"\"\r\n  if (typeof statKey === \"string\") {//basic statKey\r\n    if (newBuild && equippedBuild) {//comparable\r\n      //newbuild -> val\r\n      //equippedbuild ->old\r\n      val = newBuild?.finalStats?.[statKey] ?? 0\r\n      oldVal = equippedBuild?.finalStats?.[statKey] ?? 0\r\n    } else {\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      //build ->val\r\n      val = build?.finalStats?.[statKey] ?? 0\r\n      //statvaluewith override -> old\r\n      const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n      oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\r\n      oldVal === invalid && (oldVal = undefined)\r\n      if (statKey === \"finalHP\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\r\n      else if (statKey === \"finalDEF\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\r\n      else if (statKey === \"finalATK\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\r\n    }\r\n    unit = Stat.getStatUnit(statKey)\r\n    fixed = Stat.fixedUnit(statKey)\r\n    label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n  } else {//from character sheet\r\n    const build = newBuild ? newBuild : equippedBuild\r\n    const { talentKey, sectionIndex, fieldIndex } = statKey\r\n    const field = Character.getTalentField(build.finalStats, talentKey, sectionIndex, fieldIndex)\r\n    const labelVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n    label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build.finalStats)}</span>\r\n    fixed = Character.getTalentFieldValue(field, \"fixed\", build.finalStats, 0)\r\n    val = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n    if (newBuild && equippedBuild) {//comparable\r\n      oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n    }\r\n  }\r\n\r\n  if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\r\n}","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{fields.map(field => <StatDisplay key={JSON.stringify(field)} {...{ character, equippedBuild, newBuild, editable, statKey: field }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer }) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null;\r\n  const build = Character.calculateBuild(character)\r\n  const { setToSlots } = build\r\n\r\n  const { weapon = {}, constellation } = character\r\n  const name = Character.getName(characterKey)\r\n  const elementKey = Character.getElementalKey(characterKey)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const weaponName = Weapon.getWeaponName(weapon.key)\r\n  const weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  const weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  const weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  const weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  const weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`thumb-big grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h3 className=\"mb-0\">{`Lvl. ${Character.getStatValueWithOverride(character, \"characterLevel\")} C${constellation}`}</h3>\r\n          <h5 className=\"mb-0\"><Stars stars={Character.getStar(characterKey)} colored /></h5>\r\n          <h2 className=\"mb-0\"><Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        characterKey\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nexport function msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.84e7facf.worker.js\");\n}\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { HitModeToggle, ReactionToggle } from '../Character/CharacterDisplay/DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from '../Character/CharacterDisplay/StatDisplayComponent';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseInitAndVerify } from '../Database/DatabaseUtil';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport { calculateTotalBuildNumber } from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nconst maxBuildsToShowList = [50, 25, 10, 5]\r\nconst maxBuildsToShowDefault = 25\r\nconst autoBuildGenLimit = 100\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { characterKey = \"\", maxBuildsToShow = maxBuildsToShowDefault } = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n      this.state = { ...this.state, characterKey, maxBuildsToShow }\r\n    }\r\n    if (props.location.characterKey) //override the one stored in BuildsDisplay.state\r\n      this.state.characterKey = props.location.characterKey\r\n\r\n    if (this.state.characterKey) {\r\n      const character = CharacterDatabase.get(this.state.characterKey)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.characterKey = \"\"\r\n    }\r\n\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    characterKey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    statFilters: {},\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    optimizationTarget: \"finalATK\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: maxBuildsToShowDefault,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (characterKey = \"\") => {\r\n    if (!characterKey)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), characterKey: \"\" })\r\n    if (characterKey === this.state.characterKey) return\r\n    const character = CharacterDatabase.get(characterKey)\r\n    return this.setState(state => ({\r\n      ...BuildDisplay.getInitialState(), //get default state\r\n      characterKey, //add character key\r\n      ...(character?.buildSetting ?? {}), //override build settings, if character has any\r\n      maxBuildsToShow: state.maxBuildsToShow,//maintain build settings\r\n      showCharacterModal: state.showCharacterModal//maintain modal\r\n    }))\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.characterKey) // Make sure we have all slotKeys\r\n      return Object.fromEntries(Artifact.getSlotKeys().map(slotKey => [slotKey, []]))\r\n    let artifactDatabase = ArtifactDatabase.getArtifactDatabase();\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        //if its equipped on the selected character, bypass the lock check\r\n        if (this.state.characterKey && val.location === this.state.characterKey) return\r\n        //if its locked, or equipped, remove from consideration\r\n        if (val.lock || val.location)\r\n          delete artifactDatabase[key]\r\n      })\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= autoBuildGenLimit)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { characterKey, setFilters, statFilters = {}, ascending, optimizationTarget, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    //get the formula for this targer\r\n    if (typeof optimizationTarget === \"object\") {\r\n      const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n      const { formula } = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex)\r\n      optimizationTarget = Character.getFormulaPath(characterKey, talentKey, formula)\r\n    }\r\n\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    const minFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { min }]) => [statKey, min]).filter(([, min]) => typeof min === \"number\"))\r\n    const maxFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { max }]) => [statKey, max]).filter(([, max]) => typeof max === \"number\"))\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, initialStats, artifactSetEffects,\r\n      setFilters, minFilters, maxFilters, maxBuildsToShow, optimizationTarget, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (typeof e.data.progress === \"number\") {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: this.totBuildNumber\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = ({ statsDisplayKeys, initialStats }) => {\r\n    let { setFilters, statFilters = {}, characterKey, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration, optimizationTarget, ascending } = this.state\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.totBuildNumber = calculateTotalBuildNumber(this.split, setFilters)\r\n    let { totBuildNumber } = this\r\n    let totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n    let generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgressString}/{totalBuildNumberString}</b> Build configurations against the criteria for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totalBuildNumberString}</b> Build configurations against the criteria for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite awhile to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={Character.getName(characterKey, \"Select Character\")} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cKey => this.selectCharacter(cKey)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6}>\r\n            {/* character selection */}\r\n            {characterKey ?\r\n              <CharacterCard header={characterDropDown} characterKey={characterKey} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* Hit mode options */}\r\n            {Character.hasTalentPage(characterKey) && <HitModeCard className=\"mb-2\" characterKey={characterKey} forceUpdate={() => { this.forceUpdateBuildDisplay(); this.autoGenerateBuilds() }} />}\r\n            {/* Final Stat Filter */}\r\n            <StatFilterCard className=\"mb-2\" statFilters={statFilters} statsDisplayKeys={statsDisplayKeys} setStatFilters={sFs => this.setState({ statFilters: sFs })} />\r\n          </Col>\r\n          <Col xs={12} lg={6}><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> {useLockedArts ? \"Use Locked & Equipped Artifacts\" : \"Do not use Locked & Equipped Artifacts\"}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* main stat selector */}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <span>Artifact Main Stat</span>\r\n                  <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                    <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                  </Button>\r\n                </Card.Header>\r\n                <Card.Body className=\"mb-n2\">\r\n                  {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                  (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                    <h6 className=\"d-inline mb-0\">\r\n                      {Artifact.getSlotNameWithIcon(slotKey)}\r\n                    </h6>\r\n                    <DropdownButton disabled={generatingBuilds} size=\"sm\"\r\n                      title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                      className=\"d-inline\">\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                      {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                        <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                          {Stat.getStatNameWithPercent(mainStatKey)}\r\n                        </Dropdown.Item>\r\n                      )}\r\n                    </DropdownButton>\r\n                  </div>))}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{characterKey && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!characterKey || generatingBuilds}\r\n                variant={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <SortByStatDropdown\r\n              characterKey={characterKey}\r\n              disabled={generatingBuilds || !characterKey}\r\n              autoGenerateBuilds={this.autoGenerateBuilds}\r\n              setState={(updater) => this.setState(updater, this.autoGenerateBuilds)}\r\n              optimizationTarget={optimizationTarget}\r\n              ascending={ascending}\r\n              statsDisplayKeys={statsDisplayKeys}\r\n              initialStats={initialStats}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterKey }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard\r\n          characterKey={characterKey}\r\n          setCharacterKey={cKey => this.selectCharacter(cKey)}\r\n          newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.characterKey !== this.state.characterKey || prevState.maxBuildsToShow !== this.state.maxBuildsToShow) {\r\n      let { characterKey, maxBuildsToShow } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { characterKey, maxBuildsToShow })\r\n    }\r\n\r\n    if (this.state.characterKey) {\r\n      let character = CharacterDatabase.get(this.state.characterKey)\r\n      if (!character) return\r\n      const { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.update(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    const { characterKey, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    const characterName = Character.getName(characterKey, \"Character Name\")\r\n    const statsDisplayKeys = Character.getDisplayStatKeys(initialStats)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterKey={characterKey} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} initialStats={initialStats} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>{characterKey ? <span>Showing <b>{builds.length}</b> Builds generated for {characterName}</span> : <span>Select a character to generate builds.</span>}</Col>\r\n                <Col xs=\"auto\">\r\n                  <DropdownButton title={<span>Max builds to show: <b>{maxBuildsToShow}</b></span>} size=\"sm\">\r\n                    {maxBuildsToShowList.map(v => <Dropdown.Item key={v} onClick={() => this.setState({ maxBuildsToShow: v }, this.autoGenerateBuilds)}>{v}</Dropdown.Item>)}\r\n                  </DropdownButton>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <ArtifactDisplayItem build={build} characterKey={characterKey} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} setState={s => this.setState(s)} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\nfunction SortByStatDropdown({ characterKey, statsDisplayKeys, initialStats, disabled, optimizationTarget, ascending, setState }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  let sortByText = \"VALUE\"\r\n  if (typeof optimizationTarget === \"object\") {\r\n    const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n    const field = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex) ?? {}\r\n    const variant = Character.getTalentFieldValue(field, \"variant\", initialStats)\r\n    const text = Character.getTalentFieldValue(field, \"text\", initialStats)\r\n    sortByText = <b>{Character.getTalentName(characterKey, talentKey)}: <span className={`text-${variant}`}>{text}</span></b>\r\n  } else\r\n    sortByText = <b>Basic Stat: <span className={`text-${Stat.getStatVariant(optimizationTarget)}`}>{Stat.getStatNamePretty(optimizationTarget)}</span></b>\r\n\r\n  return <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle disabled={disabled} >\r\n        <span>Sort by {sortByText}</span>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu drop=\"up\" align=\"right\" style={{ minWidth: \"35rem\" }} >\r\n        <Row>\r\n          {Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n            let header = \"\"\r\n            if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n            else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n            else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n            else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n            return <Col xs={12} md={6} key={talentKey}>\r\n              <Dropdown.Header><b>{header}</b></Dropdown.Header>\r\n              {fields.map((field, i) => {\r\n                if (typeof field === \"string\")\r\n                  return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>{Stat.getStatNamePretty(field)}</Dropdown.Item>\r\n                const talentField = Character.getTalentField(initialStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n                return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>\r\n                  <span className={`text-${Character.getTalentFieldValue(talentField, \"variant\", initialStats)}`}>{Character.getTalentFieldValue(talentField, \"text\", initialStats)}</span>\r\n                </Dropdown.Item>\r\n              })}\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <Button onClick={() => setState(state => ({ ascending: !state.ascending }))} disabled={disabled}>\r\n      <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n      <span>{ascending ? \"Ascending\" : \"Descending\"}</span>\r\n    </Button>\r\n  </ButtonGroup >\r\n}\r\nfunction StatFilterItem({ statKey, statKeys = [], min, max, close, setFilter }) {\r\n  const isFloat = Stat.getStatUnit(statKey) === \"%\"\r\n  const inputProps = {\r\n    disabled: !statKey,\r\n    allowEmpty: true,\r\n    float: isFloat,\r\n  }\r\n  const minInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MIN\",\r\n    value: min,\r\n    onValueChange: (s) => setFilter(statKey, s, max)\r\n  }\r\n  const maxInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MAX\",\r\n    value: max,\r\n    onValueChange: (s) => setFilter(statKey, min, s)\r\n  }\r\n  return <InputGroup className=\"mb-2\">\r\n    <DropdownButton\r\n      as={InputGroup.Prepend}\r\n      title={Stat.getStatNamePretty(statKey, \"New Stat\")}\r\n      id=\"input-group-dropdown-1\"\r\n    >\r\n      {statKeys.map(sKey => <Dropdown.Item key={sKey} onClick={() => { close?.(); setFilter(sKey, min, max) }}>{Stat.getStatNamePretty(sKey)}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <CustomFormControl {...minInputProps} />\r\n    <CustomFormControl {...maxInputProps} />\r\n    {Boolean(close) && <InputGroup.Append>\r\n      <Button variant=\"danger\" onClick={close}><FontAwesomeIcon icon={faTrash} /></Button>\r\n    </InputGroup.Append>}\r\n  </InputGroup>\r\n}\r\n\r\nfunction HitModeCard({ characterKey, forceUpdate, className }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  const { hitMode } = character\r\n  const setHitmode = v => {\r\n    const char = CharacterDatabase.get(characterKey)\r\n    char.hitMode = v;\r\n    CharacterDatabase.update(char)\r\n    forceUpdate()\r\n  }\r\n  const setReactionMode = r => {\r\n    const char = CharacterDatabase.get(characterKey)\r\n    char.reactionMode = r;\r\n    CharacterDatabase.update(char)\r\n    forceUpdate()\r\n  }\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Hit Mode Options</Card.Header>\r\n    <Card.Body>\r\n      <HitModeToggle hitMode={hitMode} setHitMode={setHitmode} className=\"w-100\" />\r\n      <ReactionToggle character={character} setReactionMode={setReactionMode} className=\"w-100 mt-2\" />\r\n    </Card.Body>\r\n  </Card >\r\n}\r\n\r\nfunction StatFilterCard({ statsDisplayKeys = { basicKeys: [] }, statFilters = {}, setStatFilters, className }) {\r\n  const remainingKeys = statsDisplayKeys.basicKeys.filter(key => !Object.keys(statFilters).some(k => k === key))\r\n  const setFilter = (sKey, min, max) => setStatFilters({ ...statFilters, [sKey]: { min, max } })\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Final Stat Filter</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-n2\">\r\n        {Object.entries(statFilters).map(([statKey, { min, max }]) => {\r\n          return <Col xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} min={min} max={max} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Col>\r\n        })}\r\n        <Col xs={12}>\r\n          <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} />\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\n//for displaying each artifact build\r\nfunction ArtifactDisplayItem({ index, characterKey, build, statsDisplayKeys, setState }) {\r\n  return (<div>\r\n    <ListGroup.Item\r\n      variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n      onClick={() => setState({ modalBuild: build })}\r\n    >\r\n      <h5>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n        <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n          {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n        </Badge>\r\n      )}</h5>\r\n      <StatDisplayComponent {...{ character: CharacterDatabase.get(characterKey), newBuild: build, statsDisplayKeys, cardbg: (index % 2 ? \"lightcontent\" : \"darkcontent\") }} />\r\n    </ListGroup.Item>\r\n  </div>)\r\n}","import { StatData } from \"./StatData\"\r\nimport { hitTypes, hitMoves, hitElements, transformativeReactions, amplifyingReactions } from \"./StatConstants\"\r\n\r\nexport default class Stat {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof Stat)\r\n      throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static getStatName = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.name) || defVal\r\n  static getStatNamePretty = (key, defVal = \"\") =>\r\n    (htmlStatsData[key] || StatData[key]?.pretty || StatData[key]?.name) || defVal\r\n  static getStatNameRaw = (key, defVal = \"\") =>\r\n    StatData[key]?.name || defVal\r\n  static getStatNameWithPercent = (key, defVal = \"\") => {\r\n    let name = this.getStatName(key, defVal)\r\n    if (name !== defVal && (key === \"hp_\" || key === \"atk_\" || key === \"def_\"))\r\n      name += \"%\"\r\n    return name;\r\n  }\r\n  static getStatVariant = (key, defVal = \"\") =>\r\n    StatData[key]?.variant || defVal\r\n  static getStatUnit = (key, defVal = \"\") =>\r\n    StatData[key]?.unit === \"multi\" ? defVal : (StatData[key]?.unit || defVal)\r\n\r\n  static fixedUnit = (key) => {\r\n    if (StatData[key]?.unit === \"multi\") return 3\r\n    let unit = Stat.getStatUnit(key)\r\n    return unit === \"%\" ? 1 : 0\r\n  }\r\n  static printStat = (statKey, stats) =>\r\n    f({ stats, expand: false }, statKey)\r\n\r\n  static getPrintableFormulaStatKeyList = (statList = [], modifiers = {}) => {\r\n    let keys = new Set([...Object.keys(FormulaText), ...Object.keys(modifiers)])\r\n    return statList.filter(key => keys.has(key))\r\n  }\r\n\r\n  static printFormula = (statKey, stats, modifiers = {}, expand = true) => {\r\n    const modifierText = Object.entries(modifiers?.[statKey] ?? []).map(([mkey, multiplier]) =>\r\n      <span key={statKey + mkey} className=\"text-nowrap\"> + {this.printStat(mkey, stats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)\r\n    if (typeof FormulaText?.[statKey] === \"function\")\r\n      return <span>{FormulaText[statKey]({ stats, expand })}{modifierText}</span>\r\n    else\r\n      return <span>Basic Stats from artifacts/weapon{modifierText}</span>\r\n  }\r\n}\r\n//generate html tags based on tagged variants of the statData\r\nconst htmlStatsData = Object.fromEntries(Object.entries(StatData).filter(([key, obj]) => obj.variant).map(([key, obj]) => [key, (<span className={`text-${obj.variant} text-nowrap`}>{obj.name}</span>)]))\r\n\r\nfunction f(options, statKey) {\r\n  let { stats, expand = true } = options\r\n  if (!stats) return\r\n  if (expand && FormulaText?.[statKey])\r\n    return <span>( {FormulaText[statKey](options)} )</span>\r\n  let statName = Stat.getStatNamePretty(statKey)\r\n  let statUnit = Stat.getStatUnit(statKey)\r\n  let fixedUnit = Stat.fixedUnit(statKey)\r\n  let value = stats?.[statKey]?.toFixed?.(fixedUnit) || stats?.[statKey]\r\n  return <span className=\"text-nowrap\"><b>{statName}</b> <span className=\"text-info\">{value}{statUnit}</span></span>\r\n}\r\n\r\nexport const FormulaText = {\r\n  baseATK: (o) => <span>{f(o, \"characterATK\")} + {f(o, \"weaponATK\")} </span>,\r\n  finalATK: (o) => <span>{f(o, \"baseATK\")} * ( 100% + {f(o, \"atk_\")} ) + {f(o, \"atk\")}</span>,\r\n  finalHP: (o) => <span>{f(o, \"characterHP\")} * ( 100% + {f(o, \"hp_\")} ) + {f(o, \"hp\")}</span>,\r\n  finalDEF: (o) => <span>{f(o, \"characterDEF\")} * ( 100% + {f(o, \"def_\")} ) + {f(o, \"def\")}</span>,\r\n\r\n  enemyLevel_multi: (o) => <span>( 100 + {f(o, \"characterLevel\")} ) / ( ( 100 + {f(o, \"characterLevel\")} ) + ( 100 + {f(o, \"enemyLevel\")} ) * ( 100% - {f(o, \"enemyDEFRed_\")} ) )</span>,\r\n\r\n  heal_multi: (o) => <span>( 100% + {f(o, \"heal_\")} + {f(o, \"incHeal_\")} )</span>,\r\n\r\n  amplificative_dmg_: (o) => <span>25 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n  transformative_dmg_: (o) => <span>60 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n\r\n  crystalize_eleMas_: (o) => <span>40 / 9 * {f(o, \"eleMas\")} / ( 1400 + {f(o, \"eleMas\")} ) * 100%</span>,\r\n  crystalize_hit: (o) => <span>( 100% + {f(o, \"crystalize_dmg_\")} + {f(o, \"crystalize_eleMas_\")} ) * {f(o, \"crystalize_multi\")}</span>,\r\n}\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  FormulaText[`final_${move}_critRate_`] = (o) => <span>Min( {f(o, \"critRate_\")} + {f(o, `${move}_critRate_`)} , 100% )</span>\r\n})\r\n\r\nObject.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n  FormulaText[`${ele}_enemyRes_multi`] = (o) => {\r\n    if (o.stats[`${ele}_enemyImmunity`])\r\n      return <span>0 (immune)</span>\r\n    let res = (o.stats[`${ele}_enemyRes_`] || 0) / 100\r\n    if (res < 0) return <span> 100% - {f(o, `${ele}_enemyRes_`)} / 2</span>\r\n    else if (res >= 0.75) return <span> 1 / ( {f(o, `${ele}_enemyRes_`)} * 4 + 1)</span>\r\n    return <span> 100% - {f(o, `${ele}_enemyRes_`)} </span>\r\n  }\r\n})\r\n\r\nObject.entries(hitMoves).forEach(([move, moveName]) => {\r\n  Object.entries(hitElements).forEach(([ele, { name: eleName }]) => {\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      FormulaText[`${ele}_${move}_${type}`] = (o) => <span>{f(o, `finalATK`)} * {f(o, `${ele}_${move}_${type}_multi`)}</span>\r\n    })\r\n\r\n    FormulaText[`${ele}_${move}_hit_base_multi`] = (o) => <span>100% + {f(o, 'dmg_')} + {f(o, `${ele}_dmg_`)} + {f(o, `${move}_dmg_`)}</span>\r\n    FormulaText[`${move}_avgHit_base_multi`] = (o) => <span>100% + {f(o, 'critDMG_')} + {f(o, `final_${move}_critRate_`)} </span>\r\n    FormulaText[`critHit_base_multi`] = (o) => <span>100% + {f(o, 'critDMG_')}</span>\r\n\r\n    FormulaText[`${ele}_${move}_hit_multi`] = (o) => <span>{f(o, `${ele}_${move}_hit_base_multi`)} * {f(o, `enemyLevel_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_critHit_multi`] = (o) => <span>{f(o, `critHit_base_multi`)} * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n    FormulaText[`${ele}_${move}_avgHit_multi`] = (o) => <span>{f(o, `${move}_avgHit_base_multi`)} * {f(o, `${ele}_${move}_hit_multi`)}</span>\r\n  })\r\n})\r\n\r\nObject.entries(transformativeReactions).forEach(([reaction, { multi, variants }]) => {\r\n  FormulaText[`${reaction}_multi`] = (o) => <span>{multi} * {f(o, 'transformative_level_multi')}</span>\r\n  if (variants.length === 1) {\r\n    const [ ele ] = variants\r\n    FormulaText[`${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>  \r\n  } else {\r\n    variants.forEach(ele => {\r\n      FormulaText[`${ele}_${reaction}_hit`] = (o) => <span>( 100% + {f(o, `transformative_dmg_`)} + {f(o, `${reaction}_dmg_`)} ) * {f(o, `${reaction}_multi`)} * {f(o, `${ele}_enemyRes_multi`)}</span>  \r\n    })    \r\n  }\r\n})\r\n\r\nObject.entries(amplifyingReactions).forEach(([reaction, { variants }]) => {\r\n  Object.entries(variants).forEach(([ele, baseMulti]) => {\r\n    FormulaText[`${ele}_${reaction}_multi`] = (o) => <span>{baseMulti} * ( 100% + {f(o, \"amplificative_dmg_\")} + {f(o, `${reaction}_dmg_`)} )</span>\r\n    Object.entries(hitTypes).forEach(([type, typeName]) => {\r\n      Object.entries(hitMoves).forEach(([move, moveName]) => {\r\n        FormulaText[`${ele}_${reaction}_${move}_${type}_multi`] = (o) => <span>{f(o, `${ele}_${move}_${type}_multi`)} * {f(o, `${ele}_${reaction}_multi`)}</span>\r\n        FormulaText[`${ele}_${reaction}_${move}_${type}`] = (o) => <span>{f(o, \"finalATK\")} * {f(o, `${ele}_${reaction}_${move}_${type}_multi`)}</span>\r\n      })\r\n    })\r\n  })\r\n})\r\n","const getRandomElementFromArray = (array) => array[Math.floor(Math.random() * array.length)];\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive \r\n}\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nconst loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nconst saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nconst deepClone = (obj) =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nconst closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nconst closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nconst clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nconst getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nconst clamp01 = (val) => clamp(val, 0, 1)\r\nconst clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nfunction strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nfunction hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numberical value in the obj by a multiplier.\r\nfunction objMultiplication(obj, multi) {\r\n  Object.keys(obj).forEach(prop => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nconst getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\nexport {\r\n  getRandomInt,\r\n  getRandomIntInclusive,\r\n  getRandomArbitrary,\r\n  getRandomElementFromArray,\r\n  loadFromLocalStorage,\r\n  saveToLocalStorage,\r\n  deepClone,\r\n  closeEnoughFloat,\r\n  closeEnoughInt,\r\n  clamp,\r\n  clamp01,\r\n  clampPercent,\r\n  getArrLastElement,\r\n  strPadLeft,\r\n  hammingDistance,\r\n  objMultiplication,\r\n  getObjectKeysRecursive\r\n}","import ElementalData from \"../Data/ElementalData\"\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot, setFilters) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet = {}\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\r\n        else artifactsBySet[null] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu = {}, result = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The character. Will extract hitMode, autoInfused...\r\n  * @param {*} elemental - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, elemental = false) {\r\n  const { hitMode = \"\", autoInfused = false, reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (Object.keys(ElementalData).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, elemental = false) {\r\n  if (Object.keys(ElementalData).includes(skillKey)) return skillKey\r\n  const { autoInfused = false, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  let { reactionMode } = stats\r\n  //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n  if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n    reactionMode = \"vaporize\"\r\n  else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n    reactionMode = \"melt\"\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return eleKey\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentDocumentSections = (stats, talentKey) =>\r\n    this.getTalentDocument(stats.characterKey, talentKey).map(section => typeof section === \"function\" ? section(stats) : section)\r\n\r\n  static getTalentField = (stats, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\r\n    if (!stats) return defVal\r\n    const field = this.getTalentDocumentSections(stats, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\r\n    if (!field) return defVal\r\n    return typeof field === \"function\" ? field(stats) : field\r\n  }\r\n  static getTalentFieldValue = (field, key, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    return typeof field?.[key] === \"function\" ? field[key](stats) : field[key]\r\n  }\r\n\r\n  static getTalentStats = (charKey, talentKey, stats, defVal = null) => {\r\n    const talentStats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof talentStats === \"function\")\r\n      return talentStats(stats)\r\n    return talentStats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, stats) => {\r\n    const talents = this.getCDataObj(charKey)?.talent || {}\r\n    const statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      const talentStats = this.getTalentStats(charKey, talentKey, stats)\r\n      if (talentStats) statsArr.push(talentStats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (stats, talentKey, conditionalKey, defVal = null) => {\r\n    const sections = this.getTalentDocumentSections(stats, talentKey)\r\n    let cond = null\r\n    for (const section of sections) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(stats)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  //look up the formula, and generate the formulaPath to send to worker.\r\n  static getFormulaPath(characterKey, talentKey, formula) {\r\n    const formulaDB = this.getCDataObj(characterKey)?.formula\r\n    if (!formulaDB) return\r\n    let formulaKey\r\n    if (talentKey === \"auto\") {\r\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\r\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\r\n        if (formulaKey) {\r\n          talentKey = tk\r\n          break;\r\n        }\r\n      }\r\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\r\n    if (!formulaKey) return\r\n    return { characterKey, talentKey, formulaKey }\r\n  }\r\n\r\n\r\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\r\n\r\n  static getDisplayStatKeys = (stats, defVal = { basicKeys: [] }) => {\r\n    if (!stats) return defVal\r\n    const { characterKey } = stats\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    const isAutoElemental = Character.isAutoElemental(characterKey)\r\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    if (!isAutoElemental)\r\n      basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    if (this.hasTalentPage(characterKey)) {\r\n      const charFormulas = {}\r\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\r\n        Character.getTalentDocumentSections(stats, talentKey)?.forEach((section, sectionIndex) =>\r\n          section?.fields?.forEach((field, fieldIndex) => {\r\n            const hasFormula = field?.formula || this.getTalentField(stats, talentKey, sectionIndex, fieldIndex)?.formula\r\n            if (!hasFormula) return\r\n            if (!charFormulas[talentKey]) charFormulas[talentKey] = []\r\n            charFormulas[talentKey].push({ talentKey, sectionIndex, fieldIndex })\r\n          })))\r\n      return { basicKeys, ...charFormulas, transReactions }\r\n    } else {\r\n      //generic average hit parameters.\r\n      const genericAvgHit = []\r\n      if (!isAutoElemental) //add phy auto + charged + physical \r\n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\r\n\r\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\r\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\r\n      }\r\n      //show skill/burst \r\n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\r\n\r\n      //add reactions.\r\n      if (eleKey === \"pyro\") {\r\n        const reactions = []\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n        genericAvgHit.push(...reactions)\r\n      } else if (eleKey === \"cryo\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n      else if (eleKey === \"hydro\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n      return { basicKeys, genericAvgHit, transReactions }\r\n    }\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey, artifactIds) => {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterKey) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.update(character);\r\n  }\r\n  static remove(characterKey) {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts\r\n    if (character.artifacts) //from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    else return {}//probably won't happen. just in case.\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    if (!character) return {}\r\n    character = deepClone(character)\r\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    initialStats.characterEle = this.getElementalKey(characterKey);\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.talentConditionals = talentConditionals\r\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, initialStats).forEach(s => this.mergeStats(initialStats, s))\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      const conditional = Character.getTalentConditional(initialStats, talentKey, conditionalKey)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    return initialStats\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar characterDatabase = {};\r\n\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static isInvalid = (char) => !char || !char.characterKey || !char.levelKey\r\n  static getCharacterDatabase = () => deepClone(characterDatabase);\r\n  static getCharacterKeyList = () => Object.keys(characterDatabase);\r\n  static getIdList = () => Object.keys(characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"char_\")).forEach(key => {\r\n      let [, characterKey] = key.split(\"char_\")\r\n      if (!characterDatabase[characterKey]) {\r\n        let character = loadFromLocalStorage(key);\r\n        if (!character) return;\r\n        characterDatabase[characterKey] = character;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static update = (char) => {\r\n    if (this.isInvalid(char)) return;\r\n    const dchar = deepClone(char)\r\n    saveToLocalStorage(`char_${char.characterKey}`, dchar);\r\n    characterDatabase[char.characterKey] = dchar;\r\n  }\r\n  static get = (characterKey) => characterDatabase?.[characterKey] ?? null\r\n\r\n  static remove = (characterKey) => {\r\n    delete characterDatabase[characterKey];\r\n    localStorage.removeItem(`char_${characterKey}`);\r\n  }\r\n  static getArtifactIDFromSlot = (characterKey, slotKey) =>\r\n    this.get(characterKey)?.equippedArtifacts?.[slotKey] ?? null\r\n\r\n  static equipArtifact = (characterKey, art) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !art || !art.slotKey) return\r\n    if (!char.equippedArtifacts) char.equippedArtifacts = {};\r\n    char.equippedArtifacts[art.slotKey] = art.id;\r\n    this.update(char)\r\n  }\r\n  static unequipArtifactOnSlot = (characterKey, slotKey) => {\r\n    const char = this.get(characterKey)\r\n    if (!char || !slotKey) return\r\n    if (!char?.equippedArtifacts?.[slotKey]) return;\r\n    char.equippedArtifacts[slotKey] = \"\";\r\n    this.update(char)\r\n  }\r\n  static equipArtifactBuild = (characterKey, artifactIds) => {\r\n    const character = this.get(characterKey)\r\n    if (!character) return;\r\n    character.equippedArtifacts = artifactIds\r\n    CharacterDatabase.update(character);\r\n  }\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(characterDatabase).forEach(char => {\r\n      char.equippedArtifacts = {}\r\n      this.update(char)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    characterDatabase = {}\r\n    initiated = false\r\n  }\r\n}\r\n","import { faBahai, faFeatherAlt, faHourglass, faWineGlass, faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst SlotIcon = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\nexport default SlotIcon","import { getArrLastElement } from '../Util/Util';\r\nimport ElementalData from './ElementalData';\r\nlet ArtifactData = {}\r\nlet ArtifactDataImport = import('./Artifacts')\r\nArtifactDataImport.then(imp => {\r\n  ArtifactData = imp.default\r\n  ArtifactDataImport = null\r\n})\r\nconst ArtifactMainSlotKeys = [\r\n  \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\",\r\n]\r\nObject.keys(ElementalData).forEach(key => ArtifactMainSlotKeys.push(`${key}_dmg_`))\r\n\r\nconst ArtifactStarsData = {\r\n  // 1: { subsBaselow: 0, subBaseHigh: 0, numUpgradesOrUnlocks: 1 },\r\n  // 2: { subsBaselow: 0, subBaseHigh: 1, numUpgradesOrUnlocks: 2 },\r\n  3: { subsBaselow: 1, subBaseHigh: 2, numUpgradesOrUnlocks: 3 },\r\n  4: { subsBaselow: 2, subBaseHigh: 3, numUpgradesOrUnlocks: 4 },\r\n  5: { subsBaselow: 3, subBaseHigh: 4, numUpgradesOrUnlocks: 5 }\r\n};\r\n\r\nconst ArtifactMainStatsData = {\r\n  1: {\r\n    hp: [129, 178, 227, 275, 324],\r\n    atk: [8, 12, 15, 18, 21],\r\n    hp_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    atk_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    def_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    physical_dmg_: [3.9, 5.4, 6.9, 8.4, 9.9],\r\n    ele_dmg_: [3.1, 4.3, 5.5, 6.7, 7.9],\r\n    eleMas: [13, 17, 22, 27, 32],\r\n    enerRech_: [3.5, 4.8, 6.1, 7.5, 8.8],\r\n    critRate_: [2.1, 2.9, 3.7, 4.5, 5.3],\r\n    critDMG_: [4.2, 5.8, 7.4, 9.0, 10.5],\r\n    heal_: [2.4, 3.3, 4.3, 5.2, 6.1],\r\n  },\r\n  2: {\r\n    hp: [258, 331, 404, 478, 551, 624, 697, 770, 843],\r\n    atk: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    hp_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    atk_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    def_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    physical_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1],\r\n    ele_dmg_: [4.2, 5.4, 6.6, 7.8, 9, 10.1, 11.3, 12.5, 13.7],\r\n    eleMas: [17, 22, 26, 31, 36, 41, 45, 50, 55],\r\n    enerRech_: [4.7, 6, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2],\r\n    critRate_: [2.8, 3.6, 4.4, 5.2, 6, 6.8, 7.6, 8.3, 9.1],\r\n    critDMG_: [5.6, 7.2, 8.8, 10.4, 11.9, 13.5, 15.1, 16.7, 18.3],\r\n    heal_: [3.2, 4.1, 5.1, 6, 6.9, 7.8, 8.7, 9.6, 10.5],\r\n  },\r\n  3: {\r\n    hp: [430, 552, 674, 796, 918, 1040, 1162, 1283, 1405, 1527, 1649, 1771, 1893],\r\n    atk: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123],\r\n    hp_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    atk_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    def_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    physical_dmg_: [6.6, 8.4, 10.3, 12.1, 14.0, 15.8, 17.7, 19.6, 21.4, 23.3, 25.1, 27.0, 28.8],\r\n    ele_dmg_: [5.2, 6.7, 8.2, 9.7, 11.2, 12.7, 14.2, 15.6, 17.1, 18.6, 20.1, 21.6, 23.1],\r\n    eleMas: [21, 27, 33, 39, 45, 51, 57, 63, 69, 75, 80, 86, 92],\r\n    enerRech_: [5.8, 7.5, 9.1, 10.8, 12.4, 14.1, 15.7, 17.4, 19.0, 20.7, 22.3, 24.0, 25.6],\r\n    critRate_: [3.5, 4.5, 5.5, 6.5, 7.5, 8.4, 9.4, 10.4, 11.4, 12.4, 13.4, 14.4, 15.4],\r\n    critDMG_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8],\r\n    heal_: [4.0, 5.2, 6.3, 7.5, 8.6, 9.8, 10.9, 12.0, 13.2, 14.3, 15.5, 16.6, 17.8],\r\n  },\r\n  4: {\r\n    hp: [645, 828, 1011, 1194, 1377, 1559, 1742, 1925, 2108, 2291, 2474, 2657, 2839, 3022, 3205, 3388, 3571],\r\n    atk: [42, 54, 66, 78, 90, 102, 113, 125, 137, 149, 161, 173, 185, 197, 209, 221, 232],\r\n    hp_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    atk_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    def_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    physical_dmg_: [7.9, 10.1, 12.3, 14.6, 16.8, 19.0, 21.2, 23.5, 25.7, 27.9, 30.2, 32.4, 34.6, 36.8, 39.1, 41.3, 43.5],\r\n    ele_dmg_: [6.3, 8.1, 9.9, 11.6, 13.4, 15.2, 17.0, 18.8, 20.6, 22.3, 24.1, 25.9, 27.7, 29.5, 31.3, 33.0, 34.8],\r\n    eleMas: [25, 32, 39, 47, 54, 61, 68, 75, 82, 89, 97, 104, 111, 118, 125, 132, 139],\r\n    enerRech_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7],\r\n    critRate_: [4.2, 5.4, 6.6, 7.8, 9.0, 10.1, 11.3, 12.5, 13.7, 14.9, 16.1, 17.3, 18.5, 19.7, 20.8, 22.0, 23.2],\r\n    critDMG_: [8.4, 10.8, 13.1, 15.5, 17.9, 20.3, 22.7, 25.0, 27.4, 29.8, 32.2, 34.5, 36.9, 39.3, 41.7, 44.1, 46.4],\r\n    heal_: [4.8, 6.2, 7.6, 9.0, 10.3, 11.7, 13.1, 14.4, 15.8, 17.2, 18.6, 19.9, 21.3, 22.7, 24.0, 25.4, 26.8],\r\n  },\r\n  5: {\r\n    hp: [717, 920, 1123, 1326, 1530, 1733, 1936, 2139, 2342, 2545, 2749, 2952, 3155, 3358, 3561, 3764, 3967, 4171, 4374, 4577, 4780],\r\n    atk: [47, 60, 73, 86, 100, 113, 126, 139, 152, 166, 179, 192, 205, 219, 232, 245, 258, 272, 285, 298, 311],\r\n    hp_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    atk_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    def_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    physical_dmg_: [8.7, 11.2, 13.7, 16.2, 18.6, 21.1, 23.6, 26.1, 28.6, 31, 33.5, 36, 38.5, 40.9, 43.4, 45.9, 48.4, 50.8, 53.3, 55.8, 58.3],\r\n    ele_dmg_: [7.0, 9.0, 11.0, 12.9, 14.9, 16.9, 18.9, 20.9, 22.8, 24.8, 26.8, 28.8, 30.8, 32.8, 34.7, 36.7, 38.7, 40.7, 42.7, 44.6, 46.6],\r\n    eleMas: [28, 36, 44, 52, 60, 68, 76, 84, 91, 99, 107, 115, 123, 131, 139, 147, 155, 163, 171, 179, 187],\r\n    enerRech_: [7.8, 10.0, 12.2, 14.4, 16.6, 18.8, 21.0, 23.2, 25.4, 27.6, 29.8, 32.0, 34.2, 36.4, 38.6, 40.8, 43.0, 45.2, 47.4, 49.6, 51.8],\r\n    critRate_: [4.7, 6.0, 7.3, 8.6, 9.9, 11.3, 12.6, 13.9, 15.2, 16.6, 17.9, 19.2, 20.5, 21.8, 23.2, 24.5, 25.8, 27.1, 28.4, 29.8, 31.1],\r\n    critDMG_: [9.3, 11.9, 14.6, 17.2, 19.9, 22.5, 25.5, 27.8, 30.5, 33.1, 35.8, 38.4, 41.1, 43.7, 46.3, 49.0, 51.6, 54.3, 56.9, 59.6, 62.2],\r\n    heal_: [5.4, 6.9, 8.4, 10.0, 11.5, 13.0, 14.5, 16.1, 17.6, 19.1, 20.6, 22.2, 23.7, 25.2, 26.7, 28.3, 29.8, 31.3, 32.8, 34.4, 35.9],\r\n  }\r\n}\r\n\r\nconst ArtifactSubStatsData = {\r\n  hp: { 1: [24, 30], 2: [50, 61, 72], 3: [100, 115, 129, 143], 4: [167, 191, 215, 239], 5: [209, 239, 269, 299] },\r\n  hp_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  atk: { 1: [2], 2: [3, 4, 5], 3: [7, 8, 9], 4: [11, 12, 14, 16], 5: [14, 16, 18, 19] },\r\n  atk_: { 1: [1.2, 1.5], 2: [1.6, 2, 2.3], 3: [2.5, 2.8, 3.2, 3.5], 4: [3.3, 3.7, 4.2, 4.7], 5: [4.1, 4.7, 5.3, 5.8] },\r\n  def: { 1: [2], 2: [4, 5, 6], 3: [8, 9, 10, 11], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  def_: { 1: [1.5, 1.8], 2: [2, 2.5, 2.9], 3: [3.1, 3.5, 3.9, 4.4], 4: [4.1, 4.7, 5.3, 5.8], 5: [5.1, 5.8, 6.6, 7.3] },\r\n  eleMas: { 1: [5, 6], 2: [7, 8, 9], 3: [10, 11, 13, 14], 4: [13, 15, 17, 19], 5: [16, 19, 21, 23] },\r\n  enerRech_: { 1: [1.3, 1.6], 2: [1.8, 2.2, 2.6], 3: [2.7, 3.1, 3.5, 3.9], 4: [3.6, 4.1, 4.7, 5.2], 5: [4.5, 5.2, 5.8, 6.5] },\r\n  critRate_: { 1: [0.8, 1], 2: [1.1, 1.3, 1.6], 3: [1.6, 1.9, 2.1, 2.3], 4: [2.2, 2.5, 2.8, 3.1], 5: [2.7, 3.1, 3.5, 3.9] },\r\n  critDMG_: { 1: [1.6, 1.9], 2: [2.2, 2.6, 3.1], 3: [3.3, 3.7, 4.2, 4.7], 4: [4.4, 5, 5.6, 6.2], 5: [5.4, 6.2, 7, 7.8] },\r\n}\r\nconst ArtifactSubstatsMinMax = Object.fromEntries(Object.entries(ArtifactSubStatsData).map(([key, obj]) =>\r\n  [key, {\r\n    max: Object.fromEntries(Object.keys(obj).map(key => [key, getArrLastElement(obj[key])])),\r\n    min: Object.fromEntries(Object.keys(obj).map(key => [key, obj[key][0]])),\r\n  }]))\r\n\r\nconst ArtifactSlotsData = {\r\n  flower: { name: \"Flower of Life\", stats: [\"hp\"] },\r\n  plume: { name: \"Plume of Death\", stats: [\"atk\"] },\r\n  sands: { name: \"Sands of Eon\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"enerRech_\"] },\r\n  goblet: { name: \"Goblet of Eonothem\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\",] },\r\n  circlet: { name: \"Circlet of Logos\", stats: [\"hp_\", \"def_\", \"atk_\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\"] },\r\n};\r\n\r\nexport {\r\n  ArtifactMainSlotKeys,\r\n  ArtifactSlotsData,\r\n  ArtifactData,\r\n  ArtifactDataImport,\r\n  ArtifactSubStatsData,\r\n  ArtifactSubstatsMinMax,\r\n  ArtifactStarsData,\r\n  ArtifactMainStatsData\r\n};\r\n","export default class ArtifactBase {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof ArtifactBase) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //returns {setKey:[slotKey...]}\r\n  static setToSlots = (artifacts) => {\r\n    let setToSlots = {};\r\n    Object.entries(artifacts).forEach(([key, art]) => {\r\n      if (!art) return\r\n      if (setToSlots[art.setKey]) setToSlots[art.setKey].push(key)\r\n      else setToSlots[art.setKey] = [key]\r\n    })\r\n    return setToSlots\r\n  }\r\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport SlotIcon from '../Components/SlotIcon';\r\nimport { ArtifactMainSlotKeys, ArtifactMainStatsData, ArtifactData, ArtifactSlotsData, ArtifactStarsData, ArtifactSubStatsData, ArtifactDataImport, ArtifactSubstatsMinMax } from '../Data/ArtifactData';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { clampPercent, closeEnoughFloat, closeEnoughInt, deepClone } from '../Util/Util';\r\nimport ArtifactBase from './ArtifactBase';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\n\r\nconst maxStar = 5\r\n\r\nexport default class Artifact {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Artifact) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  //SETS\r\n  static getDataImport = () => ArtifactDataImport\r\n  static getSetKeys = () => Object.keys(ArtifactData || {})\r\n  static getSetName = (key, defVal = \"\") => ArtifactData?.[key]?.name || defVal;\r\n  static getSetsByMaxStarEntries = (star) =>\r\n    Object.entries(ArtifactData || {}).filter(([, setobj]) => setobj.rarity[(setobj.rarity.length) - 1] === star)\r\n  static getPieces = (setKey, defVal = {}) => ArtifactData?.[setKey]?.pieces || defVal\r\n  static getPieceName = (setKey, slotKey, defVal = \"\") => this.getPieces(setKey)[slotKey] || defVal;\r\n  static getPieceIcon = (setKey, slotKey, defVal = null) => ArtifactData?.[setKey]?.icons?.[slotKey] || defVal;\r\n\r\n  //SETEFFECT\r\n  static getSetEffectsObj = (setKey, defVal = {}) => ArtifactData?.[setKey]?.setEffects || defVal\r\n  static getArtifactSetNumStats = (setKey, setNumKey, defVal = {}) =>\r\n    deepClone(this.getSetEffectsObj(setKey)?.[setNumKey]?.stats || defVal)\r\n  static getArtifactSetEffectsStats = (setToSlots) => {\r\n    let artifactSetEffect = []\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) =>\r\n      Object.entries(Artifact.getSetEffectsObj(setKey)).forEach(([setNumKey, value]) =>\r\n        parseInt(setNumKey) <= artArr.length && value.stats && Object.keys(value.stats).length &&\r\n        Object.entries(value.stats).forEach(([key, statVal]) =>\r\n          artifactSetEffect.push({ key, statVal }))))\r\n    return artifactSetEffect\r\n  }\r\n  static getSetEffects = (setToSlots) => {\r\n    let artifactSetEffect = {}\r\n    Object.entries(setToSlots).forEach(([setKey, artArr]) => {\r\n      let setNumKeys = Object.keys(this.getSetEffectsObj(setKey)).filter(setNumKey => parseInt(setNumKey) <= artArr.length)\r\n      if (setNumKeys.length)\r\n        artifactSetEffect[setKey] = setNumKeys\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n\r\n  static getSetEffectText = (setKey, setNumKey, charFinalStats, defVal = \"\") => {\r\n    let setEffectText = this.getSetEffectsObj(setKey)?.[setNumKey]?.text\r\n    if (!setEffectText) return defVal\r\n    if (typeof setEffectText === \"function\")\r\n      return setEffectText(charFinalStats)\r\n    else if (setEffectText)\r\n      return setEffectText\r\n    return defVal\r\n  }\r\n  static getSetEffectConditional = (setKey, setNumKey, defVal = null) =>\r\n    this.getSetEffectsObj(setKey)?.[setNumKey]?.conditional || defVal\r\n\r\n  //SLOT\r\n  static getSlotKeys = () => Object.keys(ArtifactSlotsData || {})\r\n  static getSlotName = (slotKey, defVal = \"\") => ArtifactSlotsData?.[slotKey]?.name || defVal\r\n  static getSlotIcon = (slotKey, defVal = \"\") =>\r\n    (slotKey && SlotIcon[slotKey]) ? <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" /> : defVal\r\n  static getSlotMainStatKeys = (slotKey, defVal = []) => ArtifactSlotsData?.[slotKey]?.stats || defVal\r\n\r\n  static getSlotNameWithIcon = (slotKey, defVal = \"\") => {\r\n    if (!slotKey) return defVal;\r\n    let name = this.getSlotName(slotKey)\r\n    if (!name) return defVal;\r\n    let slotIcon = this.getSlotIcon(slotKey)\r\n    if (!slotIcon) return defVal;\r\n    return (<span>{slotIcon} {name}</span>)\r\n  }\r\n  static splitArtifactsBySlot = (databaseObj) =>\r\n    Object.fromEntries(this.getSlotKeys().map(slotKey =>\r\n      [slotKey, Object.values(databaseObj).filter(art => art.slotKey === slotKey)]))\r\n\r\n  //STARS\r\n  static getStars = () => Object.keys(ArtifactStarsData || {}).map(s => parseInt(s))\r\n  static getRarityArr = (setKey, defVal = []) => ArtifactData?.[setKey]?.rarity || defVal\r\n\r\n  //MAIN STATS\r\n  static getMainStatKeys = () => deepClone(ArtifactMainSlotKeys)\r\n  static getMainStatValues = (numStar, statKey, defVal = []) =>\r\n    ArtifactMainStatsData?.[numStar]?.[statKey] || defVal\r\n\r\n  static getMainStatValue = (key, numStars, level, defVal = 0) => {\r\n    let main = this.getMainStatValues(numStars, key)[level]\r\n    if (main) return main\r\n    else if (key?.includes(\"_dmg_\")) // because in the database its still stored as ele_dmg_\r\n      return this.getMainStatValue(\"ele_dmg_\", numStars, level, defVal)\r\n    return defVal\r\n  }\r\n\r\n  //SUBSTATS\r\n  static getBaseSubRollNumLow = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subsBaselow || defVal\r\n  static getBaseSubRollNumHigh = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.subBaseHigh || defVal\r\n  static getNumUpgradesOrUnlocks = (numStars, defVal = 0) => ArtifactStarsData?.[numStars]?.numUpgradesOrUnlocks || defVal\r\n  static getSubstatAllMax = (statKey, numStars = maxStar, defVal = 0) => ArtifactSubstatsMinMax?.[statKey]?.max[numStars] ?? defVal\r\n  static getSubStatKeys = () => Object.keys(ArtifactSubStatsData || {})\r\n  static subStatCloseEnough = (key, value1, value2) => {\r\n    if (Stat.getStatUnit(key) === \"%\")\r\n      return closeEnoughFloat(value1, value2)\r\n    else\r\n      return closeEnoughInt(value1, value2)\r\n  }\r\n  static totalPossibleRolls = (numStars) => ArtifactStarsData[numStars] ?\r\n    (ArtifactStarsData[numStars].subBaseHigh + ArtifactStarsData[numStars].numUpgradesOrUnlocks) : 0;\r\n  static rollsRemaining = (level, numStars) =>\r\n    Math.ceil((numStars * 4 - level) / 4);\r\n  static numberOfSubstatUnlocked = (state) =>\r\n    state.substats.reduce((sum, cur) =>\r\n      sum + (cur && cur.value ? 1 : 0), 0);\r\n  static getSubstatRollData = (subStatKey, numStars) => ArtifactSubStatsData?.[subStatKey]?.[numStars] ?? []\r\n  static getSubstatRolls = (subStatKey, subStatValue, numStars, defVal = []) => {\r\n    if (!numStars || !subStatKey || typeof subStatValue !== \"number\" || !subStatValue) return defVal\r\n    let rollData = this.getSubstatRollData(subStatKey, numStars)\r\n    if (!rollData.length) return defVal\r\n    if (rollData.includes(subStatValue)) return [[subStatValue]]\r\n    if (subStatValue > (rollData[rollData.length - 1] * (this.getNumUpgradesOrUnlocks(numStars) + 2)))//+2 instead of +1 to go over rounding\r\n      return defVal\r\n    let isFloat = Stat.getStatUnit(subStatKey) === \"%\"\r\n    //calculation is more expensive now, since its calculating all the combinations to test to get to the value.\r\n    let rolls = [];\r\n    let maxNumRoll = Math.round(subStatValue / rollData[0])\r\n    if (!maxNumRoll) return defVal;\r\n    const rollOption = (val, arr) => {\r\n      if (arr.length) {\r\n        if (arr.length > maxNumRoll) return;\r\n        let sum = arr.reduce((accu, v) => accu + v, 0)\r\n        if (isFloat) {\r\n          if (sum - val >= 0.101) return\r\n          if (closeEnoughFloat(sum, val))\r\n            return rolls.push(arr);\r\n        } else {\r\n          if (sum - val > 1) return\r\n          if (closeEnoughInt(sum, val))\r\n            return rolls.push(arr);\r\n        }\r\n      }\r\n      rollData.slice().reverse().forEach(roll => {\r\n        if (!arr.length || arr[arr.length - 1] >= roll)\r\n          rollOption(subStatValue, [...arr, roll])\r\n      })\r\n    }\r\n    rollOption(subStatValue, [])\r\n    return rolls;\r\n  }\r\n  static getSubstatEfficiency = (subStatKey, rolls = []) => {\r\n    let len = rolls.length\r\n    let sum = rolls.reduce((a, c) => a + c, 0)\r\n    let max = this.getSubstatAllMax(subStatKey) * len\r\n    return max ? clampPercent((sum / max) * 100) : 0\r\n  }\r\n\r\n  //ARTIFACT IN GENERAL\r\n  static substatsValidation(state) {\r\n    let { numStars = 0, level = 0, substats = [] } = state\r\n    //calculate rolls for substats\r\n    for (const substat of substats) {\r\n      let { key, value } = substat\r\n      let rollArr = Artifact.getSubstatRolls(key, value, numStars) || []\r\n      substat.rolls = rollArr[0] || []\r\n      if (rollArr.length > 1) substat.rollArr = rollArr\r\n      substat.efficiency = Artifact.getSubstatEfficiency(key, substat.rolls)\r\n    }\r\n    let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n    state.currentEfficiency = currentEfficiency\r\n    state.maximumEfficiency = maximumEfficiency\r\n    //artifact validation logic\r\n    let errMsgs = []\r\n    for (const substat of substats)\r\n      if (!substat.rolls?.length && substat.key && substat.value)\r\n        errMsgs.push(\"One of the substat is invalid.\")\r\n\r\n    //only show this error when all substats are \"valid\"\r\n    if (!errMsgs.length && substats.some(substat => substat.rolls?.length > 1) && substats.some((substat) => !substat.rolls?.length))\r\n      errMsgs.push(\"One of the substat have >1 rolls, but not all substats are unlocked.\")\r\n\r\n    if (numStars) {\r\n      let currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n      let leastNumRolls = Artifact.getBaseSubRollNumLow(numStars) + Math.floor(level / 4)\r\n      if (currentNumOfRolls < leastNumRolls) {//there might be substats with more rolls\r\n        for (const substat of substats) {\r\n          let rollslen = substat.rolls?.length\r\n          if (!rollslen || !substat.rollArr) continue\r\n          let moreRolls = substat.rollArr.filter(rolls => rolls.length > rollslen)\r\n          if (moreRolls.length) {\r\n            substat.rolls = moreRolls[0]\r\n            moreRolls.length > 1 ? (substat.rollArr = moreRolls) : (delete substat.rollArr)\r\n            substat.efficiency = Artifact.getSubstatEfficiency(substat.key, substat.rolls)\r\n            let { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(substats, numStars, level)\r\n            state.currentEfficiency = currentEfficiency\r\n            state.maximumEfficiency = maximumEfficiency\r\n          }\r\n          currentNumOfRolls = substats.reduce((sum, cur) => sum + (cur.rolls?.length || 0), 0);\r\n          if (currentNumOfRolls >= leastNumRolls) break;\r\n        }\r\n      }\r\n      if (currentNumOfRolls < leastNumRolls)\r\n        errMsgs.push(`Artifact should have at least ${leastNumRolls} Rolls, it currently only have ${currentNumOfRolls} Rolls.`)\r\n      else {\r\n        let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n        let totalPossbleRolls = Artifact.totalPossibleRolls(numStars);\r\n        if ((currentNumOfRolls + rollsRemaining) > totalPossbleRolls)\r\n          errMsgs.push(`Current number of substat rolles(${currentNumOfRolls}) + Rolls remaining from level up (${rollsRemaining}) is greater than the total possible roll of this artifact (${totalPossbleRolls}) `)\r\n      }\r\n    }\r\n    return errMsgs\r\n  }\r\n  static getArtifactEfficiency(substats, numStars, level) {\r\n    if (!numStars) return { currentEfficiency: 0, maximumEfficiency: 0 }\r\n    // Relative to max star, so comparison between different * makes sense.\r\n    let totalPossbleRolls = Artifact.totalPossibleRolls(maxStar);\r\n    let rollsRemaining = Artifact.rollsRemaining(level, numStars);\r\n    let totalCurrentEfficiency = substats.reduce((sum, cur) => sum + (cur?.efficiency * cur?.rolls?.length || 0), 0);\r\n    let statKeys = substats.filter(({ key }) => key).map(({ key }) => key)\r\n    let maxPerRoll = 100 * Math.max(...(statKeys.length === 4 ? statKeys : Object.keys(ArtifactSubstatsMinMax)).map(\r\n      key => Artifact.getSubstatAllMax(key, numStars) / Artifact.getSubstatAllMax(key)\r\n    ))\r\n    let currentEfficiency = clampPercent(totalCurrentEfficiency / totalPossbleRolls);\r\n    let maximumEfficiency = clampPercent((totalCurrentEfficiency + rollsRemaining * maxPerRoll) / totalPossbleRolls);\r\n    return { currentEfficiency, maximumEfficiency }\r\n  }\r\n\r\n  static setToSlots = ArtifactBase.setToSlots;\r\n\r\n  static getConditionalStats = (setKey, setNumKey, conditionalNum, defVal = {}) => {\r\n    if (!conditionalNum) return defVal\r\n    let conditional = this.getSetEffectConditional(setKey, setNumKey)\r\n    if (!conditional) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => [key, val * stacks]))\r\n  }\r\n\r\n  static getAllArtifactSetEffectsObj = (artifactConditionals = []) => {\r\n    let ArtifactSetEffectsObj = {};\r\n    Object.entries(ArtifactData).forEach(([setKey, setObj]) => {\r\n      let setEffect = {}\r\n      if (setObj.setEffects)\r\n        Object.entries(setObj.setEffects).forEach(([setNumKey, setEffectObj]) => {\r\n          if (Object.keys(setEffectObj.stats || {}).length > 0)\r\n            setEffect[setNumKey] = deepClone(setEffectObj.stats)\r\n        })\r\n      if (Object.keys(setEffect).length > 0)\r\n        ArtifactSetEffectsObj[setKey] = setEffect;\r\n    })\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      let condStats = this.getConditionalStats(setKey, setNumKey, conditionalNum)\r\n      if (Object.keys(condStats).length > 0) {\r\n        ArtifactSetEffectsObj[setKey] ?? (ArtifactSetEffectsObj[setKey] = {})\r\n        ArtifactSetEffectsObj[setKey][setNumKey] ?? (ArtifactSetEffectsObj[setKey][setNumKey] = {})\r\n        Object.entries(condStats).forEach(([statKey, value]) =>\r\n          ArtifactSetEffectsObj[setKey][setNumKey][statKey] = (ArtifactSetEffectsObj[setKey][setNumKey][statKey] || 0) + value)\r\n      }\r\n    })\r\n    return ArtifactSetEffectsObj\r\n  }\r\n\r\n  //database manipulation\r\n  static equipArtifactOnChar(artifactId, characterKey) {\r\n    let art = ArtifactDatabase.get(artifactId);\r\n    if (!art) return;\r\n    let currentLocation = art.location;\r\n    let intendedLocation = (characterKey || \"\")\r\n    if (currentLocation === intendedLocation) return;\r\n    let slotKey = art.slotKey\r\n    let artifactToSwapWithid = CharacterDatabase.getArtifactIDFromSlot(intendedLocation, slotKey)\r\n    let artifactToSwapWith = ArtifactDatabase.get(artifactToSwapWithid)\r\n\r\n    //update artifact\r\n    if (artifactToSwapWith) ArtifactDatabase.swapLocations(art, artifactToSwapWith)\r\n    else ArtifactDatabase.moveToNewLocation(art.id, intendedLocation)\r\n\r\n    //update Character\r\n    if (intendedLocation)\r\n      CharacterDatabase.equipArtifact(intendedLocation, art)\r\n\r\n    if (currentLocation) {\r\n      if (artifactToSwapWith)\r\n        CharacterDatabase.equipArtifact(currentLocation, artifactToSwapWith)\r\n      else\r\n        CharacterDatabase.unequipArtifactOnSlot(currentLocation, slotKey)\r\n    }\r\n  }\r\n}\r\n","import { clamp } from \"./Util\";\r\n\r\nexport default class ConditionalsUtil {\r\n  constructor() { if (this instanceof ConditionalsUtil) throw Error('A static class cannot be instantiated.'); }\r\n  static getConditionalNum(conditionals, srcKeyObj) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (conditionals)\r\n      return conditionals.find(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))?.conditionalNum || 0\r\n  }\r\n  static setConditional(conditionals, srcKeyObj, conditionalNum) {\r\n    let { srcKey, srcKey2 } = srcKeyObj\r\n    if (!conditionals) conditionals = []\r\n    let index = conditionals.findIndex(cond => cond.srcKey === srcKey && (!srcKey2 || (srcKey2 && cond.srcKey2 === srcKey2)))\r\n    if (!conditionalNum && index >= 0) {\r\n      //setting conditionalNum to 0 deletes the element\r\n      conditionals.splice(index, 1);\r\n    } else if (!conditionalNum && index < 0) { //nothing to change\r\n      return conditionals\r\n    } else {\r\n      let newCond = { srcKey, conditionalNum }\r\n      if (srcKey2) newCond.srcKey2 = srcKey2\r\n      if (index >= 0)\r\n        conditionals[index] = newCond\r\n      else\r\n        conditionals.push(newCond)\r\n    }\r\n    return conditionals\r\n  }\r\n  static getConditionalProp(conditional, fieldName, conditionalNum, defVal = [{}, 0]) {\r\n    if (Array.isArray(conditional)) {\r\n      //multiconditional\r\n      let selectedConditionalNum = conditionalNum\r\n      let selectedConditional = null\r\n      for (const curConditional of conditional) {\r\n        if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n        else {\r\n          selectedConditional = curConditional;\r\n          break;\r\n        }\r\n      }\r\n      if (!selectedConditional) return defVal\r\n      let stacks = clamp(selectedConditionalNum, 1, selectedConditional.maxStack)\r\n      return [selectedConditional[fieldName], stacks]\r\n    } else {\r\n      //condtional with stacks\r\n      let stacks = clamp(conditionalNum, 1, conditional.maxStack)\r\n      return [conditional[fieldName], stacks]\r\n    }\r\n  }\r\n}","import { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase = {};\r\nvar artIdIndex = 1;\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) {\r\n      throw Error('A static class cannot be instantiated.');\r\n    }\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey\r\n  static getArtifactDatabase = () => deepClone(artifactDatabase);\r\n  static getIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (this.isInvalid(art)) {\r\n          this.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    return true\r\n  }\r\n  static get = (id) => artifactDatabase[id] ?? null\r\n  static removeArtifact = (art) => {\r\n    this.removeArtifactById(art.id);\r\n  }\r\n  static update = (art) => {\r\n    if (this.isInvalid(art)) return;\r\n    let id = art.id;\r\n    if (!id) {//if does not have id, generate ID\r\n      do {\r\n        id = `artifact_${artIdIndex++}`\r\n      } while (localStorage.getItem(id) !== null)\r\n      art.id = id\r\n    }\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location) => {\r\n    if (!artid) return;\r\n    let art = this.get(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    this.update(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    this.moveToNewLocation(artA.id, locB)\r\n    this.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    this.swapLocations(this.get(artAid), this.get(artBid))\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(artifactDatabase).forEach(art => {\r\n      art.location = \"\"\r\n      this.update(art)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    artifactDatabase = {}\r\n    initiated = false\r\n    artIdIndex = 1\r\n  }\r\n}","const ElementalData = {\r\n  physical: { name: \"Physical\" },\r\n  anemo: { name: \"Anemo\" },\r\n  geo: { name: \"Geo\" },\r\n  electro: { name: \"Electro\" },\r\n  hydro: { name: \"Hydro\" },\r\n  pyro: { name: \"Pyro\" },\r\n  cryo: { name: \"Cryo\" },\r\n  // dendro: { name: \"Dendro\" }\r\n}\r\nexport default ElementalData"],"sourceRoot":""}