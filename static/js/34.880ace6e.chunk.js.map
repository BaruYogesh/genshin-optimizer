{"version":3,"sources":["Util/BorrowManager.ts","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Artifact/UploadDisplay.tsx"],"names":["BorrowManager","init","deinit","data","this","key","callback","a","value","refCount","box","result","starColor","r","g","b","schedulers","language","scheduler","createScheduler","promises","Array","fill","map","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","InputInvis","styled","display","UploadDisplay","setState","setReset","artifactInEditor","setExpanded","useState","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","usePromise","imageURL","processingResult","remaining","length","image","artifact","texts","useEffect","numProcessing","Math","min","processingCurrent","slice","forEach","processEntry","type","removeCurrent","useCallback","uploadFiles","files","file","fileName","name","clearQueue","pasteFunc","e","clipboardData","window","addEventListener","removeEventListener","onUpload","target","ExplainationModal","hide","Grid","container","spacing","alignItems","item","htmlFor","accept","id","multiple","onChange","IconButton","color","aria-label","component","PhotoCamera","flexGrow","Button","onClick","ReactGA","modalview","CardDark","sx","mt","pl","Typography","process","size","xs","lg","Box","src","width","height","alt","CircularProgress","variant","slotKey","mainStatKey","mainStatVal","rarity","level","substats","setKey","ModalWrapper","open","onClose","CardContent","py","CloseButton","Divider","Alert","severity","md","Snippet","gutterBottom","href","rel","scan_art_main","large","queue","message","entry","fileToURL","ArtifactSheet","getAll","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","undefined","borrow","addJob","rec","lines","line","text","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","location","lock","exclude","rarityRates","objectFromKeyMap","allArtifactRarities","score","reduce","count","set","includes","substat","Artifact","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","has","relevantMainStatValues","filter","unit","Stat","getStatUnit","mainStatValue","rarityString","rarityIndividualScore","parseInt","setKeys","rarityScore","minimumMainStatValue","values","max","findIndex","mainStatValScore","push","Object","entries","chosen","resultMainStatVal","i","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","valueStringWithUnit","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","parseFloat","matches","allSubstats","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData"],"mappings":"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","file":"static/js/34.880ace6e.chunk.js","sourcesContent":["export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { PhotoCamera } from '@mui/icons-material';\r\nimport { Alert, Box, Button, CardContent, CircularProgress, Divider, Grid, IconButton, styled, Typography } from '@mui/material';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport ColorText from '../Components/ColoredText';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp, hammingDistance, objectFromKeyMap } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor, setExpanded }: { setState: (art: IArtifact) => void, setReset: (reset: () => void) => void, artifactInEditor: boolean, setExpanded: (expand: boolean) => void }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setExpanded(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setExpanded])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  return (<>\r\n    <ExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n    <Grid container spacing={1} alignItems=\"center\">\r\n      <Grid item>\r\n        <label htmlFor=\"icon-button-file\">\r\n          <InputInvis accept=\"image/*\" id=\"icon-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n          <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n            <PhotoCamera />\r\n          </IconButton>\r\n        </label>\r\n      </Grid>\r\n      <Grid item flexGrow={1}>\r\n        <label htmlFor=\"contained-button-file\">\r\n          <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n          <Button component=\"span\">\r\n            Parse Artifact by Uploading Image (or Ctrl-v here)\r\n          </Button>\r\n        </label>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button color=\"info\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button>\r\n      </Grid>\r\n    </Grid>\r\n    {remaining > 0 && <CardDark sx={{ mt: 1, pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n      <Grid item flexGrow={1}>\r\n        <Typography>\r\n          <span>\r\n            Screenshots in file-queue: <b>{remaining}</b>\r\n            {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}\r\n          </span>\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item>\r\n        <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n      </Grid>\r\n    </Grid></CardDark>}\r\n    {image && <Grid container mt={1} spacing={1}>\r\n      <Grid item xs={6} lg={4}>\r\n        <Box component=\"img\" src={image} width=\"100%\" height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n      </Grid>\r\n      <Grid item xs={6} lg={8}>\r\n        {!firstProcessed && firstOutstanding && <Grid container spacing={1} alignItems=\"center\">\r\n          <Grid item>\r\n            <CircularProgress size=\"1.5em\" />\r\n          </Grid>\r\n          <Grid item flexGrow={1} >\r\n            <Typography variant=\"h6\">Scanning current artifact</Typography>\r\n          </Grid>\r\n        </Grid>}\r\n        {texts && <div>\r\n          <div>{texts.slotKey}</div>\r\n          <div>{texts.mainStatKey}</div>\r\n          <div>{texts.mainStatVal}</div>\r\n          <div>{texts.rarity}</div>\r\n          <div>{texts.level}</div>\r\n          <div>{texts.substats}</div>\r\n          <div>{texts.setKey}</div>\r\n        </div>}\r\n      </Grid>\r\n    </Grid>}\r\n  </ >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectFromKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{valueStringWithUnit(value.value, Stat.getStatUnit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n"],"sourceRoot":""}