{"version":3,"sources":["Components/CustomFormControl.tsx","Types/artifact.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/InfoComponent.tsx","Util/UIUtil.ts","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Util/BorrowManager.ts","Artifact/UploadDisplay.tsx","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","type","e","target","onBlur","onKeyDown","key","allMainStatKeys","allSubstats","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","InfoComponent","pageKey","text","modalTitle","children","loadFromLocalStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","faTimes","Body","fallback","animation","Footer","faQuestionCircle","valueString","unit","Math","round","toFixed","allSubstatFilter","Set","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","substats","rolls","substatsValidation","id","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maximumEfficiency","artifactValid","locationName","border","md","src","slotIcons","thumbnail","slotNames","stars","getStatName","stat","i","numRolls","length","efficiency","effOpacity","statName","style","opacity","has","valid","Toggle","Menu","Divider","placement","overlay","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setState","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","process","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","Object","fromEntries","allArtifactRarities","rarity","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","relevantMainStatValues","filter","numStarsString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","entries","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","uploadDisplayReset","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","artifactDispatch","artifactSheets","databaseArtifact","deepClone","reset","update","newValue","newSheet","pick","prefer","keys","setSubstat","useMemo","editorArt","isDup","artifacts","getArtifactDatabase","candidate","candidateSubstat","some","dupArtifacts","dupId","checkDuplicate","errMsgs","Trans","i18nKey","InputGroup","Dropdown","as","Prepend","namesByMaxRarities","sets","Fragment","ItemText","DropdownButton","Append","title","Text","l","sKey","FormControl","readOnly","getStatNameWithPercent","mainStatK","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","saveArtifact","isInvalid","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","val","indexOf","ButtonGroup","action","artToSave","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterLocked","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","equipArtifactOnSlot","removeArtifactById","editArtifact","current","scrollIntoView","behavior","cancelEditArtifact","pageview","registerListener","unregisterListener","locationDisplay","lockedDisplay","artifactDB","filterKey","item","numUnequip","numUnlock","numLock","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","paginationCard","showingValue","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","unequipArtifact","faUserSlash","faTrash","ButtonToolbar","slicep","n","toString"],"mappings":"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","file":"static/js/14.d79ab596.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: any,\r\n  onChange: (any) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { ArtifactSetKey, CharacterKey, Rarity, SetNum, SlotKey } from \"./consts\";\r\nimport ICalculatedStats from \"./ICalculatedStats\";\r\nimport IConditional, { IConditionalComplex, IConditionals } from \"./IConditional\";\r\n\r\nexport type IArtifactSheets = StrictDict<ArtifactSetKey, IArtifactSheet>\r\n\r\nexport interface IArtifactSheet {\r\n  name: string,\r\n  rarity: readonly Rarity[],\r\n  pieces: Dict<SlotKey, string>,\r\n  icons: Dict<SlotKey, string>,\r\n  conditionals?: IConditionals,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  text: (Displayable | ((stats: ICalculatedStats) => Displayable)),\r\n  stats?: StatDict | ((arg0: ICalculatedStats) => (StatDict | false))\r\n  conditional?: (IConditional | IConditionalComplex),\r\n  conditionals?: IConditionals,\r\n}\r\n\r\nexport type StatArr = { key: StatKey, value: number }[]\r\nexport type StatDict = Dict<StatKey, number>\r\n\r\nexport interface IArtifact {\r\n  id?: string,\r\n  setKey: ArtifactSetKey,\r\n  numStars: Rarity,\r\n  level: number,\r\n  slotKey: SlotKey,\r\n  mainStatKey: MainStatKey,\r\n  mainStatVal?: number,\r\n  substats: Substat[],\r\n  location: CharacterKey | \"\",\r\n\r\n  lock: boolean,\r\n}\r\n\r\nexport interface Substat {\r\n  key: SubstatKey | \"\",\r\n  value: number,\r\n\r\n  rolls?: number[],\r\n  efficiency?: number,\r\n}\r\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | SpecializedStatKey\r\n\r\ntype ElementalRESStatKey = \"physical_res_\" | \"anemo_res_\" | \"geo_res_\" | \"electro_res_\" | \"hydro_res_\" | \"pyro_res_\" | \"cryo_res_\"\r\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystalize_dmg_\"\r\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\r\n\r\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\",] as const\r\n\r\n// TODO: Check if these actually applies\r\ntype SpecializedStatKey = \"charged_critRate_\" | \"powShield_\" | \"incHeal_\"\r\n\r\nexport type MainStatKey = typeof allMainStatKeys[number]\r\nexport type CompressMainStatKey = \"hp\" | \"hp_\" | \"atk\" | \"atk_\" | \"def_\" | \"eleMas\" | \"enerRech_\" | \"critRate_\" | \"critDMG_\" | \"physical_dmg_\" | \"ele_dmg_\" | \"heal_\"\r\nexport type SubstatKey = typeof allSubstats[number]\r\n","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maximumEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, IArtifact, MainStatKey, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL)\r\n  const processingResult = usePromise(firstOutstanding?.result)\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = e => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.numStars}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n        </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: Substat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof IArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", numStars: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<Rarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [numStarsString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const numStars = parseInt(numStarsString) as Rarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(numStars))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(numStars, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof IArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), numStars: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof IArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.numStars, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.numStars!.add(other.numStars as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof IArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"numStars\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{value.value}{Stat.getStatUnit(value.key) === \"%\" ? \"%\" : \"\"}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].name.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): Substat[] {\r\n  const matches: Substat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof IArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactSets, Rarity, SlotKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nlet uploadDisplayReset\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const [artifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    if (artifactIdToEdit && artifactIdToEdit !== artifact?.id) {\r\n      const databaseArtifact = ArtifactDatabase.get(artifactIdToEdit)\r\n      if (databaseArtifact)\r\n        artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, artifact?.id])\r\n\r\n  const getUpdloadDisplayReset = reset => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.numStars = pick(artifact?.numStars, newSheet.rarity, Math.max(...newSheet.rarity) as Rarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, Object.keys(newSheet.slotNames))\r\n    }\r\n    if (newValue.numStars)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.numStars ?? artifact!.numStars))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: Substat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { dupId, isDup } = useMemo(() => checkDuplicate(artifact), [artifact])\r\n  const { numStars = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const errMsgs = artifact ? Artifact.substatsValidation(artifact) : []\r\n  const { currentEfficiency = 0, maximumEfficiency = 0 } = artifact ? Artifact.getArtifactEfficiency(artifact, allSubstatFilter) : {}\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.name ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([rarity, sets], i) =>\r\n                  <React.Fragment key={rarity}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={rarity} /></Trans></Dropdown.ItemText>\r\n                    {sets.map(([setKey, name]) =>\r\n                      <Dropdown.Item key={setKey} onClick={() => update({ setKey })}>\r\n                        {name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={numStars} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as Rarity[]).map((numStars, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(numStars)} onClick={() => update({ numStars })}>\r\n                {<Stars stars={numStars} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${numStars * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {numStars ? [...Array(numStars + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (numStars * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(sheet?.slotNames ?? {}).map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={sheet?.slotNames[artifact!.slotKey] ?? t`editor.unknownPieceName` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${Artifact.mainStatValue(artifact.mainStatKey, numStars, level)}${Stat.getStatUnit(artifact.mainStatKey)}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (currentEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (maximumEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? (isDup ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { saveArtifact(artifact!, artifact!.id); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? t`editor.btnSave` : t`editor.btnAdd`}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {Boolean(dupId) && <Button className=\"float-right\" onClick={() => { saveArtifact(artifact!, dupId); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: IArtifact | undefined, setSubstat: (index: number, substat: Substat) => void, className }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", substats = [] } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    const numStars = artifact.numStars\r\n    const { numUpgrades, high } = Artifact.rollInfo(numStars)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = Artifact.getSubstatRollData(key, numStars)\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = rolls.map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key && substats.every(other => other.key !== key))\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : \"\"}\r\n        onChange={value => setSubstat(index, { key, value })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          const newValue = valueString(accurateValue + v, unit)\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: Substat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      state!.substats[index] = substat\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nfunction checkDuplicate(editorArt: IArtifact | undefined): { dupId?: string, isDup: boolean } {\r\n  if (!editorArt) return { isDup: false }\r\n  const { id, setKey, numStars, level, slotKey, mainStatKey, substats } = editorArt\r\n  if (id) return { isDup: false }\r\n\r\n  //check for a \"upgrade\" or duplicate\r\n  const artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(candidate =>\r\n    setKey === candidate.setKey &&\r\n    numStars === candidate.numStars &&\r\n    slotKey === candidate.slotKey &&\r\n    mainStatKey === candidate.mainStatKey &&\r\n    level >= candidate.level &&\r\n    candidate.substats.every(candidateSubstat =>\r\n      !candidateSubstat.key || substats.some(substat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value >= candidateSubstat.value\r\n      )))\r\n  if (!artifacts.length) return { isDup: false }\r\n\r\n  const dupArtifacts = artifacts.filter(candidate =>\r\n    level === candidate.level &&\r\n    substats.every(substat =>\r\n      !substat.key || candidate.substats.some(candidateSubstat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value === candidateSubstat.value\r\n      )))\r\n\r\n  const dupId = dupArtifacts[0]?.id! ?? artifacts[0].id!\r\n  return { dupId, isDup: dupArtifacts.length > 0 }\r\n}\r\n\r\nasync function randomizeArtifact(): Promise<IArtifact> {\r\n  const set = getRandomElementFromArray(allArtifactSets)\r\n  const sheet = await ArtifactSheet.get(set)!\r\n  const rarity = getRandomElementFromArray(sheet.rarity)\r\n  const slot = getRandomElementFromArray(Object.keys(sheet.slotNames))\r\n  const mainStatKey = getRandomElementFromArray(Artifact.slotMainStats(slot))\r\n  const level = getRandomIntInclusive(0, rarity * 4)\r\n  const substats: Substat[] = [0, 1, 2, 3].map(i => ({ key: \"\", value: 0 }))\r\n\r\n  const { low, high } = Artifact.rollInfo(rarity)\r\n  const totRolls = Math.floor(level / 4) + getRandomIntInclusive(low, high)\r\n  const numOfInitialSubstats = Math.min(totRolls, 4)\r\n  const numUpgradesOrUnlocks = totRolls - numOfInitialSubstats\r\n\r\n  const RollStat = (substat: SubstatKey): number =>\r\n    getRandomElementFromArray(Artifact.getSubstatRollData(substat, rarity))\r\n\r\n  let remainingSubstats = allSubstats.filter(key => mainStatKey !== key)\r\n  for (const substat of substats.slice(0, numOfInitialSubstats)) {\r\n    substat.key = getRandomElementFromArray(remainingSubstats)\r\n    substat.value = RollStat(substat.key)\r\n    remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n  }\r\n  for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n    let substat = getRandomElementFromArray(substats)\r\n    substat.value += RollStat(substat.key as any)\r\n  }\r\n  for (const substat of substats)\r\n    if (substat.key)\r\n      substat.value = parseFloat(valueString(substat.value, Stat.getStatUnit(substat.key)))\r\n\r\n  return {\r\n    setKey: set, numStars: rarity, slotKey: slot, mainStatKey, level, substats, location: \"\", lock: false\r\n  }\r\n}\r\n\r\nconst saveArtifact = (artifact: IArtifact, id: string | undefined) => {\r\n  const artToSave = deepClone(artifact)\r\n  if (id) {\r\n    const art = ArtifactDatabase.get(id)\r\n    if (art) {\r\n      artToSave.id = art.id\r\n      artToSave.location = art.location\r\n    }\r\n  }\r\n  ArtifactDatabase.update(artToSave)\r\n}\r\n","import { faCheckSquare, faLock, faLockOpen, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, ButtonToolbar, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, IArtifact, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterLocked: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50,\r\n  effFilter: [...allSubstats]\r\n})\r\nfunction filterReducer(state, action) {\r\n  //reset all except the efficiency filter, since its a separate UI with its own reset\r\n  if (action.type === \"reset\") return { ...initialFilter(), effFilter: state.effFilter }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const { effFilter } = filters\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback(\r\n    id => {\r\n      const art = ArtifactDatabase.get(id);\r\n      if (art && art.location)\r\n        CharacterDatabase.equipArtifactOnSlot(art.location, art.slotKey, \"\");\r\n      ArtifactDatabase.removeArtifactById(id)\r\n    }, [])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    ArtifactDatabase.registerListener(forceUpdate)\r\n    return () => ArtifactDatabase.unregisterListener(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numUnlock, numLock } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\r\n    const artifacts: IArtifact[] = Object.values(artifactDB).filter(art => {\r\n      if (filterLocked) {\r\n        if (filterLocked === \"locked\" && !art.lock) return false\r\n        if (filterLocked === \"unlocked\" && art.lock) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).map((art) => {\r\n      switch (sortType) {\r\n        case \"quality\": return { value: [art.numStars], art }\r\n        case \"level\": return { value: [art.level, art.numStars], art }\r\n        case \"efficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency], art }\r\n        case \"mefficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).maximumEfficiency], art }\r\n      }\r\n      return { value: [0], art }\r\n    }).sort((a, b) => {\r\n      for (let i = 0; i < a.value.length; i++) {\r\n        if (a.value[i] !== b.value[i])\r\n          return (a.value[i] - b.value[i]) * (ascending ? 1 : -1)\r\n      }\r\n      return 0\r\n    }).map(item => item.art)\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 1 : 0), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n\r\n    return { artifacts, totalArtNum: Object.keys(artifactDB)?.length || 0, numUnequip, numUnlock, numLock, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty, effFilterSet])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation))\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.any\") })\r\n  else if (filterLocation === \"Inventory\") locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.inventory\") })\r\n  else if (filterLocation === \"Equipped\") locationDisplay = t(\"filterLocation.currentlyEquipped\")\r\n  else locationDisplay = <b>{locationCharacterSheet?.name}</b>\r\n\r\n  let lockedDisplay\r\n  if (filterLocked === \"locked\") lockedDisplay = <span><FontAwesomeIcon icon={faLock} /> {t`lock.locked`}</span>\r\n  else if (filterLocked === \"unlocked\") lockedDisplay = <span><FontAwesomeIcon icon={faLockOpen} /> {t`lock.unlocked`}</span>\r\n  else lockedDisplay = t(\"lockDisplay\", { value: t(\"lock.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => Artifact.unequipArtifact(art.id))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.removeArtifactById(art.id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numLock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, true))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numUnlock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, false))\r\n\r\n  const paginationCard = useMemo(() => {\r\n    const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n    return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }, [numPages, currentPageIndex, artifactsToShow.length, artifacts.length, totalArtNum, t])\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"resetFilters\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([star, sets]) =>\r\n                  <React.Fragment key={star}>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {sets.map(([key, name]) =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterArtSetKey: key })}>\r\n                        {name}\r\n                      </Dropdown.Item>)}\r\n                  </React.Fragment>\r\n                )}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocked ? \"success\" : \"primary\"} >\r\n                    {lockedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"\" })}><Trans t={t} i18nKey=\"lock.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"locked\" })}><span><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"lock.locked\" >Locked</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"unlocked\" })}><span><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"lock.unlocked\" >Unlocked</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numLock} onClick={lockArtifacts}><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnlock} onClick={unlockArtifacts}><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"button.unlockArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Efficiency Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ effFilter: [...allSubstats] })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"ui:reset\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ButtonToolbar as={Row} className=\"w-100 d-flex flex-row\">\r\n          {[[0, 6], [6]].map(slicep => <ToggleButtonGroup key={slicep.toString()} as={Col} type=\"checkbox\" value={effFilter} onChange={n => filterDispatch({ effFilter: n })} className=\"flex-grow-1 mb-2\">\r\n            {allSubstats.slice(...slicep).map(substat => <ToggleButton key={substat} value={substat} variant={effFilter.includes(substat) ? \"success\" : \"primary\"}>{Stat.getStatNameWithPercent(substat)}</ToggleButton>)}\r\n          </ToggleButtonGroup>)}\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n    {paginationCard}\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            effFilter={effFilterSet}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && paginationCard}\r\n  </Container >\r\n}\r\n"],"sourceRoot":""}