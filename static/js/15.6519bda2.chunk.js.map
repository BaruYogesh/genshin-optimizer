{"version":3,"sources":["Components/CustomFormControl.tsx","Components/CharacterSelection.tsx","Components/InfoComponent.tsx","Util/UIUtil.ts","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Types/artifact.ts","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Util/BorrowManager.ts","Artifact/UploadDisplay.tsx","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","className","type","e","target","onBlur","onKeyDown","key","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","InfoComponent","pageKey","text","modalTitle","children","loadFromLocalStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","icon","faTimes","Body","fallback","animation","Footer","faQuestionCircle","valueString","unit","Math","round","toFixed","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","maximumEfficiency","substatsValidation","id","slotKey","numStars","level","mainStatKey","substats","lock","currentEfficiency","mainStatLevel","max","min","mainStatVal","mainStatValue","Stat","getStatUnit","artifactValid","locationName","border","md","src","slotIcons","thumbnail","slotNames","slotNameWithIcon","stars","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","style","opacity","valid","Toggle","Menu","Divider","placement","overlay","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","allMainStatKeys","allSubstats","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setState","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","process","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","uploadDisplayReset","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","rarityRates","Object","fromEntries","allArtifactRarities","rarity","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","has","relevantMainStatValues","filter","numStarsString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","entries","chosen","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","artifactDispatch","artifactSheets","databaseArtifact","deepClone","reset","update","newValue","newSheet","pick","prefer","keys","setSubstat","useMemo","editorArt","isDup","artifacts","getArtifactDatabase","candidate","candidateSubstat","some","dupArtifacts","dupId","checkDuplicate","errMsgs","Trans","i18nKey","InputGroup","Dropdown","as","Prepend","namesByMaxRarities","sets","Fragment","ItemText","DropdownButton","Append","title","Text","l","sKey","FormControl","readOnly","getStatNameWithPercent","mainStatK","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","saveArtifact","isInvalid","canClearArtifact","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","val","indexOf","ButtonGroup","action","artToSave","confirm","InfoDisplay","React","lazy","sortMap","quality","mefficiency","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterLocked","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","t","useTranslation","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","dbDirty","forceUpdate","deleteArtifact","equipArtifactOnSlot","removeArtifactById","editArtifact","current","scrollIntoView","behavior","cancelEditArtifact","pageview","registerListener","unregisterListener","locationDisplay","lockedDisplay","artifactDB","filterKey","sortNum","numUnequip","numUnlock","numLock","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","unequipArtifact","faUserSlash","faTrash"],"mappings":"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","file":"static/js/15.6519bda2.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { IArtifact, Substat } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number }\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = art.maximumEfficiency !== undefined\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div>{Artifact.slotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{valueString(efficiency, \"eff\")}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { ArtifactSetKey, CharacterKey, Rarity, SetNum, SlotKey } from \"./consts\";\r\nimport ICalculatedStats from \"./ICalculatedStats\";\r\nimport IConditional, { IConditionalComplex, IConditionals } from \"./IConditional\";\r\n\r\nexport type IArtifactSheets = StrictDict<ArtifactSetKey, IArtifactSheet>\r\n\r\nexport interface IArtifactSheet {\r\n  name: string,\r\n  rarity: readonly Rarity[],\r\n  pieces: Dict<SlotKey, string>,\r\n  icons: Dict<SlotKey, string>,\r\n  conditionals?: IConditionals,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  text: (Displayable | ((stats: ICalculatedStats) => Displayable)),\r\n  stats?: StatDict | ((arg0: ICalculatedStats) => (StatDict | false))\r\n  conditional?: (IConditional | IConditionalComplex),\r\n  conditionals?: IConditionals,\r\n}\r\n\r\nexport type StatArr = { key: StatKey, value: number }[]\r\nexport type StatDict = Dict<StatKey, number>\r\n\r\nexport interface IArtifact {\r\n  id?: string,\r\n  setKey: ArtifactSetKey,\r\n  numStars: Rarity,\r\n  level: number,\r\n  slotKey: SlotKey,\r\n  mainStatKey: MainStatKey,\r\n  mainStatVal: number,\r\n  substats: Substat[],\r\n  location: CharacterKey | \"\",\r\n\r\n  currentEfficiency?: number,\r\n  maximumEfficiency?: number,\r\n  lock: boolean,\r\n}\r\n\r\nexport interface Substat {\r\n  key: SubstatKey | \"\",\r\n  value: number,\r\n\r\n  rolls?: number[],\r\n  efficiency?: number,\r\n  accurateValue?: number,\r\n}\r\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | SpecializedStatKey\r\n\r\ntype ElementalRESStatKey = \"physical_res_\" | \"anemo_res_\" | \"geo_res_\" | \"electro_res_\" | \"hydro_res_\" | \"pyro_res_\" | \"cryo_res_\"\r\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystalize_dmg_\"\r\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\r\n\r\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"def\"] as const\r\n\r\n// TODO: Check if these actually applies\r\ntype SpecializedStatKey = \"charged_critRate_\" | \"powShield_\" | \"incHeal_\"\r\n\r\nexport type MainStatKey = typeof allMainStatKeys[number]\r\nexport type CompressMainStatKey = \"hp\" | \"hp_\" | \"atk\" | \"atk_\" | \"def_\" | \"eleMas\" | \"enerRech_\" | \"critRate_\" | \"critDMG_\" | \"physical_dmg_\" | \"ele_dmg_\" | \"heal_\"\r\nexport type SubstatKey = typeof allSubstats[number]\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, IArtifact, MainStatKey, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL)\r\n  const processingResult = usePromise(firstOutstanding?.result)\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = e => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.numStars}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n        </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: Substat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof IArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", numStars: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", mainStatVal: 430, substats: [],\r\n    location: \"\", lock: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<Rarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [numStarsString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const numStars = parseInt(numStarsString) as Rarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(numStars))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(numStars, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, numStars, level, slotKey, mainStatKey, mainStatVal, substats: [], location: \"\", lock: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0, mainStatVal = Artifact.mainStatValue(mainStatKey, numStars, 0)!\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, numStars, level, slotKey, mainStatKey, mainStatVal, substats: [], location: \"\", lock: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof IArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), numStars: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof IArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0]\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.numStars!.add(other.numStars as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof IArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"numStars\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{value.value}{Stat.getStatUnit(value.key) === \"%\" ? \"%\" : \"\"}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === result.mainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(result.mainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(result.mainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(result.mainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].name.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): Substat[] {\r\n  const matches: Substat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof IArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactSets, Rarity, SlotKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nlet uploadDisplayReset\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }) {\r\n  const [artifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    if (artifactIdToEdit && artifactIdToEdit !== artifact?.id) {\r\n      const databaseArtifact = ArtifactDatabase.get(artifactIdToEdit)\r\n      if (databaseArtifact)\r\n        artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, artifact?.id])\r\n\r\n  const getUpdloadDisplayReset = reset => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.numStars = pick(artifact?.numStars, newSheet.rarity, Math.max(...newSheet.rarity) as Rarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, Object.keys(newSheet.slotNames))\r\n    }\r\n    if (newValue.numStars)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.numStars ?? artifact!.numStars))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: Substat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n\r\n  const { dupId, isDup } = useMemo(() => checkDuplicate(artifact), [artifact])\r\n  const { numStars = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const errMsgs = artifact ? Artifact.substatsValidation(artifact) : []\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans i18nKey=\"artifact:editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.name ?? \"Artifact Set\"}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([rarity, sets], i) =>\r\n                  <React.Fragment key={rarity}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={rarity} /></Dropdown.ItemText>\r\n                    {sets.map(([setKey, name]) =>\r\n                      <Dropdown.Item key={setKey} onClick={() => update({ setKey })}>\r\n                        {name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={numStars} /> : \"Rarity\"} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as Rarity[]).map((numStars, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(numStars)} onClick={() => update({ numStars })}>\r\n                {<Stars stars={numStars} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Level</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${numStars * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: 0 })} disabled={!sheet || level === 0}>0</Button>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (numStars * 4)}>+</Button>\r\n              <Button onClick={() => update({ level: numStars * 4 })} disabled={!sheet || level === (numStars * 4)}>{numStars * 4}</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={Artifact.slotNameWithIcon(slotKey)}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(sheet?.slotNames ?? {}).map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} >\r\n                  {Artifact.slotNameWithIcon(sKey)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={sheet?.slotNames[artifact!.slotKey] ?? \"Unknown Piece Name\"}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : \"Main Stat\"}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>Select a Main Artifact Stat </Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${Artifact.mainStatValue(artifact.mainStatKey, numStars, level)}${Stat.getStatUnit(artifact.mainStatKey)}` : \"Main Stat\"}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span >Current Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (artifact?.currentEfficiency ?? 0)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">Current Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>Every 4 artifact upgrades, you get a substat roll. <strong>Substat Efficiency</strong> calculates how high the substat rolled as a percentage.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\"><span>Maximum Substat Efficiency </span></Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (artifact?.maximumEfficiency ?? 0)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">Maximum Substat Efficiency</Popover.Title>\r\n                      <Popover.Content>\r\n                        <span>The <strong>Maximum Substat Efficiency</strong> of an artifact calculates the efficiency if the remaining upgrades rolled their maximum values.</span>\r\n                      </Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) =>\r\n            <SubstatInput key={\"substat\" + index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />\r\n          )}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">Artifact Editor Preview</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? `Detected ${isDup ? \"Duplicate\" : \"Upgraded\"} Artifact` : `Before Edit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { saveArtifact(artifact!, artifact!.id); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? \"Save Artifact\" : \"Add Artifact\"}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">Clear</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>Randomize</Button>}\r\n      {Boolean(dupId) && <Button className=\"float-right\" onClick={() => { saveArtifact(artifact!, dupId); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant=\"success\">Update Artifact</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: IArtifact | undefined, setSubstat: (index: number, substat: Substat) => void, className }) {\r\n  const { mainStatKey = \"\", substats = [] } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    const numStars = artifact.numStars\r\n    const { numUpgrades, high } = Artifact.rollInfo(numStars)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = Artifact.getSubstatRollData(key, numStars)\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || `Cannot calculate stat rolls.`\r\n  if (allowedRolls < 0) error = error || `Substat cannot be rolled more than ${allowedRolls + rollNum} times.`\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? rollNum : \"No\"} Roll{(rollNum > 1 || rollNum === 0) && \"s\"}\r\n    </Badge>\r\n    const rollArr = rolls.map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : \"No Stat\"} /></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={Stat.getStatNameWithPercent(key, `Substat ${index + 1}`)}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>No Substat</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key && substats.every(other => other.key !== key))\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder=\"Select a Substat.\"\r\n        value={key ? value : \"\"}\r\n        onChange={(value) => setSubstat(index, { key, value })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          const newValue = valueString(accurateValue + v, unit)\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">ERR</Badge>}{error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: Substat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      state!.substats[index] = substat\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nfunction checkDuplicate(editorArt: IArtifact | undefined): { dupId?: string, isDup: boolean } {\r\n  if (!editorArt) return { isDup: false }\r\n  const { id, setKey, numStars, level, slotKey, mainStatKey, substats } = editorArt\r\n  if (id) return { isDup: false }\r\n\r\n  //check for a \"upgrade\" or duplicate\r\n  const artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(candidate =>\r\n    setKey === candidate.setKey &&\r\n    numStars === candidate.numStars &&\r\n    slotKey === candidate.slotKey &&\r\n    mainStatKey === candidate.mainStatKey &&\r\n    level >= candidate.level &&\r\n    candidate.substats.every(candidateSubstat =>\r\n      !candidateSubstat.key || substats.some(substat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value >= candidateSubstat.value\r\n      )))\r\n  if (!artifacts.length) return { isDup: false }\r\n\r\n  const dupArtifacts = artifacts.filter(candidate =>\r\n    level === candidate.level &&\r\n    substats.every(substat =>\r\n      !substat.key || candidate.substats.some(candidateSubstat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value === candidateSubstat.value\r\n      )))\r\n\r\n  const dupId = dupArtifacts[0]?.id! ?? artifacts[0].id!\r\n  return { dupId, isDup: dupArtifacts.length > 0 }\r\n}\r\n\r\nasync function randomizeArtifact(): Promise<IArtifact> {\r\n  const set = getRandomElementFromArray(allArtifactSets)\r\n  const sheet = await ArtifactSheet.get(set)!\r\n  const rarity = getRandomElementFromArray(sheet.rarity)\r\n  const slot = getRandomElementFromArray(Object.keys(sheet.slotNames))\r\n  const mainStatKey = getRandomElementFromArray(Artifact.slotMainStats(slot))\r\n  const level = getRandomIntInclusive(0, rarity * 4)\r\n  const substats: Substat[] = [0, 1, 2, 3].map(i => ({ key: \"\", value: 0 }))\r\n\r\n  const { low, high } = Artifact.rollInfo(rarity)\r\n  const totRolls = Math.floor(level / 4) + getRandomIntInclusive(low, high)\r\n  const numOfInitialSubstats = Math.min(totRolls, 4)\r\n  const numUpgradesOrUnlocks = totRolls - numOfInitialSubstats\r\n\r\n  const RollStat = (substat: SubstatKey): number =>\r\n    getRandomElementFromArray(Artifact.getSubstatRollData(substat, rarity))\r\n\r\n  let remainingSubstats = allSubstats.filter(key => mainStatKey !== key)\r\n  for (const substat of substats.slice(0, numOfInitialSubstats)) {\r\n    substat.key = getRandomElementFromArray(remainingSubstats)\r\n    substat.value = RollStat(substat.key)\r\n    remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n  }\r\n  for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n    let substat = getRandomElementFromArray(substats)\r\n    substat.value += RollStat(substat.key as any)\r\n  }\r\n  for (const substat of substats)\r\n    if (substat.key)\r\n      substat.value = parseFloat(valueString(substat.value, Stat.getStatUnit(substat.key)))\r\n\r\n  return {\r\n    setKey: set, numStars: rarity, slotKey: slot, mainStatKey, level, substats, mainStatVal: Artifact.mainStatValue(mainStatKey, rarity, level)!, location: \"\", lock: false\r\n  }\r\n}\r\n\r\nconst saveArtifact = (artifact: IArtifact, id: string | undefined) => {\r\n  const artToSave = deepClone(artifact)\r\n  if (id) {\r\n    const art = ArtifactDatabase.get(id)\r\n    if (art) {\r\n      artToSave.id = art.id\r\n      artToSave.location = art.location\r\n    }\r\n  }\r\n  ArtifactDatabase.update(artToSave)\r\n}\r\nconst canClearArtifact = (): boolean => window.confirm(\"There is an artifact in editor. Are you sure you want to clear the editor?\")\r\n","import { faCheckSquare, faLock, faLockOpen, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortMap = {\r\n  quality: \"Quality\",\r\n  level: \"Level\",\r\n  efficiency: \"Current Substat Eff.\",\r\n  mefficiency: \"Maximum Substat Eff.\"\r\n}\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterLocked: \"\",\r\n  ascending: false,\r\n  sortType: Object.keys(sortMap)[0],\r\n  maxNumArtifactsToDisplay: 50\r\n})\r\nfunction filterReducer(state, action) {\r\n  if (action.type === \"reset\") return initialFilter()\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"ui\", \"artifact\"]);\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n  const deleteArtifact = useCallback(\r\n    id => {\r\n      const art = ArtifactDatabase.get(id);\r\n      if (art && art.location)\r\n        CharacterDatabase.equipArtifactOnSlot(art.location, art.slotKey, \"\");\r\n      ArtifactDatabase.removeArtifactById(id)\r\n    }, [])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    ArtifactDatabase.registerListener(forceUpdate)\r\n    return () => ArtifactDatabase.unregisterListener(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numUnlock, numLock } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterLocked = \"\", sortType = Object.keys(sortMap)[0], ascending = false } = filters\r\n    const artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\r\n    const artifacts = Object.values(artifactDB).filter(art => {\r\n      if (filterLocked) {\r\n        if (filterLocked === \"locked\" && !art.lock) return false\r\n        if (filterLocked === \"unlocked\" && art.lock) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).sort((a, b) => {\r\n      let sortNum = 0\r\n      switch (sortType) {\r\n        case \"quality\":\r\n          sortNum = a.numStars - b.numStars\r\n          if (sortNum === 0)\r\n            sortNum = a.level - b.level\r\n          break;\r\n        case \"level\":\r\n          sortNum = a.level - b.level\r\n          if (sortNum === 0)\r\n            sortNum = a.numStars - b.numStars\r\n          break;\r\n        case \"efficiency\":\r\n          sortNum = a.currentEfficiency! - b.currentEfficiency!\r\n          break;\r\n        case \"mefficiency\":\r\n          sortNum = a.maximumEfficiency! - b.maximumEfficiency!\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return sortNum * (ascending ? 1 : -1)\r\n    })\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 1 : 0), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n\r\n    return { artifacts, totalArtNum: Object.keys(artifactDB)?.length || 0, numUnequip, numUnlock, numLock, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterLocked = \"\", sortType = Object.keys(sortMap)[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation))\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = <span>Location: Any</span>\r\n  else if (filterLocation === \"Inventory\") locationDisplay = <span>Location: Inventory</span>\r\n  else if (filterLocation === \"Equipped\") locationDisplay = <span>Location: Equipped</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.name}</b>\r\n\r\n  let lockedDisplay\r\n  if (filterLocked === \"locked\") lockedDisplay = <span><FontAwesomeIcon icon={faLock} /> Locked</span>\r\n  else if (filterLocked === \"unlocked\") lockedDisplay = <span><FontAwesomeIcon icon={faLockOpen} /> Unlocked</span>\r\n  else lockedDisplay = <span>Locked: Any</span>\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => Artifact.unequipArtifact(art.id))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.removeArtifactById(art.id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numLock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, true))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numUnlock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, false))\r\n\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle=\"Artifact Editing/Management Page Info\"\r\n      text={t(\"artifact:tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans i18nKey=\"artifact:artifactFilter\" >Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> Reset Filters</Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-n2\">\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('ui:game.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([star, sets]) =>\r\n                  <React.Fragment key={star}>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {sets.map(([key, name]) =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterArtSetKey: key })}>\r\n                        {name}\r\n                      </Dropdown.Item>)}\r\n                  </React.Fragment>\r\n                )}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"artifact:filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={sortMap[sortType]}>Sort By: {{ value: sortMap[sortType] }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {Object.entries(sortMap).map(([key, name]) =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{name}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? Artifact.slotNameWithIcon(filterSlotKey) : t('ui:game.slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} >\r\n                        {Artifact.slotNameWithIcon(key)}\r\n                      </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, \"Main Stat\")}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><Trans t={t} i18nKey=\"artifact:filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><Trans t={t} i18nKey=\"artifact:filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocked ? \"success\" : \"primary\"} >\r\n                    {lockedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"\" })}>Any</Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"locked\" })}><span><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"artifact:locked\" >Locked</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"unlocked\" })}><span><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"artifact:unlocked\" >Unlocked</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {Stat.getStatNameWithPercent(substatKey, t('ui:game.substatFormat', { value: index + 1 }))}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"ui:noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"artifact:button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"artifact:button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numLock} onClick={lockArtifacts}><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"artifact:button.lockArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnlock} onClick={unlockArtifacts}><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"artifact:button.unlockArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"artifact:buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {numPages > 1 && <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => setpageIdex(i)} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>}\r\n          </Col>\r\n          {/* TODO: localization */}\r\n          <Col xs=\"auto\"><span className=\"float-right text-right\">Showing <b>{artifactsToShow.length}</b> out of {artifacts.length !== totalArtNum ? `${artifacts.length}/` : \"\"}{totalArtNum} Artifacts</span></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* TODO: localization */}\r\n          <Col xs=\"auto\"><span className=\"float-right text-right\">Showing <b>{artifactsToShow.length}</b> out of {artifacts.length !== totalArtNum ? `${artifacts.length}/` : \"\"}{totalArtNum} Artifacts</span></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>}\r\n  </Container >\r\n}"],"sourceRoot":""}