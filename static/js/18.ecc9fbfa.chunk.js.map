{"version":3,"sources":["Components/StarDisplay.tsx","Character/Character.ts","StatDependency.ts","Assets/Weapon-class-bow-icon.png","Assets/Assets.ts","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","FlexPage/CodingUtil.ts","FlexPage/Schemas.ts","FlexPage/FlexUtil.ts","FlexPage/FlexDisplay.tsx"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","Character","this","Error","getElementalName","elementalKey","ElementalData","name","getLevelString","character","level","ascensionMaxLevel","ascension","getTalentFieldValue","field","key","stats","defVal","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","weaponSheet","includes","characterStatBase","getStatValueWithOverride","characterSheet","calculateBuild","artifactSheets","artifacts","mainStatAssumptionLevel","Object","fromEntries","art","equippedArtifacts","entries","artid","database","_getArt","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","values","forEach","mainStatKey","mainStatValue","numStars","Math","max","min","substats","substat","value","mergeStats","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","id","dependencies","GetDependencies","modifiers","PreprocessFormulas","preprocessedStats","formula","characterKey","elementKey","hitMode","infusionAura","reactionMode","talentLevelKeys","constellation","weapon","statKeys","characterHP","getBase","characterDEF","characterATK","characterLevel","characterEle","weaponType","weaponTypeKey","tlvl","allElements","eleKey","overrides","hasOwnProperty","specialStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","getTalentStatsAll","s","weaponATK","getMainStatValue","weaponSubKey","getSubStatKey","getSubStatValue","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","addFormula","fields","parseSection","section","sheets","talentKey","sections","formKey","document","num","artifactSheet","setEffects","setNum","GetFormulaDependency","dependency","Set","Proxy","get","target","prop","receiver","add","toString","formulaKeyDependency","freeze","Formulas","baseStat","StatData","found","InsertDependencies","flatMap","dep","has","k","path","Formula","getCurrent","getStage","Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","encodeItem","data","schema","pathItem","encode","type","uint","string","uintToString","encodeLength","encodeUInt","match","encodeString","schemas","defaultSchema","item","join","encodeArray","default","encodeObject","keySchema","valueSchema","items","filter","encodeSparse","error","decodeItem","stream","result","decodeLength","stringToUInt","take","decodeUInt","decodeString","unused","decodeArray","decodeObject","decodeSparse","decode","number","remainder","floor","String","fromCharCode","padEnd","multiplier","code","charCodeAt","BlockStream","offset","count","slice","elements","float","replace","parseFloat","array","other","object","fixed","list","indexOf","index","stat","artifactSet","allArtifactSets","slot","allSlotKeys","allCharacterKeys","allHitModes","allReactionModes","element","slotKey","factor","endsWith","lock","crawlObject","c","isArray","pathvalues","last","pop","current","next","weaponV2","levelKey","refineIndex","overrideMainVal","overrideSubVal","findIndex","maxLevel","split","lvla","addAsc","characterV2","overrideLevel","auto","skill","burst","sparse","reserved","roundedLevel","round","isAscended","levelString","weaponLevel","flexV2","_createFlexObj","parseFlexObjFromSchema","decoded","end","validateFlexCharacter","validateFlexArtifact","location","TestDisplay","useLocation","searchStr","search","flexResult","parameters","v","d","parseFlexObj","substring","to","version","Display","flexObj","_getChar","createFlexObj","window","scrollTo","useState","toast","settoast","url","href","Container","Toast","onClose","show","delay","autohide","style","position","top","right","Header","Body","Card","bg","text","InputGroup","Prepend","Button","onClick","navigator","clipboard","writeText","faLink","Form","Control","readOnly","e","select","CharacterDisplayCard"],"mappings":"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","file":"static/js/18.ecc9fbfa.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { ascensionMaxLevel, characterStatBase } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { database } from \"../Database/Database\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { IArtifact } from \"../Types/artifact\";\r\nimport { ICharacter } from \"../Types/character\";\r\nimport { allElements, ArtifactSetKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { mergeStats } from \"../Util/StatUtil\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey: ElementKey | \"physical\"): string =>\r\n    ElementalData[elementalKey].name\r\n  static getLevelString = (character: ICharacter): string =>\r\n    `${character.level}/${ascensionMaxLevel[character.ascension]}`\r\n\r\n  static getTalentFieldValue = (field: IFieldDisplay, key: keyof IFieldDisplay, stats = {}, defVal = \"\"): any => {\r\n    if (!field[key]) return defVal\r\n    return evalIfFunc(field[key] as any, stats!)\r\n  }\r\n\r\n  static hasOverride = (character: ICharacter, statKey): boolean => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\")\r\n    if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\")\r\n    if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\")\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string): number => {\r\n    if (statKey === \"enemyLevel\") return character.level\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    return 0\r\n  }\r\n  static getStatValueWithOverride = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string) => {\r\n    if (Character.hasOverride(character, statKey)) return character.baseStatOverrides?.[statKey] ?? 0\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    let artifacts\r\n    if (character.artifacts) // from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, database._getArt(artid)]))\r\n    const initialStats = Character.createInitialStats(character, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats: ICalculatedStats, artifacts: Dict<SlotKey, IArtifact>, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>): ICalculatedStats => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    const artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.numStars, Math.max(Math.min(stats.mainStatAssumptionLevel, art.numStars * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    mergeStats(stats, artifactSetEffectsStats)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey, setNumKey]) => {\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      mergeStats(stats, condStats)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats, stats?.modifiers)\r\n    const { initialStats: preprocessedStats, formula } = PreprocessFormulas(dependencies, stats)\r\n    formula(preprocessedStats)\r\n    return { ...stats, ...preprocessedStats }\r\n  }\r\n\r\n  static createInitialStats = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { characterKey, elementKey, level, ascension, hitMode, infusionAura, reactionMode, talentLevelKeys, constellation, equippedArtifacts, conditionalValues = {}, weapon } = character\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"enemyLevel\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterHP = characterSheet.getBase(\"hp\", level, ascension)\r\n    initialStats.characterDEF = characterSheet.getBase(\"def\", level, ascension)\r\n    initialStats.characterATK = characterSheet.getBase(\"atk\", level, ascension)\r\n    initialStats.characterLevel = level\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    initialStats.weapon = deepClone(weapon)\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    const specialStatKey = characterSheet.getSpecializedStat(ascension)\r\n    if (specialStatKey) {\r\n      const specializedStatVal = characterSheet.getSpecializedStatVal(ascension)\r\n      mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n    }\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponATK = weaponSheet.getMainStatValue(weapon.level, weapon.ascension)\r\n    initialStats.weaponATK = weaponATK\r\n    const weaponSubKey = weaponSheet.getSubStatKey()\r\n    if (weaponSubKey) mergeStats(initialStats, { [weaponSubKey]: weaponSheet.getSubStatValue(weapon.level, weapon.ascension) })\r\n    mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (keys[0] === \"character\" && keys[3] === \"talents\" && keys[4] !== elementKey) return //fix for traveler, make sure conditionals match element.\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  //TODO: this needs weaponSheet/artifactsheets as a parameter.\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    const addFormula = (fields, key) => fields.forEach(field => {\r\n      if (!field.formula || !field?.canShow?.(stats)) return\r\n      if (!charFormulas[key]) charFormulas[key] = []\r\n      charFormulas[key].push((field.formula as any).keys)\r\n    })\r\n    const parseSection = (section, key) => {\r\n      //conditional\r\n      if (section.conditional && Conditional.canShow(section.conditional, stats)) {\r\n        const { fields }: { fields?: Array<IFieldDisplay> } = Conditional.resolve(section.conditional, stats, null)\r\n        fields && addFormula(fields, key)\r\n      }\r\n      //fields\r\n      if (section.fields) addFormula(section.fields, key)\r\n    }\r\n    talentSheet && Object.entries(talentSheet.sheets).forEach(([talentKey, { sections }]) => {\r\n      if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n      sections.forEach(section => parseSection(section, `talentKey_${talentKey}`))\r\n    })\r\n\r\n    const formKey = `weapon_${stats.weapon.key}`\r\n    weaponSheet.document && weaponSheet.document.map(section => parseSection(section, formKey))\r\n\r\n    stats.setToSlots && Object.entries(stats.setToSlots).map(([setKey, slots]) => [setKey, slots.length]).forEach(([setKey, num]) => {\r\n      const artifactSheet = artifactSheets[setKey] as ArtifactSheet\r\n      if (!artifactSheet) return\r\n      Object.entries(artifactSheet.setEffects).forEach(([setNum, { document }]) => {\r\n        if (num < parseInt(setNum)) return\r\n        document && document.map(section => parseSection(section, `artifact_${setKey}_${setNum}`))\r\n      })\r\n    })\r\n\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n}","import Formula from \"./Formula\"\r\nimport { Formulas, getStage, StatData } from \"./StatData\"\r\nimport { IBaseStat } from \"./Types/character\"\r\nimport { Modifier } from \"./Types/stats\"\r\n\r\n// Generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula: (s) => number) {\r\n  const dependency: Set<string> = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop.toString()) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.entries(Formulas).map(([key, value]) => [key, GetFormulaDependency(value)])\r\n)) as Dict<string, string[]>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(baseStat: IBaseStat, modifiers: Modifier = {}, keys = Object.keys(StatData)): Dependencies {\r\n  const found = new Set<string>()\r\n  const dependencies = [new Set<string>(), new Set<string>()]\r\n  keys.forEach(key => InsertDependencies(baseStat, key, modifiers, dependencies, found))\r\n  return dependencies.flatMap(dep => [...dep])\r\n}\r\nfunction InsertDependencies(baseStat: IBaseStat, key: string, modifiers: Modifier, dependencies: Set<string>[], found: Set<string>) {\r\n  if (found.has(key)) return\r\n  found.add(key)\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(baseStat, k, modifiers, dependencies, found));\r\n  (modifiers[key] ?? []).forEach(path => Formula.getCurrent(path, baseStat)[1].forEach(k =>\r\n    InsertDependencies(baseStat, k, modifiers, dependencies, found)))\r\n  dependencies[getStage(key)].add(key)\r\n}\r\n\r\ntype Dependencies = string[]\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","import bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","// @ts-nocheck\r\n// The *type* of these data are in schema and so are unknown at compile time.\r\n// Type annotation here will only amount to adding `any` everywhere\r\n\r\n/// Schema keys\r\n/// Common {\r\n///   encode?: A function that transform encoding object into the specified format\r\n///   decode?: A function that transform object in the specified format into the decoded object\r\n/// }\r\n///\r\n/// UInt: { type: \"uint\",\r\n///   length?: number of bytes, uses variable-length format if not set,\r\n/// }\r\n/// String: { type: \"string\" }\r\n/// Array: { type: \"array\",\r\n///   schemas?: Array of schemas, in the same order as the item,\r\n///   defaultSchema?: Default schema for when `schemas[i]` is `null`,\r\n/// }\r\n/// Object: { type: \"object\",\r\n///   schemas: A key-schema dictionary. All keys are encoded\r\n///   default: default value if the object[key] doesn't exist\r\n/// }\r\n/// Sparse: { type: \"sparse\",\r\n///   keys?: A list of permitted keys, `null` if all keys are permitted,\r\n///   keySchema: Common schema for keys,\r\n///   valueSchema: Common schema for values,\r\n/// }\r\n\r\nexport function encode(data, schema) {\r\n  return encodeItem(data, schema, null)\r\n}\r\nexport function decode(string, schema) {\r\n  const stream = new BlockStream(string)\r\n  const result = decodeItem(stream, schema, null)\r\n  stream.end()\r\n  return result\r\n}\r\n\r\nfunction encodeItem(data, schema, pathItem) {\r\n  try {\r\n    if (schema.encode)\r\n      data = schema.encode(data)\r\n    switch (schema.type) {\r\n      case \"uint\": return encodeUInt(data, schema)\r\n      case \"string\": return encodeString(data, schema)\r\n      case \"array\": return encodeArray(data, schema)\r\n      case \"object\": return encodeObject(data, schema)\r\n      case \"sparse\": return encodeSparse(data, schema)\r\n      default: throw new Error(`Unsupported schema type ${schema.type} on array`)\r\n    }\r\n  } catch (error) {\r\n    error.path = error.path ?? []\r\n    error.path.push(pathItem)\r\n    throw error\r\n  }\r\n}\r\nfunction decodeItem(stream, schema, pathItem) {\r\n  try {\r\n    let result\r\n    switch (schema.type) {\r\n      case \"uint\": result = decodeUInt(stream, schema); break\r\n      case \"string\": result = decodeString(stream, schema); break\r\n      case \"array\": result = decodeArray(stream, schema); break\r\n      case \"object\": result = decodeObject(stream, schema); break\r\n      case \"sparse\": result = decodeSparse(stream, schema); break\r\n      default: throw new Error(`Unsupported schema type ${schema.type} on array`)\r\n    }\r\n    if (schema.decode)\r\n      return schema.decode(result)\r\n    return result\r\n  } catch (error) {\r\n    error.path = error.path ?? []\r\n    error.path.push(pathItem)\r\n    throw error\r\n  }\r\n}\r\n\r\nfunction encodeSparse(data, schema) {\r\n  const { keySchema, keys, valueSchema } = schema\r\n  const items = Object.entries(data).filter(([key]) => keys?.includes(key) ?? true)\r\n\r\n  return encodeLength(items.length) + items.map(([key, value]) =>\r\n    encodeItem(key, keySchema, key) + encodeItem(value, valueSchema, key)\r\n  ).join('')\r\n}\r\nfunction decodeSparse(stream, schema) {\r\n  const { keys, keySchema, valueSchema } = schema\r\n  const length = decodeLength(stream)\r\n\r\n  return Object.fromEntries([...new Array(length)].map(() => {\r\n    const key = decodeItem(stream, keySchema, null)\r\n    const value = decodeItem(stream, valueSchema, key)\r\n    return [key, value]\r\n  }).filter(([key]) => keys?.includes(key) ?? true))\r\n}\r\n\r\nfunction encodeObject(data, schema: { schemas: any[], default: any }) {\r\n  const { schemas = [] } = schema\r\n  return Object.entries(schemas).map(([key, schema]) =>\r\n    encodeItem(key in data ? data[key] : schema.default, schema, key)\r\n  ).join('')\r\n}\r\nfunction decodeObject(stream, schema) {\r\n  const { schemas = [] } = schema\r\n  return Object.fromEntries(Object.entries(schemas).map(([key, schema]) =>\r\n    [key, decodeItem(stream, schema, key)]\r\n  ))\r\n}\r\n\r\nfunction encodeArray(data, schema) {\r\n  const { schemas = [], defaultSchema } = schema\r\n  return encodeLength(data.length) + data.map((item, i) =>\r\n    encodeItem(item, schemas[i] ?? defaultSchema, i)\r\n  ).join('')\r\n}\r\nfunction decodeArray(stream, schema) {\r\n  const { schemas = [], defaultSchema } = schema, length = decodeLength(stream)\r\n  return [...new Array(length)].map((unused, i) =>\r\n    decodeItem(stream, schemas[i] ?? defaultSchema, i))\r\n}\r\n\r\nfunction encodeString(string, schema) {\r\n  if (!string.match(/^[a-z0-9\\-_]*$/i))\r\n    throw new Error(`Cannot encode string ${string}: not alphanumeric or -_`)\r\n  return encodeLength(string.length) + string\r\n}\r\nfunction decodeString(stream, schema) {\r\n  const string = stream.take(decodeLength(stream))\r\n  if (!string.match(/^[a-z0-9\\-_]*$/i))\r\n    throw new Error(`Cannot decode string ${string}: not alphanumeric or -_`)\r\n  return string\r\n}\r\n\r\nfunction encodeUInt(uint, schema) {\r\n  const string = uintToString(uint, schema.length)\r\n  return schema.length ? string : (encodeLength(string.length) + string)\r\n}\r\nfunction decodeUInt(stream, schema) {\r\n  let length = schema.length || decodeLength(stream)\r\n  return stringToUInt(stream.take(length))\r\n}\r\n\r\n// Keep the length low. We might want to reserve high bits for later extension.\r\nfunction encodeLength(length) {\r\n  if (length >= 32)\r\n    throw new Error(`Length (${length}) too large`)\r\n  return uintToString(length, 1)\r\n}\r\nfunction decodeLength(stream) {\r\n  let length = stringToUInt(stream.take(1))\r\n  if (length >= 32)\r\n    throw new Error(`Length (${length}) too large`)\r\n  return length\r\n}\r\n\r\nexport function uintToString(number, length = 0) {\r\n  if (number < 0) throw new Error(`Cannot encode negative number ${number}`)\r\n\r\n  var string = \"\"\r\n  while (number > 0) {\r\n    const remainder = number % 64\r\n    number = Math.floor(number / 64)\r\n    if (remainder < 10) // 0-9\r\n      string += String.fromCharCode(remainder + 48 - 0)\r\n    else if (remainder < 36) // a-z\r\n      string += String.fromCharCode(remainder + 97 - 10)\r\n    else if (remainder < 62) // A-Z\r\n      string += String.fromCharCode(remainder + 65 - 36)\r\n    else if (remainder === 62) // -\r\n      string += \"-\"\r\n    else if (remainder === 63) // _\r\n      string += \"_\"\r\n  }\r\n\r\n  if (!length)\r\n    return string\r\n\r\n  if (string.length > length)\r\n    throw new Error(`Cannot encode uint ${number}: value too large`)\r\n  return string.padEnd(length, \"0\")\r\n}\r\nexport function stringToUInt(string) {\r\n  let result = 0, multiplier = 1\r\n\r\n  for (let i = 0; i < string.length; i++) {\r\n    let code = string.charCodeAt(i)\r\n\r\n    if (48 <= code && code < 58) // 0-9\r\n      result += multiplier * (code - 48 + 0)\r\n    else if (97 <= code && code < 123) // a-z\r\n      result += multiplier * (code - 97 + 10)\r\n    else if (65 <= code && code < 91) // A-Z\r\n      result += multiplier * (code - 65 + 36)\r\n    else if (string[i] === '-')\r\n      result += multiplier * 62\r\n    else if (string[i] === '_')\r\n      result += multiplier * 63\r\n    else throw new Error(`Cannot parse UInt from \"${string}\", which contains \"${String.fromCharCode(code)}\"`)\r\n\r\n    multiplier *= 64\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nclass BlockStream {\r\n  string: string\r\n  offset: number\r\n  constructor(string) {\r\n    this.string = string\r\n    this.offset = 0\r\n  }\r\n  take(count) {\r\n    if (this.offset + count > this.string.length)\r\n      throw new Error(`Cannot take ${count} items from ${this.string.slice(this.offset)}`)\r\n\r\n    const result = this.string.slice(this.offset, this.offset + count)\r\n    this.offset += count\r\n    return result\r\n  }\r\n  end() {\r\n    if (this.string.length !== this.offset)\r\n      throw new Error(`Unused string ${this.string.slice(this.offset)}`)\r\n  }\r\n}\r\n","import { ascensionMaxLevel } from \"../Data/CharacterData\"\r\nimport { allSlotKeys, allElements, allArtifactSets, allHitModes, allReactionModes, allCharacterKeys } from \"../Types/consts\"\r\nimport { crawlObject } from \"../Util/Util\"\r\nimport { uintToString, stringToUInt } from \"./CodingUtil\"\r\n\r\n// DO NOT REMOVE ITEMS FROM THESE LISTS\r\n//        ONLY APPEND NEW ENTRIES\r\n// The index of items in this list is used to\r\n// compress the exported data. Removing an item\r\n// from this list will shift subsequent entries.\r\nconst elements = ['', ...allElements] as const\r\nconst stats = [\r\n  \"\", \"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\",\r\n  \"physical_dmg_\", \"anemo_dmg_\", \"cryo_dmg_\", \"dendro_dmg_\", \"electro_dmg_\", \"geo_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\",\r\n] as const\r\n\r\n// Common schemas\r\n\r\nconst uint = (length) => ({ type: \"uint\", length })\r\nconst float = {\r\n  type: \"string\",\r\n  encode: (value) => value.toString().replace(/\\./g, '_'),\r\n  decode: (string) => parseFloat(string.replace(/_/g, '.')),\r\n}\r\nconst string = { type: \"string\" }\r\nconst array = (defaultSchema, other = {}) => ({ type: \"array\", defaultSchema, ...other })\r\nconst object = (schemas, other = {}) => ({ type: \"object\", schemas, ...other })\r\nconst sparse = (keySchema, valueSchema, keys = null) => ({ type: \"sparse\", keys, keySchema, valueSchema })\r\n\r\n// Fixed schema\r\n\r\nconst fixed = (list, length = 1) => ({\r\n  type: \"uint\", length,\r\n  encode: (item) => list.indexOf(item),\r\n  decode: (index) => list[index],\r\n})\r\nconst stat = fixed(stats)\r\nconst artifactSet = fixed(allArtifactSets)\r\nconst slot = fixed(allSlotKeys)\r\nconst characterKey = fixed(allCharacterKeys)\r\nconst hitMode = fixed(allHitModes)\r\nconst reactionMode = fixed([null, ...allReactionModes])\r\nconst element = fixed(elements)\r\n\r\n// Complex schemas\r\n\r\nconst artifact = object({\r\n  setKey: artifactSet,\r\n  numStars: uint(1),\r\n  level: uint(2),\r\n  mainStatKey: stat,\r\n  slotKey: slot,\r\n  substats: array(\r\n    object({\r\n      key: stat,\r\n      value: uint(2),\r\n    }, {\r\n      encode: ({ key, value }) => {\r\n        let factor = key.endsWith(\"_\") ? 10 : 1 // one decimal place for percentage\r\n        return { key, value: value * factor }\r\n      },\r\n      decode: ({ key, value }) => {\r\n        let factor = key.endsWith(\"_\") ? 10 : 1 // one decomal place for percentage\r\n        return { key, value: value / factor }\r\n      }\r\n    })\r\n  )\r\n}, {\r\n  decode: art => {\r\n    art.id = \"\"\r\n    art.lock = false\r\n    return art\r\n  }\r\n})\r\nconst conditionalValues = array(object({\r\n  path: array(string), value: array(string)\r\n}), {\r\n  encode: (conditionalValues) => {\r\n    let result: { path, value }[] = []\r\n    crawlObject(conditionalValues, [], c => Array.isArray(c), (value, path) => {\r\n      result.push({ path, value: value.map(item => item.toString()) })\r\n    })\r\n    result.filter(({ path }) => {\r\n      switch (path[0]) {\r\n        case \"character\":\r\n          path[0] = \"c\"\r\n          path[1] = uintToString(allCharacterKeys.indexOf(path[1]))\r\n          break\r\n        case \"weapon\":\r\n          path[0] = \"w\"\r\n          break\r\n        case \"artifact\":\r\n          path[0] = \"a\"\r\n          path[1] = uintToString(allArtifactSets.indexOf(path[1]))\r\n          break\r\n        default: return false\r\n      }\r\n      return true\r\n    })\r\n    return result\r\n  },\r\n  decode: (pathvalues) => {\r\n    const conditionalValues = { weapon: {}, artifact: {}, character: {} }\r\n    for (const { path, value } of pathvalues) {\r\n      switch (path[0]) {\r\n        case \"c\":\r\n          path[0] = \"character\"\r\n          path[1] = allCharacterKeys[stringToUInt(path[1])]\r\n          break\r\n        case \"w\":\r\n          path[0] = \"weapon\"\r\n          break\r\n        case \"a\":\r\n          path[0] = \"artifact\"\r\n          path[1] = allArtifactSets[stringToUInt(path[1])]\r\n          break\r\n        default:\r\n          continue\r\n      }\r\n      const last = path.pop()\r\n      let current = conditionalValues\r\n      for (const key of path) {\r\n        const next = current[key] ?? {}\r\n        current[key] = next\r\n        current = next\r\n      }\r\n      value[0] = parseFloat(value[0])\r\n      current[last] = value\r\n    }\r\n    return conditionalValues\r\n  }\r\n})\r\nconst weaponV2 = object({\r\n  key: string,\r\n  levelKey: string,\r\n  refineIndex: uint(1),\r\n  overrideMainVal: float,\r\n  overrideSubVal: float,\r\n}, {\r\n  encode: value => {\r\n    const level = value.level\r\n    const ascIndex = ascensionMaxLevel.findIndex(maxLevel => level <= maxLevel)\r\n    const ascension = ascIndex < value.ascension ? \"A\" : \"\"\r\n    value.levelKey = `L${level}${ascension}`\r\n    value.overrideMainVal = 0\r\n    value.overrideSubVal = 0\r\n    return value\r\n  }, decode: object => {\r\n    const levelKey = object.levelKey\r\n    delete object.levelKey\r\n    delete object.overrideMainVal\r\n    delete object.overrideSubVal\r\n    const [, lvla] = levelKey.split(\"L\")\r\n    const level = parseInt(lvla)\r\n    const ascension = ascensionMaxLevel.findIndex(maxLevel => level <= maxLevel)\r\n    const addAsc = lvla.includes(\"A\")\r\n    if (level < 0 || level > 90 || ascension < 0) {\r\n      object.level = 1\r\n      object.ascension = 0\r\n    } else {\r\n      object.level = level\r\n      object.ascension = ascension + (addAsc ? 1 : 0)\r\n    }\r\n    return object\r\n  }\r\n})\r\nconst characterV2 = object({\r\n  characterKey,\r\n  hitMode,\r\n  reactionMode,\r\n  constellation: uint(1),\r\n  overrideLevel: uint(2),\r\n  levelKey: string,\r\n  infusionAura: element,\r\n  talentLevelKeys: object({ auto: uint(1), skill: uint(1), burst: uint(1) }),\r\n  baseStatOverrides: sparse(string, float),\r\n  weapon: weaponV2,\r\n  conditionalValues,\r\n  reserved: array(uint(1)),\r\n}, {\r\n  encode: (value) => {\r\n    const roundedLevel = Math.round(value.level / 10) * 10 // Nearest level\r\n    const maxLevel = ascensionMaxLevel[value.ascension]\r\n    value.levelKey = `L${roundedLevel}${roundedLevel === maxLevel ? \"\" : \"A\"}`\r\n    if (roundedLevel === value.level) value.overrideLevel = 0\r\n    else value.overrideLevel = value.level\r\n\r\n    if (value.characterKey === \"traveler\")\r\n      value.reserved = [elements.indexOf(value.elementKey)]\r\n    else\r\n      value.reserved = []\r\n    return value\r\n  },\r\n  decode: (value) => {\r\n    const isAscended = value.levelKey.slice(-1) === \"A\"\r\n    const levelString = isAscended ? value.levelKey.slice(1, -1) : value.levelKey.slice(1)\r\n    value.level = parseInt(levelString)\r\n    switch (value.level) {\r\n      case 1: value.ascension = 0; break\r\n      case 20: value.ascension = 0; break\r\n      case 40: value.ascension = 1; break\r\n      case 50: value.ascension = 2; break\r\n      case 60: value.ascension = 3; break\r\n      case 70: value.ascension = 4; break\r\n      case 80: value.ascension = 5; break\r\n      case 90: value.ascension = 6; break\r\n    }\r\n    if (isAscended) {\r\n      value.ascension += 1\r\n    }\r\n    if (value.baseStatOverrides.characterLevel) {\r\n      value.level = value.baseStatOverrides.characterLevel\r\n      delete value.baseStatOverrides.characterLevel\r\n    }\r\n    if (value.baseStatOverrides.weaponLevel) {\r\n      value.weapon.level = value.baseStatOverrides.weaponLevel\r\n      delete value.baseStatOverrides.weaponLevel\r\n    }\r\n    if (value.overrideLevel) {\r\n      value.level = value.overrideLevel\r\n    }\r\n    delete value.overrideLevel\r\n    delete value.levelKey\r\n\r\n    if (value.characterKey === \"traveler\") {\r\n      value.elementKey = elements[value.reserved[0]] ?? \"anemo\"\r\n    }\r\n    delete value.reserved\r\n    return value\r\n  },\r\n})\r\n\r\nconst flexV2 = object({\r\n  artifacts: array(artifact),\r\n  character: characterV2,\r\n})\r\n\r\nexport const schemas = {\r\n  flexV2\r\n}\r\n// For testing purpose only, no need to maintain strict ordering\r\nexport const constants = {\r\n  reactionModes: [null, ...allReactionModes], stats\r\n}\r\n","import { database } from \"../Database/Database\";\r\nimport { validateFlexArtifact, validateFlexCharacter } from \"../Database/validation\";\r\nimport { IArtifact, IFlexArtifact } from \"../Types/artifact\";\r\nimport { ICharacter, IFlexCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { decode, encode } from \"./CodingUtil\";\r\nimport { schemas } from \"./Schemas\";\r\n\r\nexport function createFlexObj(characterKey: CharacterKey) {\r\n  const character = database._getChar(characterKey)\r\n  if (!character) return null\r\n\r\n  const artifacts = Object.values(character.equippedArtifacts)\r\n    .filter(art => art)\r\n    .map(id => database._getArt(id)!)\r\n\r\n  return _createFlexObj(character, artifacts)\r\n}\r\n\r\n// TODO: Remove this when all test URLs are converted to new format\r\nexport function _createFlexObj(character: ICharacter, artifacts: IArtifact[]) {\r\n  try {\r\n    return \"v=2&d=\" + encode({ character, artifacts }, schemas.flexV2)\r\n  } catch (error) {\r\n    if (process.env.NODE_ENV === \"development\")\r\n      console.error(`Fail to encode data on path ${error.path ?? []}: ${error}`)\r\n    return null\r\n  }\r\n}\r\n\r\nexport function parseFlexObj(string: string): [FlexObj, number] | undefined {\r\n  const parameters = Object.fromEntries(string.split('&').map(s => s.split('=')))\r\n\r\n  try {\r\n    switch (parseInt(parameters.v)) {\r\n      case 2: return [parseFlexObjFromSchema(parameters.d, schemas.flexV2), 2]\r\n      default: return\r\n    }\r\n  } catch (error) {\r\n    if (process.env.NODE_ENV === \"development\")\r\n      console.error(`Fail to encode data on path ${error.path ?? []}: ${error}`)\r\n    return\r\n  }\r\n}\r\n\r\nfunction parseFlexObjFromSchema(string: string, schema: any) {\r\n  const decoded = decode(string, schema) as { character: IFlexCharacter, artifacts: IFlexArtifact[] }\r\n  const character = validateFlexCharacter(decoded.character)\r\n  const artifacts = decoded.artifacts.map((art, i) => validateFlexArtifact(art, ``).artifact)\r\n\r\n  artifacts.forEach(artifact => {\r\n    artifact.location = character.characterKey\r\n  })\r\n  return {\r\n    artifacts, character\r\n  }\r\n}\r\n\r\ntype FlexObj = { character: ICharacter, artifacts: IArtifact[] }","import { Alert, Button, Card, Container, Form, InputGroup, Toast } from \"react-bootstrap\";\r\nimport { Redirect, useLocation } from \"react-router-dom\";\r\nimport CharacterDisplayCard from \"../Character/CharacterDisplayCard\";\r\nimport '../StatDependency'\r\nimport { createFlexObj, parseFlexObj, _createFlexObj } from \"./FlexUtil\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faLink } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function TestDisplay() {\r\n  const location = useLocation()\r\n  const searchStr = location.search\r\n  if (searchStr) {\r\n    const flexResult = parseFlexObj(searchStr.substring(1))\r\n    if (!flexResult) return <Redirect to={`/`} />\r\n    const [{ character, artifacts }, version] = flexResult\r\n    character.artifacts = artifacts // TODO: Decouple artifacts and character\r\n    if (version !== 2)\r\n      return <Redirect to={`/flex?${_createFlexObj(character, artifacts)}`} />\r\n    return <Display character={character} />\r\n  } else {\r\n    const characterKey = (location as any).characterKey\r\n    if (!characterKey) return <Redirect to={`/`} />\r\n    const flexObj = createFlexObj(characterKey)\r\n    if (!flexObj) return <Redirect to={`/`} />\r\n    window.scrollTo(0, 0)//sometimes the window isnt scrolled to the top on redirect.\r\n    return <Redirect to={`/flex?${flexObj}`} />\r\n  }\r\n}\r\nfunction Display({ character }) {\r\n  const [toast, settoast] = useState(false)\r\n  const url = window.location.href\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(url)\r\n    settoast(true)\r\n  }\r\n  const isUpToDate = false\r\n  return <Container className=\"my-2\">\r\n    <Toast onClose={() => settoast(false)} show={toast} delay={3000} autohide style={{\r\n      position: 'absolute',\r\n      top: 50,\r\n      right: 50,\r\n    }}>\r\n      <Toast.Header><b className=\"mr-auto\">Genshin Optimizer</b></Toast.Header>\r\n      <Toast.Body>URL copied to clipboard.</Toast.Body>\r\n    </Toast>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"p-2\">\r\n        <InputGroup className=\"mb-0\">\r\n          <InputGroup.Prepend>\r\n            <Button onClick={copyToClipboard}>\r\n              <span><FontAwesomeIcon icon={faLink} /> Copy URL to clipboard</span>\r\n            </Button>\r\n          </InputGroup.Prepend>\r\n          <Form.Control readOnly value={window.location.href} onClick={e => e.target.select()} />\r\n        </InputGroup>\r\n        {isUpToDate && <Alert variant=\"warning\" className=\"py-2 mt-2 mb-0\">This URL is generated on an older database version of Genshin Optimizer. The character data below might not be displayed as intended.</Alert>}\r\n      </Card.Body>\r\n    </Card>\r\n    <CharacterDisplayCard character={character} />\r\n  </Container>\r\n}"],"sourceRoot":""}