{"version":3,"file":"static/js/292.bab52f6c.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactSetDropdown.tsx","Components/TextButton.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Skeleton, Typography } from \"@mui/material\";\r\nimport React, { Suspense, useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n  titleTransKey?: string,\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, titleTransKey, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? (titleTransKey && t(titleTransKey)) ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <Suspense key={setKey} fallback={<MenuItem><Skeleton variant=\"text\" width={100} /></MenuItem>}>\r\n        <MenuItem onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n          <ListItemIcon>\r\n            <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n          </ListItemIcon>\r\n          <ListItemText>\r\n            {artifactSheets?.[setKey]?.name}\r\n          </ListItemText>\r\n        </MenuItem >\r\n      </Suspense>)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport InfoTooltip from '../../../Components/InfoTooltip';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <InfoTooltip title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>} />\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport StatIcon, { uncoloredEleIcons } from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact } from '../Database/imports/parse';\r\nimport { validateArtifact } from '../Database/imports/validate';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableEditSetSlot: disableEditSlotProp = false }:\r\n  { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableEditSetSlot?: boolean }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  const disableEditSetSlot = disableEditSlotProp || !!artifact?.location\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n\r\n  const theme = useTheme();\r\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\r\n  const color = artifact\r\n    ? element ?? \"success\"\r\n    : \"primary\"\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\r\n          {/* Left column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} disabled={disableEditSetSlot} />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={disableEditSetSlot || !sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={disableEditSetSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={element ? uncoloredEleIcons[element] : (artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined)}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\r\n                    <ListItemText>{KeyMap.getArtStr(mainStatK)}</ListItemText>\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                        setModalShow(true)\r\n                        ReactGA.modalview('/artifact/how-to-upload')\r\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\r\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\r\n          </Grid>}\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.updateArt(editorArtifact!, old!.id);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.createArt(artifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["ArtifactSetDropdown","selectedSetKey","onChange","artifactSetsByRarity","hasUnselect","titleTransKey","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","disabled","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","Suspense","fallback","variant","width","sx","fontSize","DisabledButton","styled","Button","theme","backgroundColor","palette","primary","dark","text","secondary","TextButton","children","ArtifactRarityDropdown","rarity","filter","DropdownButton","MenuItem","ArtifactSlotDropdown","slotKey","artifactSlotIcon","undefined","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","key","CustomNumberTextField","value","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","useEffect","toString","TextField","type","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","Trans","xs","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","a","b","unit","KeyMap","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","Box","display","ButtonGroup","size","StatIcon","whiteSpace","allSubstats","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","v","newValue","cacheValueString","artifactSubstatRollCorrection","clamp","p","SqBadge","count","sort","val","component","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","image","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableEditSetSlot","disableEditSlotProp","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","useTheme","grmd","useMediaQuery","breakpoints","up","element","allElementsWithPhy","ele","Skeleton","CardHeader","flexDirection","gap","columns","mb","id","label","mr","my","margin","l","getSlotName","ImgIcon","slotIcons","uncoloredEleIcons","mainStatK","alignItems","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","icon","faQuestionCircle","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","Add","updateArt","createArt","confirm","process","Update"],"sourceRoot":""}