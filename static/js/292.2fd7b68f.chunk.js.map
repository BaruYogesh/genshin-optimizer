{"version":3,"file":"static/js/292.2fd7b68f.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <BootstrapTooltip placement=\"top\" title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>}>\r\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\r\n        </BootstrapTooltip>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact } from '../Database/imports/parse';\r\nimport { validateArtifact } from '../Database/imports/validate';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false }: { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <Grid container spacing={1} sx={{ mb: 1 }}>\r\n          {/* Left column */}\r\n          <Grid item xs={12} md={6} lg={6} sx={{\r\n            // select all excluding last\r\n            \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n          }}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\r\n                    <ListItemText>{KeyMap.getArtStr(mainStatK)}</ListItemText>\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                        setModalShow(true)\r\n                        ReactGA.modalview('/artifact/how-to-upload')\r\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); allowEmpty ? reset() : setShow(false) }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["ArtifactRarityDropdown","rarity","onChange","filter","props","t","useTranslation","DropdownButton","title","stars","color","map","MenuItem","disabled","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","artifactSlotIcon","undefined","selected","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","key","CustomNumberTextField","value","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","toString","TextField","type","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","BootstrapTooltip","placement","Typography","variant","Trans","i18nKey","Box","component","FontAwesomeIcon","icon","faQuestionCircle","cursor","xs","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","a","b","unit","KeyMap","rollNum","length","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","display","ButtonGroup","size","width","StatIcon","whiteSpace","allSubstats","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","TextButton","v","i","newValue","cacheValueString","artifactSubstatRollCorrection","Button","clamp","p","SqBadge","count","sort","val","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ArtifactSheet","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","image","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","text","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","Object","entries","chosen","resultMainStatVal","every","other","add","unknownText","name","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","styled","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","artifactSheets","usePromise","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","useMemo","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","Suspense","fallback","Skeleton","CardHeader","pt","mb","lg","ArtifactSetDropdown","selectedSetKey","id","label","mr","my","margin","l","keys","getSlotName","ImgIcon","slotIcons","mainStatK","flexDirection","gap","alignItems","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","maxWidth","pl","CircularProgress","ArtifactCard","artifactObj","Add","updateArt","createArt","confirm","process","Update"],"sourceRoot":""}