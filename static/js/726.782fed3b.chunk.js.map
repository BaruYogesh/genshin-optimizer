{"version":3,"file":"static/js/726.782fed3b.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Data/SheetUtil.tsx","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nexport const infusionNode = stringPrio(\r\n  input.infusion.nonOverridableSelf,\r\n  input.infusion.team,\r\n  input.infusion.overridableSelf)\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, prod, greaterEq, naught } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n        [i,\r\n        prod(i, datamine.constellation2.blossomDmgInc)]\r\n        )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto, \r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: trm(\"blossomCD\"),\r\n        value: datamine.skill.blossomCd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1EnemyHp,\r\n          path: condP1EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: {\r\n            belowHp: {\r\n              fields: [{\r\n                node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condSkillInField,\r\n          path: condSkillInFieldPath,\r\n          name: st(\"activeCharField\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            skillInField: {\r\n              fields: [{\r\n                node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6Crystallize,\r\n          path: condC6CrystallizePath,\r\n          name: st(\"protectedByShieldCrystal\"),\r\n          canShow: greaterEq(input.constellation, 6, equal(condSkillInField, \"skillInField\", 1)),\r\n          teamBuff: true,\r\n          states: {\r\n            c6Crystallize: {\r\n              fields: [{\r\n                node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\"}),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condBurstUsed,\r\n          path: condBurstUsedPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            burstUsed: {\r\n              fields: [{\r\n                node: p2Burst_eleMas\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2Stacks,\r\n          path: condC2StacksPath,\r\n          name: trm(\"c2Stacks\"),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i => \r\n            [i, {\r\n              name: st(\"stack\", { count: i }),\r\n              fields: [{\r\n                node: c2_burst_dmgInc\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: matchFull(\"rush\", condCoil, constant(elementKey), constant(\"physical\"))\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease, { key: \"_\" })\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n            textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => (datamine.skill.atkDecrease[data.get(input.total.skillIndex).value] * 100).toFixed(1),\r\n        unit: \"%\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.atkDecreaseDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.7\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: trm(\"normCryoInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: atk_\r\n      }, {\r\n        canShow: (data) => data.get(condCoil).value !== undefined && data.get(input.asc).value >= 1,\r\n        text: sgt(\"duration\"),\r\n        value: datamine.passive1.duration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, equal(\"rush\", condCoil, 1)),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"critRateBonus\"),\r\n        value: datamine.passive1.critRateInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        text: trm(\"aoeRangeBonus\"),\r\n        value: datamine.passive1.aoeInc * 100,\r\n        unit: \"%\"\r\n      }, {\r\n        node: burst_critRate_\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1.name\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: nodeC6CritDMG\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 1 && data.get(condBurst).value === \"on\",\r\n          false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 2 && data.get(condBurst).value === \"on\",\r\n          false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          name: trm(\"c4.name\"),\r\n          teamBuff: true,\r\n          value: condC4,\r\n          path: condC4Path,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeC4Atk\r\n              }, {\r\n                node: nodeC4Def\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{ node: nodeC6CritDMG }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(`skill.skillParams.3`),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(`skill.skillParams.4`),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n      },]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.burst.cd,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.8\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }), },\r\n        { node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }), },\r\n        { node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }), },\r\n        {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }\r\n      ], {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` }) },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        },\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [\r\n        { node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }) },\r\n        { node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` }) },\r\n      ]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, []),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst c1Atk = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\n\r\nconst atkIncRatio = sum(subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" }), c1Atk)\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1Atk, input.base.atk))\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        // Press\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n      }, {\r\n        text: sgt(\"press.cd\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n      }, {\r\n        // Lvl 1\r\n        node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl1CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n      }, {\r\n        // Lvl 2\r\n        node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n      }, {\r\n        text: trm(\"skill.lvl2CD\"),\r\n        unit: \"s\",\r\n        value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(activeInAreaAtkDisp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }], undefined,\r\n          data => data.get(input.asc).value >= 4 && data.get(condInArea).value === \"activeInArea\",\r\n          false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1Atk\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }], undefined,\r\n          data => data.get(input.constellation).value >= 6 && data.get(condInArea).value === \"activeInArea\",\r\n          true, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n        states: {\r\n          underHP: {\r\n            fields: [{\r\n              node: underHP\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc1 = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.fieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            name: \"Frost Field\",\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeAsc1\r\n            }]\r\n          },\r\n        }\r\n      }),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.enerCost,\r\n          }, {\r\n            text: \"Spirit Blades Summoned\",\r\n            value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n      }], {\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        description: tr(\"passive2.description\"),\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      }\r\n      ),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n          unit: 's'\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n      }], {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"afterUse.skill\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6DmgBonus,\r\n            }, {\r\n              node: nodeC6SpdBonus\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"takeDmg\"),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }]\r\n        ))\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6BelowPath, condC6Below] = cond(key, \"Constellation6Low\")\r\nconst [condC6AbovePath, condC6Above] = cond(key, \"Constellation6High\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6Below, \"on\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6Above, \"on\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            },\r\n            ]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ]\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        //Shield DMG Absorption\r\n        { node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }), },\r\n        { node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }), },\r\n        //Icy Paw DMG\r\n        { node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }), },\r\n        {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        },\r\n        //Press CD\r\n        {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        },\r\n        //Holding CD\r\n        {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        },\r\n      ],\r\n        //Cat's Tail Secret Menu (A1)\r\n        {\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: trm(`a1shielded`),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          header: conditionalHeader(\"passive1\", tr, passive1), description: tr(`passive1.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: nodeA1MoveSpeed,\r\n              }, {\r\n                node: nodeA1Stamina,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      ),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        { node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }), },\r\n        {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        teamBuff: true,\r\n        value: condC6Below,\r\n        path: condC6BelowPath,\r\n        name: trm(`c6below`),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condC6Above,\r\n          path: condC6AbovePath,\r\n          name: trm(`c6above`),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          header: conditionalHeader(\"constellation6\", tr, c6), description: tr(`constellation6.description`),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, []),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, []),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2skillDmg_ }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, []),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n              textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.8\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.8\"),\r\n            value: `${datamine.skill.pressCd}`,\r\n            unit: 's'\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: st(\"holdCD\"),\r\n            value: `${datamine.skill.holdCd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: 2,\r\n          },],\r\n          conditional: { // Grimheart\r\n            value: condGrimheart,\r\n            path: condGrimheartPath,\r\n            name: trm(\"skillC.name\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              \"stack1\": {\r\n                name: st(\"stack\", { count: 1 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"stack2\": {\r\n                name: st(\"stack\", { count: 2 }),\r\n                fields: [{\r\n                  node: def_,\r\n                }, {\r\n                  text: trm(\"skillC.grimheart.int\")\r\n                }, {\r\n                  text: tr(\"skill.skillParams.4\"),\r\n                  value: `${datamine.skill.grimheartDuration}`,\r\n                  unit: 's'\r\n                },]\r\n              },\r\n              \"consumed\": {\r\n                name: \"Consumed\",\r\n                fields: [{\r\n                  node: cryo_enemyRes_,\r\n                }, {\r\n                  node: physical_enemyRes_,\r\n                }, {\r\n                  text: sgt('duration'),\r\n                  value: 7,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n          }]\r\n        }]\r\n      },\r\n      burst: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: `${datamine.burst.cd}`,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.5\"),\r\n            value: `${datamine.burst.enerCost}`,\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 7,\r\n            unit: 's'\r\n          }],\r\n          conditional: { // Lightfall Sword\r\n            value: condLightfallSword,\r\n            path: condLightfallSwordPath,\r\n            name: trm(\"burstC.name\"),\r\n            header: conditionalHeader(\"burst\", tr, burst),\r\n            states: {\r\n              ...objectKeyMap(range(1, 30), i => ({\r\n                name: st(\"stack\", { count: i }),\r\n                fields: [{\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.start5\"),\r\n                }, {\r\n                  canShow: data => data.get(input.constellation).value >= 6,\r\n                  text: trm(\"burstC.addStacks\"),\r\n                }]\r\n              })),\r\n            }\r\n          }\r\n        }, {\r\n          conditional: { // Lightfall Sword (C4)\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4C.name\"),\r\n            header: conditionalHeader(\"constellation4\", tr, c4),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  text: trm(\"c4C.desc\")\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              canShow: (data) => data.get(input.asc).value >= 1,\r\n              node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value < 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2AoeIncrease\"),\r\n        value: 50,\r\n        unit: \"%\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 2,\r\n        text: st(\"charges\"),\r\n        value: 2,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condA4,\r\n          path: condA4Path,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n            fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 1, \r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\", \r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6, \r\n  equal(condAfterSkillBurst, \"afterSkillBurst\", \r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_skill_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\r\n        }], undefined, data => data.get(input.constellation).value >=4 && data.get(tally[\"geo\"]).value >= 2, true, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condAfterBurst,\r\n          path: condAfterBurstPath,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          name: st(\"afterUse.burst\"),\r\n          teamBuff: true,\r\n          states: {\r\n            afterBurst: {\r\n              fields: [{\r\n                node: afterBurst_def_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: p2_burst_dmgInc\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, customHealNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.bloodBlossomDuration,\r\n        unit: 's'\r\n      }], {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value > 1,\r\n        text: trm(\"constellation2.applyBloodBlossom\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n                node: critRate_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: 's'\r\n              }, {\r\n                text: sgt(\"cd\"),\r\n                value: 60,\r\n                unit: 's'\r\n              }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: `${datamine.skill.stamina}`,\r\n        unit: \"/s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          name: trm(\"c1CondName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: trm(\"c1PullSpeed\")\r\n              }, {\r\n                node: skill_dmg_\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 11,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          teamBuff: true,\r\n          name: st(\"opponentsField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: anemo_enemyRes_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          value: condC6,\r\n          path: condC6Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgRed_disp, {key: \"dmgRed_\" })\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: (data) => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: (data) => data.get(input.asc).value >= 4,\r\n        text: st(\"energyRegen\"),\r\n        value: datamine.passive2.energyRegen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(\"swirl\", condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n            textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n          : `${datamine.skill.cdHold}`,\r\n        unit: \"s\"\r\n      }], undefined, [\r\n        {\r\n          ...sectionTemplate(\"skill\", tr, skill, [{\r\n            node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n          }]),\r\n          fieldsHeader: { ...conditionalHeader(\"skill\", tr, skill), title: trm(\"skillPlunge\") }\r\n        },\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          value: condC2,\r\n          path: condC2Path,\r\n          name: trm(\"c2\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2: {\r\n              fields: [{\r\n                node: c2EleMas\r\n              }]\r\n            }\r\n          }\r\n        }), sectionTemplate(\"constellation2\", tr, c2, undefined, { // C2 Party\r\n          canShow: greaterEq(input.constellation, 2, unequal(input.activeCharKey, key, 1)),\r\n          value: condC2P,\r\n          path: condC2PPath,\r\n          teamBuff: true,\r\n          description: tr(\"constellation2.description\"),\r\n          name: st(\"activeCharField\"),\r\n          header: conditionalHeader(\"constellation2\", tr, c2),\r\n          states: {\r\n            c2p: {\r\n              fields: [{\r\n                node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, undefined, absorbableEle.map(eleKey =>\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, { // Poetics of Fuubutsu\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          // Only show the description once. Can't be truly blank or it will be filled in with a default.\r\n          description: eleKey === \"hydro\" ? tr(\"passive2.description\") : \" \",\r\n          name: trm(`a4.name_${eleKey}`),\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            swirl: {\r\n              fields: [{\r\n                node: asc4[`${eleKey}_dmg_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive2.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      )),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined, [\r\n        sectionTemplate(\"passive3\", tr, passive3, [{\r\n          node: passive\r\n        }], undefined, undefined, true, true),\r\n      ]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        // Crimson Momiji\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [\r\n              // { // TODO:\r\n              //   node: c6infusion\r\n              // },\r\n              {\r\n                canShow: data => data.get(c6infusion).value === elementKey,\r\n                text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n              }, {\r\n                node: c6NormDmg_\r\n              }, {\r\n                node: c6ChargedDmg_\r\n              }, {\r\n                node: c6PlungingDmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation6.duration,\r\n                unit: \"s\",\r\n              }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region:Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: { \r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n        {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, \r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        { \r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal`, variant:\"success\" }), \r\n        },\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, []),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, []),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [], {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        teamBuff: false,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, []),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\r\n      }, {\r\n        //Duration\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.constellation4.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        //Cooldown\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: datamine.constellation4.cooldown,\r\n        unit: \"s\"\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: st(\"brHits\", { count: 3 })\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        // A1 - After using Kamisato Art: Hyouka\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        // C4 - Hit by burst\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        description: st(\"constellation4.description\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"sprint.name\"),\r\n        img: sprint,\r\n        sections: [{\r\n          text: tr(\"sprint.description\"),\r\n          fields: [{\r\n            text: \"Activation Stamina Consumption\",\r\n            value: datamine.sprint.active_stam,\r\n          }, {\r\n            text: \"Stamina Drain\",\r\n            value: datamine.sprint.drain_stam,\r\n            unit: \"/s\",\r\n          }],\r\n          conditional: { //sprint\r\n            value: condAfterSprint,\r\n            path: condAfterSprintPath,\r\n            name: trm(\"afterSprint\"),\r\n            header: conditionalHeader(\"sprint\", tr, sprint),\r\n            states: {\r\n              afterSprint: {\r\n                fields: [{\r\n                  canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n                  text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.sprint.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }, {\r\n          conditional: {\r\n            // A4 - After sprint hit\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            value: condAfterApplySprint,\r\n            path: condAfterApplySprintPath,\r\n            name: trm(\"afterSprintCryo\"),\r\n            header: conditionalHeader(\"passive2\", tr, passive2),\r\n            states: {\r\n              afterApplySprint: {\r\n                fields: [{\r\n                  text: trm(\"staminaRestore\"),\r\n                  value: datamine.passive2.stamina,\r\n                }, {\r\n                  node: afterApplySprintCryo\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\",\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n      },]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }\r\n      ),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr:[\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n      subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n      input.total.atk,\r\n    ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: datamine.skill.illusionDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n            ...datamine.skill.dmgArr.map((_, i) => ({\r\n              node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n            })), {\r\n              text: st(\"incInterRes\"),\r\n            }, {\r\n              text: trm(\"skill.unableToAuto\"),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.stateDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"skill\", tr, skill, undefined, {\r\n          value: condSkillStacks,\r\n          path: condSkillStacksPath,\r\n          name: trm(\"skill.namisenStacks\"),\r\n          canShow: equal(condInSkill, \"on\", 1),\r\n          states: Object.fromEntries(range(1, 5).map(stacks => [\r\n            stacks, {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{\r\n                node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n              }, {\r\n                text: st(\"maxStacks\"),\r\n                value: data => data.get(input.constellation).value >= 2\r\n                  ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                  : datamine.skill.maxStacks\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }], undefined, data => data.get(input.asc).value >= 1 && data.get(condInSkill).value === \"on\",\r\n        false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n          value: condC1OppHp,\r\n          path: condC1OppHpPath,\r\n          name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n          canShow: greaterEq(input.constellation, 1, equal(condInSkill, \"on\", 1)),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }], undefined, data => data.get(input.constellation).value >= 6 && data.get(condInSkill).value === \"on\",\r\n        false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4AfterBurst,\r\n          path: condC4AfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          teamBuff: true,\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c4_atkSPD_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation4.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i],\r\n              { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n            ),\r\n            textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], { // Recast (A1)\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: st(\"brHits\", { count: 8 })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.cost,\r\n      }], { // Cast (A4)\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      }),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n            }, {\r\n              text: tr(\"auto.skillParams.4\"),\r\n              value: datamine.charged.stamina\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.mineDuration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: `${datamine.burst.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: `${datamine.skill.duration}s`,\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: `${datamine.skill.cd}s`,\r\n      }], {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.5\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }\r\n      ]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.1\"),\r\n            value: datamine.burst.duration,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, sprint, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: trm(\"bubbleDuration\"),\r\n        value: datamine.burst.bubbleDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sprint: talentTemplate(\"sprint\", tr, sprint, [{\r\n        text: \"Activation Stamina Consumption\",\r\n        value: datamine.sprint.active_stam,\r\n      }, {\r\n        text: \"Stamina Drain\",\r\n        value: datamine.sprint.drain_stam,\r\n        unit: \"/s\",\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        canShow: data => data.get(input.asc).value >= 1,\r\n        text: trm(\"phantomDuration\"),\r\n        value: datamine.passive1.phantomDuration,\r\n        unit: \"s\"\r\n      }]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: hydro_dmg_\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { \r\n    //Nothing\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_ : skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n  passive3: {\r\n    //Nothing\r\n  },\r\n  constellation1: {\r\n    //Nothing\r\n  },\r\n  constellation2: {\r\n    //Nothing\r\n  },\r\n  constellation4: {\r\n    //Nothing\r\n  },\r\n  constellation6: {\r\n    //Nothing\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodeC4CryoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4GeoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4PyroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4AnemoResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4HydroResBonus_ = equal(condC4, \"on\", percent(0.10))\r\nconst nodeC4ElecResBonus_ = equal(condC4, \"on\", percent(0.10))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),    \r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_  :nodeA4GeoDmgBonus_,\r\n      geo_res_  :nodeC4GeoResBonus_,\r\n      cryo_res_ :nodeC4CryoResBonus_,\r\n      pyro_res_ :nodeC4PyroResBonus_,\r\n      anemo_res_:nodeC4AnemoResBonus_,\r\n      hydro_res_:nodeC4HydroResBonus_,\r\n      electro_res_ :nodeC4ElecResBonus_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` }) } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 1,\r\n              text: trm(\"aoeGems\"),\r\n            }]\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n          }, {\r\n            canShow: data => data.get(input.asc).value < 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            canShow: data => data.get(input.asc).value >= 1,\r\n            text: tr(\"auto.skillParams.3\"),\r\n            value: trm(\"starJadeStaminaCost\"),\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple conditionals.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [\r\n            { node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }), }, \r\n            { node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }), }, \r\n            {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: datamine.burst.cd,\r\n              unit: \"s\"\r\n            } ,\r\n            {\r\n              canShow: data => data.get(input.constellation).value >= 2,\r\n              text: trm(\"skillReset\"),\r\n            }\r\n          ],\r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condA4,\r\n            path: condA4Path,\r\n            name: trm(\"a4toggle\"),\r\n            canShow: greaterEq(input.asc, 4, 1),\r\n            header: conditionalHeader(\"passive2\", tr, passive2), description: tr(`passive2.description`),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeA4GeoDmgBonus_\r\n                }, {\r\n                  text: trm(\"a4duration\"),\r\n                  value: datamine.passive2.duration,\r\n                  unit: \"s\"\r\n                }]\r\n              }\r\n            }\r\n          } \r\n        }, {\r\n          conditional: {\r\n            teamBuff: true,\r\n            value: condC4,\r\n            path: condC4Path,\r\n            name: trm(\"c4toggle\"),\r\n            canShow: greaterEq(input.constellation, 4, 1),\r\n            header: conditionalHeader(\"constellation4\", tr, c4), description: tr(`constellation4.description`),\r\n            states: {\r\n              on: {\r\n                fields: [\r\n                  { node:nodeC4CryoResBonus_ },\r\n                  { node:nodeC4GeoResBonus_ } ,\r\n                  { node:nodeC4PyroResBonus_ } ,\r\n                  { node:nodeC4AnemoResBonus_ } ,\r\n                  { node:nodeC4HydroResBonus_ } ,\r\n                  { node:nodeC4ElecResBonus_ } ,\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }\r\n      ],\r\n      ),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC4dmg = customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } })\r\n\r\nconst geoShieldStrength = { \"customBonus\": { \"shield_\": percent(0.5) } }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\", geoShieldStrength),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: shieldNode(\"def\", percent(datamine.passive1.shield), 0, geoShieldStrength)\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n            unit: '/s'\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.duration,\r\n            unit: 's'\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [\r\n        {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [\r\n        { node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }), },\r\n        { node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }), },\r\n        {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }\r\n      ], {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [\r\n        {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }\r\n      ]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        node: nodeC2ChargeDMG\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        text: trm(\"c2Stam\"),\r\n        value: datamine.constellation2.chargeStamina * 100,\r\n        unit: \"%\"\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n      }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, constant(0.2)))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n              textSuffix: st(\"brHits\", { count: 2 })\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          },\r\n          {\r\n            node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.skill.duration,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.skill.cd,\r\n            unit: 's'\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }]\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nfunction burstResolve(atkType: number[], initial = false) {\r\n  let resolveBonus = initial ? datamine.burst.resolveBonus1 : datamine.burst.resolveBonus2\r\n\r\n  return customDmgNode(prod(sum(subscript(input.total.burstIndex, atkType, { key: '_' }),\r\n    prod(subscript(input.total.burstIndex, resolveBonus.map(x => x), { key: '_' }),\r\n      lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0))), input.total.atk), 'burst', {\r\n    hit: {\r\n      ele: constant('electro')\r\n    }, enemy: {\r\n      // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n      defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n    }\r\n  })\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n              textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: { // Cannot use talentTemplate because this has multiple sections.\r\n        name: tr(\"skill.name\"),\r\n        img: skill,\r\n        sections: [{\r\n          text: tr(\"skill.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n          }, {\r\n            text: tr(\"skill.skillParams.2\"),\r\n            value: `${datamine.skill.duration}s`,\r\n          }, {\r\n            text: tr(\"skill.skillParams.4\"),\r\n            value: `${datamine.skill.cd}s`,\r\n          }],\r\n          conditional: {\r\n            value: condSkillEye,\r\n            path: condSkillEyePath,\r\n            name: trm(\"skill.eye\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: {\r\n              skillEye: {\r\n                fields: [{\r\n                  node: skillEye_\r\n                }]\r\n              }\r\n            }\r\n          },\r\n        }, {\r\n          conditional: {\r\n            value: condSkillEyeTeam,\r\n            path: condSkillEyeTeamPath,\r\n            description: tr(\"skill.description\"),\r\n            teamBuff: true,\r\n            canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n            name: trm(\"skill.partyCost\"),\r\n            header: conditionalHeader(\"skill\", tr, skill),\r\n            states: Object.fromEntries(energyCosts.map(c => [c, {\r\n              name: `${c}`,\r\n              fields: [{\r\n                node: skillEyeTeamBurstDmgInc,\r\n              }]\r\n            }]))\r\n          }\r\n        }]\r\n      },\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.9\"),\r\n        value: `${datamine.burst.stam}`,\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.12\"),\r\n        value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.13\"),\r\n        value: `${datamine.burst.duration}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.14\"),\r\n        value: `${datamine.burst.cd}s`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.15\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }], {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: []\r\n        }]))\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        canShow: data => data.get(input.asc).value >= 4,\r\n        text: trm(\"a4.enerRest\"),\r\n        value: (data) => {\r\n          return (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100)\r\n        },\r\n        unit: \"%\"\r\n      }, {\r\n          node: passive2ElecDmgBonus,\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, unequal(input.activeCharKey, input.charKey, 1)),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n              unit: '/s'\r\n            }, {\r\n              text: tr(\"auto.skillParams.7\"),\r\n              value: datamine.charged.duration,\r\n              unit: 's'\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed) :\r\n          datamine.skill.pressCd,\r\n        unit: 's'\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.6\"),\r\n        value: (data) => data.get(input.asc).value >= 1 ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed) :\r\n          datamine.skill.holdCd,\r\n        unit: 's'\r\n      }], { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        header: conditionalHeader(\"skill\", tr, skill),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.0\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.1\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.2\")\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        textSuffix: tr(\"auto.skillParams.3\")\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.duration,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.cd,\r\n        unit: 's'\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        header: conditionalHeader(\"burst\", tr, burst),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }, [{\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }], undefined, undefined, false, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: greaterEq(input.asc, 4, 1),\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        header: conditionalHeader(\"passive2\", tr, passive2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        header: conditionalHeader(\"constellation2\", tr, c2),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        header: conditionalHeader(\"constellation4\", tr, c4),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n      }, {\r\n        text: trm(\"electroSigilPerProc\"),\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        value: datamine.constellation6.electroSigilGenerated\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 6,\r\n        text: st(\"cooldown\"),\r\n        value: datamine.constellation6.cd,\r\n        unit: \"s\"\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, min, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(datamine.passive2.crBonus, input.premod.critRate_),\r\n    datamine.passive2.maxBonus\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n    physical_enemyRes_: nodeC6PhysShred\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n              textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.6\"),\r\n              value: datamine.charged.stamina,\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }]),\r\n      burst: {\r\n        name: tr(\"burst.name\"),\r\n        img: burst,\r\n        sections: [{\r\n          text: tr(\"burst.description\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n          }, {\r\n            text: tr(\"burst.skillParams.3\"),\r\n            value: datamine.burst.cd,\r\n            unit: \"s\"\r\n          }, {\r\n            text: tr(\"burst.skillParams.4\"),\r\n            value: datamine.burst.cost,\r\n          }],\r\n          conditional: {\r\n            name: tr(\"constellation6.name\"),\r\n            header: conditionalHeader(\"constellation6\", tr, c6),\r\n            value: condC6,\r\n            path: condC6Path,\r\n            canShow: greaterEq(input.constellation, 6, 1),\r\n            states: {\r\n              on: {\r\n                fields: [{\r\n                  node: nodeC6PhysShred\r\n                }, {\r\n                  text: sgt(\"duration\"),\r\n                  value: datamine.constellation6.duration,\r\n                  unit: 's'\r\n                }]\r\n              }\r\n            }\r\n          }\r\n        }]\r\n      },\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        name: trm(\"a4.name\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        header: conditionalHeader(\"passive1\", tr, passive1),\r\n        // Hide for Rosaria\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, key, 1)),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.skillIndex, datamine.skill.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.s_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.skillIndex, datamine.skill.heal)\r\n    )),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: customHealNode(sum(\r\n      prod(sum(\r\n        subscript(input.total.burstIndex, datamine.burst.heal_, { key: '_' }),\r\n        greaterEq(input.constellation, 2, equal(condC2, \"on\", percent(datamine.c2.nc_heal_))),\r\n      ), input.total.hp),\r\n      subscript(input.total.burstIndex, datamine.burst.heal)\r\n    )),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n          }, {\r\n            text: tr(\"auto.skillParams.5\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.6\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.7\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive: talentTemplate(\"passive\", tr, passive, [{\r\n        node: passiveHeal_\r\n      }, {\r\n        node: passiveCritRate_\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, [{\r\n        node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n      }]),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {}\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, [{ node: c4AtkSpd_ }]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, undefined, {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      }),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, lookup, naught, sum, min, subscript } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas)))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n        unit: \"s\",\r\n      }], {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }], {\r\n          value: condC2SkillStack,\r\n          path: condC2SkillStackPath,\r\n          name: trm(\"c2Cond\"),\r\n          states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n            name: st(\"seconds\", { count: stack * 0.5 }),\r\n            fields: [{\r\n              node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n            }]\r\n          }]))\r\n        }, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n      }, {\r\n        text: trm(\"burstHits\"),\r\n        value: datamine.burst.darumaHits,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"success\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1Text\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          node: infoMut(c6_daruma_dmg_inc,\r\n            { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc,\r\n            { key: `char_${key}:c6DarumaHealInc`, variant: \"success\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, undefined, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4)\r\n      ]),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6)\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { infoMut, lookup, equal, percent, prod, subscript, greaterEq } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"pressDuration\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"pressQuota\"),\r\n        value: datamine.skill.trigger,\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        text: trm(\"holdDuration\"),\r\n        value: datamine.skill.durationHold,\r\n        unit: \"s\"\r\n      }, {\r\n        text: trm(\"holdQuota\"),\r\n        value: datamine.skill.triggerHold,\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.cdHold,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }], {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          value: condAsc4,\r\n          path: condAsc4Path,\r\n          teamBuff: true,\r\n          name: trm(\"asc4Cond\"),\r\n          states: {\r\n            press: {\r\n              name: \"Press\",\r\n              fields: [{\r\n                node: nodeAsc4Press_skill_dmg_\r\n              }, {\r\n                node: nodeAsc4Press_burst_dmg_\r\n              }]\r\n            },\r\n            hold: {\r\n              name: \"Hold\",\r\n              fields: [{\r\n                node: nodeAsc4Hold_normal_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_charged_dmg_\r\n              }, {\r\n                node: nodeAsc4Hold_plunging_dmg_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n            name: i.toString(),\r\n            fields: [{ node: c4Inc }]\r\n          }))\r\n        }), {\r\n        ...sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: tr(\"constellation6.description\")\r\n        }], undefined, data => data.get(input.constellation).value >= 6, true, true),\r\n        fieldsDescription: \"\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }], undefined, data => data.get(input.constellation).value >= 2, true, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n    equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n    greaterEq(input.asc, 4,\r\n      prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: (data) => data.get(input.constellation).value >= 1,\r\n        text: st(\"charges\"),\r\n        value: 2\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2 ? `${datamine.burst.duration}s + 2` : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }, [\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condAbsorption,\r\n          path: condAbsorptionPath,\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6Bonus[`${eleKey}_dmg_`],\r\n            }],\r\n          }]))\r\n        }),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: greaterEq(input.asc, 1, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, key, 1)),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [\r\n          {\r\n            text: tr(\"auto.fields.normal\"),\r\n            fields: datamine.normal.hitArr.map((_, i) =>\r\n            ({\r\n              node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            }))\r\n          }, {\r\n            text: tr(\"auto.fields.charged\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.riptide\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n              textSuffix: st(\"brHits\", { count: 3 })\r\n            }, {\r\n              node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n            }, {\r\n              text: tr(\"auto.skillParams.10\"),\r\n              value: (data) => data.get(input.asc).value >= 1 ? datamine.passive1.durationExt + datamine.riptideDuration : datamine.riptideDuration,\r\n              unit: \"s\"\r\n            }]\r\n          }, {\r\n            text: tr(\"auto.fields.plunging\"),\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n            }, {\r\n              node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n            }]\r\n          }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.10\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.11\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.preemptiveCd1 -\r\n          (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)} - ${datamine.skill.preemptiveCd2 -\r\n          (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}` : `${datamine.skill.preemptiveCd1} -\r\n          ${datamine.skill.preemptiveCd2}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.12\"),\r\n        value: (data) => data.get(input.constellation).value >= 1 ? `${datamine.skill.maxCd - (datamine.skill.maxCd *\r\n          datamine.constellation1.cdRed)}` : `${datamine.skill.maxCd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: `${datamine.burst.cd}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: `${datamine.burst.enerCost}`,\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: `${datamine.burst.enerReturned}`,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, undefined, undefined,\r\n        [sectionTemplate(\"passive3\", tr, passive3, [{ node: nodePassive }], undefined, undefined, true, true)]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.minPyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n          { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.skill.shieldDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.pyroShield,\r\n          { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n        ),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.shieldDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n          : datamine.burst.scorchingDuration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1BarrierStacks,\r\n          path: condP1BarrierStacksPath,\r\n          name: trm(\"a1\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n            stacks,\r\n            {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{\r\n                node: p1_shield_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }, {\r\n                text: st(\"triggerCD\"),\r\n                value: datamine.passive1.cd,\r\n                unit: \"s\",\r\n                fixed: 1\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4AfterBurst,\r\n          path: condC4AfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                text: st(\"energyRegen\"),\r\n                value: datamine.c4.energyRestore,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6AfterBarrier,\r\n          path: condC6AfterBarrierPath,\r\n          name: trm(\"c6\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c6_normal_dmg_,\r\n              }, {\r\n                node: c6_charged_dmg_,\r\n              }, {\r\n                node: c6_plunging_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n    }, {\r\n      node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"skill.skillParams.5\"),\r\n      value: datamine.skill.maxCd,\r\n      unit: \"s\"\r\n    }, {\r\n      canShow: data => data.get(input.constellation).value >= 4,\r\n      text: trm(\"c1\"),\r\n      value: 10,\r\n      unit: \"%\"\r\n    }]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"burst.skillParams.2\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.3\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: tr(\"burst.skillParams.4\"),\r\n      value: datamine.burst.enerCost,\r\n    }], {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }, [\r\n      // C6 anemo\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        description: tr(\"constellation6.description.0\"),\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      // C6 elemental self-display\r\n      sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n          { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        undefined,\r\n        data => data.get(input.constellation).value >= 6\r\n          && data.get(condBurstAbsorption).value !== undefined\r\n          && data.get(equal(target.charKey, key, 1)).value === 1,\r\n        false,\r\n        true\r\n      ),\r\n      // C6 elemental team-display\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        description: tr(\"constellation6.description.1\"),\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: nodesC6[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n      node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n    }]),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { input, target } from '../../../../Formula'\r\nimport { normalSrc, talentTemplate, sectionTemplate } from '../../CharacterSheet'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { range } from '../../../../Util/Util'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n    }, {\r\n      text: tr(\"skill.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n        : datamine.skill.duration,\r\n      unit: \"s\",\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: data => data.get(input.asc).value >= 1\r\n        ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n        : datamine.skill.cd,\r\n      unit: \"s\",\r\n    }], undefined, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"constellation2\", tr, c2, [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.dmg,\r\n        { key: `sheet_gen:skillDMG` }\r\n      ),\r\n      textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n    }, {\r\n      text: tr(\"burst.skillParams.1\"),\r\n      value: data => data.get(input.constellation).value >= 6\r\n        ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n        : datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1BurstArea,\r\n        path: condC1BurstAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n            }, {\r\n              text: st(\"incInterRes\"),\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4BurstHit,\r\n        path: condC4BurstHitPath,\r\n        name: st(\"hitOp.burst\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n          stack,\r\n          {\r\n            name: st(\"hits\", { count: stack }),\r\n            fields: [{\r\n              node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n            }]\r\n          }\r\n        ]))\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }], undefined, data => data.get(input.constellation).value >= 6, false, true),\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n      node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n    }]),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { normalSrc, sectionTemplate, talentTemplate } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport { burst, c1, c2, c3, c4, c5, c6, passive1, passive2, skill } from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n      ...sectionTemplate(\"auto\", tr, auto,\r\n        datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n        }))\r\n      ),\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      ...sectionTemplate(\"auto\", tr, auto, [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n      ),\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }]),\r\n    skill: talentTemplate(\"skill\", tr, skill, [{\r\n      node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n    }, {\r\n      text: trm(\"skill.amuletGenAmt\"),\r\n      value: data => data.get(input.constellation).value >= 1\r\n        ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n        : datamine.skill.amulets\r\n    }, {\r\n      text: tr(\"skill.skillParams.4\"),\r\n      value: datamine.skill.amuletDuration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.skill.cd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }], {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }, [\r\n      sectionTemplate(\"passive1\", tr, passive1, [{\r\n        text: tr(\"passive1.description\")\r\n      }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n      sectionTemplate(\"passive2\", tr, passive2, [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }], undefined, data => data.get(input.asc).value >= 4, false, true),\r\n    ]),\r\n    burst: talentTemplate(\"burst\", tr, burst, [{\r\n      node: infoMut(dmgFormulas.burst.pressDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n      )\r\n    }, {\r\n      node: infoMut(dmgFormulas.burst.thunderDmg,\r\n        { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n      )\r\n    }, {\r\n      text: trm(\"burst.thunderCd\"),\r\n      value: datamine.burst.thunderCd,\r\n      unit: \"s\",\r\n      fixed: 1\r\n    }, {\r\n      node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n    }, {\r\n      text: sgt(\"duration\"),\r\n      value: datamine.burst.duration,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: datamine.burst.cd,\r\n      unit: \"s\"\r\n    }, {\r\n      text: sgt(\"energyCost\"),\r\n      value: datamine.burst.enerCost,\r\n    }], undefined, [\r\n      sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n        value: condC2Thunder,\r\n        path: condC2ThunderPath,\r\n        name: trm(\"c2.thunderHit\"),\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2Thunder_electro_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n        value: condC6After2Thunder,\r\n        path: condC6After2ThunderPath,\r\n        name: trm(\"c6.fallingThunder3\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c6_thunder_dmg_,\r\n                { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n              )\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.constellation6.energyRestore\r\n            }]\r\n          }\r\n        }\r\n      })\r\n    ]),\r\n    passive1: talentTemplate(\"passive1\", tr, passive1),\r\n    passive2: talentTemplate(\"passive2\", tr, passive2),\r\n    constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n    constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n    constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: burstC3 }]),\r\n    constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n    constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: skillC5 }]),\r\n    constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import card from './Traveler_Female_Card.jpg'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport geo, { data as geoData } from './geo'\r\nimport electro, { data as electroData} from './electro'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts';\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport data_gen_src from './data_gen.json'\r\nimport { CharacterData } from 'pipeline'\r\nimport { trans } from '../../SheetUtil'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n});\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport {  customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2) },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = {...c2Hit_anemo_enemyRes_}\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = equal(condC6, \"takeDmg\", datamine.constellation6.res_)\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n  [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }})),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption }}), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey),\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, normalSrc(data_gen.weaponTypeKey), [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }],\r\n      undefined, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true\r\n        ), sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2,\r\n          path: condC2Path,\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          name: tr(\"constellation2.name\"),\r\n          states: {\r\n            hit: {\r\n              name: trm(\"c2.hit\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            },\r\n            launched: {\r\n              name: trm(\"c2.launched\"),\r\n              fields: [{\r\n                node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }, {\r\n                node: c2Hit_phys_enemyRes__\r\n              }]\r\n            }\r\n          }\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }, [{\r\n        // Custom burst formula\r\n        ...sectionTemplate(\"burst\", tr, burst, [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }], undefined, data => data.get(condBurstAbsorption).value !== undefined, undefined, true),\r\n        text: trm(\"fullBurstDMG.description\"),\r\n        }, sectionTemplate(\"passive2\", tr, passive2, [{\r\n            text: trm(\"regenEner\"),\r\n          }, {\r\n            text: trm(\"q\"),\r\n          }], undefined, data => data.get(input.asc).value >= 4, false, true\r\n        ), \r\n        // C6 anemo team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condC6,\r\n          path: condC6Path,\r\n          description: tr(\"constellation6.description.0\"),\r\n          teamBuff: true,\r\n          name: trm(\"c6\"),\r\n          canShow: greaterEq(input.constellation, 6, 1),\r\n          states: {\r\n            takeDmg: {\r\n              fields: [{\r\n                node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n              }]\r\n            }\r\n          }\r\n        }), \r\n        // C6 elemental self-display\r\n        sectionTemplate(\"constellation6\", tr, c6, absorbableEle.map(eleKey => (\r\n            { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n          )),\r\n          undefined,\r\n          data => data.get(input.constellation).value >= 6\r\n            && data.get(condBurstAbsorption).value !== undefined\r\n            && data.get(equal(target.charKey, key, 1)).value === 1,\r\n          false,\r\n          true\r\n        ),\r\n        // C6 elemental team-display\r\n        sectionTemplate(\"constellation6\", tr, c6, undefined, {\r\n          value: condBurstAbsorption,\r\n          path: condBurstAbsorptionPath,\r\n          description: tr(\"constellation6.description.1\"),\r\n          name: st(\"eleAbsor\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 6, unequal(input.activeCharKey, key, 1)),\r\n          states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n            name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n            fields: [{\r\n              node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n            }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3, [{ node: p3_staminaGlidingDec_ }]),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          pickup: {\r\n            fields: [{\r\n              node: c4_anemo_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        header: conditionalHeader(\"constellation1\", tr, c1),\r\n        description: tr(\"constellation1.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        header: conditionalHeader(\"constellation6\", tr, c6),\r\n        description: tr(\"constellation6.description\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        canShow: greaterEq(input.asc, 2, 1),\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{\r\n        canShow: data => data.get(input.constellation).value >= 2,\r\n        value: datamine.constellation2.dmg,\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n      }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { conditionalHeader, ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(\"auto.fields.plunging\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: st(\"charges\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n      }], undefined, [ // A4\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          path: condA4SkillStackPath,\r\n          value: condA4SkillStack,\r\n          header: conditionalHeader(\"passive2\", tr, passive2),\r\n          description: tr(\"passive2.description\"),\r\n          name: trm(\"skillStack\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n            name: st(\"uses\", { count: i }),\r\n            fields: [{ node: skill_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n      }, {\r\n        node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n        textSuffix: trm(\"burst.currentHPPerSec\"),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }, [ // A1\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          path: condA1BurstStackPath,\r\n          value: condA1BurstStack,\r\n          name: trm(\"burst.stack\"),\r\n          canShow: greaterEq(input.asc, 1, equal(\"inBurst\", condInBurst, 1)),\r\n          states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n            name: st(\"seconds\", { count: i * 3 }),\r\n            fields: [{ node: all_dmg_ }]\r\n          }]))\r\n        })\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{ node: c2Inactive_enerRech_ }], undefined,\r\n          data => data.get(c2Inactive).value === 1,\r\n          true,\r\n          true\r\n        )\r\n      ]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(1)\"\r\n          }, {\r\n            node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n            textSuffix: \"(2)\"\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: data => data.get(input.constellation).value >= 2\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n          : `${datamine.skill.duration}`,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.3\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cost,\r\n      }], {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, [{\r\n        node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n      },]),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: nodeA4\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, percent, prod, equal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, sectionTemplate(\"constellation6\", tr, c6, [{\r\n        node: c6_staminaChargedDec_\r\n      }], {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        canShow: greaterEq(input.constellation, 6, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n        ),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n              node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                { key: type === \"norm\" // And change the key to match\r\n                  ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                  : `char_${key}:skill.pyroShield.${lvl}`\r\n                }\r\n              )},\r\n            ])), {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\",\r\n            },\r\n            // Level 3 damage\r\n            ...lvl === 3 ? [{node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` })}] : [],\r\n          ]}\r\n        ]))\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, [{\r\n          text: trm(\"p1.desc\"),\r\n        }], undefined, data => data.get(input.asc).value >= 1, false, true),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2Shield,\r\n          path: condP2ShieldPath,\r\n          name: trm(\"p2.activeShield\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation4\", tr, c4, undefined, {\r\n          value: condC4SkillHit,\r\n          path: condC4SkillHitPath,\r\n          name: trm(\"c4.swingHit\"),\r\n          teamBuff: true,\r\n          canShow: greaterEq(input.constellation, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c4SkillHit_physical_enemyRes_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.c4.duration,\r\n                unit: \"s\",\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation2\", tr, c2, [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }], undefined, data => data.get(input.constellation).value >= 2, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1, undefined, {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.cd,\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: nodeAsc4 }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      },\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          value: condP1Seals,\r\n          path: condP1SealsPath,\r\n          name: trm(\"passive1.sealsConsumed\"),\r\n          canShow: greaterEq(input.asc, 1, 1),\r\n          // TODO: Should be changing number of seals shown based on C6\r\n          states: Object.fromEntries(range(1, 4).map(seals => [\r\n            seals, {\r\n              name: trm(`seals.${seals}`),\r\n              fields: [{\r\n                node: p1_pyro_dmg_,\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          ]))\r\n        }),\r\n        sectionTemplate(\"passive2\", tr, passive2, undefined, {\r\n          value: condP2ChargedCrit,\r\n          path: condP2ChargedCritPath,\r\n          name: trm(\"passive2.chargedCrit\"),\r\n          canShow: greaterEq(input.asc, 4, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }], undefined, data => data.get(input.constellation).value >= 1, false, true),\r\n        sectionTemplate(\"constellation2\", tr, c2, undefined, {\r\n          value: condC2EnemyHp,\r\n          path: condC2EnemyHpPath,\r\n          name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n          canShow: greaterEq(input.constellation, 2, 1),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: c2EnemyHp_critRate_\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6, [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }], undefined, data => data.get(input.constellation).value >= 6, false, true), {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: trm(\"burst.grantMax\")\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"constellation4\", tr, c4, [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }], undefined, data => data.get(input.constellation).value >= 4, false, true)\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: skillC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: burstC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, sectionTemplate, talentTemplate } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst auto = normalSrc(data_gen.weaponTypeKey)\r\nconst [tr, charTr] = trans(\"char\", characterKey)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: \"_\" }), unit)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst canShowC6 = data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === 'skill'\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n      hit: {\r\n        ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\"))\r\n      }\r\n    }\r\n  )\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, equal(condSkill, \"skill\", prod(percent(datamine.constellation6.dmg_), node)))])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: talentTemplate(\"auto\", tr, auto, undefined, undefined, [{\r\n        ...sectionTemplate(\"auto\", tr, auto,\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n        ),\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto, [{\r\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n        }]),\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        ...sectionTemplate(\"auto\", tr, auto , [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]),\r\n        text: tr(`auto.fields.plunging`),\r\n      }]),\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        text: tr(\"skill.skillParams.2\"),\r\n        value: datamine.skill.cd,\r\n        unit: 's'\r\n      }], {\r\n        name: st(\"afterUse.skill\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: charTr(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: charTr(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          // Conditional for self display\r\n          canShow: greaterEq(input.asc, 1, equal(condSkill, \"skill\", 1)),\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [{\r\n                node: pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }]\r\n          ))\r\n        }),\r\n        sectionTemplate(\"constellation6\", tr, c6,\r\n        datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          canShow: canShowC6,\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        })),\r\n        undefined, data => data.get(input.constellation).value >= 6 && data.get(condSkill).value === \"skill\",\r\n        false, true)\r\n      ]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: 60,\r\n      }], undefined, [\r\n        sectionTemplate(\"constellation1\", tr, c1, [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation1.burst_durationInc,\r\n          unit: \"s\"\r\n        }], {\r\n          canShow: greaterEq(input.constellation, 1, 1),\r\n          name: charTr(\"c1\"),\r\n          value: condC1,\r\n          path: condC1Path,\r\n          states: {\r\n            c1: {\r\n              fields: [{\r\n                node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.constellation1.duration,\r\n                unit: 's'\r\n              }]\r\n            }\r\n          }\r\n        }, data => data.get(input.constellation).value >= 1, false, true),\r\n      ]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, undefined, {\r\n        teamBuff: true,\r\n        // Hide for Yoimiya\r\n        canShow: greaterEq(input.asc, 4, unequal(input.activeCharKey, characterKey, 1)),\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }, [\r\n        // Conditional from P1 for team buff display when P2 is activated\r\n        sectionTemplate(\"passive1\", tr, passive1, undefined, {\r\n          canShow: unequal(input.activeCharKey, characterKey, greaterEq(input.asc, 4, equal(condBurst, \"on\", 1))),\r\n          teamBuff: true,\r\n          value: condA1,\r\n          path: condA1Path,\r\n          name: tr(\"passive1.name\"),\r\n          states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n            [i, {\r\n              name: `${i} stack`,\r\n              fields: [{\r\n                node: pyro_dmg_\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.passive1.duration,\r\n                unit: \"s\"\r\n              }]\r\n            }]\r\n          ))\r\n        })\r\n      ]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, undefined, {\r\n        canShow: greaterEq(input.constellation, 2, 1),\r\n        name: charTr(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: const3TalentInc }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: const5TalentInc }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6,\r\n      )\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, dataObj);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n            textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n          }))\r\n        }, {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.charged.stamina,\r\n          }]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd*(1-0.18)).toFixed(2)}`\r\n          : `${datamine.skill.cd}`,\r\n        unit: \"s\"\r\n      }]),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }], {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2, [{ node: nodeC2 }]),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4, undefined, {\r\n        canShow: greaterEq(input.constellation, 4, 1),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      }),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6),\r\n    }\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet, normalSrc, talentTemplate } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, burst, c1, c2, c3, c4, c5, c6, card, passive1, passive2, passive3, skill, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: {\r\n        name: tr(\"auto.name\"),\r\n        img: normalSrc(data_gen.weaponTypeKey),\r\n        sections: [{\r\n          text: tr(\"auto.fields.normal\"),\r\n          fields: datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n          }))\r\n        },\r\n        {\r\n          text: tr(\"auto.fields.charged\"),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          }, {\r\n            text: tr(\"auto.skillParams.7\"),\r\n            value: datamine.charged.stamina,\r\n          },]\r\n        }, {\r\n          text: tr(`auto.fields.plunging`),\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n          }, {\r\n            node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n          }]\r\n        }\r\n        ],\r\n      },\r\n      skill: talentTemplate(\"skill\", tr, skill, [{\r\n        node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n      }, {\r\n        text: trm(\"skill.maxStele\"),\r\n        value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n      }, {\r\n        text: st(\"pressCD\"),\r\n        value: datamine.skill.pressCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n      }, {\r\n        text: st(\"holdCD\"),\r\n        value: datamine.skill.holdCD,\r\n        unit: \"s\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.shileDuration,\r\n        unit: \"s\"\r\n      }], {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      }),\r\n      burst: talentTemplate(\"burst\", tr, burst, [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data =>\r\n          data.get(input.constellation).value < 4 ?\r\n            datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n            `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n        fixed: 1,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.enerCost,\r\n      }]),\r\n      passive1: talentTemplate(\"passive1\", tr, passive1, undefined, {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        canShow: greaterEq(input.asc, 1, 1),\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      }),\r\n      passive2: talentTemplate(\"passive2\", tr, passive2, [{\r\n        node: p4normalDmgInc\r\n      }, {\r\n        node: p4ChargedDmgInc\r\n      }, {\r\n        node: p4PlungingDmgInc\r\n      }, {\r\n        node: p4SKillDmgInc\r\n      }, {\r\n        node: p4BurstDmgInc\r\n      }]),\r\n      passive3: talentTemplate(\"passive3\", tr, passive3),\r\n      constellation1: talentTemplate(\"constellation1\", tr, c1),\r\n      constellation2: talentTemplate(\"constellation2\", tr, c2),\r\n      constellation3: talentTemplate(\"constellation3\", tr, c3, [{ node: nodeC3 }]),\r\n      constellation4: talentTemplate(\"constellation4\", tr, c4),\r\n      constellation5: talentTemplate(\"constellation5\", tr, c5, [{ node: nodeC5 }]),\r\n      constellation6: talentTemplate(\"constellation6\", tr, c6, [{\r\n        node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n      }]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//   or if the permalink is dead,\r\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//\r\n// PlayerElementLevelCo\r\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\r\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\r\n// PlayerShieldLevelCo\r\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\r\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\r\n\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","critRate_","infusionNode","stringPrio","inferredHitEle","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","data_gen","data_gen_src","trans","tr","trm","auto","normalSrc","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skill","skillDmg","blossomDmg","duration","cd","blossomCd","burst","burstDmg","blossomAmt","enerCost","passive1","blossomDmgInc","hpThresh","passive2","eleMasInc","constellation1","blossomEner","constellation2","maxStacks","stackDuration","constellation4","plunging_dmg_","constellation6","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","fromEntries","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","talentTemplate","sectionTemplate","_","node","text","textSuffix","sgt","path","st","canShow","states","belowHp","fields","c1","fixed","get","c4","skillInField","c6","c6Crystallize","isoOnField","count","burstUsed","c2","passive3","constellation3","c3","constellation5","c5","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","atk_","unequal","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","matchFull","toFixed","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","infusion","nonOverridableSelf","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","charged_dmg_","electro_enemyRes_","img","sections","header","conditionalHeader","description","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","c1Atk","atkIncRatio","condInAreaPath","condInArea","activeInArea","c1AddlAtk","activeInAreaAtkDisp","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc1","nodeAsc4","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","condC6BelowPath","condC6Below","condC6AbovePath","condC6Above","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","conditional","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","lightSwordAdditional","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","color","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","overridableSelf","fieldsHeader","eleKey","c2p","swirl","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sp","cutDmg","bloomDmg","sprint","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodeC4CryoResBonus_","nodeC4GeoResBonus_","nodeC4PyroResBonus_","nodeC4AnemoResBonus_","nodeC4HydroResBonus_","nodeC4ElecResBonus_","gemDmg","geo_res_","cryo_res_","pyro_res_","anemo_res_","hydro_res_","electro_res_","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC4dmg","geoShieldStrength","devotionShield","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","burstResolve","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","cdRed","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","heal_","nBonus_","cBonus_","sBonus_","p","heal_ratio_","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressDmg","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","burstC3","skillC5","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc1Disp","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","fieldsDescription","field","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","talents","anemo","geo","electro","anemoData","geoData","electroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","full7","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","staminaChargedDec_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","norm_shield","characterKey","charTr","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","canShowC6","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","allElements","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","YunJin","Zhongli","customStringRead","subKey","typeKey","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","transformativeReactions","multi","variants","electroSwirl","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}