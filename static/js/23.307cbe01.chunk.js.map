{"version":3,"file":"static/js/23.307cbe01.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/Artifact/ArtifactFilterDisplay.tsx"],"sourcesContent":["import { Autocomplete, AutocompleteProps, Chip, TextField, useTheme } from '@mui/material';\r\nimport { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { allArtifactSets, allElementsWithPhy, ArtifactSetKey } from '../../Types/consts';\r\nimport MenuItemWithImage from '../MenuItemWithImage';\r\nimport SolidColoredTextField from '../SolidColoredTextfield';\r\nimport StatIcon from '../StatIcon';\r\n\r\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\r\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKeys: T[]\r\n  setArtifactKeys: (keys: T[]) => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n}\r\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey>({ allArtifactKeys, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\r\n  ArtifactMultiAutocompleteProps<T>) {\r\n  const theme = useTheme()\r\n\r\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T>[]) => {\r\n    setArtifactKeys(value.map(v => v.key))\r\n  }\r\n  const options = useMemo(() => allArtifactKeys.map(key => ({ key: key, label: getName(key) })), [allArtifactKeys, getName])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    multiple\r\n    disableCloseOnSelect\r\n    options={options}\r\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\r\n    onChange={handleChange}\r\n    getOptionLabel={(option) => option.label}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    renderInput={(params) => <TextField\r\n      {...params}\r\n      label={label}\r\n      variant=\"filled\"\r\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\r\n      type=\"search\"\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKeys.includes(option.key)}\r\n        props={props}\r\n      />\r\n    )}\r\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\r\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\r\n      const color = element ? element : undefined\r\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\r\n    })}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKeys: ArtifactSetKey[]\r\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\r\n}\r\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactMultiAutocomplete<ArtifactSetKey>\r\n    allArtifactKeys={allArtifactSets}\r\n    selectedArtifactKeys={artSetKeys}\r\n    setArtifactKeys={setArtSetKeys}\r\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\r\n    label={t(\"autocompleteLabels.set\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  mainStatKeys: MainStatKey[]\r\n  setMainStatKeys: (keys: MainStatKey[]) => void\r\n}\r\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<MainStatKey>\r\n    allArtifactKeys={allMainStatKeys}\r\n    selectedArtifactKeys={mainStatKeys}\r\n    setArtifactKeys={setMainStatKeys}\r\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: MainStatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.mainStat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  substatKeys: SubstatKey[]\r\n  setSubstatKeys: (keys: SubstatKey[]) => void\r\n}\r\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<SubstatKey>\r\n    allArtifactKeys={allSubstatKeys}\r\n    selectedArtifactKeys={substatKeys}\r\n    setArtifactKeys={setSubstatKeys}\r\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: SubstatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.substat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSingleAutocompleteKey = (ArtifactSetKey | \"\") | (MainStatKey | \"\") | (SubstatKey | \"\")\r\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKey: T\r\n  setArtifactKey: (key: T | \"\") => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey>({ allArtifactKeys, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable= () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", flattenCorners = false, ...props }:\r\n  ArtifactSingleAutocompleteProps<T>) {\r\n  const theme = useTheme();\r\n\r\n  const options = useMemo(() =>\r\n    (showDefault\r\n      ? [{ key: \"\" as T, label: defaultText }]\r\n      : []\r\n    ).concat(allArtifactKeys.map(key => (\r\n      { key: key, label: getName(key) }\r\n    ))), [allArtifactKeys, getName, defaultText, showDefault])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={options}\r\n    clearIcon={selectedArtifactKey ? undefined : \"\"} // Hide the clear icon if the value is already default\r\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\r\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && setArtifactKey(newValue ? newValue.key : \"\")}\r\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    getOptionDisabled={option => option.key ? disable(option.key) : false}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={label}\r\n      startAdornment={getImage(selectedArtifactKey)}\r\n      hasValue={selectedArtifactKey ? true : false}\r\n      flattenCorners={flattenCorners}\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKey === option.key}\r\n        props={props}\r\n      />\r\n    )}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\">, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtSetKeys?: readonly ArtifactSetKey[]\r\n  artSetKey: ArtifactSetKey | \"\"\r\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\r\n  label?: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nexport function ArtifactSetSingleAutocomplete({ allArtSetKeys = allArtifactSets, artSetKey, setArtSetKey, label = \"\", flattenCorners, ...props }: ArtifactSetSingleAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  label = label ? label : t(\"autocompleteLabels.set\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\">\r\n    allArtifactKeys={allArtSetKeys}\r\n    selectedArtifactKey={artSetKey}\r\n    setArtifactKey={setArtSetKey}\r\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\r\n    label={label}\r\n    flattenCorners={flattenCorners}\r\n    {...props}\r\n  />\r\n}\r\n","import { faBan, faChartLine } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Grid, ToggleButton } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { FilterOption } from \"../../PageArtifact/ArtifactSort\";\r\nimport { allArtifactRarities, allSlotKeys } from \"../../Types/consts\";\r\nimport { handleMultiSelect } from \"../../Util/MultiSelect\";\r\nimport CharacterAutocomplete from \"../Character/CharacterAutocomplete\";\r\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\";\r\nimport { Stars } from \"../StarDisplay\";\r\nimport { ArtifactMainStatMultiAutocomplete, ArtifactSetMultiAutocomplete, ArtifactSubstatMultiAutocomplete } from \"./ArtifactAutocomplete\";\r\nimport ArtifactLevelSlider from \"./ArtifactLevelSlider\";\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\";\r\n\r\nconst exclusionValues = [\"excluded\", \"included\"] as const\r\nconst lockedValues = [\"locked\", \"unlocked\"] as const\r\n\r\nconst rarityHandler = handleMultiSelect([...allArtifactRarities])\r\nconst slotHandler = handleMultiSelect([...allSlotKeys])\r\nconst exclusionHandler = handleMultiSelect([...exclusionValues])\r\nconst lockedHandler = handleMultiSelect([...lockedValues])\r\n\r\nexport default function ArtifactFilterDisplay({ filterOption, filterOptionDispatch, }: { filterOption: FilterOption, filterOptionDispatch: (any) => void }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", exclusion = [...exclusionValues], locked = [...lockedValues] } = filterOption\r\n\r\n  return <Grid container spacing={1}>\r\n    {/* left */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact stars filter */}\r\n      <SolidToggleButtonGroup fullWidth value={rarity} size=\"small\" >\r\n        {allArtifactRarities.map(star => <ToggleButton key={star} value={star} onClick={() => filterOptionDispatch({ rarity: rarityHandler(rarity, star) })}><Stars stars={star} /></ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* Artifact Slot */}\r\n      <SolidToggleButtonGroup fullWidth value={slotKeys} size=\"small\">\r\n        {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey} onClick={() => filterOptionDispatch({ slotKeys: slotHandler(slotKeys, slotKey) })}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* exclusion + locked */}\r\n      <Box display=\"flex\" gap={1}>\r\n        <SolidToggleButtonGroup fullWidth value={exclusion} size=\"small\">\r\n          {exclusionValues.map((v, i) => <ToggleButton value={v} sx={{ display: \"flex\", gap: 1 }} onClick={() => filterOptionDispatch({ exclusion: exclusionHandler(exclusion, v) })}>\r\n            <FontAwesomeIcon icon={i ? faChartLine : faBan} /><Trans i18nKey={`exclusion.${v}`} t={t} />\r\n          </ToggleButton>)}\r\n        </SolidToggleButtonGroup>\r\n        <SolidToggleButtonGroup fullWidth value={locked} size=\"small\">\r\n          {lockedValues.map((v, i) => <ToggleButton value={v} sx={{ display: \"flex\", gap: 1 }} onClick={() => filterOptionDispatch({ locked: lockedHandler(locked, v) })}>\r\n            {i ? <LockOpen /> : <Lock />}<Trans i18nKey={`ui:${v}`} t={t} />\r\n          </ToggleButton>)}\r\n        </SolidToggleButtonGroup>\r\n      </Box>\r\n      {/* Artiface level filter */}\r\n      <ArtifactLevelSlider showLevelText levelLow={levelLow} levelHigh={levelHigh}\r\n        setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n        setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n        setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n      <Grid container display=\"flex\" gap={1}>\r\n        <Grid item flexGrow={1}>\r\n          {/* location */}\r\n          <CharacterAutocomplete\r\n            value={location}\r\n            onChange={location => filterOptionDispatch({ location })}\r\n            placeholderText={t(\"artifact:filterLocation.any\")}\r\n            defaultText={t(\"artifact:filterLocation.any\")}\r\n            labelText={t(\"artifact:filterLocation.location\")}\r\n            showDefault\r\n            showInventory\r\n            showEquipped\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n    {/* right */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact Set */}\r\n      <ArtifactSetMultiAutocomplete artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n      <ArtifactMainStatMultiAutocomplete mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n      <ArtifactSubstatMultiAutocomplete substatKeys={substats} setSubstatKeys={substats => filterOptionDispatch({ substats })} />\r\n    </Grid>\r\n  </Grid>\r\n}\r\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeys","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","autoHighlight","multiple","disableCloseOnSelect","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSets","nameRaw","defIcon","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","flattenCorners","concat","clearIcon","event","newValue","reason","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","allArtSetKeys","artSetKey","setArtSetKey","exclusionValues","lockedValues","rarityHandler","handleMultiSelect","allArtifactRarities","slotHandler","allSlotKeys","exclusionHandler","lockedHandler","ArtifactFilterDisplay","filterOption","filterOptionDispatch","rarity","slotKeys","levelLow","levelHigh","substats","location","exclusion","locked","container","spacing","item","xs","md","display","flexDirection","gap","fullWidth","size","star","onClick","stars","slotKey","artifactSlotIcon","i","sx","faChartLine","faBan","i18nKey","showLevelText","setLow","setHigh","setBoth","flexGrow","placeholderText","labelText","showInventory","showEquipped"],"sourceRoot":""}