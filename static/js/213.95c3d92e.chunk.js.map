{"version":3,"file":"static/js/213.95c3d92e.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/TextButton.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import { Autocomplete, AutocompleteProps, Chip, TextField, useTheme } from '@mui/material';\r\nimport { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { allArtifactSets, allElementsWithPhy, ArtifactSetKey } from '../../Types/consts';\r\nimport MenuItemWithImage from '../MenuItemWithImage';\r\nimport SolidColoredTextField from '../SolidColoredTextfield';\r\nimport StatIcon from '../StatIcon';\r\n\r\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\r\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKeys: T[]\r\n  setArtifactKeys: (keys: T[]) => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n}\r\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey>({ allArtifactKeys, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\r\n  ArtifactMultiAutocompleteProps<T>) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T>[]) => {\r\n    setArtifactKeys(value.map(v => v.key))\r\n  };\r\n  const options = useMemo(() => allArtifactKeys.map(key => ({ key: key, label: getName(key) })), [allArtifactKeys, getName])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    multiple\r\n    options={options}\r\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\r\n    onChange={handleChange}\r\n    getOptionLabel={(option) => option.label}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    renderInput={(params) => <TextField\r\n      {...params}\r\n      label={label}\r\n      variant=\"filled\"\r\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\r\n      type=\"search\"\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKeys.includes(option.key)}\r\n        props={props}\r\n      />\r\n    )}\r\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\r\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\r\n      const color = element ? element : undefined\r\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\r\n    })}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKeys: ArtifactSetKey[]\r\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\r\n}\r\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactMultiAutocomplete<ArtifactSetKey>\r\n    allArtifactKeys={allArtifactSets}\r\n    selectedArtifactKeys={artSetKeys}\r\n    setArtifactKeys={setArtSetKeys}\r\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\r\n    label={t(\"autocompleteLabels.set\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  mainStatKeys: MainStatKey[]\r\n  setMainStatKeys: (keys: MainStatKey[]) => void\r\n}\r\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<MainStatKey>\r\n    allArtifactKeys={allMainStatKeys}\r\n    selectedArtifactKeys={mainStatKeys}\r\n    setArtifactKeys={setMainStatKeys}\r\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: MainStatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.mainStat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  substatKeys: SubstatKey[]\r\n  setSubstatKeys: (keys: SubstatKey[]) => void\r\n}\r\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<SubstatKey>\r\n    allArtifactKeys={allSubstatKeys}\r\n    selectedArtifactKeys={substatKeys}\r\n    setArtifactKeys={setSubstatKeys}\r\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: SubstatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.substat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSingleAutocompleteKey = (ArtifactSetKey | \"\") | (MainStatKey | \"\") | (SubstatKey | \"\")\r\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKey: T\r\n  setArtifactKey: (key: T | \"\") => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey>({ allArtifactKeys, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable= () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", flattenCorners = false, ...props }:\r\n  ArtifactSingleAutocompleteProps<T>) {\r\n  const theme = useTheme();\r\n\r\n  const options = useMemo(() =>\r\n    (showDefault\r\n      ? [{ key: \"\" as T, label: defaultText }]\r\n      : []\r\n    ).concat(allArtifactKeys.map(key => (\r\n      { key: key, label: getName(key) }\r\n    ))), [allArtifactKeys, getName, defaultText, showDefault])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={options}\r\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\r\n    onChange={(_, newValue) => setArtifactKey(newValue ? newValue.key : \"\")}\r\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    getOptionDisabled={option => option.key ? disable(option.key) : false}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={label}\r\n      startAdornment={getImage(selectedArtifactKey)}\r\n      hasValue={selectedArtifactKey ? true : false}\r\n      flattenCorners={flattenCorners}\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKey === option.key}\r\n        props={props}\r\n      />\r\n    )}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\">, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtSetKeys?: readonly ArtifactSetKey[]\r\n  artSetKey: ArtifactSetKey | \"\"\r\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\r\n  label?: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nexport function ArtifactSetSingleAutocomplete({ allArtSetKeys = allArtifactSets, artSetKey, setArtSetKey, label = \"\", flattenCorners, ...props }: ArtifactSetSingleAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  label = label ? label : t(\"autocompleteLabels.set\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\">\r\n    allArtifactKeys={allArtSetKeys}\r\n    selectedArtifactKey={artSetKey}\r\n    setArtifactKey={setArtSetKey}\r\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\r\n    label={label}\r\n    flattenCorners={flattenCorners}\r\n    {...props}\r\n  />\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport InfoTooltip from '../../../Components/InfoTooltip';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <InfoTooltip title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>} />\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstatKeys, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstatKeys.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstatKeys.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, ChevronRight, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography, useMediaQuery, useTheme } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { ArtifactSetSingleAutocomplete } from '../Components/Artifact/ArtifactAutocomplete';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport StatIcon, { uncoloredEleIcons } from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact } from '../Database/imports/parse';\r\nimport { validateArtifact } from '../Database/imports/validate';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { allElementsWithPhy, ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit, allowUpload = false, allowEmpty = false, disableEditSetSlot: disableEditSlotProp = false }:\r\n  { artifactIdToEdit?: string, cancelEdit: () => void, allowUpload?: boolean, allowEmpty?: boolean, disableEditSetSlot?: boolean }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  const disableEditSetSlot = disableEditSlotProp || !!artifact?.location\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    allowUpload && window.addEventListener('paste', pasteFunc);\r\n    return () => {\r\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\r\n    }\r\n  }, [uploadFiles, allowUpload])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n\r\n  const theme = useTheme();\r\n  const grmd = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const element = artifact ? allElementsWithPhy.find(ele => artifact.mainStatKey.includes(ele)) : undefined\r\n  const color = artifact\r\n    ? element ?? \"success\"\r\n    : \"primary\"\r\n\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n        <Grid container spacing={1} columns={{ xs: 1, md: 2 }} >\r\n          {/* Left column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetSingleAutocomplete\r\n                size=\"small\"\r\n                disableClearable\r\n                artSetKey={artifact?.setKey ?? \"\"}\r\n                setArtSetKey={setKey => update({ setKey: setKey as ArtifactSetKey })}\r\n                sx={{ flexGrow: 1 }}\r\n                disabled={disableEditSetSlot}\r\n              />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={disableEditSetSlot || !sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={disableEditSetSlot || !sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={element ? uncoloredEleIcons[element] : (artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined)}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={color} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\r\n                    <ListItemText>{KeyMap.getArtStr(mainStatK)}</ListItemText>\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            {allowUpload && <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => setModalShow(true)}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>}\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\" }} spacing={1} >\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n          {grmd && <Grid item md={1} display=\"flex\" alignItems=\"center\" justifyContent=\"center\" >\r\n            <CardLight sx={{ display: \"flex\" }}><ChevronRight sx={{ fontSize: 40 }} /></CardLight>\r\n          </Grid>}\r\n          <Grid item xs={12} md={5.5} lg={4} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" >{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.updateArt(editorArtifact!, old!.id);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => {\r\n                database.createArt(artifact!);\r\n                if (allowEmpty) reset()\r\n                else {\r\n                  setShow(false)\r\n                  cancelEdit()\r\n                }\r\n              }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            {allowEmpty && <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>}\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); allowEmpty ? reset() : setShow(false) }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeys","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","autoHighlight","multiple","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSets","nameRaw","defIcon","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","flattenCorners","concat","newValue","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","allArtSetKeys","artSetKey","setArtSetKey","DisabledButton","styled","Button","backgroundColor","dark","secondary","TextButton","children","disabled","ArtifactRarityDropdown","rarity","filter","DropdownButton","title","stars","MenuItem","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","allSlotKeys","CustomNumberTextField","float","useState","state","setState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","toString","TextField","e","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","Trans","i18nKey","xs","PercentBadge","SubstatInput","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","a","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","Box","display","ButtonGroup","size","width","whiteSpace","k","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","i","cacheValueString","artifactSubstatRollCorrection","clamp","p","SqBadge","count","sort","val","component","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","img","Image","onload","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","setKey","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","set","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatVal","mainStatValScore","push","Object","entries","chosen","resultMainStatVal","every","other","add","unknownText","name","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableEditSetSlot","disableEditSlotProp","database","useContext","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","min","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","grmd","useMediaQuery","breakpoints","up","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","mb","disableClearable","id","mr","my","margin","l","keys","getSlotName","ImgIcon","slotIcons","uncoloredEleIcons","mainStatK","alignItems","htmlFor","accept","PhotoCamera","minWidth","faQuestionCircle","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","updateArt","createArt","confirm","process","Update"],"sourceRoot":""}