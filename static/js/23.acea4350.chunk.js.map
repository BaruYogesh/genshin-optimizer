{"version":3,"sources":["Settings/SettingsDisplay.tsx","Util/ReactUtil.ts"],"names":["SettingsDisplay","useForceUpdate","forceUpdate","ReactGA","pageview","bg","text","className","Header","Body","DownloadCard","UploadCard","copyToClipboard","navigator","clipboard","writeText","JSON","stringify","createDatabaseObj","alert","numChar","CharacterDatabase","getIdList","length","numArt","ArtifactDatabase","downloadValid","Boolean","xs","md","Footer","disabled","onClick","JSONstr","filename","contentType","window","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","variant","confirm","clearDatabase","file","cb","reader","FileReader","onload","result","readAsText","dataObj","useState","data","setdata","setfilename","error","parse","characterDatabase","artifactDatabase","Object","keys","e","dataValid","File","label","onChange","files","value","name","readFile","custom","accept","style","minHeight","obj","loadDatabaseObj","replaceDatabase","DatabaseInitAndVerify","stateDirty","update","useCallback","usePromise","promise","res","setRes","useEffect","pending","then","console","undefined"],"mappings":"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","file":"static/js/23.acea4350.chunk.js","sourcesContent":["import { useState } from \"react\"\r\nimport { Alert, Button, Card, Col, Container, Form, Row } from \"react-bootstrap\"\r\nimport ReactGA from 'react-ga'\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\"\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\"\r\nimport { clearDatabase, createDatabaseObj, DatabaseInitAndVerify, loadDatabaseObj } from \"../Database/DatabaseUtil\"\r\nimport { useForceUpdate } from \"../Util/ReactUtil\"\r\n\r\nDatabaseInitAndVerify()\r\nexport default function SettingsDisplay() {\r\n  const [, forceUpdate] = useForceUpdate()\r\n  ReactGA.pageview('/setting')\r\n  return <Container>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mt-2\">\r\n      <Card.Header>Database management</Card.Header>\r\n      <Card.Body>\r\n        <DownloadCard forceUpdate={forceUpdate} />\r\n        <UploadCard forceUpdate={forceUpdate} />\r\n      </Card.Body>\r\n    </Card>\r\n  </Container>\r\n}\r\nfunction download(JSONstr, filename = \"data.json\") {\r\n  const contentType = \"application/json;charset=utf-8\"\r\n  if (window?.navigator?.msSaveOrOpenBlob as any) { // TODO: Function is always defined, do we want to call it instead?\r\n    const blob = new Blob([decodeURIComponent(encodeURI(JSONstr))], { type: contentType })\r\n    navigator.msSaveOrOpenBlob(blob, filename)\r\n  } else {\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONstr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }\r\n}\r\n\r\nfunction deleteDatabase() {\r\n  if (!window.confirm(\"Are you sure you want to delete your database? All existing characters and artifacts will be deleted.\")) return\r\n  clearDatabase()\r\n}\r\nfunction copyToClipboard() {\r\n  navigator.clipboard.writeText(JSON.stringify(createDatabaseObj()))\r\n  alert(\"Copied database to clipboard.\")\r\n}\r\nfunction DownloadCard({ forceUpdate }) {\r\n  const numChar = CharacterDatabase.getIdList().length\r\n  const numArt = ArtifactDatabase.getIdList().length\r\n  const downloadValid = Boolean(numChar || numArt)\r\n  const deleteDB = () => {\r\n    deleteDatabase();\r\n    forceUpdate()\r\n  }\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-3\">\r\n    <Card.Header>Database Download</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={6}><h6>Number of Characters: <b>{numChar}</b></h6></Col>\r\n        <Col xs={12} md={6}><h6>Number of artifacts: <b>{numArt}</b></h6></Col>\r\n      </Row>\r\n      <small>Notes: any data within the \"Tools\" page, e.g. Resin amount/timer, are not part of the downloaded database.</small>\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <Row>\r\n        <Col xs=\"auto\"><Button disabled={!downloadValid} onClick={() => download(JSON.stringify(createDatabaseObj()))}>Download</Button></Col>\r\n        <Col ><Button disabled={!downloadValid} variant=\"info\" onClick={copyToClipboard}>Copy to clipboard</Button></Col>\r\n        <Col xs=\"auto\"><Button disabled={!downloadValid} variant=\"danger\" onClick={deleteDB} >Delete database</Button></Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>\r\n}\r\nasync function readFile(file, cb) {\r\n  if (!file) return\r\n  const reader = new FileReader()\r\n  reader.onload = () => {\r\n    cb(reader.result)\r\n  }\r\n  reader.readAsText(file)\r\n}\r\nfunction replaceDatabase(obj, cb = () => { }) {\r\n  if (!window.confirm(\"Are you sure you want to replace your database? All existing characters and artifacts will be deleted before replacement.\")) return\r\n  loadDatabaseObj(obj)\r\n  cb()\r\n}\r\nfunction UploadCard({ forceUpdate }) {\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  let error = \"\"\r\n  let numChar, numArt, dataObj\r\n  if (data) {\r\n    try {\r\n      dataObj = JSON.parse(data)\r\n      const { characterDatabase, artifactDatabase } = dataObj\r\n      numChar = Object.keys(characterDatabase).length\r\n      numArt = Object.keys(artifactDatabase).length\r\n    } catch (e) {\r\n      error = `Invalid JSON: ${e}`\r\n    }\r\n  }\r\n  const dataValid = Boolean(numChar || numArt)\r\n  const replaceDB = () => {\r\n    replaceDatabase(dataObj)\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    forceUpdate()\r\n  }\r\n  const onUpload = e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null//reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    readFile(file, setdata)\r\n  }\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header>Database Upload</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Form.File\r\n          className=\"mb-2\"\r\n          label={filename ? filename : \"Upload your JSON file here\"}\r\n          onChange={onUpload}\r\n          custom\r\n          accept=\".json\"\r\n        />\r\n        <h6>...or Paste your data below...</h6>\r\n        <textarea className=\"w-100 text-monospace\" value={data} onChange={e => setdata(e.target.value)} style={{ minHeight: \"10em\" }} />\r\n      </Row>\r\n      {dataValid && <Row>\r\n        <Col xs={12} md={6}><h6>Number of Characters: <b>{numChar}</b></h6></Col>\r\n        <Col xs={12} md={6}><h6>Number of artifacts: <b>{numArt}</b></h6></Col>\r\n      </Row>}\r\n      {Boolean(data && (error || !dataValid)) && <Alert variant=\"danger\">{error ? error : \"Unable to parse character & artifact data from file.\"}</Alert>}\r\n    </Card.Body>\r\n    <Card.Footer>\r\n      <Button variant={dataValid ? \"success\" : \"danger\"} disabled={!dataValid} onClick={replaceDB}>Replace database</Button>\r\n    </Card.Footer>\r\n  </Card>\r\n}","import { useCallback, useEffect, useState } from \"react\"\r\n\r\nexport function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}\r\n\r\nexport function usePromise<T>(promise: Promise<T> | undefined): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>();\r\n  useEffect(() => {\r\n    let pending = true\r\n    promise?.then(res => pending && setRes(() => res), console.error) ?? setRes(undefined)\r\n    return () => { pending = false }\r\n  }, [promise])\r\n  return res\r\n}\r\n"],"sourceRoot":""}