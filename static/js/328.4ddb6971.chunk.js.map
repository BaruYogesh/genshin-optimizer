{"version":3,"file":"static/js/328.4ddb6971.chunk.js","mappings":"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","sources":["Components/Character/CharacterAutocomplete.tsx","Components/Character/LocationName.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/InfoTooltip.tsx","Components/MenuItemWithImage.tsx","Components/SolidColoredTextfield.tsx","Components/StatFilterCard.tsx","GlobalSettings.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { faUserShield } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { BusinessCenter, Favorite } from \"@mui/icons-material\";\r\nimport { Autocomplete, AutocompleteProps, Box, Skeleton, Typography, useTheme } from \"@mui/material\";\r\nimport { Suspense, useCallback, useContext, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { allElements, allWeaponTypeKeys, CharacterKey } from \"../../Types/consts\";\r\nimport { CharacterFilterConfigs, characterFilterConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction } from \"../../Util/SortByFilters\";\r\nimport MenuItemWithImage from \"../MenuItemWithImage\";\r\nimport SolidColoredTextField from \"../SolidColoredTextfield\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\ntype CharacterAutocompleteValue = CharacterKey | \"\" | \"Inventory\" | \"Equipped\"\r\ntype CharacterAutocompleteOption = {\r\n  value: CharacterAutocompleteValue\r\n  label: string\r\n}\r\ntype CharacterAutocompleteProps = Omit<AutocompleteProps<CharacterAutocompleteOption, false, true, false>, \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  value: CharacterAutocompleteValue\r\n  onChange: (v: any) => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  showInventory?: boolean\r\n  showEquipped?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  placeholderText?: string\r\n  labelText?: string\r\n}\r\n\r\nexport default function CharacterAutocomplete({ value, onChange, defaultText = \"\", defaultIcon = \"\", placeholderText = \"\", labelText = \"\", showDefault = false, showInventory = false, showEquipped = false, filter = () => true, disable = () => false, ...props }: CharacterAutocompleteProps) {\r\n  const { t } = useTranslation([\"ui\", \"artifact\", \"charNames_gen\"])\r\n  const theme = useTheme()\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(database, characterSheets), [database, characterSheets])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n\r\n  const textForValue = useCallback((value: CharacterAutocompleteValue): string => {\r\n    switch (value) {\r\n      case \"Equipped\":\r\n        return t(\"artifact:filterLocation.currentlyEquipped\")\r\n      case \"Inventory\":\r\n        return t(\"artifact:filterLocation.inventory\")\r\n      case \"\":\r\n        return defaultText\r\n      default:\r\n        return t(`charNames_gen:${value}`)\r\n    }\r\n  }, [defaultText, t])\r\n\r\n  const imageForValue = useCallback((value: CharacterAutocompleteValue): Displayable => {\r\n    switch (value) {\r\n      case \"Equipped\":\r\n        return <FontAwesomeIcon icon={faUserShield} />\r\n      case \"Inventory\":\r\n        return <BusinessCenter />\r\n      case \"\":\r\n        return defaultIcon\r\n      default:\r\n        return <ThumbSide src={characterSheets![value]?.thumbImgSide} sx={{ pr: 1 }} />\r\n    }\r\n  }, [defaultIcon, characterSheets])\r\n\r\n  const characterOptions = useMemo(() => filterConfigs && charOptions(characterKeys, filterConfigs, textForValue, showDefault, showInventory, showEquipped),\r\n    [filterConfigs, characterKeys, showDefault, showInventory, showEquipped, textForValue])\r\n\r\n\r\n\r\n  if (!characterSheets || !characterOptions) return <Skeleton height={50} />\r\n\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={characterOptions}\r\n    clearIcon={value ? undefined : \"\"} // Hide the clear icon if the value is already default\r\n    getOptionLabel={(option) => option.label}\r\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && onChange(newValue ? newValue.value : \"\")}\r\n    isOptionEqualToValue={(option, value) => option.value === value.value}\r\n    getOptionDisabled={option => disable(option.value)}\r\n    value={{ value, label: textForValue(value) }}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={labelText}\r\n      placeholder={placeholderText}\r\n      startAdornment={imageForValue(value)}\r\n      hasValue={value ? true : false}\r\n    />}\r\n    renderOption={(props, option) => {\r\n      const favorite = option.value !== \"Equipped\" && option.value !== \"Inventory\"\r\n        && option.value !== \"\" && database._getChar(option.value)?.favorite\r\n      return <MenuItemWithImage\r\n        key={option.value ? option.value : \"default\"}\r\n        value={option.value ? option.value : \"default\"}\r\n        image={imageForValue(option.value)}\r\n        text={\r\n          <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\r\n            <Typography variant=\"inherit\" noWrap>\r\n              {textForValue(option.value)}\r\n            </Typography>\r\n          </Suspense>\r\n        }\r\n        theme={theme}\r\n        isSelected={value === option.value}\r\n        addlElement={<>\r\n          {favorite && <Box display=\"flex\" flexGrow={1} />}\r\n          {favorite && <Favorite sx={{ ml: 1, mr: -0.5 }} />}\r\n        </>}\r\n        props={props}\r\n      />\r\n    }}\r\n    {...props}\r\n  />\r\n}\r\n\r\n\r\nfunction charOptions(characterKeys: CharacterKey[], filterConfigs: CharacterFilterConfigs | undefined, textForValue: (v: CharacterAutocompleteValue) => string, showDefault: boolean, showInventory, showEquipped): CharacterAutocompleteOption[] {\r\n  if (!filterConfigs) return []\r\n  const base: CharacterAutocompleteOption[] = []\r\n  if (showDefault) {\r\n    base.push({ value: \"\", label: textForValue(\"\") })\r\n  }\r\n  if (showInventory) {\r\n    base.push({ value: \"Inventory\", label: textForValue(\"Inventory\") })\r\n  }\r\n  if (showEquipped) {\r\n    base.push({ value: \"Equipped\", label: textForValue(\"Equipped\") })\r\n  }\r\n  const faves = characterKeys\r\n    .filter(filterFunction({ element: [...allElements], weaponType: [...allWeaponTypeKeys], favorite: \"yes\", name: \"\" }, filterConfigs))\r\n    .map(characterKey => ({ value: characterKey, label: textForValue(characterKey) }))\r\n  const nonFaves = characterKeys\r\n    .filter(filterFunction({ element: [...allElements], weaponType: [...allWeaponTypeKeys], favorite: \"no\", name: \"\" }, filterConfigs))\r\n    .map(characterKey => ({ value: characterKey, label: textForValue(characterKey) }))\r\n\r\n  return base.concat(faves).concat(nonFaves)\r\n}\r\n","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(() => CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t<string>(\"inventory\")}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, TooltipProps } from \"@mui/material\";\r\nimport BootstrapTooltip from \"./BootstrapTooltip\";\r\n\r\ninterface ITooltipProps extends Omit<TooltipProps, \"children\"> {\r\n  className?: string,\r\n}\r\nconst InfoTooltip = ({ className, ...props }: ITooltipProps) =>\r\n  <BootstrapTooltip placement=\"top\" {...props} className={className}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faInfoCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\nexport default InfoTooltip\r\n","import { ListItemIcon, ListItemText, MenuItem, Theme } from \"@mui/material\";\r\n\r\ntype MenuItemWithImageProps = {\r\n  value: string\r\n  image?: Displayable\r\n  text: Displayable\r\n  theme: Theme\r\n  isSelected?: boolean\r\n  addlElement?: Displayable\r\n  props?: object\r\n}\r\n\r\nexport default function MenuItemWithImage({ value, image = \"\", text, theme, isSelected, addlElement, props }: MenuItemWithImageProps) {\r\n  return <MenuItem key={value} value={value} {...props}>\r\n    <ListItemIcon>{image}</ListItemIcon>\r\n    <ListItemText primaryTypographyProps={{ style: { fontWeight: isSelected ? theme.typography.fontWeightMedium : theme.typography.fontWeightRegular } }}>\r\n      {text}\r\n    </ListItemText>\r\n    {addlElement && addlElement}\r\n  </MenuItem>\r\n}\r\n","import { TextField, TextFieldProps, useTheme } from \"@mui/material\";\r\n\r\ntype SolidColoredTextFieldProps = Omit<TextFieldProps, \"multiline\" | \"variant\" | \"color\" | \"hiddenLabel\" | \"type\" | \"InputLabelProps\"> & {\r\n  hasValue: boolean\r\n  startAdornment?: Displayable\r\n}\r\nexport default function SolidColoredTextField({ hasValue, startAdornment, InputProps, sx, ...props }: SolidColoredTextFieldProps) {\r\n  const theme = useTheme()\r\n  return <TextField\r\n    {...props}\r\n    variant=\"filled\"\r\n    color={hasValue ? \"success\" : \"primary\"}\r\n    hiddenLabel={props.label ? false : true}\r\n    type=\"search\"\r\n    InputProps={{\r\n      ...InputProps,\r\n      startAdornment,\r\n    }}\r\n    InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n    sx={{\r\n      ...sx,\r\n      // Fill in the background without using the `focused` prop\r\n      \"& .MuiFilledInput-root\": { backgroundColor: hasValue ? theme.palette.success.main : theme.palette.primary.main, paddingTop: props.label ? undefined : 0, paddingBottom: 0 },\r\n      \"& .MuiFilledInput-root.Mui-focused\": { backgroundColor: hasValue ? theme.palette.success.light : theme.palette.primary.light },\r\n      \"& .MuiFilledInput-root:hover\": { backgroundColor: hasValue ? theme.palette.success.dark : theme.palette.primary.dark },\r\n      // Remove the colored bar at the bottom of the input\r\n      \"& .MuiFilledInput-root:before\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root.Mui-disabled:before\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root:after\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root:hover:not(.Mui-disabled):before\": { border: \"none\" },\r\n      // Remove the x at the end of search input for IE\r\n      \"& input[type=search]::-ms-clear\": { display: \"none\", width: 0, height: 0 },\r\n      \"& input[type=search]::-ms-reveal\": { display: \"none\", width: 0, height: 0 },\r\n      // Remove the x at the end of search input for Chrome\r\n      \"& input[type=search]::-webkit-search-decoration\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-cancel-button\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-results-button\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-results-decoration\": { display: \"none\" },\r\n    }}\r\n  />\r\n}\r\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, MenuItem, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useCallback, useContext, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CharacterContext } from '../CharacterContext';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatColoredWithUnit, StatKey } from '../KeyMap';\r\nimport useBuildSetting from '../PageCharacter/CharacterDisplay/Tabs/TabOptimize/BuildSetting';\r\nimport { ElementKey } from '../Types/consts';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport InfoTooltip from './InfoTooltip';\r\nexport default function StatFilterCard({ disabled = false }: { disabled?: boolean }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { character: { key: characterKey } } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const { buildSetting: { statFilters }, buildSettingDispatch } = useBuildSetting(characterKey)\r\n  const setStatFilters = useCallback((statFilters: Dict<StatKey, number>) => buildSettingDispatch({ statFilters }), [buildSettingDispatch],)\r\n\r\n  const statKeys = useMemo(() => {\r\n    const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n    if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n    const charEle = data.get(input.charEle).value as ElementKey\r\n    statKeys.push(`${charEle}_dmg_`)\r\n    return statKeys\r\n  }, [data])\r\n\r\n  const remainingKeys = useMemo(() => statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key)), [statKeys, statFilters])\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <Box>\r\n    <CardLight>\r\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n        <Typography>{t`tabOptimize.constraintFilter.title`}</Typography>\r\n        <InfoTooltip title={<Typography>{t`tabOptimize.constraintFilter.tooltip`}</Typography>} />\r\n      </CardContent>\r\n    </CardLight>\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\r\n      {Object.entries(statFilters).map(([statKey, min]) => {\r\n        return <StatFilterItem key={statKey} statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n          delete statFilters[statKey]\r\n          setStatFilters({ ...statFilters })\r\n        }} />\r\n      })}\r\n      <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n    </Box>\r\n  </Box>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: StatKey, statKeys: StatKey[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? <StatColoredWithUnit statKey={statKey} /> : \"New Stat\"}\r\n      disabled={disabled}\r\n      color={statKey ? \"success\" : \"secondary\"}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}><StatColoredWithUnit statKey={sKey} /></MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey || disabled}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Stat Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2, }}\r\n        inputProps={{ sx: { textAlign: \"right\" } }}\r\n        endAdornment={KeyMap.unit(statKey)}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { faBan, faChartLine, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { BusinessCenter, Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, Chip, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { lazy, Suspense, useCallback, useContext, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterAutocomplete from '../Components/Character/CharacterAutocomplete';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\r\nimport InfoTooltip from '../Components/InfoTooltip';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey, Rarity } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onClick?: (id: string) => void,\r\n  onDelete?: (id: string) => void,\r\n  mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n  disableEditSetSlot?: boolean\r\n  editor?: boolean,\r\n  canExclude?: boolean\r\n  canEquip?: boolean,\r\n  extraButtons?: JSX.Element\r\n}\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onClick, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter, disableEditSetSlot = false, editor = false, canExclude = false, canEquip = false, extraButtons }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(() => ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n  const editable = !artifactObj\r\n  const [showEditor, setshowEditor] = useState(false)\r\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\r\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\r\n\r\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => artifactId && onClick?.(artifactId)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</CardActionArea>, [onClick, artifactId],)\r\n  const falseWrapperFunc = useCallback(children => <Box sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</Box>, [])\r\n\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const mainStatUnit = KeyMap.unit(mainStatKey)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey)\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <InfoTooltip title={<Box>\r\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><Typography variant='h6'>{slotName}</Typography></Suspense>\r\n    <Typography>{slotDesc}</Typography>\r\n  </Box>} />\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <InfoTooltip title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`artifact:setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  } />\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    {editor && <Suspense fallback={false}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\r\n        cancelEdit={onHideEditor}\r\n        disableEditSetSlot={disableEditSetSlot}\r\n      />\r\n    </Suspense>}\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\r\n        <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", width: \"100%\" }}>\r\n          {!onClick && <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>}\r\n          <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\r\n            {/* header */}\r\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\r\n              <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n              {!slotName && <Skeleton variant=\"text\" width={100} />}\r\n              {slotName && <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{slotName}</strong></Typography>}\r\n              {!slotDescTooltip && <Skeleton width={10} />}\r\n              {slotDescTooltip}\r\n            </Box>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\r\n              <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>\r\n                <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\r\n              </strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Box>\r\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\r\n            <Box\r\n              component=\"img\"\r\n              src={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"auto\"\r\n              height=\"100%\"\r\n              sx={{ float: \"right\" }}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0, width: \"100%\" }}>\r\n          {substats.map((stat: ICachedSubstat) => <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\r\n          <Box sx={{ display: \"flex\", my: 1 }}>\r\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.curSubEff`}</Typography>\r\n            <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n          </Box>\r\n          {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.maxSubEff`}</Typography>\r\n            <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n          </Box>}\r\n          <Box flexGrow={1} />\r\n          {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n          <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n        </CardContent>\r\n      </ConditionalWrapper>\r\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        {editable && canEquip\r\n          ? <CharacterAutocomplete sx={{ flexGrow: 1 }} size=\"small\" showDefault\r\n            defaultIcon={<BusinessCenter />} defaultText={t(\"ui:inventory\")}\r\n            value={location} onChange={equipOnChar} />\r\n          : <LocationName location={location} />}\r\n        {editable && <ButtonGroup sx={{ height: \"100%\" }}>\r\n          {editor && <Tooltip title={<Typography>{t`artifact:edit`}</Typography>} placement=\"top\" arrow>\r\n            <Button color=\"info\" size=\"small\" onClick={onShowEditor} >\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>\r\n          </Tooltip>}\r\n          {canExclude && <Tooltip title={<Box>\r\n            <Typography>{t`artifact:excludeArtifactTip`}</Typography>\r\n            <Typography><ColorText color={exclude ? \"error\" : \"success\"}>{t(`artifact:${exclude ? \"excluded\" : \"included\"}`)}</ColorText></Typography>\r\n          </Box>} placement=\"top\" arrow>\r\n            <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\" >\r\n              <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n            </Button>\r\n          </Tooltip>}\r\n          {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n          </Button>}\r\n          {extraButtons}\r\n        </ButtonGroup>}\r\n      </Box>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\r\n  if (!stat.value) return null\r\n  const numRolls = stat.rolls?.length ?? 0\r\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\r\n  const rollData = stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : []\r\n  const rollOffset = 7 - rollData.length\r\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n  const efficiency = stat.efficiency ?? 0\r\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n  const statName = KeyMap.getStr(stat.key)\r\n  const unit = KeyMap.unit(stat.key)\r\n  const inFilter = stat.key && effFilter.has(stat.key)\r\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\r\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\r\n    {inFilter && <Box display=\"flex\" gap={0.25} height=\"1.3em\">\r\n      {stat.rolls.sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\r\n    </Box>}\r\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n  </Box>)\r\n}\r\nexport function SmolProgress({ color = \"red\", value = 50 }) {\r\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\r\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\r\n  </Box>\r\n}\r\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\r\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\r\nimport Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { probability } from \"./RollProbability\";\r\nimport { SubstatKey } from \"../Types/artifact\";\r\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\r\nexport const artifactSortKeysTC = [\"probability\"] as const\r\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\r\nexport type FilterOption = {\r\n  artSetKeys: ArtifactSetKey[],\r\n  rarity: ArtifactRarity[],\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  slotKeys: SlotKey[],\r\n  mainStatKeys: MainStatKey[],\r\n  substats: SubstatKey[]\r\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\r\n  exclusion: Array<\"excluded\" | \"included\">,\r\n  locked: Array<\"locked\" | \"unlocked\">,\r\n}\r\n\r\ntype ArtifactSortFilter = {\r\n  filterOption: FilterOption\r\n  ascending: boolean\r\n  sortType: ArtifactSortKey\r\n}\r\nexport function initialFilterOption(): FilterOption {\r\n  return {\r\n    artSetKeys: [],\r\n    rarity: [...allArtifactRarities],\r\n    levelLow: 0,\r\n    levelHigh: 20,\r\n    slotKeys: [...allSlotKeys],\r\n    mainStatKeys: [],\r\n    substats: [],\r\n    location: \"\",\r\n    exclusion: [\"excluded\", \"included\"],\r\n    locked: [\"locked\", \"unlocked\"],\r\n  }\r\n}\r\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\r\n  filterOption: initialFilterOption(),\r\n  ascending: false,\r\n  sortType: artifactSortKeys[0],\r\n})\r\n\r\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\r\n  return {\r\n    rarity: {\r\n      getValue: art => art.rarity ?? 0,\r\n      tieBreaker: \"level\"\r\n    },\r\n    level: {\r\n      getValue: art => art.level ?? 0,\r\n      tieBreaker: \"artsetkey\"\r\n    },\r\n    artsetkey: {\r\n      getValue: art => art.setKey ?? \"\",\r\n      tieBreaker: \"level\"\r\n    },\r\n    efficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\r\n    },\r\n    mefficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\r\n    },\r\n    probability: {\r\n      getValue: art => {\r\n        if (!Object.keys(probabilityFilter).length) return 0\r\n        const prob = (art as any).probability\r\n        if (prob === undefined) return probability(art, probabilityFilter);\r\n        return prob\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\r\n  return {\r\n    exclusion: (art, filter) => {\r\n      if (!filter.includes(\"included\") && !art.exclude) return false\r\n      if (!filter.includes(\"excluded\") && art.exclude) return false\r\n      return true\r\n    },\r\n    locked: (art, filter) => {\r\n      if (!filter.includes(\"locked\") && art.lock) return false\r\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\r\n      return true\r\n    },\r\n    location: (art, filter) => {\r\n      if (!filter) return true\r\n      if (filter === \"Inventory\" && !art.location) return true\r\n      if (filter === \"Equipped\" && art.location) return true\r\n      if (filter === art.location) return true\r\n      return false\r\n    },\r\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\r\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\r\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\r\n    levelLow: (art, filter) => filter <= art.level,\r\n    levelHigh: (art, filter) => filter >= art.level,\r\n    rarity: (art, filter) => filter.includes(art.rarity),\r\n    substats: (art, filter) => {\r\n      for (const filterKey of filter)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from '../Data/Artifacts/Artifact'\r\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n//\r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n *\r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n *\r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/**\r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n *\r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   *\r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   *\r\n   * Then\r\n   *\r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   *\r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   *\r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   *\r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n *\r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n"],"names":["CharacterAutocomplete","value","onChange","defaultText","defaultIcon","placeholderText","labelText","showDefault","showInventory","showEquipped","filter","disable","props","t","useTranslation","theme","useTheme","database","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","filterConfigs","useMemo","characterFilterConfigs","characterKeys","_getCharKeys","ck","sort","textForValue","useCallback","imageForValue","icon","faUserShield","src","thumbImgSide","sx","pr","characterOptions","base","push","label","faves","filterFunction","element","allElements","weaponType","allWeaponTypeKeys","favorite","name","map","characterKey","nonFaves","concat","charOptions","autoHighlight","options","clearIcon","undefined","getOptionLabel","option","event","newValue","reason","type","isOptionEqualToValue","getOptionDisabled","renderInput","placeholder","startAdornment","hasValue","renderOption","_getChar","image","text","Suspense","fallback","variant","width","noWrap","isSelected","addlElement","display","flexGrow","ml","mr","height","LocationName","location","characterSheet","component","nameWIthIcon","verticalAlign","ThumbSide","styled","lineHeight","marginTop","spacing","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","backgroundColor","palette","primary","main","transition","dark","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","parseFloat","parseInt","onBlur","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","inputProps","step","onKeyDown","className","placement","cursor","faInfoCircle","MenuItemWithImage","primaryTypographyProps","style","fontWeight","typography","fontWeightMedium","fontWeightRegular","SolidColoredTextField","InputProps","color","hiddenLabel","InputLabelProps","success","paddingTop","paddingBottom","light","border","StatFilterCard","CharacterContext","character","data","DataContext","useBuildSetting","statFilters","buildSetting","buildSettingDispatch","setStatFilters","statKeys","get","input","charEle","remainingKeys","Object","keys","some","k","setFilter","sKey","min","gap","justifyContent","title","flexDirection","entries","statKey","StatFilterItem","close","isFloat","KeyMap","s","onClick","flexBasis","px","textAlign","endAdornment","faTrashAlt","initGlobalSettings","tcMode","ArtifactEditor","lazy","allSubstatFilter","Set","allSubstatKeys","ArtifactCard","artifactId","artifactObj","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","disableEditSetSlot","editor","canExclude","canEquip","extraButtons","databaseArtifact","useArtifact","sheet","ArtifactSheet","setKey","editable","showEditor","setshowEditor","onHideEditor","onShowEditor","wrapperFunc","falseWrapperFunc","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","max","mainStatUnit","levelVariant","floor","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","minHeight","artifactIdToEdit","cancelEdit","condition","wrapper","falseWrapper","position","updateArt","right","bottom","zIndex","pt","alignItems","mb","size","borderRadius","StatIcon","cacheValueString","stars","colored","top","slotIcons","pb","stat","SubstatDisplay","my","valid","probability","toFixed","p","charKey","setArtLocation","arrow","faEdit","faBan","faChartLine","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","clamp","efficiency","effOpacity","clamp01","statName","unit","inFilter","has","alignContent","v","i","SmolProgress","indexOf","opacity","minWidth","bgcolor","artifactSortKeys","artifactSortKeysTC","initialFilterOption","artSetKeys","allArtifactRarities","levelLow","levelHigh","slotKeys","allSlotKeys","mainStatKeys","exclusion","locked","initialArtifactSortFilter","filterOption","ascending","sortType","artifactSortConfigs","effFilterSet","getValue","tieBreaker","artsetkey","mefficiency","prob","artifactFilterConfigs","includes","filterKey","substat","PercentBadge","badgeColor","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","artifact","_target","NaN","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values","artifactID","_getArt","setArtifact","followArt"],"sourceRoot":""}