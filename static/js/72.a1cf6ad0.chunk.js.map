{"version":3,"file":"static/js/72.a1cf6ad0.chunk.js","mappings":"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","sources":["PageCharacter/CharacterInventory.tsx","PageCharacter/CharacterDisplay.tsx","PageCharacter/CharacterRouter.tsx"],"sourcesContent":["import { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Button, CardContent, Divider, Grid, Skeleton, Typography } from '@mui/material';\r\nimport i18next from 'i18next';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport ElementToggle from '../Components/ToggleButton/ElementToggle';\r\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle';\r\nimport CharacterSheet from '../Data/Characters/CharacterSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport useDBState from '../ReactHooks/useDBState';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../Types/consts';\r\nimport { characterFilterConfigs, characterSortConfigs, characterSortKeys } from '../Util/CharacterSort';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport CharacterCard from './CharacterCard';\r\n\r\nfunction initialState() {\r\n  return {\r\n    sortType: characterSortKeys[0],\r\n    ascending: false,\r\n    weaponType: \"\" as WeaponTypeKey | \"\",\r\n    element: \"\" as ElementKey | \"\",\r\n  }\r\n}\r\n\r\nexport default function CharacterInventory(props) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, stateDisplatch] = useDBState(\"CharacterDisplay\", initialState)\r\n\r\n  const [newCharacter, setnewCharacter] = useState(false)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  //set follow, should run only once\r\n  useEffect(() => {\r\n    ReactGA.pageview('/character')\r\n    return database.followAnyChar(forceUpdate)\r\n  }, [forceUpdate, database])\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n\r\n  const deleteCharacter = useCallback(async (cKey: CharacterKey) => {\r\n    const chararcterSheet = await CharacterSheet.get(cKey)\r\n    let name = chararcterSheet?.name\r\n    //use translated string\r\n    if (typeof name === \"object\")\r\n      name = i18next.t(`char_${cKey}_gen:name`)\r\n\r\n    if (!window.confirm(`Are you sure you want to remove ${name}?`)) return\r\n    database.removeChar(cKey)\r\n  }, [database])\r\n\r\n  const editCharacter = useCharSelectionCallback()\r\n\r\n  const { element, weaponType } = state\r\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(database, characterSheets), [database, characterSheets])\r\n  const charKeyList = useMemo(() => sortConfigs && filterConfigs && dbDirty &&\r\n    database._getCharKeys()\r\n      .filter(filterFunction({ element, weaponType, favorite: \"yes\" }, filterConfigs))\r\n      .sort(sortFunction(state.sortType, state.ascending, sortConfigs))\r\n      .concat(\r\n        database._getCharKeys()\r\n          .filter(filterFunction({ element, weaponType, favorite: \"no\" }, filterConfigs))\r\n          .sort(sortFunction(state.sortType, state.ascending, sortConfigs))),\r\n    [dbDirty, database, sortConfigs, state.sortType, state.ascending, element, filterConfigs, weaponType])\r\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <CardDark sx={{ p: 2 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item>\r\n          <WeaponToggle sx={{ height: \"100%\" }} onChange={weaponType => stateDisplatch({ weaponType })} value={state.weaponType} size=\"small\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <ElementToggle sx={{ height: \"100%\" }} onChange={element => stateDisplatch({ element })} value={state.element} size=\"small\" />\r\n        </Grid>\r\n        <Grid item >\r\n          <SortByButton sx={{ height: \"100%\" }}\r\n            sortKeys={characterSortKeys} value={state.sortType} onChange={sortType => stateDisplatch({ sortType })}\r\n            ascending={state.ascending} onChangeAsc={ascending => stateDisplatch({ ascending })} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardDark>\r\n    <Grid container spacing={1}>\r\n      <Suspense fallback={<Grid item xs={12}><Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} /></Grid>}>\r\n        <Grid item xs={12} sm={6} md={4} lg={3} >\r\n          <CardDark sx={{ height: \"100%\", minHeight: 400, width: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <CardContent>\r\n              <Typography sx={{ textAlign: \"center\" }}><Trans t={t} i18nKey=\"addNew\" /></Typography>\r\n            </CardContent>\r\n            <CharacterSelectionModal newFirst show={newCharacter} onHide={() => setnewCharacter(false)} onSelect={editCharacter} />\r\n            <Box sx={{\r\n              flexGrow: 1,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n            >\r\n              <Button onClick={() => setnewCharacter(true)} sx={{\r\n                borderRadius: \"1em\"\r\n              }}>\r\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\r\n              </Button>\r\n            </Box>\r\n          </CardDark>\r\n        </Grid>\r\n        {!!charKeyList && charKeyList.map(charKey =>\r\n          <Grid item key={charKey} xs={12} sm={6} md={4} lg={3} >\r\n            <CharacterCard\r\n              characterKey={charKey}\r\n              onClick={editCharacter}\r\n              footer={<><Divider /><Box sx={{ py: 1, px: 2, display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n                <Box></Box>\r\n                {/* <Button size=\"small\" component={Link} to={{\r\n                  pathname: \"/build\",\r\n                  characterKey: charKey\r\n                } as any} startIcon={<FontAwesomeIcon icon={faCalculator} />}>Build</Button> */}\r\n                <Button size=\"small\" color=\"error\" startIcon={<FontAwesomeIcon icon={faTrash} />} onClick={() => deleteCharacter(charKey)}>Delete</Button>\r\n              </Box></>}\r\n            />\r\n          </Grid>)}\r\n      </Suspense>\r\n    </Grid>\r\n  </Box>\r\n}\r\n","import { Box, Skeleton } from '@mui/material';\r\nimport React, { lazy } from 'react';\r\nimport { Redirect, useHistory, useParams } from 'react-router';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport { allCharacterKeys, CharacterKey } from '../Types/consts';\r\nconst CharacterDisplayCard = lazy(() => import('./CharacterDisplayCard'))\r\nexport default function CharacterDisplay() {\r\n  const history = useHistory()\r\n  let { characterKey } = useParams<{ characterKey?: CharacterKey }>();\r\n  const invalidKey = !allCharacterKeys.includes(characterKey as any ?? \"\")\r\n  if (invalidKey)\r\n    return <Redirect to=\"/character\" />\r\n  return <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    {characterKey && <React.Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n      <CharacterDisplayCard characterKey={characterKey} onClose={() => history.push(\"/character\")}\r\n        footer={<CharDisplayFooter onClose={() => history.push(\"/character\")} characterKey={characterKey} />}\r\n      />\r\n    </React.Suspense>}\r\n  </Box>\r\n}\r\nfunction CharDisplayFooter({ onClose, characterKey }) {\r\n  return <Box display=\"flex\" gap={1} justifyContent=\"space-between\">\r\n    <Box />\r\n    {/* <Button component={Link} to={{\r\n        pathname: \"/build\",\r\n        characterKey\r\n      } as any}\r\n        startIcon={<FontAwesomeIcon icon={faCalculator} />}\r\n      >Generate Builds</Button> */}\r\n\r\n    <CloseButton large onClick={onClose} />\r\n\r\n  </Box>\r\n}\r\n","import { Route, Switch, useRouteMatch } from \"react-router\";\r\nimport CharacterInventory from \"./CharacterInventory\";\r\nimport CharacterDisplay from \"./CharacterDisplay\";\r\n\r\nexport default function CharacterRouter() {\r\n  let match = useRouteMatch();\r\n  return < Switch >\r\n    <Route path={`${match.path}/:characterKey`}>\r\n      <CharacterDisplay />\r\n    </Route>\r\n    <Route path={match.path}>\r\n      <CharacterInventory />\r\n    </Route>\r\n  </Switch >\r\n}"],"names":["initialState","sortType","characterSortKeys","ascending","weaponType","element","CharacterInventory","props","t","useTranslation","database","useContext","DatabaseContext","useDBState","state","stateDisplatch","useState","newCharacter","setnewCharacter","useForceUpdate","dbDirty","forceUpdate","useEffect","ReactGA","followAnyChar","characterSheets","usePromise","CharacterSheet","deleteCharacter","useCallback","cKey","chararcterSheet","name","i18next","window","confirm","removeChar","editCharacter","useCharSelectionCallback","sortConfigs","useMemo","characterSortConfigs","filterConfigs","characterFilterConfigs","charKeyList","_getCharKeys","filter","filterFunction","favorite","sort","sortFunction","concat","Box","my","display","flexDirection","gap","CardDark","sx","p","Grid","container","spacing","item","WeaponToggle","height","onChange","value","size","flexGrow","ElementToggle","SortByButton","sortKeys","onChangeAsc","Suspense","fallback","xs","Skeleton","variant","width","minHeight","sm","md","lg","CardContent","Typography","textAlign","Trans","i18nKey","CharacterSelectionModal","newFirst","show","onHide","onSelect","justifyContent","alignItems","Button","onClick","borderRadius","icon","faPlus","className","map","charKey","CharacterCard","characterKey","footer","Divider","py","px","color","startIcon","faTrash","CharacterDisplayCard","lazy","CharacterDisplay","history","useHistory","useParams","allCharacterKeys","to","onClose","push","CharDisplayFooter","CloseButton","large","CharacterRouter","match","useRouteMatch","path"],"sourceRoot":""}