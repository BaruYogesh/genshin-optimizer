{"version":3,"sources":["Components/StarDisplay.tsx","Assets/Weapon-class-bow-icon.png","Assets/Assets.ts","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Character/CharacterSelection.tsx","Character/Character.ts","StatDependency.ts","Weapon/WeaponUtil.ts"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterSelectionDropdownList","onSelect","weaponTypeKey","database","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","getAll","_getCharKeys","filter","cKey","sort","characterKey","DropDownItem","characterSheet","get","Item","onClick","nameWIthIcon","CharSelectionButton","useState","show","setshow","HeaderIconDisplay","src","thumbImg","roundedCircle","name","as","ButtonGroup","CharacterSelectionModal","onHide","toggle","rarity","level","filterReducer","oldFilter","newFilter","Object","sortBy","setsortBy","useReducer","elementalFilter","elementalFilterDispatch","weaponFilter","weaponFilterDispatch","sortingFunc","ck","_getChar","star","characterKeyList","Set","allCharacterKeys","elementKey","a","b","diff","size","contentClassName","bg","text","Header","xs","allElements","eleKey","variant","uncoloredEleIcons","allWeaponTypeKeys","weaponType","type","value","onChange","entries","key","faTimes","Body","CharacterBtn","character","weapon","equippedWeapon","_getWeapon","undefined","weaponSheet","WeaponSheet","artifactSheets","ArtifactSheet","stats","useMemo","Character","calculateBuild","lg","md","thumbnail","getLevelString","constellation","tlvl","auto","skill","burst","StatIcon","this","Error","getElementalName","elementalKey","ElementalData","ascensionMaxLevel","ascension","getTalentFieldValue","field","defVal","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","includes","characterStatBase","getStatValueWithOverride","mainStatAssumptionLevel","artifacts","fromEntries","equippedArtifacts","artid","_getArt","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","setEffectsStats","deepClone","values","forEach","art","mainStatKey","mainStatValue","Math","max","min","substats","substat","mergeStats","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","id","dependencies","GetDependencies","modifiers","PreprocessFormulas","preprocessedStats","formula","hitMode","infusionAura","reactionMode","talent","defaultInitialWeapon","statKeys","characterHP","getBase","characterDEF","characterATK","characterLevel","characterEle","refineIndex","refine","overrides","hasOwnProperty","specialStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","getTalentStatsAll","s","weaponATK","getMainStatValue","weaponSubKey","getSubStatKey","getSubStatValue","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","addFormula","fields","parseSection","section","sheets","talentKey","sections","formKey","document","num","artifactSheet","setEffects","setNum","GetFormulaDependency","dependency","Proxy","target","prop","receiver","add","toString","formulaKeyDependency","freeze","Formulas","baseStat","StatData","found","InsertDependencies","flatMap","dep","has","k","path","Formula","getCurrent","getStage","initialWeapon","defaultInitialWeaponKey","location"],"mappings":"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","file":"static/js/0.2cdb4594.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","import bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo, useReducer, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Image, Modal, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Assets from \"../Assets/Assets\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allCharacterKeys, allElements, allWeaponTypeKeys, CharacterKey, WeaponTypeKey } from \"../Types/consts\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\nimport { Stars } from \"../Components/StarDisplay\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../Components/StatIcon\";\r\nimport Character from './Character'\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\n\r\nexport function CharacterSelectionDropdownList({ onSelect, weaponTypeKey }: { onSelect: (ckey: CharacterKey) => void, weaponTypeKey?: WeaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  return <>{database._getCharKeys().filter(cKey =>\r\n    weaponTypeKey ? (characterSheets?.[cKey]?.weaponTypeKey === weaponTypeKey) : true\r\n  ).sort().map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>{characterSheet.nameWIthIcon}</Dropdown.Item>\r\n}\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\nexport function CharSelectionButton({ characterSheet, onSelect, filter }: { characterSheet?: CharacterSheet, onSelect: (cKey: CharacterKey) => void, filter?: characterFilter }) {\r\n  const [show, setshow] = useState(false)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>\r\n    <Button as={ButtonGroup} onClick={() => setshow(true)} >{HeaderIconDisplay}</Button>\r\n    <CharacterSelectionModal show={show} onHide={() => setshow(false)} onSelect={onSelect} filter={filter} />\r\n  </>\r\n}\r\n\r\nconst toggle = {\r\n  rarity: \"Rarity\",\r\n  level: \"Level\",\r\n  name: \"Name\"\r\n} as const\r\n\r\nfunction filterReducer(oldFilter, newFilter) {\r\n  if (newFilter === oldFilter)\r\n    return \"\"\r\n  return newFilter\r\n}\r\n\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true }: CharacterSelectionModalProps) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(() => Object.keys(toggle)[0])\r\n  const [elementalFilter, elementalFilterDispatch] = useReducer(filterReducer, \"\")\r\n  const [weaponFilter, weaponFilterDispatch] = useReducer(filterReducer, \"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n\r\n  const sortingFunc = {\r\n    level: (ck) => database._getChar(ck)?.level ?? 0,\r\n    rarity: (ck) => characterSheets?.[ck]?.star,\r\n    name: (ck) => characterSheets?.[ck]?.name\r\n  }\r\n\r\n  const characterKeyList = !characterSheets ? [] : [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey])).filter(cKey => {\r\n    if (elementalFilter && elementalFilter !== characterSheets?.[cKey]?.elementKey) return false\r\n    if (weaponFilter && weaponFilter !== characterSheets?.[cKey]?.weaponTypeKey) return false\r\n    return true\r\n  }).sort((a, b) => {\r\n    if (sortBy === \"name\") {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      // names must be equal\r\n      return 0;\r\n    }\r\n    if (sortBy === \"level\") {\r\n      const diff = sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n    } else {\r\n      const diff = sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n    }\r\n  })\r\n\r\n  if (!characterSheets) return null\r\n  return <Modal show={show} size=\"xl\" contentClassName=\"bg-transparent\" onHide={onHide}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              {allElements.map(eleKey => <Button key={eleKey} variant={(!elementalFilter || elementalFilter === eleKey) ? eleKey : \"secondary\"} className=\"py-1 px-2 text-white\" onClick={() => elementalFilterDispatch(eleKey)} >\r\n                <h3 className=\"mb-0\">{uncoloredEleIcons[eleKey]}</h3>\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col>\r\n            <ButtonGroup >\r\n              {allWeaponTypeKeys.map(weaponType =>\r\n                <Button key={weaponType} variant={(!weaponFilter || weaponFilter === weaponType) ? \"success\" : \"secondary\"} className=\"py-1 px-2\" onClick={() => weaponFilterDispatch(weaponType)}>\r\n                  <h3 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponType]} className=\"inline-icon\" /></h3></Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <span>Sort by: </span>\r\n            <ToggleButtonGroup type=\"radio\" name=\"level\" value={sortBy} onChange={setsortBy}>\r\n              {Object.entries(toggle).map(([key, text]) =>\r\n                <ToggleButton key={key} value={key} variant={sortBy === key ? \"success\" : \"primary\"}>\r\n                  <h6 className=\"mb-0\">{text}</h6>\r\n                </ToggleButton>)}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button onClick={onHide} variant=\"danger\"><FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body><Row>\r\n        {characterKeyList.map(characterKey => <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect(characterKey) }} />)}\r\n      </Row></Card.Body>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weapon = character?.equippedWeapon ? database._getWeapon(character.equippedWeapon) : undefined\r\n  const weaponSheet = usePromise(weapon ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets, database])\r\n  if (!characterSheet) return null\r\n  return <Col key={characterKey} lg={3} md={4} className=\"mb-2\">\r\n    <Button className=\"w-100\" variant=\"darkcontent\" onClick={onClick}>\r\n      <h5>{characterSheet.name}</h5>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          {stats && character ? <>\r\n            <h5 className=\"mb-0\">Lv. {Character.getLevelString(character)} {`C${character.constellation}`}</h5>\r\n            <h6 className=\"mb-0\">\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.auto + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.skill + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.burst + 1}</strong></Badge>\r\n            </h6>\r\n          </> : <>\r\n            <h4><Badge variant=\"primary\">NEW</Badge></h4>\r\n          </>}\r\n          <h6 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h6>\r\n          <h3 className=\"mb-0\">{characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <Image src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n        </Col>\r\n      </Row>\r\n    </Button>\r\n  </Col>\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { ascensionMaxLevel, characterStatBase } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { ICachedArtifact } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allElements, ArtifactSetKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { mergeStats } from \"../Util/StatUtil\";\r\nimport { defaultInitialWeapon } from \"../Weapon/WeaponUtil\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey: ElementKey | \"physical\"): string =>\r\n    ElementalData[elementalKey].name\r\n  static getLevelString = (character: ICachedCharacter): string =>\r\n    `${character.level}/${ascensionMaxLevel[character.ascension]}`\r\n\r\n  static getTalentFieldValue = (field: IFieldDisplay, key: keyof IFieldDisplay, stats = {}, defVal = \"\"): any => {\r\n    if (!field[key]) return defVal\r\n    return evalIfFunc(field[key] as any, stats!)\r\n  }\r\n\r\n  static hasOverride = (character: ICachedCharacter, statKey): boolean => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\")\r\n    if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\")\r\n    if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\")\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICachedCharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string): number => {\r\n    if (statKey === \"enemyLevel\") return character.level\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    return 0\r\n  }\r\n  static getStatValueWithOverride = (character: ICachedCharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string) => {\r\n    if (Character.hasOverride(character, statKey)) return character.baseStatOverrides?.[statKey] ?? 0\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    const artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, database._getArt(artid)]))\r\n    const initialStats = Character.createInitialStats(character, database, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats: ICalculatedStats, artifacts: Dict<SlotKey, ICachedArtifact>, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>): ICalculatedStats => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    const artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(stats.mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    mergeStats(stats, artifactSetEffectsStats)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey, setNumKey]) => {\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      mergeStats(stats, condStats)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats, stats?.modifiers)\r\n    const { initialStats: preprocessedStats, formula } = PreprocessFormulas(dependencies, stats)\r\n    formula(preprocessedStats)\r\n    return { ...stats, ...preprocessedStats }\r\n  }\r\n\r\n  static createInitialStats = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { key: characterKey, elementKey, level, ascension, hitMode, infusionAura, reactionMode, talent, constellation, equippedArtifacts, conditionalValues = {}, equippedWeapon } = character\r\n    const weapon = database._getWeapon(equippedWeapon) ?? defaultInitialWeapon(characterSheet.weaponTypeKey) // need to ensure all characters have a weapon\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"enemyLevel\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterHP = characterSheet.getBase(\"hp\", level, ascension)\r\n    initialStats.characterDEF = characterSheet.getBase(\"def\", level, ascension)\r\n    initialStats.characterATK = characterSheet.getBase(\"atk\", level, ascension)\r\n    initialStats.characterLevel = level\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = Object.fromEntries(Object.entries(talent ?? {}).map(([key, value]) => [key, value - 1])) as any;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    initialStats.weapon = { key: weapon.key, refineIndex: weapon.refine - 1 }\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    const specialStatKey = characterSheet.getSpecializedStat(ascension)\r\n    if (specialStatKey) {\r\n      const specializedStatVal = characterSheet.getSpecializedStatVal(ascension)\r\n      mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n    }\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponATK = weaponSheet.getMainStatValue(weapon.level, weapon.ascension)\r\n    initialStats.weaponATK = weaponATK\r\n    const weaponSubKey = weaponSheet.getSubStatKey()\r\n    if (weaponSubKey) mergeStats(initialStats, { [weaponSubKey]: weaponSheet.getSubStatValue(weapon.level, weapon.ascension) })\r\n    mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (keys[0] === \"character\" && keys[3] === \"talents\" && keys[4] !== elementKey) return //fix for Traveler, make sure conditionals match element.\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  //TODO: this needs weaponSheet/artifactsheets as a parameter.\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    const addFormula = (fields, key) => fields.forEach(field => {\r\n      if (!field.formula || !field?.canShow?.(stats)) return\r\n      if (!charFormulas[key]) charFormulas[key] = []\r\n      charFormulas[key].push((field.formula as any).keys)\r\n    })\r\n    const parseSection = (section, key) => {\r\n      //conditional\r\n      if (section.conditional && Conditional.canShow(section.conditional, stats)) {\r\n        const { fields }: { fields?: Array<IFieldDisplay> } = Conditional.resolve(section.conditional, stats, null)\r\n        fields && addFormula(fields, key)\r\n      }\r\n      //fields\r\n      if (section.fields) addFormula(section.fields, key)\r\n    }\r\n    talentSheet && Object.entries(talentSheet.sheets).forEach(([talentKey, { sections }]) => {\r\n      if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n      sections.forEach(section => parseSection(section, `talentKey_${talentKey}`))\r\n    })\r\n\r\n    const formKey = `weapon_${stats.weapon.key}`\r\n    weaponSheet.document && weaponSheet.document.map(section => parseSection(section, formKey))\r\n\r\n    stats.setToSlots && Object.entries(stats.setToSlots).map(([setKey, slots]) => [setKey, slots.length]).forEach(([setKey, num]) => {\r\n      const artifactSheet = artifactSheets[setKey] as ArtifactSheet\r\n      if (!artifactSheet) return\r\n      Object.entries(artifactSheet.setEffects).forEach(([setNum, { document }]) => {\r\n        if (num < parseInt(setNum)) return\r\n        document && document.map(section => parseSection(section, `artifact_${setKey}_${setNum}`))\r\n      })\r\n    })\r\n\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n}","import Formula from \"./Formula\"\r\nimport { Formulas, getStage, StatData } from \"./StatData\"\r\nimport { IBaseStat } from \"./Types/character\"\r\nimport { Modifier } from \"./Types/stats\"\r\n\r\n// Generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula: (s) => number) {\r\n  const dependency: Set<string> = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop.toString()) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.entries(Formulas).map(([key, value]) => [key, GetFormulaDependency(value)])\r\n)) as Dict<string, string[]>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(baseStat: IBaseStat, modifiers: Modifier = {}, keys = Object.keys(StatData)): Dependencies {\r\n  const found = new Set<string>()\r\n  const dependencies = [new Set<string>(), new Set<string>()]\r\n  keys.forEach(key => InsertDependencies(baseStat, key, modifiers, dependencies, found))\r\n  return dependencies.flatMap(dep => [...dep])\r\n}\r\nfunction InsertDependencies(baseStat: IBaseStat, key: string, modifiers: Modifier, dependencies: Set<string>[], found: Set<string>) {\r\n  if (found.has(key)) return\r\n  found.add(key)\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(baseStat, k, modifiers, dependencies, found));\r\n  (modifiers[key] ?? []).forEach(path => Formula.getCurrent(path, baseStat)[1].forEach(k =>\r\n    InsertDependencies(baseStat, k, modifiers, dependencies, found)))\r\n  dependencies[getStage(key)].add(key)\r\n}\r\n\r\ntype Dependencies = string[]\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","import { WeaponKey, WeaponTypeKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\n\r\nfunction defaultInitialWeaponKey(type: WeaponTypeKey): WeaponKey {\r\n  switch (type) {\r\n    case \"sword\": return \"DullBlade\"\r\n    case \"bow\": return \"HuntersBow\"\r\n    case \"claymore\": return \"WasterGreatsword\"\r\n    case \"polearm\": return \"BeginnersProtector\"\r\n    case \"catalyst\": return \"ApprenticesNotes\"\r\n    default: return \"DullBlade\"\r\n  }\r\n}\r\nexport const defaultInitialWeapon = (type: WeaponTypeKey): ICachedWeapon =>\r\n  initialWeapon(defaultInitialWeaponKey(type))\r\n\r\nexport const initialWeapon = (key: WeaponKey): ICachedWeapon => ({\r\n  id: \"\",\r\n  key,\r\n  level: 1,\r\n  ascension: 0,\r\n  refine: 1,\r\n  location: \"\"\r\n})"],"sourceRoot":""}