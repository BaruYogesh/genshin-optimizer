{"version":3,"sources":["DocumentationPage/DocumentationDisplay.tsx","Components/Card/CardLight.tsx","Components/Card/CardDark.tsx","../node_modules/@mui/material/Card/cardClasses.js","../node_modules/@mui/material/Card/Card.js","../node_modules/@mui/material/CardContent/cardContentClasses.js","../node_modules/@mui/material/CardContent/CardContent.js"],"names":["HomeDisplay","props","ReactGA","pageview","routeMatch","useRouteMatch","path","strict","sensitive","currentTab","params","slug","basename","sx","my","container","px","py","item","flexGrow","variant","color","spacing","xs","md","height","orientation","value","aria-label","borderRight","borderColor","label","component","Link","to","fallback","width","ArtifactSetKeyPane","WeaponKeyPane","CharacterKeyPane","StatKeyPane","Overview","gutterBottom","CodeBlock","text","statKeysCode","map","k","StatData","name","endsWith","join","t","useTranslation","Set","allArtifactSets","artSetKeysCode","sort","allCharacterKeys","charKeysCode","allWeaponKeys","weaponKeysCode","LineNumber","styled","overflow","userSelect","theme","palette","secondary","resize","border","backgroundColor","CodeArea","overflowY","overflowX","fontFamily","whiteSpace","info","light","lines","split","length","lineNums","Array","from","keys","i","display","flexDirection","disabled","spellCheck","rows","unselectable","CardLight","Card","contentLight","main","CardDark","contentDark","getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","Paper","overridesResolver","styles","root","React","inProps","ref","useThemeProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","clsx","elevation","undefined","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","CardContent","as"],"mappings":"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","file":"static/js/28.15229550.chunk.js","sourcesContent":["import { Box, CardContent, Divider, Grid, Skeleton, styled, Tab, Tabs, Typography } from \"@mui/material\";\r\nimport React, { Suspense } from \"react\";\r\nimport ReactGA from 'react-ga';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { HashRouter, Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport CardDark from \"../Components/Card/CardDark\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport SqBadge from \"../Components/SqBadge\";\r\nimport { StatData } from \"../StatData\";\r\nimport { allArtifactSets, allCharacterKeys, allWeaponKeys } from \"../Types/consts\";\r\n\r\nexport default function HomeDisplay(props: any) {\r\n  // const { t } = useTranslation(\"documentation\")\r\n  ReactGA.pageview('/doc')\r\n\r\n  const routeMatch = useRouteMatch({\r\n    path: \"/doc/:slug\",\r\n    strict: true,\r\n    sensitive: true\r\n  });\r\n  const currentTab = (routeMatch?.params as any)?.slug ?? \"\"\r\n\r\n  return <HashRouter basename=\"/doc/\">\r\n    <CardDark sx={{ my: 1 }}>\r\n      <Grid container sx={{ px: 2, py: 1 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Typography variant=\"h6\">\r\n            Documentation\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <Typography variant=\"h6\">\r\n            <SqBadge color=\"info\">Version. 1</SqBadge>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <CardContent>\r\n        <Grid container spacing={1}>\r\n          <Grid item xs={12} md={2}>\r\n            <CardLight sx={{ height: \"100%\" }}>\r\n              <Tabs\r\n                orientation=\"vertical\"\r\n                value={currentTab}\r\n                aria-label=\"Documentation Navigation\"\r\n                sx={{ borderRight: 1, borderColor: 'divider' }}\r\n              >\r\n                <Tab label=\"Overview\" value=\"\" component={Link} to=\"/\" />\r\n                <Tab label={<code>StatKey</code>} value=\"StatKey\" component={Link} to=\"/StatKey\" />\r\n                <Tab label={<code>ArtifactSetKey</code>} value=\"ArtifactSetKey\" component={Link} to=\"/ArtifactSetKey\" />\r\n                <Tab label={<code>CharacterKey</code>} value=\"CharacterKey\" component={Link} to=\"/CharacterKey\" />\r\n                <Tab label={<code>WeaponKey</code>} value=\"WeaponKey\" component={Link} to=\"/WeaponKey\" />\r\n              </Tabs>\r\n            </CardLight>\r\n          </Grid>\r\n          <Grid item xs={12} md={10}>\r\n            <CardLight sx={{ height: \"100%\" }}>\r\n              <CardContent>\r\n                <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}>\r\n                  <Switch>\r\n                    <Route path=\"/ArtifactSetKey\" component={ArtifactSetKeyPane} />\r\n                    <Route path=\"/WeaponKey\" component={WeaponKeyPane} />\r\n                    <Route path=\"/CharacterKey\" component={CharacterKeyPane} />\r\n                    <Route path=\"/StatKey\" component={StatKeyPane} />\r\n                    <Route path=\"/\" component={Overview} />\r\n                  </Switch>\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </HashRouter >\r\n}\r\n\r\nconst goodCode = `interface IGOOD {\r\n  format: \"GOOD\" //A way for people to recognize this format.\r\n  version: number //API version.\r\n  source: string //the app that generates this data.\r\n  characters?: ICharacter[]\r\n  artifacts?: IArtifact[]\r\n  weapons?: IWeapon[]\r\n}`\r\n\r\nconst artifactCode = `interface IArtifact {\r\n  setKey: SetKey //e.g. \"GladiatorsFinale\"\r\n  slotKey: SlotKey //e.g. \"plume\"\r\n  level: number //0-20 inclusive\r\n  rarity: number //1-5 inclusive\r\n  mainStatKey: StatKey\r\n  location: CharacterKey|\"\" //where \"\" means not equipped.\r\n  lock: boolean //Whether the artifact is locked in game.\r\n  substats: ISubstat[]\r\n}\r\n  \r\ninterface ISubstat {\r\n  key: StatKey //e.g. \"critDMG_\"\r\n  value: number //e.g. 19.4\r\n}\r\n\r\ntype SlotKey = \"flower\" | \"plume\" | \"sands\" | \"goblet\" | \"circlet\"`\r\n\r\nconst weaponCode = `interface IWeapon {\r\n  key: WeaponKey //\"CrescentPike\"\r\n  level: number //1-90 inclusive\r\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\r\n  refinement: number //1-5 inclusive\r\n  location: CharacterKey | \"\" //where \"\" means not equipped.\r\n  lock: boolean //Whether the weapon is locked in game.\r\n}`\r\nconst characterCode = `interface ICharacter {\r\n  key: CharacterKey //e.g. \"Rosaria\"\r\n  level: number //1-90 inclusive\r\n  constellation: number //0-6 inclusive\r\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\r\n  talent: { //does not include boost from constellations. 1-15 inclusive\r\n    auto: number\r\n    skill: number\r\n    burst: number\r\n  }\r\n}`\r\n\r\nfunction Overview() {\r\n  return <>\r\n    <Typography gutterBottom variant=\"h4\">Genshin Open Object Description (GOOD)</Typography>\r\n    <Typography gutterBottom><strong>GOOD</strong> is a data format description to map Genshin Data into a parsable JSON. This is intended to be a standardized format to allow Genshin developers/programmers to transfer data without needing manual conversion.</Typography>\r\n    <Typography gutterBottom>As of version 6.0.0, Genshin Optimizer's database export conforms to this format.</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={goodCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <br />\r\n    <Typography gutterBottom variant=\"h4\">Artifact data representation</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={artifactCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <br />\r\n    <Typography gutterBottom variant=\"h4\">Weapon data representation</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={weaponCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <br />\r\n    <Typography gutterBottom variant=\"h4\">Character data representation</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={characterCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </>\r\n}\r\n\r\nfunction StatKeyPane() {\r\n  // const { t } = useTranslation()\r\n  const statKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n  const statKeysCode = `type StatKey\\n  = ${statKeys.map(k => `\"${k}\" //${StatData[k]?.name}${k?.endsWith('_') ? \"%\" : \"\"}`).join(`\\n  | `)}`\r\n  return <>\r\n    <Typography gutterBottom variant=\"h4\">StatKey</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={statKeysCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </>\r\n}\r\nfunction ArtifactSetKeyPane() {\r\n  const { t } = useTranslation([...new Set(allArtifactSets)].map(k => `artifact_${k}_gen`))\r\n  const artSetKeysCode = `type ArtifactSetKey\\n  = ${[...new Set(allArtifactSets)].sort().map(k => `\"${k}\" //${t(`artifact_${k}_gen:setName`)}`).join(`\\n  | `)}`\r\n  return <>\r\n    <Typography gutterBottom variant=\"h4\">ArtifactSetKey</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={artSetKeysCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </>\r\n}\r\nfunction CharacterKeyPane() {\r\n  const { t } = useTranslation([...new Set(allCharacterKeys)].map(k => `char_${k}_gen`))\r\n  const charKeysCode = `type CharacterKey\\n  = ${[...new Set(allCharacterKeys)].sort().map(k => `\"${k}\" //${t(`char_${k}_gen:name`)}`).join(`\\n  | `)}`\r\n  return <>\r\n    <Typography gutterBottom variant=\"h4\">CharacterKey</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={charKeysCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </>\r\n}\r\nfunction WeaponKeyPane() {\r\n  const { t } = useTranslation([...new Set(allWeaponKeys)].map(k => `weapon_${k}_gen`))\r\n  const weaponKeysCode = `type WeaponKey\\n  = ${[...new Set(allWeaponKeys)].sort().map(k => `\"${k}\" //${t(`weapon_${k}_gen:name`)}`).join(`\\n  | `)}`\r\n  return <>\r\n    <Typography gutterBottom variant=\"h4\">WeaponKey</Typography>\r\n    <CardDark>\r\n      <CardContent>\r\n        <CodeBlock text={weaponKeysCode} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </>\r\n}\r\n\r\n\r\nconst LineNumber = styled(\"textarea\")(({ theme }) => ({\r\n  width: \"2em\", overflow: \"hidden\", userSelect: \"none\", color: theme.palette.text.secondary, resize: \"none\", border: \"none\",\r\n  \"&:disabled\": {\r\n    backgroundColor: \"transparent\"\r\n  }\r\n}))\r\n\r\nconst CodeArea = styled(\"textarea\")(({ theme }) => ({\r\n  \"&:disabled\": {\r\n    backgroundColor: \"transparent\"\r\n  },\r\n  width: \"100%\",\r\n  overflowY: \"auto\",\r\n  overflowX: \"auto\",\r\n  fontFamily: \"monospace\",\r\n  border: \"none\",\r\n  // padding: 1em;\r\n  whiteSpace: \"pre\",\r\n  backgroundColor: \"transparent\",\r\n  resize: \"none\",\r\n  color: theme.palette.info.light\r\n}))\r\nfunction CodeBlock({ text }) {\r\n  const lines = text.split(/\\r\\n|\\r|\\n/).length + 1\r\n  const lineNums = Array.from(Array(lines).keys()).map(i => i + 1).join('\\n')\r\n\r\n  return <Box display=\"flex\" flexDirection=\"row\">\r\n    <LineNumber disabled={true} spellCheck=\"false\" aria-label='Code Sample' rows={lines} value={lineNums} unselectable=\"on\" />\r\n    <CodeArea sx={{ flexGrow: 1 }} disabled={true} spellCheck=\"false\" aria-label='Code Sample' rows={lines} value={text} />\r\n  </Box>\r\n}","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;"],"sourceRoot":""}