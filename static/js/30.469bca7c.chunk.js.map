{"version":3,"file":"static/js/30.469bca7c.chunk.js","mappings":"mYAsBe,SAASA,EAAT,GAA2I,IAA3GC,EAA0G,EAA1GA,KAAMC,EAAoG,EAApGA,OAAQC,EAA4F,EAA5FA,SAA4F,IAAlFC,OAAAA,OAAkF,MAAzE,kBAAM,GAAmE,EAA/CC,EAA+C,EAA7DC,aACpFC,GAAeC,EAAAA,EAAAA,GAAWC,EAAAA,GAAAA,OAAoB,IACpD,GAAwCC,EAAAA,EAAAA,UAAQ,OAAqBL,QAArB,IAAqBA,EAAAA,EAAoB,IAAzF,eAAOC,EAAP,KAAqBK,EAArB,MAEAC,EAAAA,EAAAA,YAAU,kBAAMP,GAAoBM,EAAgBN,KAAmB,CAACA,IAExE,IAAMQ,EAAgBN,GAAoB,OAAI,IAAIO,IAAIC,EAAAA,KAAgBX,QAAO,SAAAY,GAAI,OAAIZ,EAAOG,EAAaS,OACtGZ,QAAO,SAAAY,GAAS,IAAD,EACd,OAAIV,GAAgBA,KAAY,OAAKC,QAAL,IAAKA,GAAL,UAAKA,EAAeS,UAApB,aAAK,EAAsBC,eAG5DC,MAAK,SAACC,EAAGC,GAAJ,mBAAU,iBAACb,QAAD,IAACA,GAAD,UAACA,EAAea,UAAhB,aAAC,EAAmBC,cAApB,QAA8B,IAA9B,iBAAoCd,QAApC,IAAoCA,GAApC,UAAoCA,EAAeY,UAAnD,aAAoC,EAAmBE,cAAvD,QAAiE,MAL9C,GAOrC,OAAKd,GAEE,SAAC,IAAD,CAAce,KAAMrB,EAAMsB,QAASrB,EAAnC,UACL,UAAC,IAAD,YACE,SAAC,IAAD,CAAasB,GAAI,CAAEC,GAAI,GAAvB,UACE,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,SAAC,KAAD,CAAMC,MAAI,EAACC,SAAU,EAArB,UACE,SAAC,IAAD,CAAcC,MAAOvB,EAAcwB,SAAUnB,EAAiBoB,WAAY1B,EAAkB2B,KAAK,aAEnG,SAAC,KAAD,CAAML,MAAI,EAAV,UACE,SAAC,IAAD,CAAaM,QAAS/B,YAI5B,SAAC,IAAD,KACA,SAAC,IAAD,WAAa,SAAC,KAAD,CAAMwB,WAAS,EAACQ,QAAS,EAAzB,SACVrB,EAAasB,KAAI,SAAAC,GAAc,IAAD,EACvBC,EAAc9B,EAAa6B,GACjC,OAAO,SAAC,KAAD,CAAMT,MAAI,EAAiBW,GAAI,EAAGC,GAAI,EAAtC,UACL,SAAC,IAAD,CAAWf,GAAI,CAAEgB,OAAQ,QAAzB,UACE,UAAC,IAAD,CAAgBP,QAAS,WAAQ/B,IAAUC,EAASiC,IAAcZ,GAAI,CAAEiB,QAAS,QAAjF,WACE,SAAC,IAAD,CAAKC,UAAU,MAAMC,IAAKN,EAAYO,IAAKpB,GAAI,CAAEqB,MAAO,IAAKL,OAAQ,QAAUM,UAAS,gBAAWT,EAAYhB,OAAvB,WACxF,UAAC,IAAD,CAAKG,GAAI,CAAEI,SAAU,EAAGmB,GAAI,GAA5B,WACE,SAAC,IAAD,CAAYC,QAAQ,YAApB,SAAiCX,EAAYY,QAC7C,UAAC,IAAD,YAAY,SAAC,IAAD,CAASN,IAAG,UAAEO,EAAAA,EAAAA,mBAAF,aAAE,EAAqBb,EAAYpB,cAA3D,KAA2E,SAAC,IAAD,CAAOkC,MAAOd,EAAYhB,OAAQ+B,SAAO,gBANrGhB,WAa3B,SAAC,IAAD,KACA,SAAC,IAAD,CAAaZ,GAAI,CAAEC,GAAI,GAAvB,UACE,SAAC,IAAD,CAAa4B,OAAK,EAACpB,QAAS/B,WAjCR,O,0qBCoD5B,OArEA,YAA8E,IAAD,IAA5CoD,SAAAA,OAA4C,SAC3E,GAAqDC,EAAAA,EAAAA,YAAWC,EAAAA,GAAxDC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,wBAEjBC,GAAaL,EAAAA,EAAAA,YAAWM,EAAAA,GAAxBD,SACFE,GAAUC,EAAAA,EAAAA,MACVC,GAAOC,EAAAA,EAAAA,cACX,SAAAC,GAAK,OAAIJ,EAAQK,KAAK,CACpBC,SAAU,YACVC,MAAO,CACLC,YAAaJ,OAEN,CAACJ,IACRS,GAAiB/D,EAAAA,EAAAA,GAAWgE,EAAAA,EAAAA,OAAsB,IAGxD,GAAsBC,EAAAA,GAAAA,KAAbC,GAAT,gBACA9D,EAAAA,EAAAA,YAAU,kBAAMgD,EAASe,aAAaD,MAEtC,IAAME,GAAYX,EAAAA,EAAAA,cAAY,WAC5B,GAAKY,OAAOC,QAAQ,+DAApB,CACA,IAAMxB,EAAWyB,OAAOC,YAAYC,GAAAA,GAAAA,KAAgB,SAAAC,GAAC,MAAI,CAACA,EAAGzB,EAAK0B,IAAIC,GAAAA,GAAAA,IAAUF,GAAGG,IAAIxD,WACvF+B,EAAS0B,eAAe5B,EAAU6B,IAAKjC,MACtC,CAACI,EAAWD,EAAMG,IAEf4B,GAAcvB,EAAAA,EAAAA,cAAY,WACzBP,GACAmB,OAAOC,QAAQ,uEACpBlB,EAAS0B,eAAe5B,EAAU6B,KAAKE,EAAAA,EAAAA,GAAaR,GAAAA,IAAa,SAAAS,GAAC,MAAI,SACrE,CAAChC,EAAWE,IACT+B,EAASV,GAAAA,GAAAA,KAAgB,SAAAW,GAAO,OAAInC,EAAK0B,IAAIC,GAAAA,GAAAA,IAAUQ,GAASP,IAAIxD,SACpEgE,GAAaC,EAAAA,EAAAA,UAAQ,kBAAMvB,GAAkBC,EAAAA,EAAAA,WAAyBD,EAAgBd,KAAO,CAACc,EAAgBd,IACpH,OAAO,mCACL,WAACsC,EAAA,EAAD,CAAWvE,GAAI,CAAEwE,GAAI,GAArB,WACE,UAACC,EAAA,EAAD,WACE,UAACC,GAAA,EAAD,OAEF,UAACC,EAAA,EAAD,KACA,UAACF,EAAA,EAAD,CAAazE,GAAI,CAAEC,GAAI,GAAvB,UACE,WAAC2E,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACE,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAAV,SACG2B,GAAW,UAAC+C,EAAA,EAAD,CAAQpE,QAAS2C,EAAW9B,UAAU,OAAtC,8BAAwE,UAACuD,EAAA,EAAD,CAAQC,MAAM,QAAQrE,QAASuD,EAA/B,sCAEtF,UAACY,EAAA,GAAD,CAAMzE,MAAI,EAACC,SAAU,KACrB,UAACwE,EAAA,GAAD,CAAMzE,MAAI,EAAV,WAAcgC,IAA2B,UAAC4C,EAAA,EAAD,CAAM/E,GAAI,CAAEgF,EAAG,EAAGC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,QAAQC,OAAlD,UAA0D,UAACC,EAAA,EAAD,WAAY,8DAAqCnD,oBAI1J,WAACyC,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACE,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIC,GAAI,EAAGzE,GAAI,EAAGE,QAAQ,OAAOwE,cAAc,SAASC,IAAK,EAA5E,SACG3C,GAAkBsB,GAAcd,OAAOoC,QAAQtB,GAAY1D,KAAI,+BAAEiF,EAAF,KAAUC,EAAV,YAC9D,WAACtB,EAAA,EAAD,CAAwBvE,GAAI,CAAEI,SAAU,GAAxC,WACE,UAAC0F,EAAA,EAAD,CAAYC,QAAQ,UAACC,EAAA,EAAD,CAASxF,KAAM,EAAGR,GAAI,CAAEiG,GAAI,GAAK9E,IAAK4B,EAAe6C,GAAQM,aAAgBC,MAAOpD,EAAe6C,GAAQnE,KAAM2E,qBAAsB,CAAE5E,QAAS,gBACtK,UAACmD,EAAA,EAAD,KACA,UAACF,EAAA,EAAD,WACE,UAACG,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAG+E,cAAc,SAASzE,OAAO,OAA1D,UACE,UAAC4D,EAAA,GAAD,CAAMzE,MAAI,EAACc,QAAQ,OAAOwE,cAAc,SAASC,IAAK,EAAtD,SACGG,EAAalF,KAAI,SAAA0F,GAAS,OAAI,UAACC,EAAA,EAAD,CAA2CV,OAAQA,EAAQS,UAAWA,GAA/CT,EAASS,cANvDT,QAanBzB,EAAOxD,KAAI,SAAAkD,GAAE,QAAMA,IAAM,UAACe,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,EAAGxE,GAAI,EAAtB,UACxB,UAACwF,EAAA,EAAD,CAAcC,WAAY3C,EAAI1B,wBAAyBA,EAAyBsE,OAAQjE,KADlCqB,a,iOC7D/C,SAAS6C,KACtB,OAAO,WAAC,KAAD,CAAKzF,QAAQ,OAAOwE,cAAc,SAASC,IAAK,EAAGiB,WAAW,UAA9D,WACL,UAACC,GAAD,KACA,UAACC,GAAD,KACA,UAACjC,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,UACGoG,EAAAA,EAAAA,IAAM,EAAG,GAAGnG,KAAI,SAAAoG,GAAC,OAAI,UAACnC,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIxE,GAAI,EAAGD,GAAI,EAA9B,UACpB,UAACkG,GAAD,CAAiBC,MAAOF,KADkCA,WAMlE,IAAMG,GAAiB,CACrB3B,GAAI,GAAIC,GAAI,EAAGzE,GAAI,EAAGD,GAAI,GAErB,SAAS8F,KAAmB,IAAD,MAChC,GAA0B7E,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,EAAR,EAAQA,KAAMkF,EAAd,EAAcA,QACRC,EAAYnF,EAAKoF,cACjBC,EAAgD,GAOtD,OANA/D,OAAOoC,QAAP,UAAeyB,EAAUG,aAAzB,QAAkC,IAAIC,SAAQ,+BAAEzD,EAAF,KAAO0D,EAAP,YAC3CA,EAAKC,SAA0B,IAAfD,EAAKpH,OAAeiH,EAAM3E,KAAK,CAAC,CAAC,QAASoB,GAAM0D,OACnElE,OAAOoC,QAAP,UAAeyB,EAAUO,cAAzB,QAAmC,IAAIH,SAAQ,+BAAEzD,EAAF,KAAO0D,EAAP,YAC5CA,EAAKC,SAA0B,IAAfD,EAAKpH,OAAeiH,EAAM3E,KAAK,CAAC,CAAC,SAAUoB,GAAM0D,OACpElE,OAAOoC,QAAP,UAAeyB,EAAUQ,aAAzB,QAAkC,IAAIJ,SAAQ,+BAAEzD,EAAF,KAAO0D,EAAP,YAC3CA,EAAKC,SAA0B,IAAfD,EAAKpH,OAAeiH,EAAM3E,KAAK,CAAC,CAAC,QAASoB,GAAM0D,OAC9DH,EAAMO,QACJ,WAACtD,EAAA,EAAD,YACL,UAACE,EAAA,EAAD,0BAGA,UAACE,EAAA,EAAD,KACA,UAACF,EAAA,EAAD,WACE,UAACG,EAAA,GAAD,CAAM1E,WAAS,EAAC4H,cAAe,EAAGC,WAAY,EAA9C,SACGT,EAAM3G,KAAI,WAAYoG,GAAZ,qBAAEiB,EAAF,KAAQC,EAAR,YAAkBA,IAAK,mBAACrD,EAAA,IAAD,gBAAMzE,MAAI,GAAK+G,IAAf,IAA+BnD,IAAKkE,EAAEC,KAAKnE,OAC3E,UAAC,MAAD,CAAkB0D,KAAMQ,EAAGE,SAAQ,WAAEC,EAAAA,EAAAA,IAAY,OAACjB,QAAD,IAACA,OAAD,EAACA,EAASE,cAAeW,UAAvC,aAAE,EAA4C3H,mBAT/D,KAe5B,SAASwG,KACP,IAAQ5E,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACR,OAAO,UAAC2C,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,SACJ2H,GAAAA,EAAAA,KAAoB,SAACC,EAAKvB,GAAN,OACnB,UAACnC,EAAA,GAAD,CAAMzE,MAAI,EAASoF,GAAI,GAAIxE,GAAI,EAAGD,GAAI,EAAtC,UACE,WAACyD,EAAA,EAAD,CAAWvE,GAAI,CAAEuI,QAASD,EAAIE,QAAQvG,GAAQ,EAAI,GAAKjB,OAAQ,QAA/D,WACE,UAAC8E,EAAA,EAAD,CAAYK,MAAOmC,EAAI7G,KAAMgH,OAAQH,EAAII,KAAMtC,qBAAsB,CAAE5E,QAAS,eAC/E8G,EAAIE,QAAQvG,KAAS,UAAC0C,EAAA,EAAD,IACrB2D,EAAIE,QAAQvG,KAAS,UAACwC,EAAA,EAAD,WACpB,UAACkE,GAAA,EAAD,CAAiBC,SAAUN,EAAIM,SAAUC,cAAc,UAL7C9B,QAYtB,SAASC,GAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,MACnB6B,GAAc/G,EAAAA,EAAAA,YAAWC,EAAAA,GACZ+G,EAAiED,EAA5E5G,UAAmB8G,EAAyDF,EAAzDE,SAA6BC,EAA4BH,EAA/CI,kBAC/BC,EAAqBJ,EAAOhF,IAC5BqF,EAAeL,EAAOM,KAAKpC,GAC3BiC,GAAoBI,EAAAA,EAAAA,GAAoBF,GAExCG,GAAiBC,EAAAA,EAAAA,KAEjBC,EAAaT,EAASI,GACtBM,EAAkDD,GAAcP,GAAqB,CACzFhH,UAAWuH,EAAWvH,UACtByH,eAAgBF,EAAWE,eAC3B1H,KAAMwH,EAAWG,OACjBZ,SAAUA,EACV7G,wBAAyB,EACzB+G,kBAAAA,GAEF,OAAO,WAAC3E,EAAA,EAAD,YACL,UAACE,EAAA,EAAD,WACE,UAACoF,GAAA,EAAD,CAAyBC,WAAS,EAACzJ,MAAO+I,EACxC9I,SAAU,SAAAyJ,GAAO,OAAId,EAAwB,CAAEe,KAAM,OAAQ/C,MAAAA,EAAO8C,QAAAA,KACpEnL,OAAQ,SAACsF,EAAG+F,GAAJ,OAAWA,IAAOd,IAAuBJ,EAAOM,KAAKa,SAASD,IAAKE,aAAY,mBAAclD,EAAQ,GAAKmD,cAAc,UAACC,GAAA,EAAD,QAEnIX,IAAuB,UAAC1H,EAAA,WAAD,CAAsB3B,MAAOqJ,EAA7B,UACtB,UAACY,GAAA,EAAD,CAAelB,aAAcA,EAC3BmB,cAAehB,EACfiB,kBAAkB,UAACC,GAAD,IAClBC,gBAAgB,UAACC,GAAD,IAChBC,mBAAmB,UAACC,GAAD,WAM3B,SAASJ,KACP,IAAQxI,GAAUF,EAAAA,EAAAA,YAAWC,EAAAA,GAArBC,KACFc,GAAiB/D,EAAAA,EAAAA,GAAWgE,EAAAA,EAAAA,OAAsB,IAClD4F,GAAWtE,EAAAA,EAAAA,UAAQ,kBAAMvB,GAC7BQ,OAAOoC,QAAQ3C,EAAAA,EAAAA,WAAyBD,EAAgBd,IACrD6I,SAAQ,+BAAElF,EAAF,iBACCkF,SAAQ,SAAAC,GAAE,OAAIhI,EAAe6C,GAASoF,kBAAkBD,WAClE,CAAChI,EAAgBd,IACrB,OAAK2G,GACE,UAACD,GAAA,EAAD,CAAiBC,SAAUA,EAAUC,cAAc,IADpC,KAGxB,SAAS8B,KACP,OAAkD5I,EAAAA,EAAAA,YAAWC,EAAAA,GACvDnB,EADN,EAAQmI,SAAR,EAAkB9G,UAAa6B,KACQlD,YACvC,OAAO,UAAC8H,GAAA,EAAD,CAAiBC,SAAU/H,EAAYoK,SAAUpC,cAAc,IAExE,SAASgC,KACP,OAAwD9I,EAAAA,EAAAA,YAAWC,EAAAA,GAA3DC,EAAR,EAAQA,KAEFiJ,EAFN,EAAclC,SAAd,EAAwB9G,UAAa6B,KACK4F,eACZwB,UAAUlJ,EAAK0B,IAAIC,GAAAA,GAAAA,SAAevD,OAC1DuI,EAAWrF,OAAO6H,OAAOF,EAAOG,QAAQP,SAAQ,SAAAQ,GAAG,OAAIA,EAAI1C,YACjE,OAAO,UAACD,GAAA,EAAD,CAAiBC,SAAUA,EAAUC,cAAc,IC3G7C,SAAS0C,KAAyB,IAAD,EAC9C,GAA8ExJ,EAAAA,EAAAA,YAAWC,EAAAA,GAAjFC,EAAR,EAAQA,KAAM0H,EAAd,EAAcA,eAAgBzH,EAA9B,EAA8BA,UAA6BkH,EAA3D,EAAyClH,UAAa6B,IAChDmF,GAAoBI,EAAAA,EAAAA,GAAoBF,GACxCoC,EAAUvJ,EAAK0B,IAAIC,GAAAA,GAAAA,SAAevD,MAClCoL,EAAgB9B,EAAe8B,cAC/BC,EAAQzJ,EAAK0B,IAAIC,GAAAA,GAAAA,KAAWvD,MAC5BsL,EAAY1J,EAAK0B,IAAIC,GAAAA,GAAAA,KAAWvD,MAChCuL,EAAgB3J,EAAK0B,IAAIC,GAAAA,GAAAA,eAAqBvD,MAC9CwL,EAAO,CACXC,KAAM7J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,MAAkBvD,MACjC0L,MAAO9J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,OAAmBvD,MACnC2L,MAAO/J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,OAAmBvD,OAE/B4L,EAAS,CACbH,KAAM7J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,MAAkBvD,MACjC0L,MAAO9J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,OAAmBvD,MACnC2L,MAAO/J,EAAK0B,IAAIC,GAAAA,GAAAA,MAAAA,OAAmBvD,OAErC,OAAO,WAACuE,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACL,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIxE,GAAI,EAAvB,UAEE,WAACwD,EAAA,EAAD,YACE,UAAC2H,GAAA,EAAD,CAAW/K,IAAKwI,EAAewC,QAASjL,UAAU,MAAMG,MAAM,OAAOL,OAAO,UAC5E,WAACyD,EAAA,EAAD,YACE,WAACa,EAAA,EAAD,CAAY9D,QAAQ,KAApB,UAA2BmI,EAAelI,KAA1C,KAAgD,UAACuE,EAAA,EAAD,CAAS7E,IAAG,UAAEO,GAAAA,EAAAA,mBAAF,aAAE,EAAqB+J,KAAnF,IAAuGW,GAAAA,EAASZ,GAAhH,QACA,UAAClG,EAAA,EAAD,CAAY9D,QAAQ,KAApB,UAAyB,UAAC,KAAD,CAAOG,MAAOgI,EAAe9J,OAAQ+B,SAAO,OACrE,WAAC0D,EAAA,EAAD,CAAY9D,QAAQ,KAApB,kBAA+B6K,GAAAA,GAAAA,eAA8BX,EAAOC,OACpE,UAAC/G,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAG4L,GAAI,EAAhC,SACI,CAAC,OAAQ,QAAS,SAAqC3L,KAAI,SAAA4L,GAAI,aAC/D,UAAC3H,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,EAAf,UACE,UAACiH,GAAA,EAAD,CAAOC,aAAcZ,EAAKU,GAAOzH,MAAOmH,EAAOM,GAAQ,OAAS,YAC9DG,QAAQ,WACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEd7M,GAAI,CACFqB,MAAO,OACPL,OAAQ,OACR,sBAAuB,CACrB8L,SAAU,SACVC,QAAS,aACTC,aAAc,OACdC,WAAY,EACZjM,OAAQ,WAdd,UAiBE,UAACkM,EAAA,EAAD,CAAKhM,UAAU,MAAMC,IAAG,UAAEwI,EAAewD,eAAeZ,EAAMf,UAAtC,aAAE,EAA8CpK,IAAKC,MAAM,OAAOL,OAAO,YAlB9EuL,SAsB3B,UAACjH,EAAA,EAAD,CAAYtF,GAAI,CAAEoN,UAAW,SAAUd,GAAI,GAAK9K,QAAQ,KAAxD,SAA8DmI,EAAe0D,qBAC7E,UAACzI,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,UACGoG,EAAAA,EAAAA,IAAM,EAAG,GAAGnG,KAAI,SAAAoG,GAAC,aAChB,UAACnC,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,EAAf,UACE,UAAC2H,EAAA,EAAD,CAAKhM,UAAU,MAAMC,IAAG,UAAEwI,EAAewD,eAAf,uBAA8CpG,GAA8ByE,UAA9E,aAAE,EAAsFpK,IAC9GpB,IAAE,QACAsN,OAAQ,WACJ1B,GAAiB7E,EAAI,GAAK,CAAEnI,OAAQ,oBAE1CyC,MAAM,OAAOL,OAAO,OACpBP,QAAS,kBAAMyI,EAAkB,CAAE0C,cAAe7E,IAAM6E,EAAgB7E,EAAI,EAAIA,QAP7DA,iBAajC,WAACnC,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIxE,GAAI,EAAGf,GAAI,CAC5B,yBAA0B,CAAEwE,GAAI,IADlC,WAGE,UAAC+I,GAAA,QAAD,CAAmBC,SAAUtL,EAAUuL,kBACvC,UAACC,GAAD,UAIN,IAIMC,GAAc,CAAC,SAAU,YAAa,WAAY,YAAa,SAC/DC,GAAgB,UAFD,CAAC,MAAO,KAAM,OAEQD,IAAahN,KAAI,SAAAkN,GAAC,OAAIjK,GAAAA,GAAAA,MAAYiK,MACvEC,GAAY,CAAI,OAAQ,MAAO,MAAO,KAAM,OAAQ,OAAxC,OAAkDH,IAE9DI,GAAkB,mBACnBC,GAAAA,GAAAA,KAAuB,SAAAC,GAAG,OAAIrK,GAAAA,GAAAA,MAAA,UAAeqK,EAAf,eADX,QAEnBD,GAAAA,GAAAA,KAAuB,SAAAC,GAAG,OAAIrK,GAAAA,GAAAA,MAAA,UAAeqK,EAAf,eAFX,QAGlB,CAAC,UAAW,WAAY,UAAW,UAAoBtN,KAAI,SAAAuN,GAAC,OAAItK,GAAAA,GAAAA,MAAYsK,QAE5EC,GAAgBJ,GAAmBpN,KAAI,SAAAuN,GAAC,OAAIA,EAAEhG,KAAMnE,OAEpDqK,GAAiB,CACrBxK,GAAAA,GAAAA,MAAAA,UADqB,gBAElBoK,GAAAA,GAAAA,KAAuB,SAAAE,GAAC,OAAItK,GAAAA,GAAAA,MAAA,UAAesK,EAAf,mBAFV,CAGrBtK,GAAAA,GAAAA,MAAAA,YAAyBA,GAAAA,GAAAA,MAAAA,iBACzBA,GAAAA,GAAAA,MAAAA,aAA0BA,GAAAA,GAAAA,MAAAA,kBAC1BA,GAAAA,GAAAA,MAAAA,cAA2BA,GAAAA,GAAAA,MAAAA,mBAC3BA,GAAAA,GAAAA,MAAAA,WAAwBA,GAAAA,GAAAA,MAAAA,gBACxBA,GAAAA,GAAAA,MAAAA,WAAwBA,GAAAA,GAAAA,MAAAA,kBAPH,QAQlBL,OAAO8K,KAAKC,GAAAA,IAAyB3N,KAAI,SAAAuN,GAAC,OAAItK,GAAAA,GAAAA,MAAA,UAAesK,EAAf,eAR5B,QASlB3K,OAAO8K,KAAKE,GAAAA,IAAqB5N,KAAI,SAAAuN,GAAC,OAAItK,GAAAA,GAAAA,MAAA,UAAesK,EAAf,eATxB,QAUjB,CAAC,WAAY,UAAW,gBAA0BvN,KAAI,SAAAuN,GAAC,OAAItK,GAAAA,GAAAA,MAAYsK,OAVtD,CAWrBtK,GAAAA,GAAAA,MAAAA,UAEI4K,GAAeJ,GAAkBzN,KAAI,SAAAuN,GAAC,OAAIA,EAAEhG,KAAMnE,OAElDmD,GAAiB,CACrB3B,GAAI,GAAIC,GAAI,EAAGzE,GAAI,EAAGD,GAAI,GAG5B,SAAS2N,GAAT,GAA2I,IAA7GnH,EAA4G,EAA5GA,MAAOJ,EAAqG,EAArGA,eAAgBwH,EAAqF,EAArFA,MACnD,GAA0B3M,EAAAA,EAAAA,YAAWC,EAAAA,GAA7BC,EAAR,EAAQA,KAAMkF,EAAd,EAAcA,QACd,OAAO,WAACvC,EAAA,GAAD,CAAM1E,WAAS,EAAC4H,cAAe,CAAEvC,GAAI,EAAGzE,GAAI,GAAKiH,WAAY,EAA7D,UACJT,EAAM3G,KAAI,SAAAgO,GAAE,eAAI,UAAC/J,EAAA,IAAD,gBAAMzE,MAAI,GAAwB+G,GAAlC,cACd,UAAC,MAAD,CAAkBO,KAAMxF,EAAK0B,IAAIgL,GAAKxG,SAAQ,OAAEhB,QAAF,IAAEA,GAAF,UAAEA,EAASxD,IAAIgL,UAAf,aAAE,EAAkBtO,UADpD,UAAgBsO,EAAGzG,YAAnB,aAAgB,EAASnE,QAGzC2K,KAIL,SAAShB,KACP,OAA8D3L,EAAAA,EAAAA,YAAWC,EAAAA,GAAjEC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAA6BkH,EAA3C,EAAyBlH,UAAa6B,IAChCmF,GAAoBI,EAAAA,EAAAA,GAAoBF,GACxCwF,EAAc3M,EAAK0B,IAAIC,GAAAA,GAAAA,SAE7B,OAAO,mCACL,UAACgD,GAAD,KACA,UAACiI,GAAD,CACE1I,MAAM,aACN2I,SAAS,UAACL,GAAD,CAAoBvH,eAAgBA,GAAgBI,MAAOsG,GAClEc,MAAOE,IAAe,WAAChK,EAAA,IAAD,gBAAMzE,MAAI,GAAK+G,IAAf,IAA+BjG,QAAQ,OAAOwE,cAAc,MAAMsJ,eAAe,gBAAjF,WACpB,8BAAM,qCAAN,KAAsB,WAAC,IAAD,CAAWjK,MAAO8J,EAAY1G,KAAK1G,QAAnC,UAA6CoN,EAAY1G,KAAKnE,KAAOqI,GAAAA,EAASwC,EAAY1G,KAAKnE,KAA/F,IAAsG6K,EAAY1G,KAAKnE,KAAOiL,EAAAA,GAAAA,IAAWJ,EAAY1G,KAAKnE,YAChL,4BAAQkL,EAAAA,EAAAA,IAAYL,EAAYvO,MAAOuO,EAAYM,cAGvDC,aAAa,UAACvK,EAAA,GAAD,CAAM1E,WAAS,EAAC4H,cAAe,EAAGC,WAAY,EAA9C,SACV+F,GAAanN,KAAI,SAAAyO,GAAY,IAAD,EACrBC,EAAWL,EAAAA,GAAAA,IAAWI,GAC5B,OAAO,UAACxK,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIzE,GAAI,EAAvB,UACL,UAACwO,GAAA,EAAD,CACE7N,MAAM,6BAAO2K,GAAAA,EAASgD,GAAhB,IAA2BC,KACjCE,YAAaP,EAAAA,GAAAA,OAAcI,GAC3B/O,MAAK,UAAE6B,EAAUsN,WAAWJ,UAAvB,QAAmC,EACxCK,QAAkC,MAAzBT,EAAAA,GAAAA,KAAYI,GACrBM,cAAe,SAAArP,GAAK,OAAI6I,EAAkB,CAAEc,KAAM,YAAaoF,QAAAA,EAAS/O,MAAAA,QANtC+O,WAY5C,UAACP,GAAD,CACE1I,MAAM,cACN2I,SAAS,UAACL,GAAD,CAAoBvH,eAAgBA,GAAgBI,MAAOyG,KACpEoB,aAAa,UAACvK,EAAA,GAAD,CAAM1E,WAAS,EAAC4H,cAAe,EAAGC,WAAY,EAA9C,SACVoG,GAAcxN,KAAI,SAAAyO,GAAY,IAAD,EACtBC,EAAWL,EAAAA,GAAAA,IAAWI,GAC5B,OAAO,UAACxK,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIzE,GAAI,EAAvB,UACL,UAACwO,GAAA,EAAD,CACE7N,MAAM,6BAAO2K,GAAAA,EAASgD,GAAhB,IAA2BC,KACjCE,YAAaP,EAAAA,GAAAA,OAAcI,GAC3B/O,MAAK,UAAE6B,EAAUsN,WAAWJ,UAAvB,QAAmC,EACxCK,QAAkC,MAAzBT,EAAAA,GAAAA,KAAYI,GACrBO,kBAAcC,EACdF,cAAe,SAAArP,GAAK,OAAI6I,EAAkB,CAAEc,KAAM,YAAaoF,QAAAA,EAAS/O,MAAAA,QAPtC+O,WAa5C,UAACP,GAAD,CACE1I,MAAM,aACN2I,SAAS,UAACL,GAAD,CAAoBvH,eAAgB,CAC3C3B,GAAI,GAAIC,GAAI,EAAGzE,GAAI,GAClBuG,MAAO8G,KACVe,aAAa,UAACvK,EAAA,GAAD,CAAM1E,WAAS,EAAC4H,cAAe,EAAGC,WAAY,EAA9C,SACVyG,GAAa7N,KAAI,SAAAyO,GAAY,IAAD,EACrBC,EAAWL,EAAAA,GAAAA,IAAWI,GAC5B,OAAO,UAACxK,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIzE,GAAI,EAAvB,UACL,UAACwO,GAAA,EAAD,CACE7N,MAAM,6BAAO2K,GAAAA,EAASgD,GAAhB,IAA2BC,KACjCE,YAAaP,EAAAA,GAAAA,OAAcI,GAC3B/O,MAAK,UAAE6B,EAAUsN,WAAWJ,UAAvB,QAAmC,EACxCK,QAAkC,MAAzBT,EAAAA,GAAAA,KAAYI,GACrBM,cAAe,SAAArP,GAAK,OAAI6I,EAAkB,CAAEc,KAAM,YAAaoF,QAAAA,EAAS/O,MAAAA,QANtC+O,aAchD,SAASP,GAAT,GAA2D,IAAhC1I,EAA+B,EAA/BA,MAAO2I,EAAwB,EAAxBA,QAASK,EAAe,EAAfA,YACzC,GAAwBjQ,EAAAA,EAAAA,WAAS,GAAjC,eAAOsD,EAAP,KAAaqN,EAAb,KACA,OAAO,WAACtL,EAAA,EAAD,YACL,UAACE,EAAA,EAAD,CAAazE,GAAI,CAAEC,GAAI,GAAvB,UACE,WAACiN,EAAA,EAAD,CAAKjM,QAAQ,OAAO8N,eAAe,gBAAnC,WACE,UAACzJ,EAAA,EAAD,CAAY9D,QAAQ,YAApB,SAAiC2E,KACjC,UAACtB,EAAA,EAAD,CAAQrE,KAAK,QAAQsE,MAAOtC,EAAO,QAAU,OAAQ/B,QAAS,kBAAMoP,GAASrN,IAA7E,UACE,8BAAM,UAAC,KAAD,CAAiBkG,KAAMlG,EAAOsN,GAAAA,IAASC,GAAAA,MAA7C,IAAyDvN,EAzHtD,OADA,wBA8HT,UAACmC,EAAA,EAAD,KACA,UAACF,EAAA,EAAD,UACGjC,EAAO2M,EAAcL,O,wCC9Mb,SAASkB,KACtB,OAA4CjO,EAAAA,EAAAA,YAAWC,EAAAA,GAA/CC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWyH,EAAzB,EAAyBA,eACnBT,GAAoBI,EAAAA,EAAAA,GAAoBpH,EAAU6B,KAGlDyH,EAAUvJ,EAAK0B,IAAIC,GAAAA,GAAAA,SAAevD,MAClCsL,EAAY1J,EAAK0B,IAAIC,GAAAA,GAAAA,KAAWvD,MAChCuL,EAAgB3J,EAAK0B,IAAIC,GAAAA,GAAAA,eAAqBvD,MACpD,OAAO,mCACL,UAAC4P,GAAD,KACA,WAACrL,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAGV,GAAI,CAAEwE,GAAI,GAAtC,UAPqB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBAS/E7D,KAAI,+BAAE4L,EAAF,KAAQ2D,EAAR,YAClB,UAACtL,EAAA,GAAD,CAAMzE,MAAI,EAAYoF,GAAI,GAAIxE,GAAI,EAAGD,GAAI,EAAzC,UACE,UAACqP,GAAD,CACEC,UAAW7D,EACX8D,SAAUH,KAHE3D,QAMf5C,EAAewD,eAAe,SAAU3B,KAAY,UAAC5G,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIxE,GAAI,EAAGD,GAAI,EAA9B,UACrD,UAACqP,GAAD,CACEC,UAAU,SACVC,SAAS,2BAGV1G,EAAewD,eAAe,UAAW3B,KAAY,UAAC5G,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAI,GAAIxE,GAAI,EAAGD,GAAI,EAA9B,UACtD,UAACqP,GAAD,CACEC,UAAU,UACVC,SAAS,kBAIf,UAACzL,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,SA5BgF,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IA8B7LC,KAAI,YAAyB,IAAD,eAAtB4L,EAAsB,KAAhB2D,EAAgB,KAATI,EAAS,KACpCC,EAAU5E,GAAa2E,EAC3B,OAAK3G,EAAewD,eAAeZ,EAAMf,IAClC,UAAC5G,EAAA,GAAD,CAAMzE,MAAI,EAAYqQ,MAAO,CAAEjI,QAASgI,EAAU,EAAI,IAAOhL,GAAI,GAAIxE,GAAI,EAAzE,UACL,UAACoP,GAAD,CACEC,UAAW7D,EACX8D,SAAUH,KAHS3D,GADmC,WAS9D,WAACjH,EAAA,EAAD,CAAY9D,QAAQ,KAAKxB,GAAI,CAAEoN,UAAW,UAA1C,+BAAyExB,MACzE,UAAChH,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,UAEGoG,EAAAA,EAAAA,IAAM,EAAG,GAAGnG,KAAI,SAAAoG,GACf,IAAIwF,EAAI,uBAAmBxF,GAC3B,OAAO,UAACnC,EAAA,GAAD,CAAMzE,MAAI,EAASoF,GAAI,GAAIxE,GAAI,EACpCf,GAAI,CAAEuI,QAASqD,GAAiB7E,EAAI,EAAI,IADnC,UAEL,UAACoJ,GAAD,CACEC,UAAW7D,EACX8D,SAAQ,4BAAuBtJ,GAC/B0J,aAAc,kBAAMvH,EAAkB,CAAE0C,cAAe7E,IAAM6E,EAAgB7E,EAAI,EAAIA,QALlEA,WAY/B,IAAM2J,GAAqB,CACzBC,aAsBF,YAA4D,IAAhClJ,EAA+B,EAA/BA,KAC1B,OAAO,UAACmJ,EAAA,EAAD,WAAU,UAACnM,EAAA,EAAD,CAAazE,GAAI,CAAEgF,EAAG,GAAtB,UACf,WAACM,EAAA,EAAD,CAAYR,MAAM,oBAAlB,UAAuCkK,EAAAA,GAAAA,IAAWvH,EAAKS,KAAKnE,KAA5D,IAAoEqI,GAAAA,EAAAA,QAApE,IAAuFA,GAAAA,EAAAA,KAAvF,KAAsG,8BAAS6C,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,gBAvB9I2B,eA0BF,YAA8D,IAAhCpJ,EAA+B,EAA/BA,KAC5B,OAAO,UAACmJ,EAAA,EAAD,WAAU,UAACnM,EAAA,EAAD,CAAazE,GAAI,CAAEgF,EAAG,GAAtB,UACf,WAACM,EAAA,EAAD,CAAYR,MAAM,sBAAlB,UAAyCkK,EAAAA,GAAAA,IAAWvH,EAAKS,KAAKnE,KAA9D,IAAsEqI,GAAAA,EAAAA,QAAtE,IAAyFA,GAAAA,EAAAA,MAAzF,KAAyG,8BAAS6C,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,gBA3BjJ4B,WA8BF,YAA0D,IAAhCrJ,EAA+B,EAA/BA,KACxB,OAAO,UAACmJ,EAAA,EAAD,WAAU,UAACnM,EAAA,EAAD,CAAazE,GAAI,CAAEgF,EAAG,GAAtB,UACf,WAACM,EAAA,EAAD,CAAYR,MAAM,kBAAlB,UAAsCkK,EAAAA,GAAAA,IAAWvH,EAAKS,KAAKnE,KAA3D,IAAmEqI,GAAAA,EAAAA,QAAnE,IAAsFA,GAAAA,EAAAA,KAAtF,KAAqG,8BAAS6C,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,gBA/B7I6B,UA0CF,WACE,OAAsB7R,EAAAA,EAAAA,UAASqE,OAAO8K,KAAK2C,IAAmB,IAA9D,eAAO/C,EAAP,KAAYgD,EAAZ,KAEMxJ,GADW1F,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACUiP,aAAaC,SAAlB,UAA+BlD,EAA/B,UACb,OAAO,WAAC2C,EAAA,EAAD,CAAU5Q,GAAI,CAAEiB,QAAS,QAAzB,WACL,UAACmQ,EAAA,EAAD,CAAgB5Q,KAAK,QAAQ2F,MAAO6K,GAAkB/C,GAAMnJ,MAAM,UAAlE,SACGvB,OAAOoC,QAAQqL,IAAmBrQ,KAAI,+BAAEoD,EAAF,KAAOsN,EAAP,YAAoB,UAACC,EAAA,EAAD,CAAoBC,SAAUtD,IAAQlK,EAAKxD,SAAU0N,IAAQlK,EAAKtD,QAAS,kBAAMwQ,EAAOlN,IAAxF,SAA+FsN,GAAhFtN,SAE5E,UAACmJ,EAAA,EAAD,CAAKlN,GAAI,CAAE8E,MAAM,GAAD,OAAKmJ,EAAL,SAAiBjJ,EAAG,GAApC,UAAyC,8BAASiK,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,cAjDjFsC,UAqDF,YAAyD,IAAhC/J,EAA+B,EAA/BA,KACjBgK,GAAc,UAACC,GAAA,EAAD,CAAkBC,UAAU,MAAMxL,OAAO,WAACb,EAAA,EAAD,+CAA4C,UAAC,IAAD,CAAWR,MAAM,MAAjB,wBAArF,UAClB,UAACoI,EAAA,EAAD,CAAKhM,UAAU,OAAOlB,GAAI,CAAEsN,OAAQ,QAApC,UAA8C,UAAC,KAAD,CAAiB5E,KAAMkJ,GAAAA,UAGvE,OAAO,UAAChB,EAAA,EAAD,WAAU,UAACnM,EAAA,EAAD,CAAazE,GAAI,CAAEgF,EAAG,GAAtB,UACf,WAAC,IAAD,CAAWF,MAAM,YAAjB,UAA8BkK,EAAAA,GAAAA,IAAWvH,EAAKS,KAAKnE,KAAnD,IAA2DqI,GAAAA,EAAAA,MAA3D,IAA4EA,GAAAA,EAAAA,KAA5E,MAA4F,UAAC,IAAD,CAAWtH,MAAM,WAAjB,UAA4B,6CAAoB2M,EAApB,SAAxH,KAA8K,8BAASxC,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,gBA1DtN2C,YAsEF,WACE,OAAsB3S,EAAAA,EAAAA,UAASqE,OAAO8K,KAAKyD,IAAyB,IAApE,eAAO7D,EAAP,KAAYgD,EAAZ,KACQhP,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACFwF,EAAe,QAARwG,EAAgBhM,EAAKiP,aAAaC,SAAUU,YAAe5P,EAAKiP,aAAaC,SAAlB,UAA+BlD,EAA/B,gBACxE,OAAO,WAAC2C,EAAA,EAAD,CAAU5Q,GAAI,CAAEiB,QAAS,QAAzB,WACL,UAACmQ,EAAA,EAAD,CAAgB5Q,KAAK,QAAQ2F,MAAO2L,GAAwB7D,GAAMnJ,MAAM,UAAxE,SACGvB,OAAOoC,QAAQmM,IAAyBnR,KAAI,+BAAEoD,EAAF,KAAOsN,EAAP,YAAoB,UAACC,EAAA,EAAD,CAAoBC,SAAUtD,IAAQlK,EAAKxD,SAAU0N,IAAQlK,EAAKtD,QAAS,kBAAMwQ,EAAOlN,IAAxF,SAA+FsN,GAAhFtN,SAElF,UAACmJ,EAAA,EAAD,CAAKlN,GAAI,CAAE8E,MAAM,GAAD,OAAKmJ,EAAL,SAAiBjJ,EAAG,GAApC,UAAyC,8BAASiK,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,eA5EnF,SAASe,KACP,IACMkB,GADWpP,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACciP,aAAaC,SACnC,OAAO,UAAC5M,EAAA,EAAD,CAAWvE,GAAI,CAAEwE,GAAI,GAArB,UACL,UAACC,EAAA,EAAD,WACE,UAACG,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,SACG6C,OAAOoC,QAAQwL,GAAUxQ,KAAI,YAAkB,IAAD,eAAfoD,EAAe,KAAV0D,EAAU,KACvCsK,EAAMrB,GAAmB3M,GAC/B,OAAKgO,GACE,UAACnN,EAAA,GAAD,CAAMzE,MAAI,EAAV,UAAqB,UAAC4R,EAAD,CAAKtK,KAAMA,KAAhB1D,GADN,cAuB3B,IAAMiN,GAAoB,CACxB,MAAQ,8BAAM,UAAC,IAAD,CAAWlM,MAAM,OAAjB,SAAyBkK,EAAAA,GAAAA,IAAW,oBAA1C,IAA0E5C,GAAAA,EAAAA,KAA1E,MAA4FA,GAAAA,EAAAA,SACpG,SAAW,8BAAM,UAAC,IAAD,CAAWtH,MAAM,UAAjB,SAA4BkK,EAAAA,GAAAA,IAAW,uBAA7C,IAAgF5C,GAAAA,EAAAA,QAAhF,IAAmGA,GAAAA,EAAAA,SAC9G,MAAQ,8BAAM,UAAC,IAAD,CAAWtH,MAAM,OAAjB,SAAyBkK,EAAAA,GAAAA,IAAW,oBAA1C,IAA0E5C,GAAAA,EAAAA,KAA1E,MAA4FA,GAAAA,EAAAA,SACpG,OAAS,8BAAM,UAAC,IAAD,CAAWtH,MAAM,QAAjB,SAA0BkK,EAAAA,GAAAA,IAAW,qBAA3C,IAA4E5C,GAAAA,EAAAA,MAA5E,MAA+FA,GAAAA,EAAAA,UAyB1G,IAAM0F,GAA0B,CAC9B,KAAO,WAAC,IAAD,CAAWhN,MAAM,cAAjB,UAAgCkK,EAAAA,GAAAA,IAAW,eAA3C,IAA4D5C,GAAAA,EAAAA,QAA5D,IAA+EA,GAAAA,EAAAA,MAA/E,IAAgGA,GAAAA,EAAAA,KAAhG,IAAgHA,GAAAA,EAAAA,KAAhH,IAAgIA,GAAAA,EAAAA,OACvI,MAAQ,8BAAM,UAAC,IAAD,CAAWtH,MAAM,OAAjB,SAAyBkK,EAAAA,GAAAA,IAAW,sBAA1C,IAA4E5C,GAAAA,EAAAA,KAA5E,IAA4FA,GAAAA,EAAAA,OACpG,SAAW,8BAAM,UAAC,IAAD,CAAWtH,MAAM,UAAjB,SAA4BkK,EAAAA,GAAAA,IAAW,yBAA7C,IAAkF5C,GAAAA,EAAAA,QAAlF,IAAqGA,GAAAA,EAAAA,OAChH,MAAQ,8BAAM,UAAC,IAAD,CAAWtH,MAAM,OAAjB,SAAyBkK,EAAAA,GAAAA,IAAW,sBAA1C,IAA4E5C,GAAAA,EAAAA,KAA5E,IAA4FA,GAAAA,EAAAA,OACpG,OAAS,8BAAM,UAAC,IAAD,CAAWtH,MAAM,QAAjB,SAA0BkK,EAAAA,GAAAA,IAAW,uBAA3C,IAA8E5C,GAAAA,EAAAA,MAA9E,IAA+FA,GAAAA,EAAAA,QAe1G,IAAM4F,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAMxC,SAAS7B,GAAT,GAAyF,IAA7DC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,SAAUI,EAAuC,EAAvCA,aAC/C,GAA2E1O,EAAAA,EAAAA,YAAWC,EAAAA,GAA9EC,EAAR,EAAQA,KAAmBiJ,EAA3B,EAAchJ,UAAagJ,OAAUvB,EAArC,EAAqCA,eAAgBT,EAArD,EAAqDA,kBAE/C+I,GAAoBxP,EAAAA,EAAAA,cACxB,SAAAyP,GAAQ,OAAI,UAACC,GAAA,EAAD,CAAgB1R,QAASgQ,EAAzB,SAAwCyB,MACpD,CAACzB,IAGC2B,EAA6B,KAEjC,GAAIhC,KAAalF,EAAQ,CACvB,IAAMmH,EAAapQ,EAAK0B,IAAIC,GAAAA,GAAAA,MAAYwM,IAAuB/P,MACzDqL,EAAQzJ,EAAK0B,IAAIC,GAAAA,GAAAA,MAAYwM,IAAY/P,MACzCiQ,EAAMrO,EAAK0B,IAAIC,GAAAA,GAAAA,KAAWvD,MAKhC+R,GAAS,mCACP,UAAC3N,EAAA,EAAD,CAAazE,GAAI,CAAEC,GAAI,GAAvB,UACE,UAACmR,EAAA,EAAD,CAAgBtH,WAAS,EAAC3D,MAAK,qBAAgBuF,GAAS5G,MAAOuN,EAAa,OAAS,UAArF,UACGvL,EAAAA,EAAAA,IAAM,EAAGkL,GAAa1B,IAAM3P,KAAI,SAAAoG,GAAC,OAChC,WAACuK,EAAA,EAAD,CAAkBC,SAAUrG,EAAOkF,KAAgBrJ,EAAIxG,SAAU2K,EAAOkF,KAAgBrJ,EAAItG,QAAS,kBAR/E6R,EAQ+GvL,EAP3ImE,EAOgIkF,GAPjHkC,OACfpJ,EAAkB,CAAEgC,OAAAA,IAFC,IAAOoH,GAQtB,wBAAqJvL,EAAIsL,IAA1ItL,WAGrB,UAACpC,EAAA,EAAD,OAGJ,IAAM4N,EAAc5I,EAAewD,eAAeiD,EAAWnO,EAAK0B,IAAIC,GAAAA,GAAAA,SAAevD,OAErF,OAAO,WAACkE,EAAA,EAAD,CAAWvE,GAAI,CAAEgB,OAAQ,QAAzB,UACJoR,GACD,WAAC3N,EAAA,EAAD,YACE,UAAC+N,GAAA,EAAD,CAAoBC,YAAahC,EAAciC,QAAST,EAAxD,UACE,WAACrN,EAAA,GAAD,CAAM1E,WAAS,EAACF,GAAI,CAAE2S,SAAU,UAAhC,WACE,UAAC/N,EAAA,GAAD,CAAMzE,MAAI,EAAV,UACE,UAAC+M,EAAA,EAAD,CAAKhM,UAAU,MAAMC,IAAG,OAAEoR,QAAF,IAAEA,OAAF,EAAEA,EAAanR,IAAKpB,GAAI,CAAEqB,MAAO,GAAIL,OAAQ,aAEvE,WAAC4D,EAAA,GAAD,CAAMzE,MAAI,EAACC,SAAU,EAAGJ,GAAI,CAAE4S,GAAI,GAAlC,WACE,UAACtN,EAAA,EAAD,CAAY9D,QAAQ,KAApB,gBAA0B+Q,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAa9Q,QACvC,UAAC6D,EAAA,EAAD,CAAY9D,QAAQ,YAApB,SAAiC6O,YAK3B,OAAXkC,QAAW,IAAXA,GAAAA,EAAa3J,UAAW,UAACD,GAAA,EAAD,CAAiBC,SAAU2J,EAAY3J,WAAe,W,sCCtLrF,SAASiK,GAAT,GAA0E,IAAtDX,EAAqD,EAArDA,SAAUY,EAA2C,EAA3CA,QAASzS,EAAkC,EAAlCA,MAAU0S,GAAwB,aACvE,OAAI1S,IAAUyS,EAAgB,MACvB,UAAC,EAAAE,SAAD,CAAUC,UAAU,UAACC,EAAA,EAAD,CAAU1R,QAAQ,cAAcH,MAAM,OAAOL,OAAQ,MAAzE,UACL,iCACEmS,KAAK,WACLC,OAAQ/S,IAAUyS,EAClBjP,GAAE,0BAAqBxD,GACvB,uCAA+BA,IAC3B0S,GALN,aAOGb,OAaQ,SAASmB,GAAT,GAAgJ,IAAD,IAA/GjK,EAA+G,EAA/GA,aAAckK,EAAiG,EAAjGA,OAAQC,EAAyF,EAAzFA,YAAyF,IAA5EpR,wBAAAA,OAA4E,MAAlD,EAAkD,EAA/CpC,EAA+C,EAA/CA,QAASyT,EAAsC,EAAtCA,QAChHxK,GAAWyK,EAAAA,EAAAA,GAAYrK,EAAcjH,GAC3C,mBAA0D6G,QAA1D,IAA0DA,OAA1D,EAA0DA,EAAWI,UAArE,QAAsF,GAA9ElH,EAAR,EAAQA,UAAWyH,EAAnB,EAAmBA,eAAwB+J,EAA3C,EAAmC9J,OAGnC,GAAsB1K,EAAAA,EAAAA,UAA2BsU,IAAqBD,EAAc,eAAiB,cAArG,eAAOI,EAAP,KAAYC,EAAZ,KACMC,GAAQpR,EAAAA,EAAAA,cAAY,SAACqR,EAAGC,GAAJ,OAAUH,EAAOG,KAAI,CAACH,IAE1C1K,GAAoBI,EAAAA,EAAAA,GAAmB,iBAACpH,QAAD,IAACA,OAAD,EAACA,EAAW6B,WAAZ,QAAmB,IACxDiQ,GAAR,OAAwB9R,QAAxB,IAAwBA,EAAAA,EAAa,IAA7B8R,YAEFC,GAA+C3P,EAAAA,EAAAA,UAAQ,WAC3D,GAAK0E,GAAa9G,GAAcyH,GAAmB+J,EACnD,MAAO,CACLxR,UAAAA,EACAyH,eAAAA,EACAxH,wBAAAA,EACAF,KAAOsR,EAAcA,EAAYnK,GAAeQ,OAAS8J,EACzD1K,SAAWuK,GAA4BvK,EACvC7B,QAAU6M,GAAeT,EAAeG,OAAa9D,EACrD1G,kBAAAA,KAED,CAAChH,EAAWyH,EAAgBxH,EAAyBoR,EAAaG,EAAY1K,EAAUE,EAAmBE,EAAc4K,IAE5H,OAAKhL,GAAa9G,GAAcyH,GAAmB+J,GAAeO,GAE3D,UAACrD,EAAA,EAAD,WACL,WAAC5O,EAAA,WAAD,CAAsB3B,MAAO4T,EAA7B,WACE,WAACxP,EAAA,EAAD,CAAazE,GAAI,CACf,yBAA0B,CAAEwE,GAAI,IADlC,WAGE,WAACI,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACE,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAAV,UACE,UAAC+T,GAAD,OAEF,UAACtP,EAAA,GAAD,CAAMzE,MAAI,EAAV,WAEKoT,IAAe,WAACY,EAAA,EAAD,CAAwBC,WAAS,EAAC/T,MAAO2T,EAAa1T,SAAU,SAACwT,EAAGC,GAAJ,OAAU7K,EAAkB,CAAE8K,YAAaD,KAAMvT,KAAK,QAAtH,WAChB,UAAC6T,EAAA,EAAD,CAAchU,OAAO,EAAOE,UAAWyT,EAAvC,UACE,2DAEF,UAACK,EAAA,EAAD,CAAchU,OAAO,EAAME,SAAUyT,EAArC,UACE,2EAIN,UAACpP,EAAA,GAAD,CAAMzE,MAAI,EAACC,SAAU,MAClB+B,IAA2B,UAACyC,EAAA,GAAD,CAAMzE,MAAI,EAAV,UAAW,UAAC4E,EAAA,EAAD,CAAM/E,GAAI,CAAEgF,EAAG,EAAGC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,QAAQC,QAAQC,OAAlD,UAA0D,UAACC,EAAA,EAAD,WAAY,8DAAqCnD,aACjJpC,IAAW,UAAC6E,EAAA,GAAD,CAAMzE,MAAI,EAAV,UACZ,UAACmU,EAAA,EAAD,CAAa7T,QAASV,UAG1B,UAACwE,EAAA,EAAD,WACE,WAACgQ,EAAA,EAAD,CACEjU,SAAUuT,EACVxT,MAAOsT,EACPnS,QAAQ,YAHV,WAKE,UAACgT,EAAA,EAAD,CAAKnU,MAAM,YAAYoU,MAAM,gBAC1BlB,IAAe,UAACiB,EAAA,EAAD,CAAKnU,MAAM,eAAeoU,MAAM,mBAClD,UAACD,EAAA,EAAD,CAAKnU,MAAM,YAAYoU,MAAOlB,EAAc,oBAAsB,eAClE,UAACiB,EAAA,EAAD,CAAKnU,MAAM,QAAQoU,MAAM,gBACzB,UAACD,EAAA,EAAD,CAAKnU,MAAM,SAASoU,MAAM,kBAG9B,UAACC,GAAD,KACA,UAAC,KAAD,KAGA,UAAC7B,GAAD,CAAUxS,MAAM,YAAYyS,QAASa,EAArC,UAA0C,UAACpI,GAAD,OAE1C,UAACvJ,EAAA,WAAD,CAAsB3B,OAAK,kBAAO4T,GAAP,IAAyBhS,KAAMyR,EAAYvM,aAASyI,IAA/E,UACE,UAACiD,GAAD,CAAUxS,MAAM,YAAYyS,QAASa,EAArC,UAA2C,UAAC,GAAD,SAG7C,UAACd,GAAD,CAAUxS,MAAM,eAAeyS,QAASa,EAAxC,UAA8C,UAAC,GAAD,CAAuB7R,UAAQ,OAE7E,UAAC+Q,GAAD,CAAUxS,MAAM,QAAQyS,QAASa,EAAjC,UAAsC,UAACjN,GAAD,OAEtC,UAACmM,GAAD,CAAUxS,MAAM,SAASyS,QAASa,EAAlC,UACE,UAAC3D,GAAD,WAGDsD,IAAU,UAAC3O,EAAA,EAAD,IACZ2O,IAAU,UAAC7O,EAAA,EAAD,UACR6O,UA7DoF,0BAoE7F,SAASY,KAAsB,IAAD,EAC5B,GAAyDnS,EAAAA,EAAAA,YAAWC,EAAAA,GAA5DE,EAAR,EAAQA,UAAWyH,EAAnB,EAAmBA,eAAgBT,EAAnC,EAAmCA,kBACnC,GAAkChK,EAAAA,EAAAA,WAAS,GAA3C,eAAOyV,EAAP,KAAkBC,EAAlB,KACMC,GAAerL,EAAAA,EAAAA,KACfsL,GAAWrS,EAAAA,EAAAA,cAAY,SAACiJ,GAC5BA,GAAQqJ,EAAAA,EAAAA,IAAMrJ,EAAO,EAAG,IACxB,IAAMC,EAAYqJ,EAAAA,GAAAA,WAA4B,SAAAC,GAAO,OAAIvJ,GAASuJ,KAClE/L,EAAkB,CAAEwC,MAAAA,EAAOC,UAAAA,MAC1B,CAACzC,IACEgM,GAAezS,EAAAA,EAAAA,cAAY,WAC/B,GAAKP,EAAL,CACA,MAAqCA,EAA7BwJ,MAAAA,OAAR,MAAgB,EAAhB,IAAqCxJ,EAAlByJ,UAAAA,OAAnB,MAA+B,EAA/B,EACMwJ,EAAiBH,EAAAA,GAAAA,WAA4B,SAAAC,GAAO,OAAc,KAAVvJ,GAAgBA,IAAUuJ,KACtD/L,EAA9ByC,IAAcwJ,EAAkC,CAAExJ,UAAWA,EAAY,GACtD,CAAEA,UAAWwJ,OACnC,CAACjM,EAAmBhH,IACvB,EAA2DA,EAAnDkT,WAAAA,OAAR,MAAqB,QAArB,IAA2DlT,EAA7BwJ,MAAAA,OAA9B,MAAsC,EAAtC,IAA2DxJ,EAAlByJ,UAAAA,OAAzC,MAAqD,EAArD,EACA,OAAO,mCACL,UAAC0J,EAAA,EAAD,CAAyB5W,KAAMkW,EAAWjW,OAAQ,kBAAMkW,GAAa,IAAQjW,SAAUkW,KACvF,WAACjQ,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACE,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAAV,UACE,UAAC0E,EAAA,EAAD,CAAQpE,QAAS,kBAAMmU,GAAa,IAAOU,WAAW,UAACC,EAAA,EAAD,CAAWpU,IAAG,OAAEwI,QAAF,IAAEA,OAAF,EAAEA,EAAgB6L,eAAtF,0BAA0G7L,QAA1G,IAA0GA,OAA1G,EAA0GA,EAAgBlI,YAA1H,QAAkI,0BAEpI,UAACmD,EAAA,GAAD,CAAMzE,MAAI,EAAV,UACE,WAACsV,EAAA,EAAD,CAAazV,GAAI,CAAEiF,QAAS,SAAAC,GAAC,OAAIA,EAAEC,QAAQuQ,YAAYC,OAAvD,WACiB,OAAdhM,QAAc,IAAdA,OAAA,EAAAA,EAAgBiM,QAAS,mBAAajM,QAAb,IAAaA,OAAb,EAAaA,EAAgBiM,SAAS,UAACxE,EAAA,EAAD,CAAgBjL,OAAO,8BAAQ,UAAC,IAAD,CAAWrB,MAAOsQ,EAAlB,UAA+BS,EAAAA,EAAAA,IAAI,WAAD,OAAYT,QAA7E,SAC7D7R,OAAO8K,KAAK1E,EAAeiM,MAAME,SAASnV,KAAI,SAAAoV,GAAM,OACnD,UAACzE,EAAA,EAAD,CAAuBC,SAAU6D,IAAeW,EAAQxV,SAAU6U,IAAeW,EAAQtV,QAAS,kBAAMyI,EAAkB,CAAEkM,WAAYW,KAAxI,UACE,8BAAQ,UAAC,IAAD,CAAWjR,MAAOiR,EAAlB,UAA2BF,EAAAA,EAAAA,IAAI,WAAD,OAAYE,SADrCA,SAGnB,UAACC,EAAA,GAAD,WACE,UAACA,EAAA,GAAD,CAAmB1V,SAAUwU,EAAUzU,MAAOqL,EAC5CuK,eAAe,QACfC,WAAY,CAAEC,IAAK,EAAGC,IAAK,GAAIpW,GAAI,CAAEoN,UAAW,WAChDpN,GAAI,CAAEqB,MAAO,OAAQL,OAAQ,OAAQ4R,GAAI,GACzCrS,UAAWoJ,OAEf,UAAC9E,EAAA,EAAD,CAAQ7E,GAAI,CAAE4S,GAAI,GAAKrS,WAAW8V,EAAAA,EAAAA,IAAe3K,KAAW/B,EAAgBlJ,QAASyU,EAArF,UAAmG,oCAAWF,EAAAA,GAAkBrJ,SAChI,UAACyF,EAAA,EAAD,CAAgBjL,MAAO,eAAgB5F,UAAWoJ,EAAlD,SACG2M,EAAAA,GAAAA,KAAoB,YAAe,IAAD,eAAZC,EAAY,KAARC,EAAQ,KAE3BC,EADYF,IAAOvB,EAAAA,GAAkBwB,GACnB,cAAUD,GAAV,cAAwBA,EAAxB,YAA8BvB,EAAAA,GAAkBwB,IAClEjF,EAAWgF,IAAO7K,GAAS8K,IAAO7K,EACxC,OAAO,UAAC2F,EAAA,EAAD,CAA8BC,SAAUA,EAAUhR,SAAUgR,EAAU9Q,QAAS,kBAAMyI,EAAkB,CAAEwC,MAAO6K,EAAI5K,UAAW6K,KAA/H,SAAuIC,GAAvI,UAAkBF,EAAlB,YAAwBC,oBAS7C,SAAS9B,KACP,OAAgCxV,EAAAA,EAAAA,WAAS,GAAzC,eAAOwX,EAAP,KAAiBC,EAAjB,KACMC,GAASnU,EAAAA,EAAAA,cAAY,kBAAMkU,GAAaD,KAAW,CAACC,EAAaD,IACvE,OAAO,WAACnS,EAAA,EAAD,YACL,WAACE,EAAA,EAAD,CAAazE,GAAI,CAAEiB,QAAS,OAAQyE,IAAK,GAAzC,WACE,WAACd,EAAA,GAAD,CAAM1E,WAAS,EAACQ,QAAS,EAAzB,WACE,UAACkE,EAAA,GAAD,CAAMzE,MAAI,EAAV,UAAW,UAAC,KAAD,CAAeK,KAAK,aAC/B,UAACoE,EAAA,GAAD,CAAMzE,MAAI,EAAV,UAAW,UAAC,KAAD,OACX,UAACyE,EAAA,GAAD,CAAMzE,MAAI,EAAV,UAAW,UAAC,KAAD,CAAgBK,KAAK,gBAElC,WAAC0M,EAAA,EAAD,CAAKjM,QAAQ,OAAOyE,IAAK,EAAzB,WACE,WAACwH,EAAA,EAAD,YACE,WAAC5H,EAAA,EAAD,CAAY9D,QAAQ,YAApB,sBAA2C,QAC3C,UAAC8D,EAAA,EAAD,CAAY9D,QAAQ,YAApB,8BAEF,UAACqV,EAAA,EAAD,CACEC,OAAQJ,EACRjW,QAASmW,EACT,gBAAeF,EACf,aAAW,YACXlW,KAAK,QACLR,GAAI,CAAEgF,EAAG,GANX,UAQE,UAAC+R,EAAA,EAAD,aAIN,UAACC,EAAA,EAAD,CAAUC,GAAIP,EAAUQ,QAAQ,OAAOC,eAAa,EAApD,UACE,UAAC1S,EAAA,EAAD,CAAazE,GAAI,CAAEoX,GAAI,GAAvB,UACE,UAACC,GAAD,WAMR,SAASA,KACP,IAAQpV,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACF2G,GAAW0O,EAAAA,EAAAA,GAAmBrV,GACpC,OAAO,UAAC,EAAA+Q,SAAD,CAAUC,UAAU,UAACC,EAAA,EAAD,CAAU1R,QAAQ,cAAcH,MAAM,OAAOL,OAAQ,MAAzE,UACL,UAACkM,EAAA,EAAD,CAAKlN,GAAI,CAAEuX,IAAK,EAAG/S,IAAK,GAAxB,SACGoE,EAASjI,KAAI,+BAAEoD,EAAF,KAAOyT,EAAP,YACZ,UAACC,GAAD,CAAuBC,UAAWF,EAAOG,WAAY5T,GAAnCA,UAI1B,SAAS0T,GAAT,GAA6G,IAAtFE,EAAqF,EAArFA,WAAYD,EAAyE,EAAzEA,UACzBzV,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KACFmQ,GAASpT,EAAAA,EAAAA,IAAW4Y,EAAAA,EAAAA,GAAiB3V,EAAM0V,GAAa,CAAC1V,EAAM0V,IACrE,IAAKvF,EAAQ,OAAO,KACpB,IAAQjM,EAAwBiM,EAAxBjM,MAAOuC,EAAiB0J,EAAjB1J,KAAMD,EAAW2J,EAAX3J,OACrB,OAAO,WAACmI,EAAA,EAAD,CAAU5Q,GAAI,CAAEwE,GAAI,GAApB,WACL,UAACsB,EAAA,EAAD,CAAYC,OAAQ2C,IAAQ,UAAC1C,EAAA,EAAD,CAASxF,KAAM,EAAGR,GAAI,CAAEiG,GAAI,GAAK9E,IAAKuH,IAAUvC,MAAOA,EAAOsC,OAAQA,EAAQrC,qBAAsB,CAAE5E,QAAS,gBAC3I,UAACmD,EAAA,EAAD,KACA,UAACF,EAAA,EAAD,UACGlB,OAAOoC,QAAQ+R,GAAW/W,KAAI,iCAAEoD,EAAF,KAAO0D,EAAP,YAC5BA,EAAKC,UAAW,WAACmQ,EAAA,EAAD,CAAW7X,GAAI,CAAEiF,QAAS,qBAA1B,WACf,UAAC6S,EAAA,EAAD,CAAkBC,YAAY,UAAChB,EAAA,EAAD,IAA9B,UACE,WAACzR,EAAA,EAAD,YAAY,UAAC,IAAD,CAAWR,MAAO2C,EAAKS,KAAK1G,QAA5B,SAAsCwN,EAAAA,GAAAA,IAAA,UAAWvH,EAAKS,KAAKnE,WAArB,QAA4B,MAA9E,KAA+F,8BAASkL,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,cAEvI,UAAC8I,EAAA,EAAD,UACGvQ,EAAKwQ,SAAStX,KAAI,SAACuX,EAASnR,GAAV,OAAgB,UAACzB,EAAA,EAAD,UAAqB4S,GAAJnR,UALehD,a,kfCjPhE,SAAS8F,EAAT,GAAuL,IAAD,EAAnJxJ,EAAmJ,EAAnJA,MAAOC,EAA4I,EAA5IA,SAAU6J,EAAkI,EAAlIA,aAAcC,EAAoH,EAApHA,aAAoH,IAAtG+N,UAAAA,OAAsG,aAAnFC,WAAAA,OAAmF,aAA/DxZ,OAAAA,OAA+D,MAAtD,kBAAM,GAAgD,EAAvCyZ,GAAuC,YAC3LnT,GAAMoT,EAAAA,EAAAA,GAAe,MAArBpT,EACA9C,GAAaL,EAAAA,EAAAA,YAAWM,EAAAA,GAAxBD,SACFmW,GAAkBvZ,EAAAA,EAAAA,GAAWqN,EAAAA,GAAAA,OAAuB,IACpD1C,GAAiB3K,EAAAA,EAAAA,GAAWqN,EAAAA,GAAAA,IAAmBhM,GAAQ,CAACA,IACxDmY,EAAgBpW,EAASqW,eAAe7Z,QAAO,SAAAqL,GAAE,OAAmB,OAAfsO,QAAe,IAAfA,OAAA,EAAAA,EAAkBtO,KAAOrL,EAAO2Z,EAAgBtO,GAAKA,MAAKvK,OACrH,OAAO,UAAC0R,EAAA,GAAD,kBACDiH,GADC,IAELlS,MAAK,iBAAEwD,QAAF,IAAEA,OAAF,EAAEA,EAAgBlI,YAAlB,QAA2B0W,EAAYjT,EAAH,sCAAmBiF,QAAnB,IAAmBA,EAAAA,EAAgBjF,EAAnC,8BACzCJ,MAAOzE,EAAQ,UAAY,UAC3BiV,UAAyB,OAAd3L,QAAc,IAAdA,GAAAA,EAAgB+O,UAAW,SAACnD,EAAA,EAAD,CAAWpU,IAAKwI,EAAe6L,eAAoB2C,GAAY,SAACQ,EAAA,EAAD,IAAH,OAAyBvO,QAAzB,IAAyBA,EAAAA,GAAgB,SAACwO,EAAA,EAAD,IAJtI,WAKHR,IAAeD,GAAY,UAAC7G,EAAA,EAAD,CAAU7Q,QAAS,kBAAMH,EAAS,KAAKiR,SAAoB,KAAVlR,EAAcE,SAAoB,KAAVF,EAAzE,WAC3B,SAACwY,EAAA,EAAD,WACE,SAACF,EAAA,EAAD,OAEF,SAACrT,EAAA,EAAD,CAAY9D,QAAQ,UAAUsX,QAAM,EAApC,SACG5T,EADH,qCAGY,UAACoM,EAAA,EAAD,CAAU7Q,QAAS,kBAAMH,EAAS,KAAKiR,SAAoB,KAAVlR,EAAcE,SAAoB,KAAVF,EAAzE,WACZ,SAACwY,EAAA,EAAD,WACE,SAACD,EAAA,EAAD,OAEF,SAACtT,EAAA,EAAD,CAAY9D,QAAQ,UAAUsX,QAAM,EAApC,SACG5T,EADH,qCAIAkT,IAAc,SAACzT,EAAA,EAAD,GAAa,SAC1B4T,GAAmBQ,EAAuBR,EAAiBC,EAAelY,EAAUD,OAKpF,SAAS0Y,EAAuBR,EAA2DC,EAA+BlY,GAAqF,IAA/C0Y,EAA8C,uDAAJ,GAC/M,OAAOR,EAAc7X,KAAI,SAAAyI,GAAY,aACnC,UAACkI,EAAA,EAAD,CAAU7Q,QAAS,kBAAMH,EAAS8I,IAAkCmI,SAAUyH,IAAyB5P,EAAc7I,SAAUyY,IAAyB5P,EAAxJ,WACE,SAACyP,EAAA,EAAD,WACE,SAACtD,EAAA,EAAD,CAAWpU,IAAKoX,EAAgBnP,GAAcoM,kBAEhD,SAAClQ,EAAA,EAAD,CAAY9D,QAAQ,UAAUsX,QAAM,EAApC,gBACGP,QADH,IACGA,GADH,UACGA,EAAkBnP,UADrB,aACG,EAAiC3H,SALgB2H,M,4HC9B3C,SAAS6P,EAAT,GAAiG,IAAD,EAA1EzL,EAA0E,EAA1EA,SAAU/M,EAAgE,EAAhEA,QAASgG,EAAuD,EAAvDA,OAAQyS,EAA+C,EAA/CA,SAA+C,IAArCC,SAAAA,OAAqC,SACrG/W,GAAaL,EAAAA,EAAAA,YAAWM,EAAAA,GAAxBD,SAEFgX,GADiBC,EAAAA,EAAAA,GAAU7L,GAE3B3M,GAAc7B,EAAAA,EAAAA,GAAiB,OAANoa,QAAM,IAANA,GAAAA,EAAQrV,IAAM9E,EAAAA,GAAAA,IAAgBma,EAAOrV,UAAO6L,EAAW,QAACwJ,QAAD,IAACA,OAAD,EAACA,EAAQrV,MAEzFnF,GAAS6D,EAAAA,EAAAA,cACb,SAAC6W,GAAD,OAAwBA,EAAG7N,iBAAH,OAAqB5K,QAArB,IAAqBA,OAArB,EAAqBA,EAAapB,cAC1D,CAACoB,IAGG0Y,GAAoB9W,EAAAA,EAAAA,cACxB,SAAAyP,GAAQ,OAAI,SAACC,EAAA,EAAD,CAAgB1R,QAAS,yBAAMA,QAAN,IAAMA,OAAN,EAAMA,EAAU+M,IAAWxN,GAAI,CAAEgB,OAAQ,QAAlE,SAA6EkR,MACzF,CAACzR,EAAS+M,IAGNgM,GAAc/W,EAAAA,EAAAA,cAAY,SAACsH,GAAD,OAAgC3H,EAASqX,kBAAkBjM,EAAUzD,KAAU,CAAC3H,EAAUoL,IAEpHkM,GAASpV,EAAAA,EAAAA,UAAQ,kBAAMzD,GAAeuY,IAAUO,EAAAA,EAAAA,IAAc,CAAC9Y,EAAYoB,MAAM2X,EAAAA,EAAAA,IAAiBR,OAAW,CAACvY,EAAauY,IAEjI,IAAKA,IAAWvY,IAAgB6Y,EAAQ,OAAO,KAC/C,IAAQhO,EAA0D0N,EAA1D1N,MAAOC,EAAmDyN,EAAnDzN,UAAWkO,EAAwCT,EAAxCS,WAAYhW,EAA4BuV,EAA5BvV,GAAtC,EAAkEuV,EAAxBU,SAAAA,OAA1C,MAAqD,GAArD,EAAyDC,EAASX,EAATW,KACnDtO,GAAgBiO,EAAO/V,IAAIC,EAAAA,GAAAA,OAAAA,MAAmBvD,MAC9C2Z,GAAQ,CAACpW,EAAAA,GAAAA,OAAAA,KAAmBA,EAAAA,GAAAA,OAAAA,IAAkBA,EAAAA,GAAAA,OAAAA,MAAmBjD,KAAI,SAAAuN,GAAC,OAAIwL,EAAO/V,IAAIuK,MACrF9M,GAAMuK,EAAY,EAAZ,OAAgB9K,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAaO,IAA7B,OAAmCP,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAaoZ,UAE5D,OAAO,SAAC,EAAAjH,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,CAAU1R,QAAQ,cAAcxB,GAAI,CAAEqB,MAAO,OAAQL,OAAQ,OAAQkZ,UAAW,OAApG,UACL,SAAC1H,EAAA,EAAD,CAAoBC,YAAahS,EAASiS,QAAS6G,EAAnD,UACE,UAAChV,EAAA,EAAD,CAAWvE,GAAI,CAAEgB,OAAQ,OAAQC,QAAS,OAAQwE,cAAe,UAAjE,WACE,iBAAKnE,UAAS,eAAUT,EAAYhB,OAAtB,QAAd,WACE,SAACiG,EAAA,EAAD,CAAYK,MAAOtF,EAAYY,KAAMsE,QAAQ,SAACC,EAAA,EAAD,CAAShG,GAAI,CAAE8M,SAAU,OAAS3L,IAAG,UAAEO,EAAAA,EAAAA,mBAAF,aAAE,EAAqB+J,MAAoBrF,qBAAsB,CAAE5E,QAAS,MAC5JiH,QAAShI,IAAW,SAAC0Z,EAAA,EAAD,CAAYrV,MAAM,UAAUrE,QAAS,kBAAM2B,EAASgY,aAAa,CAAEL,MAAOA,GAAQlW,IAAlF,SACjBkW,GAAO,SAACM,EAAA,EAAD,KAAW,SAACC,EAAA,EAAD,SAEvB,UAAC1V,EAAA,GAAD,CAAM1E,WAAS,EAACF,GAAI,CAAE2S,SAAU,SAAUC,GAAI,GAA9C,WACE,UAAChO,EAAA,GAAD,CAAMzE,MAAI,EAACC,SAAU,EAArB,WACE,UAACkF,EAAA,EAAD,CAAYpE,UAAU,OAAOM,QAAQ,KAArC,iBAA+CkK,MAC/C,UAACpG,EAAA,EAAD,CAAYpE,UAAU,OAAOM,QAAQ,KAAKsD,MAAM,iBAAhD,cAAmEkQ,EAAAA,GAAkBrJ,OACrF,UAACrG,EAAA,EAAD,CAAY9D,QAAQ,KAApB,yBAAoC,4BAASqY,QAC7C,SAACvU,EAAA,EAAD,WAAY,SAAC,IAAD,CAAO3D,MAAOd,EAAYhB,OAAQ+B,SAAO,UAGvD,SAACgD,EAAA,GAAD,CAAMzE,MAAI,EAACD,WAAS,EAACqa,SAAS,MAAMC,aAAa,WAAWxa,GAAI,CAAEsM,IAAK,GAAvE,UACE,SAACY,EAAA,EAAD,CAAKhM,UAAU,MAAMC,IAAKC,GAAKC,MAAM,OAAOL,OAAO,kBAIzD,SAACyD,EAAA,EAAD,UACGuV,GAAMrZ,KAAI,SAAA8G,GACT,IAAKA,EAAKS,KAAKnE,IAAK,OAAO,KAC3B,IAAM0W,GAAaxL,EAAAA,EAAAA,IAAYxH,EAAKpH,MAAOoH,EAAKyH,KAAOzH,EAAKyH,UAAWU,EAAJ,GACnE,OAAO,UAAC1C,EAAA,EAAD,CAAyBlN,GAAI,CAAEiB,QAAS,QAAxC,WACL,UAACqE,EAAA,EAAD,CAAYlF,SAAU,EAAtB,UAA0BgM,EAAAA,EAAS3E,EAAKS,KAAKnE,KAA7C,IAAqDiL,EAAAA,GAAAA,IAAWvH,EAAKS,KAAKnE,SAC1E,SAACuB,EAAA,EAAD,UAAamV,MAFEhT,EAAKS,KAAKnE,WAO/B,SAACmJ,EAAA,EAAD,CAAK9M,SAAU,KACf,SAACqE,EAAA,EAAD,CAAazE,GAAI,CAAEC,GAAI,GAAvB,UACE,UAAC2E,EAAA,GAAD,CAAM1E,WAAS,EAACF,GAAI,CAAE2S,SAAU,UAAhC,WACE,SAAC/N,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAG,OAAOmV,WAAY,EAAjC,SACGvB,GAAW,SAACtP,EAAD,CAAyBrJ,KAAK,QAAQ4X,YAAU,EAACD,WAAS,EAAC9X,MAAOyZ,EAAUxZ,SAAUkZ,EAAa5a,OAAQA,KAAa,SAAC+b,EAAA,EAAD,CAAcb,SAAUA,OAE9J,SAAClV,EAAA,GAAD,CAAMzE,MAAI,EAACC,SAAU,EAAGJ,GAAI,CAAEuX,GAAI,MAClC,SAAC3S,EAAA,GAAD,CAAMzE,MAAI,EAACoF,GAAG,OAAd,UACE,UAACkQ,EAAA,EAAD,CAAazV,GAAI,CAAEgB,OAAQ,QAA3B,YACKyF,IAAU,SAAC5B,EAAA,EAAD,CAAQC,MAAM,OAAOtE,KAAK,QAAQC,QAAS,kBAAMgG,EAAO5C,IAAxD,UACX,SAAC,IAAD,CAAiB6E,KAAMqH,EAAAA,IAAQzO,UAAU,cAExC4X,IAAY,SAACrU,EAAA,EAAD,CAAQC,MAAM,QAAQtE,KAAK,QAAQC,QAAS,kBAAMyY,EAASrV,IAAKtD,WAAYuZ,GAAYC,EAAxF,UACb,SAAC,IAAD,CAAiBrR,KAAMkS,EAAAA,IAAYtZ,UAAU,+B,uhBC3DhD,SAASiM,EAAT,GAIiB,IAAD,EAHnBsN,EAGmB,EAH7BrN,SAG6B,IAF7B8F,OAAAA,OAE6B,SAD7BvT,EAC6B,EAD7BA,QAEQkC,GAASF,EAAAA,EAAAA,YAAWC,EAAAA,GAApBC,KAEAG,GAAaL,EAAAA,EAAAA,YAAWM,EAAAA,GAAxBD,SACFgX,GAASC,EAAAA,EAAAA,GAAUwB,GACzB,SAAwFzB,QAAxF,IAAwFA,EAAAA,EAAU,GAAlG,IAAQrV,IAAAA,OAAR,MAAc,GAAd,MAAkB2H,MAAAA,OAAlB,MAA0B,EAA1B,MAA6BmO,WAAAA,OAA7B,MAA0C,EAA1C,OAA6ClO,UAAAA,QAA7C,OAAyD,EAAzD,GAA4DoO,GAA5D,EAA4DA,KAA5D,KAAkED,SAAAA,QAAlE,OAA6E,GAA7E,GAAiFjW,GAAjF,EAAiFA,GAC3EhD,IAAc7B,EAAAA,EAAAA,GAAWC,EAAAA,GAAAA,IAAgB8E,GAAM,CAACA,IAChD0H,GAAa,OAAG5K,SAAH,IAAGA,QAAH,EAAGA,GAAapB,WAE7Bqb,IAAiBrY,EAAAA,EAAAA,cAAY,SAACsY,GAClC3Y,EAASgY,aAAaW,EAAWF,KAChC,CAACA,EAAczY,IAEZ0S,IAAWrS,EAAAA,EAAAA,cAAY,SAAAiJ,GAC3BA,GAAQqJ,EAAAA,EAAAA,IAAMrJ,EAAO,EAAG,IACxB,IAAMC,EAAYqJ,EAAAA,GAAAA,WAA4B,SAAAC,GAAO,OAAIvJ,GAASuJ,KAClE6F,GAAe,CAAEpP,MAAAA,EAAOC,UAAAA,MACvB,CAACmP,KAEE5F,IAAezS,EAAAA,EAAAA,cAAY,WAC/B,IAAM0S,EAAiBH,EAAAA,GAAAA,WAA4B,SAAAC,GAAO,OAAc,KAAVvJ,GAAgBA,IAAUuJ,KACtD6F,GAA9BnP,KAAcwJ,EAA+B,CAAExJ,UAAWA,GAAY,GACtD,CAAEA,UAAWwJ,MAChC,CAAC2F,GAAgBnP,GAAWD,IAEzB/B,IAAiB3K,EAAAA,EAAAA,GAAW8a,GAAWzN,EAAAA,GAAAA,IAAmByN,SAAYlK,EAAW,CAACkK,KAClFhb,GAAe6K,GAAiB,SAACqR,GAAD,OAAQA,EAAGvb,aAAekK,GAAe8B,oBAAgBmE,EACzFqL,GAAsBtR,IAAkBA,GAAe8B,cAEvD+N,IAAc/W,EAAAA,EAAAA,cAAY,SAACsH,GAAD,OAAgClG,IAAMzB,EAASqX,kBAAkB5V,GAAIkG,KAAU,CAAC3H,EAAUyB,KACpHjF,IAAS6D,EAAAA,EAAAA,cACb,SAAC6W,GAAD,OAAwBA,EAAG7N,iBAAH,OAAqB5K,SAArB,IAAqBA,QAArB,EAAqBA,GAAapB,cAC1D,CAACoB,KAGH,IAAkC3B,EAAAA,EAAAA,WAAS,GAA3C,iBAAOyV,GAAP,MAAkBC,GAAlB,MACMxT,GAAMuK,GAAY,EAAZ,OAAgB9K,SAAhB,IAAgBA,QAAhB,EAAgBA,GAAaO,IAA7B,OAAmCP,SAAnC,IAAmCA,QAAnC,EAAmCA,GAAaoZ,WAG5D7a,EAAAA,EAAAA,YAAU,WACR,GAAKyB,IAAgBia,IAAkBja,GAAYkD,OAAZ,OAAoBqV,QAApB,IAAoBA,OAApB,EAAoBA,EAAQrV,MAC/DlD,GAAYhB,QAAU,IAAM6L,EAAQ,IAAMC,GAAY,GAAI,CAC5D,cAA2BuP,EAAAA,GAAAA,GAA3B,GAAOxP,EAAP,KAAcC,EAAd,KACAmP,GAAe,CAAEpP,MAAAA,EAAOC,UAAAA,OAEzB,CAAC9K,GAAauY,EAAQ0B,GAAgBpP,EAAOC,KAGhD,IAAMwP,IAAe7W,EAAAA,EAAAA,UAAQ,kBAAMzD,IAAeuY,IAAUO,EAAAA,EAAAA,IAAc,CAAC9Y,GAAYoB,MAAM2X,EAAAA,EAAAA,IAAiBR,OAAW,CAACvY,GAAauY,IACvI,OAAO,UAAC,IAAD,YACL,SAAC,IAAD,CAAapZ,GAAI,CAAEC,GAAI,GAAvB,UACE,UAAC,KAAD,CAAMC,WAAS,EAACQ,QAAS,EAAzB,WACE,SAAC,KAAD,CAAMP,MAAI,EAACC,SAAU,EAArB,UACE,UAAC,KAAD,CAAMF,WAAS,EAACQ,QAAS,EAAzB,WACE,UAAC,KAAD,CAAMP,MAAI,EAAV,WACE,SAAC,IAAD,CAAsB1B,KAAMkW,GAAWjW,OAAQ,kBAAMkW,IAAa,IAAQjW,SAAU,SAAAkP,GAAC,OAAIiN,GAAe,CAAE/W,IAAK8J,KAAMjP,OAAQE,GAAcA,aAAcmc,MACzJ,UAAC,IAAD,YACE,SAAC,IAAD,CAAQxa,QAAS,kBAAMmU,IAAa,IAApC,0BAA6C/T,SAA7C,IAA6CA,QAA7C,EAA6CA,GAAaY,YAA1D,QAAkE,qBACtD,OAAXZ,SAAW,IAAXA,QAAA,EAAAA,GAAaua,iBAAiB,UAAC,IAAD,CAAgBjV,MAAK,qBAAgB0T,GAArC,WAC7B,SAAC,IAAD,wCACA,SAAC,IAAD,KACC,OAAIwB,MAAM,GAAGhN,QAAQ1N,KAAI,SAAAoD,GAAG,OAC3B,SAAC,IAAD,CAAoBtD,QAAS,kBAAMqa,GAAe,CAAEjB,WAAY9V,EAAM,KAAMwN,SAAUsI,IAAgB9V,EAAM,EAAIxD,SAAUsZ,IAAgB9V,EAAM,EAAhJ,8BACiBA,EAAM,IADRA,gBAMvB,SAAC,KAAD,CAAM5D,MAAI,EAAV,UACE,UAAC,IAAD,CAAaH,GAAI,CAAEiF,QAAS,SAAAC,GAAC,OAAIA,EAAEC,QAAQmW,aAAa3F,OAAxD,WACE,SAAC,KAAD,WACE,SAAC,KAAD,CAAmBrV,SAAUwU,GAAUzU,MAAOqL,EAC5CuK,eAAe,QACfC,WAAY,CAAEC,IAAK,EAAGC,IAAK,GAAIpW,GAAI,CAAEoN,UAAW,WAChDpN,GAAI,CAAEqB,MAAO,OAAQL,OAAQ,OAAQ4R,GAAI,OAG5C/R,KAAe,SAAC,IAAD,CAAQb,GAAI,CAAE4S,GAAI,GAAKrS,UAAWM,GAAYwV,eAAe3K,GAAQjL,QAASyU,GAA9E,UAA4F,mCAAWF,EAAAA,GAAkBrJ,SACxI9K,KAAe,SAAC,IAAD,CAAgBsF,MAAO,eAAvB,SACbtF,GAAYyV,gBAAgB3V,KAAI,YAAe,IAAD,eAAZ4V,EAAY,KAARC,EAAQ,KAEvCC,EADYF,IAAOvB,EAAAA,GAAkBwB,GACnB,cAAUD,GAAV,cAAwBA,EAAxB,YAA8BvB,EAAAA,GAAkBwB,IAClEjF,EAAWgF,IAAO7K,GAAS8K,IAAO7K,GACxC,OAAO,SAAC,IAAD,CAA8B4F,SAAUA,EAAUhR,SAAUgR,EAAU9Q,QAAS,kBAAMqa,GAAe,CAAEpP,MAAO6K,EAAI5K,UAAW6K,KAA5H,SAAoIC,GAApI,UAAkBF,EAAlB,YAAwBC,eAKvC,SAAC,KAAD,CAAMrW,MAAI,EAAV,UACE,SAAC,IAAD,CAAQ2E,MAAM,QAAQrE,QAAS,kBAAMoD,IAAMzB,EAASgY,aAAa,CAAEL,MAAOA,IAAQlW,KAAKyR,UAAWyE,IAAO,SAAC,IAAD,KAAW,SAAC,IAAD,IAApH,SACGA,GAAO,SAAW,sBAKxBha,IAAW,SAAC,KAAD,CAAMI,MAAI,EAAV,UACZ,SAAC,IAAD,CAAaM,QAASV,OAExB,SAAC,KAAD,CAAMI,MAAI,EAAV,UACE,SAACob,EAAD,CAAS9P,cAAeA,GAAe+P,WAAY,SAAA3X,GAAE,OAAIzB,EAASqX,kBAAkB5V,EAAI5B,EAAK0B,IAAIC,EAAAA,GAAAA,SAAevD,kBAItH,SAAC,IAAD,KACA,SAAC,IAAD,UACGQ,IAAesa,KAAgB,UAAC,KAAD,CAAMjb,WAAS,EAACQ,QAAS,IAAzB,WAC9B,SAAC,KAAD,CAAMP,MAAI,EAACoF,GAAI,GAAIC,GAAI,EAAvB,UACE,UAAC,KAAD,CAAMtF,WAAS,EAACQ,QAAS,IAAzB,WACE,SAAC,KAAD,CAAMP,MAAI,EAACoF,GAAI,EAAGC,GAAI,GAAtB,UACE,SAAC,IAAD,CAAKtE,UAAU,MAAMC,IAAKC,GAAKE,UAAS,eAAUT,GAAYhB,OAAtB,QAAoCG,GAAI,CAAEua,SAAU,IAAKlZ,MAAO,OAAQL,OAAQ,OAAQgM,aAAc,QAEhJ,SAAC,KAAD,CAAM7M,MAAI,EAACoF,GAAI,EAAGC,GAAI,GAAtB,UACE,SAAC,IAAD,WAAY,2BAAQ3E,GAAY4a,wBAItC,UAAC,KAAD,CAAMtb,MAAI,EAACoF,GAAI,GAAIC,GAAI,EAAvB,WACE,UAAC,IAAD,CAAYhE,QAAQ,KAApB,WAA2Bka,EAAgG7a,GAAYY,KAAvI,QAAkJ2X,GAAUna,EAAAA,GAAAA,eAA2Bma,GAAvL,IAAiMvY,GAAYhB,OAAS,IAAK,UAAC,IAAD,CAASiF,MAAM,OAAf,wBAAkC+U,SAC7P,SAAC,IAAD,WAAY,SAAC,IAAD,CAAOlY,MAAOd,GAAYhB,YACtC,SAAC,IAAD,CAAY2B,QAAQ,YAApB,SAAiCX,GAAY8a,eAC7C,SAAC,IAAD,CAAYC,cAAY,EAAxB,SAA0B/a,GAAY8a,aAAe9a,GAAYgb,mBAAmBV,GAAaxX,IAAIC,EAAAA,GAAAA,OAAAA,aAA0BvD,UAC/H,UAAC,IAAD,CAAKY,QAAQ,OAAOwE,cAAc,SAASC,IAAK,EAAhD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYS,MAAO,aAAcC,qBAAsB,CAAE5E,QAAS,gBAClE,SAAC,IAAD,KACA,SAAC,KAAD,UACG,CAACoC,EAAAA,GAAAA,OAAAA,KAAmBA,EAAAA,GAAAA,OAAAA,IAAkBA,EAAAA,GAAAA,OAAAA,MAAmBjD,KAAI,SAAC8G,EAAMV,GACnE,IAAMkB,EAAIkT,GAAaxX,IAAI8D,GAC3B,OAAIQ,EAAEP,UAAYO,EAAE5H,MAAc,MAC3B,SAAC,KAAD,CAAmCoH,KAAMQ,EAAG/G,UAAW4a,EAAAA,IAAhC7T,EAAEC,KAAKnE,aAI1C9B,GAAQpB,GAAYoK,WAAY,SAAC,IAAD,CAAiBrC,SAAU/H,GAAYoK,sBAM9EqI,GAAUzP,KAAM,SAAC,IAAD,CAAa7D,GAAI,CAAEC,GAAI,GAAvB,UACd,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,SAAC,KAAD,CAAMC,MAAI,EAACC,SAAU,EAArB,UACE,SAAC,IAAD,CAAyBgY,YAAU,EAACD,WAAS,EAAC9X,MAAOyZ,GAAUxZ,SAAUkZ,GAAa5a,OAAQA,SAE7FmB,IAAW,SAAC,KAAD,CAAMI,MAAI,EAAV,UAAW,SAAC,IAAD,CAAa0B,OAAK,EAACpB,QAASV,cAM/D,SAASwb,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,WAAY/P,EAAiB,EAAjBA,cACrBrJ,GAAaL,EAAAA,EAAAA,YAAWM,EAAAA,GAAxBD,SACR,GAAwBlD,EAAAA,EAAAA,WAAS,GAAjC,eAAOT,EAAP,KAAasd,EAAb,KAEMC,EAAQ,kBAAMD,GAAQ,IAEtBE,EAAe,SAACpY,GACpB2X,EAAW3X,GACXmY,KAGIjd,GAAeC,EAAAA,EAAAA,GAAWC,EAAAA,GAAAA,OAAoB,IAE9CI,EAAe+C,EAAS8Z,QAAQ7N,KAAKzP,QAAO,SAAAY,GAAS,IAAD,EAClD2c,EAAW/Z,EAASga,WAAW5c,GACrC,QAAK2c,KACD1Q,GAAiBA,KAAa,OAAK1M,QAAL,IAAKA,GAAL,UAAKA,EAAeod,EAASpY,YAA7B,aAAK,EAA8BtE,gBAKvE,OAAO,iCACL,SAAC,IAAD,CAAQqF,MAAM,OAAOrE,QAnBV,kBAAMsb,GAAQ,IAmBWzG,WAAW,SAAC,IAAD,IAA/C,0BACA,SAAC,IAAD,CAAcxV,KAAMrB,EAAMsB,QAASic,EAAnC,UACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAahc,GAAI,CAAEC,GAAI,GAAvB,UACE,UAAC,KAAD,CAAMC,WAAS,EAAf,WACE,SAAC,KAAD,CAAMC,MAAI,EAACC,SAAU,EAArB,UACE,UAAC,IAAD,CAAYoB,QAAQ,KAApB,UAA0BiK,GAAgB,SAAC,IAAD,CAAStK,IAAKO,EAAAA,EAAAA,YAAmB+J,KAAqB,KAAhG,qBAEF,SAAC,KAAD,CAAMtL,MAAI,EAAV,UACE,SAAC,IAAD,CAAaM,QAASub,YAI5B,SAAC,IAAD,KACA,SAAC,IAAD,WACE,SAAC,KAAD,CAAM9b,WAAS,EAACQ,QAAS,EAAzB,SACGrB,EAAasB,KAAI,SAAA6M,GAAQ,OACxB,SAAC,KAAD,CAAMrN,MAAI,EAAgBoF,GAAI,EAAGC,GAAI,EAAGzE,GAAI,EAAGD,GAAI,EAAnD,UACE,SAAC,IAAD,CACE0M,SAAUA,EACV/M,QAASwb,KAHGzO","sources":["Components/Weapon/WeaponSelectionModal.tsx","PageCharacter/CharacterDisplay/CharacterArtifactPane.tsx","PageCharacter/CharacterDisplay/CharacterTeamBuffsPane.tsx","PageCharacter/CharacterDisplay/CharacterOverviewPane.tsx","PageCharacter/CharacterDisplay/CharacterTalentPane.tsx","PageCharacter/CharacterDisplayCard.tsx","Components/Character/CharacterDropdownButton_WR.tsx","PageWeapon/WeaponCard.tsx","PageWeapon/WeaponDisplayCard.tsx"],"sourcesContent":["import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Data/Weapons/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n","import { Button, Card, CardContent, CardHeader, Divider, Grid, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../PageArtifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Components/Artifact/SetEffectDisplay';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport { DatabaseContext } from '../../Database/Database';\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from '../../Formula';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport { objectKeyMap } from '../../Util/Util';\r\nimport StatDisplayComponent from '../../Components/Character/StatDisplayComponent';\r\nimport { ArtifactDisplayLocationState } from '../../Types/LocationState';\r\n\r\nfunction CharacterArtifactPane({ newBuild = false }: { newBuild?: boolean }) {\r\n  const { data, character, mainStatAssumptionLevel } = useContext(DataContext)\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      state: {\r\n        artToEditId: artid\r\n      } as ArtifactDisplayLocationState\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    const newBuild = Object.fromEntries(allSlotKeys.map(s => [s, data.get(input.art[s].id).value])) as Record<SlotKey, string>\r\n    database.equipArtifacts(character.key, newBuild)\r\n  }, [character, data, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!character) return\r\n    if (!window.confirm(\"Do you want to move all currently equipped artifacts to inventory?\")) return\r\n    database.equipArtifacts(character.key, objectKeyMap(allSlotKeys, _ => \"\"))\r\n  }, [character, database])\r\n  const artIds = allSlotKeys.map(slotKey => data.get(input.art[slotKey].id).value)\r\n  const setEffects = useMemo(() => artifactSheets && ArtifactSheet.setEffects(artifactSheets, data), [artifactSheets, data])\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n        {artifactSheets && setEffects && Object.entries(setEffects).map(([setKey, setNumKeyArr]) =>\r\n          <CardLight key={setKey} sx={{ flexGrow: 1, }} >\r\n            <CardHeader avatar={<ImgIcon size={2} sx={{ m: -1 }} src={artifactSheets[setKey].defIconSrc} />} title={artifactSheets[setKey].name} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n            <Divider />\r\n            <CardContent >\r\n              <Grid container spacing={1} flexDirection=\"column\" height=\"100%\" >\r\n                <Grid item display=\"flex\" flexDirection=\"column\" gap={2}>\r\n                  {setNumKeyArr.map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} setKey={setKey} setNumKey={setNumKey} />)}\r\n                </Grid>\r\n              </Grid>\r\n            </CardContent>\r\n          </CardLight>\r\n        )}\r\n      </Grid>\r\n      {artIds.map(id => !!id && <Grid item xs={6} md={4} key={id} >\r\n        <ArtifactCard artifactId={id} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={edit} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { PersonAdd } from \"@mui/icons-material\";\r\nimport { CardContent, CardHeader, Divider, Grid } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport CharacterDropdownButton from \"../../Components/Character/CharacterDropdownButton\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport { resonanceSheets } from \"../../Data/Resonance\";\r\nimport { DataContext, dataContextObj } from \"../../DataContext\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { NodeDisplay } from \"../../Formula/uiData\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport useCharSelectionCallback from \"../../ReactHooks/useCharSelectionCallback\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport { objPathValue, range } from \"../../Util/Util\";\r\nimport CharacterCard from \"../CharacterCard\";\r\n\r\nexport default function CharacterTeamBuffsPane() {\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\r\n    <TeamBuffDisplay />\r\n    <ResonanceDisplay />\r\n    <Grid container spacing={1}>\r\n      {range(0, 2).map(i => <Grid item xs={12} md={6} lg={4} key={i}>\r\n        <TeammateDisplay index={i} />\r\n      </Grid>)}\r\n    </Grid>\r\n  </Box>\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\nexport function TeamBuffDisplay() {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const teamBuffs = data.getTeamBuff()\r\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\r\n  Object.entries(teamBuffs.total ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"total\", key], node]))\r\n  Object.entries(teamBuffs.premod ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"premod\", key], node]))\r\n  Object.entries(teamBuffs.enemy ?? {}).forEach(([key, node]) =>\r\n    !node.isEmpty && node.value !== 0 && nodes.push([[\"enemy\", key], node]))\r\n  if (!nodes.length) return null\r\n  return <CardLight>\r\n    <CardContent>\r\n      Team Buffs\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container columnSpacing={2} rowSpacing={1}>\r\n        {nodes.map(([path, n], i) => n && <Grid item {...statBreakpoint} key={n.info.key} >\r\n          <NodeFieldDisplay node={n} oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value} />\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction ResonanceDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  return <Grid container spacing={1}>\r\n    {resonanceSheets.map((res, i) =>\r\n      <Grid item key={i} xs={12} md={6} lg={4} >\r\n        <CardLight sx={{ opacity: res.canShow(data) ? 1 : 0.5, height: \"100%\" }}>\r\n          <CardHeader title={res.name} action={res.icon} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n          {res.canShow(data) && <Divider />}\r\n          {res.canShow(data) && <CardContent>\r\n            <DocumentDisplay sections={res.sections} teamBuffOnly={true} />\r\n          </CardContent>}\r\n        </CardLight>\r\n      </Grid>\r\n    )}\r\n  </Grid>\r\n}\r\nfunction TeammateDisplay({ index }: { index: number }) {\r\n  const dataContext = useContext(DataContext)\r\n  const { character: active, teamData, characterDispatch: activeCharacterDispatch } = dataContext\r\n  const activeCharacterKey = active.key\r\n  const characterKey = active.team[index]\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  // TODO: this UIData should be fed from the main CharacterDisplayCard for teams.\r\n  const onClickHandler = useCharSelectionCallback()\r\n\r\n  const dataBundle = teamData[characterKey]\r\n  const teamMateDataContext: dataContextObj | undefined = dataBundle && characterDispatch && {\r\n    character: dataBundle.character,\r\n    characterSheet: dataBundle.characterSheet,\r\n    data: dataBundle.target,\r\n    teamData: teamData,\r\n    mainStatAssumptionLevel: 0,\r\n    characterDispatch\r\n  }\r\n  return <CardLight>\r\n    <CardContent>\r\n      <CharacterDropdownButton fullWidth value={characterKey}\r\n        onChange={charKey => activeCharacterDispatch({ type: \"team\", index, charKey })}\r\n        filter={(_, ck) => ck !== activeCharacterKey && !active.team.includes(ck)} unSelectText={`Teammate ${index + 1}`} unSelectIcon={<PersonAdd />} />\r\n    </CardContent>\r\n    {teamMateDataContext && <DataContext.Provider value={teamMateDataContext}>\r\n      <CharacterCard characterKey={characterKey}\r\n        onClickHeader={onClickHandler}\r\n        artifactChildren={<CharArtifactCondDisplay />}\r\n        weaponChildren={<CharWeaponCondDisplay />}\r\n        characterChildren={<CharTalentCondDisplay />}\r\n      />\r\n    </DataContext.Provider>}\r\n  </CardLight>\r\n\r\n}\r\nfunction CharArtifactCondDisplay() {\r\n  const { data, } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sections = useMemo(() => artifactSheets &&\r\n    Object.entries(ArtifactSheet.setEffects(artifactSheets, data))\r\n      .flatMap(([setKey, setNums]) =>\r\n        setNums.flatMap(sn => artifactSheets[setKey]!.setEffectDocument(sn)!))\r\n    , [artifactSheets, data])\r\n  if (!sections) return null\r\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\r\n}\r\nfunction CharWeaponCondDisplay() {\r\n  const { teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const weaponSheet = teamData[charKey]!.weaponSheet\r\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\r\n}\r\nfunction CharTalentCondDisplay() {\r\n  const { data, teamData, character: { key: charKey } } = useContext(DataContext)\r\n  const characterSheet = teamData[charKey]!.characterSheet\r\n  const talent = characterSheet.getTalent(data.get(input.charEle).value as ElementKey)!\r\n  const sections = Object.values(talent.sheets).flatMap(sts => sts.sections)\r\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\r\n}\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport { NodeFieldDisplay } from \"../../Components/FieldDisplay\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport { DataContext } from \"../../DataContext\";\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ReadNode } from \"../../Formula/type\";\r\nimport KeyMap, { valueString } from \"../../KeyMap\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { amplifyingReactions, transformativeReactions } from \"../../KeyMap/StatConstants\";\r\nimport { allElementsWithPhy, ElementKey } from \"../../Types/consts\";\r\nimport WeaponDisplayCard from \"../../PageWeapon/WeaponDisplayCard\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nimport { TeamBuffDisplay } from \"./CharacterTeamBuffsPane\";\r\nimport { range } from \"../../Util/Util\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nexport default function CharacterOverviewPane() {\r\n  const { data, characterSheet, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = data.get(input.lvl).value\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  const tlvl = {\r\n    auto: data.get(input.total.auto).value,\r\n    skill: data.get(input.total.skill).value,\r\n    burst: data.get(input.total.burst).value,\r\n  }\r\n  const tBoost = {\r\n    auto: data.get(input.bonus.auto).value,\r\n    skill: data.get(input.bonus.skill).value,\r\n    burst: data.get(input.bonus.burst).value,\r\n  }\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[charEle]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.rarity} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {CharacterSheet.getLevelString(level, ascension)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {([\"auto\", \"skill\", \"burst\"] as TalentSheetElementKey[]).map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey]} color={tBoost[tKey] ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    width: \"100%\",\r\n                    height: \"100%\",\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, charEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {range(1, 6).map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i}` as TalentSheetElementKey, charEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation >= i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard weaponId={character.equippedWeapon} />\r\n      <MainStatsCards />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst mainBaseKeys = [\"atk\", \"hp\", \"def\"] as const\r\nconst mainSubKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"] as const\r\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(k => input.total[k])\r\nconst mainEditKeys = [\"atk_\", \"atk\", \"hp_\", \"hp\", \"def_\", \"def\", ...mainSubKeys] as const\r\n\r\nconst otherStatReadNodes = [\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_dmg_`]),\r\n  ...allElementsWithPhy.map(ele => input.total[`${ele}_res_`]),\r\n  ...([\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\"] as const).map(x => input.total[x])\r\n]\r\nconst otherStatKeys = otherStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst miscStatReadNodes = [\r\n  input.total.all_dmg_,\r\n  ...allElementsWithPhy.map(x => input.total[`${x}_enemyRes_`]),\r\n  input.total.normal_dmg_, input.total.normal_critRate_,\r\n  input.total.charged_dmg_, input.total.charged_critRate_,\r\n  input.total.plunging_dmg_, input.total.plunging_critRate_,\r\n  input.total.skill_dmg_, input.total.skill_critRate_,\r\n  input.total.burst_dmg_, input.total.burst_critRate_,\r\n  ...Object.keys(transformativeReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...Object.keys(amplifyingReactions).map(x => input.total[`${x}_dmg_`]),\r\n  ...([\"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"] as const).map(x => input.total[x]),\r\n  input.total.dmgRed_\r\n]\r\nconst miscStatkeys = miscStatReadNodes.map(x => x.info!.key!)\r\n\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\nfunction StatDisplayContent({ nodes, statBreakpoint, extra }: { nodes: ReadNode<number>[], statBreakpoint: object, extra?: Displayable }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  return <Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n    {nodes.map(rn => <Grid item key={rn.info?.key} {...statBreakpoint} >\r\n      {<NodeFieldDisplay node={data.get(rn)} oldValue={oldData?.get(rn)?.value} />}\r\n    </Grid>)}\r\n    {extra}\r\n  </Grid>\r\n}\r\n\r\nfunction MainStatsCards() {\r\n  const { data, character, character: { key: characterKey } } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const specialNode = data.get(input.special)\r\n\r\n  return <>\r\n    <TeamBuffDisplay />\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={mainReadNodes}\r\n        extra={specialNode && <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Special:</b> <ColorText color={specialNode.info.variant}>{specialNode.info.key && StatIcon[specialNode.info.key]} {specialNode.info.key && KeyMap.get(specialNode.info.key)}</ColorText></span>\r\n          <span >{valueString(specialNode.value, specialNode.unit)}</span>\r\n        </Grid>}\r\n      />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {mainEditKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<StatDisplayContent statBreakpoint={statBreakpoint} nodes={otherStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              defaultValue={undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<StatDisplayContent statBreakpoint={{\r\n        xs: 12, sm: 6, md: 6,\r\n      }} nodes={miscStatReadNodes} />}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => {\r\n          const statName = KeyMap.get(statKey)\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {statName}</span>}\r\n              placeholder={KeyMap.getStr(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={KeyMap.unit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>\r\n        })}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport { TalentSheetElementKey } from \"../../Types/character\";\r\nimport { DataContext } from '../../DataContext';\r\nimport { uiInput as input } from \"../../Formula\";\r\nimport { ElementKey } from \"../../Types/consts\";\r\nimport KeyMap, { valueString } from '../../KeyMap'\r\nimport { NodeDisplay } from '../../Formula/uiData'\r\nimport { NumNode } from \"../../Formula/type\";\r\nimport { range } from \"../../Util/Util\";\r\nexport default function CharacterTalentPane() {\r\n  const { data, character, characterSheet } = useContext(DataContext)\r\n  const characterDispatch = useCharacterReducer(character.key)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]] as [TalentSheetElementKey, string][]\r\n  const passivesList: [tKey: TalentSheetElementKey, tText: string, asc: number][] = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const charEle = data.get(input.charEle).value as ElementKey | undefined\r\n  const ascension = data.get(input.asc).value\r\n  const constellation = data.get(input.constellation).value\r\n  return <>\r\n    <ReactionDisplay />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", charEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, charEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {range(1, 6).map(i => {\r\n        let tKey = `constellation${i}` as TalentSheetElementKey\r\n        return <Grid item key={i} xs={12} md={4}\r\n          sx={{ opacity: constellation >= i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            talentKey={tKey}\r\n            subtitle={`Constellation Lv. ${i}`}\r\n            onClickTitle={() => characterDispatch({ constellation: i === constellation ? i - 1 : i })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct: SuperConductCard,\r\n  electrocharged: ElectroChargedCard,\r\n  overloaded: OverloadedCard,\r\n  pyroSwirl: SwirlCard,// TODO: Assumes if character can pyro swirl, it can swirl every element. This behaviour will need to be changed for characters that can only swirl specific elements.\r\n  shattered: ShatteredCard,\r\n  crystallize: CrystallizeCard,\r\n}\r\nfunction ReactionDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(reaction).map(([key, node]) => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele node={node} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{KeyMap.get(node.info.key!)} {StatIcon.electro}+{StatIcon.cryo} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{KeyMap.get(node.info.key!)} {StatIcon.electro}+{StatIcon.hydro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ node }: { node: NodeDisplay }) {\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{KeyMap.get(node.info.key!)} {StatIcon.electro}+{StatIcon.pyro} <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_swirl_hit\")}</ColorText> {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_swirl_hit\")}</ColorText> {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_swirl_hit\")}</ColorText> {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_swirl_hit\")}</ColorText> {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\n\r\nfunction SwirlCard() {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const { data } = useContext(DataContext)\r\n  const node = data.getDisplay().reaction![`${ele}Swirl`]!\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nfunction ShatteredCard({ node }: { node: NodeDisplay }) {\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{KeyMap.get(node.info.key!)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{valueString(node.value, node.unit)}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst crystallizeEleToDisplay = {\r\n  \"geo\": <ColorText color=\"crystallize\">{KeyMap.get(\"crystallize\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span><ColorText color=\"pyro\">{KeyMap.get(\"pyro_crystallize\")}</ColorText> {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span><ColorText color=\"electro\">{KeyMap.get(\"electro_crystallize\")}</ColorText> {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span><ColorText color=\"cryo\">{KeyMap.get(\"cryo_crystallize\")}</ColorText> {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span><ColorText color=\"hydro\">{KeyMap.get(\"hydro_crystallize\")}</ColorText> {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\n\r\nfunction CrystallizeCard() {\r\n  const [ele, setele] = useState(Object.keys(crystallizeEleToDisplay)[0])\r\n  const { data } = useContext(DataContext)\r\n  const node = ele === \"geo\" ? data.getDisplay().reaction!.crystallize! : data.getDisplay().reaction![`${ele}Crystallize`]!\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystallizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystallizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{valueString(node.value, node.unit)}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  talentKey: TalentSheetElementKey,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { data, character: { talent }, characterSheet, characterDispatch } = useContext(DataContext)\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost = data.get(input.bonus[talentKey] as NumNode).value\r\n    const level = data.get(input.total[talentKey]).value\r\n    const asc = data.get(input.asc).value\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${level}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {range(1, talentLimits[asc]).map(i =>\r\n            <MenuItem key={i} selected={talent[talentKey] === (i)} disabled={talent[talentKey] === (i)} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n  }\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, data.get(input.charEle).value as ElementKey | undefined)\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {talentSheet?.sections ? <DocumentDisplay sections={talentSheet.sections} /> : null}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { ExpandMore } from '@mui/icons-material';\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, ButtonGroup, Card, CardContent, CardHeader, Collapse, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, ToggleButton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport ColorText from '../Components/ColoredText';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport ExpandButton from '../Components/ExpandButton';\r\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../Components/HitModeEditor';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { sgt } from '../Data/SheetUtil';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport { getDisplayHeader, getDisplaySections } from '../Formula/DisplayUtil';\r\nimport { DisplaySub } from '../Formula/type';\r\nimport { NodeDisplay } from '../Formula/uiData';\r\nimport KeyMap, { valueString } from '../KeyMap';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { clamp } from '../Util/Util';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterTeamBuffsPane from './CharacterDisplay/CharacterTeamBuffsPane';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  footer?: JSX.Element\r\n  newteamData?: TeamData,\r\n  mainStatAssumptionLevel?: number,\r\n  onClose?: (any) => void,\r\n  tabName?: string,\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, footer, newteamData, mainStatAssumptionLevel = 0, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\r\n  const { character, characterSheet, target: charUIData } = teamData?.[characterKey] ?? {}\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newteamData ? \"newartifacts\" : \"character\"))\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const characterDispatch = useCharacterReducer(character?.key ?? \"\")\r\n  const { compareData } = character ?? {}\r\n\r\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\r\n    if (!teamData || !character || !characterSheet || !charUIData) return undefined\r\n    return {\r\n      character,\r\n      characterSheet,\r\n      mainStatAssumptionLevel,\r\n      data: (newteamData ? newteamData[characterKey]!.target : charUIData),\r\n      teamData: (newteamData ? newteamData : teamData),\r\n      oldData: (compareData && newteamData) ? charUIData : undefined,\r\n      characterDispatch\r\n    }\r\n  }, [character, characterSheet, mainStatAssumptionLevel, newteamData, charUIData, teamData, characterDispatch, characterKey, compareData])\r\n\r\n  if (!teamData || !character || !characterSheet || !charUIData || !dataContextValue) return <></>\r\n\r\n  return <CardDark >\r\n    <DataContext.Provider value={dataContextValue}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            <CharSelectDropdown />\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newteamData && <SolidToggleButtonGroup exclusive value={compareData} onChange={(e, v) => characterDispatch({ compareData: v })} size=\"small\">\r\n              <ToggleButton value={false} disabled={!compareData}>\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} disabled={compareData}>\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1} />\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newteamData && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newteamData ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            <Tab value=\"buffs\" label=\"Team Buffs\" />\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <FormulaCalcCard />\r\n        <EnemyExpandCard />\r\n\r\n        {/* Character Panel */}\r\n        <TabPanel value=\"character\" current={tab}><CharacterOverviewPane /></TabPanel >\r\n        {/* Artifacts Panel */}\r\n        <DataContext.Provider value={{ ...dataContextValue, data: charUIData, oldData: undefined }}>\r\n          <TabPanel value=\"artifacts\" current={tab} ><CharacterArtifactPane /></TabPanel >\r\n        </DataContext.Provider>\r\n        {/* new build panel */}\r\n        <TabPanel value=\"newartifacts\" current={tab} ><CharacterArtifactPane newBuild /></TabPanel >\r\n        {/* Buffs panel */}\r\n        <TabPanel value=\"buffs\" current={tab}><CharacterTeamBuffsPane /></TabPanel >\r\n        {/* talent panel */}\r\n        <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane />\r\n        </TabPanel >\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent >\r\n        {footer}\r\n      </CardContent>}\r\n    </DataContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\n\r\nfunction CharSelectDropdown() {\r\n  const { character, characterSheet, characterDispatch } = useContext(DataContext)\r\n  const [showModal, setshowModal] = useState(false)\r\n  const setCharacter = useCharSelectionCallback()\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    if (!character) return\r\n    const { level = 1, ascension = 0 } = character\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, character])\r\n  const { elementKey = \"anemo\", level = 1, ascension = 0 } = character\r\n  return <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacter} />\r\n    <Grid container spacing={1}>\r\n      <Grid item>\r\n        <Button onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      </Grid>\r\n      <Grid item>\r\n        <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n          {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={<strong><ColorText color={elementKey}>{sgt(`element.${elementKey}`)}</ColorText></strong>}>\r\n            {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n              <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n                <strong><ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText></strong></MenuItem>)}\r\n          </DropdownButton>}\r\n          <CustomNumberInputButtonGroupWrapper >\r\n            <CustomNumberInput onChange={setLevel} value={level}\r\n              startAdornment=\"Lvl. \"\r\n              inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n              sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n              disabled={!characterSheet} />\r\n          </CustomNumberInputButtonGroupWrapper>\r\n          <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n          <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n            {milestoneLevels.map(([lv, as]) => {\r\n              const sameLevel = lv === ascensionMaxLevel[as]\r\n              const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n              const selected = lv === level && as === ascension\r\n              return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n            })}\r\n          </DropdownButton>\r\n        </ButtonGroup>\r\n      </Grid>\r\n    </Grid>\r\n  </>\r\n}\r\n\r\nfunction FormulaCalcCard() {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  return <CardLight>\r\n    <CardContent sx={{ display: \"flex\", gap: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item><HitModeToggle size=\"small\" /></Grid>\r\n        <Grid item><InfusionAuraDropdown /></Grid>\r\n        <Grid item><ReactionToggle size=\"small\" /></Grid>\r\n      </Grid>\r\n      <Box display=\"flex\" gap={1} >\r\n        <Box>\r\n          <Typography variant='subtitle2' >Formulas {\"&\"}</Typography>\r\n          <Typography variant='subtitle2' >Calculations</Typography>\r\n        </Box>\r\n        <ExpandButton\r\n          expand={expanded}\r\n          onClick={toggle}\r\n          aria-expanded={expanded}\r\n          aria-label=\"show more\"\r\n          size=\"small\"\r\n          sx={{ p: 0 }}\r\n        >\r\n          <ExpandMore />\r\n        </ExpandButton>\r\n      </Box>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay() {\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    <Box sx={{ mr: -1, mb: -1 }}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Box>\r\n  </Suspense>\r\n}\r\nfunction FormulaCalc({ sectionKey, displayNs }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  if (!header) return null\r\n  const { title, icon, action } = header\r\n  return <CardDark sx={{ mb: 1 }}>\r\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([key, node]) =>\r\n        !node.isEmpty && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={key}>\r\n          <AccordionSummary expandIcon={<ExpandMore />}>\r\n            <Typography><ColorText color={node.info.variant}>{KeyMap.get(node.info.key ?? \"\")}</ColorText> <strong>{valueString(node.value, node.unit)}</strong></Typography>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            {node.formulas.map((subform, i) => <Typography key={i}>{subform}</Typography>)}\r\n          </AccordionDetails>\r\n        </Accordion>)}\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton_WR'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport KeyMap, { valueString } from \"../KeyMap\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseWeapon = useWeapon(weaponId)\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n  const weaponTypeKey = UIData.get(input.weapon.type).value!\r\n  const stats = [input.weapon.main, input.weapon.sub, input.weapon.sub2].map(x => UIData.get(x))\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {stats.map(node => {\r\n            if (!node.info.key) return null\r\n            const displayVal = valueString(node.value, node.unit, !node.unit ? 0 : undefined)\r\n            return <Box key={node.info.key} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[node.info.key!]} {KeyMap.get(node.info.key)}</Typography>\r\n              <Typography>{displayVal}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}\r\n","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, CardHeader, Divider, Grid, ListItem, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport { FieldDisplayList, NodeFieldDisplay } from \"../Components/FieldDisplay\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport { ascensionMaxLevel, lowRarityMilestoneLevels } from \"../Data/LevelData\"\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { uiInput as input } from \"../Formula\"\r\nimport { computeUIData, dataObjForWeapon } from \"../Formula/api\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport useWeapon from \"../ReactHooks/useWeapon\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const { data } = useContext(DataContext)\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n  const weapon = useWeapon(propWeaponId)\r\n  const { key = \"\", level = 0, refinement = 0, ascension = 0, lock, location = \"\", id } = weapon ?? {}\r\n  const weaponSheet = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  //check the levels when switching from a 5* to a 1*, for example.\r\n  useEffect(() => {\r\n    if (!weaponSheet || !weaponDispatch || weaponSheet.key !== weapon?.key) return\r\n    if (weaponSheet.rarity <= 2 && (level > 70 || ascension > 4)) {\r\n      const [level, ascension] = lowRarityMilestoneLevels[0]\r\n      weaponDispatch({ level, ascension })\r\n    }\r\n  }, [weaponSheet, weapon, weaponDispatch, level, ascension])\r\n\r\n\r\n  const weaponUIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                {weaponSheet?.hasRefinement && <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                {weaponSheet && <Button sx={{ pl: 1 }} disabled={!weaponSheet.ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>}\r\n                {weaponSheet && <DropdownButton title={\"Select Level\"} >\r\n                  {weaponSheet.milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, data.get(input.charKey).value as CharacterKey)} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {weaponSheet && weaponUIData && <Grid container spacing={1.5}>\r\n        <Grid item xs={12} sm={3}>\r\n          <Grid container spacing={1.5}>\r\n            <Grid item xs={6} sm={12}>\r\n              <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n            </Grid>\r\n            <Grid item xs={6} sm={12}>\r\n              <Typography><small>{weaponSheet.description}</small></Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={12} sm={9}>\r\n          <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {weapon && WeaponSheet.getLevelString(weapon)} {weaponSheet.rarity > 2 && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n          <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n          <Typography variant=\"subtitle1\">{weaponSheet.passiveName}</Typography>\r\n          <Typography gutterBottom>{weaponSheet.passiveName && weaponSheet.passiveDescription(weaponUIData.get(input.weapon.refineIndex).value)}</Typography>\r\n          <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            <CardDark >\r\n              <CardHeader title={\"Main Stats\"} titleTypographyProps={{ variant: \"subtitle2\" }} />\r\n              <Divider />\r\n              <FieldDisplayList>\r\n                {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map((node, i) => {\r\n                  const n = weaponUIData.get(node)\r\n                  if (n.isEmpty || !n.value) return null\r\n                  return <NodeFieldDisplay key={n.info.key} node={n} component={ListItem} />\r\n                })}\r\n              </FieldDisplayList>\r\n            </CardDark>\r\n            {data && weaponSheet.document && <DocumentDisplay sections={weaponSheet.document} />}\r\n          </Box>\r\n        </Grid>\r\n      </Grid>}\r\n    </CardContent>\r\n    {\r\n      footer && id && <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n          </Grid>\r\n          {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    }\r\n  </CardLight >\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll, [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}\r\n"],"names":["WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","usePromise","WeaponSheet","useState","setWeaponfilter","useEffect","weaponIdList","Set","allWeaponKeys","wKey","weaponType","sort","a","b","rarity","open","onClose","sx","py","container","item","flexGrow","value","onChange","disabled","size","onClick","spacing","map","weaponKey","weaponSheet","lg","md","height","display","component","src","img","width","className","px","variant","name","Assets","stars","colored","large","newBuild","useContext","DataContext","data","character","mainStatAssumptionLevel","database","DatabaseContext","history","useHistory","edit","useCallback","artid","push","pathname","state","artToEditId","artifactSheets","ArtifactSheet","useForceUpdate","updateArt","followAnyArt","equipArts","window","confirm","Object","fromEntries","allSlotKeys","s","get","input","id","equipArtifacts","key","unequipArts","objectKeyMap","_","artIds","slotKey","setEffects","useMemo","CardLight","mb","CardContent","StatDisplayComponent","Divider","Grid","Button","color","Card","p","bgcolor","t","palette","warning","dark","Typography","xs","sm","flexDirection","gap","entries","setKey","setNumKeyArr","CardHeader","avatar","ImgIcon","m","defIconSrc","title","titleTypographyProps","setNumKey","SetEffectDisplay","ArtifactCard","artifactId","onEdit","CharacterTeamBuffsPane","alignItems","TeamBuffDisplay","ResonanceDisplay","range","i","TeammateDisplay","index","statBreakpoint","oldData","teamBuffs","getTeamBuff","nodes","total","forEach","node","isEmpty","premod","enemy","length","columnSpacing","rowSpacing","path","n","info","oldValue","objPathValue","resonanceSheets","res","opacity","canShow","action","icon","DocumentDisplay","sections","teamBuffOnly","dataContext","active","teamData","activeCharacterDispatch","characterDispatch","activeCharacterKey","characterKey","team","useCharacterReducer","onClickHandler","useCharSelectionCallback","dataBundle","teamMateDataContext","characterSheet","target","CharacterDropdownButton","fullWidth","charKey","type","ck","includes","unSelectText","unSelectIcon","PersonAdd","CharacterCard","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","flatMap","sn","setEffectDocument","document","talent","getTalent","values","sheets","sts","CharacterOverviewPane","charEle","weaponTypeKey","level","ascension","constellation","tlvl","auto","skill","burst","tBoost","CardMedia","cardImg","StatIcon","CharacterSheet","mt","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","fontSize","padding","borderRadius","lineHeight","Box","getTalentOfKey","textAlign","constellationName","cursor","WeaponDisplayCard","weaponId","equippedWeapon","MainStatsCards","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatReadNodes","allElementsWithPhy","ele","x","otherStatKeys","miscStatReadNodes","keys","transformativeReactions","amplifyingReactions","miscStatkeys","StatDisplayContent","extra","rn","specialNode","StatDisplayCard","content","justifyContent","KeyMap","valueString","unit","editContent","statKey","statName","StatInput","placeholder","bonusStats","percent","onValueChange","defaultValue","undefined","setedit","faSave","faEdit","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","onClickTitle","ReactionComponents","superconduct","CardDark","electrocharged","overloaded","pyroSwirl","swirlEleToDisplay","setele","getDisplay","reaction","DropdownButton","element","MenuItem","selected","shattered","information","BootstrapTooltip","placement","faQuestionCircle","crystallize","crystallizeEleToDisplay","Ele","talentLimits","actionWrapeprFunc","children","CardActionArea","header","levelBoost","newTalentLevelKey","talentSheet","ConditionalWrapper","condition","wrapper","flexWrap","pl","TabPanel","current","other","Suspense","fallback","Skeleton","role","hidden","CharacterDisplayCard","footer","newteamData","tabName","useTeamData","charUIData","tab","settab","onTab","e","v","compareData","dataContextValue","CharSelectDropdown","SolidToggleButtonGroup","exclusive","ToggleButton","CloseButton","Tabs","Tab","label","FormulaCalcCard","showModal","setshowModal","setCharacter","setLevel","clamp","ascensionMaxLevel","ascenML","setAscension","lowerAscension","elementKey","CharacterSelectionModal","startIcon","ThumbSide","thumbImgSide","ButtonGroup","contentDark","main","sheet","sgt","talents","eleKey","CustomNumberInput","startAdornment","inputProps","min","max","ambiguousLevel","milestoneLevels","lv","as","lvlstr","expanded","setexpanded","toggle","ExpandButton","expand","ExpandMore","Collapse","in","timeout","unmountOnExit","pt","CalculationDisplay","getDisplaySections","mr","Nodes","FormulaCalc","displayNs","sectionKey","getDisplayHeader","Accordion","AccordionSummary","expandIcon","AccordionDetails","formulas","subform","inventory","noUnselect","props","useTranslation","characterSheets","characterKeys","_getCharKeys","thumbImg","BusinessCenter","Replay","ListItemIcon","noWrap","CharacterMenuItemArray","selectedCharacterKey","WeaponCard","onDelete","canEquip","weapon","useWeapon","cs","actionWrapperFunc","equipOnChar","setWeaponLocation","UIData","computeUIData","dataObjForWeapon","refinement","location","lock","stats","imgAwaken","minHeight","IconButton","updateWeapon","Lock","LockOpen","maxWidth","alignContent","displayVal","flexShrink","LocationName","faTrashAlt","propWeaponId","weaponDispatch","newWeapon","ws","initialWeaponFilter","lowRarityMilestoneLevels","weaponUIData","hasRefinement","Array","contentLight","SwapBtn","onChangeId","description","process","passiveName","gutterBottom","passiveDescription","ListItem","setShow","close","clickHandler","weapons","dbWeapon","_getWeapon"],"sourceRoot":""}