{"version":3,"sources":["Artifact/ArtifactCard.js","Artifact/PercentBadge.js","Components/WIPComponent.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["ArtifactCard","artifactId","artifactObj","forceUpdate","onEdit","onDelete","assumeFull","art","ArtifactDatabase","get","maximumEfficiency","Artifact","substatsValidation","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","mainStatLevel","assFullColor","mainStatVal","className","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","equipOnChar","charKey","equipArtifactOnChar","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","Character","getName","Menu","Item","onClick","Divider","onSelect","ckey","placement","overlay","disabled","pointerEvents","update","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","WIPComponent","CharacterArtifactPane","character","characterKey","artifactConditionals","equippedBuild","newBuild","editable","setState","setOverride","artifacts","build","artifactsAssumeFull","finalStats","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","DamageOptionsAndCalculation","Card","StatDisplayComponent","statsDisplayKeys","Button","equipArtifacts","artifactIds","Alert","sm","lg","Object","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","statKey","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","find","CharacterOverviewPane","constellation","setConstellation","useState","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","getStatValueWithOverride","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","Prepend","Text","CustomFormControl","onValueChange","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","Array","keys","getConstellationImg","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","StatIconEle","getStatVariant","fixedUnit","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","undefined","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","name","getLevelName","LevelNameData","StatInput","faGavel","placeholder","defaultValue","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","float","StatDisplay","hasOverride","getStatNameRaw","xl","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","sKey","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","faQuestionCircle","cursor","crystalize_hit","geo","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","modifiersToFields","modifiers","mStatKey","formulaText","printStat","fixed","unit","statsToFields","statVal","flat","talentLimits","talentLevelKeys","autoInfused","otherProps","header","infuseBtn","isAutoInfusable","eleKey","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","newTalentLevelKey","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","compareAgainstEquipped","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","formulaTextOverlay","fieldVal","formula","fixedVal","fieldEquippedVal","parseInt","diff","CustomMenu","React","forwardRef","ref","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","setCharacterKey","getInitialState","char","getIntialWeapon","updateCharacter","setLevelKey","baseStatOverrides","DatabaseInitAndVerify","Promise","all","getCharacterDataImport","getWeaponDataImport","getDataImport","then","deepClone","prevProps","this","footer","onClose","tabName","hitMode","reactionMode","flexArts","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","Link","eventKey","Content","Pane","Component","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst"],"mappings":"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","file":"static/js/5.2ad24fcd.chunk.js","sourcesContent":["import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport Artifact from './Artifact';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, forceUpdate, onEdit, onDelete, assumeFull = false }) {\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n  let { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n  const equipOnChar = (charKey) => {\r\n    Artifact.equipArtifactOnChar(artifactId, charKey)\r\n    forceUpdate?.()\r\n  }\r\n\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <span className=\"mb-0 mr-1\">Substat Eff.:</span>\r\n        <PercentBadge percent={currentEfficiency} valid={artifactValid}>\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge>\r\n        <b>{\" < \"}</b>\r\n        <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge>\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {forceUpdate ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location, \"Inventory\")}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {forceUpdate ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.update(art);\r\n                    forceUpdate?.();\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={() => onEdit()}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete()}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride, artifacts }) {\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(build.finalStats)\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  return <>\r\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>}\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Body>\r\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, build, forceUpdate, setState, setOverride, editable }} />\r\n          </Card.Body>\r\n          {newBuild ? <Card.Footer>\r\n            <Button onClick={() => {\r\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\r\n              forceUpdate?.()\r\n            }}>Equip All artifacts to current character</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer> : null}\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {artifacts ?\r\n            Artifact.getSlotKeys().map(slotKey => {\r\n              const art = artifacts.find(art => art.slotKey === slotKey)\r\n              return art ? <Col sm={6} lg={4} key={slotKey} className=\"mb-2\">\r\n                <ArtifactCard artifactObj={art} />\r\n              </Col> : null\r\n            }) : Artifact.getSlotKeys().map(slotKey =>\r\n              build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n                <ArtifactCard artifactId={build.artifactIds[slotKey]} forceUpdate={forceUpdate} assumeFull={artifactsAssumeFull} />\r\n              </Col> : null\r\n            )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  const { editable, character, setOverride, equippedBuild, newBuild } = props\r\n\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = []\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from 'react';\r\nimport { useState } from \"react\";\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey }, newBuild, equippedBuild }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build?.finalStats} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n}\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ stats }) {\r\n  const sKey = \"crystalize_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey),\r\n    unit: Stat.getStatUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : {\r\n      text: Stat.getStatName(statKey),\r\n      variant: Stat.getStatVariant(statKey),\r\n      value: statVal,\r\n      fixed: Stat.fixedUnit(statKey),\r\n      unit: Stat.getStatUnit(statKey)\r\n    }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => setState(state => {\r\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\r\n        stateTalentLevelKeys[tKey] = newTalentLevelKey\r\n        return { talentLevelKeys: stateTalentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  const talentStats = Character.getTalentStats(characterKey, talentKey, build.finalStats)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(build.finalStats)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(build.finalStats)\r\n        let fields = section.fields ?? []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(build.finalStats)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character: { compareAgainstEquipped, }, field, index, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(build.finalStats)\r\n  if (!field) return null\r\n\r\n  const fieldText = Character.getTalentFieldValue(field, \"text\", build.finalStats)\r\n  const fieldVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n\r\n  const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build.finalStats)\r\n  const formulaTextOverlay = fieldFormulaText ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>{fieldFormulaText}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger> : null\r\n\r\n  let fieldVal = null\r\n  if (field.value)\r\n    fieldVal = Character.getTalentFieldValue(field, \"value\", build.finalStats)\r\n  else if (field.formula)\r\n    fieldVal = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n\r\n  let fixedVal = field.fixed || 0\r\n  const unit = Character.getTalentFieldValue(field, \"unit\", build.finalStats)\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild.finalStats)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { DatabaseInitAndVerify } from '../Database/DatabaseUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    DatabaseInitAndVerify();\r\n    this.state = CharacterDisplayCard.getInitialState()\r\n    const { characterKey, character } = props\r\n    if (characterKey) {\r\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.state = { ...this.state, ...char }\r\n    } else if (character) {\r\n      this.state = { ...this.state, ...character }\r\n    }\r\n  }\r\n\r\n  static initialState = {\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    hitMode: \"hit\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\r\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\r\n  forceUpdateComponent = () => {\r\n    if (this.state.characterKey)\r\n      this.setState(CharacterDatabase.get(this.state.characterKey))\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setCharacterKey = (characterKey) => {\r\n    let state = CharacterDisplayCard.getInitialState()\r\n    let char = CharacterDatabase.get(characterKey)\r\n    if (char) state = { ...state, ...char }\r\n    else {\r\n      state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.updateCharacter(this.state)\r\n    }\r\n    this.setState(state)\r\n    this.props?.setCharacterKey?.(characterKey)\r\n  }\r\n\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  updateCharacter(state) {\r\n    state = deepClone(state)\r\n    delete state.compareAgainstEquipped\r\n    CharacterDatabase.update(state)\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.characterKey !== this.props.characterKey && this.props.characterKey !== this.state.characterKey)\r\n      this.setCharacterKey(this.props.characterKey)\r\n    if (this.props.editable && this.state.characterKey) {\r\n      //save this.state as character to character db.\r\n      this.updateCharacter(this.state)\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose, tabName } = this.props\r\n    const character = this.state\r\n    //transfer the hitmode/reactions over \r\n    if (newBuild?.finalStats) {\r\n      newBuild = deepClone(newBuild)\r\n      newBuild.finalStats.hitMode = character.hitMode;\r\n      newBuild.finalStats.reactionMode = character.reactionMode;\r\n    }\r\n\r\n    const { characterKey, levelKey, compareAgainstEquipped, artifacts: flexArts } = character\r\n    const equippedBuild = Character.calculateBuild(character)\r\n    const HeaderIconDisplay = characterKey ? <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span> : <span>Select a Character</span>\r\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\r\n    if (flexArts) commonPaneProps.artifacts = flexArts//from flex\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"} className=\"mr-auto\">\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown as={ButtonGroup}>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n                <h6 className=\"d-inline\">{Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(character, \"characterLevel\")}</span>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          {Boolean(onClose) && <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {Boolean(characterKey) && <Card.Body>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled>Talents <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\">Talents</Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n            {!flexArts && <Nav.Item>\r\n              <WIPComponent>\r\n                <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n              </WIPComponent>\r\n            </Nav.Item>}\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setConstellation={this.setConstellation}\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>}\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}