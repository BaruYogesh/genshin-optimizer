{"version":3,"sources":["Artifact/ArtifactCard.jsx","Artifact/PercentBadge.jsx","Components/WIPComponent.js","Character/CharacterDisplay/CharacterArtifactPane.jsx","Character/CharacterDisplay/CharacterOverviewPane.jsx","Character/CharacterDisplay/CharacterTalentPane.jsx","Character/CharacterDisplayCard.jsx"],"names":["ArtifactCard","artifactId","artifactObj","onEdit","onDelete","assumeFull","forceUpdateHook","useForceUpdate","useEffect","Artifact","getDataImport","then","ArtifactDatabase","registerArtListener","unregisterArtListener","equipOnChar","useCallback","charKey","equipArtifactOnChar","editable","art","get","maximumEfficiency","substatsValidation","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","mainStatLevel","assFullColor","mainStatVal","className","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","Character","getName","Menu","Item","onClick","Divider","onSelect","ckey","placement","overlay","disabled","pointerEvents","update","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","WIPComponent","CharacterArtifactPane","character","characterKey","artifactConditionals","equippedBuild","newBuild","characterDispatch","artifacts","history","useHistory","build","artifactsAssumeFull","finalStats","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","Row","Col","Card","StatDisplayComponent","statsDisplayKeys","Button","window","confirm","equipArtifacts","artifactIds","type","Alert","Object","fromEntries","getSlotKeys","sKey","sm","lg","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","statKey","val","conditionalElement","ConditionalSelector","setConditional","cnum","setStateArtifactConditional","defEle","Badge","getSetEffectText","find","CharacterOverviewPane","constellation","useState","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","getStatValueWithOverride","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","Prepend","Text","CustomFormControl","onChange","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","Array","keys","getConstellationImg","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","StatIconEle","getStatVariant","fixedUnit","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","weapon","editing","SetEditing","showDescription","setShowDescription","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","undefined","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","name","getLevelName","LevelNameData","StatInput","faGavel","placeholder","onValueChange","defaultValue","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","float","hasOverride","StatDisplay","getStatNameRaw","xl","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","faQuestionCircle","cursor","crystalize_hit","geo","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","modifiersToFields","modifiers","mStatKey","formulaText","printStat","fixed","unit","statsToFields","statVal","flat","talentLimits","talentLevelKeys","autoInfused","header","infuseBtn","isAutoInfusable","eleKey","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","compareAgainstEquipped","useContext","compareAgainstEquippedContext","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","formulaTextOverlay","fieldVal","formula","fixedVal","fieldEquippedVal","parseInt","diff","createContext","CustomMenu","React","forwardRef","ref","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","equippedArtifacts","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","characterReducer","state","action","CharacterDatabase","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","updateState","forceUpdate","char","Promise","all","getCharacterDataImport","getWeaponDataImport","current","newCKey","useMemo","deepClone","flexArts","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","hasTalentPage","DamageOptionsAndCalculation","Content","Pane"],"mappings":"8HAAA,gOAqBe,SAASA,EAAT,GAA0F,IAAD,IAAjEC,EAAiE,EAAjEA,WAAYC,EAAqD,EAArDA,YAAaC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SAChGC,EAAkBC,cACxBC,qBAAU,WAAO,IAAD,EAGd,OAFA,UAAAC,IAASC,uBAAT,SAA0BC,KAAKL,GAC/BL,GAAcW,IAAiBC,oBAAoBZ,EAAYK,GACxD,kBACLL,GAAcW,IAAiBE,sBAAsBb,EAAYK,MAClE,CAACL,EAAYK,IAChB,IAAMS,EAAcC,uBAClB,SAACC,GAAD,OAAaR,IAASS,oBAAoBjB,EAAYgB,KACtD,CAAChB,IAEH,IAAKA,IAAeC,EAAa,OAAO,KACxC,IAAMiB,GAAYjB,EACZkB,EAAMlB,GAA4BU,IAAiBS,IAAIpB,GAC7D,IAAKmB,EAAK,OAAO,KACZA,EAAIE,mBAAmBb,IAASc,mBAAmBH,GAhB8C,IAiB9FI,EAA4IJ,EAA5II,OAAQC,EAAoIL,EAApIK,QAjBsF,EAiB8CL,EAA3HM,gBAjB6E,MAiBlE,EAjBkE,IAiB8CN,EAA7GO,aAjB+D,MAiBvD,EAjBuD,EAiBpDC,EAAkGR,EAAlGQ,YAjBoD,EAiB8CR,EAArFS,gBAjBuC,MAiB5B,GAjB4B,IAiB8CT,EAAtEU,gBAjBwB,MAiBb,GAjBa,EAiBTC,EAAuDX,EAAvDW,KAjBS,EAiB8CX,EAAjDY,yBAjBG,MAiBiB,EAjBjB,IAiB8CZ,EAA1BE,yBAjBpB,MAiBwC,EAjBxC,EAkBlGW,EAAgB5B,EAAwB,EAAXqB,EAAeC,EAC5CO,EAAe7B,GAAcsB,IAAqB,EAAXD,EACvCS,EAAc,uBAAMC,UAAWF,EAAe,cAAgB,GAAhD,UAAqDzB,IAAS4B,iBAAiBT,EAAaF,EAAUO,EAAe,IAAKK,IAAKC,YAAYX,MACzJY,GAAgBX,EAASY,OAAM,SAAAC,GAAK,aAAMA,EAAMC,KAAQD,EAAMC,KAAOD,EAAME,QAAnB,OAA4BF,QAA5B,IAA4BA,GAA5B,UAA4BA,EAAOG,aAAnC,aAA4B,EAAcC,WAEtG,OAAQ,eAAC,IAAD,CAAMV,UAAU,QAAQW,OAAM,UAAKrB,EAAL,QAAqBsB,GAAG,eAAeC,KAAK,YAA1E,UACN,cAAC,IAAKC,OAAN,CAAad,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKe,GAAI,EAAGC,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAK5C,IAAS6C,aAAa9B,EAAQC,GAAUW,UAAS,4BAAuBV,EAAvB,YAA2C6B,WAAS,MAEnH,eAAC,IAAD,CAAKnB,UAAU,OAAf,UACE,6BAAI,4BAAI3B,IAAS+C,aAAahC,EAAQC,EAAS,0BAC/C,gCAAMhB,IAASgD,oBAAoBhC,GAAnC,YAAkDE,cAIxD,eAAC,IAAK+B,KAAN,CAAWtB,UAAU,0BAArB,UACE,eAAC,IAAKuB,MAAN,WACE,8BAAMlD,IAASmD,WAAWpC,EAAQ,kBAClC,uBAAOY,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOyB,MAAOnC,SAEjD,oBAAIU,UAAU,OAAd,SACE,8BAAIE,IAAKwB,YAAYlC,GAArB,IAAoCO,OAEtC,cAAC,IAAD,CAAKC,UAAU,OAAf,SACGP,EAASkC,KAAI,SAACC,EAAMC,GAAO,IAAD,EACzB,IAAKD,IAASA,EAAKpB,MAAO,OAAO,KACjC,IAAIsB,GAAe,OAAJF,QAAI,IAAJA,GAAA,UAAAA,EAAMnB,aAAN,eAAaC,SAAU,EAClCqB,GAAiB,OAAJH,QAAI,IAAJA,OAAA,EAAAA,EAAMG,aAAc,EACjCC,EAAa,GAAmB,GAAbD,EACnBE,EAAW/B,IAAKwB,YAAYE,EAAKrB,KACrC,OAAQ,eAAC,IAAD,CAAaQ,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOmB,QAASJ,EAAQ,UAAMA,EAAN,QAAuB,SAAU9B,UAAU,mBAAnE,SAAsF,4BAAI8B,GAAsB,QAAiB,IACjI,uBAAM9B,UAAS,eAAU8B,EAAV,QAAf,UAA0CG,EAA1C,WAAwD/B,IAAKC,YAAYyB,EAAKrB,KAAOqB,EAAKpB,MAAM2B,QAAQ,GAAKP,EAAKpB,OAAlH,OAA0HN,IAAKC,YAAYyB,EAAKrB,SAChJ,uBAAMP,UAAU,cAAcoC,MAAO,CAAEC,QAASL,GAAhD,UAA+DD,EAAWI,QAAQ,GAAlF,SAHgBN,QAOtB,eAAC,IAAD,CAAK7B,UAAU,UAAf,UACE,eAAC,IAAD,+BAAsB,cAAC,IAAD,CAAcsC,QAAS1C,EAAmB2C,MAAOnC,GAAeJ,UAAU,cAA1E,0BACnBJ,QADmB,IACnBA,OADmB,EACnBA,EAAmBuC,QAAQ,UADR,QACcvC,EAAoB,SAEvDA,IAAsBV,GAAqB,eAAC,IAAD,CAAKc,UAAU,aAAf,0BAAyC,cAAC,IAAD,CAAcsC,QAASpD,EAAmBqD,MAAOnC,GAAjD,0BAClFlB,QADkF,IAClFA,OADkF,EAClFA,EAAmBiD,QAAQ,UADuD,QACjDjD,EAAoB,eAK5D,cAAC,IAAKsD,OAAN,CAAaxC,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGjB,EAAW,cAAC,IAAD,CAAKgC,GAAG,OAAR,SACV,eAAC,IAAD,WACE,cAAC,IAAS0B,OAAV,CAAiBC,KAAK,KAAK1C,UAAU,YAArC,SAAkD2C,IAAUC,QAAQlD,EAAU,eAC9E,eAAC,IAASmD,KAAV,WACE,cAAC,IAASC,KAAV,CAAeC,QAAS,kBAAMpE,EAAY,KAA1C,uBACA,cAAC,IAASqE,QAAV,IACA,cAAC,IAAD,CAAgCC,SAAU,SAAAC,GAAI,OAAIvE,EAAYuE,cAG3D,cAAC,IAAD,CAAKnC,GAAG,OAAR,SAAe,4BAAI4B,IAAUC,QAAQlD,EAAU,iBACxD,cAAC,IAAD,CAAKqB,GAAG,OAAR,SACE,eAAC,IAAD,WACGhC,EAAW,cAAC,IAAD,CAAgBoE,UAAU,MACpCC,QAAS,cAAC,IAAD,6IADC,SAEV,sBAAMpD,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQ0C,KAAK,KACXW,SAAU3D,EACV0C,MAAO1C,EAAW,CAAE4D,cAAe,QAAW,GAC9CP,QAAS,WACP/D,EAAIW,MAAQA,EACZnB,IAAiB+E,OAAOvE,IAL5B,SAOE,cAAC,IAAD,CAAiBwE,KAAO7D,GAAQD,EAAY+D,IAASC,IAAY1D,UAAU,gBAG7D,KACnB2D,QAAQ5F,IAAW,cAAC,IAAD,CAAQmE,QAAQ,OAAOQ,KAAK,KAC9CK,QAAShF,EADS,SAElB,cAAC,IAAD,CAAiByF,KAAMI,IAAQ5D,UAAU,YAE1C2D,QAAQ3F,IAAa,cAAC,IAAD,CAAQkE,QAAQ,SAASQ,KAAK,KAClDK,QAAS/E,EADW,SAEpB,cAAC,IAAD,CAAiBwF,KAAMK,IAAY7D,UAAU,2B,iCC1H3D,sDAEe,SAAS8D,EAAaC,GAAQ,IACrCzB,EAA6ByB,EAA7BzB,QAASC,EAAoBwB,EAApBxB,MAAOyB,EAAaD,EAAbC,SAClBC,EAAc1B,EAAoB2B,MAAM5B,GAAW,YAAjB,UAAkC6B,KAAKC,MAAgB,IAAV9B,GAAkB,EAA/D,QAAZ,SAC1B,OAAO,cAAC,IAAD,CAAOJ,QAAS+B,EAAYjE,UAA0B,cAAfiE,EAA6B,GAAK,mBAAzE,SAA8FD,M,iCCLvG,6BAWeK,IATM,SAAC,GAAD,IAAGL,EAAH,EAAGA,SAAH,OACnB,cAAC,IAAD,CACEZ,QAAS,cAAC,IAAD,+BADX,SAGE,+BACGY,Q,yaCqGQM,MAjGf,YAAmK,IAAD,EAAjIC,EAAiI,EAAjIA,UAAiI,IAAtHA,UAAaC,EAAyG,EAAzGA,aAAcC,EAA2F,EAA3FA,qBAAwBC,EAAmE,EAAnEA,cAAeC,EAAoD,EAApDA,SAAU5F,EAA0C,EAA1CA,SAAU6F,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,UAC7IC,EAAUC,cAEVC,EAAQL,GAAsBD,EAChCO,EAAsBN,EAAQ,UAAGA,EAASO,kBAAZ,aAAG,EAAqBD,oBAAsBV,EAAUU,oBACtFN,IAAUF,EAAuBE,EAASF,sBAC9C,IAAMU,EAAWxC,IAAUyC,mBAAmBJ,EAAME,YAE9CG,EAAOzG,uBACX,SAAA0G,GAAK,OAAIR,EAAQS,KAAK,CACpBC,SAAU,YACVC,YAAaH,MACX,CAACR,IACP,OAAO,qCACL,cAACY,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAK3F,UAAU,OAAf,SACE,eAAC4F,EAAA,EAAD,CAAM5F,UAAU,QAAQY,GAAG,eAAeC,KAAK,YAA/C,UACE,cAAC+E,EAAA,EAAKtE,KAAN,UACE,cAACuE,EAAA,EAAD,CAA4BtB,YAAWG,gBAAeC,WAAUmB,iBAAkBX,EAAUpG,eAE7F4F,EAAW,eAACiB,EAAA,EAAKpD,OAAN,WACV,cAACuD,EAAA,EAAD,CAAQhD,QAAS,WACViD,OAAOC,QAAQ,iEACpBtD,IAAUuD,eAAe1B,EAAcG,EAASwB,aAC/B,OAAjBvB,QAAiB,IAAjBA,KAAoB,CAAEwB,KAAM,aAH9B,sDAKCnB,GAAuB,cAACoB,EAAA,EAAD,CAAOrG,UAAU,mCAAmCkC,QAAQ,SAA5D,SAAsE,yEAC9EnD,GAAY,eAAC6G,EAAA,EAAKpD,OAAN,WAC5B,cAACuD,EAAA,EAAD,CAAQhD,QAAS,WACViD,OAAOC,QAAQ,kEACpBtD,IAAUuD,eAAe1B,EAAc8B,OAAOC,YAAYlI,IAASmI,cAAc7E,KAAI,SAAA8E,GAAI,MAAI,CAACA,EAAM,SACnF,OAAjB7B,QAAiB,IAAjBA,KAAoB,CAAEwB,KAAM,aAH9B,mCAKCnB,GAAuB,cAACoB,EAAA,EAAD,CAAOrG,UAAU,mCAAmCkC,QAAQ,SAA5D,SAAsE,gFAKtG,cAACwD,EAAA,EAAD,CAAK1F,UAAU,QAAf,SACE,cAAC2F,EAAA,EAAD,UACE,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKe,GAAI,EAAGC,GAAI,EAAG3G,UAAU,OAA7B,SACE,eAAC4F,EAAA,EAAD,CAAM5F,UAAU,2BAA2BY,GAAG,eAAeC,KAAK,YAAlE,UACE,cAAC+E,EAAA,EAAK9E,OAAN,mCACA,cAAC8E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,cAArB,SACE,cAAC0F,EAAA,EAAD,UACGY,OAAOM,QAAQvI,IAASwI,cAAc7B,EAAM8B,aAAanF,KAAI,mCAAEvC,EAAF,KAAU2H,EAAV,YAC5D,eAACpB,EAAA,EAAD,CAAkB5E,GAAI,GAAIf,UAAU,OAApC,UACE,6BAAK3B,IAASmD,WAAWpC,KACzB,cAACsG,EAAA,EAAD,UACGqB,EAAapF,KAAI,SAAAqF,GAChB,IAAIC,EAAW5I,IAAS6I,uBAAuB9H,EAAQ4H,GACnDG,EAAiB,EACjBC,EAAc/I,IAASgJ,wBAAwBjI,EAAQ4H,GACvDI,IACFD,EAAiBG,IAAiBC,kBAAkB9C,EAAsB,CAAE+C,OAAQpI,EAAQqI,QAAST,IACrGV,OAAOM,QAAQvI,IAASqJ,oBAAoBtI,EAAQ4H,EAAWG,IAAiBQ,SAAQ,mCAAEC,EAAF,KAAWC,EAAX,YACtFZ,EAASW,IAAYX,EAASW,IAAY,GAAKC,MAEnD,IAAIC,EAAqB,cAACC,EAAA,EAAD,CACvB1E,WAAUsB,EACVyC,YAAaA,EACbD,eAAgBA,EAChBa,eAAgB,SAACC,GAAD,OAxDN,SAAC7I,EAAQ4H,EAAWG,GAApB,cAAuCvC,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAoB,CAAEH,qBAAsB6C,IAAiBU,eAAevD,EAAsB,CAAE+C,OAAQpI,EAAQqI,QAAST,GAAaG,KAwDjKe,CAA4B9I,EAAQ4H,EAAWiB,IACzEE,OAAQ,eAACC,EAAA,EAAD,CAAOlG,QAAQ,UAAf,UAA0B8E,EAA1B,YAEV,OAAO,eAACrB,EAAA,EAAD,CAAqB5E,GAAI,GAAIf,UAAU,OAAvC,UACL,+BAAK8H,EAAL,IAA0BzJ,IAASgK,iBAAiBjJ,EAAQ4H,EAAWhC,EAAME,eAC5E+B,EAAW,cAACvB,EAAA,EAAD,UACTY,OAAOM,QAAQK,GAAUtF,KAAI,mCAAEiG,EAAF,KAAWC,EAAX,YAC5B,eAAClC,EAAA,EAAD,CAAK5E,GAAI,GAAT,UAA4Bb,IAAKwB,YAAYkG,GAA7C,KAAyDC,EAAK3H,IAAKC,YAAYyH,KAA7DA,QACb,OALMZ,UAnBb5H,eAkCnByF,EACCxG,IAASmI,cAAc7E,KAAI,SAAAtC,GACzB,IAAML,EAAM6F,EAAUyD,MAAK,SAAAtJ,GAAG,OAAIA,EAAIK,UAAYA,KAClD,OAAOL,EAAM,cAAC2G,EAAA,EAAD,CAAKe,GAAI,EAAGC,GAAI,EAAiB3G,UAAU,OAA3C,SACX,cAACpC,EAAA,EAAD,CAAcE,YAAakB,KADQK,GAE5B,QACNhB,IAASmI,cAAc7E,KAAI,SAAAtC,GAAO,OACrC2F,EAAMmB,YAAY9G,GAAW,cAACsG,EAAA,EAAD,CAAKe,GAAI,EAAGC,GAAI,EAAoC3G,UAAU,OAA9D,SAC3B,cAACpC,EAAA,EAAD,CAAcC,WAAYmH,EAAMmB,YAAY9G,GAAUpB,WAAYgH,EAAqBlH,OAAQ,kBAAMsH,EAAKL,EAAMmB,YAAY9G,QADzE2F,EAAMmB,YAAY9G,IAE9D,mB,0GCpFR,SAASkJ,EAAT,GAAiJ,IAAD,EAA/GxJ,EAA+G,EAA/GA,SAAUwF,EAAqG,EAArGA,UAAqG,IAA1FA,UAAaC,EAA6E,EAA7EA,aAAcgE,EAA+D,EAA/DA,cAAiB5D,EAA8C,EAA9CA,kBAAmBF,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAAY,EAC3H8D,oBAAS,GADkH,mBACtJC,EADsJ,KAC3IC,EAD2I,KAEvJC,EAAajG,IAAUkG,gBAAgBrE,GACvCsE,EAAgBnG,IAAUoG,iBAAiBvE,GAC3CjF,EAAQoD,IAAUqG,yBAAyBzE,EAAW,kBAC5D,OAAO,eAACmB,EAAA,EAAD,WACL,cAACC,EAAA,EAAD,CAAK5E,GAAI,GAAIC,GAAI,EAAjB,SAEE,eAAC4E,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,UACE,cAAC4F,EAAA,EAAKqD,IAAN,CAAUhI,IAAK0B,IAAUuG,QAAQ1E,GAAexE,UAAU,iBAC1D,cAAC4F,EAAA,EAAKtE,KAAN,UACE,eAACoE,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAK5E,GAAI,GAAT,UACE,+BAAK4B,IAAUC,QAAQ4B,GAAvB,IAAsC,cAAC2E,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAAST,GAAa5I,UAAU,gBAAzF,IAA0G,cAACmJ,EAAA,EAAD,CAAOlI,IAAG,UAAEmI,IAAOE,mBAAT,aAAE,EAAqBR,GAAgB9I,UAAU,mBACrK,6BAAI,cAAC,IAAD,CAAOyB,MAAOkB,IAAU4G,QAAQ/E,GAAegF,SAAO,SAE5D,cAAC7D,EAAA,EAAD,UACG+C,EAAY,cAAChD,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAChB,eAAC8D,EAAA,EAAD,WACE,cAACA,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,qBAEF,cAACC,EAAA,EAAD,CAAmBC,SAAU,SAAAhC,GAAG,OAAIjD,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,iBAAkBpH,MAAOsJ,YAAMjC,EAAK,EAAG,OAAQrH,MAAOjB,IAC7I,cAACkK,EAAA,EAAWM,OAAZ,UACE,cAAChE,EAAA,EAAD,UACE,cAAC,IAAD,CAAiBvC,KAAMwG,IAAQtH,KAAK,KAAKK,QAAS,kBAAM6B,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,iBAAkBpH,MAAOmC,IAAUsH,SAAS1F,EAAU2F,mBAGrK,cAACT,EAAA,EAAWM,OAAZ,UACE,cAACI,EAAA,EAAD,CACEhH,UAAU,SACVC,QAAS,cAACgH,EAAA,EAAD,gFAFX,SAIE,cAACrE,EAAA,EAAD,CAAQ7D,QAAQ,UAAUa,QAAS,kBAAM4F,GAAcD,IAAYhG,KAAK,KAAxE,SACE,+BAAM,cAAC,IAAD,CAAiBc,KAAM6G,qBAMrC,eAAC3E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,yCAAYpG,OAEbR,EAAW,cAAC4G,EAAA,EAAD,CAAK5E,GAAG,OAAOf,UAAU,YAAzB,SACV,cAAC+F,EAAA,EAAD,CAAQ7D,QAAQ,OAAOa,QAAS,kBAAM4F,GAAcD,IAAYhG,KAAK,KAArE,SACE,+BAAM,cAAC,IAAD,CAAiBc,KAAMI,YAExB,UAGf,cAAC+B,EAAA,EAAD,CAAK5E,GAAI,GAAT,SACE,eAAC2E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK5E,GAAI,GAAT,SAAa,6BAAK4B,IAAU2H,qBAAqB9F,OACjD,cAACmB,EAAA,EAAD,UACE,cAACD,EAAA,EAAD,CAAK1F,UAAU,OAAf,SACG,YAAIuK,MAAM,GAAGC,QAAQ7I,KAAI,SAAAE,GAAC,OACzB,cAAC8D,EAAA,EAAD,CAAK5E,GAAI,EAAGf,UAAU,MAAtB,SACE,cAACmJ,EAAA,EAAD,CAAOlI,IAAK0B,IAAU8H,oBAAoBjG,EAAc3C,GAAI7B,UAAS,uBAAkBwI,EAAgB3G,EAAI,GAAK,eAA3C,mBACnE6I,eAAa,EAAC3H,QAAS,kBAAMhE,GAAY6F,EAAkB,CAAE4D,cAAgB3G,EAAI,IAAO2G,EAAgB3G,EAAIA,EAAI,QAFnFA,yBAYnD,eAAC8D,EAAA,EAAD,CAAK5E,GAAI,GAAIC,GAAI,EAAjB,UACE,cAAC2J,EAAD,CAA6B5L,WAAUwF,YAAWK,oBAAmBF,gBAAeC,aACpF,cAACiG,EAAD,CAAsB7L,WAAUwF,YAAWK,oBAAmBF,gBAAeC,mBAInF,SAASkG,EAAT,GAAqC,IAAD,EAAhBjD,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,IAC3B,OAAKD,EACE,eAACjC,EAAA,EAAD,CAAK5E,GAAI,GAAI4F,GAAI,EAAG3G,UAAU,OAA9B,UACL,+BAAM,8BAAI8K,YAAYlD,GAAhB,IAA2B1H,IAAKwB,YAAYkG,QAClD,uBAAM5H,UAAS,sCAAiCE,IAAK6K,eAAenD,IAApE,WAAqF,OAAHC,QAAG,IAAHA,GAAA,UAAAA,EAAK1F,eAAL,oBAAA0F,EAAe3H,IAAK8K,UAAUpD,MAAaC,EAAK3H,IAAKC,YAAYyH,SAHhI,KAMvB,SAASqD,EAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,MAAsC,IAA/BC,aAA+B,MAAvB,GAAuB,MAAnBjG,kBAAmB,MAAN,GAAM,EAC/D,OAAwC,IAApCoB,OAAOkE,KAAP,OAAYW,QAAZ,IAAYA,IAAS,IAAIzK,OAAqB,KAC3C,eAACkF,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAAYb,UAAU,OAAlD,UACL,cAAC4F,EAAA,EAAK9E,OAAN,CAAad,UAAU,YAAvB,SAAoCkL,IACpC,cAACtF,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,YAArB,SAAiC,cAAC0F,EAAA,EAAD,UAC9BY,OAAOM,QAAQuE,GAAOxJ,KAAI,mCAAEpB,EAAF,KAAOsH,EAAP,WAAwB,cAARtH,EAAsB,cAAC,IAAM6K,SAAP,UAA4B9E,OAAOM,QAAP,OAAeiB,QAAf,IAAeA,IAAO,IAAIlG,KAAI,mCAAE0J,EAAF,KAAQC,EAAR,YACzH,cAACT,EAAD,CAAqBjD,QAASyD,EAAMxD,IAAKvB,OAAOM,QAAP,OAAe0E,QAAf,IAAeA,IAAY,IAAIC,QAAO,SAACC,EAAD,0BAAQH,EAAR,KAAcI,EAAd,YAA8BD,EAAOtG,EAAWmG,GAAQI,IAAY,IAApIJ,OADqE9K,GAElF,cAACsK,EAAD,CAAoBjD,QAASrH,EAAKsH,IAAKA,GAAxBtH,aAIzB,SAASoK,EAAT,GAA+I,IAA9G5L,EAA6G,EAA7GA,SAAUwF,EAAmG,EAAnGA,UAAmG,IAAxFA,UAAaC,EAA2E,EAA3EA,aAA2E,IAA7DkH,cAA6D,MAApD,GAAoD,EAA9C9G,EAA8C,EAA9CA,kBAAmBF,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAAY,EAChH8D,oBAAS,GADuG,mBACvIkD,EADuI,KAC9HC,EAD8H,OAEhGnD,oBAAS,GAFuF,mBAEvIoD,EAFuI,KAEtHC,EAFsH,KAKtI9G,EAAQL,GAAsBD,EAE9BqH,EAAiB,SAACxL,EAAKC,GAEf,QAARD,IAAegE,EAAUmH,OAAOvE,eAAiB,GACrD5C,EAAUmH,OAAOnL,GAAOC,EACxBoE,EAAkB,CAAE8G,OAAQnH,EAAUmH,UAElCM,EAAaC,IAAOC,oBAAoBR,EAAOnL,KAC/CuI,EAAgBnG,IAAUoG,iBAAiBvE,GAC3C2H,EAAuBT,EAAOU,iBAAmBH,IAAOI,qBAAqBX,EAAOnL,IAAKmL,EAAOxB,UAChGoC,EAAsBZ,EAAOa,gBAAkBN,IAAOO,oBAAoBd,EAAOnL,IAAKmL,EAAOxB,UAC7FuC,EAAoBR,IAAOS,qBAAqBhB,EAAOnL,KACvDoM,EAAmBV,IAAOW,mBAAmBlB,EAAOnL,IAAKmL,EAAOmB,iBAAaC,GAC7EC,EAAmBd,IAAOe,yBAAyBtB,EAAOnL,IAAKmL,EAAOmB,YAAanB,EAAOvE,oBAAgB2F,GAC1G1F,EAAc6E,IAAOgB,qBAAqBvB,EAAOnL,KACjD4G,EAAiBuE,EAAOvE,eACxB+F,EAAiB,cAACnF,EAAA,EAAD,CACrBX,YAAaA,EACbD,eAAgBA,EAChBa,eAAgB,SAACC,GAAD,OAAU8D,EAAe,iBAAkB9D,IAC3DE,OAAQ,+BAAOsE,MAGjB,OAAO,eAAC7G,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,UACL,cAAC4F,EAAA,EAAK9E,OAAN,UACE,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,4CAEF,cAACA,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACE,cAACgF,EAAA,EAAD,CAAQ7D,QAAQ,OAAOQ,KAAK,KAAKK,QAAS,kBAAM+I,GAAoBD,IAApE,SACE,iCAAM,cAAC,IAAD,CAAiBrI,KAAM2J,MAA7B,IAA8CtB,EAAkB,aAAe,oBAGlF9M,EAAW,cAAC4G,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACV,cAACgF,EAAA,EAAD,CAAQ7D,QAASyJ,EAAU,SAAW,OAAQ5I,QAAS,kBAAM6I,GAAYD,IAAUjJ,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAMmI,EAAUtB,IAASzG,MAAhD,IAA4D+H,EAAU,OAAS,cAE1E,UAGb,eAAC/F,EAAA,EAAKtE,KAAN,WACE,eAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,UACE,cAAC2F,EAAA,EAAD,CAAK5E,GAAI,GAAIC,GAAI,EAAjB,SACE,cAACmI,EAAA,EAAD,CAAOlI,IAAKgL,IAAOmB,aAAa1B,EAAOnL,KAAMP,UAAS,4BAAuBiM,IAAOoB,gBAAgB3B,EAAOnL,KAArD,QAAiEY,WAAS,MAEjIwK,EAAU,cAAChG,EAAA,EAAD,UACT,eAACD,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKgB,GAAG,OAAO5F,GAAI,EAAGf,UAAU,YAAhC,SACE,cAACsN,EAAA,EAAD,CAAgBpC,MAAOe,IAAOsB,cAAc7B,EAAOnL,KAAnD,SACG,YAAIgK,MAAM,GAAGC,QAAQgD,UAAU7L,KAAI,SAAApB,GAAG,OAAIA,EAAM,KAAGoB,KAAI,SAAC8L,EAAM5L,EAAG6L,GAAV,OAAkB,eAAC,IAAMtC,SAAP,WACxE,cAACuC,EAAA,EAASC,SAAV,UAAuC,cAAC,IAAD,CAAOnM,MAAOgM,KAA7B,OAASA,GAChCnH,OAAOM,QAAQqF,IAAO4B,iBAAiB/E,IAAgBgF,QAAO,oDAAgCC,SAAWN,KAAM9L,KAAI,mCAAEpB,EAAF,KAAOyN,EAAP,YAClH,cAACL,EAAA,EAAS7K,KAAV,CAAyBC,QAAS,kBAAMgJ,EAAe,MAAOxL,IAA9D,SACGyN,EAAUC,MADO1N,MAIpBsB,IAAM6L,EAAIhN,OAAS,GAAM,cAAEiN,EAAA,EAAS3K,QAAX,MAPkEyK,UAWnG,cAAC9H,EAAA,EAAD,CAAKgB,GAAG,OAAO5F,GAAI,EAAGf,UAAU,YAAhC,SACE,eAACsN,EAAA,EAAD,CAAgBpC,MAAOe,IAAOiC,aAAaxC,EAAOxB,UAAlD,UACE,cAACyD,EAAA,EAASC,SAAV,UACE,yDAEDtH,OAAOM,QAAQuH,KAAexM,KAAI,mCAAEpB,EAAF,KAAO0N,EAAP,YACjC,cAACN,EAAA,EAAS7K,KAAV,CAAyBC,QAAS,kBAAMgJ,EAAe,WAAYxL,IAAnE,SACG0N,GADiB1N,WAKzBkM,GAAqB,cAAC9G,EAAA,EAAD,CAAKgB,GAAG,OAAO5F,GAAI,EAAGf,UAAU,OAAhC,SACpB,eAACsN,EAAA,EAAD,CAAgBpC,MAAK,qBAAgBQ,EAAOmB,YAAc,GAAK7M,UAAU,QAAzE,UACE,cAAC2N,EAAA,EAASC,SAAV,UACE,8DAEF,cAACD,EAAA,EAAS3K,QAAV,IACC,YAAIuH,MAAM,GAAGC,QAAQ7I,KAAI,SAAApB,GAAG,OAC3B,cAACoN,EAAA,EAAS7K,KAAV,CAAyBC,QAAS,kBAAMgJ,EAAe,cAAexL,IAAtE,8BACiBA,EAAM,IADHA,WAK1B,cAACoF,EAAA,EAAD,CAAK5E,GAAI,GAAIf,UAAU,OAAvB,SACE,cAACoO,EAAA,EAAD,CACEH,KAAM,iCAAM,cAAC,IAAD,CAAiBzK,KAAM6K,IAASrO,UAAU,SAAhD,SACNsO,YAAY,gBACZ9N,MAAO2L,EACP7J,SAAS,EACTiM,cAAe,SAAC/N,GAAD,OAAWuL,EAAe,kBAAmBvL,IAC5DgO,aAAcvC,IAAOI,qBAAqBX,EAAOnL,IAAKmL,EAAOxB,cAGhE8B,GAAc,cAACrG,EAAA,EAAD,CAAK5E,GAAI,GAAIf,UAAU,OAAvB,SACb,cAACoO,EAAA,EAAD,CACEH,KAAM,iCAAM,sBAAMjO,UAAU,OAAhB,SAAwB8K,YAAYkB,KAAoB9L,IAAKwB,YAAYsK,MACrFsC,YAAY,iBACZ9N,MAAO8L,EACPhK,QAA0C,MAAjCpC,IAAKC,YAAY6L,GAC1BuC,cAAe,SAAC/N,GAAD,OAAWuL,EAAe,iBAAkBvL,IAC3DgO,aAAcvC,IAAOO,oBAAoBd,EAAOnL,IAAKmL,EAAOxB,mBAKlE,eAACvE,EAAA,EAAD,WACE,cAACD,EAAA,EAAD,CAAK1F,UAAU,OAAf,SAAsB,eAAC2F,EAAA,EAAD,WACpB,qBAAI3F,UAAU,OAAd,UAAsBiM,IAAOsB,cAAc7B,EAAOnL,KAAlD,IAAyD0L,IAAOiC,aAAaxC,EAAOxB,UAApF,IAAgGuC,GAAiB,sBAAmBf,EAAOmB,YAAc,EAAxC,QACjH,gCAAQ,cAAC,IAAD,CAAOpL,MAAOwK,IAAOoB,gBAAgB3B,EAAOnL,cAEtD,cAACmF,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAMuH,MAGR,4BAAIT,GAAqBR,IAAOwC,4BAA4B/C,EAAOnL,IAAKmL,EAAOmB,YAAtD,OAAmE7H,QAAnE,IAAmEA,OAAnE,EAAmEA,EAAOE,WAAYX,KAC/G,cAAC0G,EAAD,CAAiBC,MAAO,aAAcC,MAAK,aAAIuD,IAAKvC,GAAuBH,EAAaM,GAAuBpH,WAAU,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAOE,aAClI,cAAC+F,EAAD,CAAiBC,MAAO,cAAeC,MAAOwB,EAAkBzH,WAAU,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAOE,aACnF,cAAC+F,EAAD,CAAiBC,MAAO,oBAAqBC,MAAO4B,EAAkB7H,WAAU,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAAOE,mBAG9F2G,GAAmB,cAACnG,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAK,gCAAQsG,IAAO0C,qBAAqBjD,EAAOnL,iBAK/E,SAASqK,EAAT,GAA8F,IAApE7L,EAAmE,EAAnEA,SAAUwF,EAAyD,EAAzDA,UAAWK,EAA8C,EAA9CA,kBAAmBF,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAAY,EAC7D8D,oBAAS,GADoD,mBACpFkD,EADoF,KAC3EC,EAD2E,OAEnDnD,oBAAS,GAF0C,mBAEpFmG,EAFoF,KAEtEC,EAFsE,OAGrDpG,oBAAS,GAH4C,mBAGpFqG,EAHoF,KAGvEC,EAHuE,KAKrFC,EAAiB,CAAC,SAAU,YAAa,WAAY,YAAa,SAClEC,EAAkB,CAAC,UAAW,WAAY,YAChDA,EAAgB1J,KAAhB,MAAA0J,EAAwBD,GACxB,IAAME,EAAe,CAAC,cAAe,KAAM,MAAO,eAAgB,MAAO,OAAQ,eAAgB,MAAO,QACxGA,EAAa3J,KAAb,MAAA2J,EAAqBF,GACrB,IAAMG,EAAgB,GAEtBxM,IAAUyM,mBAAmBzH,SAAQ,SAAA0H,GACnCF,EAAc5J,KAAd,UAAsB8J,EAAtB,UACAF,EAAc5J,KAAd,UAAsB8J,EAAtB,aAEFF,EAAc5J,KAAK,UAAW,WAAY,cAE1C,IAAM+J,EAAe,CACnB,cAAe,mBACf,eAAgB,oBAChB,aAAc,kBACd,aAAc,kBACd,OAAQ,WAAY,UAAW,gBAE3BC,EAAqB5M,IAAUqG,yBAAyBzE,EAAW,sBACnEiL,EAAqB7M,IAAUqG,yBAAyBzE,EAAW,sBACnEkL,EAAsBvP,IAAKC,YAAYoP,GAEvCG,EAAsE,MAAzCxP,IAAKC,YAAYoP,GAE9CI,EAAuB,CAAEpL,YAAWG,gBAAeC,WAAU5F,YACnE,OAAO,qCACL,eAAC6G,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,UACE,cAAC4F,EAAA,EAAK9E,OAAN,UACE,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,qDAED5G,EAAW,cAAC4G,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACV,cAACgF,EAAA,EAAD,CAAQ7D,QAASyJ,EAAU,SAAW,OAAQ5I,QAAS,kBAAM6I,GAAYD,IAAUjJ,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAMmI,EAAUtB,IAASzG,MAAhD,IAA4D+H,EAAU,OAAS,cAE1E,UAGZA,EACC,cAAC/F,EAAA,EAAKtE,KAAN,UACE,eAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,UACGkP,EAAavN,KAAI,SAAAiG,GAAO,OACvB,cAACjC,EAAA,EAAD,CAAKgB,GAAI,EAAG5F,GAAI,GAAhB,SACE,cAACqN,EAAA,EAAD,CACEpO,UAAU,OACViO,KAAM,iCAAOnD,YAAYlD,GAAnB,IAA8B1H,IAAK0P,kBAAkBhI,MAC3D0G,YAAW,eAAUpO,IAAKwB,YAAYkG,IACtCpH,MAAOmC,IAAUqG,yBAAyBzE,EAAWqD,GACrDtF,QAAuC,MAA9BpC,IAAKC,YAAYyH,GAC1B2G,cAAe,SAAA/N,GAAK,OAAIoE,EAAkB,CAAEwB,KAAM,eAAgBwB,UAASpH,WAC3EgO,aAAc7L,IAAUkN,iBAAiBtL,EAAWqD,MAR/BA,MAY3B,cAACjC,EAAA,EAAD,CAAKgB,GAAI,EAAG5F,GAAI,GAAhB,SACE,eAAC0I,EAAA,EAAD,WACE,eAAC6D,EAAA,EAAD,CACEpC,MAAOhL,IAAK4P,uBAAuBP,EAAoB,oBACvDQ,GAAItG,IAAWC,QAFjB,UAIE,cAACiE,EAAA,EAASC,SAAV,uCACCoC,IAA4BrO,KAAI,SAAApB,GAAG,OAClC,cAACoN,EAAA,EAAS7K,KAAV,CAAyBC,QAAS,kBAAM6B,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,qBAAsBpH,MAAOD,KAAxH,SACGL,IAAK4P,uBAAuBvP,IADXA,SAIxB,cAACqJ,EAAA,EAAD,CAAmBqG,MAAOP,EACxBpB,YAAY,yBACZ9N,MAAOmC,IAAUqG,yBAAyBzE,EAAW,sBACrDsF,SAAU,SAAArJ,GAAK,OAAIoE,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,qBAAsBpH,aAC9F,eAACiJ,EAAA,EAAWM,OAAZ,WACG2F,GAA8B,cAACjG,EAAA,EAAWE,KAAZ,gBAC/B,cAAC5D,EAAA,EAAD,CAAQhD,QAAS,WACf6B,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,qBAAsBpH,MAAOmC,IAAUkN,iBAAiBtL,EAAW,wBACtHK,EAAkB,CAAEwB,KAAM,eAAgBwB,QAAS,qBAAsBpH,MAAOmC,IAAUkN,iBAAiBtL,EAAW,yBAEtHlB,UAAWV,IAAUuN,YAAY3L,EAAW,wBAA0B5B,IAAUuN,YAAY3L,EAAW,sBAJzG,SAME,cAAC,IAAD,CAAiBf,KAAMwG,qBAOnC,cAACpE,EAAA,EAAKtE,KAAN,UACE,eAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,UACGiP,EAAgBtN,KAAI,SAAAiG,GAAO,OAAI,cAACjC,EAAA,EAAD,CAAK5E,GAAI,GAAI4F,GAAI,EAAjB,SAAmC,cAACwJ,EAAA,EAAD,aAAavI,QAASA,GAAa+H,KAA7C/H,MACzD,eAACjC,EAAA,EAAD,CAAKgB,GAAI,EAAG5F,GAAI,GAAhB,UACE,iCAAM,6CAAN,IAA0B,sBAAMf,UAAW2C,IAAUuN,YAAY3L,EAAW,sBAAwB,eAAiB,GAA3F,SAAgGrE,IAAKwB,YAAY6N,QAC3I,sBAAMvP,UAAS,sBAAiB2C,IAAUuN,YAAY3L,EAAW,sBAAwB,eAAiB,IAA1G,mBAAoHiL,GAApH,OAAyIC,gBAMnJ,eAAC7J,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,UACE,cAAC4F,EAAA,EAAK9E,OAAN,UACE,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,iDAED5G,GAAY,cAAC4G,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACX,cAACgF,EAAA,EAAD,CAAQ7D,QAAS0M,EAAe,SAAW,OAAQ7L,QAAS,kBAAM8L,GAAiBD,IAAelM,KAAK,KAAvG,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAMoL,EAAevE,IAASzG,MAArD,IAAiEgL,EAAe,OAAS,mBAKhGA,EACC,cAAChJ,EAAA,EAAKtE,KAAN,UACE,cAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,SACGmP,EAAcxN,KAAI,SAAAiG,GAAO,OACxB,cAACjC,EAAA,EAAD,CAAKgB,GAAI,EAAG5F,GAAI,GAAhB,SACE,cAACqN,EAAA,EAAD,CACEpO,UAAU,OACViO,KAAM,iCAAOnD,YAAYlD,GAAnB,IAA8B1H,IAAKwB,YAAYkG,MACrD0G,YAAW,eAAUpO,IAAKkQ,eAAexI,IACzCpH,MAAOmC,IAAUqG,yBAAyBzE,EAAWqD,GACrDtF,QAAuC,MAA9BpC,IAAKC,YAAYyH,GAC1B2G,cAAe,SAAA/N,GAAK,OAAIoE,EAAkB,CAAEwB,KAAM,eAAgBwB,UAASpH,WAC3EgO,aAAc7L,IAAUkN,iBAAiBtL,EAAWqD,MAR/BA,UAa/B,cAAChC,EAAA,EAAKtE,KAAN,UACE,cAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,SAAuBmP,EAAcxN,KAAI,SAAAiG,GAAO,OAAI,cAACjC,EAAA,EAAD,CAAK5E,GAAI,GAAI4F,GAAI,EAAjB,SAAmC,cAACwJ,EAAA,EAAD,aAAavI,QAASA,GAAa+H,KAA7C/H,aAInF,eAAChC,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,UACE,cAAC4F,EAAA,EAAK9E,OAAN,UACE,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,gDAED5G,GAAY,cAAC4G,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACX,cAACgF,EAAA,EAAD,CAAQ7D,QAAS4M,EAAc,SAAW,OAAQ/L,QAAS,kBAAMgM,GAAgBD,IAAcpM,KAAK,KAApG,SACE,iCAAM,cAAC,IAAD,CAAiBc,KAAMsL,EAAczE,IAASzG,MAApD,IAAgEkL,EAAc,OAAS,mBAK9FA,EACC,cAAClJ,EAAA,EAAKtE,KAAN,UACE,cAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,SACGsP,EAAa3N,KAAI,SAAAiG,GAAO,OACvB,cAACjC,EAAA,EAAD,CAAK0K,GAAI,EAAGtP,GAAI,GAAhB,SACE,cAACqN,EAAA,EAAD,CACEpO,UAAU,OACViO,KAAM,iCAAOnD,YAAYlD,GAAnB,IAA8B1H,IAAKwB,YAAYkG,MACrD0G,YAAW,eAAUpO,IAAKkQ,eAAexI,IACzCpH,MAAOmC,IAAUqG,yBAAyBzE,EAAWqD,GACrDtF,QAAuC,MAA9BpC,IAAKC,YAAYyH,GAC1B2G,cAAe,SAAA/N,GAAK,OAAIoE,EAAkB,CAAEwB,KAAM,eAAgBwB,UAASpH,WAC3EgO,aAAc7L,IAAUkN,iBAAiBtL,EAAWqD,MAR/BA,UAa/B,cAAChC,EAAA,EAAKtE,KAAN,UACE,cAACoE,EAAA,EAAD,CAAK1F,UAAU,OAAf,SAAuBsP,EAAa3N,KAAI,SAAAiG,GAAO,OAAI,cAACjC,EAAA,EAAD,CAAK5E,GAAI,GAAI4F,GAAI,EAAjB,SAAmC,cAACwJ,EAAA,EAAD,aAAavI,QAASA,GAAa+H,KAA7C/H,gB,uBChZvE,SAAS0I,GAAoBvM,GAAQ,IAC1CQ,EAA0HR,EAA1HQ,UADyC,EACiFR,EAA/GQ,UAAaC,EADiB,EACjBA,aAAc0F,EADG,EACHA,SAAU1B,EADP,EACOA,cAAiBzJ,EAAyDgF,EAAzDhF,SAAU6F,EAA+Cb,EAA/Ca,kBAAmBD,EAA4BZ,EAA5BY,SAAUD,EAAkBX,EAAlBW,cAC1G6L,EAAY5N,IAAU6N,aAAatG,GAGnCuG,EAAiB,2BAAQ1M,GAAR,IAAewM,cAEtC,OAAO,qCACL,cAAC7K,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAK,cAAC+K,GAAD,CAAuBnM,YAAWI,WAAUD,sBACtD,eAACgB,EAAA,EAAD,WANqB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBAQ/E/D,KAAI,mCAAEgP,EAAF,KAAQC,EAAR,YAClB,cAACjL,EAAA,EAAD,CAAgB5E,GAAI,GAAIC,GAAI,EAAG2F,GAAI,EAAG3G,UAAU,OAAhD,SACE,cAAC6Q,GAAD,2BACMJ,GADN,IAEEK,UAAWH,EACXI,SAAUH,MAJJD,MAOXhO,IAAUqO,UAAUxM,EAAc,UAAU,IAAU,cAACmB,EAAA,EAAD,CAAK5E,GAAI,GAAIC,GAAI,EAAG2F,GAAI,EAAG3G,UAAU,OAArC,SACrD,cAAC6Q,GAAD,2BACMJ,GADN,IAEEK,UAAU,SACVC,SAAS,6BAIf,cAACrL,EAAA,EAAD,UAvBmB,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IAyBhI/D,KAAI,YAAyB,IAAD,mBAAtBgP,EAAsB,KAAhBC,EAAgB,KAATK,EAAS,KACpCC,EAAUX,GAAaU,EAC3B,OAAO,cAACtL,EAAA,EAAD,CAAgBvD,MAAO,CAAEC,QAAS6O,EAAU,EAAI,IAAOnQ,GAAI,GAAIC,GAAI,EAAGhB,UAAU,OAAhF,SACL,cAAC6Q,GAAD,2BACMJ,GADN,IAEEK,UAAWH,EACXI,SAAUH,MAJGD,QASrB,cAACjL,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,qBAAI3F,UAAU,cAAd,+BAA+CwI,SAGnD,cAAC9C,EAAA,EAAD,CAAK1F,UAAU,QAAf,SAEG,YAAIuK,MAAM,GAAGC,QAAQ7I,KAAI,SAAAE,GACxB,IAAI8O,EAAI,uBAAmB9O,EAAI,GAC/B,OAAO,cAAC8D,EAAA,EAAD,CAAa5E,GAAI,GAAIC,GAAI,EAAGhB,UAAU,OAC3CoC,MAAO,CAAEC,QAASmG,EAAgB3G,EAAI,EAAI,IADrC,SAEL,cAACgP,GAAD,2BACMJ,GADN,IAEEK,UAAWH,EACXI,SAAQ,2BAAsBlP,EAAI,GAClCsP,aAAc,kBAAMpS,GAAY6F,EAAkB,CAAE4D,cAAgB3G,EAAI,IAAO2G,EAAgB3G,EAAIA,EAAI,SAN1FA,WAazB,IAAMuP,GAAqB,CACzBC,iBAwBF,YAAsC,IAAD,EAATlG,EAAS,EAATA,MACpB1E,EAAO,mBACb,OAAO,cAACb,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,cAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,SAC7C,uBAAMA,UAAU,oBAAhB,UAAqCE,IAAKwB,YAAY+E,GAAtD,IAA6D,cAAC0C,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASiI,QAAStR,UAAU,gBAA5G,IAA6H,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASkI,KAAMvR,UAAU,gBAAzK,cAA2LmL,EAAM1E,UAAjM,aAA2L,EAAatE,QAAQjC,IAAK8K,UAAUvE,YA1BjO+K,mBA6BF,YAAwC,IAAD,EAATrG,EAAS,EAATA,MACtB1E,EAAO,qBACb,OAAO,cAACb,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,cAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,SAC7C,uBAAMA,UAAU,sBAAhB,UAAuCE,IAAKwB,YAAY+E,GAAxD,IAA+D,cAAC0C,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASiI,QAAStR,UAAU,gBAA9G,IAA+H,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASoI,MAAOzR,UAAU,gBAA5K,cAA8LmL,EAAM1E,UAApM,aAA8L,EAAatE,QAAQjC,IAAK8K,UAAUvE,YA/BpOiL,eAkCF,YAAoC,IAAD,EAATvG,EAAS,EAATA,MAClB1E,EAAO,iBACb,OAAO,cAACb,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,cAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,SAC7C,uBAAMA,UAAU,kBAAhB,UAAmCE,IAAKwB,YAAY+E,GAApD,IAA2D,cAAC0C,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASiI,QAAStR,UAAU,gBAA1G,IAA2H,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsI,KAAM3R,UAAU,gBAAvK,cAAyLmL,EAAM1E,UAA/L,aAAyL,EAAatE,QAAQjC,IAAK8K,UAAUvE,YApC/NmL,eA8CF,YAA+B,IAAD,EAATzG,EAAS,EAATA,MAAS,EACN1C,mBAASnC,OAAOkE,KAAKqH,IAAmB,IADlC,mBACrBxC,EADqB,KAChByC,EADgB,KAEtBrL,EAAI,UAAM4I,EAAN,cACV,OAAO,cAACzJ,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,eAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,UAC7C,cAACsN,EAAA,EAAD,CAAgB5K,KAAK,KAAKwI,MAAO2G,GAAkBxC,GAAMrP,UAAU,iBAAiBkC,QAAQ,UAA5F,SACGoE,OAAOM,QAAQiL,IAAmBlQ,KAAI,mCAAEpB,EAAF,KAAOwR,EAAP,YAAoB,cAACpE,EAAA,EAAS7K,KAAV,CAAyBC,QAAS,kBAAM+O,EAAOvR,IAA/C,SAAsDwR,GAAlCxR,QAEjF,uBAAMP,UAAS,eAAUqP,EAAV,QAAf,wBAAsClE,EAAM1E,UAA5C,aAAsC,EAAatE,QAAQjC,IAAK8K,UAAUvE,aApD5EuL,cAuDF,YAAmC,IAAD,EAAT7G,EAAS,EAATA,MACjB1E,EAAO,gBACPwL,EAAc,cAAC9H,EAAA,EAAD,CAClBhH,UAAU,MACVC,QAAS,eAACgH,EAAA,EAAD,8CAAyC,sBAAMpK,UAAU,WAAhB,wBAFhC,SAIlB,cAAC,IAAD,CAAiBwD,KAAM0O,IAAkBlS,UAAU,OAAOoC,MAAO,CAAE+P,OAAQ,YAE7E,OAAO,cAACvM,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,cAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,SAC7C,uBAAMA,UAAU,iBAAhB,UAAkCE,IAAKwB,YAAY+E,GAAnD,IAA0D,cAAC0C,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASoI,MAAOzR,UAAU,gBAAvG,IAAwH,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASkI,KAAMvR,UAAU,gBAApK,KAAsL,wBAAOA,UAAU,gBAAjB,yBAA8CiS,EAA9C,OAAtL,cAA2P9G,EAAM1E,UAAjQ,aAA2P,EAAatE,QAAQjC,IAAK8K,UAAUvE,YA/DjS2L,eAkEF,YAAoC,IAAD,EAATjH,EAAS,EAATA,MAClB1E,EAAO,iBACb,OAAO,cAACb,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,SAAwC,cAAC+E,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,MAArB,SAC7C,uBAAMA,UAAU,kBAAhB,UAAmCE,IAAKwB,YAAY+E,GAApD,IAA2D,cAAC0C,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASiI,QAAStR,UAAU,gBAA1G,IAA2H,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASoI,MAAOzR,UAAU,gBAAxK,IAAyL,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsI,KAAM3R,UAAU,gBAArO,IAAsP,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASkI,KAAMvR,UAAU,gBAAlS,IAAmT,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASgJ,IAAKrS,UAAU,gBAA9V,cAAgXmL,EAAM1E,UAAtX,aAAgX,EAAatE,QAAQjC,IAAK8K,UAAUvE,aAnExZ,SAASiK,GAAT,GAAoF,IAA5ClM,EAA2C,EAAxDD,UAAaC,aAAgBG,EAA2B,EAA3BA,SAAUD,EAAiB,EAAjBA,cAC1DM,EAAQL,GAAsBD,EAC9B4N,EAAa3P,IAAUkG,gBAAgBrE,GACvC+N,EAAW,YAAQC,KAAsBF,IAAe,IAE9D,OADKC,EAAYE,SAAS,kBAAiE,aAA7C9P,IAAUoG,iBAAiBvE,IAA8B+N,EAAYhN,KAAK,iBACjH,cAACK,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,OAAnD,SACL,cAAC4F,EAAA,EAAKtE,KAAN,CAAWtB,UAAU,YAArB,SACE,cAAC0F,EAAA,EAAD,CAAK1F,UAAU,QAAf,SACGuS,EAAY5Q,KAAI,SAAApB,GACf,IAAMmS,EAAMtB,GAAmB7Q,GAC/B,OAAKmS,EACE,cAAC/M,EAAA,EAAD,CAAK5E,GAAG,OAAOf,UAAU,OAAzB,SAA0C,cAAC0S,EAAD,CAAKvH,MAAK,OAAEnG,QAAF,IAAEA,OAAF,EAAEA,EAAOE,cAAxB3E,GAD3B,cA0B3B,IAAMsR,GAAoB,CACxB,KAAQ,iCAAO3R,IAAKwB,YAAY,kBAAxB,IAA2C,cAACyH,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsI,KAAM3R,UAAU,gBAAvF,IAAwG,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsJ,MAAO3S,UAAU,mBAC7J,QAAW,iCAAOE,IAAKwB,YAAY,qBAAxB,IAA8C,cAACyH,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASiI,QAAStR,UAAU,gBAA7F,IAA8G,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsJ,MAAO3S,UAAU,mBACtK,KAAQ,iCAAOE,IAAKwB,YAAY,kBAAxB,IAA2C,cAACyH,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASkI,KAAMvR,UAAU,gBAAvF,IAAwG,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsJ,MAAO3S,UAAU,mBAC7J,MAAS,iCAAOE,IAAKwB,YAAY,mBAAxB,IAA4C,cAACyH,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASoI,MAAOzR,UAAU,gBAAzF,IAA0G,cAACmJ,EAAA,EAAD,CAAOlI,IAAKmI,IAAOC,SAASsJ,MAAO3S,UAAU,oBA+BlK,SAAS4S,GAAkBC,GAA6B,IAAlB3N,EAAiB,uDAAJ,GACjD,OAAOoB,OAAOM,QAAQiM,GAAWlR,KAAI,mCAAEmR,EAAF,KAAYxH,EAAZ,WAA2B,CAC9DzK,KAAMX,IAAKwB,YAAYoR,GACvB5Q,QAAShC,IAAK6K,eAAe+H,GAC7BtS,MAAO8F,OAAOM,QAAP,OAAe0E,QAAf,IAAeA,IAAY,IAAIC,QAAO,SAACC,EAAD,0BAAQH,EAAR,KAAcI,EAAd,YAA8BD,EAAOtG,EAAWmG,GAAQI,IAAY,GACjHsH,YAAa,+BAAOzM,OAAOM,QAAP,OAAe0E,QAAf,IAAeA,IAAY,IAAI3J,KAAI,WAAqBE,GAArB,2BAAEwJ,EAAF,KAAQI,EAAR,YAA2B,iCAAsB,IAAN5J,EAAU,MAAQ,GAAI3B,IAAK8S,UAAU3H,EAAMnG,GAA3D,uBAA2EuG,QAA3E,IAA2EA,GAA3E,UAA2EA,EAAYtJ,eAAvF,aAA2E,OAAAsJ,EAAsB,UAAjG,QAAuGA,IAA5F5J,QAC7FoR,MAAO/S,IAAK8K,UAAU8H,GACtBI,KAAMhT,IAAKC,YAAY2S,OAG3B,SAASK,GAAchI,GAAyB,IAAlBjG,EAAiB,uDAAJ,GACzC,OAAOoB,OAAOM,QAAQuE,GAAOxJ,KAAI,mCAAEiG,EAAF,KAAWwL,EAAX,WACnB,cAAZxL,EAA0BgL,GAAkBQ,EAASlO,GAAc,CACjErE,KAAMX,IAAKwB,YAAYkG,GACvB1F,QAAShC,IAAK6K,eAAenD,GAC7BpH,MAAO4S,EACPH,MAAO/S,IAAK8K,UAAUpD,GACtBsL,KAAMhT,IAAKC,YAAYyH,OAEzByL,OAGJ,IAAMC,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACxC,SAASzC,GAAT,GAAqO,IAAzMtM,EAAwM,EAAxMA,UAAwM,IAA7LA,UAAaC,EAAgL,EAAhLA,aAAcgE,EAAkK,EAAlKA,cAAkK,IAAnJ+K,uBAAmJ,MAAjI,GAAiI,MAA7HC,mBAA6H,SAAtG5O,EAAsG,EAAtGA,kBAAmBkM,EAAmF,EAAnFA,UAAWC,EAAwE,EAAxEA,SAAUR,EAA8D,EAA9DA,UAAW7L,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,SAAU5F,EAA0B,EAA1BA,SAAUoS,EAAgB,EAAhBA,aAC9MnM,EAAQL,GAAsBD,EAC9B+O,EAAS,KACTC,EAAY,KAChB,GAAkB,SAAd5C,GAAwBnO,IAAUgR,gBAAgBnP,GAAe,CACnE,IAAIoP,EAASjR,IAAUkG,gBAAgBrE,GACvCkP,EAAY,cAAC/N,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACV,cAACgF,EAAA,EAAD,CAAQ7D,QAASsR,EAAcI,EAAS,YAAa5T,UAAU,aAAaqD,UAAWtE,EAAUgE,QAAS,kBAAMhE,GAAY6F,EAAkB,CAAE4O,aAAcjP,EAAUiP,eAAgB9Q,KAAM3D,EAAW,KAAO,KAAhN,SACGyU,EACC,iDAAmB,4BAAI7Q,IAAUkR,iBAAiBD,QAChD,kBAKV,IAAIE,EAAe,EACnB,GAAIhD,KAAayC,EAAiB,CAChC,IAAMQ,EAAkBR,EAAgBzC,GAClCkD,EAAarR,IAAUsR,oBAAoBzP,EAAcsM,EAAWtI,GAE1E,GADAsL,EAAeC,EAAkBC,EAC7BjV,EAAU,CAKZ0U,EAAS,cAAC7N,EAAA,EAAK9E,OAAN,UACP,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACE,cAACuM,EAAA,EAAD,CAAgBpC,MAAK,qBAAgB4I,EAAe,GAApD,SACG,YAAIvJ,MAAM+I,GAAa/C,IAA4B,SAAdO,EAAuB,EAAI,IAAItG,QAAQ7I,KAAI,SAAAE,GAAC,OAChF,eAAC8L,EAAA,EAAS7K,KAAV,CAAuBC,QAAS,kBATZmR,EAS4CrS,EARxE0R,EAQ6DzC,GARrCoD,OACxBtP,EAAkB,CAAE2O,oBAFC,IAAOW,GASpB,wBAAgFrS,EAAImS,EAAa,IAA7EnS,UAGzB6R,YAILD,EAAS,cAAC7N,EAAA,EAAK9E,OAAN,UACP,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK5E,GAAG,OAAR,iCACoB+S,EAAe,KAEnC,cAACnO,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACG2S,SAMX,IAAMS,EAAcxR,IAAUyR,eAAe5P,EAAcsM,EAAW9L,EAAME,YACtEmP,EAAWF,GAAe,cAACzO,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UACnC,cAACC,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAAYb,UAAU,mBAAlD,SACE,cAACsU,GAAA,EAAD,CAAWtU,UAAU,aAAakC,QAAQ,QAA1C,SACGiR,GAAcgB,EAAD,OAAcnP,QAAd,IAAcA,OAAd,EAAcA,EAAOE,YAAYvD,KAAI,SAAC4S,EAAO1S,GAAR,OACjD,cAAC2S,GAAD,CAAsBC,MAAO5S,EAAS0S,QAAO7P,gBAAeC,YAAzC9C,cAK3B,OAAO,eAAC+D,EAAA,EAAD,CAAMhF,GAAG,eAAeC,KAAK,YAAYb,UAAU,QAAnD,UACJyT,EACD,eAAC7N,EAAA,EAAKtE,KAAN,WACE,eAACoE,EAAA,EAAD,CAAK1F,UAAS,+BAA2BjB,GAAYoS,EAAgB,iBAAmB,IAAMpO,QAASoO,EAAvG,UACE,cAACxL,EAAA,EAAD,CAAK5E,GAAG,OAAOf,UAAU,mCAAzB,SACE,cAACmJ,EAAA,EAAD,CAAOlI,IAAK0B,IAAU+R,aAAalQ,EAAcsM,GAAY9Q,UAAU,gBAEzE,eAAC2F,EAAA,EAAD,CAAK3F,UAAU,cAAf,UACE,cAAC4F,EAAA,EAAKrE,MAAN,UAAaoB,IAAUgS,cAAcnQ,EAAcsM,KACnD,cAAClL,EAAA,EAAKgP,SAAN,UAAgB7D,UAGnBpO,IAAUkS,kBAAkBrQ,EAAcsM,GAAWnP,KAAI,SAACmT,EAASjT,GAAO,IAAD,IAGxE,GAFuB,oBAAZiT,IACTA,EAAUA,EAAQ9P,EAAME,cACrB4P,EAAS,OAAO,KAErB,IAAIC,EAAaD,EAAQjU,KACC,oBAAfkU,IACTA,EAAaA,EAAW/P,EAAME,aAChC,IAAI8P,EAAM,UAAGF,EAAQE,cAAX,QAAqB,GAE3B5N,EAAc0N,EAAQ1N,YACC,oBAAhBA,IACTA,EAAcA,EAAYpC,EAAME,aAClC,IAAIgI,EAAiB,KACrB,GAAI9F,EAAa,CACf,IAAID,EAAiBG,IAAiBC,kBAAkBhD,EAAU0Q,mBAAoB,CAAEzN,OAAQsJ,EAAWrJ,QAASL,EAAY8N,iBAC5HC,EAAoB,GACxB,GAAIhO,EAAgB,CAClB,IAAI4F,EAAmBpK,IAAUyS,0BAA0BhO,EAAaD,EAAgB,IACxFgO,EAAiB,sBAAOxS,IAAU0S,2BAA2BjO,EAAaD,EAAgB,KAAzE,YAAiFgM,GAAcpG,EAAD,OAAmB/H,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAOE,cAG3IgI,EAAiB,cAACvH,EAAA,EAAD,CAAK5E,GAAI,GAAT,SACf,eAAC6E,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAAYb,UAAU,OAAlD,UACE,cAAC4F,EAAA,EAAK9E,OAAN,UACE,cAACiH,EAAA,EAAD,CAAqB1E,UAAWtE,EAC9BqI,YAAaA,EACbD,eAAgBA,EAChBa,eAPe,SAACb,GAAD,OAAoBvC,EAAkB,CAAEqQ,mBAAoB3N,IAAiBU,eAAezD,EAAU0Q,mBAAoB,CAAEzN,OAAQsJ,EAAWrJ,QAASL,EAAY8N,gBAAkB/N,MAQrMgB,OAAQ,+BAAOf,EAAYkO,gBAE/B,cAAChB,GAAA,EAAD,CAAWtU,UAAU,aAAakC,QAAQ,QAA1C,SACGiT,EAAkBxT,KAAI,SAAC4T,EAAW1T,GAAZ,OAAkB,cAAC2S,GAAD,CAAsBC,MAAO5S,EAAS0S,MAAOgB,EAAW7Q,gBAAeC,YAApD9C,aAKpE,OAAO,eAAC6D,EAAA,EAAD,CAAK1F,UAAU,aAAf,UAAgD,eAAC2F,EAAA,EAAD,CAAK5E,GAAI,GAAT,UACrD,qBAAKf,UAAU,OAAf,SAAuB+U,IACtBC,EAAOtU,OAAS,GAAK,cAAC4T,GAAA,EAAD,CAAWtU,UAAU,kBAArB,gBACnBgV,QADmB,IACnBA,GADmB,UACnBA,EAAQrT,WADW,aACnB,OAAAqT,GAAc,SAACT,EAAO1S,GAAR,OAAc,cAAC2S,GAAD,CAAsBC,MAAO5S,EAAS0S,QAAO7P,gBAAeC,YAAzC9C,WAE7CqL,IALiC,UAAYrL,MAOrDwS,QAIP,SAASG,GAAT,GAAkE,IAAD,UAAzCD,EAAyC,EAAzCA,MAAOE,EAAkC,EAAlCA,MAAO/P,EAA2B,EAA3BA,cAAeC,EAAY,EAAZA,SAC7C6Q,EAAyBC,qBAAWC,IACtC1Q,EAAQL,GAAsBD,EAGlC,GAFqB,oBAAV6P,IACTA,EAAQA,EAAMvP,EAAME,cACjBqP,EAAO,OAAO,KAEnB,IAAMoB,EAAYhT,IAAUiT,oBAAoBrB,EAAO,OAAQvP,EAAME,YAC/D2Q,EAAelT,IAAUiT,oBAAoBrB,EAAO,UAAWvP,EAAME,YAErE4Q,EAAmBnT,IAAUiT,oBAAoBrB,EAAO,cAAevP,EAAME,YAC7E6Q,EAAqBD,EAAmB,cAAC3L,EAAA,EAAD,CAC5ChH,UAAU,MACVC,QAAS,cAACgH,EAAA,EAAD,UAAU0L,IAFyB,SAI5C,cAAC,IAAD,CAAiBtS,KAAM0O,IAAkBlS,UAAU,OAAOoC,MAAO,CAAE+P,OAAQ,YACzD,KAEhB6D,EAAW,KACXzB,EAAM/T,MACRwV,EAAWrT,IAAUiT,oBAAoBrB,EAAO,QAASvP,EAAME,YACxDqP,EAAM0B,UACbD,EAAQ,UAAGrT,IAAUiT,oBAAoBrB,EAAO,UAAWvP,EAAME,mBAAzD,iBAAG,EAAoE,UAAvE,aAAG,SAAyEF,EAAME,aAE5F,IAAIgR,EAAW3B,EAAMtB,OAAS,EACxBC,EAAOvQ,IAAUiT,oBAAoBrB,EAAO,OAAQvP,EAAME,YAEhE,GAAIsQ,GAA0B9Q,GAAqC,kBAAbsR,EAAuB,CAAC,IAAD,oBACvEG,EAAmB5B,EAAM/T,MAAQ+T,EAAM/T,MAApB,WAA4B,EAAA+T,GAAM0B,eAAlC,iBAA4B,SAAgBvR,EAAcQ,mBAA1D,iBAA4B,EAA4C,UAAxE,aAA4B,SAAiDR,EAAcQ,YAElF,oBAArBiR,IACTA,EAAmBC,SAAQ,UAACD,SAAD,iBAAC,EAAmBzR,EAAcQ,mBAAlC,iBAAC,EAA8C/C,eAA/C,aAAC,SAAwD+T,KACtF,IAAIG,EAAOL,EAAWG,EACtBH,EAAW,qDAAOG,SAAP,aAAO,EAAkBhU,QAAQ+T,UAAjC,QAA8CC,EAAkBE,EAAO,uBAAMrW,UAAWqW,EAAO,EAAI,eAAiB,cAA7C,eAA+DA,EAAO,EAAI,IAAM,IAAQ,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMlU,eAAN,oBAAAkU,EAAgBH,KAAaG,EAAjH,OAAiI,MAGrN,OAAO,cAAC/B,GAAA,EAAUxR,KAAX,CAAgBZ,QAASuS,EAAQ,EAAI,aAAe,eAAgBzU,UAAU,MAA9E,SACL,gCACE,iCAAM,4BAAI2V,IAAeI,KACzB,uBAAM/V,UAAS,sCAAiC6V,GAAhD,8BAAkEG,SAAlE,iBAAkE,EAAU7T,eAA5E,aAAkE,SAAoB+T,UAAtF,QAAmGF,EAAU9C,U,cCzTtGwC,GAAgCY,0BAEvCC,GAAaC,IAAMC,YACvB,WAA+DC,GAAS,IAArE1S,EAAoE,EAApEA,SAAU5B,EAA0D,EAA1DA,MAAOpC,EAAmD,EAAnDA,UAA8B2W,EAAqB,EAAxC,mBAC7B,OACE,qBACED,IAAKA,EACLtU,MAAO,CAAEA,QAAOwU,SAAU,SAC1B5W,UAAWA,EACX6W,kBAAiBF,EAJnB,SAME,cAACjR,EAAA,EAAD,UACG8Q,IAAMM,SAASC,QAAQ/S,GAAUrC,KAAI,SAACqV,EAAOnV,GAAR,OAAc,cAAC8D,EAAA,EAAD,CAAa5E,GAAI,EAAjB,SAAqBiW,GAAXnV,aAMlEoV,GAAmB,SAACzS,GAAD,YAAmB,CAC1CA,aAAY,OAAEA,QAAF,IAAEA,IAAgB,GAC9B0F,SAAU,KACVgN,QAAS,MACTC,aAAc,KACdC,kBAAmB,GACnB3S,qBAAsB,GACtB4S,kBAAmB,GACnB3L,OAAQ,CACNnL,IAAG,UAAE+F,OAAOkE,KAAKyB,IAAO4B,iBAAiBlL,IAAUoG,iBAAiBvE,KAAgB,UAAjF,QAAuF,GAC1F0F,SAAUoN,IAAgB,GAC1BzK,YAAa,EACbT,gBAAiB,EACjBG,eAAgB,EAChBpF,eAAgB,GAElBoM,gBAAiB,CACfgE,KAAM,EACNC,MAAO,EACPC,MAAO,GAETjE,aAAa,EACbyB,mBAAoB,GACpBzM,cAAe,IAGjB,SAASkP,GAAiBC,EAAOC,GAC/B,OAAQA,EAAOxR,MACb,IAAK,YACH,OAAO,2BAAKuR,GAAUC,EAAOrT,WAC/B,IAAK,SACH,OAAO,2BAAKoT,GAAUE,IAAkB5Y,IAAI0Y,EAAMnT,aAAc,KAClE,IAAK,eAAiB,IACZoD,EAAmBgQ,EAAnBhQ,QAASpH,EAAUoX,EAAVpX,MACX6W,EAAoBM,EAAMN,kBAMhC,OALoB1U,IAAUkN,iBAAiB8H,EAAO/P,KAClCpH,SACX6W,EAAkBzP,GAEzByP,EAAkBzP,GAAWpH,EACxB,2BAAKmX,GAAZ,IAAmBN,sBAKvB,OAAO,2BAAKM,GAAUC,GAET,SAASE,GAAT,GAA+L,IAAD,EAAhJC,EAAgJ,EAA9JvT,aAA2CwT,EAAmH,EAA9HzT,UAA2C0T,EAAmF,EAApGC,gBAAsCC,EAA8D,EAA9DA,OAAkBC,EAA4C,EAAtDzT,SAAwB5F,EAA8B,EAA9BA,SAAUsZ,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAAW,EACpKC,qBAAWb,GAAkBT,GAAiBc,IADsH,mBACpMxT,EADoM,KACzLK,EADyL,OAE/I6D,oBAAS,GAFsI,mBAEpM+M,EAFoM,KAE5KgD,EAF4K,KAGrMC,EAAcC,kBAAO,GAHgL,EAI7KjQ,mBAAS,IAJoK,mBAIpMkQ,EAJoM,KAIvLpV,EAJuL,KAKrMqV,EAAcha,uBAAY,kBAAM2E,EAAO,MAAK,IAClDnF,qBAAU,WACR,GAAK2Z,EAAL,CACA,IAAMc,EAAI,2BAAQ5B,GAAiBc,IAAsBF,IAAkB5Y,IAAI8Y,EAAkB,KACjGnT,EAAkB,CAAEwB,KAAM,YAAa7B,UAAWsU,OACjD,CAACd,IACJ3Z,qBAAU,WACR,GAAK4Z,EAAL,CACA,IAAMa,EAAI,2BAAQ5B,GAAiBe,EAAcxT,eAAkBwT,GACnEpT,EAAkB,CAAEwB,KAAM,YAAa7B,UAAWsU,OACjD,CAACb,IACJ5Z,qBAAU,WACR0a,QAAQC,IAAI,CACVpW,IAAUqW,yBACV/M,IAAOgN,sBACP5a,IAASC,kBACRC,KAAKqa,KACP,CAACA,IAEJxa,qBAAU,WAEJqa,EAAYS,QACdT,EAAYS,SAAU,EAIxBna,GAAY8Y,IAAkBtU,OAAOgB,KACpC,CAACA,EAAWxF,IAEf,IAAMyF,EAAY,iBAAGwT,QAAH,IAAGA,OAAH,EAAGA,EAAexT,oBAAlB,QAAkCD,EAAUC,aAExD0T,EAAkBtZ,uBACtB,SAAAua,GACE,IAAIxB,EAAQV,GAAiBkC,GACvBN,EAAOhB,IAAkB5Y,IAAIka,GAC/BN,IAAMlB,EAAK,2BAAQA,GAAUkB,IACjCjU,EAAkB,CAAEwB,KAAM,YAAa7B,UAAWoT,IAC9CwB,IAAY3U,IACK,OAAnByT,QAAmB,IAAnBA,KAAsBkB,MACvB,CAAC3U,EAAcI,EAAmBqT,IAEjCtT,EAAWyU,mBAAQ,WACvB,IAAMzU,EAAWyT,GAAgBiB,YAAUjB,GAK3C,OAJA,OAAIzT,QAAJ,IAAIA,OAAJ,EAAIA,EAAUO,cACZP,EAASO,WAAWgS,QAAU3S,EAAU2S,QACxCvS,EAASO,WAAWiS,aAAe5S,EAAU4S,cAExCxS,IACN,CAACyT,EAAc7T,EAAU2S,QAAS3S,EAAU4S,eAEvCjN,EAAkC3F,EAAlC2F,SAAqBoP,GAAa/U,EAAxBM,UAEZH,GAAgB0U,mBAAQ,kBAAMT,GAAehW,IAAU4W,eAAehV,KAAY,CAACA,EAAWoU,IAE9Fa,GAAoBhV,EAAe,iCACvC,cAAC2E,EAAA,EAAD,CAAOlI,IAAK0B,IAAU8W,SAASjV,GAAexE,UAAU,0BAA0B0K,eAAa,IAC/F,qBAAI1K,UAAU,WAAd,cAA2B2C,IAAUC,QAAQ4B,GAA7C,UACQ,sDACJkV,GAAkB,CAAEnV,YAAWI,WAAUD,eAAgBC,GAAY6Q,EAAyB9Q,QAAgBoI,EAAW/N,WAAU6F,oBAAmB4Q,0BAG5J,OAFI8D,KAAUI,GAAgB7U,UAAYyU,IAElC,eAAC1T,EAAA,EAAD,CAAMhF,GAAG,cAAcC,KAAK,YAA5B,UACN,cAAC+E,EAAA,EAAK9E,OAAN,UACE,eAAC4E,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAK5E,GAAI,OAAQf,UAAU,UAA3B,SAEGjB,EAAW,eAAC4a,EAAA,EAAD,WACV,eAAChM,EAAA,EAAD,CAAUoC,GAAI4J,IAAd,UACE,cAACC,EAAA,EAAD,CAAgB7J,GAAIhK,IAApB,SACGyT,KAEH,cAAC7L,EAAA,EAAS9K,KAAV,CAAekN,GAAIwG,GAAnB,SACG5T,IAAUkX,sBAAsBlY,KAAI,SAAA9C,GAAO,OAC1C,cAAC8O,EAAA,EAAS7K,KAAV,CAA6BC,QAAS,kBAAMmV,EAAgBrZ,IAA5D,SACE,iCACE,cAACsK,EAAA,EAAD,CAAOlI,IAAK0B,IAAU8W,SAAS5a,GAAUmB,UAAS,oCAA+B2C,IAAU4G,QAAQ1K,GAAjD,QAAiEsC,WAAS,IAC5H,qBAAInB,UAAU,gBAAd,UAA+B2C,IAAUC,QAAQ/D,GAAjD,WAHgBA,WAQ1B,eAACyO,EAAA,EAAD,CAAgByC,GAAI4J,IAAatW,UAAWmB,EAAc0G,MACxD,qBAAIlL,UAAU,WAAd,6BAA0C2C,IAAUmX,qBAAqB5P,GAAzE,OADF,UAGE,cAACyD,EAAA,EAASC,SAAV,UACE,+DAEDjL,IAAUoX,eAAepY,KAAI,SAAAqY,GAAM,OAClC,cAACrM,EAAA,EAAS7K,KAAV,CAA4BC,QAAS,kBAAM6B,EAAkB,CAAEsF,SAAU8P,KAAzE,SACE,+BAAMrX,IAAUmX,qBAAqBE,GAArC,QADkBA,YAIT,iCAAOR,GAAP,IAA2B7W,IAAUsX,eAAe1V,QAGtEI,EAAW,cAACgB,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACV,eAAC4Y,EAAA,EAAD,WACE,cAAC5T,EAAA,EAAD,CAAQ7D,QAASsT,EAAyB,UAAY,UAAWnS,UAAWmS,EAAwBzS,QAAS,kBAAMyV,GAA0B,IAA7I,SACE,8DAEF,cAACzS,EAAA,EAAD,CAAQ7D,QAAUsT,EAAqC,UAAZ,UAAuBnS,SAAUmS,EAAwBzS,QAAS,kBAAMyV,GAA0B,IAA7I,SACE,6EAGG,KACR7U,QAAQ0U,IAAY,cAAC1S,EAAA,EAAD,CAAK5E,GAAG,OAAR,SACnB,cAACgF,EAAA,EAAD,CAAQ7D,QAAQ,SAASa,QAASsV,EAAlC,SACE,cAAC,IAAD,CAAiB7U,KAAM0W,eAI9BvW,QAAQa,IAAiB,cAACoB,EAAA,EAAKtE,KAAN,UACxB,cAACoU,GAA8ByE,SAA/B,CAAwC3Z,MAAOgV,EAA/C,SACE,eAAC4E,EAAA,EAAIC,UAAL,CAAeC,iBAAkBhC,IAAqB3T,EAAW,eAAiB,aAAc4V,cAAc,EAAMC,eAAe,EAAnI,UACE,eAACC,EAAA,EAAD,CAAKvY,QAAQ,QAAQlC,UAAU,YAAY0a,MAAI,EAA/C,UACE,cAACD,EAAA,EAAI3X,KAAL,UACE,cAAC2X,EAAA,EAAIE,KAAL,CAAUC,SAAS,YAAnB,SAA+B,oBAAI5a,UAAU,OAAd,2BAEhC2E,EAAW,cAAC8V,EAAA,EAAI3X,KAAL,UACV,cAAC2X,EAAA,EAAIE,KAAL,CAAUC,SAAS,eAAnB,SAAkC,oBAAI5a,UAAU,OAAd,+BACtB,KACd,cAACya,EAAA,EAAI3X,KAAL,UACE,cAAC2X,EAAA,EAAIE,KAAL,CAAUC,SAAS,YAAnB,SAA+B,oBAAI5a,UAAU,OAAd,SAAsB2E,EAAW,oBAAsB,kBAExF,cAAC8V,EAAA,EAAI3X,KAAL,UAC+CH,IAAUkY,cAAcrW,GAInE,cAACiW,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAAnB,SAA4B,oBAAI5a,UAAU,OAAd,uBAH5B,cAACqE,EAAA,EAAD,UACE,eAACoW,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAASvX,UAAQ,EAApC,UAAqC,oBAAIrD,UAAU,OAAd,qBAArC,IAAuE,cAACoI,EAAA,EAAD,CAAOlG,QAAQ,UAAf,2BAM9ES,IAAUkY,cAAcrW,IAAiB,cAACsW,GAAA,EAAD,CAAmCvW,YAAWK,oBAAmBD,WAAUD,iBAAiB1E,UAAU,SAChJ,eAACoa,EAAA,EAAIW,QAAL,WACE,cAACX,EAAA,EAAIY,KAAL,CAAUJ,SAAS,YAAnB,SACE,cAACrS,EAAD,eACMmR,OAGR,cAACU,EAAA,EAAIY,KAAL,CAAUJ,SAAS,YAAnB,SACE,cAAC,EAAD,0CAAgClB,IAAhC,IAAiD/U,cAAUmI,EAAWpI,uBAEvEC,EAAW,cAACyV,EAAA,EAAIY,KAAL,CAAUJ,SAAS,eAAnB,SACV,cAAC,EAAD,eAA2BlB,OACf,KACd,cAACU,EAAA,EAAIY,KAAL,CAAUJ,SAAS,SAAnB,SACE,cAACtK,GAAD,eAAyBoJ,iBAMlCvB,GAAU,cAACvS,EAAA,EAAKpD,OAAN,UACR2V","file":"static/js/2.8891edfb.chunk.js","sourcesContent":["import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { useForceUpdate } from '../Util/ReactUtil';\r\nimport Artifact from './Artifact';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, assumeFull = false }) {\r\n  const forceUpdateHook = useForceUpdate()\r\n  useEffect(() => {\r\n    Artifact.getDataImport()?.then(forceUpdateHook)\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () =>\r\n      artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook)\r\n  }, [artifactId, forceUpdateHook])\r\n  const equipOnChar = useCallback(\r\n    (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey),\r\n    [artifactId],\r\n  )\r\n  if (!artifactId && !artifactObj) return null;\r\n  const editable = !artifactObj//dont allow edit for flex artifacts\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n  const { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge percent={currentEfficiency} valid={artifactValid} className=\"float-right\">\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location, \"Inventory\")}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.update(art);\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import React, { useCallback } from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, characterDispatch, artifacts }) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(build.finalStats)\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => characterDispatch?.({ artifactConditionals: ConditionalsUtil.setConditional(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) })\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    }), [history])\r\n  return <>\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Body>\r\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n          </Card.Body>\r\n          {newBuild ? <Card.Footer>\r\n            <Button onClick={() => {\r\n              if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\r\n              characterDispatch?.({ type: \"fromDB\" })\r\n            }}>Equip all artifacts to current character</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer> : (editable && <Card.Footer>\r\n            <Button onClick={() => {\r\n              if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n              Character.equipArtifacts(characterKey, Object.fromEntries(Artifact.getSlotKeys().map(sKey => [sKey, \"\"])))\r\n              characterDispatch?.({ type: \"fromDB\" })\r\n            }}>Unequip all artifacts</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer>)}\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {artifacts ?\r\n            Artifact.getSlotKeys().map(slotKey => {//from flex\r\n              const art = artifacts.find(art => art.slotKey === slotKey)\r\n              return art ? <Col sm={6} lg={4} key={slotKey} className=\"mb-2\">\r\n                <ArtifactCard artifactObj={art} />\r\n              </Col> : null\r\n            }) : Artifact.getSlotKeys().map(slotKey =>\r\n              build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n                <ArtifactCard artifactId={build.artifactIds[slotKey]} assumeFull={artifactsAssumeFull} onEdit={() => edit(build.artifactIds[slotKey])} />\r\n              </Col> : null\r\n            )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane({ editable, character, character: { characterKey, constellation }, characterDispatch, equippedBuild, newBuild }) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const elementKey = Character.getElementalKey(characterKey)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90) })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey) })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard({ editable, character, character: { characterKey, weapon = {} }, characterDispatch, equippedBuild, newBuild }) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") character.weapon.conditionalNum = 0\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  const weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  const conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  const conditional = Weapon.getWeaponConditional(weapon.key)\r\n  const conditionalNum = weapon.conditionalNum;\r\n  const conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards({ editable, character, characterDispatch, equippedBuild, newBuild }) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = []\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, \"specializedStatKey\") })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, \"specializedStatVal\") })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useState } from 'react';\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport { compareAgainstEquippedContext } from \"../CharacterDisplayCard\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  const { character, character: { characterKey, levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ character, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey }, newBuild, equippedBuild }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build?.finalStats} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n}\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ stats }) {\r\n  const sKey = \"crystalize_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey),\r\n    unit: Stat.getStatUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : {\r\n      text: Stat.getStatName(statKey),\r\n      variant: Stat.getStatVariant(statKey),\r\n      value: statVal,\r\n      fixed: Stat.fixedUnit(statKey),\r\n      unit: Stat.getStatUnit(statKey)\r\n    }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard({ character, character: { characterKey, constellation, talentLevelKeys = {}, autoInfused = false }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={() => editable && characterDispatch({ autoInfused: !character.autoInfused })} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension] + (talentKey === \"auto\" ? 1 : 0)).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  const talentStats = Character.getTalentStats(characterKey, talentKey, build.finalStats)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(build.finalStats)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(build.finalStats)\r\n        let fields = section.fields ?? []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(build.finalStats)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          const setConditional = (conditionalNum) => characterDispatch({ talentConditionals: ConditionalsUtil.setConditional(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) })\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, equippedBuild, newBuild }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ field, index, equippedBuild, newBuild }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(build.finalStats)\r\n  if (!field) return null\r\n\r\n  const fieldText = Character.getTalentFieldValue(field, \"text\", build.finalStats)\r\n  const fieldVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n\r\n  const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build.finalStats)\r\n  const formulaTextOverlay = fieldFormulaText ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>{fieldFormulaText}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger> : null\r\n\r\n  let fieldVal = null\r\n  if (field.value)\r\n    fieldVal = Character.getTalentFieldValue(field, \"value\", build.finalStats)\r\n  else if (field.formula)\r\n    fieldVal = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n\r\n  let fixedVal = field.fixed || 0\r\n  const unit = Character.getTalentFieldValue(field, \"unit\", build.finalStats)\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild.finalStats)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\n\r\nexport const compareAgainstEquippedContext = createContext()\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey) => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"hit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: {},\r\n  artifactConditionals: [],\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0] ?? \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n    conditionalNum: 0,//weapon conditional\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  autoInfused: false,\r\n  talentConditionals: [],\r\n  constellation: 0,\r\n})\r\n\r\nfunction characterReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey, {}) }\r\n    case \"statOverride\": {\r\n      const { statKey, value } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable, onClose, tabName }) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const [updateState, update] = useState({})\r\n  const forceUpdate = useCallback(() => update({}), [])\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey, {}) }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    const newBuild = propNewBuild && deepClone(propNewBuild)\r\n    if (newBuild?.finalStats) {\r\n      newBuild.finalStats.hitMode = character.hitMode;\r\n      newBuild.finalStats.reactionMode = character.reactionMode;\r\n    }\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const equippedBuild = useMemo(() => updateState && Character.calculateBuild(character), [character, updateState])\r\n\r\n  const HeaderIconDisplay = characterKey ? <span >\r\n    <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) commonPaneProps.artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          {editable ? <ButtonGroup>\r\n            <Dropdown as={ButtonGroup}>\r\n              <DropdownToggle as={Button}>\r\n                {HeaderIconDisplay}\r\n              </DropdownToggle>\r\n              <Dropdown.Menu as={CustomMenu}>\r\n                {Character.getAllCharacterKeys().map(charKey =>\r\n                  <Dropdown.Item key={charKey} onClick={() => setCharacterKey(charKey)}>\r\n                    <span >\r\n                      <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                      <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                    </span>\r\n                  </Dropdown.Item>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n              <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n            }>\r\n              <Dropdown.ItemText>\r\n                <span>Select Base Stat Template</span>\r\n              </Dropdown.ItemText>\r\n              {Character.getlevelKeys().map(lvlKey =>\r\n                <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n                  <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </ButtonGroup> : <span>{HeaderIconDisplay} {Character.getLevelString(character)}</span>}\r\n        </Col>\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifact</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {Boolean(characterKey) && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled><h5 className=\"mb-0\">Talents</h5> <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n          </Nav>\r\n          {Character.hasTalentPage(characterKey) && <DamageOptionsAndCalculation {...{ character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />}\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n"],"sourceRoot":""}