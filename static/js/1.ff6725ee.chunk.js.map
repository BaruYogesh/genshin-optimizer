{"version":3,"sources":["Components/CustomFormControl.tsx","Util/UIUtil.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Character/CharacterUtil.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","valueString","unit","Math","round","toFixed","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","database","_getCharKeys","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","faQuestionCircle","style","cursor","variant","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setLocation","editable","art","location","substats","rolls","Artifact","substatsValidation","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","getSlotName","Body","Title","stars","getStatName","stat","i","numRolls","length","efficiency","effOpacity","statName","opacity","has","valid","Footer","Toggle","size","Menu","Divider","lockArtifact","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","sheets","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","useForceUpdate","updateArt","followAnyArt","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","CharacterOverviewPane","weaponSheet","constellation","ascension","build","tlvl","elementKey","characterEle","weaponTypeKey","Img","cardImg","ElementalIcon","Image","Assets","weaponTypes","star","colored","getLevelString","tKey","getTalentOfKey","img","roundedCircle","Badge","position","bottom","right","constellationName","Array","keys","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","fields","statsToFields","ListGroup","WeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","Dropdown","as","ButtonGroup","allRarities","arr","Fragment","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","conditionalValues","setLevel","newLevel","clamp","ascensionMaxLevel","findIndex","ascenML","ambiguousLevel","setAscension","lowerAscension","substatKey","getSubStatKey","weaponDisplayMainVal","getMainStatValue","weaponDisplaySubVal","getSubStatValue","weaponPassiveName","passiveName","weaponBonusStats","document","InputGroup","Prepend","refineIndex","Text","Append","milestoneLevels","lv","lvlstr","description","passiveDescription","atk","DocumentDisplay","sections","editing","SetEditing","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","faSave","statKey","StatInput","prependEle","StatIconEle","getStatNamePretty","getStatValueWithOverride","percent","onValueChange","defaultValue","getBaseStatValue","StatDisplay","fixedUnit","getStatNameRaw","xl","CharacterTalentPane","props","skillDisplayProps","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electrocharged_hit","overloaded_hit","pyro_swirl_hit","swirlEleToDisplay","setele","DropdownButton","element","shattered_hit","information","OverlayTrigger","Tooltip","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","talentSheet","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","auto","skill","burst","infusionAura","characterReducer","action","_getChar","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","updateChar","possibleWeapons","weaponKey","ws1","ws2","talents","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","DamageOptionsAndCalculation","CharSelectDropdown","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","ElementalData","eleKey","DropdownItem","getFormulaTargetsDisplayHeading","startsWith","subkey","split","num","ConditionalSelector","conditional","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","evalIfFunc","maxStack","badge","whiteSpace","stateKey","condial","v","stack","faCheckSquare","faSquare","ConditionalDisplay","fieldClassName","Conditional","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","section","talentText","setEffectText","setEffectDesc","setStats","setNumStats","setStatsFields","setEffectDocument","cardbg","sectionKey","sectionValues","JSON","stringify","DisplayStatDiff","label","val","oldVal","oldText","diffText","isArray","Formula","invalid","characterHP","characterDEF","characterATK","weaponATK","labelVariant","hasOverride","restProps","pointerEvents","faUndo","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","s","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","reverse","printStat","Collapse","subKey","expand","formulaField","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.ff6725ee.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1) + \"%\"\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { database } from \"../Database/Database\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{database._getCharKeys().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }: { field: IFieldDisplay, index: number, equippedBuild?: ICalculatedStats, newBuild?: ICalculatedStats, className?: string }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => stats ? field?.canShow?.(stats) : false, [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as IArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{valueString(Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.getSlotName(slotKey) ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maxEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.lockArtifact(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { database } from '../../Database/Database';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from '../../Types/consts';\r\nimport { ICalculatedStats } from '../../Types/stats';\r\nimport { useForceUpdate, usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ sheets, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, sheets), [stats, sheets])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  if (!stats) return null\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ sheets, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Dropdown, Image, InputGroup, ListGroup, Row } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CustomFormControl from '../../Components/CustomFormControl';\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport ElementalIcon from \"../../Components/ElementalIcon\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport { StatIconEle } from \"../../Components/StatIcon\";\r\nimport { ascensionMaxLevel, milestoneLevels } from \"../../Data/CharacterData\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements, allRarities } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport { clamp } from \"../../Util/Util\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { constellation, level, ascension }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <h3>{characterSheet.name} {ElementalIcon[elementKey]} <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n          <h6><Stars stars={characterSheet.star} colored /></h6>\r\n          <h5>Level: {Character.getLevelString(character)}</h5>\r\n          <Row className=\"px-2 mb-2\">\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Col xs={4} className=\"p-1\" key={tKey}>\r\n                <Image src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} className=\"w-100 h-auto\" roundedCircle />\r\n                <h5 className=\"mb-0\"><Badge variant=\"info\" style={{ position: \"absolute\", bottom: \"0\", right: \"0\" }}><strong>{tlvl[tKey] + 1}</strong></Badge></h5>\r\n              </Col>)}\r\n          </Row>\r\n          <div className=\"text-center\"><h6>{characterSheet.constellationName}</h6></div>\r\n          <Row className=\"px-2\">\r\n            {[...Array(6).keys()].map(i =>\r\n              <Col xs={4} className=\"p-1\" key={i}>\r\n                <Image src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                  roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\nfunction WeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  if (!weaponSheets) return null\r\n\r\n  return <Dropdown as={ButtonGroup}>\r\n    <Dropdown.Toggle as={Button}>\r\n      {weaponSheet.name}\r\n    </Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {allRarities.map((stars, i, arr) => <React.Fragment key={stars}>\r\n        <Dropdown.ItemText key={\"star\" + stars}><Stars stars={stars} /></Dropdown.ItemText>\r\n        {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === stars).map(([key, weaponObj]: any) =>\r\n          <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n            {weaponObj.name}\r\n          </Dropdown.Item>\r\n        )}\r\n        {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n      </React.Fragment>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const { level, ascension } = weapon\r\n  const setStateWeapon = useCallback((key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    weapon[key] = value\r\n    characterDispatch({ weapon: weapon })\r\n  }, [character, weapon, characterDispatch])\r\n\r\n  const setLevel = useCallback((newLevel) => {\r\n    newLevel = clamp(newLevel, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => newLevel <= ascenML)\r\n    setStateWeapon(\"level\", newLevel)\r\n    setStateWeapon(\"ascension\", ascension)\r\n  }, [setStateWeapon])\r\n\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) setStateWeapon(\"ascension\", ascension + 1)\r\n    else setStateWeapon(\"ascension\", lowerAscension)\r\n  }, [setStateWeapon, ascension, level])\r\n\r\n  if (!build) return null\r\n\r\n  const substatKey = weaponSheet.getSubStatKey()\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n  const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          {editable ? <InputGroup >\r\n            <ButtonGroup as={InputGroup.Prepend}>\r\n              <WeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Refinement {weapon.refineIndex + 1}</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.ItemText>\r\n                    <span>Select Weapon Refinement</span>\r\n                  </Dropdown.ItemText>\r\n                  <Dropdown.Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <InputGroup.Append>\r\n              <CustomFormControl placeholder={undefined} onChange={setLevel} value={level} min={1} max={90} />\r\n            </InputGroup.Append>\r\n            <InputGroup.Append>\r\n              <Button disabled={!ambiguousLevel} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n            </InputGroup.Append>\r\n            <ButtonGroup as={InputGroup.Append}>\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Select Level</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    return <Dropdown.Item key={`${lv}/${as}`} onClick={() => { setStateWeapon(\"level\", lv); setStateWeapon(\"ascension\", as) }}>{lvlstr}</Dropdown.Item>\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n          </InputGroup> : <span>Weapon</span>}\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n          <small>{weaponSheet.description}</small>\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">{weaponSheet.name} Lv. {WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <Badge variant=\"info\">Refinement {weapon.refineIndex + 1}</Badge>}</h5>\r\n          <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n          <h6>{weaponPassiveName}</h6>\r\n          <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n          <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n          <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n          {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"plunging_dmg_\", \"plunging_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right`}>{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport { Anemo, Cryo, Electro, Geo, Hydro, Pyro } from \"../../Components/ElementalIcon\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { ascension, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Electro />+<Cryo /> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Electro />+<Hydro /> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Electro />+<Pyro /> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Pyro />+<Anemo /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Electro />+<Anemo /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Cryo />+<Anemo /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Hydro />+<Anemo /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Hydro />+<Cryo />+ <small className=\"text-physical\">Heavy Attack{information} </small> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Electro />/<Hydro />/<Pyro />/<Cryo />+<Geo /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Pyro />+<Geo /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Electro />+<Geo /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Cryo />+<Geo /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Hydro />+<Geo /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { elementKey, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={talentSheet?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{talentSheet?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, ButtonGroup, Dropdown, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { ascensionMaxLevel, milestoneLevels } from '../Data/CharacterData';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { database } from '../Database/Database';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys, CharacterKey } from '../Types/consts';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  level: 1,\r\n  ascension: 0,\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as any,\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\" as any,\r\n    level: 1,\r\n    ascension: 0,\r\n    refineIndex: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\": // for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...database._getChar(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: CharacterKey | \"\",\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey = \"\", character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key), [character.weapon.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...database._getChar(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && database.updateChar(character)\r\n  }, [character, editable])\r\n\r\n  //callback for when switching to a new character, and need to initiate a weapon.\r\n  useEffect(() => {\r\n    if (!character.weapon.key && weaponSheets && characterSheet) {\r\n      const possibleWeapons = WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey)\r\n      //sort the weapons to get the lowest rarity weapon.\r\n      const [weaponKey] = Object.entries(possibleWeapons).sort(([k1, ws1], [k2, ws2]) => ws1.rarity - ws2.rarity)[0]\r\n      character.weapon.key = weaponKey\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {//check for default value for traveler\r\n    if (characterSheet && \"talents\" in characterSheet.sheet && !character.elementKey)\r\n      characterDispatch({ elementKey: Object.keys(characterSheet.sheet.talents)[0] })\r\n  }, [character.elementKey, characterSheet])\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = database._getChar(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n  const sheets = useMemo(() => characterSheet && weaponSheet && artifactSheets && { characterSheet, weaponSheet, artifactSheets }, [characterSheet, weaponSheet, artifactSheets])\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = sheets && <DamageOptionsAndCalculation {...{ sheets, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && sheets && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane sheets={sheets} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane sheets={sheets} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, character: { elementKey = \"anemo\", level = 1, ascension = 0 }, editable, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{editable ? <InputGroup >\r\n    <ButtonGroup as={InputGroup.Prepend}>\r\n      <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button}>\r\n          {HeaderIconDisplay}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu as={CustomMenu}>\r\n          {[...new Set(allCharacterKeys)].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button} className={`text-${elementKey}`}>\r\n          <strong>{ElementalData[elementKey].name}</strong>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu >\r\n          {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n            <Dropdown.Item key={eleKey} className={`text-${eleKey}`} onClick={() => characterDispatch({ elementKey: eleKey })}><strong>{ElementalData[eleKey].name}</strong></Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>}\r\n    </ButtonGroup>\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n\r\n    <InputGroup.Append>\r\n      <CustomFormControl placeholder={undefined} className=\"h-100\" onChange={setLevel} value={level} min={1} max={90} disabled={!characterSheet} />\r\n    </InputGroup.Append>\r\n    <InputGroup.Append>\r\n      <Button disabled={!ambiguousLevel || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n    </InputGroup.Append>\r\n    <ButtonGroup as={InputGroup.Append}>\r\n      <Dropdown as={ButtonGroup} >\r\n        <Dropdown.Toggle as={Button} disabled={!characterSheet}>Select Level</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {milestoneLevels.map(([lv, as]) => {\r\n            const sameLevel = lv === ascensionMaxLevel[as]\r\n            const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n            return <DropdownItem key={`${lv}/${as}`} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</DropdownItem>\r\n          })}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </ButtonGroup>\r\n  </InputGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { Badge } from \"react-bootstrap\"\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\"\r\nimport { ArtifactSetKey, ElementKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport CharacterSheet from \"./CharacterSheet\"\r\n\r\nexport function getFormulaTargetsDisplayHeading(key: string, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }, eleKey: ElementKey = \"anemo\") {\r\n  if (key === \"basicKeys\") return \"Basic Stats\"\r\n  else if (key === \"genericAvgHit\") return \"Generic Optimization Values\"\r\n  else if (key === \"transReactions\") return \"Transformation Reaction\"\r\n  else if (key.startsWith(\"talentKey_\")) {\r\n    const subkey = key.split(\"talentKey_\")[1]\r\n    return (characterSheet?.getTalentOfKey(subkey, eleKey)?.name ?? subkey)\r\n  } else if (key.startsWith(\"weapon_\")) {\r\n    const subkey = key.split(\"weapon_\")[1]\r\n    return (weaponSheet?.name ?? subkey)\r\n  } else if (key.startsWith(\"artifact_\")) {\r\n    const [, setKey, num] = key.split('_')\r\n    return <span>{artifactSheets[setKey]?.name} <Badge variant=\"success\">{num}-Set</Badge></span>\r\n  }\r\n  return \"\"\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div className=\"w-100\">{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n  </>\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport { ArtifactSetKey } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ sheets, sheets: { characterSheet, weaponSheet }, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\" //can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey) ?? invalid\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\ntype StatInputInput = {\r\n  name: Displayable,\r\n  prependEle?: Displayable,\r\n  value: number,\r\n  placeholder: string,\r\n  defaultValue: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  className?: any,\r\n}\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent = false, disabled = false, ...restProps }: StatInputInput) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\";\r\nimport { Cryo, Hydro, Pyro } from \"../../Components/ElementalIcon\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat, { FormulaDisplay } from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements, ArtifactSetKey } from \"../../Types/consts\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span ><Pyro /> Pyro Infusion</span>,\r\n  \"cryo\": <span ><Cryo /> Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = null, infusionAura }, build, characterDispatch, className }: ReactionToggleProps) {\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={v(!reactionMode)}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={v(reactionMode === \"pyro_vaporize\")}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Hydro />+<Pyro /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={v(reactionMode === \"pyro_melt\")}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Cryo />+<Pyro /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={v(reactionMode === \"hydro_vaporize\")}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Pyro />+<Hydro /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={v(reactionMode === \"cryo_melt\")}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Pyro />+<Cryo /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={v(hitMode === \"avgHit\")}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={v(hitMode === \"hit\")}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={v(hitMode === \"critHit\")}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}{fieldUnit}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ sheets, sheets: { characterSheet, weaponSheet }, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay sheets={sheets} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}