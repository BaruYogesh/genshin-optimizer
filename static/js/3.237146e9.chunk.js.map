{"version":3,"sources":["Components/CustomFormControl.tsx","Components/FieldDisplay.tsx","ReactHooks/useCharacterReducer.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx","Character/StatInput.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","FieldDisplay","field","index","useContext","buildContext","newBuild","equippedBuild","compareBuild","build","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","toFixed","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","icon","faQuestionCircle","style","cursor","unit","Item","variant","useCharacterReducer","characterKey","database","DatabaseContext","action","setWeaponLocation","character","_getChar","statKey","bonusStats","characterBaseStats","updateChar","ConditionalSelector","conditional","conditionalValue","setConditional","name","stats","conditionalNum","conditionalStateKey","states","Object","values","text","evalIfFunc","maxStack","badge","Badge","Dropdown","Toggle","size","whiteSpace","Menu","onClick","entries","map","i","stateKey","condial","Fragment","Array","keys","v","stack","Button","faCheckSquare","faSquare","ConditionalDisplay","fieldClassName","characterDispatch","Conditional","resolve","conditionalStats","fields","conditionalFields","displayFields","statsToFields","condV","layeredAssignment","conditionalValues","deletePropPath","objClearEmpties","Card","bg","Header","ListGroup","DocumentDisplay","sections","section","talentText","length","SetEffectDisplay","setKey","setNumKey","sheet","usePromise","ArtifactSheet","get","setEffectText","setEffectDesc","setStats","setNumStats","setStatsFields","document","setEffectDocument","infusionVals","uncoloredEleIcons","pyro","cryo","InfusionAuraDropdown","characterSheet","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","characterEle","includes","s","val","StatIcon","hydro","HitModeToggle","hitMode","m","CalculationDisplay","sheets","displayStatKeys","getDisplayStatKeys","sectionKey","header","getFormulaTargetsDisplayHeading","Body","fieldIndex","isArray","FormulaCalculationField","fieldKeys","subFormulaKeys","Stat","getPrintableFormulaStatKeyList","GetDependencies","modifiers","reverse","Boolean","as","eventKey","printStat","Collapse","subKey","expand","EnemyEditor","bsProps","xs","xl","charBaseStats","href","rel","getStatValueWithBonus","getStatNameRaw","defaultValue","enemyLevel","onValueChange","allElements","eleKey","immunityStatKey","elementImmunity","prependEle","getStatName","percent","Formula","formulaField","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","DamageOptionsAndCalculation","weaponSheet","pill","element","EnemyResText","immune","resKey","content","StatInput","restProps","Prepend","Text","Append","pointerEvents","faUndo","StatDisplayComponent","statsDisplayKeys","cardbg","sectionValues","md","JSON","stringify","DisplayStatDiff","label","oldVal","hasBonus","oldText","diffText","valueText","StatDisplay","characterHP","characterDEF","characterATK","weaponATK","getStatUnit","fixedUnit","labelVariant","hasBonusStats"],"mappings":"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","file":"static/js/3.237146e9.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { buildContext } from \"../Build/Build\";\r\nimport Character from \"../Character/Character\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, className = \"p-2\" }: { field: IFieldDisplay, index: number, className?: string }) {\r\n  const { newBuild, equippedBuild, compareBuild } = useContext(buildContext)\r\n  const build = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => build ? field?.canShow?.(build) : false, [field, build])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", build)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      //compareAgainstEquipped\r\n      if (compareBuild && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareBuild, fixedVal, equippedBuild, field, build])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", build), [field, build])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", build), [field, build])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, build])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", build), [field, build])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { characterBaseStats } from \"../Util/StatUtil\";\r\n\r\ntype characterEquipWeapon = {\r\n  type: \"weapon\", id: string\r\n}\r\ntype characterReducerBonusStatsAction = {\r\n  type: \"bonusStats\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\nexport type characterReducerAction = characterEquipWeapon | characterReducerBonusStatsAction | Partial<ICachedCharacter>\r\n\r\nexport default function useCharacterReducer(characterKey: CharacterKey) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  return useCallback((action: characterReducerAction): void => {\r\n    if (!characterKey) return\r\n\r\n    if (\"type\" in action) switch (action.type) {\r\n      case \"weapon\":\r\n        database.setWeaponLocation(action.id, characterKey)\r\n        break\r\n      case \"bonusStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey, value } = action\r\n        const bonusStats = character.bonusStats\r\n        if (bonusStats[statKey] === value) return\r\n\r\n        bonusStats[statKey] = value\r\n        if ((characterBaseStats(character)[statKey] ?? 0) === value)\r\n          delete bonusStats[statKey]\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n    } else\r\n      database.updateChar({ ...database._getChar(characterKey)!, ...action })\r\n  }, [characterKey, database])\r\n\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled?: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useContext, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport { CharacterKey } from \"../../pipeline\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport useCharacterReducer from \"../ReactHooks/useCharacterReducer\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  characterKey: CharacterKey\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, characterKey, fieldClassName }: ConditionalDisplayProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} field={field} className={fieldClassName} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { useContext } from \"react\"\r\nimport { ListGroup } from \"react-bootstrap\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterKey: CharacterKey,\r\n}\r\nexport default function DocumentDisplay({ sections, characterKey }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div className=\"w-100\">{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} field={field} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay conditional={section.conditional} characterKey={characterKey} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport { CharacterKey } from \"../../../pipeline\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterKey: CharacterKey\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, characterKey }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} field={field} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {document ? <DocumentDisplay sections={document} characterKey={characterKey} /> : null}\r\n  </>\r\n}\r\n","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Badge, Button, Card, Col, Dropdown, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\";\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../../Components/StatIcon\";\r\nimport Formula from \"../../Formula\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport Stat, { FormulaDisplay } from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allElements, ArtifactSetKey, CharacterKey } from \"../../Types/consts\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { characterBaseStats } from \"../../Util/StatUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n  className?: string\r\n  disabled?: boolean\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", key: characterKey }, className, disabled = false }: InfusionAuraDropdownProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"} disabled={disabled}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICachedCharacter,\r\n  build: ICalculatedStats,\r\n  className: string\r\n  disabled?: boolean\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = null, infusionAura, key: characterKey }, build, className, disabled = false }: ReactionToggleProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={v(!reactionMode)} disabled={disabled}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={v(reactionMode === \"pyro_vaporize\")} disabled={disabled}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) {StatIcon.hydro}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={v(reactionMode === \"pyro_melt\")} disabled={disabled}>\r\n      <span className=\"text-melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={v(reactionMode === \"hydro_vaporize\")} disabled={disabled}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={v(reactionMode === \"cryo_melt\")} disabled={disabled}>\r\n      <span className=\"text-melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ characterKey, hitMode, className, disabled = false }: { characterKey: CharacterKey, hitMode: string, className?: string, disabled?: boolean }) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className} >\r\n    <ToggleButton value=\"avgHit\" variant={v(hitMode === \"avgHit\")} disabled={disabled} >Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={v(hitMode === \"hit\")} disabled={disabled} >Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={v(hitMode === \"critHit\")} disabled={disabled} >Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\n\r\nexport function EnemyEditor({ character, character: { key: characterKey, }, bsProps = { xs: 12, xl: 6 } }: { character: ICachedCharacter, bsProps?: object }) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const charBaseStats = characterBaseStats(character)\r\n  return <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><h6>Enemy Editor</h6></Card.Header>\r\n    <Card.Body className=\"p-2\">\r\n      <Button variant=\"warning\" size=\"sm\" className=\"mb-2\">\r\n        <a href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n      </Button >\r\n      <Row >\r\n        <Col className=\"mb-2\" {...bsProps}>\r\n          <StatInput\r\n            name={<b>Enemy Level</b>}\r\n            value={Character.getStatValueWithBonus(character, \"enemyLevel\")}\r\n            placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n            defaultValue={charBaseStats.enemyLevel}\r\n            onValueChange={value => characterDispatch({ type: \"bonusStats\", statKey: \"enemyLevel\", value })}\r\n          />\r\n        </Col>\r\n        {[\"physical\", ...allElements].map(eleKey => {\r\n          let statKey = `${eleKey}_enemyRes_`\r\n          let immunityStatKey = `${eleKey}_enemyImmunity`\r\n          let elementImmunity = Character.getStatValueWithBonus(character, immunityStatKey)\r\n          return <Col key={eleKey} className=\"mb-2\" {...bsProps}>\r\n            <StatInput\r\n              prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"bonusStats\", statKey: immunityStatKey, value: !elementImmunity })} className=\"text-darkcontent\">\r\n                <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n              </Button>}\r\n              name={<b>{Stat.getStatName(statKey)}</b>}\r\n              value={Character.getStatValueWithBonus(character, statKey)}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              defaultValue={charBaseStats[statKey]}\r\n              onValueChange={value => characterDispatch({ type: \"bonusStats\", statKey, value })}\r\n              disabled={elementImmunity}\r\n              percent\r\n            />\r\n          </Col>\r\n        })}\r\n        <Col className=\"mb-2\" {...bsProps}>\r\n          <StatInput\r\n            name={<b>{Stat.getStatName(\"enemyDEFRed_\")}</b>}\r\n            value={Character.getStatValueWithBonus(character, \"enemyDEFRed_\")}\r\n            placeholder={Stat.getStatNameRaw(\"enemyDEFRed_\")}\r\n            defaultValue={charBaseStats[\"enemyDEFRed_\"]}\r\n            onValueChange={value => characterDispatch({ type: \"bonusStats\", statKey: \"enemyDEFRed_\", value })}\r\n            percent\r\n          />\r\n        </Col>\r\n\r\n      </Row>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}{fieldUnit}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nexport const ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\" size=\"sm\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICachedCharacter,\r\n}\r\nexport default function DamageOptionsAndCalculation({ sheets, sheets: { characterSheet, weaponSheet }, character, character: { hitMode, key: characterKey } }: DamageOptionsAndCalculationProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n\r\n  return <div className=\"mb-2\" >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle characterKey={characterKey} hitMode={hitMode} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>Formulas {\"&\"} Calculations</Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <CalculationDisplay sheets={sheets} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Header><Row>\r\n          <Col><h4 className=\"mb-0\">\r\n            <Badge pill variant=\"success\" className=\"mr-2\">{Stat.getStatName(\"enemyLevel\")} <strong>{Character.getStatValueWithBonus(character, \"enemyLevel\")}</strong></Badge>\r\n            {[\"physical\", ...allElements].map(element => <span key={element} className=\"mr-2\"><EnemyResText element={element} character={character} /></span>)}\r\n            <span><h6 className={`d-inline`}>DEF Reduction {Character.getStatValueWithBonus(character, \"enemyDEFRed_\")}%</h6></span>\r\n          </h4></Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"enemyEditor\" />\r\n          </Col>\r\n        </Row></Card.Header>\r\n        <Accordion.Collapse eventKey=\"enemyEditor\">\r\n          <Card.Body className=\"p-2\">\r\n            <EnemyEditor character={character} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n\r\nexport function EnemyResText({ character, element }: { character: ICachedCharacter, element: string }) {\r\n  const immune = !!Character.getStatValueWithBonus(character, `${element}_enemyImmunity`)\r\n  const resKey = `${element}_enemyRes_`\r\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\r\n    <span >{uncoloredEleIcons[element]}RES <strong>{Character.getStatValueWithBonus(character, resKey)}%</strong></span>\r\n  return <h6 className={`text-${element} d-inline`}>{content}</h6>\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\ntype StatInputInput = {\r\n  name: Displayable,\r\n  prependEle?: Displayable,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  className?: any,\r\n}\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, ...restProps }: StatInputInput) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICachedCharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport { ArtifactSetKey } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  character: ICachedCharacter\r\n  statsDisplayKeys: any,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ sheets, sheets: { characterSheet, weaponSheet }, character, equippedBuild, newBuild, statsDisplayKeys, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Formula from \"../Formula\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat from \"../Stat\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { characterBaseStats } from \"../Util/StatUtil\"\r\nimport StatIcon from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", hasBonus = false }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n  const valueText = <>{oldText}{diffText}</>\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">\r\n      {hasBonus ? <strong>{valueText}</strong> : valueText}\r\n    </Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ character, equippedBuild, newBuild, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, label, hasBonus } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        oldVal = characterBaseStats(character)[statKey] as number | undefined\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      unit = Character.getTalentFieldValue(field, \"unit\", build, \"\")\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    return { val, oldVal, fixed, unit, label, hasBonus: Character.hasBonusStats(character, statKey) }\r\n  }, [character, equippedBuild, newBuild, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, label: label as any, hasBonus }} />\r\n}"],"sourceRoot":""}