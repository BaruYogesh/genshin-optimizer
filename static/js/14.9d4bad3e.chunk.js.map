{"version":3,"sources":["Components/StarDisplay.tsx","Components/CustomFormControl.tsx","Util/UIUtil.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/InfoComponent.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Util/BorrowManager.ts","Artifact/UploadDisplay.tsx","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","valueString","unit","Math","round","toFixed","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","database","_getCharKeys","sort","a","b","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","InfoComponent","pageKey","text","modalTitle","children","loadFromLocalStorage","showInfoModal","setshowInfoModal","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","faTimes","Body","fallback","animation","Footer","faQuestionCircle","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setLocation","editable","art","location","substats","rolls","Artifact","substatsValidation","id","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","border","md","src","slotIcons","thumbnail","slotNames","getStatName","stat","numRolls","length","efficiency","effOpacity","statName","style","opacity","has","valid","Toggle","Menu","Divider","placement","overlay","lockArtifact","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","process","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","Object","fromEntries","allArtifactRarities","rarity","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","relevantMainStatValues","filter","numStarsString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","entries","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","uploadDisplayReset","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","artifactDispatch","artifactSheets","deepClone","reset","update","newValue","newSheet","pick","prefer","setSubstat","isValid","validateFlexArtifact","errors","useMemo","editorArt","isDup","candidates","_getArts","candidate","upgraded","some","duplicated","candidateSubstat","dupId","checkDuplicate","errMsgs","Trans","i18nKey","InputGroup","Dropdown","as","Prepend","namesByMaxRarities","sets","Fragment","ItemText","DropdownButton","Append","title","Text","l","sKey","FormControl","readOnly","getStatNameWithPercent","mainStatK","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","saveArtifact","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","val","indexOf","ButtonGroup","action","updateArt","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterLocked","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","useForceUpdate","dbDirty","forceUpdate","effFilterSet","deleteArtifact","removeArt","editArtifact","current","scrollIntoView","behavior","cancelEditArtifact","pageview","followAnyArt","locationDisplay","lockedDisplay","allArtifacts","artifacts","filterKey","item","numUnequip","numUnlock","numLock","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","paginationCard","showingValue","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","faUserSlash","faTrash","ButtonToolbar","slicep","n"],"mappings":"oMAIMA,EAAW,kBAAM,cAAC,IAAD,CAAiBC,KAAMC,OACxCC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,eAAV,gBAAsE,sBAAMC,UAAWD,EAAU,aAAe,GAA1C,SACjFD,EAAQ,YAAIG,MAAMH,GAAOI,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACX,EAAD,GAAeW,MAAS,S,qGCO3D,SAASC,EAAT,GAAoJ,IAAvHC,EAAsH,EAAtHA,MAAOC,EAA+G,EAA/GA,SAA+G,IAArGR,iBAAqG,MAAzF,GAAyF,MAArFS,gBAAqF,aAAnEC,aAAmE,SAApDC,EAAoD,EAApDA,YAAoD,IAAvCC,kBAAuC,SAAnBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,IAAc,EACtIC,mBAAS,IAD6H,mBACzJC,EADyJ,KAClJC,EADkJ,KAE1JC,EAAaC,uBACjB,WACE,GAAIP,GAAwB,KAAVI,EAAc,OAAOR,OAASY,GAChD,GAAc,KAAVJ,EAAc,OAAOR,EAAS,GAClC,IAAMa,EAAYX,EAAQY,WAAaC,SACvCf,EAASa,EAAUL,MAErB,CAACR,EAAUQ,EAAON,EAAOE,IAI3B,OAFAY,qBAAU,wBAAMP,EAAQ,iBAACV,QAAD,IAACA,OAAD,EAACA,EAAOkB,kBAAR,QAAsB,MAAK,CAAClB,EAAOU,IAEpD,cAAC,IAAD,CACLV,MAAOS,EACPU,aAAW,eACX1B,UAAS,0BAAqBA,GAC9B2B,KAAK,SACLhB,YAAaA,EACbH,SAAU,SAACoB,GAAD,OAAYX,EAASW,EAAEC,OAAOtB,QACxCuB,OAAQZ,EACRT,SAAUA,EACVsB,UAAW,SAACH,GAAD,MAAsB,UAAVA,EAAEI,KAAmBd,KAC5CL,IAAKA,EACLC,IAAKA,M,iCCrCF,SAASmB,EAAY1B,EAAe2B,GACzC,OAAQA,GACN,IAAK,IAAK,OAAQC,KAAKC,MAAc,GAAR7B,GAAc,IAAI8B,QAAQ,GACvD,IAAK,MAAO,OAAO9B,EAAM8B,QAAQ,GAAK,IACtC,QAAS,OAAOF,KAAKC,MAAM7B,GAAO8B,QAAQ,IAJ9C,mC,iCCAA,uGAKMC,EAAgD,CACpDC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,KAGJ,SAASC,EAAiBC,GAC/B,OAAO,cAAC,IAAD,CAAiBvD,KAAM2C,EAASY,GAAwBlD,UAAU,SAAnBkD,GAEzC,SAASC,EAAT,GAA8D,IAAlCD,EAAiC,EAAjCA,QACjCE,EAAMC,YAAe,YAArBD,EACFzD,EAAOsD,EAAiBC,GAC9B,OAAO,iCAAOvD,EAAP,IAAcyD,EAAE,YAAD,OAAaF,S,iCCnBrC,+EAKA,SAASI,EAAT,GAAuD,IAAbC,EAAY,EAAZA,SACxC,OAAO,mCAAGC,IAASC,eAAeC,MAAM,SAACC,EAAGC,GAC1C,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EAEX,KACLzD,KAAI,SAAA0D,GAAY,OAAI,cAACC,EAAD,CAAiCD,aAAcA,EAAcN,SAAUA,GAApDM,QAE7C,SAASC,EAAT,GAAmD,IAA3BD,EAA0B,EAA1BA,aAAcN,EAAY,EAAZA,SAC9BQ,EAAiBC,YAAWC,IAAeC,IAAIL,GAAe,CAACA,IACrE,OAAKE,EACE,cAAC,IAASI,KAAV,CAAeC,QAAS,kBAAMb,EAASM,IAAvC,SACJE,EAAeM,OAFU,O,qKCTf,SAASC,EAAT,GAAwL,IAAD,QAA9JC,eAA8J,MAApJ,GAAoJ,MAAhJC,YAAgJ,MAAzI,GAAyI,MAArIC,kBAAqI,MAAxH,GAAwH,EAApHC,EAAoH,EAApHA,SAAoH,EAC1J3D,mBAAQ,oBAAC4D,YAAqB,oBAAtB,aAAC,EAAoCJ,UAArC,UADkJ,mBAC7LK,EAD6L,KAC9KC,EAD8K,OAE7K9D,mBAASd,MAAM6E,QAAQN,GAAQO,YAA0BP,GAAQA,GAAjFQ,EAF6L,oBAG9LC,EAAa,WAAO,IAAD,EACjBC,EAAS,UAAGP,YAAqB,oBAAxB,QAAwC,GACvDO,EAAUX,IAAW,EACrBY,YAAmB,YAAaD,GAChCL,GAAiB,IAEnB,OAAO,qCACL,cAAC,IAAD,CAAOO,KAAMR,EAAeS,OAAQ,kBAAMJ,KAAcK,KAAK,KAAKC,QAAQ,UAAUC,iBAAiB,iBAArG,SACE,eAAC,IAAD,CAAMC,GAAG,cAAcjB,KAAM,YAA7B,UACE,cAAC,IAAKkB,OAAN,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAKC,MAAN,UAAalB,MAEf,cAAC,IAAD,CAAKmB,GAAG,OAAR,SACE,cAAC,IAAD,CAAQL,QAAQ,SAASnB,QAAS,kBAAMa,KAAxC,SACE,cAAC,IAAD,CAAiBtF,KAAMkG,eAI/B,cAAC,IAAKC,KAAN,UACE,cAAC,WAAD,CAAUC,SAAU,qBAAI/F,UAAU,cAAd,wBAAuC,cAAC,IAAD,CAASgG,UAAU,SAAST,QAAQ,eAA/F,SACGb,MAGL,cAAC,IAAKuB,OAAN,UACE,cAAC,IAAD,CAAQV,QAAQ,SAASnB,QAAS,kBAAMa,KAAxC,SACE,kDAKR,cAAC,IAAD,CAAMQ,GAAG,eAAejB,KAAM,YAAoBxE,UAAU,OAA5D,SACE,cAAC,IAAK8F,KAAN,CAAW9F,UAAU,iBAArB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAK,gCAAQgF,MACb,cAAC,IAAD,CAAKY,GAAG,OAAR,SACE,cAAC,IAAD,CAAQN,KAAK,KAAKC,QAAQ,OAAOvF,UAAU,WAAWoE,QAAS,kBAAMS,GAAiB,IAAtF,SAA6F,cAAC,IAAD,CAAiBlF,KAAMuG,sB,ySClB1HC,EAAmB,IAAIC,IAAIC,KAElB,SAASC,EAAT,GAA2J,IAAD,cAAlIC,EAAkI,EAAlIA,WAAYC,EAAsH,EAAtHA,YAAaC,EAAyG,EAAzGA,OAAQC,EAAiG,EAAjGA,SAAiG,IAAvFC,+BAAuF,MAA7D,EAA6D,MAA1DC,iBAA0D,MAA9CT,EAA8C,IACpHpF,wBAASK,GAD2G,mBAChKyF,EADgK,KAC9IC,EAD8I,KAEvKtF,qBAAU,kBACR+E,EAAa/C,IAASuD,UAAUR,EAAYO,QAA0B1F,IACtE,CAACmF,EAAYO,IACf,IAAME,EAAQhD,YAAWiD,IAAc/C,IAAd,iBAAmBsC,QAAnB,IAAmBA,IAAgBD,EAAa/C,IAAS0D,QAAQX,QAAcnF,SAA/E,aAAkB,EAA0E+F,QAAS,CAACX,EAAaD,IACtIa,EAAc,SAACC,GAAD,OAAgC7D,IAAS8D,YAAYf,EAAac,IAEhFE,GAAYf,EACZgB,EAAG,OAAGhB,QAAH,IAAGA,IAAeK,EACrB9C,EAAiBC,YAAWC,IAAeC,IAAf,iBAAmBsD,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAKC,gBAAxB,QAAoC,IAAK,QAACD,QAAD,IAACA,OAAD,EAACA,EAAKC,WACjF,IAAKD,EAAK,OAAO,UACapG,IAA1BoG,EAAIE,SAAS,GAAGC,OAAqBC,IAASC,mBAAmBL,GAZkG,IAc/JM,EAA8DN,EAA9DM,GAAI5E,EAA0DsE,EAA1DtE,QAAS6E,GAAiDP,EAAjDO,SAAUC,GAAuCR,EAAvCQ,MAAOC,GAAgCT,EAAhCS,YAAaP,GAAmBF,EAAnBE,SAAUQ,GAASV,EAATU,KACvDC,GAAgBhG,KAAKtB,IAAIsB,KAAKrB,IAAI6F,EAAoC,EAAXoB,IAAeC,IAC1EI,GAAc,uBAAMpI,UAAWmI,KAAkBH,GAAQ,cAAgB,GAA3D,oBAAgEJ,IAASS,cAAcJ,GAAaF,GAAUI,WAA9G,QAAgI,GAAIG,IAAKC,YAAYN,OAhBF,GAiB1HL,IAASY,sBAAsBhB,EAAKZ,GAAzE6B,GAjB+J,GAiB/JA,kBAAmBC,GAjB4I,GAiB5IA,cACrBC,GAAkC,IAAlBD,GAChBE,GAAY,iBAAG7E,QAAH,IAAGA,OAAH,EAAGA,EAAgBM,YAAnB,QAA2B,YAC7C,OAAQ,eAAC,IAAD,CAAMrE,UAAU,QAAQ6I,OAAM,UAAKd,GAAL,QAAqBtC,GAAG,eAAejB,KAAM,YAA3E,UACN,cAAC,IAAKkB,OAAN,CAAa1F,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK4F,GAAI,EAAGkD,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAG,iBAAE/B,QAAF,IAAEA,OAAF,EAAEA,EAAOgC,UAAU9F,UAAnB,QAA+B,GAAIlD,UAAS,4BAAuB+H,GAAvB,YAA2CkB,WAAS,MAE5G,eAAC,IAAD,CAAKjJ,UAAU,OAAf,UACE,6BAAI,6CAAIgH,QAAJ,IAAIA,OAAJ,EAAIA,EAAOkC,UAAUhG,UAArB,QAAiC,yBACrC,gCAAK,cAAC,IAAD,CAAkBA,QAASA,IAAhC,YAAiD8E,eAIvD,eAAC,IAAKlC,KAAN,CAAW9F,UAAU,0BAArB,UACE,eAAC,IAAK2F,MAAN,WACE,+CAAMqB,QAAN,IAAMA,OAAN,EAAMA,EAAO3C,YAAb,QAAqB,iBACrB,uBAAOrE,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOF,MAAOiI,UAEjD,oBAAI/H,UAAU,OAAd,SACE,8BAAIsI,IAAKa,YAAYlB,IAArB,IAAoCG,QAEtC,cAAC,IAAD,CAAKpI,UAAU,OAAf,SACG0H,GAASvH,KAAI,SAACiJ,EAAe/I,GAAO,IAAD,MAClC,IAAK+I,EAAK7I,MAAO,OAAO,KACxB,IAAI8I,EAAQ,oBAAGD,EAAKzB,aAAR,aAAG,EAAY2B,cAAf,QAAyB,EACjCC,EAAU,UAAGH,EAAKG,kBAAR,QAAsB,EAChCC,EAAa,GAAmB,GAAbD,EACnBE,EAAWnB,IAAKa,YAAYC,EAAKpH,KACrC,OAAQ,eAAC,IAAD,CAAa4D,GAAI,GAAjB,UACN,cAAC,IAAD,CAAOL,QAAS8D,EAAQ,UAAMA,EAAN,QAAuB,SAAUrJ,UAAU,mBAAnE,SAAsF,4BAAIqJ,GAAsB,QAAiB,IACjI,uBAAMrJ,UAAS,eAAUqJ,EAAV,QAAf,UAA0CI,EAA1C,WAAwDxH,YAAYmH,EAAK7I,MAAO+H,IAAKC,YAAYa,EAAKpH,OAAtG,OAA8GsG,IAAKC,YAAYa,EAAKpH,SACpI,sBAAMhC,UAAU,cAAc0J,MAAO,CAAEC,QAASH,GAAhD,SAA+DJ,EAAKpH,KAAO4E,EAAUgD,IAAIR,EAAKpH,KAAOC,YAAYsH,EAAY,OAAS,QAHtHlJ,QAOtB,eAAC,IAAD,CAAKL,UAAU,UAAf,UACE,eAAC,IAAD,+BAAsB,cAAC,IAAD,CAAcO,MAAOkI,GAAmBoB,MAAOlB,GAAqB3I,UAAW,mBACpGyI,KAAsBC,IAAiB,eAAC,IAAD,CAAK1I,UAAU,aAAf,0BAAyC,cAAC,IAAD,CAAcO,MAAOmI,GAAemB,MAAOlB,cAIhI,cAAC,IAAK1C,OAAN,CAAajG,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGuH,EAAW,cAAC,IAAD,CAAK3B,GAAG,OAAR,SACV,eAAC,IAAD,WACE,cAAC,IAASkE,OAAV,CAAiBxE,KAAK,KAAKtF,UAAU,YAArC,SAAkD4I,KAClD,eAAC,IAASmB,KAAV,WACE,cAAC,IAAS5F,KAAV,CAAeC,QAAS,kBAAMgD,EAAY,KAA1C,uBACA,cAAC,IAAS4C,QAAV,IACA,cAAC,IAAD,CAAgCzG,SAAU6D,YAGvC,cAAC,IAAD,CAAKxB,GAAG,OAAR,SAAe,4BAAIgD,OAC5B,cAAC,IAAD,CAAKhD,GAAG,OAAR,SACE,eAAC,IAAD,WACG2B,EAAW,cAAC,IAAD,CAAgB0C,UAAU,MACpCC,QAAS,cAAC,IAAD,CAASpC,GAAG,oBAAZ,6FADC,SAEV,sBAAM9H,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQsF,KAAK,KAAKlB,QAAS,kBAAMZ,IAAS2G,aAAarC,GAAKI,KAA5D,SACE,cAAC,IAAD,CAAiBvI,KAAMuI,GAAOkC,IAASC,IAAYrK,UAAU,gBAG/C,OACjByG,GAAU,cAAC,IAAD,CAAQlB,QAAQ,OAAOD,KAAK,KACvClB,QAASqC,EADE,SAEX,cAAC,IAAD,CAAiB9G,KAAM2K,IAAQtK,UAAU,cAExC0G,GAAY,cAAC,IAAD,CAAQnB,QAAQ,SAASD,KAAK,KAC3ClB,QAASsC,EADI,SAEb,cAAC,IAAD,CAAiB/G,KAAM4K,IAAYvK,UAAU,2B,8FCpH5C,SAASwK,EAAT,GAA+C,IAAvBjK,EAAsB,EAAtBA,MAAOsJ,EAAe,EAAfA,MAAe,EACjB,kBAAVtJ,EAC9B,CAAC,GAAD,OAAI4B,KAAKsI,MAAc,IAARlK,GAAgB,EAA/B,QAAwCA,EAAM8B,QAAQ,GAAK,KAAO,CAAC,YAAa9B,GAFvB,mBACtDmK,EADsD,KAC1ClG,EAD0C,KAI3D,OADKqF,IAAOa,EAAa,UAClB,cAAC,IAAD,CAAOnF,QAASmF,EAAY1K,UAA0B,cAAf0K,EAA6B,GAAK,mBAAzE,SAA8FlG,M,uiBCNxF,OAA0B,0CCA1B,OAA0B,oC,kBCA5BmG,GAAb,WAKE,WAAYC,EAA0BC,GAA0C,0BAJhFC,KAAqD,GAI0B,KAH/EF,UAG+E,OAF/EC,YAE+E,EAC7EE,KAAKH,KAAOA,EACZG,KAAKF,OAASA,EAPlB,kFAiBE,WAAgB7I,EAAagJ,GAA7B,iBAAArH,EAAA,6DACOoH,KAAKD,KAAK9I,KACb+I,KAAKD,KAAK9I,GAAO,CAAEzB,MAAOwK,KAAKH,KAAK5I,GAAMiJ,SAAU,KAGhDC,EAAMH,KAAKD,KAAK9I,IAClBiJ,UAAY,EANlB,SAOuBD,EAASE,EAAI3K,OAPpC,cAOQ4K,EAPR,OAQED,EAAID,UAAY,EACXC,EAAID,kBAEAF,KAAKD,KAAK9I,GACjB+I,KAAKF,OAAO7I,EAAKkJ,EAAI3K,QAZzB,kBAcS4K,GAdT,gDAjBF,gE,QCkBMC,GAAY,CAAEC,EAAG,IAAKC,EAAG,IAAK1H,EAAG,IAGjC2H,GAAa,IAAIZ,GAAJ,uCAAkB,WAAOa,GAAP,iBAAA7H,EAAA,6DAC7B8H,EAAYC,6BACZC,EAAW1L,MAJiD,GAI9B2L,KAAK,GAAGzL,IAA3B,uCAA+B,WAAMC,GAAN,eAAAuD,EAAA,6DACxCkI,EAASC,wBAAa,CAC1BC,aAAcC,QAAQC,QAFsB,SAKxCJ,EAAOK,OALiC,uBAMxCL,EAAOM,aAAaX,GANoB,uBAOxCK,EAAOO,WAAWZ,GAPsB,OAQ9CC,EAAUY,UAAUR,GAR0B,2CAA/B,uDAFkB,SAa7BS,QAAQC,IAAIZ,GAbiB,gCAc5BF,GAd4B,2CAAlB,uDAehB,SAACe,EAAWjM,GACbA,EAAMkM,MAAK,SAAAlM,GAAK,OAAIA,EAAMmM,kBAGb,SAASC,GAAT,GAA4K,IAAD,MAAlJ1L,EAAkJ,EAAlJA,SAAU2L,EAAwI,EAAxIA,SAAUC,EAA8H,EAA9HA,iBAA8H,EACtJ9L,oBAAS,GAD6I,mBACjL+L,EADiL,KACtKC,EADsK,OAGpIC,qBAAWC,GAAc,CAAEC,UAAW,GAAIC,YAAa,KAH6E,0BAG/KD,EAH+K,EAG/KA,UAAWC,EAHoK,EAGpKA,YAAeC,EAHqJ,KAIlLC,EAAiBH,EAAU,GAC3BI,EAAmBH,EAAY,GAE/BI,EAAqBvJ,YAAU,OAACsJ,QAAD,IAACA,OAAD,EAACA,EAAkBE,SAAU,QAACF,QAAD,IAACA,OAAD,EAACA,EAAkBE,WAC/EC,EAAmBzJ,YAAU,OAACsJ,QAAD,IAACA,OAAD,EAACA,EAAkBnC,OAAQ,QAACmC,QAAD,IAACA,OAAD,EAACA,EAAkBnC,SAE3EuC,EAAYR,EAAU5D,OAAS6D,EAAY7D,OAE3CqE,EAAK,iBAAGN,QAAH,IAAGA,OAAH,EAAGA,EAAgBG,gBAAnB,QAA+BD,EAZ8I,SAa5JF,QAb4J,IAa5JA,IAAkB,GAAtCO,EAbgL,EAahLA,SAAUC,EAbsK,EAatKA,MACZC,EAAQ,2BAAGT,QAAH,IAAGA,OAAH,EAAGA,EAAgBS,gBAAnB,eAA+BR,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAkBQ,gBAAjD,QAA6D,iDAE3EtM,qBAAU,YACHqL,GAAoBe,GACvB3M,EAAS2M,KACV,CAACf,EAAkBe,EAAU3M,IAEhCO,qBAAU,WACR,IAAMuM,EAAgB5L,KAAKrB,IA3CmB,GA2CKoM,EAAU5D,OA3CtC,EA2CkE6D,EAAY7D,QAC/F0E,EAAoBD,IAAkBZ,EAAY,GAAGhC,OAC3DgC,EAAYc,MAAM,EAAGF,GAAeG,QAAQC,IACxCH,GACFZ,EAAc,CAAEzL,KAAM,iBACvB,CAACuL,EAAU5D,OAAQ6D,IAEtB3L,qBAAU,WACJiM,GACFL,EAAc,aAAEzL,KAAM,aAAgB8L,MACvC,CAACA,EAAkBL,IAEtB,IAAMgB,EAAgBjN,uBAAY,kBAAMiM,EAAc,CAAEzL,KAAM,UAAU,CAACyL,IACnEiB,EAAclN,uBAAY,SAACmN,GAAD,OAC9BlB,EAAc,CAAEzL,KAAM,SAAU2M,MAAO,YAAIA,GAAOnO,KAAI,SAAAoO,GAAI,MAAK,CAAEA,OAAMT,SAAUS,EAAKlK,aAAa,CAAC+I,IAChGoB,EAAarN,uBAAY,kBAAMiM,EAAc,CAAEzL,KAAM,YAAY,CAACyL,IAExE5L,qBAAU,WACR,IAAMiN,EAAY,SAAC7M,GAAD,OAAYyM,EAAYzM,EAAE8M,cAAcJ,QAG1D,OAFAK,OAAOC,iBAAiB,QAASH,GACzB,OAAR7B,QAAQ,IAARA,KAAWwB,GACJ,kBACLO,OAAOE,oBAAoB,QAASJ,MACrC,CAAC7B,EAAUwB,EAAeC,IAE7B,IAAMS,EAAMnB,GAAS,sBAAK5E,IAAK4E,EAAO3N,UAAU,eAAe+O,IAAI,4CACnE,OAAQ,gBAACC,EAAA,EAAD,WACN,eAACC,GAAD,CAAyBnC,YAAWoC,KAAM,kBAAMnC,GAAa,MAC7D,eAACoC,EAAA,EAAD,CAAKvJ,GAAI,GAAI5F,UAAU,OAAvB,SACE,gBAACgP,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,UACE,qBAAInP,UAAU,OAAd,iDAEF,eAACmP,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,eAACwJ,EAAA,EAAD,CAAQ7J,QAAQ,OAAOD,KAAK,KAAKlB,QAAS,WACvD2I,GAAa,GACbsC,IAAQC,UAAU,4BAFL,iCAMlB5B,EAAY,GAAK,eAACyB,EAAA,EAAD,CAAKvJ,GAAI,GAAT,SAChB,eAAC2J,EAAA,EAAD,CAAM9J,GAAG,eAAejB,KAAM,YAAoBxE,UAAU,OAA5D,SACE,gBAACgP,EAAA,EAAD,WACE,gBAACG,EAAA,EAAD,CAAKnP,UAAU,WAAf,wCAAqD,6BAAI0N,KAAe8B,KAExE,eAACL,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,eAACwJ,EAAA,EAAD,CAAQ9J,KAAK,KAAKC,QAAQ,SAASnB,QAASoK,EAA5C,uCAIrB,eAACW,EAAA,EAAD,CAAKvJ,GAAI,EAAG6J,GAAI9B,EAAQ,EAAI,EAA5B,SAAgCmB,IAChC,gBAACK,EAAA,EAAD,CAAKvJ,GAAI,GAAI6J,GAAI9B,EAAQ,EAAI,GAA7B,WACIN,GAAkBC,GAClB,uBAAKtN,UAAU,OAAf,UACE,qBAAIA,UAAU,OAAd,uCACA,eAAC0P,EAAA,EAAD,CAAaC,UAAQ,EAACC,IAAK,SAE/B,eAACC,GAAA,EAAKC,KAAN,CACEnO,KAAK,OACL3B,UAAU,OACV+P,MAAOjC,EACPtN,SAAU,SAAAoB,GACRyM,EAAYzM,EAAEC,OAAOyM,OACrB1M,EAAEC,OAAOtB,MAAQ,MAEnByP,OAAO,UACPC,QAAM,EACNC,UAAQ,IAETrC,GAAS,uBAAK7N,UAAU,OAAf,UACR,+BAAM6N,EAAM3K,UACZ,+BAAM2K,EAAM5F,cACZ,+BAAM4F,EAAMzF,cACZ,+BAAMyF,EAAM9F,WACZ,+BAAM8F,EAAM7F,QACZ,+BAAM6F,EAAMnG,WACZ,+BAAMmG,EAAM1G,YAEbgJ,SAASxC,IAAU,eAACkC,GAAA,EAAKO,MAAN,CAAYpQ,UAAU,OAAtB,+EAI1B,SAASiP,GAAT,GAA2F,IAA9DnC,EAA6D,EAA7DA,UAAWoC,EAAkD,EAAlDA,KACtC,OAAO,eAACmB,GAAA,EAAD,CAAOjL,KAAM0H,EAAWzH,OAAQ6J,EAAM5J,KAAK,KAAKC,QAAQ,UAAUC,iBAAiB,iBAAnF,SACL,gBAAC+J,EAAA,EAAD,CAAM9J,GAAG,cAAcjB,KAAM,YAA7B,UACE,eAAC+K,EAAA,EAAK7J,OAAN,UACE,gBAACsJ,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,UAAK,eAACI,EAAA,EAAK5J,MAAN,sDACL,eAACwJ,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SACE,eAACwJ,EAAA,EAAD,CAAQ7J,QAAQ,SAASnB,QAAS8K,EAAlC,SACE,eAAC,IAAD,CAAiBvP,KAAMkG,eAI/B,gBAAC0J,EAAA,EAAKzJ,KAAN,WACE,qBAAI9F,UAAU,eAAd,gFACA,gBAACgP,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,CAAKvJ,GAAI,EAAGkD,GAAI,EAAhB,SACE,sBAAKiG,IAAI,gCAAgChG,IAAKuH,GAAStQ,UAAU,mBAEnE,gBAACmP,EAAA,EAAD,CAAKvJ,GAAI,GAAIkD,GAAI,EAAjB,UACE,sJACA,gEACA,0JAA2H,mFAC3H,kDACA,oFAAqD,6DAArD,4FACA,qDACA,8FAA+D,oBAAGyH,KAAK,uBAAuB1O,OAAO,SAAS2O,IAAI,aAAnD,qBAA/D,mGACA,qEACA,6JAGJ,gBAACxB,EAAA,EAAD,WACE,gBAACG,EAAA,EAAD,WACE,yEACA,2IACA,oBAAGnP,UAAU,OAAb,uHACA,uFAAwD,+CAAxD,oCACA,4LAA6J,iDAA7J,UAGF,gBAACmP,EAAA,EAAD,CAAKvJ,GAAI,GAAT,UACE,yDACA,0PAA2N,mDAA3N,sCACA,sBAAKmJ,IAAI,oCAAoChG,IAAK0H,GAAezQ,UAAU,yBAIjF,eAACuP,EAAA,EAAKtJ,OAAN,UACE,eAACmJ,EAAA,EAAD,CAAQ7J,QAAQ,SAASnB,QAAS8K,EAAlC,SACE,mDAOV,IAAMjC,GAAe,SAACyD,EAAcC,GAClC,OAAQA,EAAQhP,MACd,IAAK,SAAU,MAAO,CAAEuL,UAAWwD,EAAMxD,UAAWC,YAAY,GAAD,mBAAMuD,EAAMvD,aAAZ,YAA4BwD,EAAQrC,SACnG,IAAK,aACH,MAAO,CAAEpB,UAAWwD,EAAMxD,UAAWC,YAAY,YAAKuD,EAAMvD,cAC9D,IAAK,YACH,OAAIuD,EAAMvD,YAAY,GAAGoB,OAASoC,EAAQpC,KACjC,CAAErB,UAAU,GAAD,mBAAMwD,EAAMxD,WAAZ,CAAuByD,EAAQxF,SAASgC,YAAauD,EAAMvD,YAAYc,MAAM,IAC1FyC,EACT,IAAK,MAAO,MAAO,CAAExD,UAAWwD,EAAMxD,UAAUe,MAAM,GAAId,YAAauD,EAAMvD,aAC7E,IAAK,QAAS,MAAO,CAAED,UAAW,GAAIC,YAAa,MAIvD,SAASgB,GAAayC,GACpB,IAAIA,EAAMzF,OAAV,CAD6C,IAGrCoD,EAAmBqC,EAAnBrC,KAAMT,EAAa8C,EAAb9C,SACd8C,EAAMpD,SAAWqD,GAAUtC,GAC3BqC,EAAMzF,OAASyF,EAAMpD,SAASf,KAAf,uCAAoB,WAAMe,GAAN,yBAAA7J,EAAA,sEACZsD,IAAc6J,SADF,cAC3BC,EAD2B,gBAETC,GAAIxD,GAFK,cAE3ByD,EAF2B,SAIPC,GACxBH,EAAQE,EAAUE,SAClBC,GAAaH,EAAUI,iBAAkBN,GACzCO,GAAcL,EAAUM,YACxBC,GAAcP,EAAUQ,cACxBC,GAAkBT,EAAUM,YAC5BI,GAAoBV,EAAUM,aAVC,mBAI1B3D,EAJ0B,KAIhBC,EAJgB,uBAa1B,CAAEU,OAAMpD,OAAQ,CAAE2C,WAAUN,WAAUI,WAAUC,WAbtB,2CAApB,wDAiBjB,I,8EAAMgD,GAAY,SAACtC,GAAD,OAAiC,IAAIjC,SAAQ,SAAAsF,GAC7D,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,UAAY,gBAAGlQ,EAAH,EAAGA,OAAH,OACjB+P,EAAQ/P,EAAQsJ,SAClB0G,EAAOG,cAAczD,OAEjB0D,GAAiB,SAACC,GAAD,OAAyC,IAAI5F,SAAQ,SAAAsF,GAC1E,IAAM9C,EAAM,IAAIqD,MAChBrD,EAAIsD,OAAS,gBAAGvQ,EAAH,EAAGA,OAAH,OACX+P,EAGJ,SAA0BjE,GACxB,IAAM0E,EAASC,SAASC,cAAc,UAAWC,EAAUH,EAAOI,WAAW,MAI7E,OAHAJ,EAAOK,MAAQ/E,EAAM+E,MACrBL,EAAOM,OAAShF,EAAMgF,OACtBH,EAAQI,UAAUjF,EAAO,EAAG,EAAGA,EAAM+E,MAAO/E,EAAMgF,QAC3CH,EAAQK,aAAa,EAAG,EAAGlF,EAAM+E,MAAO/E,EAAMgF,QAR3CG,CAAiBjR,KAC3BiN,EAAI/F,IAAMmJ,MASZ,SAASa,GAAkBC,GAEzB,IAAMX,EAASC,SAASC,cAAc,UAMtC,OALAF,EAAOK,MAAQM,EAAUN,MACzBL,EAAOM,OAASK,EAAUL,OAG1BN,EAAOI,WAAW,MAAOQ,aAAaD,EAAW,EAAG,GAC7CX,E,SAGMrB,G,iFAAf,WAAmBxD,GAAnB,mCAAA7J,EAAA,sEAC0BsO,GAAezE,GADzC,cACQwF,EADR,OAGQN,EAAQM,EAAUN,MAAOQ,EAAa/Q,KAAKsI,MAAMuI,EAAUL,OAAS,GACpEQ,EAAa,CAAEC,UAAW,CAAEC,IAAKH,EAAYI,KAAM,EAAGZ,QAAOC,OAAQO,IAErEK,EAAS,CACbC,GAAeC,GAAST,EAAW,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,IAAK,KAAM,CAAEU,KAAM,KAAMC,OAAQ,SAC3FH,GAAeC,GAAST,EAAW,CAAC,GAAI,GAAI,IAAK,CAAC,IAAK,IAAK,KAAM,CAAEW,OAAQ,QAAUR,GACtFK,GAAeC,GAAST,EAAW,CAAC,GAAI,IAAK,IAAK,CAAC,IAAK,IAAK,KAAM,CAAEU,KAAM,KAAMC,OAAQ,QAAUR,IAG/FhC,EAAWyC,GAAcZ,EAAUlI,KAAMkI,EAAUN,MAAOM,EAAUL,QAZ5E,SAa6DrG,QAAQuH,IAAIN,GAbzE,0CAaShC,EAbT,KAaqBE,EAbrB,KAamCJ,EAbnC,uBAcS,CAAEE,aAAYE,eAAcJ,mBAAkBF,aAdvD,6C,+BAgBeqC,G,iFAAf,WAA8BR,GAA9B,+BAAArP,EAAA,6DAAoDmQ,EAApD,oCAAkF1S,EAC1EiR,EAASU,GAAkBC,GADnC,SAEoBzH,GAAWwI,OAAO,MAAlB,uCAAyB,WAAOtI,GAAP,SAAA9H,EAAA,sEAC5B8H,EAD4B,8BACjBuI,OAAO,YAAa3B,EAAQyB,GADX,mFAAzB,uDAFpB,cAEQG,EAFR,yBAISA,EAAInJ,KAAKoJ,MAAM/T,KAAI,SAAAgU,GAAI,OAAIA,EAAK3P,SAJzC,4C,sBAOO,SAAS0M,GAAiBH,EAAmDI,EAAuBiD,EAAkCC,EAAwB3M,EAAqB4M,EAAgCC,GACxN,IADqU,EAC/TC,EAAc,YAAO,IAAIpO,IAAJ,sBAA4BgO,GAA5B,CAAyC,aAAc,mBAE9EK,GAAa,EAAGC,EAA6B,CAAC,CAChD5M,GAAI,GACJX,OAAQ,aAAcY,SAAU,EAAGC,MAAO,EAAG9E,QAAS,SAAU+E,YAAa,KAAMP,SAAU,GAC7FD,SAAU,GAAIS,MAAM,IAIhByM,EAAoCC,OAAOC,YAAYC,IAAoB3U,KAAI,SAAA4U,GACnF,IAAIC,EAAQ,EACRZ,EAAY9O,OAEd0P,GADc,YAAIZ,GAAaa,QAAO,SAACC,EAAOC,GAAR,OAAgBD,GAASnE,EAAOoE,GAAKJ,OAAOK,SAASL,GAAU,EAAI,KAAI,GAC5FX,EAAY9O,MAE3BoC,EAAS4B,SAGX0L,GAFctN,EAASuN,QAAO,SAACC,EAAOG,GAAR,OAC5BH,GAAStN,IAAS0N,gBAAgBD,EAAQrT,IAAmBqT,EAAQ9U,MAAOwU,GAAQzL,OAAS,EAAI,KAAI,GACtF5B,EAAS4B,OAAS,GAErC,MAAO,CAACyL,EAAQC,OArBmT,cAyB/SO,KAzB+S,IAyBrU,2BAAmC,CAAC,IAAD,EAAxBrS,EAAwB,sBACP0E,IAAS4N,cAActS,IADhB,qBAO/B,IAP+B,IACtB+E,EADsB,QAEzBwN,GAAiBpB,EAASzK,IAAI1G,GAAW,EAAI,IAAMoR,EAAa1K,IAAI3B,GAAe,EAAI,GACvFyN,EAAyBnB,EAC5BoB,QAAO,SAAApV,GAAK,MAAmB,MAAfA,EAAM2B,MAAkD,MAAlCoG,IAAKC,YAAYN,MACvD9H,KAAI,SAAAI,GAAK,OAAIA,EAAM8H,iBALS,uCAOnBuN,EAPmB,KAOHC,EAPG,KAQvB9N,EAAWxG,SAASqU,GACpBE,EAAUtB,EAAemB,QAAO,SAAAxO,GAAM,OAAI4J,EAAO5J,GAAQ4N,OAAOK,SAASrN,MACzEgO,EAAcN,EAAgBI,EAEpC,GAAIE,EAAc,EAAItB,EAAW,iBAZJ,oBAcMiB,GAdN,2BAclBM,EAdkB,QAerBC,EAASrO,IAAS2M,eAAexM,EAAUE,GAC3CD,EAAQ7F,KAAKtB,IAAI,EAAGoV,EAAOC,WAAU,SAAAlO,GAAK,OAAIA,GAASgO,MACvD5N,EAAc6N,EAAOjO,GACrBmO,EAAmBJ,GAAe3N,IAAgB4N,EAAuB,EAAI,GAlBxD,cAoBNF,GApBM,IAoB3B,2BAA8B,CAAC,IAApB3O,EAAmB,QACtB6N,EAAQmB,GAAoB/B,EAAYxK,IAAIzC,GAAU,EAAI,GAC5D6N,GAASP,IACPO,EAAQP,IAAWC,EAAgB,IACvCD,EAAYO,EACZN,EAAc0B,KAAK,CACjBtO,GAAI,GAAIX,SAAQY,WAAUC,QAAO9E,UAAS+E,cAAaP,SAAU,GAAID,SAAU,GAAIS,MAAM,MA1BpE,gCAc7B,2BAA4D,IAd/B,8BA+B7B,GAAI6N,GAAetB,EAAW,CAC5B,IAD4B,gBAEPqB,GAFO,IAE5B,2BAA8B,CAAC,IAApB3O,EAAmB,QACtB6N,EAAQe,GAAe3B,EAAYxK,IAAIzC,GAAU,EAAI,GAEvD6N,EAAQP,IAAWC,EAAgB,IACvCD,EAAYO,EACZN,EAAc0B,KAAK,CACjBtO,GAAI,GAAIX,SAAQY,WAAUC,MAPhB,EAOuB9E,UAAS+E,cAAaP,SAAU,GAAID,SAAU,GAAIS,MAAM,KARjE,iCAxBhC,MAAsD0M,OAAOyB,QAAQ1B,GAArE,eAAmF,KANrF,2BAA4D,IAD3B,gCAzBkS,8BAwErU,IAAM9G,EAAQ,GACRyI,EAAS,CACbnP,OAAQ,IAAIf,IAAO2B,SAAU,IAAI3B,IAAO4B,MAAO,IAAI5B,IAAOlD,QAAS,IAAIkD,IAAO6B,YAAa,IAAI7B,IAAOgC,YAAa,IAAIhC,KAGnH+E,EAASuJ,EAAc,GAAI6B,EAAoB3O,IAASS,cAAc8C,EAAOlD,YAAakD,EAAOpD,SAAUoD,EAAOnD,OACxHmD,EAAOzD,SAAWA,EAASiO,QAAO,SAACN,EAAShV,GAAV,OAChCgV,EAAQrT,MAAQmJ,EAAOlD,aACvBP,EAASuG,MAAM,EAAG5N,GAAGmW,OAAM,SAAAC,GAAK,OAAIA,EAAMzU,MAAQqT,EAAQrT,UAC5D,IAAK,IAAI3B,EAAI8K,EAAOzD,SAAS4B,OAAQjJ,EAAI,EAAGA,IAC1C8K,EAAOzD,SAAS0O,KAAK,CAAEpU,IAAK,GAAIzB,MAAO,IAEzC,cAAoBmU,EAApB,eAAmC,CAA9B,IAAM+B,EAAK,KACdH,EAAOnP,OAAQuP,IAAID,EAAMtP,QACzBmP,EAAOvO,SAAU2O,IAAID,EAAM1O,UAC3BuO,EAAOtO,MAAO0O,IAAID,EAAMzO,OACxBsO,EAAOpT,QAASwT,IAAID,EAAMvT,SAC1BoT,EAAOrO,YAAayO,IAAID,EAAMxO,aAGhC,SAAS0O,EAAepW,EAAU8D,EAAmBG,GACnD,OAAO,kDAAWH,EAAX,aAA0B,uBAAMrE,UAAU,cAAhB,SAA+BwE,EAAKjE,QAMvE,SAASqW,EAAgBrW,EAAU8D,EAAmBG,GACpD,OAAO,mDAAYH,EAAZ,IAAkB,uBAAMrE,UAAU,eAAhB,SAAgCwE,EAAKjE,QAEhE,SAASsW,EAAgBtW,EAAU8D,EAAmBG,GACpD,OAAO,mDAAYH,EAAZ,IAAkB,uBAAMrE,UAAU,eAAhB,SAAgCwE,EAAKjE,QAGhE,SAASuW,EAAQ9U,EAAsB+U,EAAqB1S,EAAmBG,GAC7E,IAAMwS,EAAc,IAAI5Q,IAAI,YAAIkQ,EAAOtU,IAAO2T,QAAO,SAAApV,GAAK,OAAIwW,EAAUnN,IAAIrJ,OACxEyW,EAAY1R,KAAO,EACrBuI,EAAM7L,GAdV,SAA0BzB,EAAUwW,EAAgB1S,EAAmBG,GACrE,OAAO,oDAAaH,EAAb,IAAmB,uBAAMrE,UAAU,cAAhB,SAA+BwE,EAAKjE,KAAvD,kBACLwW,EAAUpB,QAAO,SAAAsB,GAAC,OAAIA,IAAM1W,KAAOJ,KAAI,SAACI,EAAO2W,GAAR,OAAkB,uCAAE,6BAAIA,EAAQ,EAAI,IAAM,KAAO,uBAAMlX,UAAU,eAAhB,SAAgCwE,EAAKjE,cAYhH4W,CAAchM,EAAOnJ,GAAR,YAAkB+U,GAAY1S,EAAMG,GAClC,IAArBwS,EAAY1R,KACnBuI,EAAM7L,GAAO4U,EAAazL,EAAOnJ,GAAMqC,EAAMG,GACtC8R,EAAOtU,GAAMsD,KAAO,EAC3BuI,EAAM7L,GAAO2U,EAAYxL,EAAOnJ,GAAMqC,EAAMG,GAE5CqJ,EAAM7L,GAAO6U,EAAa1L,EAAOnJ,GAAMqC,EAAMG,GAGjDsS,EAAQ,SAAU1C,EAAa,OAAO,SAAC7T,GAAD,OAAWwQ,EAAOxQ,GAAO8D,QAC/DyS,EAAQ,WAAY3F,EAAU,UAAU,SAAC5Q,GAAD,OAAW,uCAAGA,EAAH,IAAqB,IAAVA,EAAc,QAAU,aACtFuW,EAAQ,UAAWzC,EAAU,QAAQ,SAAC9T,GAAD,OAAW,qCAAGqH,IAASwP,SAAS7W,QACrEuW,EAAQ,cAAexC,EAAc,aAAa,SAAC/T,GAAD,OAAW,qCAAG+H,IAAK+O,eAAe9W,QACpFsN,EAAMnG,SAAW,qCAAGyD,EAAOzD,SAASiO,QAAO,SAAAN,GAAO,MAAoB,KAAhBA,EAAQrT,OAAY7B,KAAI,SAACkV,EAAShV,GAAV,OAC5E,+BAAcuW,EAAavB,EAAS,YAAY,SAAC9U,GAAD,OAAW,uCAAG+H,IAAK+O,eAAe9W,EAAMyB,KAA7B,IAAoCzB,EAAMA,MAAuC,MAAhC+H,IAAKC,YAAYhI,EAAMyB,KAAe,IAAM,UAA9I3B,QAGZ,IAAM6B,EAAOoG,IAAKC,YAAY4C,EAAOlD,aAcrC,OAbIsM,EAAe+C,MAAK,SAAA/W,GAAK,OAAIA,EAAM8H,gBAAkBkO,KACnDjC,EAAa1K,IAAIuB,EAAOlD,cAC1B4F,EAAM7F,MAAQ4O,EAAazL,EAAOnD,MAAO,SAAS,SAACzH,GAAD,MAAW,IAAMA,KACnEsN,EAAMzF,YAAcwO,EAAaL,EAAmB,mBAAmB,SAAChW,GAAD,OAAW,uCAAG0B,YAAY1B,EAAO2B,GAAgB,MAATA,EAAe,IAAM,WAEpI2L,EAAM7F,MAAQ6O,EAAa1L,EAAOnD,MAAO,SAAS,SAACzH,GAAD,MAAW,IAAMA,KACnEsN,EAAMzF,YAAcyO,EAAaN,EAAmB,mBAAmB,SAAChW,GAAD,OAAW,uCAAG0B,YAAY1B,EAAO2B,GAAgB,MAATA,EAAe,IAAM,WAGtI2L,EAAM7F,MAAQ2O,EAAYxL,EAAOnD,MAAO,SAAS,SAACzH,GAAD,MAAW,IAAMA,KAClEsN,EAAMzF,YAAcuO,EAAYJ,EAAmB,mBAAmB,SAAChW,GAAD,OAAW,uCAAG0B,YAAY1B,EAAO2B,GAAgB,MAATA,EAAe,IAAM,UAG9H,CAACiJ,EAAQ0C,GAGlB,SAASuD,GAAavD,EAAiBkD,GACrC,IADkE,EAC5DwG,EAAU,IAAInR,IAAoB,IAD0B,cAE/CyH,GAF+C,IAElE,kCAAWrJ,EAAX,sBACoBgT,KADpB,IACE,gCAAWxV,EAAX,QACMyV,YAAgBjT,EAAKkT,QAAQ,MAAO,IAAK3G,EAAO/O,GAAKqC,KAAKqT,QAAQ,MAAO,MAAQ,GACnFH,EAAQb,IAAI1U,IAHlB,0BAAA2V,MAFkE,8BAMlE,OAAOJ,EAET,SAAS3D,GAAcgE,EAA2BlF,EAAeC,GAG/D,IAFA,IAAIkF,EAAID,EAAQE,EAAa,EAAGC,EAAiB,EAC3CR,EAAU,IAAInR,IAAY,IACvB4R,EAAI,EAAGA,EAAIrF,EAAQqF,IAAK,CAE/B,IADA,IAAIC,EAAO,EAAGC,GAAS,EACdC,EAAI,EAAGA,EAAIzF,EAAOyF,IAAK,CAC9B,IAAI9X,EAAsB,GAAjB2X,EAAItF,EAAQyF,GAEjBC,GAAiB,CAAE/M,EADfwM,EAAExX,GACgBiL,EADRuM,EAAExX,EAAI,GACKuD,EADGiU,EAAExX,EAAI,IACJ+K,IAC3B8M,IACHA,GAAS,EACTD,KAGFC,GAAS,EAITJ,IAAeG,GACjBH,EAAaG,EACbF,EAAiB,GACRD,KACTC,GACsB,IAAIR,EAAQb,IAAI2B,YAAMP,EAAY,EAAG,IAG/D,OAAOP,EAET,SAASa,GAAiBE,EAAQC,GAAwB,IAAhBC,EAAe,uDAAH,EAC9CC,EAAiB,SAAC9U,EAAGC,GAAJ,OAAWzB,KAAKuW,IAAI/U,EAAIC,IAAM4U,GACrD,OAAOC,EAAeH,EAAOjN,EAAGkN,EAAOlN,IACrCoN,EAAeH,EAAOhN,EAAGiN,EAAOjN,IAChCmN,EAAeH,EAAO1U,EAAG2U,EAAO3U,GAEpC,SAAS0N,GAAczD,GACrB,IADoD,EAC9C0J,EAAU,IAAInR,IADgC,cAEjCyH,GAFiC,IAEpD,kCAAWrJ,EAAX,sBACoB+Q,KADpB,IACE,gCAAWvT,EAAX,QACMyV,YAAgBjT,EAAKkT,QAAQ,MAAO,IAAK9P,IAASwP,SAASpV,GAAK0V,QAAQ,MAAO,MAAQ,GACzFH,EAAQb,IAAI1U,IAHlB,0BAAA2V,MAFoD,8BAMpD,OAAOJ,EAET,SAAS7F,GAAkB7D,GACzB,IAD4D,EACtD0J,EAAU,IAAInR,IAAiB,IADuB,cAEzCyH,GAFyC,IAE5D,kCAAWrJ,EAAX,sBACoBmU,KADpB,IACE,2BAAmC,CAAC,IAAzB3W,EAAwB,QAC7BwC,EAAKoU,cAAcxD,SAAS9M,IAAK+O,eAAerV,GAAK4W,gBACvDrB,EAAQb,IAAI1U,GAEVA,EAAIoT,SAAS,UAAYqC,YAAgBjT,EAAKkT,QAAQ,MAAO,IAAKpP,IAAK+O,eAAerV,GAAK0V,QAAQ,MAAO,MAAQ,GACpHH,EAAQb,IAAI1U,IANlB,0BAAA2V,MAF4D,8BAU5D,OAAOJ,EAET,SAAS5F,GAAoB9D,GAC3B,IADwF,EAClF0J,EAAsD,GAD4B,cAErE1J,GAFqE,IAExF,2BAA0B,CAAC,IAAhBrJ,EAAe,QACpBqU,EAAQ,mBACRC,EAAQD,EAAME,KAAKvU,GACnBsU,GAAOvB,EAAQnB,KAAK,CAAE/N,cAAe/G,WAAWwX,EAAM,GAAGpB,QAAQ,KAAM,KAAKA,QAAQ,UAAW,MAAOxV,KAAM,OAEhH4W,GADAD,EAAQ,6BACME,KAAKvU,KACR+S,EAAQnB,KAAK,CAAE/N,cAAe9G,SAASuX,EAAM,GAAGpB,QAAQ,YAAa,QARM,8BAUxF,OAAOH,EAET,SAAS/F,GAAc3D,GACrB,IADiD,EAC3CmL,EAAqB,GADsB,cAEhCnL,GAFgC,yBAExCrJ,EAFwC,QAG/CA,EAAOA,EAAKkT,QAAQ,SAAU,IAAIA,QAAQ,KAAM,IAEhDrR,IAAY6H,SAAQ,SAAAlM,GAClB,IAAMqC,EAAOiE,IAAK+O,eAAerV,GAI3B8W,GAHkC,MAA1BxQ,IAAKC,YAAYvG,GAC7B,IAAIiX,OAAO5U,EAAO,gCAAiC,MACnD,IAAI4U,OAAO5U,EAAO,qCAAsC,OACtC0U,KAAKvU,GACrBsU,GACFE,EAAQ5C,KAAK,CAAEpU,MAAKzB,MAAOe,WAAWwX,EAAM,GAAGpB,QAAQ,KAAM,KAAKA,QAAQ,UAAW,YAV3F,2BAAyB,IAFwB,8BAejD,OAAOsB,EAGT,SAASvF,GAASyF,EAAsBZ,EAAeC,EAAezE,GAMpE,IANoJ,IAAD,EACxGA,EAAnCH,cAD2I,MAClI,MADkI,IACxGG,EAAnBJ,YAD2H,MACpH,QADoH,EAE7ImE,EAAIsB,kBAAkBC,KAAKF,EAAUpO,MACrCuI,EAAiB,QAAXM,EAAkB0F,EAAiB,QAAX1F,EAAkBE,EAAiB,QAAXF,EACtD2F,EAAc,OAAT5F,EAAe6F,EAAkB,WAAT7F,EAC7B8F,EAAUrX,KAAKsI,MAAMyO,EAAUxG,OAASwG,EAAUvG,OAAS,GAAK,GAC7DtS,EAAI,EAAGA,EAAIwX,EAAEvO,OAAQjJ,GAAK,EAAG,CACpC,IAAMgL,EAAIwM,EAAExX,GAAIiL,EAAIuM,EAAExX,EAAI,GAAIuD,EAAIiU,EAAExX,EAAI,IACnCwT,GAAQR,GAAOhT,EAAImZ,GAAaH,GAAOhZ,EAAImZ,IAC9CnO,GAAKiN,EAAO,IAAMjN,GAAKkN,EAAO,IAC9BjN,GAAKgN,EAAO,IAAMhN,GAAKiN,EAAO,IAC9B3U,GAAK0U,EAAO,IAAM1U,GAAK2U,EAAO,GAC1Be,EAAIzB,EAAExX,GAAKwX,EAAExX,EAAI,GAAKwX,EAAExX,EAAI,GAAK,EAC5BkZ,IACP1B,EAAExX,GAAK,IAAMgL,EACbwM,EAAExX,EAAI,GAAK,IAAMiL,EACjBuM,EAAExX,EAAI,GAAK,IAAMuD,GAGnBiU,EAAExX,GAAKwX,EAAExX,EAAI,GAAKwX,EAAExX,EAAI,GAAK,IAGjC,OAAO,IAAIoZ,UAAU5B,EAAGqB,EAAUxG,MAAOwG,EAAUvG,QCvgBrD,IAEI+G,GAFEvT,GAAmB,IAAIC,IAAIC,KAGlB,SAASsT,GAAT,GAAmF,IAAD,MAAxDC,EAAwD,EAAxDA,iBAAkBC,EAAsC,EAAtCA,WACjDzW,EAAMC,YAAe,YAArBD,EADuF,EAE1D4J,qBAAW8M,QAAiB1Y,GAF8B,mBAExFwM,EAFwF,KAE9EmM,EAF8E,KAGzFC,EAAiBhW,YAAWiD,IAAc6J,SAAU,IAEpDjE,OAAgCzL,IAAbwM,EACnB5G,EAAQ4G,EAAQ,OAAGoM,QAAH,IAAGA,OAAH,EAAGA,EAAiBpM,EAASzG,aAAU/F,EAE7DI,qBAAU,WACR,GAAIoY,GAAoBA,KAAgB,OAAKhM,QAAL,IAAKA,OAAL,EAAKA,EAAU9F,IAAI,CACzD,IAAMjB,EAAmBrD,IAAS0D,QAAQ0S,GACtC/S,GACFkT,EAAiB,CAAEpY,KAAM,YAAaiM,SAAUqM,YAAUpT,QAE7D,CAAC+S,EAAD,OAAmBhM,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAU9F,KAEhC,IAEMoS,EAAQ/Y,uBAAY,WAAO,IAAD,EACpB,OAAV0Y,QAAU,IAAVA,OACkB,QAAlB,EAAAH,UAAA,WACAK,EAAiB,CAAEpY,KAAM,YACxB,CAACkY,EAAYE,IACVI,EAAShZ,uBAAY,SAACiZ,GAAkC,IAAD,IACrDC,EAAWD,EAASjT,OAAS6S,EAAgBI,EAASjT,QAAUH,EAEtE,SAASsT,EAAQ/Z,EAAsBwW,EAAyBwD,GAC9D,OAAQha,GAASwW,EAAU3B,SAAS7U,GAAUA,EAAvC,OAAgDga,QAAhD,IAAgDA,IAAUxD,EAAU,GAGzEqD,EAASjT,SACXiT,EAASrS,SAAWuS,EAAI,OAAC1M,QAAD,IAACA,OAAD,EAACA,EAAU7F,SAAUsS,EAAStF,OAAQ5S,KAAKtB,IAAL,MAAAsB,KAAI,YAAQkY,EAAStF,UACnFqF,EAASlX,QAAUoX,EAAI,OAAC1M,QAAD,IAACA,OAAD,EAACA,EAAU1K,QAAS0R,OAAO1U,KAAKma,EAASnR,aAE9DkR,EAASrS,WACXqS,EAASpS,MAAT,iBAAiB4F,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAU5F,aAA3B,QAAoC,GAClCoS,EAASpS,QACXoS,EAASpS,MAAQqQ,YAAM+B,EAASpS,MAAO,EAAG,aAAKoS,EAASrS,gBAAd,QAA0B6F,EAAU7F,YAC5EqS,EAASlX,UACXkX,EAASnS,YAAcqS,EAAI,OAAC1M,QAAD,IAACA,OAAD,EAACA,EAAU3F,YAAaL,IAAS4N,cAAc4E,EAASlX,WAEjFkX,EAASnS,cACXmS,EAAS1S,SAAW,CAAC,EAAG,EAAG,EAAG,GAAGvH,KAAI,SAAAE,GAAC,OACnCuN,GAAYA,EAASlG,SAASrH,GAAG2B,MAAQoY,EAASnS,YAAe2F,EAAUlG,SAASrH,GAAK,CAAE2B,IAAK,GAAIzB,MAAO,OAEhHwZ,EAAiB,CAAEpY,KAAM,SAAUiM,SAAUwM,MAC5C,CAACxM,EAAUoM,EAAgBhT,EAAO+S,IAC/BS,EAAarZ,uBAAY,SAAC+V,EAAe7B,GAC7C0E,EAAiB,CAAEpY,KAAM,UAAWuV,QAAO7B,cAC1C,CAAC0E,IACEU,IAAU7M,IAAY8M,YAAqB9M,GAAU+M,OAAOrR,OAlD6B,EAoDtEsR,mBAAQ,kBAuQnC,SAAwBC,GAAuE,IAAD,IAC5F,IAAKA,EAAW,MAAO,CAAEC,OAAO,GAD4D,IAEpFhT,EAAgE+S,EAAhE/S,GAAIX,EAA4D0T,EAA5D1T,OAAQY,EAAoD8S,EAApD9S,SAAUC,EAA0C6S,EAA1C7S,MAAO9E,EAAmC2X,EAAnC3X,QAAS+E,EAA0B4S,EAA1B5S,YAAaP,EAAamT,EAAbnT,SAC3D,GAAII,EAAI,MAAO,CAAEgT,OAAO,GAExB,IAAMC,EAAavX,IAASwX,WAAWrF,QAAO,SAAAsF,GAAS,OACrD9T,IAAW8T,EAAU9T,QACrBY,IAAakT,EAAUlT,UACvB7E,IAAY+X,EAAU/X,SACtB+E,IAAgBgT,EAAUhT,aAC1BD,GAASiT,EAAUjT,OACnBN,EAAS8O,OAAM,SAACnB,EAAShV,GAAV,OACZ4a,EAAUvT,SAASrH,GAAG2B,KACtBqT,EAAQrT,MAAQiZ,EAAUvT,SAASrH,GAAG2B,KACrCqT,EAAQ9U,OAAS0a,EAAUvT,SAASrH,GAAGE,YAKvC2a,EAAWH,EAAWpF,QAAO,SAAAsF,GAAS,OAC1CjT,EAAQiT,EAAUjT,QACjB7F,KAAKsI,MAAMzC,EAAQ,KAAO7F,KAAKsI,MAAMwQ,EAAUjT,MAAQ,GACtDN,EAAS8O,OAAM,SAACnB,EAAShV,GAAV,OACbgV,EAAQrT,MAAQiZ,EAAUvT,SAASrH,GAAG2B,KAAOqT,EAAQ9U,QAAU0a,EAAUvT,SAASrH,GAAGE,SACvFmH,EAASyT,MAAK,SAAC9F,EAAShV,GAAV,OACZ4a,EAAUvT,SAASrH,GAAG2B,IACpBqT,EAAQ9U,MAAQ0a,EAAUvT,SAASrH,GAAGE,MACtC8U,EAAQrT,WAKVoZ,EAAaL,EAAWpF,QAAO,SAAAsF,GAAS,OAC5CjT,IAAUiT,EAAUjT,OACpBN,EAAS8O,OAAM,SAAAnB,GAAO,OACnBA,EAAQrT,KACTiZ,EAAUvT,SAASyT,MAAK,SAAAE,GAAgB,OACtChG,EAAQrT,MAAQqZ,EAAiBrZ,KACjCqT,EAAQ9U,QAAU8a,EAAiB9a,eAGzC,OAAK6a,EAAW9R,QAAW4R,EAAS5R,OAI7B,CAAEgS,MADE,oBAAGF,EAAW,UAAd,aAAG,EAAetT,UAAlB,QAAyBoT,EAAS,GAAGpT,GAChCgT,MAAOM,EAAW9R,OAAS,GAHlC,CAAEwR,OAAO,GAjTqBS,CAAe3N,KAAW,CAACA,IAA1D0N,EApDuF,EAoDvFA,MAAOR,EApDgF,EAoDhFA,MApDgF,SAqDvClN,QArDuC,IAqDvCA,IAAY,GArD2B,KAqDvF7F,iBArDuF,OAqD5E,EArD4E,QAqDzEC,cArDyE,OAqDjE,EArDiE,QAqD9D9E,gBArD8D,OAqDpD,SArDoD,GAsDzFsY,GAAU5N,EAAWhG,IAASC,mBAAmB+F,GAAY,GAtD4B,GAuD1CA,EAAWhG,IAASY,sBAAsBoF,EAAUzH,IAAoB,GAvD9B,MAuDvFsC,0BAvDuF,OAuDnE,EAvDmE,SAuDhEC,sBAvDgE,OAuDhD,EAvDgD,GAwD/F,OAAO,gBAAC6G,EAAA,EAAD,CAAM9J,GAAG,cAAcjB,KAAM,YAA7B,UACL,eAAC+K,EAAA,EAAK7J,OAAN,UAAa,eAAC+V,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,eAArB,+BACb,gBAACnM,EAAA,EAAKzJ,KAAN,WACE,gBAACkJ,EAAA,EAAD,WAEE,gBAACG,EAAA,EAAD,CAAKvJ,GAAI,GAAI6J,GAAI,EAAjB,UAEE,gBAACkM,EAAA,EAAD,CAAY3b,UAAU,oBAAtB,UAEE,gBAAC4b,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAAS9b,UAAU,cAA5C,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAASqI,EAAW,UAAY,UAAnE,0BACG5G,QADH,IACGA,OADH,EACGA,EAAO3C,YADV,QACkBjB,EADlB,oDAGA,eAACwY,EAAA,EAAS7R,KAAV,UACGiQ,GAAkB/S,IAAc8U,mBAAmB/B,GAAgB7Z,KAAI,WAAiBE,GAAjB,uBAAE0U,EAAF,KAAUiH,EAAV,YACtE,gBAAC,IAAMC,SAAP,WACG5b,EAAI,GAAK,eAACub,EAAA,EAAS5R,QAAV,IACV,eAAC4R,EAAA,EAASM,SAAV,UAAmB,gBAACT,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,uBAArB,wBAAuD,eAAC,IAAD,CAAO5b,MAAOiV,SACvFiH,EAAK7b,KAAI,mCAAEgH,EAAF,KAAU9C,EAAV,YACR,eAACuX,EAAA,EAASzX,KAAV,CAA4BC,QAAS,kBAAM+V,EAAO,CAAEhT,YAApD,SACG9C,GADiB8C,QAJH4N,WAW3B,eAACoH,EAAA,EAAD,CAAgBN,GAAIF,IAAWS,OAAQC,MAAOzO,EAAW,eAAC,IAAD,CAAO9N,MAAOiI,KAAe3E,EAAhC,yCAAkD3C,UAAWuG,EAAOzB,QAASqI,EAAW,UAAY,UAA1J,SACI,CAAC,EAAG,EAAG,GAAgBzN,KAAI,SAAC4H,EAAUmP,GAAX,OAAqB,eAAC0E,EAAA,EAASzX,KAAV,CAA2B1D,WAAU,OAACuG,QAAD,IAACA,OAAD,EAACA,EAAO+N,OAAOK,SAASrN,IAAW3D,QAAS,kBAAM+V,EAAO,CAAEpS,cAAhG,SAC/C,eAAC,IAAD,CAAOjI,MAAOiI,KADqDmP,WAO1E,gBAACyE,EAAA,EAAD,CAAY3b,UAAU,OAAtB,UACE,eAAC2b,EAAA,EAAWG,QAAZ,UACE,eAACH,EAAA,EAAWW,KAAZ,UAAkBlZ,EAAlB,4CAEF,eAAC9C,EAAA,EAAD,CAAmBC,MAAOyH,GAAOvH,UAAWuG,EAAOrG,YAAW,YAAkB,EAAXoH,IAAgBvH,SAAU,SAAA+b,GAAC,OAAIpC,EAAO,CAAEnS,MAAOuU,OACpH,gBAACZ,EAAA,EAAWS,OAAZ,WACE,eAAChN,EAAA,EAAD,CAAQhL,QAAS,kBAAM+V,EAAO,CAAEnS,MAAOA,GAAQ,KAAMvH,UAAWuG,GAAmB,IAAVgB,GAAzE,eACCD,GAAW,YAAI9H,MAAM8H,GAAW,GAAG7H,QAAQC,KAAI,SAAAE,GAAC,OAAI,EAAIA,KAAGF,KAAI,SAAAE,GAAC,OAAI,eAAC+O,EAAA,EAAD,CAAgBhL,QAAS,kBAAM+V,EAAO,CAAEnS,MAAO3H,KAAMI,UAAWuG,GAASgB,KAAU3H,EAAnF,SAAuFA,GAA1EA,MAAyF,KAC3K,eAAC+O,EAAA,EAAD,CAAQhL,QAAS,kBAAM+V,EAAO,CAAEnS,MAAOA,GAAQ,KAAMvH,UAAWuG,GAASgB,KAAsB,EAAXD,GAApF,qBAKJ,gBAAC4T,EAAA,EAAD,CAAY3b,UAAU,OAAtB,UACE,eAACmc,EAAA,EAAD,CACEE,MAAO,eAAC,IAAD,CAAkBnZ,QAASA,KAClCzC,UAAWuG,EACXzB,QAASqI,EAAW,UAAY,UAChCiO,GAAIF,IAAWG,QAJjB,SAMGlH,OAAO1U,KAAP,iBAAY8G,QAAZ,IAAYA,OAAZ,EAAYA,EAAOkC,iBAAnB,QAAgC,IAAI/I,KAAI,SAACqc,GAAD,OACvC,eAACZ,EAAA,EAASzX,KAAV,CAAiCC,QAAS,kBAAM+V,EAAO,CAAEjX,QAASsZ,KAAlE,SAA4E,eAAC,IAAD,CAAkBtZ,QAASsZ,KAAnFA,QAExB,eAACC,EAAA,EAAD,CACElc,MAAK,iBAAEyG,QAAF,IAAEA,OAAF,EAAEA,EAAOkC,UAAU0E,EAAU1K,gBAA7B,QAAyCE,EAAzC,mDACL3C,UAAQ,EACRic,UAAQ,OAKZ,gBAACf,EAAA,EAAD,CAAY3b,UAAU,OAAtB,UACE,gBAACmc,EAAA,EAAD,CACEE,MAAO,6BAAIzO,EAAWtF,IAAKqU,uBAAuB/O,EAAS3F,aAAe7E,EAAvD,sCACnB3C,UAAWuG,EACXzB,QAASqI,EAAW,UAAY,UAChCiO,GAAIF,IAAWG,QAJjB,UAME,eAACF,EAAA,EAASM,SAAV,UAAoB9Y,EAApB,+CACCwE,IAAS4N,cAActS,IAAS/C,KAAI,SAAAyc,GAAS,OAC5C,eAAChB,EAAA,EAASzX,KAAV,CAA+BC,QAAS,kBAAM+V,EAAO,CAAElS,YAAa2U,KAApE,SACGtU,IAAKqU,uBAAuBC,IADXA,SAIxB,eAACH,EAAA,EAAD,CACElc,MAAOqN,EAAQ,UAAMhG,IAASS,cAAcuF,EAAS3F,YAAaF,GAAUC,KAA7D,OAAsEM,IAAKC,YAAYqF,EAAS3F,cAAiB7E,EAAjH,oCACf3C,UAAQ,EACRic,UAAQ,OAKZ,eAACnN,EAAA,EAAD,CAAM9J,GAAG,eAAejB,KAAM,YAAoBxE,UAAU,OAA5D,SACE,eAACuP,EAAA,EAAKzJ,KAAN,CAAW9F,UAAU,YAArB,SACE,gBAACgP,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,CAAKnP,UAAU,cAAf,SAA8BoD,EAA9B,8CACA,gBAAC+L,EAAA,EAAD,CAAKvJ,GAAG,OAAR,UACE,eAAC4E,EAAA,EAAD,CAAcX,OAAQ2R,GAAQlS,OAAQ/I,MAAOib,GAAQlS,OAAS,MAASb,KACvE,eAACoU,EAAA,EAAD,CACE5S,UAAU,SACVC,QAAS,gBAAC4S,EAAA,EAAD,CAAShV,GAAG,qBAAZ,UACP,eAACgV,EAAA,EAAQnX,MAAT,CAAekW,GAAG,KAAlB,SAAwBzY,EAAxB,8CACA,eAAC0Z,EAAA,EAAQC,QAAT,UAAiB,eAACtB,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,8BAJ1C,SAOE,eAAC,IAAD,CAAiB/b,KAAMuG,IAAkBlG,UAAU,OAAO0J,MAAO,CAAEsT,OAAQ,sBAQrF,eAACzN,EAAA,EAAD,CAAM9J,GAAG,eAAejB,KAAM,YAAoBxE,UAAU,OAA5D,SACE,eAACuP,EAAA,EAAKzJ,KAAN,CAAW9F,UAAU,YAArB,SACE,gBAACgP,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,CAAKnP,UAAU,cAAf,SAA8BoD,EAA9B,8CACA,gBAAC+L,EAAA,EAAD,CAAKvJ,GAAG,OAAR,UACE,eAAC4E,EAAA,EAAD,CAAcX,OAAQ2R,GAAQlS,OAAQ/I,MAAOib,GAAQlS,OAAS,MAASZ,KACvE,eAACmU,EAAA,EAAD,CACE5S,UAAU,SACVC,QAAS,gBAAC4S,EAAA,EAAD,CAAShV,GAAG,iBAAZ,UACP,eAACgV,EAAA,EAAQnX,MAAT,CAAekW,GAAG,KAAlB,SAAwBzY,EAAxB,8CACA,eAAC0Z,EAAA,EAAQC,QAAT,UAAiB,eAACtB,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,8BAJ1C,SAOE,eAAC,IAAD,CAAiB/b,KAAMuG,IAAkBlG,UAAU,OAAO0J,MAAO,CAAEsT,OAAQ,yBASvF,eAAC7N,EAAA,EAAD,CAAKvJ,GAAI,GAAI6J,GAAI,EAAjB,SAEG,CAAC,EAAG,EAAG,EAAG,GAAGtP,KAAI,SAAC+W,GAAD,OAAW,eAAC+F,GAAD,CAA0Bjd,UAAU,OAAakX,QAAOtJ,WAAU4M,cAA/CtD,WAGpD,gBAAClI,EAAA,EAAD,CAAKhP,UAAU,QAAf,UAEE,eAACmP,EAAA,EAAD,CAAKvJ,GAAI,GAAI5F,UAAU,OAAvB,SAEE,eAAC2M,GAAD,CAAe1L,SAAU,SAAAD,GAAK,OAAI+Y,EAAiB,CAAEpY,KAAM,YAAaiM,SAAU5M,KAAU4L,SAlLrE,SAACsN,GAAD,OAAuBR,GAAqBQ,GAkL2DrN,iBAAkBA,OAGhJyO,IAAK,OAAI1N,QAAJ,IAAIA,OAAJ,EAAIA,EAAU9F,MAAO,eAACqH,EAAA,EAAD,CAAKvJ,GAAI,GAAI5F,UAAU,OAAvB,SAC1B,gBAACgP,EAAA,EAAD,CAAKhP,UAAU,sCAAf,UACE,gBAACmP,EAAA,EAAD,CAAKM,GAAI,EAAG3G,GAAI,EAAG9I,UAAU,OAA7B,UACE,qBAAIA,UAAU,cAAd,SAA6BoD,EAA7B,4CACA,+BAAK,eAACkD,EAAA,EAAD,CAAcE,YAAaoH,SAElC,gBAACuB,EAAA,EAAD,CAAKM,GAAI,EAAG3G,GAAI,EAAG9I,UAAU,OAA7B,UACE,qBAAIA,UAAU,cAAd,SAA8CoD,EAAjBkY,EAASR,EAAK,+EAAT,+CAClC,+BAAK,eAACxU,EAAA,EAAD,CAAcC,WAAY+U,IAAK,OAAI1N,QAAJ,IAAIA,OAAJ,EAAIA,EAAU9F,gBAKvDqI,QAAQqL,GAAQlS,SAAW,eAAC6F,EAAA,EAAD,CAAKvJ,GAAI,GAAI5F,UAAU,OAAvB,SAC1B,eAACkd,EAAA,EAAD,CAAO3X,QAAQ,SAASvF,UAAU,kBAAlC,SAAqDwb,GAAQrb,KAAI,SAACyB,EAAGvB,GAAJ,OAAU,+BAAcuB,GAAJvB,gBAG3F,gBAACkP,EAAA,EAAKtJ,OAAN,WACE,eAACmJ,EAAA,EAAD,CAAQpP,UAAU,OAAOoE,QAAS,WAAQ+Y,GAAavP,EAAWA,EAAU9F,IAAKoS,KAAWzZ,UAAWga,EAASlV,QAAS+V,EAAQ,UAAY,UAA7I,UACW,OAAR1N,QAAQ,IAARA,OAAA,EAAAA,EAAU9F,IAAK1E,EAAf,0CAAmCA,EAAnC,2CAEH,eAACgM,EAAA,EAAD,CAAQpP,UAAU,OAAOS,UAAWoM,EAAkBzI,QAAS,WAvK3BuK,OAAOyO,QAAQha,EAAf,gDAuKyD8W,KAAW3U,QAAQ,UAAhH,SAA2HnC,EAA3H,8CACCoM,EACAW,QAAQmL,IAAU,eAAClM,EAAA,EAAD,CAAQpP,UAAU,cAAcoE,QAAS,WAAQ+Y,GAAavP,EAAW0N,GAAQpB,KAAWzZ,UAAWga,EAASlV,QAAQ,UAAxH,SAAmInC,EAAnI,oDAKzB,SAAS6Z,GAAT,GAAiM,IAAD,EAAxK/F,EAAwK,EAAxKA,MAAOtJ,EAAiK,EAAjKA,SAAU4M,EAAuJ,EAAvJA,WAAYxa,EAA2I,EAA3IA,UAC3CoD,EAAMC,YAAe,YAArBD,EADsL,SAElJwK,QAFkJ,IAElJA,IAAY,GAFsI,IAEtL3F,mBAFsL,MAExK,GAFwK,MAEpKP,gBAFoK,MAEzJ,GAFyJ,qBAGlIkG,QAHkI,IAGlIA,OAHkI,EAGlIA,EAAUlG,SAASwP,UAH+G,QAGrG,GAHqG,IAGtLlV,WAHsL,MAGhL,GAHgL,MAG5KzB,aAH4K,MAGpK,EAHoK,MAGjKoH,aAHiK,MAGzJ,GAHyJ,MAGrJ4B,kBAHqJ,MAGxI,EAHwI,EAKxL8T,EAAgB1V,EAAMsN,QAAO,SAACtR,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAC9C1B,EAAOoG,IAAKC,YAAYvG,GAAMsb,EAAU3V,EAAM2B,OAEhD2C,EAAgB,GAAIsR,EAA8B,GAAIC,EAAe,EAAGC,EAAgC,KAE5G,GAAI7P,EAAU,CAEZ,IAAM7F,EAAW6F,EAAS7F,SAFd,EAGkBH,IAAS8V,SAAS3V,GAAxC4V,EAHI,EAGJA,YAAaC,EAHT,EAGSA,KAErBJ,EADmBG,EAAcC,EAAO,EACZN,EAC5BC,EAAWvb,EAAM4F,IAASiW,mBAAmB7b,EAAK+F,GAAY,GAEhE,IAAM+V,EAAa,EAAIP,EAASjU,OAKhC,IAHKgU,GAAWtb,GAAOzB,IAAO0L,EAAQA,GAAS7I,EAAJ,wDACvCoa,EAAe,IAAGvR,EAAQA,GAAS7I,EAAE,kCAAmC,CAAE7C,MAAOid,EAAeF,MAE/FrR,EAAO,CACV,IAAM8R,EAAY,eAACC,EAAA,EAAD,CAAOzY,QAAqB,IAAZ+X,EAAgB,YAAhB,UAAiCA,EAAjC,QAAgDtd,UAAU,mBAA1E,SACfsd,EAAUla,EAAE,2BAA4B,CAAE8R,MAAOoI,IAAala,EAAvD,mDAEJ6a,EAAUtW,EAAMxH,KAAI,SAAC+d,EAAK7d,GAAN,OACxB,uBAAcL,UAAS,oBAAe8d,EAAaP,EAASY,QAAQD,GAA7C,QAAvB,SAAiFjc,YAAYic,EAAKhc,IAAvF7B,MAEbod,EAAY,gBAACzO,EAAA,EAAD,WACV,gBAACG,EAAA,EAAD,WAAM4O,EAAN,IAAkBE,KAClB,eAAC9O,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,gBAAC6V,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,qBAArB,yBAAsD,eAAClR,EAAA,EAAD,CAAcX,OAAO,EAAMtJ,MAAOgJ,GAA0BnG,EAAhB,2DAIrH,OAAO,gBAACmM,EAAA,EAAD,CAAM9J,GAAG,eAAejB,KAAM,YAAoBxE,UAAWA,EAA7D,UACL,gBAAC2b,EAAA,EAAD,WACE,gBAACQ,EAAA,EAAD,CACEE,MAAOra,EAAMsG,IAAKqU,uBAAuB3a,GAAOoB,EAAE,+BAAgC,CAAE7C,MAAO2W,EAAQ,IACnGzW,UAAWmN,EACXrI,QAASvD,EAAM,UAAY,UAC3B6Z,GAAIF,IAAWG,QAJjB,UAMG3L,QAAQnO,IAAQ,eAAC4Z,EAAA,EAASzX,KAAV,CAAyBC,QAAS,kBAAMoW,EAAWtD,EAAO,CAAElV,IAAK,GAAIzB,MAAO,KAA5E,SAAmF6C,EAAnF,qDAAoBpB,GACpCqE,IACEsP,QAAO,SAAA3T,GAAG,OAAIiG,IAAgBjG,GAAO0F,EAAS8O,OAAM,SAAAC,GAAK,OAAIA,EAAMzU,MAAQA,QAC3E7B,KAAI,SAAA6B,GAAG,OACN,eAAC4Z,EAAA,EAASzX,KAAV,CAAyBC,QAAS,kBAAMoW,EAAWtD,EAAO,CAAElV,MAAKzB,MAAO,KAAxE,SACG+H,IAAKqU,uBAAuB3a,IADXA,SAK1B,eAAC1B,EAAA,EAAD,CACEI,MAAgB,MAATwB,EACPvB,YAAayC,EAAF,oDACX7C,MAAOyB,EAAMzB,OAAQa,EACrBZ,SAAU,SAAAD,GAAK,OAAIia,EAAWtD,EAAO,CAAElV,MAAKzB,MAAK,OAAEA,QAAF,IAAEA,IAAS,KAC5DE,UAAWuB,EACXpB,YAAU,IAEX,eAACwd,EAAA,EAAD,CAAa9Y,KAAK,KAAKuW,GAAIF,IAAWS,OAAtC,SACEmB,EAASpd,KAAI,SAAC8W,EAAG5W,GAChB,IAAM+Z,EAAWnY,YAAYob,EAAgBpG,EAAG/U,GAChD,OAAO,eAACkN,EAAA,EAAD,CAAgB7J,QAAO,UAAKuY,EAAazd,EAAlB,QAA2BL,UAAU,wBAAwBS,SAAWF,IAAU+c,GAAYE,GAAgB,EAAGpZ,QAAS,kBAAMoW,EAAWtD,EAAO,CAAElV,MAAKzB,MAAOe,WAAW8Y,MAAlM,SAAiNA,GAApM/Z,WAI1B,uBAAKL,UAAU,MAAf,UAAsBiM,GAAS,eAAC+R,EAAA,EAAD,CAAOzY,QAAQ,SAAf,SAAyBnC,EAAzB,sCAA/B,IAA+E6I,GAASwR,QASrF,SAAS3D,GAAgB9Y,EAA8Bqd,GAC5D,OAAQA,EAAO1c,MACb,IAAK,QAAS,OACd,IAAK,UAAY,IACPuV,EAAmBmH,EAAnBnH,MAAO7B,EAAYgJ,EAAZhJ,QAEf,OADArU,EAAO0G,SAASwP,GAAS7B,EAClB,eAAKrU,GAEd,IAAK,YAAa,OAAOqd,EAAOzQ,SAChC,IAAK,SAAU,OAAO,2BAAK5M,GAAWqd,EAAOzQ,WAoDjD,I,SAAMuP,GAAe,SAACvP,EAAqB9F,GACzC8F,EAAS9F,GAAT,OAAcA,QAAd,IAAcA,IAAM,GACpBtE,IAAS8a,UAAU1Q,IC9Wf2Q,GAAcC,IAAMC,MAAK,kBAAM,kCAC/BC,GAAW,CAAC,UAAW,QAAS,aAAc,eAE9CC,GAAgB,iBAAO,CAC3BC,gBAAiB,GACjBC,YAAa,CAAC,EAAG,EAAG,GACpBC,eAAgB,EAChBC,gBAAiB,GACjBC,cAAe,GACfC,kBAAmB,GACnBC,eAAgB,CAAC,GAAI,GAAI,GAAI,IAC7BC,eAAgB,GAChBC,aAAc,GACdC,WAAW,EACXC,SAAUZ,GAAS,GACnBa,yBAA0B,GAC1B3Y,UAAU,YAAKP,OAEjB,SAASmZ,GAAcxe,EAAOqd,GAE5B,MAAoB,UAAhBA,EAAO1c,KAAyB,2BAAKgd,MAAZ,IAA6B/X,UAAW5F,EAAM4F,YACpE,2BAAK5F,GAAUqd,GAExB,SAASoB,KAAuC,IAAD,EAA3BC,EAA2B,uDAAjBf,KAC5B,OAAO,2BAAKe,GAAZ,UAAyB/a,YAAqB,gCAA9C,QAA0E,IAE7D,SAASgb,GAAgBC,GAAQ,IAAD,MACrCxc,EAAMC,YAAe,CAAC,WAAY,OAAlCD,EADqC,EAEX4J,qBAAWwS,GAAeb,KAAiBc,IAFhC,mBAEtCI,EAFsC,KAE7BC,EAF6B,KAGrClZ,EAAciZ,EAAdjZ,UAHqC,EAIP7F,mBAAQ,OAAC6e,QAAD,IAACA,GAAD,UAACA,EAAOnY,gBAAR,aAAC,EAAiBsY,aAJnB,mBAItCA,EAJsC,KAIzBC,EAJyB,OAKbjf,mBAAS,GALI,mBAKtCkf,GALsC,KAK5BC,GAL4B,KAMvCC,GAAYC,iBAAO,MACnBC,GAAeD,iBAAO,MAPiB,GAQdE,cARc,qBAQtCC,GARsC,MAQ7BC,GAR6B,MASvCxG,GAAiBhW,YAAWiD,IAAc6J,SAAU,IACpD2P,GAAe7F,mBAAQ,kBAAM,IAAIxU,IAAIQ,KAAY,CAACA,IAClD8Z,GAAiBvf,uBACrB,SAAC2G,GAAD,OAAgBtE,IAASmd,UAAU7Y,KAAK,IACpC8Y,GAAezf,uBACnB,SAAA2G,GAAO,IAAD,EACJkY,EAAelY,GACf,OAACqY,SAAD,IAACA,IAAD,UAACA,GAAWU,eAAZ,SAA6BC,eAAe,CAAEC,SAAU,aACvD,IACCC,GAAqB7f,uBAAY,kBAAM6e,EAAe,QAAO,IAEnExe,qBAAU,WAER,OADA6N,IAAQ4R,SAAS,aACVzd,IAAS0d,aAAaV,MAC5B,CAACA,KAEJhf,qBAAU,WACR2D,YAAmB,wBAAyB0a,KAC3C,CAACA,IA3ByC,IAkFzCsB,GAMAC,GAxFyC,GA6BsBxG,mBAAQ,WAAO,IACxEgE,EAAwOiB,EAAxOjB,gBAAiBI,EAAuNa,EAAvNb,cAAeC,EAAwMY,EAAxMZ,kBAAmBJ,EAAqLgB,EAArLhB,YAAaC,EAAwKe,EAAxKf,eAAgBC,EAAwJc,EAAxJd,gBADT,EACiKc,EAAvIX,sBAD1B,MAC2CP,KAAgBO,eAD3D,IACiKW,EAAtFV,sBAD3E,MAC4F,GAD5F,IACiKU,EAAjET,oBADhG,MAC+G,GAD/G,IACiKS,EAA9CP,gBADnH,MAC8HZ,GAAS,GADvI,IACiKmB,EAAtBR,iBAD3I,SAEzEgC,EAAe7d,IAASwX,WACxBsG,EAAyBD,EAAa1L,QAAO,SAAAnO,GACjD,GAAI4X,EAAc,CAChB,GAAqB,WAAjBA,IAA8B5X,EAAIU,KAAM,OAAO,EACnD,GAAqB,aAAjBkX,GAA+B5X,EAAIU,KAAM,OAAO,EAEtD,GAAuB,cAAnBiX,GACF,GAAI3X,EAAIC,SAAU,OAAO,OACpB,GAAuB,aAAnB0X,GACT,IAAK3X,EAAIC,SAAU,OAAO,OACrB,GAAI0X,GAAkBA,IAAmB3X,EAAIC,SAAU,OAAO,EAErE,GAAImX,GAAmBA,IAAoBpX,EAAIL,OAAQ,OAAO,EAC9D,GAAI6X,GAAiBA,IAAkBxX,EAAItE,QAAS,OAAO,EAC3D,GAAI+b,GAAqBA,IAAsBzX,EAAIS,YAAa,OAAO,EACvE,GAAIT,EAAIQ,MAAQ8W,GAAkBtX,EAAIQ,MAAQ+W,EAAiB,OAAO,EACtE,IAAKF,EAAYzJ,SAAS5N,EAAIO,UAAW,OAAO,EAfQ,oBAgBhCmX,GAhBgC,yBAgB7CqC,EAhB6C,QAiBtD,GAAIA,IAAc/Z,EAAIE,SAASyT,MAAK,SAAA9F,GAAO,OAAIA,EAAQrT,MAAQuf,KAAY,MAAM,CAAN,GAAO,IADpF,yEAhBwD,8BAkBxD,OAAO,KACNphB,KAAI,SAACqH,GACN,OAAQ8X,GACN,IAAK,UAAW,MAAO,CAAE/e,MAAO,CAACiH,EAAIO,UAAWP,OAChD,IAAK,QAAS,MAAO,CAAEjH,MAAO,CAACiH,EAAIQ,MAAOR,EAAIO,UAAWP,OACzD,IAAK,aAAc,MAAO,CAAEjH,MAAO,CAACqH,IAASY,sBAAsBhB,EAAKiZ,IAAchY,mBAAoBjB,OAC1G,IAAK,cAAe,MAAO,CAAEjH,MAAO,CAACqH,IAASY,sBAAsBhB,EAAKiZ,IAAc/X,eAAgBlB,OAEzG,MAAO,CAAEjH,MAAO,CAAC,GAAIiH,UACpB9D,MAAK,SAACC,EAAGC,GACV,IAAK,IAAIvD,EAAI,EAAGA,EAAIsD,EAAEpD,MAAM+I,OAAQjJ,IAClC,GAAIsD,EAAEpD,MAAMF,KAAOuD,EAAErD,MAAMF,GACzB,OAAQsD,EAAEpD,MAAMF,GAAKuD,EAAErD,MAAMF,KAAOgf,EAAY,GAAK,GAEzD,OAAO,KACNlf,KAAI,SAAAqhB,GAAI,OAAIA,EAAKha,OACdia,EAAaH,EAAUrM,QAAO,SAACtR,EAAG6D,GAAJ,OAAY7D,GAAK6D,EAAIC,SAAW,EAAI,KAAI,GACtEia,EAAYJ,EAAUrM,QAAO,SAACtR,EAAG6D,GAAJ,OAAY7D,GAAK6D,EAAIU,KAAO,EAAI,KAAI,GACjEyZ,EAAUL,EAAUhY,OAASoY,EAEnC,OAAO,aAAEJ,YAAWM,YAAaP,EAAa/X,OAAQmY,aAAYC,YAAWC,WAAYpB,MACxF,CAACV,EAASU,GAASE,KA1Cda,GA7BqC,GA6BrCA,UAAWM,GA7B0B,GA6B1BA,YAAaH,GA7Ba,GA6BbA,WAAYC,GA7BC,GA6BDA,UAAWC,GA7BV,GA6BUA,QA4C/C/C,GAAkQiB,EAAlQjB,gBAAiBI,GAAiPa,EAAjPb,cAAeC,GAAkOY,EAAlOZ,kBAAmBJ,GAA+MgB,EAA/MhB,YAAaC,GAAkMe,EAAlMf,eAAgBC,GAAkLc,EAAlLd,gBAzE3C,GAyE6Nc,EAAjKX,uBAzE5D,OAyE6EP,KAAgBO,eAzE7F,GAyE6GK,GAAgHM,EAAhHN,yBAzE7G,GAyE6NM,EAAtFV,uBAzEvI,OAyEwJ,GAzExJ,MAyE6NU,EAAjET,qBAzE5J,OAyE2K,GAzE3K,MAyE6NS,EAA9CP,iBAzE/K,OAyE0LZ,GAAS,GAzEnM,MAyE6NmB,EAAtBR,kBAzEvM,cA2EWzE,mBAAQ,WAC9D,IAAMiH,EAAW1f,KAAK2f,KAAKR,GAAUhY,OAASiW,IACxCwC,EAAmB1J,YAAM4H,GAAU,EAAG4B,EAAW,GACvD,MAAO,CAAEG,gBAAiBV,GAAUrT,MAAM8T,EAAmBxC,IAA2BwC,EAAmB,GAAKxC,IAA2BsC,WAAUE,sBACpJ,CAACT,GAAWrB,GAAUV,KAJjByC,GA3EqC,GA2ErCA,gBAAiBH,GA3EoB,GA2EpBA,SAAUE,GA3EU,GA2EVA,iBAM7BE,GAAyBje,YAAWC,IAAeC,IAAIib,IAAiB,CAACA,KAGtCgC,GADpChC,GACuB,cAAnBA,GAAkD/b,EAAE,kBAAmB,CAAE7C,MAAO6C,EAAE,8BAC/D,aAAnB+b,GAAiD/b,EAAE,oCACrC,oCAAI6e,SAAJ,IAAIA,QAAJ,EAAIA,GAAwB5d,OAHZjB,EAAE,kBAAmB,CAAE7C,MAAO6C,EAAE,wBAMxCge,GAAV,WAAjBhC,GAA2C,kCAAM,eAAC,IAAD,CAAiBzf,KAAMyK,MAA7B,IAAyChH,EAAzC,0CACrB,aAAjBgc,GAA6C,kCAAM,eAAC,IAAD,CAAiBzf,KAAM0K,MAA7B,IAA6CjH,EAA7C,4CACjCA,EAAE,cAAe,CAAE7C,MAAO6C,EAAE,cAEjD,IAgBM8e,GAAiBtH,mBAAQ,WAC7B,IAAMuH,EAAeb,GAAUhY,SAAWsY,GAArB,UAAsCN,GAAUhY,OAAhD,YAA0DsY,IAA1D,UAA6EA,IAClG,OAAO,eAACrS,EAAA,EAAD,CAAM9J,GAAG,cAAcjB,KAAM,YAAoBxE,UAAU,OAA3D,SACL,eAACuP,EAAA,EAAKzJ,KAAN,UACE,gBAACkJ,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,UACE,eAACiP,EAAA,EAAD,CAAa9Y,KAAK,KAAlB,SACG,YAAIrF,MAAM4hB,IAAU3hB,QAAQC,KAAI,SAAAE,GAAC,OAAI,gBAAC+O,EAAA,EAAD,CAAgBpP,UAAU,OAAOuF,QAASwc,KAAqB1hB,EAAI,UAAY,UAAW+D,QAAS,WAAO,IAAD,EAC7I8b,GAAY7f,GACZ,QAAC,EAAAggB,GAAaQ,eAAd,SAA+BC,eAAe,CAAEC,SAAU,YAFtB,UAI7B,IAAN1gB,EAAU,QAAU,GAAIA,EAAI,IAJoBA,UAQvD,eAAC8O,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,gBAAC6V,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,aAAaxG,MAAO8M,GAAgB1Y,OAAQ/I,MAAO4hB,EAAxE,qBAA+F,6BAAI,CAAEjN,MAAO8M,GAAgB1Y,UAA5H,WAAkJ,CAAE/I,MAAO4hB,GAA3J,2BAIpB,CAACN,GAAUE,GAAkBC,GAAgB1Y,OAAQgY,GAAUhY,OAAQsY,GAAaxe,IAEvF,OAAO,gBAACgf,EAAA,EAAD,CAAWpiB,UAAU,OAArB,UACL,eAACsE,EAAA,EAAD,CACEC,QAAQ,eACRE,WAAYrB,EAAF,sCACVoB,KAAMpB,EAAE,eAAgB,CAAEif,eAAe,IAH3C,SAKE,eAAC9D,GAAD,MAEF,sBAAKve,UAAU,OAAOsiB,IAAKnC,GAA3B,SACE,eAACxG,GAAD,CACEC,iBAAkBmG,EAClBlG,WAAYmH,OAGhB,gBAACzR,EAAA,EAAD,CAAM9J,GAAG,cAAcjB,KAAM,YAAoBxE,UAAU,OAAOsiB,IAAKjC,GAAvE,UACE,eAAC9Q,EAAA,EAAK7J,OAAN,UACE,gBAACsJ,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,UAAK,gCAAM,eAACsM,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,iBAArB,iCACX,eAACvM,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,gBAACwJ,EAAA,EAAD,CAAQ9J,KAAK,KAAKtF,UAAU,OAAOuF,QAAQ,SAASnB,QAAS,kBAAM0b,EAAe,CAAEne,KAAM,WAA1F,UAAuG,eAAC,IAAD,CAAiBhC,KAAM4iB,IAAQviB,UAAU,UAAhJ,IAA2J,eAACyb,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,2BAGnM,gBAACnM,EAAA,EAAKzJ,KAAN,WACE,gBAACkJ,EAAA,EAAD,WAEE,gBAACG,EAAA,EAAD,CAAKvJ,GAAI,GAAI6J,GAAI,EAAjB,UAEE,gBAACmM,EAAA,EAAD,CAAUC,GAAIF,IAAWG,QAAS9b,UAAU,mBAA5C,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAASqZ,GAAkB,UAAY,UAA1E,0BACG5E,SADH,IACGA,IADH,UACGA,GAAiB4E,WADpB,aACG,EAAmCva,YADtC,QAC8CjB,EAAE,4BAEhD,gBAACwY,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAElB,gBAAiB,MAAhE,SAAuE,eAACnD,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,cAArB,wBACtE1B,IAAkB/S,IAAc8U,mBAAmB/B,IAAgB7Z,KAAI,mCAAE8X,EAAF,KAAQ+D,EAAR,YACtE,gBAAC,IAAMC,SAAP,WACE,eAACL,EAAA,EAAS5R,QAAV,IACA,gBAAC4R,EAAA,EAASM,SAAV,yBAA8B,eAAC,IAAD,CAAOpc,MAAOmY,OAC3C+D,EAAK7b,KAAI,mCAAE6B,EAAF,KAAOqC,EAAP,YACR,eAACuX,EAAA,EAASzX,KAAV,CAAyBC,QAAS,kBAAM0b,EAAe,CAAElB,gBAAiB5c,KAA1E,SACGqC,GADiBrC,QAJHiW,YAa3B,eAACuK,EAAA,EAAD,CAAmBxiB,UAAU,oBAAoB2B,KAAK,WAAWka,GAAIF,IAAWS,OAAQ5b,SAAU,SAACoB,GAAD,OAAOke,EAAe,CAAEjB,YAAajd,KAAMrB,MAAOse,GAApJ,SACG/J,IAAoB3U,KAAI,SAAA8X,GACvB,IAAIwK,EAAW5D,GAAYzJ,SAAS6C,GACpC,OAAO,gBAACyK,EAAA,EAAD,CAAyBniB,MAAO0X,EAAM1S,QAASkd,EAAW,UAAY,UAAtE,UAAiF,eAAC,IAAD,CAAiB9iB,KAAM8iB,EAAWE,IAAgBC,MAAnI,IAAgJ,eAAC,IAAD,CAAO9iB,MAAOmY,MAA3IA,QAK9B,gBAAC0D,EAAA,EAAD,CAAY3b,UAAU,OAAtB,UACE,eAAC2b,EAAA,EAAWG,QAAZ,UACE,eAACH,EAAA,EAAWW,KAAZ,UACE,gCACE,gBAACb,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,oBAArB,mBACQ,uBAAM1b,UAAS,eAAU8e,GAAiB,EAAI,UAAY,IAA1D,iBADR,IACmF,uBAAM9e,UAAS,eAAU+e,GAAkB,GAAK,UAAY,IAA5D,kBADnF,wBAMN,eAACze,EAAA,EAAD,CACEC,MAAOue,GACPne,YAAayC,EAAE,oBACf5C,SAAU,SAAA0d,GAAG,OAAI4B,EAAe,CAAEhB,eAAgBzG,YAAM6F,EAAK,EAAGa,SAElE,eAACze,EAAA,EAAD,CACEC,MAAOwe,GACPpe,YAAayC,EAAE,oBACf5C,SAAU,SAAA0d,GAAG,OAAI4B,EAAe,CAAEf,gBAAiB1G,YAAM6F,EAAKY,GAAgB,YAKlF,gBAACV,EAAA,EAAD,CAAape,UAAU,6BAAvB,UACE,gBAAC4b,EAAA,EAAD,CAAUC,GAAIuC,IAAape,UAAU,cAArC,UACE,eAAC4b,EAAA,EAAS9R,OAAV,UACE,gCACE,gBAAC2R,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,kBAAkBnb,MAAO6C,EAAE,WAAD,OAAYkc,KAA3D,sBAAyF,CAAE/e,MAAO6C,EAAE,WAAD,OAAYkc,aAGnH,eAAC1D,EAAA,EAAS7R,KAAV,UACG2U,GAASve,KAAI,SAAA6B,GAAG,OACf,eAAC4Z,EAAA,EAASzX,KAAV,CAAyBC,QAAS,kBAAM0b,EAAe,CAAER,SAAUtd,KAAnE,SAA4EoB,EAAE,WAAD,OAAYpB,KAArEA,WAG1B,gBAACoN,EAAA,EAAD,CAAQhL,QAAS,kBAAM0b,EAAe,CAAET,WAAYA,MAAcrf,UAAU,gBAA5E,UACE,eAAC,IAAD,CAAiBL,KAAM0f,GAAYwD,IAAsBC,IAAgB9iB,UAAU,UAAU,sCAAQqf,GAAY,eAAC5D,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,eAArB,uBAAyD,eAACD,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,gBAArB,oCAKhL,eAACvM,EAAA,EAAD,CAAKvJ,GAAI,GAAI6J,GAAI,EAAjB,SACE,gBAACT,EAAA,EAAD,WAEE,gBAACG,EAAA,EAAD,WAEE,gBAACyM,EAAA,EAAD,CAAU5b,UAAU,mBAApB,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAASyZ,GAAgB,UAAY,UAAxE,SACGA,GAAgB,eAAC,IAAD,CAAkB9b,QAAS8b,KAAoB5b,EAAE,UAEpE,gBAACwY,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEd,cAAe,MAA9D,SAAsE,eAACvD,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,cAArB,wBACrEnG,IAAYpV,KAAI,SAAA6B,GAAG,OAClB,eAAC4Z,EAAA,EAASzX,KAAV,CAAyBC,QAAS,kBAAM0b,EAAe,CAAEd,cAAehd,KAAxE,SAAiF,eAAC,IAAD,CAAkBkB,QAASlB,KAAxFA,YAI1B,gBAAC4Z,EAAA,EAAD,CAAU5b,UAAU,mBAApB,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAAS0Z,GAAoB,UAAY,UAA5E,SACG3W,IAAKqU,uBAAuBsC,GAAmB7b,EAAE,eAEpD,gBAACwY,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEb,kBAAmB,MAAlE,SAAyE,eAACxD,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,cAArB,wBACxE/C,IAAgBxY,KAAI,SAAA4iB,GAAO,OAAI,eAACnH,EAAA,EAASzX,KAAV,CAA6BC,QAAS,kBAAM0b,EAAe,CAAEb,kBAAmB8D,KAAhF,SAC7Bza,IAAKqU,uBAAuBoG,IADqBA,YAOxD,gBAACnH,EAAA,EAAD,CAAU5b,UAAU,mBAApB,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAAS4Z,GAAiB,UAAY,UAAzE,SACGgC,KAEH,gBAACvF,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEX,eAAgB,MAA/D,SAAsE,eAAC1D,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,cAArB,wBACtE,eAACE,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEX,eAAgB,eAA/D,SAA+E,eAAC1D,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,2BAArB,yBAC/E,eAACE,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEX,eAAgB,cAA/D,SAA8E,eAAC1D,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,mCAArB,kCAC9E,eAACE,EAAA,EAAS5R,QAAV,IACA,eAACgZ,EAAA,EAAD,CAAgCzf,SAAU,SAAA0f,GAAG,OAAInD,EAAe,CAAEX,eAAgB8D,aAKtF,gBAACrH,EAAA,EAAD,CAAU5b,UAAU,mBAApB,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiB9J,UAAU,QAAQuF,QAAS6Z,GAAe,UAAY,UAAvE,SACGgC,KAEH,gBAACxF,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEV,aAAc,MAA7D,SAAoE,eAAC3D,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,WAArB,mBACpE,eAACE,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEV,aAAc,YAA7D,SAA0E,kCAAM,eAAC,IAAD,CAAiBzf,KAAMyK,MAA7B,IAAwC,eAACqR,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,cAArB,yBAClH,eAACE,EAAA,EAASzX,KAAV,CAAeC,QAAS,kBAAM0b,EAAe,CAAEV,aAAc,cAA7D,SAA4E,kCAAM,eAAC,IAAD,CAAiBzf,KAAM0K,MAA7B,IAA4C,eAACoR,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,gBAArB,oCAK9H,eAACvM,EAAA,EAAD,UAEG+P,GAAe/e,KAAI,SAAC+iB,EAAYhM,GAAb,OAClB,gBAAC0E,EAAA,EAAD,CAAU5b,UAAU,OAApB,UACE,eAAC4b,EAAA,EAAS9R,OAAV,CAAiBhC,GAAG,iBAAiB9H,UAAU,QAAQuF,QAAS2d,EAAa,UAAY,UAAzF,SACGA,EAAa5a,IAAKqU,uBAAuBuG,GAAc9f,EAAE,+BAAgC,CAAE7C,MAAO2W,EAAQ,MAE7G,gBAAC0E,EAAA,EAAS7R,KAAV,WACE,eAAC6R,EAAA,EAASzX,KAAV,CACEC,QAAS,WACP8a,GAAehI,GAAS,GACxB4I,EAAe,CAAEZ,qBAHrB,SAKC,eAACzD,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,2BAArB,0BACA9T,IAASub,iBAAiBxN,QAAO,SAAA3T,GAAG,OAAKkd,GAAe9J,SAASpT,MAAM7B,KAAI,SAAA6B,GAAG,OAC7E,eAAC4Z,EAAA,EAASzX,KAAV,CACEC,QAAS,WACP8a,GAAehI,GAASlV,EACxB8d,EAAe,CAAEZ,qBAHrB,SAKE5W,IAAKqU,uBAAuB3a,IALVA,WAZMkV,gBA0B1C,gBAAClI,EAAA,EAAD,CAAKhP,UAAU,QAAf,UACE,eAACmP,EAAA,EAAD,CAAKvJ,GAAI,EAAG6J,GAAI,EAAGzP,UAAU,OAA7B,SAAoC,gBAACoP,EAAA,EAAD,CAAQpP,UAAU,QAAQuF,QAAQ,SAAS9E,UAAWghB,GAAYrd,QAzNrF,kBACvBuK,OAAOyO,QAAP,2CAAmDqE,GAAnD,kDACAH,GAAUnhB,KAAI,SAAAqH,GAAG,OAAIhE,IAAS8D,YAAYE,EAAIM,GAAK,QAuNT,UAA6F,eAAC,IAAD,CAAiBnI,KAAMyjB,MAApH,IAAoI,eAAC3H,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,0BAArB,oCACxK,eAACvM,EAAA,EAAD,CAAKvJ,GAAI,EAAG6J,GAAI,EAAGzP,UAAU,OAA7B,SAAoC,gBAACoP,EAAA,EAAD,CAAQpP,UAAU,QAAQuF,QAAQ,SAAS9E,UAAW6gB,GAAUhY,OAAQlF,QAtN5F,kBACtBuK,OAAOyO,QAAP,0CAAkDkE,GAAUhY,OAA5D,iBACAgY,GAAUnhB,KAAI,SAAAqH,GAAG,OAAIhE,IAASmd,UAAUnZ,EAAIM,QAoNF,UAAkG,eAAC,IAAD,CAAiBnI,KAAM0jB,MAAzH,IAAqI,eAAC5H,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,yBAArB,mCACzK,eAACvM,EAAA,EAAD,CAAKvJ,GAAI,EAAG6J,GAAI,EAAGzP,UAAU,OAA7B,SAAoC,gBAACoP,EAAA,EAAD,CAAQpP,UAAU,QAAQuF,QAAQ,SAAS9E,UAAWkhB,GAASvd,QAnNrF,kBACpBuK,OAAOyO,QAAP,wCAAgDuE,GAAhD,iBACAL,GAAUnhB,KAAI,SAAAqH,GAAG,OAAIhE,IAAS2G,aAAa3C,EAAIM,QAiNL,UAAuF,eAAC,IAAD,CAAiBnI,KAAMyK,MAA9G,IAAyH,eAACqR,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,uBAArB,iCAC7J,eAACvM,EAAA,EAAD,CAAKvJ,GAAI,EAAG6J,GAAI,EAAGzP,UAAU,OAA7B,SAAoC,gBAACoP,EAAA,EAAD,CAAQpP,UAAU,QAAQuF,QAAQ,SAAS9E,UAAWihB,GAAWtd,QAhNrF,kBACtBuK,OAAOyO,QAAP,0CAAkDsE,GAAlD,iBACAJ,GAAUnhB,KAAI,SAAAqH,GAAG,OAAIhE,IAAS2G,aAAa3C,EAAIM,IAAI,OA8MT,UAA2F,eAAC,IAAD,CAAiBnI,KAAM0K,MAAlH,IAAiI,eAACoR,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,yBAArB,mCACrK,eAACvM,EAAA,EAAD,CAAKvJ,GAAI,GAAI5F,UAAU,QAAvB,SAA+B,iCAAO,gBAACyb,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,aAArB,qDAA0E,oEAItH,gBAACnM,EAAA,EAAD,CAAM9J,GAAG,cAAcjB,KAAM,YAAoBxE,UAAU,OAAOsiB,IAAKjC,GAAvE,UACE,eAAC9Q,EAAA,EAAK7J,OAAN,UACE,gBAACsJ,EAAA,EAAD,WACE,eAACG,EAAA,EAAD,UAAK,gCAAM,eAACsM,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,yBAArB,mCACX,eAACvM,EAAA,EAAD,CAAKvJ,GAAG,OAAR,SAAe,gBAACwJ,EAAA,EAAD,CAAQ9J,KAAK,KAAKtF,UAAU,OAAOuF,QAAQ,SAASnB,QAAS,kBAAM0b,EAAe,CAAElZ,UAAU,YAAKP,QAAnG,UAAqH,eAAC,IAAD,CAAiB1G,KAAM4iB,IAAQviB,UAAU,UAA9J,IAAyK,eAACyb,EAAA,EAAD,CAAOrY,EAAGA,EAAGsY,QAAQ,uBAGjN,eAACnM,EAAA,EAAKzJ,KAAN,UACE,eAACwd,EAAA,EAAD,CAAezH,GAAI7M,IAAKhP,UAAU,wBAAlC,SACG,CAAC,CAAC,EAAG,GAAI,CAAC,IAAIG,KAAI,SAAAojB,GAAM,OAAI,eAACf,EAAA,EAAD,CAA2C3G,GAAI1M,IAAKxN,KAAK,WAAWpB,MAAOqG,EAAWpG,SAAU,SAAAgjB,GAAC,OAAI1D,EAAe,CAAElZ,UAAW4c,KAAMxjB,UAAU,mBAAjJ,SAC1BqG,IAAY4H,MAAZ,MAAA5H,IAAW,YAAUkd,IAAQpjB,KAAI,SAAAkV,GAAO,OAAI,eAACqN,EAAA,EAAD,CAA4BniB,MAAO8U,EAAS9P,QAASqB,EAAUwO,SAASC,GAAW,UAAY,UAA/F,SAA2G/M,IAAKqU,uBAAuBtH,IAApHA,OADbkO,EAAO9hB,sBAMjEygB,GACD,eAAClT,EAAA,EAAD,UACGgT,GAAgB7hB,KAAI,SAACqH,EAAKnH,GAAN,OACnB,eAAC8O,EAAA,EAAD,CAAaM,GAAI,EAAG3G,GAAI,EAAG9I,UAAU,OAArC,SACE,eAACsG,EAAA,EAAD,CACEC,WAAYiB,EAAIM,GAChBlB,UAAW6Z,GACX/Z,SAAU,kBAAMga,GAAelZ,EAAIM,KACnCrB,OAAQ,kBAAMma,GAAapZ,EAAIM,QALzBzH,QAUbwhB,GAAW,GAAKK","file":"static/js/14.9d4bad3e.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { database } from \"../Database/Database\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{database._getCharKeys().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as IArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maxEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.lockArtifact(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, IArtifact, MainStatKey, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }: { setState: (art: IArtifact) => void, setReset: (reset: () => void) => void, artifactInEditor: boolean }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.numStars}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n            </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: Substat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof IArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    id: \"\",\r\n    setKey: \"Adventurer\", numStars: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<Rarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [numStarsString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const numStars = parseInt(numStarsString) as Rarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(numStars))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(numStars, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                id: \"\", setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              id: \"\", setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof IArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), numStars: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof IArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.numStars, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.numStars!.add(other.numStars as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof IArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"numStars\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{value.value}{Stat.getStatUnit(value.key) === \"%\" ? \"%\" : \"\"}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].name.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): Substat[] {\r\n  const matches: Substat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof IArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport { validateFlexArtifact } from '../Database/validation';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat } from '../Types/artifact';\r\nimport { Rarity, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\ntype ArtifactEditorArgument = { artifactIdToEdit: string, cancelEdit: () => void }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nlet uploadDisplayReset: (() => void) | undefined\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: ArtifactEditorArgument) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const [artifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    if (artifactIdToEdit && artifactIdToEdit !== artifact?.id) {\r\n      const databaseArtifact = database._getArt(artifactIdToEdit)\r\n      if (databaseArtifact)\r\n        artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, artifact?.id])\r\n\r\n  const getUpdloadDisplayReset = (reset: () => void) => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.numStars = pick(artifact?.numStars, newSheet.rarity, Math.max(...newSheet.rarity) as Rarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, Object.keys(newSheet.slotNames))\r\n    }\r\n    if (newValue.numStars)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.numStars ?? artifact!.numStars))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: Substat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = artifact ? !validateFlexArtifact(artifact).errors.length : false\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { dupId, isDup } = useMemo(() => checkDuplicate(artifact), [artifact])\r\n  const { numStars = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const errMsgs = artifact ? Artifact.substatsValidation(artifact) : []\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = artifact ? Artifact.getArtifactEfficiency(artifact, allSubstatFilter) : {}\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.name ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([rarity, sets], i) =>\r\n                  <React.Fragment key={rarity}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={rarity} /></Trans></Dropdown.ItemText>\r\n                    {sets.map(([setKey, name]) =>\r\n                      <Dropdown.Item key={setKey} onClick={() => update({ setKey })}>\r\n                        {name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={numStars} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as Rarity[]).map((numStars, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(numStars)} onClick={() => update({ numStars })}>\r\n                {<Stars stars={numStars} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${numStars * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {numStars ? [...Array(numStars + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (numStars * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(sheet?.slotNames ?? {}).map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={sheet?.slotNames[artifact!.slotKey] ?? t`editor.unknownPieceName` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${Artifact.mainStatValue(artifact.mainStatKey, numStars, level)}${Stat.getStatUnit(artifact.mainStatKey)}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (currentEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (maxEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? (isDup ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { saveArtifact(artifact!, artifact!.id); reset() }} disabled={!isValid} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? t`editor.btnSave` : t`editor.btnAdd`}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {Boolean(dupId) && <Button className=\"float-right\" onClick={() => { saveArtifact(artifact!, dupId); reset() }} disabled={!isValid} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: IArtifact | undefined, setSubstat: (index: number, substat: Substat) => void, className: string }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", substats = [] } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    const numStars = artifact.numStars\r\n    const { numUpgrades, high } = Artifact.rollInfo(numStars)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, numStars) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = rolls.map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key && substats.every(other => other.key !== key))\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : undefined}\r\n        onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          const newValue = valueString(accurateValue + v, unit)\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: Substat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      state!.substats[index] = substat\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nfunction checkDuplicate(editorArt: IArtifact | undefined): { dupId?: string, isDup: boolean } {\r\n  if (!editorArt) return { isDup: false }\r\n  const { id, setKey, numStars, level, slotKey, mainStatKey, substats } = editorArt\r\n  if (id) return { isDup: false }\r\n\r\n  const candidates = database._getArts().filter(candidate =>\r\n    setKey === candidate.setKey &&\r\n    numStars === candidate.numStars &&\r\n    slotKey === candidate.slotKey &&\r\n    mainStatKey === candidate.mainStatKey &&\r\n    level >= candidate.level &&\r\n    substats.every((substat, i) =>\r\n      !candidate.substats[i].key || // Candidate doesn't have anything on this slot\r\n      (substat.key === candidate.substats[i].key && // Or editor simply has better substat\r\n        substat.value >= candidate.substats[i].value)\r\n    )\r\n  )\r\n\r\n  // Strictly upgraded artifact\r\n  const upgraded = candidates.filter(candidate =>\r\n    level > candidate.level &&\r\n    (Math.floor(level / 4) === Math.floor(candidate.level / 4) ? // Check for extra rolls\r\n      substats.every((substat, i) => // Has no extra roll\r\n        substat.key === candidate.substats[i].key && substat.value === candidate.substats[i].value) :\r\n      substats.some((substat, i) => // Has extra rolls\r\n        candidate.substats[i].key ?\r\n          substat.value > candidate.substats[i].value : // Extra roll to existing substat\r\n          substat.key // Extra roll to new substat\r\n      )\r\n    )\r\n  )\r\n  // Strictly duplicated artifact\r\n  const duplicated = candidates.filter(candidate =>\r\n    level === candidate.level &&\r\n    substats.every(substat =>\r\n      !substat.key ||  // Empty slot\r\n      candidate.substats.some(candidateSubstat =>\r\n        substat.key === candidateSubstat.key && // Or same slot\r\n        substat.value === candidateSubstat.value\r\n      )))\r\n\r\n  if (!duplicated.length && !upgraded.length)\r\n    return { isDup: false }\r\n\r\n  const dupId = duplicated[0]?.id! ?? upgraded[0].id!\r\n  return { dupId, isDup: duplicated.length > 0 }\r\n}\r\n\r\nconst saveArtifact = (artifact: IArtifact, id: string | undefined) => {\r\n  artifact.id = id ?? \"\"\r\n  database.updateArt(artifact)\r\n}\r\n","import { faCheckSquare, faLock, faLockOpen, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, ButtonToolbar, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, IArtifact, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport { database } from '../Database/Database';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterLocked: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50,\r\n  effFilter: [...allSubstats]\r\n})\r\nfunction filterReducer(state, action) {\r\n  //reset all except the efficiency filter, since its a separate UI with its own reset\r\n  if (action.type === \"reset\") return { ...initialFilter(), effFilter: state.effFilter }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const { effFilter } = filters\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback(\r\n    (id: string) => database.removeArt(id), [])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numUnlock, numLock } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const allArtifacts = database._getArts()\r\n    const artifacts: IArtifact[] = allArtifacts.filter(art => {\r\n      if (filterLocked) {\r\n        if (filterLocked === \"locked\" && !art.lock) return false\r\n        if (filterLocked === \"unlocked\" && art.lock) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).map((art) => {\r\n      switch (sortType) {\r\n        case \"quality\": return { value: [art.numStars], art }\r\n        case \"level\": return { value: [art.level, art.numStars], art }\r\n        case \"efficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency], art }\r\n        case \"mefficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency], art }\r\n      }\r\n      return { value: [0], art }\r\n    }).sort((a, b) => {\r\n      for (let i = 0; i < a.value.length; i++) {\r\n        if (a.value[i] !== b.value[i])\r\n          return (a.value[i] - b.value[i]) * (ascending ? 1 : -1)\r\n      }\r\n      return 0\r\n    }).map(item => item.art)\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 1 : 0), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n\r\n    return { artifacts, totalArtNum: allArtifacts.length, numUnequip, numUnlock, numLock, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty, effFilterSet])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation), [filterLocation])\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.any\") })\r\n  else if (filterLocation === \"Inventory\") locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.inventory\") })\r\n  else if (filterLocation === \"Equipped\") locationDisplay = t(\"filterLocation.currentlyEquipped\")\r\n  else locationDisplay = <b>{locationCharacterSheet?.name}</b>\r\n\r\n  let lockedDisplay\r\n  if (filterLocked === \"locked\") lockedDisplay = <span><FontAwesomeIcon icon={faLock} /> {t`lock.locked`}</span>\r\n  else if (filterLocked === \"unlocked\") lockedDisplay = <span><FontAwesomeIcon icon={faLockOpen} /> {t`lock.unlocked`}</span>\r\n  else lockedDisplay = t(\"lockDisplay\", { value: t(\"lock.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => database.setLocation(art.id!, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => database.removeArt(art.id!))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numLock} artifacts?`) &&\r\n    artifacts.map(art => database.lockArtifact(art.id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numUnlock} artifacts?`) &&\r\n    artifacts.map(art => database.lockArtifact(art.id, false))\r\n\r\n  const paginationCard = useMemo(() => {\r\n    const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n    return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }, [numPages, currentPageIndex, artifactsToShow.length, artifacts.length, totalArtNum, t])\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"resetFilters\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([star, sets]) =>\r\n                  <React.Fragment key={star}>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {sets.map(([key, name]) =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterArtSetKey: key })}>\r\n                        {name}\r\n                      </Dropdown.Item>)}\r\n                  </React.Fragment>\r\n                )}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocked ? \"success\" : \"primary\"} >\r\n                    {lockedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"\" })}><Trans t={t} i18nKey=\"lock.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"locked\" })}><span><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"lock.locked\" >Locked</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"unlocked\" })}><span><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"lock.unlocked\" >Unlocked</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numLock} onClick={lockArtifacts}><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnlock} onClick={unlockArtifacts}><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"button.unlockArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Efficiency Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ effFilter: [...allSubstats] })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"ui:reset\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ButtonToolbar as={Row} className=\"w-100 d-flex flex-row\">\r\n          {[[0, 6], [6]].map(slicep => <ToggleButtonGroup key={slicep.toString()} as={Col} type=\"checkbox\" value={effFilter} onChange={n => filterDispatch({ effFilter: n })} className=\"flex-grow-1 mb-2\">\r\n            {allSubstats.slice(...slicep).map(substat => <ToggleButton key={substat} value={substat} variant={effFilter.includes(substat) ? \"success\" : \"primary\"}>{Stat.getStatNameWithPercent(substat)}</ToggleButton>)}\r\n          </ToggleButtonGroup>)}\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n    {paginationCard}\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            effFilter={effFilterSet}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && paginationCard}\r\n  </Container >\r\n}\r\n"],"sourceRoot":""}