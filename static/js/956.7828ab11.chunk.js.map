{"version":3,"file":"static/js/956.7828ab11.chunk.js","mappings":"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","sources":["Components/Artifact/SetEffectDisplay.tsx","Components/Character/StatDisplayComponent.tsx","Components/Conditional/ConditionalSelector.tsx","Components/Conditional/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Components/EnemyEditor.tsx","Components/ExpandButton.tsx","Components/HitModeEditor.tsx","Data/Characters/dataUtil.tsx","Formula/DisplayUtil.tsx","Formula/reaction.ts","PageCharacter/StatInput.tsx","ReactHooks/useWeapon.tsx"],"sourcesContent":["import { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Box, Typography } from \"@mui/material\"\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport BootstrapTooltip from \"../BootstrapTooltip\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport DocumentDisplay from \"../DocumentDisplay\"\r\nimport SqBadge from \"../SqBadge\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <CardDark sx={{ p: 2 }}>\r\n      <Typography variant=\"h6\" sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <span><SqBadge color=\"success\">{setNumKey}-Set</SqBadge></span>\r\n        <BootstrapTooltip placement=\"top\" title={<Typography>{setEffectText}</Typography>}>\r\n          <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n        </BootstrapTooltip>\r\n      </Typography>\r\n    </CardDark>\r\n    {document ? <DocumentDisplay sections={document} /> : null}\r\n  </Box>\r\n}\r\n","import { Masonry } from \"@mui/lab\"\r\nimport { CardContent, CardHeader, Divider } from \"@mui/material\"\r\nimport { Box } from \"@mui/system\"\r\nimport { useContext, useMemo } from \"react\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport { NodeFieldDisplay } from \"../FieldDisplay\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport { DataContext } from \"../../DataContext\"\r\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\r\nimport { DisplaySub } from \"../../Formula/type\"\r\nimport { NodeDisplay } from \"../../Formula/uiData\"\r\nimport { customRead } from \"../../Formula/utils\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { objectMap } from \"../../Util/Util\"\r\n\r\nexport default function StatDisplayComponent() {\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <Box sx={{ mr: -1, mb: -1 }}>\r\n    <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Masonry >\r\n  </Box>\r\n}\r\n\r\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\r\n  // TODO: Should still show the section if `oldData` contains some non-empty entries\r\n  if (!header || Object.values(displayNs).every(x => x.isEmpty)) return null\r\n  const { title, icon, action } = header\r\n  return <CardDark >\r\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([nodeKey, n]) => <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} />)}\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\r\nimport { Button, Divider, MenuItem } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport DropdownButton from '../DropdownMenu/DropdownButton';\r\nimport SqBadge from '../SqBadge';\r\nimport { DataContext } from '../../DataContext';\r\nimport IConditional from '../../Types/IConditional';\r\nimport { deepClone, layeredAssignment } from '../../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, disabled = false, }:\r\n  { conditional: IConditional, conditionalValue?: string, disabled?: boolean }) {\r\n  const { character, characterDispatch } = useContext(DataContext)\r\n  const setConditional = useCallback((v?: string) => {\r\n    const conditionalValues = deepClone(character.conditional)\r\n    layeredAssignment(conditionalValues, conditional.path, v)\r\n    characterDispatch({ conditional: conditionalValues })\r\n  }, [conditional, character, characterDispatch])\r\n\r\n  if (Object.keys(conditional.states).length === 1) {\r\n    const [stateKey, st] = Object.entries(conditional.states)[0]\r\n    const badge = st.name && <SqBadge color={\"success\"}>{st.name}</SqBadge>\r\n    return <Button fullWidth size=\"small\" onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n      {conditional.name} {badge}\r\n    </Button>\r\n  } else {//complex conditional\r\n    const state = conditionalValue ? conditional.states[conditionalValue] : undefined\r\n    const badge = state?.name && <SqBadge color={state ? \"success\" : \"secondary\"}>{state ? state.name : \"Not Active\"}</SqBadge>\r\n    return <DropdownButton fullWidth size=\"small\" title={<span>{conditional.name} {badge}</span>} disabled={disabled}>\r\n      <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\r\n        <span>Not Active</span>\r\n      </MenuItem>\r\n      <Divider />\r\n      {Object.entries(conditional.states).map(([stateKey, st]) =>\r\n        <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\r\n    </DropdownButton>\r\n  }\r\n}\r\n","import { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { CardContent, CardHeader, Divider, ListItem, Typography } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport { DataContext, dataContextObj } from \"../../DataContext\"\r\nimport { Data } from \"../../Formula/type\"\r\nimport { data as dataNode } from '../../Formula/utils'\r\nimport IConditional from \"../../Types/IConditional\"\r\nimport { evalIfFunc } from \"../../Util/Util\"\r\nimport BootstrapTooltip from \"../BootstrapTooltip\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../FieldDisplay\"\r\nimport ConditionalSelector from \"./ConditionalSelector\"\r\n\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  hideHeader?: boolean,\r\n  hideDesc?: boolean,\r\n  fieldContext?: dataContextObj\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false, fieldContext }: ConditionalDisplayProps) {\r\n  const dataContext = useContext(DataContext)\r\n  const { data } = dataContext\r\n  // TODO: as Data\r\n  const canShow = conditional.canShow ? !!(fieldContext ? data.get(dataNode(conditional.canShow, { target: fieldContext.data.data[0] } as Data)).value : data.get(conditional.canShow).value) : true\r\n  if (!canShow) return null\r\n  const condVal = data.get(conditional.value).value\r\n\r\n  const description = !hideDesc && evalIfFunc(conditional.description, data)\r\n  let { icon, title, action } = conditional.header ?? {}\r\n  icon = evalIfFunc(icon, data)\r\n  const fields = condVal && conditional.states[condVal]?.fields\r\n  const displayTitle = hideDesc ? title : title && <BootstrapTooltip placement=\"top\" title={<Typography>{description}</Typography>}>\r\n    <span>{title} <FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  return <CardDark>\r\n    {!hideHeader && conditional.header && <CardHeader avatar={icon} title={displayTitle} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n    {!hideHeader && conditional.header && <Divider />}\r\n    {!!conditional.name && <CardContent>\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={condVal} />\r\n    </CardContent>}\r\n    {fields &&\r\n      <FieldDisplayList sx={{ m: 0 }}>\r\n        {fields.map((field, i) => <FieldDisplay key={i} field={field} fieldContext={fieldContext} component={ListItem} />)}\r\n      </FieldDisplayList>\r\n    }\r\n  </CardDark>\r\n}\r\n","import { Box, CardHeader, ListItem, Divider, CardContent } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { DocumentSection } from \"../Types/sheet\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./Conditional/ConditionalDisplay\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\r\n\r\nexport default function DocumentDisplay({ sections, teamBuffOnly }: { sections: DocumentSection[], teamBuffOnly?: boolean }) {\r\n  if (!sections.length) return null\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sections.map((s, i) => <SectionDisplay section={s} key={i} teamBuffOnly={teamBuffOnly} />)}</Box>\r\n}\r\n\r\nfunction SectionDisplay({ section, teamBuffOnly }: { section: DocumentSection, teamBuffOnly?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  if (section.canShow && !section.canShow(data)) return null\r\n  if (teamBuffOnly && !section.teamBuff && !section.conditional?.teamBuff) return null\r\n  const talentText = evalIfFunc(section.text, data)\r\n  const description = evalIfFunc(section.fieldsDescription, data)\r\n  const fields = section.fields ?? []\r\n  let { icon, title, action } = section.fieldsHeader ?? {}\r\n  icon = evalIfFunc(icon, data)\r\n  return <>\r\n    {!teamBuffOnly && talentText && <div>{talentText}</div>}\r\n    {(!teamBuffOnly || section.teamBuff) && <CardDark>\r\n      {teamBuffOnly && talentText && <CardContent>{talentText}</CardContent>}\r\n      {section.fieldsHeader && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n      {section.fieldsHeader && <Divider />}\r\n      {teamBuffOnly && description && <CardContent>{description}</CardContent>}\r\n      {fields.length > 0 && <FieldDisplayList>\r\n        {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} component={ListItem} />)}\r\n      </FieldDisplayList>}\r\n    </CardDark>}\r\n    {!!section.conditional && (!teamBuffOnly || section.conditional.teamBuff) && <ConditionalDisplay conditional={section.conditional} hideDesc={!teamBuffOnly} />}\r\n  </>\r\n}\r\n","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ExpandMore } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useState } from 'react';\r\nimport StatInput from \"../PageCharacter/StatInput\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport KeyMap, { valueString } from '../KeyMap';\r\nimport { allElementsWithPhy, ElementKeyWithPhy } from \"../Types/consts\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport ExpandButton from \"./ExpandButton\";\r\nimport { uncoloredEleIcons } from \"./StatIcon\";\r\n\r\nexport function EnemyExpandCard() {\r\n  const { data } = useContext(DataContext)\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const eLvlNode = data.get(input.enemy.level)\r\n  const eDefRed = data.get(input.enemy.defRed)\r\n  const eDefIgn = data.get(input.enemy.defIgn)\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1} alignItems=\"center\">\r\n          <Grid container spacing={1}>\r\n            <Grid item>\r\n              <Chip size=\"small\" color=\"success\" label={<span>{KeyMap.get(eLvlNode.key)} <strong>{eLvlNode.value}</strong></span>} />\r\n            </Grid>\r\n            {allElementsWithPhy.map(element => <Grid item key={element}>\r\n              <Typography key={element} ><EnemyResText element={element} /></Typography>\r\n            </Grid>)}\r\n            <Grid item>\r\n              <Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>DEF Ignore {valueString(eDefIgn.value, eDefIgn.unit)}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n            size=\"small\"\r\n            sx={{ p: 0 }}\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\r\n  const { data } = useContext(DataContext)\r\n  const node = data.get(input.enemy[`${element}_res_`])\r\n  const immune = !isFinite(node.value)\r\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\r\n    <span >{uncoloredEleIcons[element]}RES <strong>{valueString(node.value, node.unit)}</strong></span>\r\n  return <ColorText color={element}>{content}</ColorText>\r\n}\r\n\r\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\r\n  const { data, character: { enemyOverride }, characterDispatch } = useContext(DataContext)\r\n  const defaultVal = 10\r\n\r\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\r\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\r\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\r\n  return <Grid container spacing={1}>\r\n    <Grid item {...bsProps}>\r\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n        To get the specific resistance values of enemies, please visit the wiki.\r\n      </Button>\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyLevel\")}</b>}\r\n        value={eLvl}\r\n        placeholder={KeyMap.getStr(\"enemyLevel\")}\r\n        defaultValue={data.get(input.lvl).value}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\r\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\r\n      />\r\n    </Grid>\r\n    {allElementsWithPhy.map(eleKey => {\r\n      const statKey = `${eleKey}_enemyRes_`\r\n      const val = enemyOverride[statKey]\r\n      const elementImmunity = val === Number.MAX_VALUE\r\n      return <Grid item key={eleKey} {...bsProps}>\r\n        <StatInput\r\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n          name={<ColorText color={eleKey}><b>{KeyMap.get(statKey)}</b></ColorText>}\r\n          value={val ? (elementImmunity ? Infinity : val) : 10}\r\n          placeholder={elementImmunity ? \"Immune \" : KeyMap.getStr(statKey)}\r\n          defaultValue={defaultVal}\r\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\r\n          disabled={elementImmunity}\r\n          percent\r\n        >\r\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} >\r\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n          </Button>\r\n        </StatInput>\r\n      </Grid>\r\n    })}\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefIgn_\")}</b>}\r\n        value={eDefRed}\r\n        placeholder={KeyMap.getStr(\"enemyDefIgn_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefRed_\")}</b>}\r\n        value={eDefIgn}\r\n        placeholder={KeyMap.getStr(\"enemyDefRed_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\r\nimport { useContext } from 'react';\r\nimport { infusionNode } from \"../Data/Characters/dataUtil\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport { ElementKey } from \"../Types/consts\";\r\nimport ColorText from \"./ColoredText\";\r\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\r\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\r\nimport StatIcon, { uncoloredEleIcons } from \"./StatIcon\";\r\nconst infusionVals = {\r\n  \"\": <span>No Team Melee Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Team Melee Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Team Melee Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\">\r\nexport function InfusionAuraDropdown(props: InfusionAuraDropdownProps) {\r\n  const { characterSheet, character: { infusionAura }, characterDispatch } = useContext(DataContext)\r\n  if (!characterSheet?.isMelee()) return null\r\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} {...props}>\r\n    {Object.entries(infusionVals).map(([key, text]) =>\r\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\r\n        selected={key === infusionAura} disabled={key === infusionAura}\r\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\">\r\nexport function ReactionToggle(props: ReactionToggleProps) {\r\n  const { data, character: { reactionMode }, characterDispatch } = useContext(DataContext)\r\n  const charEleKey = data.get(input.charEle).value as ElementKey\r\n  const infusion = data.get(infusionNode).value as ElementKey\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusion)) return null\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={reactionMode} onChange={(e, reactionMode) => characterDispatch({ reactionMode })} {...props}>\r\n    <ToggleButton value=\"\" >No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusion === \"pyro\") && <ToggleButton value=\"pyro_vaporize\"  >\r\n      <ColorText color=\"vaporize\">Vaporize(Pyro){StatIcon.hydro}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusion === \"pyro\") && <ToggleButton value={\"pyro_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusion === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"}  >\r\n      <ColorText color=\"vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusion === \"cryo\") && <ToggleButton value={\"cryo_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</ColorText>\r\n    </ToggleButton >}\r\n  </SolidToggleButtonGroup>\r\n}\r\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\">\r\nexport function HitModeToggle(props: HitModeToggleProps) {\r\n  const { character: { hitMode }, characterDispatch } = useContext(DataContext)\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={hitMode} onChange={(e, hitMode) => characterDispatch({ hitMode })} {...props} >\r\n    <ToggleButton value=\"avgHit\">Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\">Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\">Crit Hit DMG</ToggleButton>\r\n  </SolidToggleButtonGroup>\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nexport const infusionNode = stringPrio(\r\n  input.infusion.nonOverridableSelf,\r\n  input.infusion.team,\r\n  input.infusion.overridableSelf)\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Typography } from \"@mui/material\";\r\nimport { input } from \".\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport ColorText from \"../Components/ColoredText\";\r\nimport SqBadge from \"../Components/SqBadge\";\r\nimport { ArtifactSetKey, CharacterKey, ElementKey, WeaponKey } from \"../Types/consts\";\r\nimport { range } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport { DisplaySub } from \"./type\";\r\nimport { NodeDisplay, UIData } from \"./uiData\";\r\n\r\nconst errHeader = {\r\n  title: <ColorText color=\"warning\">ERROR</ColorText>\r\n}\r\n\r\nconst talentMap = {\r\n  normal: \"Normal Atk.\",\r\n  charged: \"Charged Atk.\",\r\n  plunging: \"Plunging Atk.\",\r\n  skill: \"Ele. Skill\",\r\n  burst: \"Ele. Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"1st Asc. Pass.\",\r\n  passive2: \"4th Asc. Pass.\",\r\n  passive3: \"Util. Pass.\",\r\n  ...Object.fromEntries(range(1, 6).map(i => [`constellation${i}`, `Const. ${i}`]))\r\n}\r\nexport async function getDisplayHeader(data: UIData, sectionKey: string): Promise<{\r\n  title: Displayable,\r\n  icon?: string,\r\n  action?: Displayable\r\n}> {\r\n  if (!sectionKey) return errHeader\r\n  if (sectionKey === \"basic\") return { title: \"Basic Stats\" }\r\n  else if (sectionKey === \"reaction\") return { title: \"Transformative Reactions\" }\r\n  else if (sectionKey.includes(\":\")) {\r\n    const [namespace, key] = sectionKey.split(\":\")\r\n    if (namespace === \"artifact\") {\r\n      const sheet = await ArtifactSheet.get(key as ArtifactSetKey)\r\n      if (!sheet) return errHeader\r\n      return {\r\n        title: sheet.name,\r\n        icon: sheet.defIconSrc\r\n      }\r\n    } else if (namespace === \"weapon\") {\r\n      const sheet = await WeaponSheet.get(key as WeaponKey)\r\n      if (!sheet) return errHeader\r\n      const asc = data.get(input.weapon.asc).value\r\n      return {\r\n        title: sheet.name,\r\n        icon: asc < 2 ? sheet.img : sheet.imgAwaken\r\n      }\r\n    }\r\n  } else {\r\n    const cKey = data.get(input.charKey).value\r\n    const cEle = data.get(input.charEle).value\r\n    if (!cKey || !cEle) return errHeader\r\n    const sheet = await CharacterSheet.get(cKey as CharacterKey)\r\n    const talentKey = [\"normal\", \"charged\", \"plunging\"].includes(sectionKey) ? \"auto\" : sectionKey\r\n    const talent = sheet?.getTalentOfKey(talentKey as any, cEle as ElementKey)\r\n    if (!talent) return errHeader\r\n    const actionText = talentMap[sectionKey]\r\n    return {\r\n      icon: talent.img,\r\n      title: talent.name,\r\n      action: actionText ? <SqBadge ><Typography variant=\"subtitle2\">{actionText}</Typography></SqBadge> : undefined\r\n    }\r\n  }\r\n  return errHeader\r\n}\r\n/**\r\n * Use this function to reorganize the sections to have basic stats at the beginning, and reation at the end.\r\n * @param data\r\n * @returns\r\n */\r\nexport function getDisplaySections(data: UIData,): [string, DisplaySub<NodeDisplay>][] {\r\n  const display = data.getDisplay()\r\n  const sections = Object.entries(display)\r\n  const basic = sections.filter(([k]) => k === \"basic\")\r\n  const reaction = sections.filter(([k]) => k === \"reaction\")\r\n  const weapon = sections.filter(([k]) => k.startsWith(\"weapon\"))\r\n  const artifact = sections.filter(([k]) => k.startsWith(\"artifact\"))\r\n  const rest = sections.filter(([k]) => k !== \"basic\" && k !== \"reaction\" && !k.startsWith(\"weapon\") && !k.startsWith(\"artifact\"))\r\n\r\n  return [\r\n    ...basic,\r\n    ...rest,\r\n    ...weapon,\r\n    ...artifact,\r\n    ...reaction\r\n  ]\r\n}\r\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//   or if the permalink is dead,\r\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//\r\n// PlayerElementLevelCo\r\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\r\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\r\n// PlayerShieldLevelCo\r\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\r\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\r\n\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\r\nimport { ReactNode } from \"react\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport TextButton from \"../Components/TextButton\"\r\n\r\ntype StatInputInput = ButtonGroupProps & {\r\n  name: Displayable,\r\n  children?: ReactNode,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  onReset?: () => void\r\n}\r\nconst FlexButtonGroup = styled(ButtonGroup)({\r\n  display: \"flex\"\r\n})\r\n\r\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\r\n\r\n  return <FlexButtonGroup {...restProps} >\r\n    {children}\r\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\r\n      {name}\r\n    </TextButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n      <CustomNumberInput\r\n        sx={{ px: 1 }}\r\n        inputProps={{\r\n          sx: { textAlign: \"right\" }\r\n        }}\r\n        float={percent}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onValueChange}\r\n        disabled={disabled}\r\n        endAdornment={percent ? \"%\" : undefined}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\r\n      <Replay />\r\n    </Button>\r\n  </FlexButtonGroup>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\r\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}\r\n"],"names":["SetEffectDisplay","setKey","setNumKey","sheet","usePromise","ArtifactSheet","setEffectText","setEffectDesc","document","setEffectDocument","display","flexDirection","gap","sx","p","variant","justifyContent","color","placement","title","icon","faInfoCircle","sections","StatDisplayComponent","data","useContext","DataContext","getDisplaySections","mr","mb","columns","xs","sm","md","spacing","map","key","Nodes","Section","displayNs","sectionKey","oldData","header","getDisplayHeader","displayNsReads","useMemo","objectMap","n","nodeKey","customRead","Object","values","every","x","isEmpty","action","avatar","size","m","src","titleTypographyProps","entries","node","oldValue","get","value","undefined","ConditionalSelector","conditional","conditionalValue","disabled","character","characterDispatch","setConditional","useCallback","v","conditionalValues","deepClone","layeredAssignment","path","keys","states","length","stateKey","st","badge","name","SqBadge","Button","fullWidth","onClick","startIcon","CheckBox","CheckBoxOutlineBlank","state","DropdownButton","MenuItem","selected","Divider","ConditionalDisplay","hideHeader","hideDesc","fieldContext","canShow","dataNode","target","condVal","description","evalIfFunc","fields","displayTitle","BootstrapTooltip","Typography","CardDark","CardHeader","CardContent","FieldDisplay","field","i","component","ListItem","DocumentDisplay","teamBuffOnly","Box","s","SectionDisplay","section","teamBuff","talentText","text","fieldsDescription","fieldsHeader","EnemyExpandCard","useState","expanded","setexpanded","toggle","eLvlNode","input","eDefRed","eDefIgn","container","item","flexGrow","alignItems","label","KeyMap","allElementsWithPhy","element","EnemyResText","valueString","unit","expand","in","timeout","unmountOnExit","pt","EnemyEditor","content","isFinite","uncoloredEleIcons","bsProps","enemyOverride","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","height","href","rel","bgcolor","t","palette","contentLight","main","width","placeholder","defaultValue","onValueChange","type","statKey","onReset","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","percent","faCheckSquare","faSquare","className","ExpandButton","styled","props","other","theme","transform","marginLeft","transition","transitions","create","duration","shortest","infusionVals","InfusionAuraDropdown","characterSheet","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","infusion","infusionNode","includes","exclusive","baseColor","onChange","e","StatIcon","HitModeToggle","hitMode","charCurves","_charCurves","commonBasic","objectKeyMap","critRate_","stringPrio","inferredHitEle","lookup","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","infoMut","healNodeTalent","dataObjForCharacterSheet","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","tally","reaction","reactions","physical_dmg_","stat","list","curves","push","ascensions","some","NaN","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","errHeader","talentMap","normal","charged","plunging","skill","burst","passive","passive1","passive2","passive3","fromEntries","range","split","namespace","defIconSrc","WeaponSheet","asc","img","imgAwaken","cKey","cEle","CharacterSheet","talentKey","talent","getTalentOfKey","actionText","getDisplay","filter","weapon","startsWith","artifact","rest","k","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","trans","transformativeReactions","multi","variants","swirl","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","geo","crystallize","absorbableEle","overloaded","electrocharged","superconduct","FlexButtonGroup","ButtonGroup","StatInput","children","restProps","whiteSpace","flexBasis","px","inputProps","textAlign","float","endAdornment","useWeapon","weaponID","DatabaseContext","database","_getWeapon","setWeapon","useEffect","followWeapon"],"sourceRoot":""}