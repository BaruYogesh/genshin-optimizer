{"version":3,"sources":["Components/CustomFormControl.tsx","Components/InfoComponent.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Artifact/Component/ArtifactSetDropDownMenuFragment.tsx","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Artifact/UploadDisplay.tsx","Util/BorrowManager.ts","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","InfoComponent","pageKey","text","modalTitle","children","dbStorage","get","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","set","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","onClick","icon","faTimes","Body","fallback","animation","Footer","ns","key18","faQuestionCircle","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","t","useTranslation","database","useContext","DatabaseContext","databaseArtifact","updateDatabaseArtifact","followArt","sheet","usePromise","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setArtLocation","editable","localDatabase","art","characterSheet","CharacterSheet","location","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","mainStatLevel","Math","levelVariant","floor","mainStatVal","valueStringWithUnit","Artifact","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","name","nameWIthIcon","faBriefcase","slotName","getSlotName","slotDesc","getSlotDesc","slotDescEle","placement","overlay","faInfoCircle","setEffects","setDesc","Object","keys","map","setNumKey","setNum","setEffectDesc","setDescEle","border","md","src","slotIcons","thumbnail","updateArt","faLock","faLockOpen","stars","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","style","opacity","has","valid","process","Toggle","Menu","Item","Divider","onSelect","faEdit","faBan","faChartLine","faTrashAlt","PercentBadge","toFixed","badgeColor","ArtifactSetDropDownMenuFragment","sheets","click","Fragment","entries","setKeysByRarities","reverse","star","sets","Dropdown","Trans","i18nKey","nameWithIcon","starColor","r","g","b","schedulers","init","deinit","data","this","callback","a","refCount","box","result","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","fromEntries","allArtifactRarities","score","reduce","count","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","relevantMainStatValues","filter","unit","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","uploadDisplayReset","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","flexArtifact","artifactDispatch","artifactSheets","useMemo","validateArtifact","errors","deepClone","reset","update","newValue","newSheet","pick","prefer","slots","setSubstat","isValid","isDup","findDuplicates","duplicated","upgraded","dupId","InputGroup","as","Prepend","DropdownButton","Append","title","Text","l","sKey","getStatNameWithPercent","ItemText","mainStatK","FormControl","valueString","readOnly","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","createArt","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","sort","val","indexOf","ButtonGroup","artifactSubstatRollCorrection","action","oldIndex","current","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterExcluded","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","useForceUpdate","dbDirty","forceUpdate","effFilterSet","deleteArtifact","removeArt","editArtifact","scrollIntoView","behavior","cancelEditArtifact","pageview","followAnyArt","locationDisplay","excludedDisplay","allArtifacts","_getArts","artifacts","filterKey","some","item","numUnequip","numExclude","numInclude","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","faUserShield","paginationCard","showingValue","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","faUserSlash","faTrash","ButtonToolbar","slicep","n"],"mappings":"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","file":"static/js/14.dbe5a1f5.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { dbStorage } from \"../Database/DBStorage\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport { TransWrapper } from \"./Translate\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    dbStorage.set(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><TransWrapper ns=\"ui\" key18=\"info\" /> <FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","import { faBan, faBriefcase, faChartLine, faEdit, faInfoCircle, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useContext, useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Character/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext, database as localDatabase } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: ICachedArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as ICachedArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact, database])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = (Math.floor(Math.max(level - 1, 0) / 4) + 1) + \"roll\"\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ? characterSheet.nameWIthIcon : <span><FontAwesomeIcon icon={faBriefcase} /> {t`filterLocation.inventory`}</span>\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescEle = slotDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"slotdesc-tooltip\">{slotDesc}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n  const setEffects = sheet?.setEffects\r\n  const setDesc = sheet && setEffects && <Tooltip id=\"setdesc-tooltop\">\r\n    {Object.keys(setEffects).map(setNumKey => <span key={setNumKey} className=\"text-left\">\r\n      <h6 className=\"mb-0\"><Badge variant=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</Badge></h6>\r\n      <p>{sheet.setEffectDesc(setNumKey as any)}</p>\r\n    </span>)}\r\n  </Tooltip>\r\n  const setDescEle = setDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={setDesc}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n\r\n  return (<Card className=\"h-100\" border={`${rarity}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${rarity}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-2\">\r\n          <h6><strong>{slotName} {slotDescEle}</strong></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} /> <span className=\"float-right mr-4\"> <Button size=\"sm\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}><FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" /></Button></span></div>\r\n          <div><small><Stars stars={rarity} /></small></div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <Badge variant={levelVariant} ><strong className=\"text-dark\">{` +${level}`}</strong></Badge> {sheet?.name ?? \"Artifact Set\"} {setDescEle}\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <Row>\r\n          <Col ><small>{t`editor.curSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={currentEfficiency} valid={artifactValid} /></Col>\r\n        </Row>\r\n        {currentEfficiency !== maxEfficiency && <Row>\r\n          <Col ><small>{t`editor.maxSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>\r\n        </Row>}\r\n      </div>\r\n      {process.env.NODE_ENV === \"development\" && <span className=\"text-warning\">{id || `\"\"`} </span>}\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}><FontAwesomeIcon icon={faBriefcase} /> Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        {editable && <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\" onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"exclude-artifact-tip\">{t`excludeArtifactTip`}</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.updateArt({ exclude: !exclude }, id)} className=\"rounded-0\" variant={exclude ? \"danger\" : \"success\"}>\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger>\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card >)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import React from \"react\"\r\nimport { Dropdown } from \"react-bootstrap\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { ArtifactSetKey, Rarity } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\ntype Data = {\r\n  sheets?: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  click: (ArtifactSetKey) => void\r\n}\r\nexport default function ArtifactSetDropDownMenuFragment({ sheets, click }: Data) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <React.Fragment>\r\n    {sheets && Object.entries(ArtifactSheet.setKeysByRarities(sheets)).reverse().map(([star, sets], i) =>\r\n      <React.Fragment key={star}>\r\n        {i > 0 && <Dropdown.Divider />}\r\n        <Dropdown.Header><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans></Dropdown.Header>\r\n        {sets.map(setKey => <Dropdown.Item key={setKey} onClick={() => click(setKey)}>{sheets[setKey].nameWithIcon}</Dropdown.Item >)}\r\n      </React.Fragment>)}\r\n  </React.Fragment>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, ICachedArtifact, IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }: { setState: (art: IArtifact) => void, setReset: (reset: () => void) => void, artifactInEditor: boolean }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.rarity}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n            </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<ArtifactRarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{valueStringWithUnit(value.value, Stat.getStatUnit(value.key))}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueStringWithUnit(value, unit)}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useContext, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { validateArtifact } from '../Database/validation';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, IArtifact, ISubstat } from '../Types/artifact';\r\nimport { ArtifactRarity, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\nimport artifactSubstatRollCorrection from './artifact_sub_rolls_correction_gen.json'\r\n\r\ntype ArtifactEditorArgument = { artifactIdToEdit: string, cancelEdit: () => void }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nlet uploadDisplayReset: (() => void) | undefined\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: ArtifactEditorArgument) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const database = useContext(DatabaseContext)\r\n  const [flexArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const { artifact, errors } = useMemo(() => {\r\n    return flexArtifact ? validateArtifact(flexArtifact, artifactIdToEdit) : { artifact: undefined, errors: [] }\r\n  }, [flexArtifact, artifactIdToEdit])\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    const databaseArtifact = database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n  }, [artifactIdToEdit, database])\r\n\r\n  const getUpdloadDisplayReset = (reset: () => void) => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { dupId, isDup } = useMemo(() => {\r\n    if (artifact === undefined || artifact.id) return { isDup: false }\r\n    const { duplicated, upgraded } = database.findDuplicates(artifact)\r\n    return { dupId: duplicated[0] ?? upgraded[0], isDup: duplicated.length !== 0 }\r\n  }, [artifact, database])\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = artifact ? Artifact.getArtifactEfficiency(artifact, allSubstatFilter) : {}\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.nameWithIcon ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(setKey => update({ setKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={rarity} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as ArtifactRarity[]).map((rarity, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(rarity)} onClick={() => update({ rarity })}>\r\n                {<Stars stars={rarity} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2 w-100 d-flex flex-row\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {sheet?.slots?.map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <InputGroup.Text as={InputGroup.Append} className=\"flex-grow-1\">{sheet?.getSlotName(artifact!.slotKey) ?? t`editor.unknownPieceName` as any}</InputGroup.Text>\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${valueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), Stat.getStatUnit(artifact.mainStatKey))}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substats Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={isValid} value={isValid ? currentEfficiency : \"ERR\"} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substats Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={isValid} value={isValid ? maxEfficiency : \"ERR\"} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? (isDup ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {!isValid && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { artifact?.id ? database.updateArt(artifact!, artifact.id) : database.createArt(artifact!); reset() }} disabled={!artifactInEditor || !isValid} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? t`editor.btnSave` : t`editor.btnAdd`}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {!!dupId && <Button className=\"float-right\" onClick={() => { database.updateArt(artifact!, dupId!); reset() }} disabled={!isValid} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, className: string }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = [...rolls].sort().map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key)\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : undefined}\r\n        onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          let newValue = valueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n","import { faBan, faBriefcase, faChartLine, faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserShield, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useContext, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, ButtonToolbar, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { CharacterSelectionDropdownList } from '../Character/CharacterSelection';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { dbStorage } from '../Database/DBStorage';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, ICachedArtifact, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterExcluded: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50,\r\n  effFilter: [...allSubstats]\r\n})\r\nfunction filterReducer(state, action) {\r\n  //reset all except the efficiency filter, since its a separate UI with its own reset\r\n  if (action.type === \"reset\") return { ...initialFilter(), effFilter: state.effFilter }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(dbStorage.get(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const { effFilter } = filters\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback(\r\n    (id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  useEffect(() => {\r\n    dbStorage.set(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numInclude, numExclude } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterExcluded = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const allArtifacts = database._getArts()\r\n    const artifacts: ICachedArtifact[] = allArtifacts.filter(art => {\r\n      if (filterExcluded) {\r\n        if (filterExcluded === \"excluded\" && !art.exclude) return false\r\n        if (filterExcluded === \"included\" && art.exclude) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.rarity)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).map((art) => {\r\n      switch (sortType) {\r\n        case \"quality\": return { value: [art.rarity], art }\r\n        case \"level\": return { value: [art.level, art.rarity], art }\r\n        case \"efficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency], art }\r\n        case \"mefficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency], art }\r\n      }\r\n      return { value: [0], art }\r\n    }).sort((a, b) => {\r\n      for (let i = 0; i < a.value.length; i++) {\r\n        if (a.value[i] !== b.value[i])\r\n          return (a.value[i] - b.value[i]) * (ascending ? 1 : -1)\r\n      }\r\n      return 0\r\n    }).map(item => item.art)\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { artifacts, totalArtNum: allArtifacts.length, numInclude, numExclude, numUnequip, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty, effFilterSet, database])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterExcluded = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation), [filterLocation])\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"filterLocation.any\")\r\n  else if (filterLocation === \"Inventory\") locationDisplay = <span><FontAwesomeIcon icon={faBriefcase} /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (filterLocation === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (filterExcluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (filterExcluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => database.setArtLocation(art.id!, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => database.removeArt(art.id!))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifacts.map(art => database.updateArt({ exclude: true }, art.id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifacts.map(art => database.updateArt({ exclude: false }, art.id))\r\n\r\n  const paginationCard = useMemo(() => {\r\n    const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n    return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }, [numPages, currentPageIndex, artifactsToShow.length, artifacts.length, totalArtNum, t])\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"resetFilters\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(filterArtSetKey => filterDispatch({ filterArtSetKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><FontAwesomeIcon icon={faBriefcase} /> <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><FontAwesomeIcon icon={faUserShield} /> <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterExcluded ? \"success\" : \"primary\"} >\r\n                    {excludedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"excluded\" })}><span><FontAwesomeIcon icon={faBan} /> <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterExcluded: \"included\" })}><span><FontAwesomeIcon icon={faChartLine} /> <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numInclude} onClick={excludeArtifacts}><FontAwesomeIcon icon={faBan} /> <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numExclude} onClick={includeArtifacts}><FontAwesomeIcon icon={faChartLine} /> <Trans t={t} i18nKey=\"button.includeArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Efficiency Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ effFilter: [...allSubstats] })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"ui:reset\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ButtonToolbar as={Row} className=\"w-100 d-flex flex-row\">\r\n          {[[0, 6], [6]].map(slicep => <ToggleButtonGroup key={slicep.toString()} as={Col} type=\"checkbox\" value={effFilter} onChange={n => filterDispatch({ effFilter: n })} className=\"flex-grow-1 mb-2\">\r\n            {allSubstats.slice(...slicep).map(substat => <ToggleButton key={substat} value={substat} variant={effFilter.includes(substat) ? \"success\" : \"primary\"}>{Stat.getStatNameWithPercent(substat)}</ToggleButton>)}\r\n          </ToggleButtonGroup>)}\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n    {paginationCard}\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            effFilter={effFilterSet}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && paginationCard}\r\n  </Container >\r\n}\r\n"],"sourceRoot":""}