{"version":3,"file":"static/js/328.a3fcef01.chunk.js","mappings":"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","sources":["Components/CustomNumberInput.tsx","Components/InfoTooltip.tsx","Components/StatFilterCard.tsx","GlobalSettings.tsx","PageArtifact/ArtifactCard.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/PercentBadge.tsx","PageArtifact/RollProbability.ts","PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting.ts","ReactHooks/useArtifact.tsx"],"sourcesContent":["import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, TooltipProps } from \"@mui/material\";\r\nimport BootstrapTooltip from \"./BootstrapTooltip\";\r\n\r\ninterface ITooltipProps extends Omit<TooltipProps, \"children\"> {\r\n  className?: string,\r\n}\r\nconst InfoTooltip = ({ className, ...props }: ITooltipProps) =>\r\n  <BootstrapTooltip placement=\"top\" {...props} className={className}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faInfoCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\nexport default InfoTooltip\r\n","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, MenuItem, Typography } from '@mui/material';\r\nimport { Box } from '@mui/system';\r\nimport React, { useCallback, useContext, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CharacterContext } from '../CharacterContext';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatColoredWithUnit, StatKey } from '../KeyMap';\r\nimport useBuildSetting from '../PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting';\r\nimport { ElementKey } from '../Types/consts';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport InfoTooltip from './InfoTooltip';\r\nexport default function StatFilterCard({ disabled = false }: { disabled?: boolean }) {\r\n  const { t } = useTranslation(\"page_character\")\r\n  const { character: { key: characterKey } } = useContext(CharacterContext)\r\n  const { data } = useContext(DataContext)\r\n  const { buildSetting: { statFilters }, buildSettingDispatch } = useBuildSetting(characterKey)\r\n  const setStatFilters = useCallback((statFilters: Dict<StatKey, number>) => buildSettingDispatch({ statFilters }), [buildSettingDispatch],)\r\n\r\n  const statKeys = useMemo(() => {\r\n    const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n    if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n    const charEle = data.get(input.charEle).value as ElementKey\r\n    statKeys.push(`${charEle}_dmg_`)\r\n    return statKeys\r\n  }, [data])\r\n\r\n  const remainingKeys = useMemo(() => statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key)), [statKeys, statFilters])\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <Box>\r\n    <CardLight>\r\n      <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n        <Typography>{t`tabOptimize.constraintFilter.title`}</Typography>\r\n        <InfoTooltip title={<Typography>{t`tabOptimize.constraintFilter.tooltip`}</Typography>} />\r\n      </CardContent>\r\n    </CardLight>\r\n    <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\r\n      {Object.entries(statFilters).map(([statKey, min]) => {\r\n        return <StatFilterItem key={statKey} statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n          const statFilters_ = { ...statFilters }\r\n          delete statFilters_[statKey]\r\n          setStatFilters({ ...statFilters_ })\r\n        }} />\r\n      })}\r\n      <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n    </Box>\r\n  </Box>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: StatKey, statKeys: StatKey[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? <StatColoredWithUnit statKey={statKey} /> : \"New Stat\"}\r\n      disabled={disabled}\r\n      color={statKey ? \"success\" : \"secondary\"}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}><StatColoredWithUnit statKey={sKey} /></MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey || disabled}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Stat Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2, }}\r\n        inputProps={{ sx: { textAlign: \"right\" } }}\r\n        endAdornment={KeyMap.unit(statKey)}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { faBan, faChartLine, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { BusinessCenter, Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, Chip, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { lazy, Suspense, useCallback, useContext, useMemo, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport SlotNameWithIcon from '../Components/Artifact/SlotNameWIthIcon';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterAutocomplete from '../Components/Character/CharacterAutocomplete';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\r\nimport InfoTooltip from '../Components/InfoTooltip';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useArtifact from '../ReactHooks/useArtifact';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstatKeys, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey, Rarity } from '../Types/consts';\r\nimport { clamp, clamp01 } from '../Util/Util';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability';\r\n\r\nconst ArtifactEditor = lazy(() => import('./ArtifactEditor'))\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onClick?: (id: string) => void,\r\n  onDelete?: (id: string) => void,\r\n  mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Dict<SubstatKey, number>\r\n  disableEditSetSlot?: boolean\r\n  editor?: boolean,\r\n  canExclude?: boolean\r\n  canEquip?: boolean,\r\n  extraButtons?: JSX.Element\r\n}\r\nconst allSubstatFilter = new Set(allSubstatKeys)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onClick, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter, disableEditSetSlot = false, editor = false, canExclude = false, canEquip = false, extraButtons }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const databaseArtifact = useArtifact(artifactId)\r\n  const sheet = usePromise(() => ArtifactSheet.get((artifactObj ?? databaseArtifact)?.setKey), [artifactObj, databaseArtifact])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.arts.setLocation(artifactId!, charKey)\r\n  const editable = !artifactObj\r\n  const [showEditor, setshowEditor] = useState(false)\r\n  const onHideEditor = useCallback(() => setshowEditor(false), [setshowEditor])\r\n  const onShowEditor = useCallback(() => editable && setshowEditor(true), [editable, setshowEditor])\r\n\r\n  const wrapperFunc = useCallback(children => <CardActionArea onClick={() => artifactId && onClick?.(artifactId)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</CardActionArea>, [onClick, artifactId],)\r\n  const falseWrapperFunc = useCallback(children => <Box sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }} >{children}</Box>, [])\r\n\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const mainStatUnit = KeyMap.unit(mainStatKey)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey)\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <InfoTooltip title={<Box>\r\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}><Typography variant='h6'>{slotName}</Typography></Suspense>\r\n    <Typography>{slotDesc}</Typography>\r\n  </Box>} />\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <InfoTooltip title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`artifact:setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  } />\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    {editor && <Suspense fallback={false}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={showEditor ? artifactId : \"\"}\r\n        cancelEdit={onHideEditor}\r\n        disableEditSetSlot={disableEditSetSlot}\r\n      />\r\n    </Suspense>}\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <ConditionalWrapper condition={!!onClick} wrapper={wrapperFunc} falseWrapper={falseWrapperFunc}>\r\n        <Box className={`grad-${rarity}star`} sx={{ position: \"relative\", width: \"100%\" }}>\r\n          {!onClick && <IconButton color=\"primary\" disabled={!editable} onClick={() => database.arts.set(id, { lock: !lock })} sx={{ position: \"absolute\", right: 0, bottom: 0, zIndex: 2 }}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>}\r\n          <Box sx={{ pt: 2, px: 2, position: \"relative\", zIndex: 1 }}>\r\n            {/* header */}\r\n            <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", gap: 1, mb: 1 }}>\r\n              <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n              {!slotName && <Skeleton variant=\"text\" width={100} />}\r\n              {slotName && <Typography noWrap sx={{ textAlign: \"center\", backgroundColor: \"rgba(100,100,100,0.35)\", borderRadius: \"1em\", px: 1 }}><strong>{slotName}</strong></Typography>}\r\n              {!slotDescTooltip && <Skeleton width={10} />}\r\n              {slotDescTooltip}\r\n            </Box>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\" color={`${KeyMap.getVariant(mainStatKey)}.main`}>\r\n              <span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>\r\n                <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{cacheValueString(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, KeyMap.unit(mainStatKey))}{mainStatUnit}</ColorText>\r\n              </strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Box>\r\n          <Box sx={{ height: \"100%\", position: \"absolute\", right: 0, top: 0 }}>\r\n            <Box\r\n              component=\"img\"\r\n              src={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"auto\"\r\n              height=\"100%\"\r\n              sx={{ float: \"right\" }}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0, width: \"100%\" }}>\r\n          {substats.map((stat: ICachedSubstat) => !!stat.value && <SubstatDisplay key={stat.key} stat={stat} effFilter={effFilter} rarity={rarity} />)}\r\n          <Box sx={{ display: \"flex\", my: 1 }}>\r\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.curSubEff`}</Typography>\r\n            <PercentBadge value={currentEfficiency} max={900} valid={artifactValid} />\r\n          </Box>\r\n          {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n            <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`artifact:editor.maxSubEff`}</Typography>\r\n            <PercentBadge value={maxEfficiency} max={900} valid={artifactValid} />\r\n          </Box>}\r\n          <Box flexGrow={1} />\r\n          {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n          <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n        </CardContent>\r\n      </ConditionalWrapper>\r\n      <Box sx={{ p: 1, display: \"flex\", gap: 1, justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        {editable && canEquip\r\n          ? <CharacterAutocomplete sx={{ flexGrow: 1 }} size=\"small\" showDefault\r\n            defaultIcon={<BusinessCenter />} defaultText={t(\"ui:inventory\")}\r\n            value={location} onChange={equipOnChar} />\r\n          : <LocationName location={location} />}\r\n        {editable && <ButtonGroup sx={{ height: \"100%\" }}>\r\n          {editor && <Tooltip title={<Typography>{t`artifact:edit`}</Typography>} placement=\"top\" arrow>\r\n            <Button color=\"info\" size=\"small\" onClick={onShowEditor} >\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>\r\n          </Tooltip>}\r\n          {canExclude && <Tooltip title={<Box>\r\n            <Typography>{t`artifact:excludeArtifactTip`}</Typography>\r\n            <Typography><ColorText color={exclude ? \"error\" : \"success\"}>{t(`artifact:${exclude ? \"excluded\" : \"included\"}`)}</ColorText></Typography>\r\n          </Box>} placement=\"top\" arrow>\r\n            <Button onClick={() => database.arts.set(id, { exclude: !exclude })} color={exclude ? \"error\" : \"success\"} size=\"small\" >\r\n              <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n            </Button>\r\n          </Tooltip>}\r\n          {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n            <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n          </Button>}\r\n          {extraButtons}\r\n        </ButtonGroup>}\r\n      </Box>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\nfunction SubstatDisplay({ stat, effFilter, rarity }: { stat: ICachedSubstat, effFilter: Set<SubstatKey>, rarity: Rarity }) {\r\n  const numRolls = stat.rolls?.length ?? 0\r\n  const maxRoll = stat.key ? Artifact.maxSubstatValues(stat.key) : 0\r\n  const rollData = useMemo(() => stat.key ? Artifact.getSubstatRollData(stat.key, rarity) : [], [stat.key, rarity])\r\n  const rollOffset = 7 - rollData.length\r\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n  const efficiency = stat.efficiency ?? 0\r\n  const effOpacity = clamp01(0.5 + (efficiency / (100 * 5)) * 0.5) //divide by 6 because an substat can have max 6 rolls\r\n  const statName = KeyMap.getStr(stat.key)\r\n  const unit = KeyMap.unit(stat.key)\r\n  const inFilter = stat.key && effFilter.has(stat.key)\r\n  const progresses = useMemo(() => inFilter && <Box display=\"flex\" gap={0.25} height=\"1.3em\">\r\n    {[...stat.rolls].sort().map((v, i) => <SmolProgress key={`${i}${v}`} value={100 * v / maxRoll} color={`roll${clamp(rollOffset + rollData.indexOf(v), 1, 6)}.main`} />)}\r\n  </Box>, [inFilter, stat.rolls, maxRoll, rollData, rollOffset])\r\n  return (<Box display=\"flex\" gap={1} alignContent=\"center\">\r\n    <Typography sx={{ flexGrow: 1 }} color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{StatIcon[stat.key]} {statName}{`+${cacheValueString(stat.value, KeyMap.unit(stat.key))}${unit}`}</Typography>\r\n    {progresses}\r\n    <Typography sx={{ opacity: effOpacity, minWidth: 40, textAlign: \"right\" }}>{inFilter ? `${efficiency.toFixed()}%` : \"-\"}</Typography>\r\n  </Box>)\r\n}\r\nexport function SmolProgress({ color = \"red\", value = 50 }) {\r\n  return <Box sx={{ width: 7, height: \"100%\", bgcolor: color, overflow: \"hidden\", borderRadius: 1, display: \"inline-block\" }}>\r\n    <Box sx={{ width: 10, height: `${100 - clamp(value, 0, 100)}%`, bgcolor: \"gray\" }} />\r\n  </Box>\r\n}\r\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\r\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\r\nimport Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { probability } from \"./RollProbability\";\r\nimport { SubstatKey } from \"../Types/artifact\";\r\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\r\nexport const artifactSortKeysTC = [\"probability\"] as const\r\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\r\nexport type FilterOption = {\r\n  artSetKeys: ArtifactSetKey[],\r\n  rarity: ArtifactRarity[],\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  slotKeys: SlotKey[],\r\n  mainStatKeys: MainStatKey[],\r\n  substats: SubstatKey[]\r\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\r\n  exclusion: Array<\"excluded\" | \"included\">,\r\n  locked: Array<\"locked\" | \"unlocked\">,\r\n}\r\n\r\ntype ArtifactSortFilter = {\r\n  filterOption: FilterOption\r\n  ascending: boolean\r\n  sortType: ArtifactSortKey\r\n}\r\nexport function initialFilterOption(): FilterOption {\r\n  return {\r\n    artSetKeys: [],\r\n    rarity: [...allArtifactRarities],\r\n    levelLow: 0,\r\n    levelHigh: 20,\r\n    slotKeys: [...allSlotKeys],\r\n    mainStatKeys: [],\r\n    substats: [],\r\n    location: \"\",\r\n    exclusion: [\"excluded\", \"included\"],\r\n    locked: [\"locked\", \"unlocked\"],\r\n  }\r\n}\r\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\r\n  filterOption: initialFilterOption(),\r\n  ascending: false,\r\n  sortType: artifactSortKeys[0],\r\n})\r\n\r\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\r\n  return {\r\n    rarity: {\r\n      getValue: art => art.rarity ?? 0,\r\n      tieBreaker: \"level\"\r\n    },\r\n    level: {\r\n      getValue: art => art.level ?? 0,\r\n      tieBreaker: \"artsetkey\"\r\n    },\r\n    artsetkey: {\r\n      getValue: art => art.setKey ?? \"\",\r\n      tieBreaker: \"level\"\r\n    },\r\n    efficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\r\n    },\r\n    mefficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\r\n    },\r\n    probability: {\r\n      getValue: art => {\r\n        if (!Object.keys(probabilityFilter).length) return 0\r\n        const prob = (art as any).probability\r\n        if (prob === undefined) return probability(art, probabilityFilter);\r\n        return prob\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\r\n  return {\r\n    exclusion: (art, filter) => {\r\n      if (!filter.includes(\"included\") && !art.exclude) return false\r\n      if (!filter.includes(\"excluded\") && art.exclude) return false\r\n      return true\r\n    },\r\n    locked: (art, filter) => {\r\n      if (!filter.includes(\"locked\") && art.lock) return false\r\n      if (!filter.includes(\"unlocked\") && !art.lock) return false\r\n      return true\r\n    },\r\n    location: (art, filter) => {\r\n      if (!filter) return true\r\n      if (filter === \"Inventory\" && !art.location) return true\r\n      if (filter === \"Equipped\" && art.location) return true\r\n      if (filter === art.location) return true\r\n      return false\r\n    },\r\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\r\n    slotKeys: (art, filter) => filter.includes(art.slotKey),\r\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\r\n    levelLow: (art, filter) => filter <= art.level,\r\n    levelHigh: (art, filter) => filter >= art.level,\r\n    rarity: (art, filter) => filter.includes(art.rarity),\r\n    substats: (art, filter) => {\r\n      for (const filterKey of filter)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, max = 1, valid }: {\r\n  valid?: boolean,\r\n  value: number | string,\r\n  max?: number\r\n}) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor((value / max) * 10) - 4, 1, 6)}`, value.toFixed() + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from '../Data/Artifacts/Artifact'\r\nimport ArtifactMainStatsData from '../Data/Artifacts/artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n//\r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n *\r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n *\r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/**\r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n *\r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   *\r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   *\r\n   * Then\r\n   *\r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   *\r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   *\r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   *\r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n *\r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../../../../Database/Database\";\r\nimport { BuildSetting, BuildSettingReducerAction } from \"../../../../Database/Data/BuildsettingData\";\r\nimport { CharacterKey } from \"../../../../Types/consts\";\r\n\r\nexport default function useBuildSetting(characterKey: CharacterKey) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [buildSetting, setBuildSetting] = useState(() => database.buildSettings.get(characterKey))\r\n  useEffect(() => setBuildSetting(database.buildSettings.get(characterKey)), [database, characterKey])\r\n  useEffect(() =>\r\n    database.buildSettings.follow(characterKey, setBuildSetting),\r\n    [characterKey, setBuildSetting, database])\r\n  const buildSettingDispatch = useCallback((action: BuildSettingReducerAction) => characterKey && database.buildSettings.set(characterKey, action), [characterKey, database],)\r\n\r\n  return { buildSetting: buildSetting as BuildSetting, buildSettingDispatch }\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database.arts.get(artifactID))\r\n  useEffect(() => setArtifact(database.arts.get(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.arts.follow(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n"],"names":["StyledInputBase","styled","InputBase","theme","backgroundColor","palette","primary","main","transition","dark","Wrapper","Button","padding","overflow","width","height","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","value","onChange","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","useMemo","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","type","inputProps","step","onKeyDown","className","placement","component","sx","cursor","icon","faInfoCircle","StatFilterCard","t","useTranslation","characterKey","useContext","CharacterContext","character","data","DataContext","useBuildSetting","statFilters","buildSetting","buildSettingDispatch","setStatFilters","statKeys","get","input","push","charEle","remainingKeys","filter","Object","keys","some","k","setFilter","sKey","min","display","gap","justifyContent","title","flexDirection","entries","map","statKey","StatFilterItem","close","statFilters_","isFloat","KeyMap","s","color","onClick","flexBasis","flexGrow","placeholder","px","textAlign","endAdornment","faTrashAlt","initGlobalSettings","tcMode","ArtifactEditor","lazy","allSubstatFilter","Set","allSubstatKeys","ArtifactCard","artifactId","artifactObj","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","disableEditSetSlot","editor","canExclude","canEquip","extraButtons","database","DatabaseContext","databaseArtifact","useArtifact","sheet","usePromise","ArtifactSheet","setKey","editable","showEditor","setshowEditor","onHideEditor","onShowEditor","wrapperFunc","falseWrapperFunc","art","id","lock","slotKey","rarity","level","mainStatKey","substats","exclude","location","mainStatLevel","Math","max","mainStatUnit","levelVariant","floor","Artifact","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","Suspense","fallback","variant","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","minHeight","artifactIdToEdit","cancelEdit","condition","wrapper","falseWrapper","position","arts","set","right","bottom","zIndex","pt","alignItems","mb","size","label","noWrap","borderRadius","StatIcon","undefined","cacheValueString","stars","colored","top","src","slotIcons","pb","stat","SubstatDisplay","my","valid","probability","toFixed","name","p","showDefault","defaultIcon","defaultText","charKey","setLocation","arrow","faEdit","faBan","faChartLine","numRolls","rolls","length","maxRoll","rollData","rollOffset","rollColor","clamp","efficiency","effOpacity","clamp01","statName","unit","inFilter","has","progresses","sort","v","i","SmolProgress","indexOf","alignContent","opacity","minWidth","bgcolor","artifactSortKeys","artifactSortKeysTC","initialFilterOption","artSetKeys","allArtifactRarities","levelLow","levelHigh","slotKeys","allSlotKeys","mainStatKeys","exclusion","locked","initialArtifactSortFilter","filterOption","ascending","sortType","artifactSortConfigs","effFilterSet","getValue","tieBreaker","artsetkey","mefficiency","prob","artifactFilterConfigs","includes","filterKey","substat","PercentBadge","badgeColor","text","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","sumProb","current","layeredAssignment","cnr","Array","fill","_","n","result","r","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","artifact","_target","NaN","required","numFillerSlots","maxLevel","ArtifactMainStatsData","delete","numUpgradeRolls","ceil","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","values","buildSettings","setBuildSetting","follow","action","artifactID","setArtifact"],"sourceRoot":""}