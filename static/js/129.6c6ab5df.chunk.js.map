{"version":3,"file":"static/js/129.6c6ab5df.chunk.js","mappings":"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","sources":["Assets/Assets.ts","Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/CloseButton.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/Image/ImgIcon.tsx","Components/ModalWrapper.tsx","Components/SolidToggleButtonGroup.tsx","Components/SortByButton.tsx","Components/SqBadge.tsx","Components/StarDisplay.tsx","Components/StatIcon.tsx","Data/Characters/CharacterSheet.tsx","Formula/uiData.tsx","Formula/api.tsx","Formula/index.ts","Formula/internal.ts","Formula/optimization.ts","Formula/utils.ts","ReactHooks/useDBState.tsx","ReactHooks/useForceUpdate.tsx","ReactHooks/usePromise.tsx","Util/CharacterSort.ts","Util/SortByFilters.ts"],"sourcesContent":["import bow from './icon_bow.png'\r\nimport catalyst from './icon_catalyst.png'\r\nimport claymore from './icon_claymore.png'\r\nimport polearm from './icon_polearm.png'\r\nimport sword from './icon_sword.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nimport team1 from './icon_team_1.png'\r\nimport team2 from './icon_team_2.png'\r\nimport team3 from './icon_team_3.png'\r\nimport team4 from './icon_team_4.png'\r\n\r\nimport flower from './icon_slot_flower.png'\r\nimport plume from './icon_slot_plume.png'\r\nimport sands from './icon_slot_sands.png'\r\nimport goblet from './icon_slot_goblet.png'\r\nimport circlet from './icon_slot_circlet.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  slot: {\r\n    flower,\r\n    plume,\r\n    sands,\r\n    goblet,\r\n    circlet,\r\n  },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  },\r\n  team: {\r\n    team1,\r\n    team2,\r\n    team3,\r\n    team4,\r\n  },\r\n};\r\nexport default Assets;\r\n","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Close } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\ntype CloseButtonProps = ButtonProps & {\r\n  large?: boolean\r\n}\r\nexport default function CloseButton({ large = false, ...props }: CloseButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  if (large)\r\n    return <Button color=\"error\" startIcon={<Close />} {...props} >{t`close`}</Button>\r\n  return <Button color=\"error\" sx={{ p: 1, minWidth: 0 }} {...props} >\r\n    <Close />\r\n  </Button>\r\n}","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\"\r\ninterface ImgIconProps {\r\n  size?: number;\r\n}\r\nconst ImgIcon = styled(\"img\", {\r\n  name: 'ImgIcon',\r\n  slot: 'Root',\r\n})<ImgIconProps>(({ size = 1 }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `${size * 1.2}em`,\r\n  verticalAlign: \"text-bottom\"\r\n}))\r\n\r\nexport default ImgIcon","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import { ButtonProps, styled, ToggleButtonGroup, ToggleButtonGroupProps } from \"@mui/material\";\r\n\r\nexport type SolidToggleButtonGroupProps = SolidToggleButtonGroupPropsPartial & ToggleButtonGroupProps\r\ntype SolidToggleButtonGroupPropsPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\n\r\nconst SolidToggleButtonGroup = styled(ToggleButtonGroup, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidToggleButtonGroupPropsPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '& .MuiToggleButtonGroup-grouped': {\r\n    '&': {\r\n      backgroundColor: theme.palette[baseColor].main,\r\n      color: theme.palette[baseColor].contrastText,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette[selectedColor].main,\r\n      color: theme.palette[selectedColor].contrastText,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n    '&.Mui-disabled': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected.Mui-disabled': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default SolidToggleButtonGroup","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Typography } from '@mui/material'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) =>\r\n  <Typography color={colored ? \"warning.main\" : undefined} component=\"span\">\r\n    {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n  </Typography>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\nimport { faAnemo, faAtk, faCdReduction, faCritDmg, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRecharge, faGeo, faHealingAdd, faHealingBonus, faHp, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\n\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  hp_: <FontAwesomeIcon icon={faHp as any} />,\r\n  hp: <FontAwesomeIcon icon={faHp as any} />,\r\n\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faCritDmg as any} />,\r\n  enerRech_: <FontAwesomeIcon icon={faEnergyRecharge as any} />,\r\n  incHeal_: <FontAwesomeIcon icon={faHealingAdd as any} />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <FontAwesomeIcon icon={faCdReduction as any} />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [\r\n    [`${ele}_dmg_`, coloredEleIcon[ele]],\r\n    [`${ele}_res_`, coloredEleIcon[ele]],\r\n    [`${ele}_critDMG_`, coloredEleIcon[ele]],\r\n    [`${ele}_dmgInc`, coloredEleIcon[ele]],\r\n    [`${ele}_enemyRes_`, coloredEleIcon[ele]]\r\n  ]))\r\n}\r\n\r\nexport default StatIcon\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { ascensionMaxLevel } from \"../LevelData\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { TalentSheet, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { CharacterKey, ElementKey, Rarity, WeaponTypeKey } from \"../../Types/consts\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\";\r\n\r\nconst characterSheets = import('.').then(imp => imp.default)\r\n\r\ninterface ICharacterSheetBase {\r\n  name: Displayable\r\n  cardImg: string\r\n  thumbImg: string\r\n  thumbImgSide: string\r\n  barImg?: string\r\n  bannerImg?: string\r\n  rarity: Rarity\r\n  weaponTypeKey: WeaponTypeKey\r\n  gender: string\r\n  constellationName: Displayable\r\n  title: Displayable\r\n}\r\ninterface ICharacterSheetTalent extends ICharacterSheetBase {\r\n  elementKey: ElementKey\r\n  talent: TalentSheet\r\n}\r\ninterface ICharacterSheetTalents extends ICharacterSheetBase {\r\n  talents: Dict<ElementKey, TalentSheet>\r\n}\r\nexport type ICharacterSheet = ICharacterSheetTalent | ICharacterSheetTalents\r\n\r\nexport default class CharacterSheet {\r\n  sheet: ICharacterSheet;\r\n  private data: Data | Partial<Record<ElementKey, Data>>;\r\n  constructor(charSheet: ICharacterSheet, data: Data | Partial<Record<ElementKey, Data>>) {\r\n    this.sheet = charSheet\r\n    this.data = data\r\n  }\r\n  static get = (charKey: CharacterKey | \"\"): Promise<CharacterSheet> | undefined => charKey ? characterSheets.then(c => c[charKey]) : undefined\r\n  static get getAll() { return characterSheets }\r\n  get name() { return this.sheet.name }\r\n  get icon() { return <ImgIcon src={this.thumbImgSide} sx={{ height: \"2em\", marginTop: \"-2em\", marginLeft: \"-0.5em\" }} /> }\r\n  get nameWIthIcon() { return <span>{this.icon} {this.name}</span> }\r\n  get cardImg() { return this.sheet.cardImg }\r\n  get thumbImg() { return this.sheet.thumbImg }\r\n  get thumbImgSide() { return this.sheet.thumbImgSide }\r\n  get bannerImg() { return this.sheet.bannerImg }\r\n  get rarity() { return this.sheet.rarity }\r\n  get elementKey() { return \"elementKey\" in this.sheet ? this.sheet.elementKey : undefined }\r\n  get weaponTypeKey() { return this.sheet.weaponTypeKey }\r\n  get constellationName() { return this.sheet.constellationName }\r\n\r\n  isMelee = () => {\r\n    const weaponTypeKey = this.sheet.weaponTypeKey\r\n    return weaponTypeKey === \"sword\" || weaponTypeKey === \"polearm\" || weaponTypeKey === \"claymore\"\r\n  }\r\n  get isTraveler() {\r\n    return \"talents\" in this.sheet\r\n  }\r\n  getData = (ele: ElementKey = \"anemo\"): Data => {\r\n    if (\"charKey\" in this.data)\r\n      return this.data\r\n    return this.data[ele]!\r\n  }\r\n  getTalent = (eleKey: ElementKey = \"anemo\"): TalentSheet | undefined => {\r\n    if (\"talent\" in this.sheet) return this.sheet.talent\r\n    else return this.sheet.talents[eleKey]\r\n  }\r\n  getTalentOfKey = (talentKey: TalentSheetElementKey, eleKey: ElementKey = \"anemo\") => this.getTalent(eleKey)?.sheets[talentKey]\r\n\r\n  static getLevelString = (level: number, ascension: number): string =>\r\n    `${level}/${ascensionMaxLevel[ascension]}`\r\n}\r\n/*\r\nTODO: refactor stage 1 this function to be\r\ntalentTemplate(talentKey, tr, img, docsection:DocumentSection[]): TalentSheetElement\r\n*/\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional, additionalSections?: DocumentSection[]): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [\r\n    {\r\n      ...sectionTemplate(talentKey, tr, img, fields, conditional, undefined, false, false),\r\n      text: talentKey !== \"auto\" ? tr(`${talentKey}.description`) : undefined\r\n    },\r\n    ...(additionalSections || [])],\r\n})\r\n\r\n/*\r\nTODO: refactor stage 1 this function to be\r\nsectionTemplate(docSection:DocumentSection): DocumentSection\r\n*/\r\nexport const sectionTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional, fieldsCanShow?: (data: UIData) => boolean, teamBuff?: boolean, showFieldsHeaderDesc?: boolean): DocumentSection => ({\r\n  fieldsHeader: showFieldsHeaderDesc ? conditionalHeader(talentKey, tr, img) : undefined,\r\n  fieldsDescription: showFieldsHeaderDesc ? tr(`${talentKey}.description`) : undefined,\r\n  fields,\r\n  canShow: fieldsCanShow,\r\n  teamBuff,\r\n  conditional: conditional\r\n    ? {\r\n      ...conditional,\r\n      header: conditional.header ? conditional.header : conditionalHeader(talentKey, tr, img),\r\n      description: conditional.description ? conditional.description : tr(`${talentKey}.description`)\r\n    }\r\n    : undefined,\r\n})\r\n\r\n/*\r\nTODO: refactor stage 2: merge the above stage 1 functions by creating a templategenerator function:\r\ncharTemplates(cKey:CharacterKey, assets:Partial<Record<TalentSheetElementKey,string>>):{\r\n  tr: (key:string) => Displayable\r\n  trm: (key:string, value?:object) => Displayable\r\n  talentTemplate: (talentKey, docsection:DocumentSection[]) => TalentSheetElement\r\n  sectionTemplate: (Partial<DocumentSection>) => DocumentSection\r\n  conditionalTemplate:(talentKey,conditional:Partial<Iconditional>) => Iconditional\r\n}\r\n*/\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { uiInput } from \".\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport KeyMap, { Unit, valueString } from \"../KeyMap\"\r\nimport { assertUnreachable, crawlObject, layeredAssignment, objPathValue } from \"../Util/Util\"\r\nimport { allOperations } from \"./optimization\"\r\nimport { ComputeNode, Data, DataNode, DisplaySub, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode, ThresholdNode, UIInput, Variant } from \"./type\"\r\n\r\nconst shouldWrap = true\r\nexport interface NodeDisplay<V = number> {\r\n  /** Leave this here to make sure one can use `crawlObject` on hierarchy of `NodeDisplay` */\r\n  operation: true\r\n  info: Info\r\n  value: V\r\n  /** Whether the node fails the conditional test (`threshold_add`, `match`, etc.) or consists solely of empty nodes */\r\n  isEmpty: boolean\r\n  unit: Unit\r\n  formula?: Displayable\r\n  formulas: Displayable[]\r\n}\r\n\r\nexport class UIData {\r\n  origin: UIData\r\n  children = new Map<Data, UIData>()\r\n\r\n  data: Data[]\r\n  nodes = new Map<NumNode | StrNode, ContextNodeDisplay<number | string | undefined>>()\r\n  processed = new Map<NumNode | StrNode, NodeDisplay<number | string | undefined>>()\r\n\r\n  display: any = undefined\r\n  teamBuff: any = undefined\r\n\r\n  constructor(data: Data, parent: UIData | undefined) {\r\n    if (data === undefined) {\r\n      // Secret *origin* initializer\r\n      this.data = []\r\n      this.origin = this\r\n    } else {\r\n      if (!parent)\r\n        parent = new UIData(undefined as any, undefined)\r\n\r\n      this.data = [data, ...parent.data]\r\n      this.origin = parent.origin\r\n    }\r\n  }\r\n\r\n  getDisplay(): {\r\n    [key: string]: DisplaySub<NodeDisplay>\r\n  } {\r\n    if (!this.display) this.display = this.getAll([\"display\"])\r\n    return this.display\r\n  }\r\n  getTeamBuff(): UIInput<NodeDisplay, NodeDisplay<string>> {\r\n    if (!this.teamBuff) {\r\n      const calculated = this.getAll([\"teamBuff\"]), result = {} as any\r\n      // Convert `input` to `uiInput`\r\n      crawlObject(uiInput, [], (x: any) => x.operation, (x: ReadNode<number> | ReadNode<string>, path: string[]) => {\r\n        const node = objPathValue(calculated, x.path) as NumNode | undefined\r\n        if (node) layeredAssignment(result, path, node)\r\n      })\r\n      this.teamBuff = result\r\n    }\r\n    return this.teamBuff\r\n  }\r\n  getAll(prefix: string[]): any {\r\n    const result = {}\r\n    for (const data of this.data) {\r\n      crawlObject(objPathValue(data, prefix) ?? {}, [], (x: any) => x.operation,\r\n        (x: NumNode, key: string[]) => layeredAssignment(result, key, this.get(x)))\r\n    }\r\n    return result\r\n  }\r\n  get(node: NumNode): NodeDisplay\r\n  get(node: StrNode): NodeDisplay<string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined> {\r\n    if (node === undefined) {\r\n      console.trace(\"Please report this bug with this trace\")\r\n      return { info: {}, operation: true, value: undefined, isEmpty: true, unit: \"\", formulas: [] }\r\n    }\r\n    const old = this.processed.get(node)\r\n    if (old) return old\r\n\r\n    const result = computeNodeDisplay(this.computeNode(node))\r\n    this.processed.set(node, result)\r\n    return result\r\n  }\r\n  private computeNode(node: NumNode): ContextNodeDisplay\r\n  private computeNode(node: StrNode): ContextNodeDisplay<string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined> {\r\n    const old = this.nodes.get(node)\r\n    if (old) return old\r\n\r\n    const { operation, info } = node\r\n    let result: ContextNodeDisplay<number | string | undefined>\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        result = this._compute(node); break\r\n      case \"threshold\": result = this._threshold(node); break\r\n      case \"const\": result = this._constant(node.value); break\r\n      case \"subscript\": result = this._subscript(node); break\r\n      case \"read\": result = this._read(node); break\r\n      case \"data\": result = this._data(node); break\r\n      case \"match\": result = this._match(node); break\r\n      case \"lookup\": result = this._lookup(node); break\r\n      case \"prio\": result = this._prio(node.operands); break\r\n      case \"small\": result = this._small(node.operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (info) {\r\n      const { asConst } = info\r\n      result = { ...result }\r\n      result.info = mergeInfo(result.info, info)\r\n\r\n      // Pivot all keyed nodes for debugging\r\n      // if (key) result.info.pivot = true\r\n\r\n      if (asConst) {\r\n        delete result.formula\r\n        delete result.assignment\r\n        result.dependencies = new Set()\r\n      }\r\n      if (result.pivot || !result.formula)\r\n        result.mayNeedWrapping = false\r\n    }\r\n    createDisplay(result)\r\n\r\n    this.nodes.set(node, result)\r\n    return result\r\n  }\r\n\r\n  private prereadAll(path: readonly string[]): (NumNode | StrNode)[] {\r\n    return this.data.map(x => objPathValue(x, path) as NumNode | StrNode).filter(x => x)\r\n  }\r\n  private readFirst(path: readonly string[]): ContextNodeDisplay<number | string | undefined> | undefined {\r\n    const data = this.data.map(x => objPathValue(x, path) as NumNode | StrNode).find(x => x)\r\n    return data && this.computeNode(data)\r\n  }\r\n\r\n  private _prio(nodes: readonly StrNode[]): ContextNodeDisplay<string | undefined> {\r\n    const first = nodes.find(node => this.computeNode(node).value !== undefined)\r\n    return first ? this.computeNode(first) : illformedStr\r\n  }\r\n  private _small(nodes: readonly StrNode[]): ContextNodeDisplay<string | undefined> {\r\n    let smallest: ContextNodeDisplay<string | undefined> | undefined = undefined\r\n    for (const node of nodes) {\r\n      const candidate = this.computeNode(node)\r\n      if (smallest?.value === undefined || (candidate.value && candidate.value < smallest.value))\r\n        smallest = candidate\r\n    }\r\n    return smallest ?? illformedStr\r\n  }\r\n  private _read(node: ReadNode<number | string | undefined>): ContextNodeDisplay<number | string | undefined> {\r\n    const { path } = node\r\n    if (node.accu === undefined) {\r\n      return this.readFirst(path) ?? (node.type === \"string\" ? illformedStr : illformed)\r\n    } else {\r\n      const nodes = this.prereadAll(path)\r\n      if (nodes.length === 1) return this.computeNode(nodes[0])\r\n      return node.accu === \"small\"\r\n        ? this._small(nodes as StrNode[])\r\n        : this._accumulate(node.accu, nodes.map(x => this.computeNode(x)) as ContextNodeDisplay[])\r\n    }\r\n  }\r\n  private _lookup(node: LookupNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const key = this.computeNode(node.operands[0]).value\r\n    const selected = node.table[key!] ?? node.operands[1]\r\n    if (!selected)\r\n      throw new Error(`Lookup Fail with key ${key}`)\r\n    return this.computeNode(selected)\r\n  }\r\n  private _match(node: MatchNode<StrNode | NumNode, StrNode | NumNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [v1Node, v2Node, matchNode, unmatchNode] = node.operands\r\n    const v1 = this.computeNode(v1Node), v2 = this.computeNode(v2Node)\r\n    const matching = v1.value === v2.value\r\n    let result = this.computeNode(matching ? matchNode : unmatchNode)\r\n    return ((matching && node.emptyOn === \"match\") || (!matching && node.emptyOn === \"unmatch\"))\r\n      ? makeEmpty(result.value) : result\r\n  }\r\n  private _threshold(node: ThresholdNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [valueNode, thresholdNode, pass, fail] = node.operands\r\n    const value = this.computeNode(valueNode), threshold = this.computeNode(thresholdNode)\r\n    const result = value.value >= threshold.value ? this.computeNode(pass) : this.computeNode(fail)\r\n    return (value.value >= threshold.value)\r\n      ? (node.emptyOn === \"ge\" ? makeEmpty(result.value) : result)\r\n      : (node.emptyOn === \"l\" ? makeEmpty(result.value) : result)\r\n  }\r\n  private _data(node: DataNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    let child = this.children.get(node.data)\r\n    if (!child) {\r\n      child = new UIData(node.data, node.reset ? this.origin : this)\r\n      this.children.set(node.data, child)\r\n    }\r\n    return child.computeNode(node.operands[0])\r\n  }\r\n  private _compute(node: ComputeNode): ContextNodeDisplay {\r\n    const { operation, operands } = node\r\n    return this._accumulate(operation, operands.map(x => this.computeNode(x)))\r\n  }\r\n  private _subscript(node: SubscriptNode<number>): ContextNodeDisplay {\r\n    const operand = this.computeNode(node.operands[0])\r\n    const value = node.list[operand.value] ?? NaN\r\n    return this._constant(value)\r\n  }\r\n  private _constant<V>(value: V): ContextNodeDisplay<V> {\r\n    return {\r\n      info: {},\r\n      value, pivot: false,\r\n      empty: false,\r\n      mayNeedWrapping: false,\r\n      dependencies: new Set(),\r\n    }\r\n  }\r\n  private _accumulate(operation: ComputeNode[\"operation\"], operands: ContextNodeDisplay[]): ContextNodeDisplay {\r\n    let variant: Variant | undefined\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        variant = mergeVariants(operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n        const identity = allOperations[operation]([])\r\n        if (process.env.NODE_ENV !== \"development\")\r\n          operands = operands.filter(operand => operand.value !== identity)\r\n        if (!operands.length)\r\n          return variant ? { ...this._constant(identity), info: { variant } } : this._constant(identity)\r\n    }\r\n\r\n    let formula: { display: Displayable, dependencies: Displayable[] }\r\n    let mayNeedWrapping = false\r\n    switch (operation) {\r\n      case \"max\": formula = fStr`Max( ${{ operands }} )`; break\r\n      case \"min\": formula = fStr`Min( ${{ operands }} )`; break\r\n      case \"add\": formula = fStr`${{ operands, separator: ' + ' }}`; break\r\n      case \"mul\": formula = fStr`${{ operands, separator: ' * ', shouldWrap }}`; break\r\n      case \"sum_frac\": formula = fStr`${{ operands: [operands[0]], shouldWrap }} / ( ${{ operands, separator: ' + ' }} )`; break\r\n      case \"res\": {\r\n        const base = operands[0].value\r\n        if (base < 0) {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }} / 2`\r\n          mayNeedWrapping = true\r\n        }\r\n        else if (base >= 0.75) formula = fStr`100% / ( ${{ operands, shouldWrap }} * 4 + 100% )`\r\n        else {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }}`\r\n          mayNeedWrapping = true\r\n        }\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\":\r\n        if (operands.length <= 1) mayNeedWrapping = operands[0]?.mayNeedWrapping ?? true\r\n        else if (operation === \"add\") mayNeedWrapping = true\r\n    }\r\n\r\n    const value = allOperations[operation](operands.map(x => x.value))\r\n    const dependencies = new Set([...operands.flatMap(x =>\r\n      x.pivot && x.assignment\r\n        ? [x.assignment, ...x.dependencies]\r\n        : [...x.dependencies])])\r\n    const result: ContextNodeDisplay = {\r\n      info: { variant },\r\n      formula: formula.display,\r\n      empty: operands.every(x => x.empty),\r\n      value, mayNeedWrapping,\r\n      pivot: false, dependencies,\r\n    }\r\n    return result\r\n  }\r\n}\r\ntype ContextNodeDisplayList = { operands: ContextNodeDisplay[], separator?: string, shouldWrap?: boolean }\r\nfunction fStr(strings: TemplateStringsArray, ...list: ContextNodeDisplayList[]): { display: Displayable, dependencies: Displayable[] } {\r\n  const dependencies = new Set<Displayable>()\r\n  const predisplay: Displayable[] = []\r\n\r\n  strings.forEach((string, i) => {\r\n    predisplay.push(string)\r\n\r\n    const key = list[i]\r\n    if (key) {\r\n      const { operands, shouldWrap, separator = \", \" } = key\r\n      operands.forEach((item, i, array) => {\r\n        let itemFormula: Displayable\r\n        if (!item.pivot && item.formula) itemFormula = item.formula\r\n        else itemFormula = createFormulaComponent(item)\r\n\r\n        if (shouldWrap && item.mayNeedWrapping) {\r\n          predisplay.push(\"( \")\r\n          predisplay.push(itemFormula)\r\n          predisplay.push(\" )\")\r\n        } else {\r\n          predisplay.push(itemFormula)\r\n        }\r\n        if (i + 1 < array.length) predisplay.push(separator)\r\n        item.dependencies.forEach(x => dependencies.add(x))\r\n      })\r\n    }\r\n  })\r\n  return { display: mergeFormulaComponents(predisplay), dependencies: [...dependencies] }\r\n}\r\nfunction mergeVariants<V>(operands: ContextNodeDisplay<V>[]): Info[\"variant\"] {\r\n  const unique = new Set(operands.map(x => x.info.variant))\r\n  if (unique.size > 1) unique.delete(undefined)\r\n  if (unique.size > 1) unique.delete(\"physical\")\r\n  // Prefer reactions\r\n  if (unique.has(\"melt\")) return \"melt\"\r\n  if (unique.has(\"vaporize\")) return \"vaporize\"\r\n  return unique.values().next().value\r\n}\r\nfunction computeNodeDisplay<V>(node: ContextNodeDisplay<V>): NodeDisplay<V> {\r\n  const { info, dependencies, value, formula, assignment, empty } = node\r\n  return {\r\n    operation: true,\r\n    info,\r\n    value,\r\n    isEmpty: empty,\r\n    unit: KeyMap.unit(info.key),\r\n    formula, formulas: [...(assignment ? [assignment] : []), ...dependencies]\r\n  }\r\n}\r\n\r\n//* Comment/uncomment this line to toggle between string formulas and JSX formulas\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { info, value, formula } = node\r\n  const { key, prefix, source, variant, fixed } = info\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = <ColorText color=\"info\">{valueString(value, KeyMap.unit(key), fixed)}</ColorText>\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? <>{KeyMap.getPrefixStr(prefix)} </> : <></>\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? <ColorText color=\"secondary\"> ({source})</ColorText> : null\r\n    node.name = <><ColorText color={variant}>{prefixDisplay}{KeyMap.get(key!)}</ColorText>{sourceDisplay}</>\r\n\r\n    if (formula)\r\n      node.assignment = <div id=\"formula\">{node.name} {node.valueDisplay} = {formula}</div>\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  //TODO: change formula size in the formula display element instead\r\n  return name ? <><span style={{ fontSize: \"85%\" }}>{name}</span> {valueDisplay}</> : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return <>{components.map((x, i) => <span key={i}>{x}</span>)}</>\r\n}\r\n/*/\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant, fixed } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = valueString(value, KeyMap.unit(key), fixed)\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? `${KeyMap.getPrefixStr(prefix)} ` : \"\"\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? ` ${source}` : \"\"\r\n    node.name = `${prefixDisplay}${KeyMap.getNoUnit(key!)}${sourceDisplay}`\r\n\r\n    if (formula)\r\n      node.assignment = `${node.name} ${node.valueDisplay} = ${formula}`\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  return name ? `${name} ${valueDisplay}` : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return (components as string[]).join(\"\")\r\n}\r\n//*/\r\n\r\nfunction mergeInfo(base: Info, override: Info): Info {\r\n  const result = { ...base }\r\n  for (const [key, value] of Object.entries(override))\r\n    if (value) result[key] = value as any\r\n  return result\r\n}\r\n\r\ninterface ContextNodeDisplay<V = number> {\r\n  info: Info\r\n\r\n  pivot: boolean\r\n  empty: boolean\r\n\r\n  value: V\r\n\r\n  dependencies: Set<Displayable>\r\n\r\n  mayNeedWrapping: boolean\r\n\r\n  // Don't set these manually outside of `UIData.computeNode`\r\n  name?: Displayable\r\n  valueDisplay?: Displayable\r\n  formula?: Displayable\r\n  assignment?: Displayable\r\n}\r\n\r\nconst illformed: ContextNodeDisplay = {\r\n  info: {},\r\n  value: NaN, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nconst illformedStr: ContextNodeDisplay<string | undefined> = {\r\n  info: {},\r\n  value: undefined, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nfunction makeEmpty(emptyValue: number): ContextNodeDisplay<number>\r\nfunction makeEmpty(emptyValue: string | undefined): ContextNodeDisplay<string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined> {\r\n  return {\r\n    info: {}, value: emptyValue, pivot: false, empty: true, dependencies: new Set(), mayNeedWrapping: false\r\n  }\r\n}\r\n","import Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allElementsWithPhy, ArtifactSetKey, CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon\";\r\nimport { crawlObject, deepClone, layeredAssignment, objectKeyMap, objPathValue } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { Data, DisplaySub, Info, Input, NumNode, ReadNode, StrNode } from \"./type\";\r\nimport { NodeDisplay, UIData } from \"./uiData\";\r\nimport { constant, customRead, percent, resetData, setReadNodeKeys } from \"./utils\";\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nfunction inferInfoMut(data: Data, source?: Info[\"source\"]): Data {\r\n  crawlObject(data, [], (x: any) => x.operation, (x: NumNode, path: string[]) => {\r\n    if (path[0] === \"teamBuff\") {\r\n      path = path.slice(1)\r\n      if (!x.info) x.info = {}\r\n      x.info.isTeamBuff = true\r\n    }\r\n    const reference = objPathValue(input, path) as ReadNode<number> | undefined\r\n    if (reference)\r\n      x.info = { ...x.info, ...reference.info, prefix: undefined, source }\r\n    else if (path[0] !== \"tally\")\r\n      console.error(`Detect ${source} buff into non-existant key path ${path}`)\r\n  })\r\n\r\n  return data\r\n}\r\nfunction dataObjForArtifact(art: ICachedArtifact, mainStatAssumptionLevel: number = 0): Data {\r\n  const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n  const stats: [ArtifactSetKey | MainStatKey | SubstatKey, number][] = []\r\n  stats.push([art.mainStatKey, mainStatVal])\r\n  art.substats.forEach(({ key, accurateValue }) => key && stats.push([key, accurateValue]))\r\n  return {\r\n    art: {\r\n      ...Object.fromEntries(stats.map(([key, value]) =>\r\n        key.endsWith(\"_\") ? [key, percent(value / 100)] : [key, constant(value)])),\r\n      [art.slotKey]: {\r\n        id: constant(art.id), set: constant(art.setKey)\r\n      },\r\n    },\r\n    artSet: {\r\n      [art.setKey]: constant(1),\r\n    },\r\n  }\r\n}\r\nfunction dataObjForCharacter(char: ICachedCharacter): Data {\r\n  const result: Data = {\r\n    lvl: constant(char.level),\r\n    constellation: constant(char.constellation),\r\n    asc: constant(char.ascension),\r\n    infusion: {\r\n      team: char.infusionAura ? constant(char.infusionAura) : undefined,\r\n    },\r\n    premod: {\r\n      auto: constant(char.talent.auto),\r\n      skill: constant(char.talent.skill),\r\n      burst: constant(char.talent.burst),\r\n    },\r\n    enemy: {\r\n      ...objectKeyMap(allElementsWithPhy.map(ele => `${ele}_res_`), ele =>\r\n        percent((char.enemyOverride[`${ele.slice(0, -5)}_enemyRes_`] ?? 10) / 100)),\r\n      level: constant(char.enemyOverride.enemyLevel ?? char.level),\r\n    },\r\n    hit: {\r\n      hitMode: constant(char.hitMode),\r\n      reaction: constant(char.reactionMode),\r\n    },\r\n    customBonus: {},\r\n  }\r\n\r\n  for (const [key, value] of Object.entries(char.bonusStats))\r\n    result.customBonus![key] = key.endsWith('_') ? percent(value / 100) : constant(value)\r\n\r\n  if (char.enemyOverride.enemyDefRed_)\r\n    result.premod!.enemyDefRed_ = percent(char.enemyOverride.enemyDefRed_ / 100)\r\n  if (char.enemyOverride.enemyDefIgn_)\r\n    result.enemy!.defIgn = percent(char.enemyOverride.enemyDefIgn_ / 100)\r\n\r\n  crawlObject(char.conditional, [\"conditional\"], (x: any) => typeof x === \"string\", (x: string, keys: string[]) =>\r\n    layeredAssignment(result, keys, constant(x)))\r\n  return result\r\n}\r\nfunction dataObjForWeapon(weapon: ICachedWeapon): Data {\r\n  return {\r\n    weapon: {\r\n      lvl: constant(weapon.level),\r\n      asc: constant(weapon.ascension),\r\n      refinement: constant(weapon.refinement),\r\n      refineIndex: constant(weapon.refinement - 1)\r\n    },\r\n  }\r\n}\r\n/** These read nodes are very context-specific, and cannot be used anywhere else outside of `uiDataForTeam` */\r\nconst teamBuff = setReadNodeKeys(deepClone(input), [\"teamBuff\"]); // Use ONLY by dataObjForTeam\r\nfunction uiDataForTeam(teamData: Dict<CharacterKey, Data[]>, activeCharKey?: CharacterKey): Dict<CharacterKey, { target: UIData, buffs: Dict<CharacterKey, UIData> }> {\r\n  // May the goddess of wisdom bless any and all souls courageous\r\n  // enough to attempt for the understanding of this abomination.\r\n\r\n  const mergedData = Object.entries(teamData).map(([key, data]) => [key, { ...mergeData(data) }] as [CharacterKey, Data])\r\n  const result = Object.fromEntries(mergedData.map(([key]) =>\r\n    [key, { targetRef: {} as Data, buffs: [] as Data[], calcs: {} as Dict<CharacterKey, Data> }]))\r\n\r\n  const customReadNodes = {}\r\n  function getReadNode(path: readonly string[]): ReadNode<number> {\r\n    const base = (path[0] === \"teamBuff\")\r\n      ? objPathValue(teamBuff, path.slice(1))\r\n      : objPathValue(input, path)\r\n    if (base) return base\r\n    const custom = objPathValue(customReadNodes, path)\r\n    if (custom) return custom\r\n    const newNode = customRead(path)\r\n    if (path[0] === \"teamBuff\" && path[1] === \"tally\") newNode.accu = \"add\"\r\n    layeredAssignment(customReadNodes, path, newNode)\r\n    return newNode\r\n  }\r\n\r\n  Object.values(result).forEach(({ targetRef, buffs, calcs }) =>\r\n    mergedData.forEach(([sourceKey, source]) => {\r\n      const sourceBuff = source.teamBuff\r\n      // Create new copy of `calc` as we're mutating it later\r\n      const buff: Data = {}, calc: Data = deepClone({ teamBuff: sourceBuff })\r\n      buffs.push(buff)\r\n      calcs[sourceKey] = calc\r\n\r\n      // This construction creates a `Data` representing buff\r\n      // from `source` applying to `target`. It has 3 data:\r\n      // - `target` contains the reference for the final\r\n      //   data. It is not populated at this stage,\r\n      // - `calc` contains the calculation of the buffs,\r\n      // - `buff` contains read nodes that point to the\r\n      //   calculation in `calc`.\r\n\r\n      crawlObject(sourceBuff, [], (x: any) => x.operation, (x: NumNode | StrNode, path: string[]) => {\r\n        const info: Info = { ...objPathValue(input, path), source: sourceKey, prefix: undefined, asConst }\r\n        layeredAssignment(buff, path, resetData(getReadNode([\"teamBuff\", ...path]), calc, info))\r\n\r\n        crawlObject(x, [], (x: any) => x?.operation === \"read\", (x: ReadNode<number | string>) => {\r\n          if (x.path[0] === \"targetBuff\") return // Ignore teamBuff access\r\n\r\n          let readNode: ReadNode<number | string> | undefined, data: Data\r\n          if (x.path[0] === \"target\") { // Link the node to target data\r\n            readNode = getReadNode(x.path.slice(1))\r\n            data = targetRef\r\n          } else { // Link the node to source data\r\n            readNode = x\r\n            data = result[sourceKey].targetRef\r\n          }\r\n          layeredAssignment(calc, x.path, resetData(readNode, data))\r\n        })\r\n      })\r\n    })\r\n  )\r\n  mergedData.forEach(([targetKey, data]) => {\r\n    delete data.teamBuff\r\n    const { targetRef, buffs } = result[targetKey]\r\n    const buff = mergeData(buffs)\r\n    crawlObject(buff ?? {}, [], (x => x.operation), (x: NumNode, path: string[]) => {\r\n      // CAUTION\r\n      // This is safe only because `buff` is created using only `resetData`\r\n      // and `mergeData`. So every node here is created from either of the\r\n      // two functions, so the mutation wont't affect existing nodes.\r\n      x.info = { ...(objPathValue(teamBuff, path) as ReadNode<number> | undefined)?.info, prefix: \"teamBuff\", pivot }\r\n    })\r\n    Object.assign(targetRef, mergeData([data, buff, { teamBuff: buff, activeCharKey: constant(activeCharKey) }]))\r\n    targetRef[\"target\"] = targetRef\r\n  })\r\n  const origin = new UIData(undefined as any, undefined)\r\n  return Object.fromEntries(Object.entries(result).map(([key, value]) =>\r\n    [key, {\r\n      target: new UIData(value.targetRef, origin),\r\n      buffs: Object.fromEntries(Object.entries(value.calcs).map(([key, value]) =>\r\n        [key, new UIData(value, origin)]))\r\n    }]))\r\n}\r\nfunction mergeData(data: Data[]): Data {\r\n  function internal(data: any[], path: string[]): any {\r\n    if (data.length <= 1) return data[0]\r\n    if (data[0].operation) {\r\n      if (path[0] === \"teamBuff\") path = path.slice(1)\r\n      let { accu, type } = (objPathValue(input, path) as ReadNode<number> | ReadNode<string> | undefined) ?? {}\r\n      if (path[0] === \"tally\") accu = \"add\"\r\n      else if (accu === undefined) {\r\n        const errMsg = `Multiple entries when merging \\`unique\\` for key ${path}`\r\n        if (process.env.NODE_ENV === \"development\")\r\n          throw new Error(errMsg)\r\n        else\r\n          console.error(errMsg)\r\n\r\n        accu = type === \"number\" ? \"max\" : \"small\"\r\n      }\r\n      const result: NumNode | StrNode = { operation: accu, operands: data }\r\n      return result\r\n    } else {\r\n      return Object.fromEntries([...new Set(data.flatMap(x => Object.keys(x) as string[]))]\r\n        .map(key => [key, internal(data.map(x => x[key]).filter(x => x), [...path, key])]))\r\n    }\r\n  }\r\n  return data.length ? internal(data, []) : {}\r\n}\r\n\r\nfunction computeUIData(data: Data[]): UIData {\r\n  return new UIData(mergeData(data), undefined)\r\n}\r\ntype ComparedNodeDisplay<V = number> = NodeDisplay<V> & { diff: V }\r\nfunction compareTeamBuffUIData(uiData1: UIData, uiData2: UIData): Input<ComparedNodeDisplay, ComparedNodeDisplay<string>> {\r\n  return compareInternal(uiData1.getTeamBuff(), uiData2.getTeamBuff())\r\n}\r\nfunction compareDisplayUIData(uiData1: UIData, uiData2: UIData): { [key: string]: DisplaySub<ComparedNodeDisplay> } {\r\n  return compareInternal(uiData1.getDisplay(), uiData2.getDisplay())\r\n}\r\nfunction compareInternal(data1: any | undefined, data2: any | undefined): any {\r\n  if (data1?.operation || data2?.operation) {\r\n    const d1 = data1 as NodeDisplay | undefined\r\n    const d2 = data2 as NodeDisplay | undefined\r\n\r\n    if ((d1 && !d1.operation) || (d2 && !d2.operation))\r\n      throw new Error(\"Unmatched structure when comparing UIData\")\r\n\r\n    const result: ComparedNodeDisplay = {\r\n      info: {},\r\n      operation: true,\r\n      value: 0,\r\n      isEmpty: true,\r\n      unit: d2?.unit!,\r\n      formulas: [],\r\n      ...d1,\r\n      diff: (d2?.value ?? 0) - (d1?.value ?? 0)\r\n    }\r\n    if (typeof d1?.value === \"string\" || typeof d2?.value === \"string\") {\r\n      // In case `string` got involved, just use the other value\r\n      result.value = d1?.value ?? \"\" as any\r\n      result.diff = d2?.value ?? \"\" as any\r\n    }\r\n    return result\r\n  }\r\n\r\n  if (data1 || data2) {\r\n    const keys = new Set([...Object.keys(data1 ?? {}), ...Object.keys(data2 ?? {})])\r\n    return Object.fromEntries([...keys].map(key => [key, compareInternal(data1?.[key], data2?.[key])]))\r\n  }\r\n}\r\n\r\nexport type { NodeDisplay, UIData };\r\nexport {\r\n  dataObjForArtifact, dataObjForCharacter, dataObjForWeapon,\r\n  mergeData, computeUIData, inferInfoMut,\r\n  uiDataForTeam, compareTeamBuffUIData, compareDisplayUIData\r\n};\r\n","import { allEleEnemyResKeys } from \"../KeyMap\"\r\nimport { allArtifactSets, allElementsWithPhy, allRegions, allSlotKeys } from \"../Types/consts\"\r\nimport { crawlObject, deepClone, objectKeyMap, objectKeyValueMap } from \"../Util/Util\"\r\nimport { Data, Info, NumNode, ReadNode, StrNode } from \"./type\"\r\nimport { constant, equalStr, frac, infoMut, lookup, max, min, naught, percent, prod, read, res, setReadNodeKeys, stringRead, sum, unit } from \"./utils\"\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nconst allElements = allElementsWithPhy\r\nconst allTalents = [\"auto\", \"skill\", \"burst\"] as const\r\nconst allMoves = [\"normal\", \"charged\", \"plunging\", \"skill\", \"burst\", \"elemental\"] as const\r\nconst allArtModStats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"heal_\"] as const\r\nconst allTransformative = [\"overloaded\", \"shattered\", \"electrocharged\", \"superconduct\", \"swirl\"] as const\r\nconst allAmplifying = [\"vaporize\", \"melt\"] as const\r\nconst allMisc = [\r\n  \"stamina\", \"staminaDec_\", \"staminaSprintDec_\", \"staminaGlidingDec_\", \"staminaChargedDec_\",\r\n  \"incHeal_\", \"shield_\", \"cdRed_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\", \"dmgRed_\"\r\n] as const\r\n\r\nconst allModStats = [\r\n  ...allArtModStats,\r\n  ...([\"all\", \"burning\", ...allTransformative, ...allAmplifying, ...allMoves] as const).map(x => `${x}_dmg_` as const),\r\n]\r\nconst allNonModStats = [\r\n  ...allElements.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_res_` as const]),\r\n  ...allMoves.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_critRate_` as const]),\r\n  \"all_dmgInc\" as const,\r\n  ...allEleEnemyResKeys,\r\n  \"enemyDefRed_\" as const,\r\n  ...allMisc,\r\n]\r\n\r\nconst talent = objectKeyMap(allTalents, _ => read())\r\nconst allModStatNodes = objectKeyMap(allModStats, key => read(undefined, { key }))\r\nconst allNonModStatNodes = objectKeyMap(allNonModStats, key => read(undefined, { key }))\r\n\r\nfor (const ele of allElements) {\r\n  allNonModStatNodes[`${ele}_res_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_enemyRes_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_critDMG_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmgInc`].info!.variant = ele\r\n  allModStatNodes[`${ele}_dmg_`].info!.variant = ele\r\n}\r\nfor (const reaction of [...allTransformative, ...allAmplifying]) {\r\n  allModStatNodes[`${reaction}_dmg_`].info!.variant = reaction\r\n}\r\n\r\nfunction withDefaultInfo<T>(info: Info, value: T): T {\r\n  value = deepClone(value)\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => x.info = { ...info, ...x.info, })\r\n  return value\r\n}\r\nfunction markAccu<T>(accu: ReadNode<number>[\"accu\"], value: T): void {\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => {\r\n    if (x.operation === \"read\" && x.type === \"number\") x.accu = accu\r\n  })\r\n}\r\n\r\n/** All read nodes */\r\nconst input = setReadNodeKeys(deepClone({\r\n  activeCharKey: stringRead(),\r\n  charKey: stringRead(), charEle: stringRead(), weaponType: stringRead(),\r\n  lvl: read(undefined, { key: \"level\", prefix: \"char\" }), constellation: read(), asc: read(), special: read(),\r\n\r\n  infusion: {\r\n    overridableSelf: stringRead(\"small\"),\r\n    nonOverridableSelf: stringRead(\"small\"),\r\n    team: stringRead(\"small\"),\r\n  },\r\n\r\n  base: objectKeyMap(['atk', 'hp', 'def'], key => read(\"add\", { key })),\r\n  customBonus: withDefaultInfo({ prefix: \"custom\", pivot }, {\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n  }),\r\n  bonus: { ...talent },\r\n  premod: { ...talent, ...allModStatNodes, ...allNonModStatNodes },\r\n  total: withDefaultInfo({ prefix: \"total\", pivot }, {\r\n    ...talent, ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, read()]),\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n    /** Total Crit Rate capped to [0%, 100%] */\r\n    cappedCritRate: read(undefined, { key: \"critRate_\" }),\r\n  }),\r\n\r\n  art: withDefaultInfo({ prefix: \"art\", asConst }, {\r\n    ...objectKeyMap(allArtModStats, key => allModStatNodes[key]),\r\n    ...objectKeyMap(allSlotKeys, _ => ({ id: stringRead(), set: stringRead() })),\r\n  }),\r\n  artSet: objectKeyMap(allArtifactSets, set => read(\"add\", { key: set })),\r\n\r\n  weapon: withDefaultInfo({ prefix: \"weapon\", asConst }, {\r\n    key: stringRead(), type: stringRead(),\r\n\r\n    lvl: read(), asc: read(), refinement: read(), refineIndex: read(),\r\n    main: read(), sub: read(), sub2: read(),\r\n  }),\r\n\r\n  enemy: {\r\n    def: read(\"add\", { key: \"enemyDef_multi\", pivot }),\r\n    ...objectKeyMap(allElements.map(ele => `${ele}_resMulti` as const), _ => read()),\r\n\r\n    level: read(undefined, { key: \"enemyLevel\" }),\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_res_`, read(undefined)]),\r\n    defRed: read(undefined),\r\n    defIgn: read(\"add\", { key: \"enemyDefIgn_\", pivot }),\r\n  },\r\n\r\n  hit: {\r\n    ele: stringRead(), reaction: stringRead(), move: stringRead(), hitMode: stringRead(),\r\n    base: read(\"add\", { key: \"base\" }),\r\n\r\n    dmgBonus: read(\"add\", { key: \"dmg_\", pivot }),\r\n    dmgInc: read(\"add\", { key: \"dmgInc\", pivot }),\r\n    dmg: read(),\r\n  },\r\n}))\r\n\r\nconst { base, bonus, customBonus, premod, total, art, hit, enemy } = input\r\n\r\n// Adjust `info` for printing\r\nmarkAccu('add', {\r\n  bonus, customBonus, premod, art,\r\n  total: objectKeyMap(allModStats, stat => total[stat]),\r\n})\r\nbonus.auto.info = { key: \"autoBoost\" }\r\nbonus.skill.info = { key: \"skillBoost\" }\r\nbonus.burst.info = { key: \"burstBoost\" }\r\nbase.atk.info = { key: \"atk\", prefix: \"base\", pivot }\r\ndelete total.critRate_.info!.pivot\r\ntotal.critRate_.info!.prefix = \"uncapped\"\r\n\r\n// Nodes that are not used anywhere else but `common` below\r\n\r\n/** Base Amplifying Bonus */\r\nconst baseAmpBonus = sum(unit, prod(25 / 9, frac(total.eleMas, 1400)))\r\n/** Effective reaction, taking into account the hit's element */\r\nexport const effectiveReaction = lookup(hit.ele, {\r\n  pyro: lookup(hit.reaction, { pyro_vaporize: constant(\"vaporize\"), pyro_melt: constant(\"melt\") }, undefined),\r\n  hydro: equalStr(hit.reaction, \"hydro_vaporize\", \"vaporize\"),\r\n  cryo: equalStr(hit.reaction, \"cryo_melt\", \"melt\"),\r\n}, undefined)\r\n\r\nconst common: Data = {\r\n  premod: {\r\n    ...objectKeyMap(allTalents, talent => bonus[talent]),\r\n    ...objectKeyMap(allNonModStats, key => customBonus[key]),\r\n    ...objectKeyMap(allModStats, key => {\r\n      const operands: NumNode[] = []\r\n      switch (key) {\r\n        case \"atk\": case \"def\": case \"hp\":\r\n          operands.push(prod(base[key], sum(unit, premod[`${key}_`])))\r\n          break\r\n        case \"critRate_\":\r\n          operands.push(percent(0.05, { key, prefix: \"default\" }),\r\n            lookup(hit.move, objectKeyMap(allMoves, move => premod[`${move}_critRate_`]), 0))\r\n          break\r\n        case \"critDMG_\":\r\n          operands.push(percent(0.5, { key, prefix: \"default\" }),\r\n            lookup(hit.ele, objectKeyMap(allElements, ele => premod[`${ele}_critDMG_`]), 0),\r\n            lookup(hit.move, objectKeyMap(allMoves, ele => premod[`${ele}_critDMG_`]), 0))\r\n          break\r\n        case \"enerRech_\":\r\n          operands.push(percent(1, { key, prefix: \"default\" }))\r\n          break\r\n      }\r\n      return sum(...[...operands, art[key], customBonus[key]].filter(x => x))\r\n    }),\r\n  },\r\n  total: {\r\n    ...objectKeyMap(allTalents, talent => premod[talent]),\r\n    ...objectKeyMap(allModStats, key => premod[key]),\r\n    ...objectKeyMap(allNonModStats, key => premod[key]),\r\n    ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, sum(total[talent], -1)]),\r\n    stamina: sum(constant(100, { key: \"stamina\", prefix: \"default\" }), customBonus.stamina),\r\n\r\n    cappedCritRate: max(min(total.critRate_, unit), naught),\r\n  },\r\n\r\n  hit: {\r\n    dmgBonus: sum(\r\n      total.all_dmg_,\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmg_`]), naught),\r\n      lookup(hit.ele, objectKeyMap(allElements, ele => total[`${ele}_dmg_`]), naught)\r\n    ),\r\n    dmgInc: sum(\r\n      total.all_dmgInc,\r\n      lookup(hit.ele, objectKeyMap(allElements, element => total[`${element}_dmgInc`]), NaN),\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmgInc`]), NaN)\r\n    ),\r\n    dmg: prod(\r\n      sum(hit.base, hit.dmgInc),\r\n      sum(unit, hit.dmgBonus),\r\n      lookup(hit.hitMode, {\r\n        hit: unit,\r\n        critHit: sum(unit, total.critDMG_),\r\n        avgHit: sum(unit, prod(total.cappedCritRate, total.critDMG_)),\r\n      }, NaN),\r\n      enemy.def,\r\n      lookup(hit.ele,\r\n        objectKeyMap(allElements, ele => enemy[`${ele}_resMulti` as const]), NaN),\r\n      lookup(effectiveReaction, {\r\n        melt: lookup(hit.ele, {\r\n          pyro: prod(2, sum(baseAmpBonus, total.melt_dmg_)),\r\n          cryo: prod(1.5, sum(baseAmpBonus, total.melt_dmg_)),\r\n        }, 1, { key: \"melt_dmg_\" }),\r\n        vaporize: lookup(hit.ele, {\r\n          hydro: prod(2, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n          pyro: prod(1.5, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n        }, 1, { key: \"vaporize_dmg_\" }),\r\n      }, 1),\r\n    ),\r\n  },\r\n\r\n  enemy: {\r\n    // TODO: shred cap of 90%\r\n    def: frac(sum(input.lvl, 100), prod(sum(enemy.level, 100), sum(unit, prod(-1, enemy.defRed)), sum(unit, prod(-1, enemy.defIgn)))),\r\n    defRed: total.enemyDefRed_,\r\n    ...objectKeyValueMap(allElements, ele =>\r\n      [`${ele}_resMulti`, res(infoMut(sum(enemy[`${ele}_res_`], total[`${ele}_enemyRes_`]), { key: `${ele}_res_`, variant: ele }))]),\r\n  },\r\n}\r\n\r\nconst target = setReadNodeKeys(deepClone(input), [\"target\"])\r\nconst tally = setReadNodeKeys(objectKeyMap([...allElements, ...allRegions], _ => read(\"add\")), [\"tally\"])\r\n\r\n/**\r\n * List of `input` nodes, rearranged to conform to the needs of the\r\n * UI code. This is a separate list so that the evolution of the UIs\r\n * does not rely on the structure of `input`. So the UI code can rearrange\r\n * nodes as it sees fit without requiring updates to data sheets, which\r\n * pertains ~90% of all `input`-related code, and so are very sensitive\r\n * to any changes to `input`. For zero overhead, use the nodes directly\r\n * from `input` instead of a copy.\r\n */\r\nconst uiInput = input\r\n\r\nexport {\r\n  input, uiInput, common, customBonus,\r\n\r\n  target, tally,\r\n}\r\n","import { AnyNode, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\r\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\r\n\r\n  function traverse(formula: (NumNode | StrNode)) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\r\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\r\n  const visiting = new Set<(NumNode | StrNode)>()\r\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n\r\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    let topDown = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual(result, formulas) ? formulas : result\r\n}\r\n\r\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\r\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\r\n  const visiting = new Set<AnyNode>()\r\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n\r\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\r\n    let topDownMapping = topDownByContext.get(parentContextId)\r\n    if (!topDownMapping) {\r\n      topDownMapping = new Map()\r\n      topDownByContext.set(parentContextId, topDownMapping)\r\n    }\r\n\r\n    let topDown = topDownMapping.get(formula)\r\n    if (topDown) return topDown\r\n    let topDownContextId: number\r\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n\r\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\r\n    if (!bottomUpMapping) {\r\n      bottomUpMapping = new Map()\r\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\r\n    }\r\n\r\n    let bottomUp = bottomUpMapping.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    visiting.add(topDown)\r\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\r\n    visiting.delete(topDown)\r\n\r\n    bottomUpMapping.set(topDown, bottomUp)\r\n    topDownMapping.set(formula, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\r\n    const operands = formula.operands.map(f => check(f, contextId))\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(f => check(f, baseContextId))\r\n  return arrayEqual(formulas, result) ? formulas : result\r\n}\r\n\r\ntype ContextID = number\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { forEachNodes, mapFormulas } from \"./internal\"\r\nimport { constant } from \"./utils\"\r\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  formulas = constantFold(formulas, topLevelData, shouldFold)\r\n  formulas = flatten(formulas)\r\n  formulas = deduplicate(formulas)\r\n  return formulas\r\n}\r\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): (values: Dict<string, number>) => number[] {\r\n  // TODO: Use min-cut to minimize the size of interim array\r\n  type Reference = string | number | { ins: Reference[] }\r\n\r\n  const uniqueReadStrings = new Set<string>()\r\n  const uniqueNumbers = new Set<number>()\r\n  const mapping = new Map<NumNode, Reference>()\r\n\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\r\n          throw new Error(`Unsupported ${operation} node in precompute`)\r\n        const name = binding(f)\r\n        uniqueReadStrings.add(name)\r\n        mapping.set(f, name)\r\n        break\r\n      case \"add\": case \"min\": case \"max\": case \"mul\":\r\n      case \"threshold\": case \"res\": case \"sum_frac\":\r\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\r\n        break\r\n      case \"const\":\r\n        if (typeof f.value !== \"number\")\r\n          throw new Error(\"Found string constant while precomputing\")\r\n        const value = f.value\r\n        uniqueNumbers.add(value)\r\n        mapping.set(f as ConstantNode<number>, value)\r\n        break\r\n      case \"match\": case \"lookup\": case \"subscript\":\r\n      case \"prio\": case \"small\":\r\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  /**\r\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\r\n   *\r\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\r\n   * in the same order as formulas even when they are duplicated. Inputs\r\n   * are arranged in the same order as the read strings, even when they\r\n   * overlap with outputs. If an output is a constant or a compute node,\r\n   * only put the data in the output region.\r\n   */\r\n  const locations = new Map<NumNode | number | string, number>()\r\n\r\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\r\n  const constValues = [...uniqueNumbers]\r\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\r\n\r\n  formulas.forEach((f, i) => {\r\n    locations.set(f, i)\r\n    if (f.operation === \"const\") locations.set(f.value, i)\r\n  })\r\n  // After this line, if some outputs are also read node, `locations`\r\n  // will point to the one in the read node portion instead.\r\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\r\n  let offset = formulas.length + readStrings.length\r\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\r\n\r\n  // `locations` is stable from this point on. We now only append new values.\r\n  // There is no change to existing values.\r\n  //\r\n  // DO NOT read from `location` prior to this line.\r\n  mapping.forEach((ref, node) => {\r\n    if (typeof ref !== \"object\") {\r\n      locations.set(node, locations.get(ref)!)\r\n      return\r\n    }\r\n    if (!locations.has(node)) locations.set(node, offset++)\r\n    computations.push({\r\n      out: locations.get(node)!,\r\n      ins: node.operands.map(op => locations.get(op)!),\r\n      op: allOperations[node.operation],\r\n      buff: Array(node.operands.length).fill(0),\r\n    })\r\n  })\r\n\r\n  const buffer = Array(offset).fill(0)\r\n  buffer.forEach((_, i, array) => array[i] = NaN)\r\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\r\n\r\n  // Copy target for when some outputs are duplicated\r\n  const copyList = formulas.map((node, i) => {\r\n    const src = locations.get(node)!\r\n    return src !== i ? [src, i] : undefined!\r\n  }).filter(x => x)\r\n  const copyFormula = copyList.length ? () => {\r\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\r\n  } : undefined\r\n\r\n  return values => {\r\n    readStrings.forEach((id, i) => buffer[readOffset + i] = values[id] ?? 0)\r\n    computations.forEach(({ out, ins, op, buff }) => {\r\n      ins.forEach((i, j) => buff[j] = buffer[i])\r\n      buffer[out] = op(buff)\r\n    })\r\n    copyFormula?.()\r\n    return buffer\r\n  }\r\n}\r\n\r\nfunction flatten(formulas: NumNode[]): NumNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\r\n      const formula = _formula as ComputeNode\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<NumNode, number>(),\r\n      formulas: new Set<NumNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula as NumNode)) {\r\n        const formula = _formula as ComputeNode\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<NumNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  function fold(formula: StrNode, context: Context): StrNode\r\n  function fold(formula: NumNode, context: Context): NumNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\r\n    const old = context.processed.get(formula)\r\n    if (old) return old\r\n\r\n    const { operation } = formula\r\n    let result: NumNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": return formula\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = fold(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = fold(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        result = first ? fold(first, context) : constant(undefined)\r\n        break\r\n      }\r\n      case \"small\": {\r\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\r\n        for (const operand of formula.operands) {\r\n          const folded = fold(operand, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\r\n            smallest = folded\r\n        }\r\n        result = smallest ?? constant(undefined)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\r\n        if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const [index] = formula.operands.map(x => fold(x, context))\r\n        result = (index.operation === \"const\")\r\n          ? constant(formula.list[index.value])\r\n          : { ...formula, operands: [index] }\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined || accu === \"small\")\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined || operands.length === 1)\r\n          result = fold(operands[operands.length - 1], context)\r\n        else\r\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\r\n        break\r\n      }\r\n      case \"data\":\r\n        if (formula.reset) context = origin\r\n        const map = nextContextMap.get(context)!\r\n        let nextContext = map.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          map.set(formula.data, nextContext)\r\n        }\r\n        result = fold(formula.operands[0], nextContext)\r\n        break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    context.processed.set(formula, result)\r\n    return result\r\n  }\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return formulas.map(x => fold(x, context))\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\r\n\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype Any = Num | Str\r\n\r\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\r\nexport const unit = percent(1), naught = percent(0)\r\n\r\nexport function constant(value: number, info?: Info): NumNode\r\nexport function constant(value: string | undefined, info?: Info): StrNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\r\n  return { operation: \"const\", operands: [], value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): NumNode {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { key: \"_\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\r\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\r\n  return { operation: \"lookup\", operands, table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Num[]): NumNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Num[]): NumNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Num[]): NumNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Num[]): NumNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Num, c: Num): NumNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Num): NumNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\r\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\r\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: Any[]): AnyNode[]\r\nfunction intoOps(values: Any[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: Num | Str): NumNode | StrNode\r\nfunction intoV(value: Any): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\n\r\ntype _NodeList = {\r\n  [key: string]: NodeList\r\n} & {\r\n  operation?: never\r\n}\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n\r\n/**\r\n * `v1` === `v2` ? `match` : `unmatch`\r\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\r\n */\r\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import { useEffect, useState } from \"react\";\r\n/**\r\n *\r\n * @param promise\r\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\r\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\r\n * @returns\r\n */\r\nexport default function usePromise<T>(promise: Promise<T> | undefined, dependencies: any[], useOld = true): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    promise?.then(res => pending && setRes(() => res), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      !useOld && setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res\r\n}\r\n","import CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\r\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\r\nexport type CharacterSortKey = typeof characterSortKeys[number]\r\n\r\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\r\n  return {\r\n    new: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\r\n      tieBreaker: \"name\"\r\n    },\r\n    name: {\r\n      getValue: (ck) => ck,\r\n    },\r\n    level: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\r\n      tieBreaker: \"rarity\"\r\n    },\r\n    rarity: {\r\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\r\n      tieBreaker: \"level\"\r\n    }\r\n  }\r\n}\r\n\r\nexport type CharacterFilterConfigs = FilterConfigs<\"element\" | \"weaponType\" | \"favorite\", CharacterKey>\r\nexport function characterFilterConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): CharacterFilterConfigs {\r\n  return {\r\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\r\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\r\n    favorite: (ck, filter) =>\r\n      !filter || (filter === (database._getChar(ck as CharacterKey)?.favorite ? \"yes\" : \"no\"))\r\n  }\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\r\n}\r\n"],"names":["Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","slot","flower","plume","sands","goblet","circlet","resin","fragile","condensed","exp_books","advice","wit","experience","team","team1","team2","team3","team4","CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","CloseButton","large","props","t","useTranslation","color","startIcon","sx","p","minWidth","DropdownButton","title","children","id","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","ImgIcon","name","size","display","verticalAlign","ScrollModal","Modal","overflow","paddingTop","spacing","paddingBottom","ModalContainer","Container","padding","minHeight","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","variant","SolidToggleButtonGroup","ToggleButtonGroup","shouldForwardProp","prop","baseColor","selectedColor","contrastText","dark","SortByButton","sortKeys","value","onChange","ascending","onChangeAsc","i18nKey","map","key","selected","disabled","icon","faSortAmountDownAlt","faSortAmountUp","className","SqBadge","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","borderRadius","StarIcon","faStar","Stars","stars","colored","component","Array","keys","_","i","uncoloredEleIcons","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","coloredEleIcon","objectKeyMap","Object","StatIcon","hp_","faHp","hp","atk_","faAtk","atk","def_","faDef","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faCritDmg","enerRech_","faEnergyRecharge","incHeal_","faHealingAdd","heal_","faHealingBonus","cdRed_","faCdReduction","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","characterSheets","then","imp","default","CharacterSheet","charSheet","data","sheet","isMelee","weaponTypeKey","getData","getTalent","eleKey","talent","talents","getTalentOfKey","talentKey","sheets","this","src","thumbImgSide","marginTop","marginLeft","cardImg","thumbImg","bannerImg","rarity","elementKey","constellationName","get","charKey","c","getLevelString","level","ascension","ascensionMaxLevel","talentTemplate","tr","img","fields","conditional","additionalSections","sections","sectionTemplate","text","fieldsCanShow","teamBuff","showFieldsHeaderDesc","fieldsHeader","conditionalHeader","fieldsDescription","canShow","header","description","talentStrMap","auto","skill","burst","passive","passive1","passive2","passive3","sprint","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","m","action","normalSrc","weaponKey","shouldWrap","UIData","parent","origin","Map","nodes","processed","getAll","calculated","result","crawlObject","uiInput","x","operation","path","node","objPathValue","layeredAssignment","prefix","console","trace","info","isEmpty","unit","formulas","old","dependencies","formula","assignment","empty","KeyMap","computeNodeDisplay","computeNode","set","_compute","_threshold","_constant","_subscript","_read","_data","_match","_lookup","_prio","operands","_small","assertUnreachable","asConst","base","override","entries","mergeInfo","Set","pivot","mayNeedWrapping","source","fixed","valueDisplay","valueString","prefixDisplay","sourceDisplay","createDisplay","filter","find","first","illformedStr","smallest","candidate","accu","readFirst","type","illformed","prereadAll","length","_accumulate","table","Error","v1Node","v2Node","matchNode","unmatchNode","v1","v2","matching","emptyOn","makeEmpty","valueNode","thresholdNode","pass","fail","threshold","child","reset","operand","list","NaN","unique","delete","has","values","next","mergeVariants","identity","allOperations","fStr","separator","every","strings","predisplay","forEach","string","push","item","array","itemFormula","createFormulaComponent","add","mergeFormulaComponents","style","components","emptyValue","inferInfoMut","slice","isTeamBuff","reference","input","error","dataObjForArtifact","art","mainStatAssumptionLevel","mainStatVal","Artifact","mainStatKey","Math","max","min","stats","substats","accurateValue","endsWith","percent","constant","slotKey","setKey","artSet","dataObjForCharacter","char","lvl","constellation","asc","infusion","infusionAura","premod","enemy","allElementsWithPhy","enemyOverride","enemyLevel","hit","hitMode","reaction","reactionMode","customBonus","bonusStats","enemyDefRed_","enemyDefIgn_","defIgn","dataObjForWeapon","weapon","refinement","refineIndex","setReadNodeKeys","deepClone","uiDataForTeam","teamData","activeCharKey","mergedData","mergeData","targetRef","buffs","calcs","customReadNodes","getReadNode","custom","newNode","customRead","sourceKey","sourceBuff","buff","calc","resetData","readNode","targetKey","assign","target","internal","errMsg","computeUIData","allElements","allTalents","allMoves","allArtModStats","allTransformative","allAmplifying","allModStats","allNonModStats","allEleEnemyResKeys","read","allModStatNodes","allNonModStatNodes","withDefaultInfo","stringRead","charEle","weaponType","special","overridableSelf","nonOverridableSelf","bonus","total","objectKeyValueMap","cappedCritRate","allSlotKeys","allArtifactSets","sub","sub2","defRed","move","dmgBonus","dmgInc","dmg","stat","baseAmpBonus","sum","prod","frac","effectiveReaction","lookup","pyro_vaporize","pyro_melt","equalStr","common","naught","all_dmg_","all_dmgInc","element","critHit","avgHit","melt","melt_dmg_","vaporize","vaporize_dmg_","res","infoMut","tally","allRegions","forEachNodes","topDown","bottomUp","visiting","visited","traverse","mapFormulas","topDownMap","bottomUpMap","topDownMapped","bottomUpMapped","check","arrayEqual","a","b","allCommutativeMonoidOperations","reduce","mul","sum_frac","commutativeMonoidOperationSet","optimize","topLevelData","shouldFold","_formula","deduplicate","flatten","constantFold","f","flattened","dep","elementCounts","wrap","counts","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","dependency","currentCount","commonCount","candidates","candidateCounts","candidateCount","clear","nextContextMap","fold","context","numericOperands","formulaOperands","folded","numericValue","isFinite","index","op","match","unmatch","nextContext","Number","MAX_VALUE","Infinity","defaultV","intoV","intoOps","equal","unequal","greaterEq","greaterEqStr","lessThan","nodeList","customStringRead","stringPrio","subscript","matchFull","useDBState","init","database","useContext","DatabaseContext","_getState","state","setState","useEffect","followState","updateState","useForceUpdate","stateDirty","update","usePromise","promise","useOld","setRes","pending","characterSortKeys","characterSortConfigs","new","getValue","ck","_getChar","tieBreaker","characterFilterConfigs","favorite","sortFunction","sortby","configs","Sort","config","aV","bV","localeCompare","filterOption","diff","filterFunction","filterOptions","filterConfigs","obj","optionKey","optionVal"],"sourceRoot":""}