{"version":3,"sources":["Database/CharacterDatabase.ts","Database/ArtifactDatabase.ts","Types/consts.ts","Util/Util.ts","Database/dbV2KeyMap.ts","Database/DatabaseUtil.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CharacterDatabase","this","Error","callback","listener","push","filter","cb","forEach","characterDatabase","characterKey","charListener","char","initiated","isInvalid","levelKey","getCharacterDatabase","deepClone","getCharacterKeyList","Object","keys","getIdList","populateDatebaseFromLocalStorage","localStorage","key","startsWith","split","character","loadFromLocalStorage","emitEvent","update","dchar","saveToLocalStorage","emitCharEvent","get","remove","removeItem","getArtifactIDFromSlot","slotKey","equippedArtifacts","equipArtifactOnSlot","artid","equipArtifactBuild","artifactIds","unequipAllArtifacts","values","clearDatabase","artifactDatabase","artIdIndex","artListener","ArtifactDatabase","id","art","setKey","numStars","mainStatKey","substats","some","substat","value","getArtifactDatabase","removeArtifactById","removeArtifact","getItem","dart","emitArtEvent","artId","moveToNewLocation","location","setLocked","lock","swapLocations","artA","artB","locA","locB","swapLocationsById","artAid","artBid","allHitModes","allReactionModes","allRarities","allArtifactRarities","allSlotKeys","allElements","allArtifactSets","allCharacterKeys","allWeaponKeys","getRandomElementFromArray","array","Math","floor","random","length","getRandomIntInclusive","min","max","ceil","data","JSON","parse","obj","setItem","stringify","closeEnoughFloat","a","b","abs","closeEnoughInt","clamp","val","low","high","getArrLastElement","arr","clampPercent","strPadLeft","string","pad","Array","join","slice","hammingDistance","str1","str2","dist","toLowerCase","i","j","match","objMultiplication","multi","prop","layeredAssignment","reduce","accu","objPathValue","k","deletePropPath","path","tempPath","lastKey","pop","objClearEmpties","o","crawlObject","validate","entries","evalIfFunc","arg","changes","char_ele_key","char_level","hp_base","hp_final","atk_character_base","atk_base","atk_final","atk_weapon","def_base","def_final","phy_dmg_bonus","phy_res","anemo_ele_dmg_bonus","geo_ele_dmg_bonus","electro_ele_dmg_bonus","hydro_ele_dmg_bonus","pyro_ele_dmg_bonus","cryo_ele_dmg_bonus","anemo_ele_res","geo_ele_res","electro_ele_res","hydro_ele_res","pyro_ele_res","cryo_ele_res","ener_rech","crit_rate","crit_dmg","stam","heal_bonu","inc_heal","pow_shield","red_cd","skill_cd_red","burst_cd_red","all_dmg_bonus","move_spd","atk_spd","weakspot_dmg","stamina_dec","stamina_gliding_dec","stamina_charged_dec","ele_mas_multi_x","ele_mas_multi_y","ele_mas_multi_z","norm_atk_dmg","char_atk_dmg","plunge_dmg","norm_atk_crit_dmg","char_atk_crit_dmg","plunge_crit_dmg","norm_atk_avg_dmg","char_atk_avg_dmg","plunge_avg_dmg","norm_atk_dmg_bonus","char_atk_dmg_bonus","plunge_atk_dmg_bonus","skill_dmg_bonus","burst_dmg_bonus","norm_atk_crit_rate","char_atk_crit_rate","skill_crit_rate","burst_crit_rate","anemo_skill_dmg","anemo_burst_dmg","anemo_skill_crit_dmg","anemo_burst_crit_dmg","anemo_skill_avg_dmg","anemo_burst_avg_dmg","geo_skill_dmg","geo_burst_dmg","geo_skill_crit_dmg","geo_burst_crit_dmg","geo_skill_avg_dmg","geo_burst_avg_dmg","electro_skill_dmg","electro_burst_dmg","electro_skill_crit_dmg","electro_burst_crit_dmg","electro_skill_avg_dmg","electro_burst_avg_dmg","hydro_skill_dmg","hydro_burst_dmg","hydro_skill_crit_dmg","hydro_burst_crit_dmg","hydro_skill_avg_dmg","hydro_burst_avg_dmg","pyro_skill_dmg","pyro_burst_dmg","pyro_skill_crit_dmg","pyro_burst_crit_dmg","pyro_skill_avg_dmg","pyro_burst_avg_dmg","cryo_skill_dmg","cryo_burst_dmg","cryo_skill_crit_dmg","cryo_burst_crit_dmg","cryo_skill_avg_dmg","cryo_burst_avg_dmg","phy_dmg","phy_crit_dmg","phy_avg_dmg","anemo_ele_dmg","anemo_ele_crit_dmg","anemo_ele_avg_dmg","geo_ele_dmg","geo_ele_crit_dmg","geo_ele_avg_dmg","electro_ele_dmg","electro_ele_crit_dmg","electro_ele_avg_dmg","hydro_ele_dmg","hydro_ele_crit_dmg","hydro_ele_avg_dmg","pyro_ele_dmg","pyro_ele_crit_dmg","pyro_ele_avg_dmg","cryo_ele_dmg","cryo_ele_crit_dmg","cryo_ele_avg_dmg","overload_dmg","overload_dmg_bonus","overload_multi","electrocharged_dmg","electrocharged_dmg_bonus","electrocharged_multi","superconduct_dmg","superconduct_dmg_bonus","superconduct_multi","burning_dmg","burning_dmg_bonus","swirl_dmg","swirl_dmg_bonus","swirl_multi","shatter_dmg","shatter_dmg_bonus","shatter_multi","crystalize_dmg","crystalize_dmg_bonus","melt_dmg_bonus","vaporize_dmg_bonus","pyro_vaporize_normal_dmg","pyro_vaporize_normal_crit_dmg","pyro_vaporize_normal_avg_dmg","pyro_vaporize_chraged_dmg","pyro_vaporize_chraged_crit_dmg","pyro_vaporize_chraged_avg_dmg","pyro_vaporize_plunge_dmg","pyro_vaporize_plunge_crit_dmg","pyro_vaporize_plunge_avg_dmg","pyro_vaporize_skill_dmg","pyro_vaporize_skill_crit_dmg","pyro_vaporize_skill_avg_dmg","pyro_vaporize_burst_dmg","pyro_vaporize_burst_crit_dmg","pyro_vaporize_burst_avg_dmg","pyro_vaporize_ele_dmg","pyro_vaporize_ele_crit_dmg","pyro_vaporize_ele_avg_dmg","hydro_vaporize_normal_dmg","hydro_vaporize_normal_crit_dmg","hydro_vaporize_normal_avg_dmg","hydro_vaporize_chraged_dmg","hydro_vaporize_chraged_crit_dmg","hydro_vaporize_chraged_avg_dmg","hydro_vaporize_plunge_dmg","hydro_vaporize_plunge_crit_dmg","hydro_vaporize_plunge_avg_dmg","hydro_vaporize_skill_dmg","hydro_vaporize_skill_crit_dmg","hydro_vaporize_skill_avg_dmg","hydro_vaporize_burst_dmg","hydro_vaporize_burst_crit_dmg","hydro_vaporize_burst_avg_dmg","hydro_vaporize_ele_dmg","hydro_vaporize_ele_crit_dmg","hydro_vaporize_ele_avg_dmg","pyro_melt_normal_dmg","pyro_melt_normal_crit_dmg","pyro_melt_normal_avg_dmg","pyro_melt_chraged_dmg","pyro_melt_chraged_crit_dmg","pyro_melt_chraged_avg_dmg","pyro_melt_plunge_dmg","pyro_melt_plunge_crit_dmg","pyro_melt_plunge_avg_dmg","pyro_melt_skill_dmg","pyro_melt_skill_crit_dmg","pyro_melt_skill_avg_dmg","pyro_melt_burst_dmg","pyro_melt_burst_crit_dmg","pyro_melt_burst_avg_dmg","pyro_melt_ele_dmg","pyro_melt_ele_crit_dmg","pyro_melt_ele_avg_dmg","cryo_melt_normal_dmg","cryo_melt_normal_crit_dmg","cryo_melt_normal_avg_dmg","cryo_melt_chraged_dmg","cryo_melt_chraged_crit_dmg","cryo_melt_chraged_avg_dmg","cryo_melt_plunge_dmg","cryo_melt_plunge_crit_dmg","cryo_melt_plunge_avg_dmg","cryo_melt_skill_dmg","cryo_melt_skill_crit_dmg","cryo_melt_skill_avg_dmg","cryo_melt_burst_dmg","cryo_melt_burst_crit_dmg","cryo_melt_burst_avg_dmg","cryo_melt_ele_dmg","cryo_melt_ele_crit_dmg","cryo_melt_ele_avg_dmg","enemy_phy_res","enemy_phy_res_multi","enemy_phy_immunity","anemo_enemy_ele_res","anemo_enemy_ele_res_multi","anemo_enemy_ele_immunity","geo_enemy_ele_res","geo_enemy_ele_res_multi","geo_enemy_ele_immunity","electro_enemy_ele_res","electro_enemy_ele_res_multi","electro_enemy_ele_immunity","hydro_enemy_ele_res","hydro_enemy_ele_res_multi","hydro_enemy_ele_immunity","pyro_enemy_ele_res","pyro_enemy_ele_res_multi","pyro_enemy_ele_immunity","cryo_enemy_ele_res","cryo_enemy_ele_res_multi","cryo_enemy_ele_immunity","ele_mas","amp_reaction_base_multi","enemy_level_multi","enemy_level","dmgModeToHitMode","avg_dmg","dmg","CurrentDatabaseVersion","DatabaseInitAndVerify","dbVersion","getDatabaseVersion","dbKey","name","dmgMode","rest","isArray","buildSetting","mainStat","map","stat","v2change","statFilters","fromEntries","hitMode","ArtifactDisplayState","filterMainStatKey","filterSubstats","state","elementalFilter","weaponFilter","charDBJustPopualted","artDBJustPopualted","valid","artInSlotId","currentEfficiency","maximumEfficiency","efficiency","rolls","chars","sk","equippedArt","artifactConditional","talentCondtiional","autoInfused","artifactsAssumeFull","ascending","setFilters","num","useLockedArts","buildSettings","mainStatAssumptionLevel","mainStatKeys","weapon","conditionalNum","setDatabaseVersion","defVal","parseInt","version","createDatabaseObj","artifactDisplay","characterDisplay","buildsDisplay","loadDatabaseObj","charKey","Home","lazy","ArtifactDisplay","CharacterDisplay","BuildDisplay","Planner","FlexDisplay","SettingsDisplay","App","className","Navbar","bg","variant","expand","Brand","as","Link","to","Toggle","aria-controls","Collapse","Nav","process","href","target","rel","onClick","ReactGA","outboundLink","label","icon","faPaypal","faPatreon","faDiscord","faCog","fallback","Container","Card","text","Body","Spinner","animation","component","Row","Col","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialize","ReactDOM","render","StrictMode","document","getElementById","undefined"],"mappings":"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","file":"static/js/main.480bf5a5.chunk.js","sourcesContent":["import { ICharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nexport default class CharacterDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof CharacterDatabase) throw Error('A static class cannot be instantiated.');\r\n  }\r\n  static initiated = false\r\n  static characterDatabase: Dict<CharacterKey, ICharacter> = {}\r\n  static listener: any[] = []\r\n  static charListener: any[] = []\r\n  static isInvalid = (char) => !char || !char.characterKey || !char.levelKey //TODO: is this useful since we use typescript?\r\n  static getCharacterDatabase = () => deepClone(CharacterDatabase.characterDatabase);\r\n  static getCharacterKeyList = (): CharacterKey[] => Object.keys(CharacterDatabase.characterDatabase);\r\n  static getIdList = () => Object.keys(CharacterDatabase.characterDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (CharacterDatabase.initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"char_\")).forEach(key => {\r\n      const [, characterKey] = key.split(\"char_\")\r\n      if (!CharacterDatabase.characterDatabase[characterKey]) {\r\n        const character = loadFromLocalStorage(key);\r\n        if (!character) return;\r\n        CharacterDatabase.characterDatabase[characterKey] = character;\r\n      }\r\n    })\r\n    CharacterDatabase.initiated = true\r\n    CharacterDatabase.emitEvent()\r\n    return true\r\n  }\r\n  static update = (char) => {\r\n    if (CharacterDatabase.isInvalid(char)) return;\r\n    const dchar = deepClone(char)\r\n    saveToLocalStorage(`char_${char.characterKey}`, dchar);\r\n    CharacterDatabase.characterDatabase[char.characterKey] = dchar;\r\n    CharacterDatabase.emitEvent()\r\n    CharacterDatabase.emitCharEvent(dchar.characterKey, dchar)\r\n  }\r\n  static get = (characterKey: string): ICharacter | undefined => CharacterDatabase.characterDatabase[characterKey]\r\n\r\n  static remove = (characterKey) => {\r\n    delete CharacterDatabase.characterDatabase[characterKey];\r\n    localStorage.removeItem(`char_${characterKey}`);\r\n    CharacterDatabase.emitEvent()\r\n  }\r\n  static getArtifactIDFromSlot = (characterKey, slotKey) =>\r\n    CharacterDatabase.get(characterKey)?.equippedArtifacts?.[slotKey] ?? null\r\n\r\n  static equipArtifactOnSlot = (characterKey, slotKey, artid) => {\r\n    const char = CharacterDatabase.get(characterKey)\r\n    if (!char) return\r\n    char.equippedArtifacts[slotKey] = artid;\r\n    CharacterDatabase.update(char)\r\n  }\r\n  static equipArtifactBuild = (characterKey, artifactIds) => {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    character.equippedArtifacts = artifactIds\r\n    CharacterDatabase.update(character);\r\n  }\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(CharacterDatabase.characterDatabase).forEach(char => {\r\n      char.equippedArtifacts = {}\r\n      CharacterDatabase.update(char)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    CharacterDatabase.characterDatabase = {}\r\n    CharacterDatabase.initiated = false\r\n    CharacterDatabase.emitEvent()\r\n  }\r\n  static registerListener(callback) {\r\n    CharacterDatabase.listener.push(callback)\r\n  }\r\n  static unregisterListener(callback) {\r\n    CharacterDatabase.listener = CharacterDatabase.listener.filter(cb => cb !== callback)\r\n  }\r\n  static emitEvent() {\r\n    CharacterDatabase.listener.forEach(cb => cb(CharacterDatabase.characterDatabase))\r\n  }\r\n  static registerCharListener(characterKey, callback) {\r\n    if (!CharacterDatabase.charListener[characterKey]) CharacterDatabase.charListener[characterKey] = [callback]\r\n    else CharacterDatabase.charListener[characterKey].push(callback)\r\n  }\r\n  static unregisterCharListener(characterKey, callback) {\r\n    CharacterDatabase.charListener[characterKey] = CharacterDatabase.charListener[characterKey]?.filter(cb => cb !== callback)\r\n  }\r\n  static emitCharEvent(characterKey, char) {\r\n    CharacterDatabase.charListener[characterKey]?.forEach(cb => cb(char))\r\n  }\r\n}\r\n","import { IArtifact } from \"../Types/artifact\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nvar initiated = false\r\nvar artifactDatabase: Dict<string, IArtifact> = {};\r\nvar artIdIndex = 1;\r\nconst artListener = {}\r\nvar listener: any[] = []\r\nexport default class ArtifactDatabase {\r\n  //do not instantiate.\r\n  constructor() {\r\n    if (this instanceof ArtifactDatabase) throw Error('A static class cannot be instantiated.');\r\n\r\n  }\r\n  static isInvalid = (art) =>\r\n    !art || !art.setKey || !art.numStars || !art.slotKey || !art.mainStatKey || art.substats?.some(substat => substat.key && !substat.value) //TODO: is this necessary now that we are using typescript?\r\n  static getArtifactDatabase = () => artifactDatabase;\r\n  static getIdList = () => Object.keys(artifactDatabase);\r\n  static populateDatebaseFromLocalStorage = () => {\r\n    if (initiated && process.env.NODE_ENV !== \"development\") return false;\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"artifact_\")).forEach(id => {\r\n      if (!artifactDatabase[id]) {\r\n        let art = loadFromLocalStorage(id)\r\n        if (!art) return;\r\n        if (ArtifactDatabase.isInvalid(art)) {\r\n          ArtifactDatabase.removeArtifactById(id);\r\n          return;\r\n        }\r\n        artifactDatabase[id] = art;\r\n      }\r\n    })\r\n    initiated = true\r\n    ArtifactDatabase.emitEvent()\r\n    return true\r\n  }\r\n  static get = (id) => artifactDatabase[id]\r\n  static removeArtifact = (art) => {\r\n    ArtifactDatabase.removeArtifactById(art.id);\r\n  }\r\n  static update = (art) => {\r\n    if (ArtifactDatabase.isInvalid(art)) return;\r\n    let id = art.id;\r\n    if (!id) {//if does not have id, generate ID\r\n      do {\r\n        id = `artifact_${artIdIndex++}`\r\n      } while (localStorage.getItem(id) !== null)\r\n      art.id = id\r\n    }\r\n    let dart = deepClone(art)\r\n    saveToLocalStorage(id, dart);\r\n    artifactDatabase[id] = dart;\r\n    ArtifactDatabase.emitEvent()\r\n    ArtifactDatabase.emitArtEvent(id, dart)\r\n    return id\r\n  }\r\n  static removeArtifactById = (artId) => {\r\n    delete artifactDatabase[artId];\r\n    localStorage.removeItem(artId);\r\n    ArtifactDatabase.emitEvent()\r\n  }\r\n\r\n  static moveToNewLocation = (artid, location: CharacterKey | \"\" = \"\") => {\r\n    const art = ArtifactDatabase.get(artid)\r\n    if (!art || art.location === location) return;\r\n    art.location = location;\r\n    ArtifactDatabase.update(art);\r\n  }\r\n  static setLocked = (artid, lock = false) => {\r\n    const art = ArtifactDatabase.get(artid)\r\n    if (!art || art.lock === lock) return;\r\n    art.lock = lock;\r\n    ArtifactDatabase.update(art);\r\n  }\r\n  static swapLocations = (artA, artB) => {\r\n    let locA = artA.location\r\n    let locB = artB.location\r\n    ArtifactDatabase.moveToNewLocation(artA.id, locB)\r\n    ArtifactDatabase.moveToNewLocation(artB.id, locA)\r\n  }\r\n  static swapLocationsById = (artAid, artBid) =>\r\n    ArtifactDatabase.swapLocations(ArtifactDatabase.get(artAid), ArtifactDatabase.get(artBid))\r\n  static unequipAllArtifacts = () => {\r\n    Object.values(artifactDatabase).forEach(art => {\r\n      art.location = \"\"\r\n      ArtifactDatabase.update(art)\r\n    })\r\n  }\r\n  //helper function for testing\r\n  static clearDatabase = () => {\r\n    artifactDatabase = {}\r\n    initiated = false\r\n    artIdIndex = 1\r\n    ArtifactDatabase.emitEvent()\r\n  }\r\n  static registerListener(callback) {\r\n    listener.push(callback)\r\n  }\r\n  static unregisterListener(callback) {\r\n    listener = listener.filter(cb => cb !== callback)\r\n  }\r\n  static emitEvent() {\r\n    listener.forEach(cb => cb(artifactDatabase))\r\n  }\r\n  static registerArtListener(id, callback) {\r\n    if (!artListener[id]) artListener[id] = [callback]\r\n    else artListener[id].push(callback)\r\n  }\r\n  static unregisterArtListener(id, callback) {\r\n    artListener[id] = artListener[id]?.filter(cb => cb !== callback)\r\n  }\r\n  static emitArtEvent(id, art) {\r\n    artListener[id]?.forEach(cb => cb(art))\r\n  }\r\n}","// DO NOT REMOVE ITEMS FROM THESE LISTS\r\n//        ONLY APPEND NEW ENTRIES\r\n// The index of items in this list is used to\r\n// compress the exported data. Removing an item\r\n// from this list will shift subsequent entries.\r\nexport const allHitModes = [\"hit\", \"avgHit\", \"critHit\"] as const\r\nexport const allReactionModes = [\"hydro_vaporize\", \"pyro_vaporize\", \"pyro_melt\", \"cryo_melt\",] as const\r\nexport const allArtifactSetCount = [1, 2, 3, 4, 5] as const\r\nexport const allRarities = [5, 4, 3, 2, 1] as const\r\nexport const allArtifactRarities = [5, 4, 3] as const\r\nexport const allSlotKeys = [\"flower\", \"plume\", \"sands\", \"goblet\", \"circlet\"] as const\r\nexport const allElements = ['anemo', 'geo', 'electro', 'hydro', 'pyro', 'cryo'] as const\r\nexport const allWeaponTypeKeys = ['sword', 'claymore', 'polearm', 'bow', 'catalyst'] as const\r\nexport const allArtifactSets = [\r\n  \"Adventurer\", \"ArchaicPetra\", \"Berserker\", \"BlizzardStrayer\", \"BloodstainedChivalry\",\r\n  \"BraveHeart\", \"CrimsonWitchOfFlames\", \"DefendersWill\", \"Gambler\", \"GladiatorsFinale\",\r\n  \"HeartOfDepth\", \"Instructor\", \"Lavawalker\", \"LuckyDog\", \"MaidenBeloved\",\r\n  \"MartialArtist\", \"NoblesseOblige\", \"PrayersForDestiny\", \"PrayersForIllumination\", \"PrayersForWisdom\",\r\n  \"PrayersToSpringtime\", \"ResolutionOfSojourner\", \"RetracingBolide\", \"Scholar\", \"TheExile\",\r\n  \"ThunderingFury\", \"Thundersoother\", \"TinyMiracle\", \"TravelingDoctor\", \"ViridescentVenerer\",\r\n  \"WanderersTroupe\", \"TenacityOfTheMillelith\", \"PaleFlame\",\r\n] as const\r\nexport const allCharacterKeys = [\r\n  \"albedo\", \"amber\", \"barbara\", \"beidou\", \"bennett\", \"chongyun\", \"diluc\", \"diona\", \"fischl\", \"ganyu\",\r\n  \"hutao\", \"jean\", \"kaeya\", \"keqing\", \"klee\", \"lisa\", \"mona\", \"ningguang\", \"noelle\", \"qiqi\",\r\n  \"razor\", \"sucrose\", \"tartaglia\", \"traveler_anemo\", \"traveler_geo\", \"venti\", \"xiao\", \"xiangling\", \"xingqiu\", \"xinyan\",\r\n  \"zhongli\", \"rosaria\", \"yanfei\",\r\n] as const\r\nexport const allWeaponKeys = [\r\n  \"DullBlade\", \"SilverSword\", \"CoolSteel\", \"DarkIronSword\", \"FilletBlade\", \"HarbingerOfDawn\", \"SkyriderSword\",\r\n  \"TravelersHandySword\", \"BlackcliffLongsword\", \"FavoniusSword\", \"IronSting\", \"LionsRoar\", \"PrimordialJadeCutter\",\r\n  \"PrototypeRancour\", \"RoyalLongsword\", \"SacrificialSword\", \"TheAlleyFlash\", \"TheBlackSword\", \"TheFlute\",\r\n  \"SwordOfDescension\", \"FesteringDesire\", \"AquilaFavonia\", \"SkywardBlade\", \"SummitShaper\", \"WasterGreatsword\",\r\n  \"OldMercsPal\", \"BloodtaintedGreatsword\", \"DebateClub\", \"FerrousShadow\", \"Quartz\", \"SkyriderGreatsword\",\r\n  \"WhiteIronGreatsword\", \"BlackcliffSlasher\", \"FavoniusGreatsword\", \"LithicBlade\", \"PrototypeAminus\", \"Rainslasher\",\r\n  \"RoyalGreatsword\", \"SerpentSpine\", \"TheBell\", \"Whiteblind\", \"SacrificialGreatsword\", \"SnowTombedStarsilver\",\r\n  \"SkywardPride\", \"WolfsGravestone\", \"TheUnforged\", \"BeginnersProtector\", \"IronPoint\", \"BlackTassel\", \"Halberd\",\r\n  \"WhiteTassel\", \"BlackcliffPole\", \"CrescentPike\", \"Deathmatch\", \"DragonsBane\", \"LithicSpear\", \"PrototypeGrudge\",\r\n  \"FavoniusLance\", \"RoyalSpear\", \"DragonspineSpear\", \"VortexVanquisher\", \"PrimordialJadeWingedSpear\", \"StaffOfHoma\",\r\n  \"SkywardSpine\", \"HuntersBow\", \"SeasonedHuntersBow\", \"EbonyBow\", \"Messenger\", \"RavenBow\", \"RecurveBow\",\r\n  \"SharpshootersOath\", \"Slingshot\", \"TheStringless\", \"AlleyHunter\", \"BlackcliffWarbow\", \"CompoundBow\",\r\n  \"FavoniusWarbow\", \"PrototypeCrescent\", \"RoyalBow\", \"Rust\", \"SacrificialBow\", \"TheViridescentHunt\", \"SkywardHarp\",\r\n  \"AmosBow\", \"ElegyForTheEnd\", \"WindblumeOde\", \"ApprenticesNotes\", \"PocketGrimoire\", \"AmberCatalyst\", \"EmeraldOrb\",\r\n  \"MagicGuide\", \"OtherworldlyStory\", \"ThrillingTalesOfDragonSlayers\", \"TwinNephrite\", \"BlackcliffAgate\",\r\n  \"FavoniusCodex\", \"MappaMare\", \"PrototypeMalice\", \"RoyalGrimoire\", \"SacrificialFragments\", \"SolarPearl\", \"TheWidsith\",\r\n  \"WineAndSong\", \"EyeOfPerception\", \"Frostbearer\", \"LostPrayerToTheSacredWinds\", \"SkywardAtlas\", \"MemoryOfDust\"\r\n] as const\r\nexport type HitModeKey = typeof allHitModes[number]\r\nexport type ReactionModeKey = typeof allReactionModes[number]\r\nexport type SetNum = typeof allArtifactSetCount[number]\r\nexport type Rarity = typeof allRarities[number]\r\nexport type SlotKey = typeof allSlotKeys[number]\r\nexport type ElementKey = typeof allElements[number]\r\nexport type ArtifactSetKey = typeof allArtifactSets[number]\r\nexport type CharacterKey = typeof allCharacterKeys[number]\r\nexport type WeaponKey = typeof allWeaponKeys[number]\r\nexport type WeaponTypeKey = typeof allWeaponTypeKeys[number]","export const getRandomElementFromArray = <T>(array: readonly T[]): T => array[Math.floor(Math.random() * array.length)];\r\nexport function getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nexport function getRandomIntInclusive(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n}\r\nexport function getRandomArbitrary(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\nexport const loadFromLocalStorage = (key) => {\r\n  let data = localStorage.getItem(key)\r\n  if (!data) return null\r\n  return JSON.parse(data)\r\n}\r\nexport const saveToLocalStorage = (key, obj) =>\r\n  localStorage.setItem(key, JSON.stringify(obj));\r\nexport const deepClone = <T>(obj: T): T =>\r\n  JSON.parse(JSON.stringify(obj))\r\n\r\nexport const closeEnoughFloat = (a, b) =>\r\n  Math.abs(a - b) <= 0.101\r\n\r\nexport const closeEnoughInt = (a, b) =>\r\n  Math.abs(a - b) <= 1\r\nexport const clamp = (val, low, high) => {\r\n  if (val < low) return low;\r\n  if (val > high) return high;\r\n  return val\r\n}\r\nexport const getArrLastElement = (arr) =>\r\n  arr.length ? arr[arr.length - 1] : null\r\n\r\nexport const clamp01 = (val) => clamp(val, 0, 1)\r\nexport const clampPercent = (val) => clamp(val, 0, 100)\r\n\r\n//use to pretty print timestamps, or anything really.\r\nexport function strPadLeft(string, pad, length) {\r\n  return (new Array(length + 1).join(pad) + string).slice(-length);\r\n}\r\n\r\n//fuzzy compare strings. longer the distance, the higher the mismatch.\r\nexport function hammingDistance(str1, str2) {\r\n  var dist = 0;\r\n  str1 = str1.toLowerCase();\r\n  str2 = str2.toLowerCase();\r\n  for (var i = 0, j = Math.max(str1.length, str2.length); i < j; i++) {\r\n    let match = true\r\n    if (!str1[i] || !str2[i] || str1[i] !== str2[i])\r\n      match = false\r\n    if (str1[i - 1] === str2[i] || str1[i + 1] === str2[i])\r\n      match = true\r\n    if (!match) dist++\r\n  }\r\n  return dist;\r\n}\r\n\r\n//multiplies every numberical value in the obj by a multiplier.\r\nexport function objMultiplication(obj, multi) {\r\n  if (multi === 1) return obj\r\n  Object.keys(obj).forEach((prop: any) => {\r\n    if (typeof obj[prop] === \"object\") objMultiplication(obj[prop], multi)\r\n    if (typeof obj[prop] === \"number\") obj[prop] = obj[prop] * multi\r\n  })\r\n  return obj\r\n}\r\n\r\n//assign obj.[keys...] = value\r\nexport function layeredAssignment(obj, keys, value) {\r\n  keys.reduce((accu, key, i, arr) => {\r\n    if (i === arr.length - 1) return (accu[key] = value)\r\n    if (!accu[key]) accu[key] = {}\r\n    return accu[key]\r\n  }, obj)\r\n  return obj\r\n}\r\nexport function objPathValue(obj, keys) {\r\n  return keys.reduce((a, k) => a?.[k], obj)\r\n}\r\n//delete the value denoted by the path. Will also delete empty objects as well.\r\nexport function deletePropPath(obj, path) {\r\n  const tempPath = [...path]\r\n  const lastKey = tempPath.pop()\r\n  const objPathed = objPathValue(obj, tempPath)\r\n  delete objPathed[lastKey];\r\n}\r\n\r\nexport function objClearEmpties(o) {\r\n  for (const k in o) {\r\n    if (typeof o[k] !== \"object\") continue\r\n    objClearEmpties(o[k])\r\n    if (!Object.keys(o[k]).length) delete o[k];\r\n  }\r\n}\r\nexport function crawlObject(obj, keys, validate, cb) {\r\n  if (validate(obj)) cb(obj, keys)\r\n  else obj && typeof obj === \"object\" && Object.entries(obj).forEach(([key, val]) => crawlObject(val, [...keys, key], validate, cb))\r\n}\r\n// const getObjectKeysRecursive = (obj) => Object.values(obj).reduce((a, prop) => typeof prop === \"object\" ? [...a, ...getObjectKeysRecursive(prop)] : a, Object.keys(obj))\r\nexport const getObjectKeysRecursive = (obj) => typeof obj === \"object\" ? Object.values(obj).flatMap(getObjectKeysRecursive).concat(Object.keys(obj)) : (typeof obj === \"string\" ? [obj] : [])\r\n\r\nexport function evalIfFunc<T, X>(value: T | ((arg: X) => T), arg: X): T {\r\n  return typeof value === \"function\" ? (value as any)(arg) : value\r\n}","//for DB v2, we changed a bunch of keys.\r\nconst changes: { [oldKey: string]: string } = {\r\n  char_ele_key: \"characterEle\",\r\n  char_level: \"characterLevel\",\r\n\r\n  hp_base: \"characterHP\",\r\n  hp_final: \"finalHP\",\r\n  atk_character_base: \"characterATK\",\r\n  atk_base: \"baseATK\",\r\n  atk_final: \"finalATK\",\r\n  atk_weapon: \"weaponATK\",\r\n  def_base: \"characterDEF\",\r\n  def_final: \"finalDEF\",\r\n  phy_dmg_bonus: \"physical_dmg_\",\r\n  phy_res: \"physical_res_\",\r\n  anemo_ele_dmg_bonus: \"anemo_dmg_\",\r\n  geo_ele_dmg_bonus: \"geo_dmg_\",\r\n  electro_ele_dmg_bonus: \"electro_dmg_\",\r\n  hydro_ele_dmg_bonus: \"hydro_dmg_\",\r\n  pyro_ele_dmg_bonus: \"pyro_dmg_\",\r\n  cryo_ele_dmg_bonus: \"cryo_dmg_\",\r\n  anemo_ele_res: \"anemo_res_\",\r\n  geo_ele_res: \"geo_res_\",\r\n  electro_ele_res: \"electro_res_\",\r\n  hydro_ele_res: \"hydro_res_\",\r\n  pyro_ele_res: \"pyro_res_\",\r\n  cryo_ele_res: \"cryo_res_\",\r\n  ener_rech: \"enerRech_\",\r\n  crit_rate: \"critRate_\",\r\n  crit_dmg: \"critDMG_\",\r\n  stam: \"stamina\",\r\n  heal_bonu: \"heal_\",\r\n  inc_heal: \"incHeal_\",\r\n  pow_shield: \"powShield_\",\r\n  red_cd: \"cdRed_\",\r\n  skill_cd_red: \"skillCDRed_\",\r\n  burst_cd_red: \"burstCDRed_\",\r\n  all_dmg_bonus: \"dmg_\",\r\n  move_spd: \"moveSPD_\",\r\n  atk_spd: \"atkSPD_\",\r\n  weakspot_dmg: \"weakspotDMG_\",\r\n  stamina_dec: \"staminaDec_\",\r\n  stamina_gliding_dec: \"staminaGlidingDec_\",\r\n  stamina_charged_dec: \"staminaChargedDec_\",\r\n  ele_mas_multi_x: \"eleMasX\",\r\n  ele_mas_multi_y: \"eleMasY\",\r\n  ele_mas_multi_z: \"eleMasZ\",\r\n\r\n  norm_atk_dmg: \"physical_normal_hit\",\r\n  char_atk_dmg: \"physical_charged_hit\",\r\n  plunge_dmg: \"physical_plunging_hit\",\r\n  norm_atk_crit_dmg: \"physical_normal_critHit\",\r\n  char_atk_crit_dmg: \"physical_charged_critHit\",\r\n  plunge_crit_dmg: \"physical_plunging_critHit\",\r\n  norm_atk_avg_dmg: \"physical_normal_avgHit\",\r\n  char_atk_avg_dmg: \"physical_charged_avgHit\",\r\n  plunge_avg_dmg: \"physical_plunging_avgHit\",\r\n  norm_atk_dmg_bonus: \"normal_dmg_\",\r\n  char_atk_dmg_bonus: \"charged_dmg_\",\r\n  plunge_atk_dmg_bonus: \"plunging_dmg_\",\r\n  skill_dmg_bonus: \"skill_dmg_\",\r\n  burst_dmg_bonus: \"burst_dmg_\",\r\n  norm_atk_crit_rate: \"normal_critRate_\",\r\n  char_atk_crit_rate: \"charged_critRate_\",\r\n  skill_crit_rate: \"skill_critRate_\",\r\n  burst_crit_rate: \"burst_critRate_\",\r\n\r\n  anemo_skill_dmg: \"anemo_skill_hit\",\r\n  anemo_burst_dmg: \"anemo_burst_hit\",\r\n  anemo_skill_crit_dmg: \"anemo_skill_critHit\",\r\n  anemo_burst_crit_dmg: \"anemo_burst_critHit\",\r\n  anemo_skill_avg_dmg: \"anemo_skill_avgHit\",\r\n  anemo_burst_avg_dmg: \"anemo_burst_avgHit\",\r\n  geo_skill_dmg: \"geo_skill_hit\",\r\n  geo_burst_dmg: \"geo_burst_hit\",\r\n  geo_skill_crit_dmg: \"geo_skill_critHit\",\r\n  geo_burst_crit_dmg: \"geo_burst_critHit\",\r\n  geo_skill_avg_dmg: \"geo_skill_avgHit\",\r\n  geo_burst_avg_dmg: \"geo_burst_avgHit\",\r\n  electro_skill_dmg: \"electro_skill_hit\",\r\n  electro_burst_dmg: \"electro_burst_hit\",\r\n  electro_skill_crit_dmg: \"electro_skill_critHit\",\r\n  electro_burst_crit_dmg: \"electro_burst_critHit\",\r\n  electro_skill_avg_dmg: \"electro_skill_avgHit\",\r\n  electro_burst_avg_dmg: \"electro_burst_avgHit\",\r\n  hydro_skill_dmg: \"hydro_skill_hit\",\r\n  hydro_burst_dmg: \"hydro_burst_hit\",\r\n  hydro_skill_crit_dmg: \"hydro_skill_critHit\",\r\n  hydro_burst_crit_dmg: \"hydro_burst_critHit\",\r\n  hydro_skill_avg_dmg: \"hydro_skill_avgHit\",\r\n  hydro_burst_avg_dmg: \"hydro_burst_avgHit\",\r\n  pyro_skill_dmg: \"pyro_skill_hit\",\r\n  pyro_burst_dmg: \"pyro_burst_hit\",\r\n  pyro_skill_crit_dmg: \"pyro_skill_critHit\",\r\n  pyro_burst_crit_dmg: \"pyro_burst_critHit\",\r\n  pyro_skill_avg_dmg: \"pyro_skill_avgHit\",\r\n  pyro_burst_avg_dmg: \"pyro_burst_avgHit\",\r\n  cryo_skill_dmg: \"cryo_skill_hit\",\r\n  cryo_burst_dmg: \"cryo_burst_hit\",\r\n  cryo_skill_crit_dmg: \"cryo_skill_critHit\",\r\n  cryo_burst_crit_dmg: \"cryo_burst_critHit\",\r\n  cryo_skill_avg_dmg: \"cryo_skill_avgHit\",\r\n  cryo_burst_avg_dmg: \"cryo_burst_avgHit\",\r\n\r\n  phy_dmg: \"physical_hit\",\r\n  phy_crit_dmg: \"physical_critHit\",\r\n  phy_avg_dmg: \"physical_avgHit\",\r\n  anemo_ele_dmg: \"anemo_hit\",\r\n  anemo_ele_crit_dmg: \"anemo_critHit\",\r\n  anemo_ele_avg_dmg: \"anemo_avgHit\",\r\n  geo_ele_dmg: \"geo_hit\",\r\n  geo_ele_crit_dmg: \"geo_critHit\",\r\n  geo_ele_avg_dmg: \"geo_avgHit\",\r\n  electro_ele_dmg: \"electro_hit\",\r\n  electro_ele_crit_dmg: \"electro_critHit\",\r\n  electro_ele_avg_dmg: \"electro_avgHit\",\r\n  hydro_ele_dmg: \"hydro_hit\",\r\n  hydro_ele_crit_dmg: \"hydro_critHit\",\r\n  hydro_ele_avg_dmg: \"hydro_avgHit\",\r\n  pyro_ele_dmg: \"pyro_hit\",\r\n  pyro_ele_crit_dmg: \"pyro_critHit\",\r\n  pyro_ele_avg_dmg: \"pyro_avgHit\",\r\n  cryo_ele_dmg: \"cryo_hit\",\r\n  cryo_ele_crit_dmg: \"cryo_critHit\",\r\n  cryo_ele_avg_dmg: \"cryo_avgHit\",\r\n\r\n  overload_dmg: \"overload_hit\",\r\n  overload_dmg_bonus: \"overload_dmg_\",\r\n  overload_multi: \"overload_multi\",\r\n  electrocharged_dmg: \"electrocharged_hit\",\r\n  electrocharged_dmg_bonus: \"electrocharged_dmg_\",\r\n  electrocharged_multi: \"electrocharged_multi\",\r\n  superconduct_dmg: \"superconduct_hit\",\r\n  superconduct_dmg_bonus: \"superconduct_dmg_\",\r\n  superconduct_multi: \"superconduct_multi\",\r\n  burning_dmg: \"burning_hit\",\r\n  burning_dmg_bonus: \"burning_dmg_\",\r\n  swirl_dmg: \"swirl_hit\",\r\n  swirl_dmg_bonus: \"swirl_dmg_\",\r\n  swirl_multi: \"swirl_multi\",\r\n  shatter_dmg: \"shattered_hit\",\r\n  shatter_dmg_bonus: \"shattered_dmg_\",\r\n  shatter_multi: \"shattered_multi\",\r\n  crystalize_dmg: \"crystalize_hit\",\r\n  crystalize_dmg_bonus: \"crystalize_dmg_\",\r\n\r\n  melt_dmg_bonus: \"melt_dmg_\",\r\n  vaporize_dmg_bonus: \"vaporize_dmg_\",\r\n\r\n  pyro_vaporize_normal_dmg: \"pyro_vaporize_normal_hit\",\r\n  pyro_vaporize_normal_crit_dmg: \"pyro_vaporize_normal_critHit\",\r\n  pyro_vaporize_normal_avg_dmg: \"pyro_vaporize_normal_avgHit\",\r\n  pyro_vaporize_chraged_dmg: \"pyro_vaporize_chraged_hit\",\r\n  pyro_vaporize_chraged_crit_dmg: \"pyro_vaporize_chraged_critHit\",\r\n  pyro_vaporize_chraged_avg_dmg: \"pyro_vaporize_chraged_avgHit\",\r\n  pyro_vaporize_plunge_dmg: \"pyro_vaporize_plunging_hit\",\r\n  pyro_vaporize_plunge_crit_dmg: \"pyro_vaporize_plunging_critHit\",\r\n  pyro_vaporize_plunge_avg_dmg: \"pyro_vaporize_plunging_avgHit\",\r\n  pyro_vaporize_skill_dmg: \"pyro_vaporize_skill_hit\",\r\n  pyro_vaporize_skill_crit_dmg: \"pyro_vaporize_skill_critHit\",\r\n  pyro_vaporize_skill_avg_dmg: \"pyro_vaporize_skill_avgHit\",\r\n  pyro_vaporize_burst_dmg: \"pyro_vaporize_burst_hit\",\r\n  pyro_vaporize_burst_crit_dmg: \"pyro_vaporize_burst_critHit\",\r\n  pyro_vaporize_burst_avg_dmg: \"pyro_vaporize_burst_avgHit\",\r\n  pyro_vaporize_ele_dmg: \"pyro_vaporize_hit\",\r\n  pyro_vaporize_ele_crit_dmg: \"pyro_vaporize_critHit\",\r\n  pyro_vaporize_ele_avg_dmg: \"pyro_vaporize_avgHit\",\r\n  hydro_vaporize_normal_dmg: \"hydro_vaporize_normal_hit\",\r\n  hydro_vaporize_normal_crit_dmg: \"hydro_vaporize_normal_critHit\",\r\n  hydro_vaporize_normal_avg_dmg: \"hydro_vaporize_normal_avgHit\",\r\n  hydro_vaporize_chraged_dmg: \"hydro_vaporize_chraged_hit\",\r\n  hydro_vaporize_chraged_crit_dmg: \"hydro_vaporize_chraged_critHit\",\r\n  hydro_vaporize_chraged_avg_dmg: \"hydro_vaporize_chraged_avgHit\",\r\n  hydro_vaporize_plunge_dmg: \"hydro_vaporize_plunging_hit\",\r\n  hydro_vaporize_plunge_crit_dmg: \"hydro_vaporize_plunging_critHit\",\r\n  hydro_vaporize_plunge_avg_dmg: \"hydro_vaporize_plunging_avgHit\",\r\n  hydro_vaporize_skill_dmg: \"hydro_vaporize_skill_hit\",\r\n  hydro_vaporize_skill_crit_dmg: \"hydro_vaporize_skill_critHit\",\r\n  hydro_vaporize_skill_avg_dmg: \"hydro_vaporize_skill_avgHit\",\r\n  hydro_vaporize_burst_dmg: \"hydro_vaporize_burst_hit\",\r\n  hydro_vaporize_burst_crit_dmg: \"hydro_vaporize_burst_critHit\",\r\n  hydro_vaporize_burst_avg_dmg: \"hydro_vaporize_burst_avgHit\",\r\n  hydro_vaporize_ele_dmg: \"hydro_vaporize_hit\",\r\n  hydro_vaporize_ele_crit_dmg: \"hydro_vaporize_critHit\",\r\n  hydro_vaporize_ele_avg_dmg: \"hydro_vaporize_avgHit\",\r\n  pyro_melt_normal_dmg: \"pyro_melt_normal_hit\",\r\n  pyro_melt_normal_crit_dmg: \"pyro_melt_normal_critHit\",\r\n  pyro_melt_normal_avg_dmg: \"pyro_melt_normal_avgHit\",\r\n  pyro_melt_chraged_dmg: \"pyro_melt_chraged_hit\",\r\n  pyro_melt_chraged_crit_dmg: \"pyro_melt_chraged_critHit\",\r\n  pyro_melt_chraged_avg_dmg: \"pyro_melt_chraged_avgHit\",\r\n  pyro_melt_plunge_dmg: \"pyro_melt_plunging_hit\",\r\n  pyro_melt_plunge_crit_dmg: \"pyro_melt_plunging_critHit\",\r\n  pyro_melt_plunge_avg_dmg: \"pyro_melt_plunging_avgHit\",\r\n  pyro_melt_skill_dmg: \"pyro_melt_skill_hit\",\r\n  pyro_melt_skill_crit_dmg: \"pyro_melt_skill_critHit\",\r\n  pyro_melt_skill_avg_dmg: \"pyro_melt_skill_avgHit\",\r\n  pyro_melt_burst_dmg: \"pyro_melt_burst_hit\",\r\n  pyro_melt_burst_crit_dmg: \"pyro_melt_burst_critHit\",\r\n  pyro_melt_burst_avg_dmg: \"pyro_melt_burst_avgHit\",\r\n  pyro_melt_ele_dmg: \"pyro_melt_hit\",\r\n  pyro_melt_ele_crit_dmg: \"pyro_melt_critHit\",\r\n  pyro_melt_ele_avg_dmg: \"pyro_melt_avgHit\",\r\n  cryo_melt_normal_dmg: \"cryo_melt_normal_hit\",\r\n  cryo_melt_normal_crit_dmg: \"cryo_melt_normal_critHit\",\r\n  cryo_melt_normal_avg_dmg: \"cryo_melt_normal_avgHit\",\r\n  cryo_melt_chraged_dmg: \"cryo_melt_chraged_hit\",\r\n  cryo_melt_chraged_crit_dmg: \"cryo_melt_chraged_critHit\",\r\n  cryo_melt_chraged_avg_dmg: \"cryo_melt_chraged_avgHit\",\r\n  cryo_melt_plunge_dmg: \"cryo_melt_plunging_hit\",\r\n  cryo_melt_plunge_crit_dmg: \"cryo_melt_plunging_critHit\",\r\n  cryo_melt_plunge_avg_dmg: \"cryo_melt_plunging_avgHit\",\r\n  cryo_melt_skill_dmg: \"cryo_melt_skill_hit\",\r\n  cryo_melt_skill_crit_dmg: \"cryo_melt_skill_critHit\",\r\n  cryo_melt_skill_avg_dmg: \"cryo_melt_skill_avgHit\",\r\n  cryo_melt_burst_dmg: \"cryo_melt_burst_hit\",\r\n  cryo_melt_burst_crit_dmg: \"cryo_melt_burst_critHit\",\r\n  cryo_melt_burst_avg_dmg: \"cryo_melt_burst_avgHit\",\r\n  cryo_melt_ele_dmg: \"cryo_melt_hit\",\r\n  cryo_melt_ele_crit_dmg: \"cryo_melt_critHit\",\r\n  cryo_melt_ele_avg_dmg: \"cryo_melt_avgHit\",\r\n\r\n  enemy_phy_res: \"physical_enemyRes_\",\r\n  enemy_phy_res_multi: \"physical_enemyRes_multi\",\r\n  enemy_phy_immunity: \"physical_enemyImmunity\",\r\n  anemo_enemy_ele_res: \"anemo_enemyRes_\",\r\n  anemo_enemy_ele_res_multi: \"anemo_enemyRes_multi\",\r\n  anemo_enemy_ele_immunity: \"anemo_enemyImmunity\",\r\n  geo_enemy_ele_res: \"geo_enemyRes_\",\r\n  geo_enemy_ele_res_multi: \"geo_enemyRes_multi\",\r\n  geo_enemy_ele_immunity: \"geo_enemyImmunity\",\r\n  electro_enemy_ele_res: \"electro_enemyRes_\",\r\n  electro_enemy_ele_res_multi: \"electro_enemyRes_multi\",\r\n  electro_enemy_ele_immunity: \"electro_enemyImmunity\",\r\n  hydro_enemy_ele_res: \"hydro_enemyRes_\",\r\n  hydro_enemy_ele_res_multi: \"hydro_enemyRes_multi\",\r\n  hydro_enemy_ele_immunity: \"hydro_enemyImmunity\",\r\n  pyro_enemy_ele_res: \"pyro_enemyRes_\",\r\n  pyro_enemy_ele_res_multi: \"pyro_enemyRes_multi\",\r\n  pyro_enemy_ele_immunity: \"pyro_enemyImmunity\",\r\n  cryo_enemy_ele_res: \"cryo_enemyRes_\",\r\n  cryo_enemy_ele_res_multi: \"cryo_enemyRes_multi\",\r\n  cryo_enemy_ele_immunity: \"cryo_enemyImmunity\",\r\n\r\n  ele_mas: \"eleMas\",\r\n  amp_reaction_base_multi: \"ampReactionBase_multi\",\r\n\r\n  enemy_level_multi: \"enemyLevel_multi\",\r\n  enemy_level: \"enemyLevel\"\r\n}\r\n/*\r\nconst same = [\r\n  hp, hp_, atk, atk_, def, def_, pyro_vaporize_multi, hydro_vaporize_multi, pyro_melt_multi, cryo_melt_multi,\r\n]\r\n\r\nconst removed = [\r\n  norm_atk_crit_multi, char_atk_crit_multi, norm_atk_bonus_multi, char_atk_bonus_multi, plunge_bonus_multi, skill_crit_multi, burst_crit_multi, skill_bonus_multi, burst_bonus_multi, phy_bonus_multi, anemo_ele_bonus_multi, geo_ele_bonus_multi, electro_ele_bonus_multi, hydro_ele_bonus_multi, pyro_ele_bonus_multi, cryo_ele_bonus_multi, crit_dmg_multi, crit_multi,\r\n]\r\n\r\nconst aded = [\r\n  plunging_critRate_, final_normal_critRate_, final_charged_critRate_, final_plunging_critRate_, final_skill_critRate_, final_burst_critRate_,\r\n]\r\n*/\r\n\r\n//renamed dmgMode to hitMode\r\nconst dmgModeToHitMode = {\r\n  avg_dmg: \"avgHit\",\r\n  dmg: \"hit\",\r\n  crit_dmg: \"critHit\"\r\n}\r\nexport { changes, dmgModeToHitMode }","import ArtifactDatabase from \"./ArtifactDatabase\";\r\nimport CharacterDatabase from \"./CharacterDatabase\";\r\nimport { changes as v2change, dmgModeToHitMode } from \"./dbV2KeyMap\";\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\";\r\nimport { allSlotKeys } from \"../Types/consts\";\r\n\r\nconst CurrentDatabaseVersion = 3\r\n\r\nfunction DatabaseInitAndVerify() {\r\n  const dbVersion = getDatabaseVersion()\r\n  //edit the data before the database is populated\r\n  if (dbVersion < 2) {\r\n    //made characters unique, so need to convert character_{NUMBER} to char_{characterKey}. Will only save the 1st instance of a character.\r\n    Object.keys(localStorage).filter(key => key.startsWith(\"character_\")).forEach(key => {\r\n      const character = loadFromLocalStorage(key);\r\n      const { characterKey, equippedArtifacts = {} } = character\r\n      const dbKey = `char_${characterKey}`\r\n      if (localStorage.getItem(dbKey) === null) {\r\n        //if there is no character saved, create a new character\r\n        const { id, name, dmgMode, ...rest } = character\r\n        if (Array.isArray(rest?.buildSetting?.mainStat))\r\n          rest.buildSetting.mainStat = rest.buildSetting.mainStat.map(stat => stat in v2change ? v2change[stat] : stat)\r\n        if (typeof rest?.buildSetting?.statFilters === \"object\")\r\n          rest.buildSetting.statFilters = Object.fromEntries(Object.entries(rest.buildSetting.statFilters).map(([stat, value]: any) => [stat in v2change ? v2change[stat] : stat, value]))\r\n        rest.hitMode = dmgModeToHitMode[dmgMode] ?? Object.keys(dmgModeToHitMode)[0]\r\n        saveToLocalStorage(dbKey, rest)\r\n        //equip to the new character\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = characterKey\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      } else {\r\n        //if the character does exist, \"move\" the artifacts equipped to inventory\r\n        Object.values(equippedArtifacts).forEach(artid => {\r\n          const art = loadFromLocalStorage(artid);\r\n          if (!art) return\r\n          art.location = \"\"\r\n          saveToLocalStorage(artid, art)\r\n        });\r\n      }\r\n      //delete the old database\r\n      localStorage.removeItem(key)\r\n    })\r\n    //reset the ArtifactDisplay keys\r\n    const ArtifactDisplayState = loadFromLocalStorage(\"ArtifactDisplay.state\")\r\n    if (ArtifactDisplayState) {\r\n      if (ArtifactDisplayState.filterMainStatKey in v2change)\r\n        ArtifactDisplayState.filterMainStatKey = v2change[ArtifactDisplayState.filterMainStatKey]\r\n      ArtifactDisplayState.filterSubstats = ArtifactDisplayState.filterSubstats.map(stat => stat in v2change ? v2change[stat] : stat)\r\n      saveToLocalStorage(\"ArtifactDisplay.state\", ArtifactDisplayState)\r\n    }\r\n  }\r\n  if (dbVersion < 3) {\r\n    const state = loadFromLocalStorage(\"CharacterDisplay.state\")\r\n    if (state) {\r\n      if (Array.isArray(state.elementalFilter)) state.elementalFilter = \"\"\r\n      if (Array.isArray(state.weaponFilter)) state.weaponFilter = \"\"\r\n      saveToLocalStorage(\"CharacterDisplay.state\", state)\r\n    }\r\n  }\r\n\r\n  //this will only run if neither of the database has been initated.\r\n  const charDBJustPopualted = CharacterDatabase.populateDatebaseFromLocalStorage(),\r\n    artDBJustPopualted = ArtifactDatabase.populateDatebaseFromLocalStorage()\r\n  if (!charDBJustPopualted && !artDBJustPopualted) return\r\n\r\n  Object.values(deepClone(ArtifactDatabase.getArtifactDatabase())).forEach((art: any) => {\r\n    let valid = true\r\n\r\n    //verify the linking of artifacts and characters\r\n    if (art.location) {\r\n      const locationChar = CharacterDatabase.get(art.location)\r\n      if (locationChar) {\r\n        let artInSlotId = CharacterDatabase.getArtifactIDFromSlot(art.location, art.slotKey)\r\n        if (!artInSlotId) {//character doesnt seem to show this artifact equipped...\r\n          CharacterDatabase.equipArtifactOnSlot(art.location, art.slotKey, art.id)\r\n        } else if (artInSlotId !== art.id) {//character has a different artifact equipped, invalidate this location\r\n          art.location = \"\"\r\n          valid = false\r\n        }\r\n      } else {\r\n        art.location = \"\"\r\n        valid = false\r\n      }\r\n    }\r\n\r\n    if (dbVersion < 2) {\r\n      if (art.mainStatKey in v2change) {\r\n        art.mainStatKey = v2change[art.mainStatKey]\r\n        valid = false\r\n      }\r\n      art?.substats?.forEach((obj, i) => {\r\n        if (obj.key in v2change) {\r\n          art.substats[i].key = v2change[obj.key]\r\n          valid = false\r\n        }\r\n      })\r\n    }\r\n    if (dbVersion < 3) {\r\n      //remove cached efficiency & rolls\r\n      delete art.currentEfficiency\r\n      delete art.maximumEfficiency\r\n      art?.substats?.forEach((substat, i) => {\r\n        delete substat.efficiency\r\n        delete substat.rolls\r\n      })\r\n      valid = false\r\n    }\r\n\r\n    //Update any invalid artifacts in DB\r\n    if (!valid) ArtifactDatabase.update(art)\r\n  })\r\n\r\n  let chars = CharacterDatabase.getCharacterDatabase();\r\n  Object.values(chars).forEach((character: any) => {\r\n    let valid = true;\r\n    const { characterKey } = character\r\n    //verify character database equipment validity\r\n    if (!character.equippedArtifacts || !Object.keys(character.equippedArtifacts).length) {\r\n      character.equippedArtifacts = Object.fromEntries(allSlotKeys.map(sk => [sk, \"\"]))\r\n      valid = false\r\n    }\r\n    Object.entries(character.equippedArtifacts).forEach(([slotKey, artid]) => {\r\n      const equippedArt = ArtifactDatabase.get(artid)\r\n      if (equippedArt && equippedArt.location !== characterKey) //the artifact doesnt have the right location...\r\n        ArtifactDatabase.moveToNewLocation(artid, characterKey)\r\n      if (artid && !equippedArt) {\r\n        valid = false\r\n        character.equippedArtifacts[slotKey as any] = \"\"\r\n      }\r\n    })\r\n\r\n    if (dbVersion < 3) {\r\n      delete character.artifactConditional\r\n      delete character.talentCondtiional\r\n      delete character.autoInfused\r\n      if (character.buildSetting) {\r\n        const { artifactsAssumeFull = false, ascending = false, mainStat = [\"\", \"\", \"\"], setFilters = [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }], useLockedArts = false } = character.buildSetting ?? {}\r\n        delete character.buildSetting\r\n        character.buildSettings = { mainStatAssumptionLevel: artifactsAssumeFull ? 20 : 0, ascending, mainStatKeys: mainStat, setFilters, useLockedArts }\r\n      }\r\n      delete character.weapon?.conditionalNum\r\n      valid = false\r\n    }\r\n\r\n    //update any invalid characters in DB\r\n    if (!valid) CharacterDatabase.update(character)\r\n  })\r\n  setDatabaseVersion(CurrentDatabaseVersion)\r\n}\r\nconst getDatabaseVersion = (defVal = 0) =>\r\n  parseInt(loadFromLocalStorage(\"db_ver\") ?? defVal)\r\n\r\nconst setDatabaseVersion = (version) =>\r\n  saveToLocalStorage(\"db_ver\", version)\r\n\r\nfunction createDatabaseObj() {\r\n  const characterDatabase = CharacterDatabase.getCharacterDatabase()\r\n  const artifactDatabase = ArtifactDatabase.getArtifactDatabase()\r\n  const artifactDisplay = loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}\r\n  const characterDisplay = loadFromLocalStorage(\"CharacterDisplay.state\") ?? {}\r\n  const buildsDisplay = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n\r\n  return {\r\n    version: getDatabaseVersion(),\r\n    characterDatabase,\r\n    artifactDatabase,\r\n    artifactDisplay,\r\n    characterDisplay,\r\n    buildsDisplay,\r\n  }\r\n}\r\n\r\nfunction loadDatabaseObj({ version = 0, characterDatabase, artifactDatabase, artifactDisplay, characterDisplay, buildsDisplay, }) {\r\n  clearDatabase()\r\n  //load from obj charDB,artDB\r\n  Object.entries(characterDatabase).forEach(([charKey, char]) => saveToLocalStorage(`char_${charKey}`, char))\r\n  Object.entries(artifactDatabase).forEach(([id, art]) => saveToLocalStorage(id, art))\r\n  //override version\r\n  setDatabaseVersion(version)\r\n  saveToLocalStorage(\"ArtifactDisplay.state\", artifactDisplay)\r\n  saveToLocalStorage(\"CharacterDisplay.state\", characterDisplay)\r\n  saveToLocalStorage(\"BuildsDisplay.state\", buildsDisplay)\r\n\r\n  DatabaseInitAndVerify()\r\n}\r\nfunction clearDatabase() {\r\n  //delete all characters and artifacts\r\n  Object.keys(localStorage).filter(key => key.startsWith(\"char_\") || key.startsWith(\"artifact_\")).forEach(id =>\r\n    localStorage.removeItem(id))\r\n  localStorage.removeItem(\"db_ver\")\r\n  localStorage.removeItem(\"ArtifactDisplay.state\")\r\n  localStorage.removeItem(\"CharacterDisplay.state\")\r\n  localStorage.removeItem(\"BuildsDisplay.state\")\r\n  //clear the database to validate again\r\n  CharacterDatabase.clearDatabase()\r\n  ArtifactDatabase.clearDatabase()\r\n}\r\nexport {\r\n  DatabaseInitAndVerify,\r\n  createDatabaseObj,\r\n  loadDatabaseObj,\r\n  clearDatabase,\r\n  CurrentDatabaseVersion\r\n};\r\n","import { faDiscord, faPatreon, faPaypal } from '@fortawesome/free-brands-svg-icons';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy, Suspense } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport ReactGA from 'react-ga';\r\nimport { HashRouter, Link, Route, Switch } from \"react-router-dom\";\r\nimport { version } from \"../package.json\";\r\nimport './App.scss';\r\nimport './Assets/Image.scss';\r\nimport { DatabaseInitAndVerify } from './Database/DatabaseUtil';\r\n\r\nconst Home = lazy(() => import('./Home/HomeDisplay'))\r\nconst ArtifactDisplay = lazy(() => import('./Artifact/ArtifactDisplay'))\r\nconst CharacterDisplay = lazy(() => import('./Character/CharacterDisplay'))\r\nconst BuildDisplay = lazy(() => import('./Build/BuildDisplay'))\r\nconst Planner = lazy(() => import('./Planner/PlannerDisplay'))\r\nconst TestDisplay = lazy(() => import('./TestPage/TestDisplay'))\r\nconst FlexDisplay = lazy(() => import('./FlexPage/FlexDisplay'))\r\nconst SettingsDisplay = lazy(() => import('./Settings/SettingsDisplay'))\r\nDatabaseInitAndVerify()\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"h-100 d-flex flex-column\">\r\n        <div id=\"content\" className=\"flex-grow-1\">\r\n          <Navbar bg=\"dark\" variant=\"dark\" expand=\"md\">\r\n            <Navbar.Brand as={Link} to=\"/\">Genshin Optimizer</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link as={Link} to=\"/artifact\">\r\n                  Artifacts</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/character\">Characters</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/build\">Builds</Nav.Link>\r\n                <Nav.Link as={Link} to=\"/tools\">Tools</Nav.Link>\r\n                {process.env.NODE_ENV === \"development\" && <Nav.Link as={Link} to=\"/test\">TEST</Nav.Link>}\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link href={process.env.REACT_APP_PAYPAL_LINK} target=\"_blank\" rel=\"noreferrer\" onClick={() => ReactGA.outboundLink({ label: \"patreon\" }, () => { })}>\r\n                  <span><FontAwesomeIcon icon={faPaypal} className=\"fa-fw\" /> PayPal</span>\r\n                </Nav.Link>\r\n                <Nav.Link href={process.env.REACT_APP_PATREON_LINK} target=\"_blank\" rel=\"noreferrer\" onClick={() => ReactGA.outboundLink({ label: \"patreon\" }, () => { })}>\r\n                  <span><FontAwesomeIcon icon={faPatreon} className=\"fa-fw\" /> Patreon</span>\r\n                </Nav.Link>\r\n                <Nav.Link href={process.env.REACT_APP_DISCORD_LINK} target=\"_blank\" rel=\"noreferrer\" onClick={() => ReactGA.outboundLink({ label: \"discord\" }, () => { })}>\r\n                  <span><FontAwesomeIcon icon={faDiscord} className=\"fa-fw\" /> Discord</span>\r\n                </Nav.Link>\r\n                <Nav.Link as={Link} to=\"/setting\"><FontAwesomeIcon icon={faCog} /></Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n          <Suspense fallback={<Container>\r\n            <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mt-2\">\r\n              <Card.Body>\r\n                <h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>\r\n              </Card.Body>\r\n            </Card></Container>}>\r\n            <Switch>\r\n              <Route path=\"/artifact\" component={ArtifactDisplay} />\r\n              <Route path=\"/character\" component={CharacterDisplay} />\r\n              <Route path=\"/build\" component={BuildDisplay} />\r\n              <Route path=\"/tools\" component={Planner} />\r\n              {process.env.NODE_ENV === \"development\" && <Route path=\"/test\" component={TestDisplay} />}\r\n              <Route path=\"/setting\" component={SettingsDisplay} />\r\n              <Route path=\"/flex\" component={FlexDisplay} />\r\n              <Route path=\"/\" component={Home} />\r\n              {/* <Route exact path=\"/\" component={Home} /> */}\r\n            </Switch>\r\n          </Suspense>\r\n        </div>\r\n        <Nav id=\"footer\" className=\"bg-dark\">\r\n          <Row className=\"w-100 ml-0 mr-0 mb-2 text-light d-flex justify-content-between\">\r\n            <Col xs={\"auto\"}>\r\n              <span > <small>Genshin Optimizer is not affiliated with or endorsed by miHoYo. </small></span>\r\n            </Col>\r\n            <Col xs={\"auto\"}>\r\n              <span  ><small > Genshin Optimizer Ver:{version} </small></span>\r\n            </Col>\r\n          </Row>\r\n        </Nav>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize(process.env.REACT_APP_GA_TRACKINGID as any, {\r\n  // debug: process.env.NODE_ENV === \"development\"\r\n});\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(undefined);\r\n"],"sourceRoot":""}