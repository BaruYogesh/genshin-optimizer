{"version":3,"file":"static/js/726.961257ab.chunk.js","mappings":"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","sources":["Data/Characters/dataUtil.tsx","Data/Characters/Albedo/assets.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/assets.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/assets.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/assets.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/assets.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/assets.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/assets.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/assets.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Diluc/assets.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/assets.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Eula/assets.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/assets.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/assets.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/assets.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/assets.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/assets.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/assets.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/assets.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/assets.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/assets.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/assets.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/assets.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/assets.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/Lisa/assets.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/assets.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/assets.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/assets.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/assets.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/assets.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/assets.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/assets.ts","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/assets.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/assets.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/assets.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/Sucrose/assets.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/assets.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/assets.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Traveler/anemo/assets.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/electro/assets.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/geo/assets.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/assets.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/assets.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/assets.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/assets.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/assets.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/assets.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/assets.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yoimiya/assets.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/assets.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/assets.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts","Formula/reaction.ts"],"sourcesContent":["import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nexport const infusionNode = stringPrio(\r\n  input.infusion.nonOverridableSelf,\r\n  input.infusion.team,\r\n  input.infusion.overridableSelf)\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Albedo_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n        [i,\r\n          prod(i, datamine.constellation2.blossomDmgInc)]\r\n      )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"blossomCD\"),\r\n          value: datamine.skill.blossomCd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1EnemyHp,\r\n        path: condP1EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n        states: {\r\n          belowHp: {\r\n            fields: [{\r\n              node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condSkillInField,\r\n        path: condSkillInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          skillInField: {\r\n            fields: [{\r\n              node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Crystallize,\r\n        path: condC6CrystallizePath,\r\n        name: st(\"protectedByShieldCrystal\"),\r\n        canShow: equal(condSkillInField, \"skillInField\", 1),\r\n        teamBuff: true,\r\n        states: {\r\n          c6Crystallize: {\r\n            fields: [{\r\n              node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condBurstUsed,\r\n        path: condBurstUsedPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          burstUsed: {\r\n            fields: [{\r\n              node: p2Burst_eleMas\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2Stacks,\r\n        path: condC2StacksPath,\r\n        name: trm(\"c2Stacks\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: c2_burst_dmgInc\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Aloy_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: matchFull(\"rush\", condCoil, constant(elementKey), constant(\"physical\"))\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease, { key: \"_\" })\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n          textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => (datamine.skill.atkDecrease[data.get(input.total.skillIndex).value] * 100).toFixed(1),\r\n          unit: \"%\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.atkDecreaseDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.7\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: trm(\"normCryoInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: equal(\"rush\", condCoil, 1),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\"),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\"),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Amber_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"critRateBonus\"),\r\n          value: datamine.passive1.critRateInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          text: trm(\"aoeRangeBonus\"),\r\n          value: datamine.passive1.aoeInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          node: burst_critRate_\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Arataki_Itto_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1.name\"),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: nodeC6CritDMG\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1),\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1)\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4Atk\r\n            }, {\r\n              node: nodeC4Def\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [{ fields: [{ node: nodeC6CritDMG }] }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Barbara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0`, variant: \"success\" })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        teamBuff: true,\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Beidou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    electroShield: shieldElement(\"electro\", shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")),\r\n    shield: shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0))),\r\n    shield: greaterEq(input.constellation, 1, shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.electroShield, { key: `char_${key}_gen:skill.skillParams.0`, \"variant\": \"electro\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.shield, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Bennett_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst burstAtkRatio = subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" })\r\nconst burstAddlAtk = prod(burstAtkRatio, input.base.atk)\r\nconst c1AtkRatio = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1AtkRatio, input.base.atk))\r\nconst atkIncRatio = sum(burstAtkRatio, c1AtkRatio)\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\n\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          // Press\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n        }, {\r\n          text: sgt(\"press.cd\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n        }, {\r\n          // Lvl 1\r\n          node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl1CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n        }, {\r\n          // Lvl 2\r\n          node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl2CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }],\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(burstAtkRatio).value * 100,\r\n              unit: \"%\",\r\n              fixed: 1\r\n            }, {\r\n              node: infoMut(burstAddlAtk, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1AtkRatio\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [\r\n        ct.conditionalTemplate(\"constellation2\", {\r\n          value: condUnderHP,\r\n          path: condUnderHPPath,\r\n          name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n          states: {\r\n            underHP: {\r\n              fields: [{\r\n                node: underHP\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n        }],\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Chongyun_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          text: trm(\"blades\"),\r\n          value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diluc_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6DmgBonus,\r\n            }, {\r\n              node: nodeC6SpdBonus\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"takeDmg\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diona_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\nconst holdSkillShieldStr_ = { \"customBonus\": { \"shield_\": percent(0.75) } }\r\n//C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n//100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\", holdSkillShieldStr_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    pressShield: nodeSkillShieldPress,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    holdShield: nodeSkillShieldHold,\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6, \"lower\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6, \"higher\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `char_${key}:pressShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.pressShield, { key: `char_${key}:pressShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(`a1shielded`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1MoveSpeed,\r\n            }, {\r\n              node: nodeA1Stamina,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          lower: {\r\n            name: st(\"lessEqPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          },\r\n          higher: {\r\n            name: st(\"greaterPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2skillDmg_ }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Eula_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.8\"),\r\n          value: `${datamine.skill.pressCd}`,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: `${datamine.skill.holdCd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: 2,\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condGrimheart,\r\n        path: condGrimheartPath,\r\n        name: trm(\"skillC.name\"),\r\n        states: {\r\n          \"stack1\": {\r\n            name: st(\"stack\", { count: 1 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"stack2\": {\r\n            name: st(\"stack\", { count: 2 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"consumed\": {\r\n            name: trm(\"skillC.consumed\"),\r\n            fields: [{\r\n              node: cryo_enemyRes_,\r\n            }, {\r\n              node: physical_enemyRes_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: 7,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 7,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condLightfallSword,\r\n        path: condLightfallSwordPath,\r\n        name: trm(\"burstC.name\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 30), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.start5\"),\r\n            }, {\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.addStacks\"),\r\n            }]\r\n          })),\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c4C.desc\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Fischl_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"elemental\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value < 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 6,\r\n          node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2AoeIncrease\"),\r\n          value: 50,\r\n          unit: \"%\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ganyu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n          fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Gorou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 1,\r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condAfterSkillBurst, \"afterSkillBurst\",\r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        canShow: greaterEq(tally.geo, 2, 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\", variant: \"success\" }),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurst_def_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_burst_dmgInc\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Hu_Tao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.bloodBlossomDuration,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value > 1,\r\n          text: trm(\"constellation2.applyBloodBlossom\"),\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n              node: critRate_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: 60,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Jean_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: `${datamine.skill.stamina}`,\r\n          unit: \"/s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c1PullSpeed\")\r\n            }, {\r\n              node: skill_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2`, variant: \"success\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 11,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: anemo_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgRed_disp, { key: \"dmgRed_\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: st(\"energyRegen\"),\r\n          value: datamine.passive2.energyRegen\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kazuha_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(ele, condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n            : `${datamine.skill.cdHold}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"skill\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2EleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 Party\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        value: condC2P,\r\n        path: condC2PPath,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          c2p: {\r\n            fields: [{\r\n              node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", { // Poetics of Fuubutsu\r\n        teamBuff: true,\r\n        states: Object.fromEntries(absorbableEle.map(ele => [ele, {\r\n          value: condSwirls[ele],\r\n          path: condSwirlPaths[ele],\r\n          name: st(`swirlReaction.${ele}`),\r\n          fields: [{\r\n            node: asc4[`${ele}_dmg_`]\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n        }),\r\n      ]),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{\r\n          node: passive\r\n        }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        // Crimson Momiji\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              canShow: data => data.get(c6infusion).value === elementKey,\r\n              text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n            }, {\r\n              node: c6NormDmg_\r\n            }, {\r\n              node: c6ChargedDmg_\r\n            }, {\r\n              node: c6PlungingDmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kaeya_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    cryoShield: shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    shield: shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }],\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal`, variant: \"success\" }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `char_${key}:c4shield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.shield, { key: `char_${key}:c4shield` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.constellation4.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.constellation4.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayaka_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"sprint\", {\r\n        value: condAfterSprint,\r\n        path: condAfterSprintPath,\r\n        name: trm(\"afterSprint\"),\r\n        states: {\r\n          afterSprint: {\r\n            fields: [{\r\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n              text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.sprint.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterApplySprint,\r\n        path: condAfterApplySprintPath,\r\n        name: trm(\"afterSprintCryo\"),\r\n        states: {\r\n          afterApplySprint: {\r\n            fields: [{\r\n              text: trm(\"staminaRestore\"),\r\n              value: datamine.passive2.stamina,\r\n            }, {\r\n              node: afterApplySprintCryo\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayato_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr: [\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n        subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n        input.total.atk,\r\n      ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields:\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: datamine.skill.illusionDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...datamine.skill.dmgArr.map((_, i) => ({\r\n                node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n              })), {\r\n                text: st(\"incInterRes\"),\r\n              }, {\r\n                text: trm(\"skill.unableToAuto\"),\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.stateDuration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillStacks,\r\n        path: condSkillStacksPath,\r\n        name: trm(\"skill.namisenStacks\"),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: Object.fromEntries(range(1, 5).map(stacks => [\r\n          stacks, {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n            }, {\r\n              text: st(\"maxStacks\"),\r\n              value: data => data.get(input.constellation).value >= 2\r\n                ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                : datamine.skill.maxStacks\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1OppHp,\r\n        path: condC1OppHpPath,\r\n        name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4_atkSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Keqing_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n          ),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: 8 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: trm(\"electroReact\"),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      })]),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Klee_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.mineDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kujou_Sara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = equal(\"c6\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Lisa_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Mona_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: trm(\"bubbleDuration\"),\r\n          value: datamine.burst.bubbleDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"phantomDuration\"),\r\n          value: datamine.passive1.phantomDuration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: hydro_dmg_\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ningguang_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_: skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodesC4 = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_res_`,\r\n  equal(condC4, \"on\", percent(0.10))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_: nodeA4GeoDmgBonus_,\r\n      ...nodesC4,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` })\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          text: trm(\"aoeGems\"),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n        }, {\r\n          canShow: data => data.get(input.asc).value < 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: datamine.charged.stamina,\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: trm(\"starJadeStaminaCost\"),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"skillReset\"),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4GeoDmgBonus_\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesC4).map(n => ({ node: n }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Noelle_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\r\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n    staminaChargedDec_: nodeC2ChargeDec,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: nodeC2ChargeDec\r\n        }, {\r\n          node: nodeC2ChargeDMG\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Qiqi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, constant(0.2)))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.15)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 2 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        },\r\n        {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Raiden_Shogun_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(datamine.burst.enerCost, subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus.map(x => x), { key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i)), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nconst resolveStackNode = lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0)\r\nconst resolveInitialBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus1, { key: \"_\" }),\r\n  resolveStackNode\r\n)\r\nconst resolveInfusedBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus2, { key: \"_\" }),\r\n  resolveStackNode\r\n)\r\nfunction burstResolve(mvArr: number[], initial = false) {\r\n  const resolveBonus = initial ? resolveInitialBonus_ : resolveInfusedBonus_\r\n\r\n  return customDmgNode(\r\n    prod(\r\n      sum(\r\n        subscript(input.total.burstIndex, mvArr, { key: '_' }),\r\n        resolveBonus\r\n      ),\r\n      input.total.atk\r\n    ),\r\n    'burst',\r\n    {\r\n      hit: {\r\n        ele: constant('electro')\r\n      }, enemy: {\r\n        // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n        defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEye,\r\n        path: condSkillEyePath,\r\n        name: trm(\"skill.eye\"),\r\n        states: {\r\n          skillEye: {\r\n            fields: [{\r\n              node: skillEye_\r\n            }]\r\n          }\r\n        }\r\n      },\r\n      ), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEyeTeam,\r\n        path: condSkillEyeTeamPath,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"skill.partyCost\"),\r\n        states: Object.fromEntries(energyCosts.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: skillEyeTeamBurstDmgInc,\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.9\"),\r\n          value: `${datamine.burst.stam}`,\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.12\"),\r\n          value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.13\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.14\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.15\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: infoMut(resolveInitialBonus_, { key: `char_${key}:burst.resolveInitial_` }),\r\n          }, {\r\n            node: infoMut(resolveInfusedBonus_, { key: `char_${key}:burst.resolveInfused_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: (data) => (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100),\r\n          unit: \"%\"\r\n        }, {\r\n          node: passive2ElecDmgBonus,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Razor_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed)\r\n            : datamine.skill.pressCd,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed)\r\n            : datamine.skill.holdCd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.0\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.1\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.2\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.3\")\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"burst\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: trm(\"electroSigilPerProc\"),\r\n          value: datamine.constellation6.electroSigilGenerated\r\n        }, {\r\n          text: st(\"cooldown\"),\r\n          value: datamine.constellation6.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Rosaria_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, min, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\r\n    percent(datamine.passive2.maxBonus)\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_enemyRes_: nodeC6PhysShred\r\n    },\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6PhysShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: st(\"afterUse.skill\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        // Hide for Rosaria\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sangonomiya_Kokomi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp))\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c2SkillHeal_ = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.s_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c2BurstHeal_ = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.nc_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, constant(datamine.c4.atkSPD_))\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", constant(datamine.c6.hydro_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    heal: healNodeTalent(\"hp\", datamine.skill.heal_, datamine.skill.heal, \"skill\",\r\n      { premod: { heal_: c2SkillHeal_ } }\r\n    )\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.heal_, datamine.burst.heal, \"burst\",\r\n      { premod: { heal_: c2BurstHeal_ } }\r\n    )\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"success\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.7\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"success\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive: ct.talentTemplate(\"passive\", [{\r\n        fields: [{\r\n          node: passiveHeal_\r\n        }, {\r\n          node: passiveCritRate_\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c2SkillHeal_, { key: `char_${key}:c2SkillHeal_` }),\r\n            }, {\r\n              node: infoMut(c2BurstHeal_, { key: `char_${key}:c2BurstHeal_` }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [{ fields: [{ node: c4AtkSpd_ }] }]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sayu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lookup, min, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas)))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2SkillStack,\r\n        path: condC2SkillStackPath,\r\n        name: trm(\"c2Cond\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n          name: st(\"seconds\", { count: stack * 0.5 }),\r\n          fields: [{\r\n            node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3`, variant: \"success\" })\r\n        }, {\r\n          text: trm(\"burstHits\"),\r\n          value: datamine.burst.darumaHits,\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"success\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1Text\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(c6_daruma_dmg_inc, { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc, { key: `char_${key}:c6DarumaHealInc`, variant: \"success\" })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Shenhe_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"pressDuration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"pressQuota\"),\r\n          value: datamine.skill.trigger,\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: trm(\"holdDuration\"),\r\n          value: datamine.skill.durationHold,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"holdQuota\"),\r\n          value: datamine.skill.triggerHold,\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          press: {\r\n            name: st(\"press\"),\r\n            fields: [{\r\n              node: nodeAsc4Press_skill_dmg_\r\n            }, {\r\n              node: nodeAsc4Press_burst_dmg_\r\n            }]\r\n          },\r\n          hold: {\r\n            name: st(\"hold\"),\r\n            fields: [{\r\n              node: nodeAsc4Hold_normal_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_charged_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_plunging_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n          name: i.toString(),\r\n          fields: [{ node: c4Inc }]\r\n        }))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: tr(\"constellation6.description\")\r\n        }],\r\n        teamBuff: true\r\n      }),\r\n      ]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }), ct.headerTemplate(\"constellation2\", {\r\n          fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }],\r\n        teamBuff: true,\r\n       }),\r\n      ]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sucrose_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n  equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n  greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.duration}s + 2`\r\n            : datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation6\", { // Absorption teambuff for C6\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: unequal(condAbsorption, undefined, 1),\r\n        fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tartaglia_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.riptide\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.10\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.passive1.durationExt + datamine.riptideDuration\r\n            : datamine.riptideDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.10\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.11\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.preemptiveCd1 - (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)}\r\n            - ${datamine.skill.preemptiveCd2 - (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.preemptiveCd1} - ${datamine.skill.preemptiveCd2}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.12\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.maxCd - (datamine.skill.maxCd * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.maxCd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerReturned}`,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{ node: nodePassive }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Thoma_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minPyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n            { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.shieldDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n            : datamine.burst.scorchingDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1BarrierStacks,\r\n        path: condP1BarrierStacksPath,\r\n        name: trm(\"a1\"),\r\n        teamBuff: true,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: p1_shield_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: st(\"triggerCD\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"energyRegen\"),\r\n              value: datamine.c4.energyRestore,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6AfterBarrier,\r\n        path: condC6AfterBarrierPath,\r\n        name: trm(\"c6\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_normal_dmg_,\r\n            }, {\r\n              node: c6_charged_dmg_,\r\n            }, {\r\n              node: c6_plunging_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../../Types/character'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates } from '../../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, skillAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = equal(condC6, \"on\", datamine.constellation6.enemyRes_)\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n    ...nodesC6,\r\n    anemo_enemyRes_: nodeC6,\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.maxCd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: trm(\"c1\"),\r\n        value: 10,\r\n        unit: \"%\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 anemo\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n      canShow: unequal(condBurstAbsorption, undefined, equal(target.charKey, key, 1)),\r\n      fields: absorbableEle.map(eleKey => (\r\n        { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n      ))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      teamBuff: true,\r\n      canShow: unequal(input.activeCharKey, key, 1),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: nodesC6[`${eleKey}_enemyRes_`]\r\n        }]\r\n      }]))\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing`, variant: \"success\" })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../../../Types/character'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { charTemplates } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n      }, {\r\n        text: trm(\"skill.amuletGenAmt\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n          : datamine.skill.amulets\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.amuletDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: tr(\"passive1.description\")\r\n      }]\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.thunderDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: trm(\"burst.thunderCd\"),\r\n        value: datamine.burst.thunderCd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }, {\r\n        node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2Thunder,\r\n      path: condC2ThunderPath,\r\n      name: trm(\"c2.thunderHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c2Thunder_electro_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6After2Thunder,\r\n      path: condC6After2ThunderPath,\r\n      name: trm(\"c6.fallingThunder3\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_thunder_dmg_,\r\n              { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n            )\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.constellation6.energyRestore\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../../../Types/character'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { TalentSheet } from '../../../../Types/character'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates } from '../../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n          : datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: data => data.get(input.asc).value >= 1\r\n          ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n          : datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg,\r\n          { key: `sheet_gen:skillDMG` }\r\n        ),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1BurstArea,\r\n      path: condC1BurstAreaPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n          }, {\r\n            text: st(\"incInterRes\"),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4BurstHit,\r\n      path: condC4BurstHitPath,\r\n      name: st(\"hitOp.burst\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"hits\", { count: stack }),\r\n          fields: [{\r\n            node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport data_gen_src from './data_gen.json'\r\nimport electro, { data as electroData } from './electro'\r\nimport geo, { data as geoData } from './geo'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport card from './Traveler_Female_Card.jpg'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n});\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Venti_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2)\r\n  },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = { ...c2Hit_anemo_enemyRes_ }\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", datamine.constellation6.res_))\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(ele, condBurstAbsorption, constant(datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } })),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: tr(\"constellation2.name\"),\r\n        states: {\r\n          hit: {\r\n            name: trm(\"c2.hit\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          },\r\n          launched: {\r\n            name: trm(\"c2.launched\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"burst\", { // Custom burst formula\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }],\r\n        canShow: unequal(condBurstAbsorption, undefined, 1),\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 Anemo team-display\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          takeDmg: {\r\n            fields: [{\r\n              node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n        fields: absorbableEle.map(eleKey => (\r\n          { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        canShow: unequal(condBurstAbsorption, undefined,\r\n          equal(target.charKey, key, 1)\r\n        ),\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [{ fields: [{ node: p3_staminaGlidingDec_ }] }]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [\r\n        ct.conditionalTemplate(\"constellation4\", {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: {\r\n            pickup: {\r\n              fields: [{\r\n                node: c4_anemo_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiangling_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          value: datamine.constellation2.dmg,\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", { // A4\r\n        path: condA4SkillStackPath,\r\n        value: condA4SkillStack,\r\n        name: trm(\"skillStack\"),\r\n        states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n          name: st(\"uses\", { count: i }),\r\n          fields: [{ node: skill_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n        }, {\r\n          node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n          textSuffix: trm(\"burst.currentHPPerSec\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", { // A1\r\n        path: condA1BurstStackPath,\r\n        value: condA1BurstStack,\r\n        name: trm(\"burst.stack\"),\r\n        canShow: equal(\"inBurst\", condInBurst, 1),\r\n        states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n          name: st(\"seconds\", { count: i * 3 }),\r\n          fields: [{ node: all_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        canShow: equal(c2Inactive, 1, 1),\r\n        teamBuff: true,\r\n        fields: [{ node: c2Inactive_enerRech_ }],\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xingqiu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(unit, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n            : `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing`, variant: \"success\" }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: nodeA4\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xinyan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }],\r\n      }, ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_staminaChargedDec_\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n                node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                  {\r\n                    key: type === \"norm\" // And change the key to match\r\n                      ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                      : `char_${key}:skill.pyroShield.${lvl}`\r\n                  }\r\n                )\r\n              },\r\n              ])), {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.duration,\r\n                unit: \"s\",\r\n              },\r\n              // Level 3 damage\r\n              ...lvl === 3 ? [{ node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` }) }] : [],\r\n            ]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"p1.desc\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2Shield,\r\n        path: condP2ShieldPath,\r\n        name: trm(\"p2.activeShield\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4SkillHit,\r\n        path: condC4SkillHitPath,\r\n        name: trm(\"c4.swingHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4SkillHit_physical_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c4.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yae_Miko_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [{ fields: [{ node: nodeAsc4 }] }]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yanfei_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n          }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1Seals,\r\n        path: condP1SealsPath,\r\n        name: trm(\"passive1.sealsConsumed\"),\r\n        // TODO: Should be changing number of seals shown based on C6\r\n        states: Object.fromEntries(range(1, 4).map(seals => [\r\n          seals, {\r\n            name: trm(`seals.${seals}`),\r\n            fields: [{\r\n              node: p1_pyro_dmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2ChargedCrit,\r\n        path: condP2ChargedCritPath,\r\n        name: trm(\"passive2.chargedCrit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2EnemyHp,\r\n        path: condC2EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyHp_critRate_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"burst.grantMax\")\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yoimiya_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, matchFull, percent, prod, subscript, sum, unequal, unit } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\nconst ct = charTemplates(characterKey, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = matchFull(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: \"_\" }), unit)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n    hit: {\r\n      ele: matchFull(condSkill, \"skill\", constant(elementKey), constant(\"physical\"))\r\n    }\r\n  }\r\n  )\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = normalEntries.map(([_, node], i) => [i, greaterEq(input.constellation, 6, equal(condSkill, \"skill\", prod(percent(datamine.constellation6.dmg_), node)))])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        name: st(\"afterUse.skill\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              text: trm(\"normMult\"),\r\n              value: data => data.get(normal_dmgMult).value * 100,\r\n              fixed: 1,\r\n              unit: \"%\",\r\n            }, {\r\n              text: trm(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional for self display\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        fields: datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: 60,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation1.burst_durationInc,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        name: trm(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        // Hide for Yoimiya\r\n        canShow: unequal(input.activeCharKey, characterKey, 1),\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional from P1 for team buff display when P2 is activated\r\n        canShow: unequal(input.activeCharKey, characterKey,\r\n          equal(condBurst, \"on\", greaterEq(input.asc, 4, 1))\r\n        ),\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        name: trm(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: const3TalentInc }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: const5TalentInc }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, dataObj)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yun_Jin_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n          textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../../../Types/character'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Zhongli_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n        }, {\r\n          text: trm(\"skill.maxStele\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.shileDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: data =>\r\n            data.get(input.constellation).value < 4 ?\r\n              datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n              `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n          fixed: 1,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p4normalDmgInc\r\n        }, {\r\n          node: p4ChargedDmgInc\r\n        }, {\r\n          node: p4PlungingDmgInc\r\n        }, {\r\n          node: p4SKillDmgInc\r\n        }, {\r\n          node: p4BurstDmgInc\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal`, variant: \"success\" })\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Diluc,\r\n  Diona,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//   or if the permalink is dead,\r\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//\r\n// PlayerElementLevelCo\r\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\r\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\r\n// PlayerShieldLevelCo\r\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\r\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\r\n\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["charCurves","objectMap","_charCurves","value","Object","values","commonBasic","objectKeyMap","key","input","infusionNode","stringPrio","inferredHitEle","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","base","additional","data","mergeData","hit","constant","ele","customShieldNode","shieldNode","prod","sum","unit","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","percent","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","infoMut","variant","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","reaction","reactions","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","talentAssets","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","skill","burst","passive1","passive2","passive3","data_gen","data_gen_src","trans","tr","trm","ct","charTemplates","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skillDmg","blossomDmg","duration","cd","blossomCd","burstDmg","blossomAmt","enerCost","blossomDmgInc","hpThresh","eleMasInc","blossomEner","maxStacks","stackDuration","plunging_dmg_","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","fromEntries","range","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","entries","blossom","total","skill_dmg_","skillC3","burstC5","bonus","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","talentTemplate","text","fields","_","node","textSuffix","sgt","conditionalTemplate","path","st","states","belowHp","headerTemplate","fixed","skillInField","canShow","c6Crystallize","isoOnField","count","burstUsed","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","atk_","unequal","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","matchFull","get","toFixed","fieldsTemplate","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","infusion","nonOverridableSelf","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","electroShield","shield","baseDmg","dmgOneHit","dmgTwoHits","customBonus","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","burstAtkRatio","burstAddlAtk","c1AtkRatio","c1AddlAtk","atkIncRatio","activeInAreaAtkDisp","condInAreaPath","condInArea","activeInArea","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","explosionDmg","stamReduction","durationInc","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressCryoShield","pressShield","holdCryoShield","holdShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","lower","higher","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","lightSwordAdditional","lightFallSwordNew","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","condAfterBurstPath","condAfterBurst","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","heal","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","color","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","greaterEqStr","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","overridableSelf","eleKey","c2","c2p","c6","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sprint","sp","cutDmg","bloomDmg","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","c4","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodesC4","allElements","gemDmg","n","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","resolveStackNode","resolveInitialBonus_","resolveInfusedBonus_","burstResolve","mvArr","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","cdRed","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","electro_res_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","heal_","nBonus_","cBonus_","sBonus_","p","heal_ratio_","c1","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c2SkillHeal_","c2BurstHeal_","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressDmg","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","burstC3","skillC5","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","skillAssets","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","talents","anemo","geo","electro","anemoData","geoData","electroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","full7","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","norm_shield","characterKey","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Diluc","Diona","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","Sucrose","Tartaglia","Thoma","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yoimiya","YunJin","Zhongli","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","transformativeReactions","multi","variants","swirl","electroSwirl","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}