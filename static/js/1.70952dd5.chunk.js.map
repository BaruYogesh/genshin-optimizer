{"version":3,"sources":["Components/CustomFormControl.tsx","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Util/UIUtil.ts","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/Components/FieldDisplay.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Components/WIPComponent.tsx","Conditional/ConditionalSelector.tsx","Character/CharacterDisplay/Components/ConditionalDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","className","type","e","target","onBlur","onKeyDown","key","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","valueString","unit","Math","round","toFixed","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","maximumEfficiency","substatsValidation","id","numStars","level","mainStatKey","substats","lock","currentEfficiency","mainStatLevel","max","min","mainStatVal","mainStatValue","Stat","getStatUnit","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","slotNames","Body","Title","stars","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","variant","style","opacity","valid","Footer","Toggle","size","Menu","Divider","placement","overlay","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","faQuestionCircle","cursor","artLayoutSize","lg","CharacterArtifactPane","weaponSheet","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","CharacterOverviewPane","constellation","editLevel","setEditLevel","elementKey","weaponTypeKey","getStatValueWithOverride","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","InputGroup","Prepend","Text","val","statKey","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","constellationName","Array","keys","getTalent","img","roundedCircle","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","fields","statsToFields","ListGroup","WeaponStatsEditorCardWeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","DropdownButton","reverse","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","editing","SetEditing","showDescription","setShowDescription","build","conditionalValues","substatKey","Weapon","getWeaponSubstatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubstatVal","weaponPassiveName","passiveName","weaponBonusStats","conditionals","Conditional","faQuoteLeft","getLevelName","LevelNameData","refineIndex","StatInput","prependEle","faGavel","percent","onValueChange","defaultValue","StatIconEle","passiveDescription","atk","stateKey","conditional","ConditionalDisplay","fieldClassName","description","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","hasOverride","StatDisplay","getStatNameRaw","xl","CharacterTalentPane","props","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","fixedUnit","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","Subtitle","document","section","talentText","evalIfFunc","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","buildSettings","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","update","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","hasTalentPage","DamageOptionsAndCalculation","CharSelectDropdown","ButtonGroup","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","WIPComponent","Badge","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","ConditionalSelector","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","maxStack","badge","whiteSpace","condial","v","stack","faCheckSquare","faSquare","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionValues","JSON","stringify","DisplayStatDiff","label","oldVal","oldText","diffText","isArray","Formula","invalid","labelVariant","restProps","pointerEvents","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","eleKey","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.70952dd5.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { IArtifact, Substat } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number }\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = art.maximumEfficiency !== undefined\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{valueString(efficiency, \"eff\")}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../../Character\";\r\nimport { compareAgainstEquippedContext } from \"../../CharacterDisplayCard\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => field.canShow(stats), [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => characterSheet.getDisplayStatKeys(stats), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && Character.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport { allElements } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport { IConditionals } from \"../../Types/IConditional\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport StatInput from \"../StatInput\"\r\nimport ConditionalDisplay from \"./Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"./Components/FieldDisplay\"\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { characterKey, constellation }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const elementKey = characterSheet.elementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={characterSheet.star} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl placeholder={undefined} onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90), characterSheet, weaponSheet })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey), characterSheet, weaponSheet })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip id=\"artifact-override-level\">Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{characterSheet.constellationName}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={characterSheet.getTalent(`constellation${i + 1}`)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats = {} }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\n\r\nfunction WeaponStatsEditorCardWeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  if (!weaponSheets) return null\r\n\r\n  return <DropdownButton title={weaponSheet.name}>\r\n    {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n      <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n      {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === star).map(([key, weaponObj]: any) =>\r\n        <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n          {weaponObj.name}\r\n        </Dropdown.Item>\r\n      )}\r\n      {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n    </React.Fragment>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const substatKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key] as IConditionals\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <WeaponStatsEditorCardWeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).reverse().map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {substatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><span className=\"mr-2\">{StatIconEle(substatKey)}</span>{Stat.getStatName(substatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(substatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{weaponSheet.name} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{weaponSheet.description}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key, characterSheet, weaponSheet })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value, characterSheet, weaponSheet })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatKey\"), characterSheet, weaponSheet })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatVal\"), characterSheet, weaponSheet })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined\r\n                  }\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport { evalIfFunc } from \"../../Util/Util\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport ConditionalDisplay from './Components/ConditionalDisplay';\r\nimport FieldDisplay from './Components/FieldDisplay';\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalent(\"sprint\") && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalent(tKey)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = characterSheet.elementKey\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { constellation, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={characterSheet.getTalent(talentKey)?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{characterSheet.getTalent(talentKey)?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {characterSheet.getTalent(talentKey)?.document?.map((section, i) => {\r\n        if (!section.canShow!(build)) return null\r\n        const talentText = evalIfFunc(section.text, build)\r\n        let fields = section.fields ?? []\r\n        return <div className=\"my-2\" key={\"section\" + i}>\r\n          <div {...{ xs: 12 }}>\r\n            <div className=\"mb-2\">{talentText}</div>\r\n            {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n              {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n            </ListGroup>}\r\n          </div>\r\n          {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n        </div>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])),\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n  buildSettings: {}//use to reset when changing to a new character, so it would not copy from old character.\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: string,\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  useEffect(() => {\r\n    if (weaponSheets && characterSheet && !character.weapon.key) {\r\n      character.weapon.key = Object.keys(WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey))[0] ?? \"\"\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets, character.weapon])\r\n\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key))\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    (newBuild as any).hitMode = character.hitMode;\r\n    (newBuild as any).reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet?.hasTalentPage && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} levelKey={levelKey} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {process.env.NODE_ENV !== \"development\" && !characterSheet.hasTalentPage ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled><h5 className=\"mb-0\">Talents</h5> <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  levelKey: string\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, editable, levelKey, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>{editable ? <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle as={Button}>\r\n        {HeaderIconDisplay}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu as={CustomMenu}>\r\n        {[...allCharacterKeys].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <DropdownButton as={ButtonGroup} disabled={!characterSheet} title={\r\n      <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n    }>\r\n      <Dropdown.ItemText>\r\n        <span>Select Base Stat Template</span>\r\n      </Dropdown.ItemText>\r\n      {Character.getlevelKeys().reverse().map(lvlKey =>\r\n        <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n          <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n  </ButtonGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character, characterSheet, weaponSheet)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip id=\"wip\">Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../../../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../../../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../../../Types/ICalculatedStats\"\r\nimport IConditional from \"../../../Types/IConditional\"\r\nimport statsToFields from \"../../../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../../../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild as ICalculatedStats\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats.conditionalValues, characterDispatch])\r\n\r\n  if (!canShow) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Character/CharacterDisplay/Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Character/CharacterDisplay/Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey))\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, sectionValues]: any) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = characterSheet.getTalent(talentKey)?.name ?? talentKey\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined)\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey, invalid as any)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterATK\") + Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ characterSheet, character: { characterKey, reactionMode = \"none\", infusionAura }, characterDispatch, className }: ReactionToggleProps) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = characterSheet.elementKey\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, build }: { characterSheet: CharacterSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => characterSheet.getDisplayStatKeys(build), [build, characterSheet])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([talentKey, fields]) => {\r\n      let header: Displayable = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = characterSheet.getTalent(talentKey)?.name ?? talentKey\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys))\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={undefined}\r\n                      disabled={undefined}\r\n                      percent={undefined}\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}