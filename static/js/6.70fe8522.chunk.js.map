{"version":3,"sources":["Components/StarDisplay.tsx","Assets/Weapon-class-bow-icon.png","Assets/Assets.ts","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Character/Character.ts","Character/CharacterSelection.tsx","StatDependency.ts","Components/InfoComponent.tsx"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","Character","this","Error","getElementalName","elementalKey","ElementalData","name","getLevelString","character","level","ascensionMaxLevel","ascension","getTalentFieldValue","field","key","stats","defVal","evalIfFunc","hasOverride","statKey","bonusStats","getStatValueWithBonus","characterBaseStats","calculateBuild","database","characterSheet","weaponSheet","artifactSheets","mainStatAssumptionLevel","artifacts","Object","fromEntries","entries","equippedArtifacts","artid","_getArt","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","values","forEach","art","mainStatKey","mainStatValue","rarity","Math","max","min","substats","substat","value","mergeStats","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","id","dependencies","GetDependencies","modifiers","PreprocessFormulas","preprocessedStats","formula","characterKey","elementKey","hitMode","infusionAura","reactionMode","talent","constellation","equippedWeapon","weapon","_getWeapon","defaultInitialWeapon","weaponTypeKey","initialOverrideStatkeys","characterLevel","characterHP","getBase","characterDEF","characterATK","characterEle","weaponType","tlvl","refineIndex","refinement","specialStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","getTalentStatsAll","s","weaponATK","getMainStatValue","weaponSubKey","getSubStatKey","getSubStatValue","weaponCond","otherCond","canShow","getDisplayStatKeys","eleKey","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","includes","charFormulas","talentSheet","getTalent","addFormula","fields","parseSection","section","sheets","talentKey","sections","formKey","document","num","artifactSheet","setEffects","setNum","CharacterSelectionDropdownList","onSelect","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","getAll","_getCharKeys","filter","cKey","sort","DropDownItem","get","Item","onClick","nameWIthIcon","CharSelectionButton","useState","show","setshow","HeaderIconDisplay","src","thumbImg","roundedCircle","disabled","CharacterSelectionModal","onHide","toggle","filterReducer","oldFilter","newFilter","sortBy","setsortBy","useReducer","elementalFilter","elementalFilterDispatch","weaponFilter","weaponFilterDispatch","sortingFunc","ck","_getChar","star","characterKeyList","Set","allCharacterKeys","a","b","diff","size","contentClassName","bg","text","Header","xs","allElements","variant","uncoloredEleIcons","allWeaponTypeKeys","type","onChange","faTimes","Body","CharacterBtn","undefined","WeaponSheet","useMemo","lg","md","thumbnail","auto","skill","burst","StatIcon","GetFormulaDependency","dependency","Proxy","target","prop","receiver","add","toString","formulaKeyDependency","freeze","Formulas","baseStat","StatData","found","numStages","InsertDependencies","flatMap","dep","has","k","path","Formula","getCurrent","getStage","InfoComponent","pageKey","modalTitle","children","dbStorage","showInfoModal","setshowInfoModal","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","set","Title","fallback","animation","Footer","ns","key18","faQuestionCircle"],"mappings":"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","file":"static/js/6.70fe8522.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","import bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { ICachedArtifact } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { ArtifactSetKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { characterBaseStats, initialOverrideStatkeys, mergeStats } from \"../Util/StatUtil\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport { defaultInitialWeapon } from \"../Weapon/WeaponUtil\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey: ElementKey | \"physical\"): string =>\r\n    ElementalData[elementalKey].name\r\n  static getLevelString = (character: ICachedCharacter): string =>\r\n    `${character.level}/${ascensionMaxLevel[character.ascension]}`\r\n\r\n  static getTalentFieldValue = (field: IFieldDisplay, key: keyof IFieldDisplay, stats = {}, defVal = \"\"): any => {\r\n    if (!field[key]) return defVal\r\n    return evalIfFunc(field[key] as any, stats!)\r\n  }\r\n\r\n  static hasOverride = (character: ICachedCharacter, statKey): boolean => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\")\r\n    if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\")\r\n    if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\")\r\n    return character?.bonusStats ? (statKey in character.bonusStats) : false;\r\n  }\r\n\r\n  static getStatValueWithBonus = (character: ICachedCharacter, statKey: string) => {\r\n    return character.bonusStats?.[statKey] ?? characterBaseStats(character)[statKey] ?? 0\r\n  }\r\n\r\n  static calculateBuild = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    const artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, database._getArt(artid)]))\r\n    const initialStats = Character.createInitialStats(character, database, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats: ICalculatedStats, artifacts: Dict<SlotKey, ICachedArtifact>, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>): ICalculatedStats => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    const artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(stats.mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    mergeStats(stats, artifactSetEffectsStats)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey, setNumKey]) => {\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      mergeStats(stats, condStats)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats, stats?.modifiers)\r\n    const { initialStats: preprocessedStats, formula } = PreprocessFormulas(dependencies, stats)\r\n    formula(preprocessedStats)\r\n    return { ...stats, ...preprocessedStats }\r\n  }\r\n\r\n  static createInitialStats = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    const { key: characterKey, bonusStats = {}, elementKey, level, ascension, hitMode, infusionAura, reactionMode, talent, constellation, equippedArtifacts, conditionalValues = {}, equippedWeapon } = character\r\n    const weapon = database._getWeapon(equippedWeapon) ?? defaultInitialWeapon(characterSheet.weaponTypeKey) // need to ensure all characters have a weapon\r\n\r\n    //generate the initalStats obj with data from Character \r\n    const initialStats = characterBaseStats(character)\r\n    mergeStats(initialStats, bonusStats, initialOverrideStatkeys)\r\n    initialStats.characterKey = characterKey\r\n    initialStats.characterLevel = level\r\n    initialStats.characterHP = characterSheet.getBase(\"hp\", level, ascension)\r\n    initialStats.characterDEF = characterSheet.getBase(\"def\", level, ascension)\r\n    initialStats.characterATK = characterSheet.getBase(\"atk\", level, ascension)\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = Object.fromEntries(Object.entries(talent ?? {}).map(([key, value]) => [key, value - 1])) as any;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    initialStats.weapon = { key: weapon.key, refineIndex: weapon.refinement - 1 }\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //add specialized stat\r\n    const specialStatKey = characterSheet.getSpecializedStat(ascension)\r\n    if (specialStatKey) {\r\n      const specializedStatVal = characterSheet.getSpecializedStatVal(ascension)\r\n      mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n    }\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponATK = weaponSheet.getMainStatValue(weapon.level, weapon.ascension)\r\n    initialStats.weaponATK = weaponATK\r\n    const weaponSubKey = weaponSheet.getSubStatKey()\r\n    if (weaponSubKey) mergeStats(initialStats, { [weaponSubKey]: weaponSheet.getSubStatValue(weapon.level, weapon.ascension) })\r\n    mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (keys[0] === \"character\" && keys[3] === \"talents\" && keys[4] !== elementKey) return //fix for Traveler, make sure conditionals match element.\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    const addFormula = (fields, key) => fields.forEach(field => {\r\n      if (!field.formula || !field?.canShow?.(stats)) return\r\n      if (!charFormulas[key]) charFormulas[key] = []\r\n      charFormulas[key].push((field.formula as any).keys)\r\n    })\r\n    const parseSection = (section, key) => {\r\n      //conditional\r\n      if (section.conditional && Conditional.canShow(section.conditional, stats)) {\r\n        const { fields }: { fields?: Array<IFieldDisplay> } = Conditional.resolve(section.conditional, stats, null)\r\n        fields && addFormula(fields, key)\r\n      }\r\n      //fields\r\n      if (section.fields) addFormula(section.fields, key)\r\n    }\r\n    talentSheet && Object.entries(talentSheet.sheets).forEach(([talentKey, { sections }]) => {\r\n      if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n      sections.forEach(section => parseSection(section, `talentKey_${talentKey}`))\r\n    })\r\n\r\n    const formKey = `weapon_${stats.weapon.key}`\r\n    weaponSheet.document && weaponSheet.document.map(section => parseSection(section, formKey))\r\n\r\n    stats.setToSlots && Object.entries(stats.setToSlots).map(([setKey, slots]) => [setKey, slots.length]).forEach(([setKey, num]) => {\r\n      const artifactSheet = artifactSheets[setKey] as ArtifactSheet\r\n      if (!artifactSheet) return\r\n      Object.entries(artifactSheet.setEffects).forEach(([setNum, { document }]) => {\r\n        if (num < parseInt(setNum)) return\r\n        document && document.map(section => parseSection(section, `artifact_${setKey}_${setNum}`))\r\n      })\r\n    })\r\n\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n}","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo, useReducer, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Image, Modal, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Assets from \"../Assets/Assets\";\r\nimport { Stars } from \"../Components/StarDisplay\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../Components/StatIcon\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport usePromise from \"../ReactHooks/usePromise\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allCharacterKeys, allElements, allWeaponTypeKeys, CharacterKey, WeaponTypeKey } from \"../Types/consts\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport Character from './Character';\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\n\r\nexport function CharacterSelectionDropdownList({ onSelect, weaponTypeKey }: { onSelect: (ckey: CharacterKey) => void, weaponTypeKey?: WeaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  return <>{database._getCharKeys().filter(cKey =>\r\n    weaponTypeKey ? (characterSheets?.[cKey]?.weaponTypeKey === weaponTypeKey) : true\r\n  ).sort().map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>{characterSheet.nameWIthIcon}</Dropdown.Item>\r\n}\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\nexport function CharSelectionButton({ characterSheet, onSelect, filter }: { characterSheet?: CharacterSheet, onSelect?: (cKey: CharacterKey) => void, filter?: characterFilter }) {\r\n  const [show, setshow] = useState(false)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>\r\n    <Button disabled={!onSelect} onClick={() => setshow(true)} >{HeaderIconDisplay}</Button>\r\n    <CharacterSelectionModal show={show} onHide={() => setshow(false)} onSelect={onSelect} filter={filter} />\r\n  </>\r\n}\r\n\r\nconst toggle = {\r\n  rarity: \"Rarity\",\r\n  level: \"Level\",\r\n  name: \"Name\"\r\n} as const\r\n\r\nfunction filterReducer(oldFilter, newFilter) {\r\n  if (newFilter === oldFilter)\r\n    return \"\"\r\n  return newFilter\r\n}\r\n\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true }: CharacterSelectionModalProps) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(() => Object.keys(toggle)[0])\r\n  const [elementalFilter, elementalFilterDispatch] = useReducer(filterReducer, \"\")\r\n  const [weaponFilter, weaponFilterDispatch] = useReducer(filterReducer, \"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n\r\n  const sortingFunc = {\r\n    level: (ck) => database._getChar(ck)?.level ?? 0,\r\n    rarity: (ck) => characterSheets?.[ck]?.star,\r\n    name: (ck) => characterSheets?.[ck]?.name\r\n  }\r\n\r\n  const characterKeyList = !characterSheets ? [] : [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey])).filter(cKey => {\r\n    if (elementalFilter && elementalFilter !== characterSheets?.[cKey]?.elementKey) return false\r\n    if (weaponFilter && weaponFilter !== characterSheets?.[cKey]?.weaponTypeKey) return false\r\n    return true\r\n  }).sort((a, b) => {\r\n    if (sortBy === \"name\") {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      // names must be equal\r\n      return 0;\r\n    }\r\n    if (sortBy === \"level\") {\r\n      const diff = sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n    } else {\r\n      const diff = sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n    }\r\n  })\r\n\r\n  if (!characterSheets) return null\r\n  return <Modal show={show} size=\"xl\" contentClassName=\"bg-transparent\" onHide={onHide}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              {allElements.map(eleKey => <Button key={eleKey} variant={(!elementalFilter || elementalFilter === eleKey) ? eleKey : \"secondary\"} className=\"py-1 px-2 text-white\" onClick={() => elementalFilterDispatch(eleKey)} >\r\n                <h3 className=\"mb-0\">{uncoloredEleIcons[eleKey]}</h3>\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col>\r\n            <ButtonGroup >\r\n              {allWeaponTypeKeys.map(weaponType =>\r\n                <Button key={weaponType} variant={(!weaponFilter || weaponFilter === weaponType) ? \"success\" : \"secondary\"} className=\"py-1 px-2\" onClick={() => weaponFilterDispatch(weaponType)}>\r\n                  <h3 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponType]} className=\"inline-icon\" /></h3></Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <span>Sort by: </span>\r\n            <ToggleButtonGroup type=\"radio\" name=\"level\" value={sortBy} onChange={setsortBy}>\r\n              {Object.entries(toggle).map(([key, text]) =>\r\n                <ToggleButton key={key} value={key} variant={sortBy === key ? \"success\" : \"primary\"}>\r\n                  <h6 className=\"mb-0\">{text}</h6>\r\n                </ToggleButton>)}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button onClick={onHide} variant=\"danger\"><FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body><Row>\r\n        {characterKeyList.map(characterKey => <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />)}\r\n      </Row></Card.Body>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weapon = character?.equippedWeapon ? database._getWeapon(character.equippedWeapon) : undefined\r\n  const weaponSheet = usePromise(weapon ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets, database])\r\n  if (!characterSheet) return null\r\n  return <Col key={characterKey} lg={3} md={4} className=\"mb-2\">\r\n    <Button className=\"w-100\" variant=\"darkcontent\" onClick={onClick}>\r\n      <h5>{characterSheet.name}</h5>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          {stats && character ? <>\r\n            <h5 className=\"mb-0\">Lv. {Character.getLevelString(character)} {`C${character.constellation}`}</h5>\r\n            <h6 className=\"mb-0\">\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.auto + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.skill + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.burst + 1}</strong></Badge>\r\n            </h6>\r\n          </> : <>\r\n            <h4><Badge variant=\"primary\">NEW</Badge></h4>\r\n          </>}\r\n          <h6 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h6>\r\n          <h3 className=\"mb-0\">{characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <Image src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n        </Col>\r\n      </Row>\r\n    </Button>\r\n  </Col>\r\n}","import Formula from \"./Formula\"\r\nimport { Formulas, getStage, numStages, StatData } from \"./StatData\"\r\nimport { IBaseStat } from \"./Types/character\"\r\nimport { Modifier } from \"./Types/stats\"\r\n\r\n// Generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula: (s) => number) {\r\n  const dependency: Set<string> = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop.toString()) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.entries(Formulas).map(([key, value]) => [key, GetFormulaDependency(value)])\r\n)) as Dict<string, string[]>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(baseStat: IBaseStat, modifiers: Modifier = {}, keys = Object.keys(StatData)): Dependencies {\r\n  const found = new Set<string>()\r\n  const dependencies = [...Array(numStages)].map(_ => new Set<string>())\r\n  keys.forEach(key => InsertDependencies(baseStat, key, modifiers, dependencies, found))\r\n  return dependencies.flatMap(dep => [...dep])\r\n}\r\nfunction InsertDependencies(baseStat: IBaseStat, key: string, modifiers: Modifier, dependencies: Set<string>[], found: Set<string>) {\r\n  if (found.has(key)) return\r\n  found.add(key)\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(baseStat, k, modifiers, dependencies, found));\r\n  (modifiers[key] ?? []).forEach(path => Formula.getCurrent(path, baseStat)[1].forEach(k =>\r\n    InsertDependencies(baseStat, k, modifiers, dependencies, found)))\r\n  dependencies[getStage(key)].add(key)\r\n}\r\n\r\ntype Dependencies = string[]\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { dbStorage } from \"../Database/DBStorage\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport { TransWrapper } from \"./Translate\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    dbStorage.set(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><TransWrapper ns=\"ui\" key18=\"info\" /> <FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}"],"sourceRoot":""}