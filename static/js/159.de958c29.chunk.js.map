{"version":3,"file":"static/js/159.de958c29.chunk.js","mappings":"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","sources":["Data/Artifacts/Adventurer/icons.tsx","Data/Artifacts/dataUtil.tsx","Data/Artifacts/Adventurer/index.tsx","Data/Artifacts/ArchaicPetra/icons.tsx","Data/Artifacts/ArchaicPetra/index.tsx","Data/Artifacts/Berserker/icons.tsx","Data/Artifacts/Berserker/index.tsx","Data/Artifacts/BlizzardStrayer/icons.tsx","Data/Artifacts/BlizzardStrayer/index.tsx","Data/Artifacts/BloodstainedChivalry/icons.tsx","Data/Artifacts/BloodstainedChivalry/index.tsx","Data/Artifacts/BraveHeart/icons.tsx","Data/Artifacts/BraveHeart/index.tsx","Data/Artifacts/CrimsonWitchOfFlames/icons.tsx","Data/Artifacts/CrimsonWitchOfFlames/index.tsx","Data/Artifacts/DefendersWill/icons.tsx","Data/Artifacts/DefendersWill/index.tsx","Data/Artifacts/EchoesOfAnOffering/icons.tsx","Data/Artifacts/EchoesOfAnOffering/index.tsx","Data/Artifacts/EmblemOfSeveredFate/icons.tsx","Data/Artifacts/EmblemOfSeveredFate/index.tsx","Data/Artifacts/Gambler/icons.tsx","Data/Artifacts/Gambler/index.tsx","Data/Artifacts/GladiatorsFinale/icons.tsx","Data/Artifacts/GladiatorsFinale/index.tsx","Data/Artifacts/HeartOfDepth/icons.tsx","Data/Artifacts/HeartOfDepth/index.tsx","Data/Artifacts/HuskOfOpulentDreams/icons.tsx","Data/Artifacts/HuskOfOpulentDreams/index.tsx","Data/Artifacts/Instructor/icons.tsx","Data/Artifacts/Instructor/index.tsx","Data/Artifacts/Lavawalker/icons.tsx","Data/Artifacts/Lavawalker/index.tsx","Data/Artifacts/LuckyDog/icons.tsx","Data/Artifacts/LuckyDog/index.tsx","Data/Artifacts/MaidenBeloved/icons.tsx","Data/Artifacts/MaidenBeloved/index.tsx","Data/Artifacts/MartialArtist/icons.tsx","Data/Artifacts/MartialArtist/index.tsx","Data/Artifacts/NoblesseOblige/icons.tsx","Data/Artifacts/NoblesseOblige/index.tsx","Data/Artifacts/OceanHuedClam/icons.tsx","Data/Artifacts/OceanHuedClam/index.tsx","Data/Artifacts/PaleFlame/icons.tsx","Data/Artifacts/PaleFlame/index.tsx","Data/Artifacts/PrayersForDestiny/icons.tsx","Data/Artifacts/PrayersForDestiny/index.tsx","Data/Artifacts/PrayersForIllumination/icons.tsx","Data/Artifacts/PrayersForIllumination/index.tsx","Data/Artifacts/PrayersForWisdom/icons.tsx","Data/Artifacts/PrayersForWisdom/index.tsx","Data/Artifacts/PrayersToSpringtime/icons.tsx","Data/Artifacts/PrayersToSpringtime/index.tsx","Data/Artifacts/ResolutionOfSojourner/icons.tsx","Data/Artifacts/ResolutionOfSojourner/index.tsx","Data/Artifacts/RetracingBolide/icons.tsx","Data/Artifacts/RetracingBolide/index.tsx","Data/Artifacts/Scholar/icons.tsx","Data/Artifacts/Scholar/index.tsx","Data/Artifacts/ShimenawasReminiscence/icons.tsx","Data/Artifacts/ShimenawasReminiscence/index.tsx","Data/Artifacts/TenacityOfTheMillelith/icons.tsx","Data/Artifacts/TenacityOfTheMillelith/index.tsx","Data/Artifacts/TheExile/icons.tsx","Data/Artifacts/TheExile/index.tsx","Data/Artifacts/ThunderingFury/icons.tsx","Data/Artifacts/ThunderingFury/index.tsx","Data/Artifacts/Thundersoother/icons.tsx","Data/Artifacts/Thundersoother/index.tsx","Data/Artifacts/TinyMiracle/icons.tsx","Data/Artifacts/TinyMiracle/index.tsx","Data/Artifacts/TravelingDoctor/icons.tsx","Data/Artifacts/TravelingDoctor/index.tsx","Data/Artifacts/VermillionHereafter/icons.tsx","Data/Artifacts/VermillionHereafter/index.tsx","Data/Artifacts/ViridescentVenerer/icons.tsx","Data/Artifacts/ViridescentVenerer/index.tsx","Data/Artifacts/WanderersTroupe/icons.tsx","Data/Artifacts/WanderersTroupe/index.tsx","Data/Artifacts/index.ts","Data/Characters/dataUtil.tsx","Data/SheetUtil.tsx","Formula/reaction.ts"],"sourcesContent":["import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { ArtifactSetKey } from \"../../Types/consts\";\r\n\r\nexport function dataObjForArtifactSheet(\r\n  key: ArtifactSetKey,\r\n  data: Data = {},\r\n  displayArtifact: DisplaySub = {},\r\n): Data {\r\n  return mergeData([inferInfoMut(data, key), {\r\n    display: {\r\n      [`artifact:${key}`]: displayArtifact\r\n    },\r\n  }])\r\n}\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"Adventurer\"\r\nconst set2 = greaterEq(input.artSet.Adventurer, 2, 1000)\r\nconst heal = greaterEq(input.artSet.Adventurer, 4,\r\n  prod(percent(0.3), input.total.hp))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hp: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Adventurer\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { absorbableEle, ArtifactSetKey } from '../../../Types/consts'\r\nimport { IFieldDisplay } from '../../../Types/IFieldDisplay'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"ArchaicPetra\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst set2 = greaterEq(input.artSet.ArchaicPetra, 2, percent(0.15))\r\nconst [condPath, condNode] = cond(key, \"element\")\r\nconst set4Nodes = Object.fromEntries(absorbableEle.map(e => [`${e}_dmg_`,\r\ngreaterEq(input.artSet.ArchaicPetra, 4,\r\n  equal(e, condNode, percent(0.35))\r\n)\r\n]))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    geo_dmg_: set2,\r\n  },\r\n  teamBuff: {\r\n    premod: set4Nodes\r\n  }\r\n}, undefined)\r\nconst durationfield: IFieldDisplay = {\r\n  text: sgt(\"duration\"),\r\n  value: 10,\r\n  unit: \"s\"\r\n}\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Archaic Petra\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          teamBuff: true,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: Object.fromEntries(absorbableEle.map(e => [e, {\r\n            name: sgt(`element.${e}`),\r\n            fields: [{\r\n              node: set4Nodes[`${e}_dmg_`]\r\n            }, durationfield]\r\n          }])),\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { equal, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"Berserker\"\r\nconst critRate_info: Info = { key: \"critRate_\" }\r\nconst set2 = greaterEq(input.artSet.Berserker, 2, percent(0.12), critRate_info)\r\nconst [condPath, condNode] = cond(key, \"hp\")\r\nconst set4 = greaterEq(input.artSet.Berserker, 4,\r\n  equal(\"70\", condNode, percent(0.24)), critRate_info)\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    critRate_: sum(set2, set4),\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Berserker\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"lessPercentHP\", { percent: 70 }),\r\n          states: {\r\n            70: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"BlizzardStrayer\"\r\n\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.BlizzardStrayer, 2, percent(0.15))\r\nconst set4 = greaterEq(input.artSet.BlizzardStrayer, 4, lookup(condState, { \"cryo\": percent(0.20), \"frozen\": percent(0.40) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    cryo_dmg_: set2,\r\n  },\r\n  total: {\r\n    // TODO: this crit rate is on-hit. Might put it in a `hit.critRate_` namespace later.\r\n    critRate_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {//Icebreaker\r\n  name: \"Blizzard Strayer\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            cryo: {\r\n              name: trm(\"condCryo\"),\r\n              fields: [{ node: set4 }]\r\n            },\r\n            frozen: {\r\n              name: trm(\"condFrozen\"),\r\n              fields: [{ node: set4 }]\r\n            }\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"BloodstainedChivalry\"\r\nconst set2 = greaterEq(input.artSet.BloodstainedChivalry, 2, percent(0.25))\r\nconst [condPath, condNode] = cond(key, \"defeat\")\r\nconst set4Charged = greaterEq(input.artSet.BloodstainedChivalry, 4,\r\n  equal(\"hit\", condNode, percent(0.5)))\r\nconst set4StamDec = greaterEq(input.artSet.BloodstainedChivalry, 4,\r\n  equal(\"hit\", condNode, percent(1)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    physical_dmg_: set2,\r\n    charged_dmg_: set4Charged,\r\n    staminaDec_: set4StamDec,\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Bloodstained Chivalry\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"afterDefeatEnemy\", { percent: 70 }),\r\n          states: {\r\n            hit: {\r\n              fields: [{\r\n                node: set4Charged\r\n              }, {\r\n                node: set4StamDec\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"BraveHeart\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst set2 = greaterEq(input.artSet.BraveHeart, 2, percent(0.18))\r\nconst [condPath, condNode] = cond(key, \"hp\")\r\nconst set4 = greaterEq(input.artSet.BraveHeart, 4,\r\n  equal(\"50\", condNode, percent(0.3))\r\n)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    all_dmg_: set4,\r\n  },\r\n}, undefined)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Brave Heart\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            50: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"CrimsonWitchOfFlames\"\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst pyro_dmg_info: Info = { key: \"pyro_dmg_\", variant: \"pyro\" }\r\nconst set2 = greaterEq(input.artSet.CrimsonWitchOfFlames, 2, percent(0.15), pyro_dmg_info)\r\nconst set4Overload = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.4))\r\nconst set4Burning = { ...set4Overload }\r\nconst set4Vape = greaterEq(input.artSet.CrimsonWitchOfFlames, 4, percent(0.15))\r\nconst set4Melt = { ...set4Vape }\r\nconst stackArr = range(1, 3)\r\nconst set4Pyro_dmg_ = greaterEq(input.artSet.CrimsonWitchOfFlames, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.15 * i / 2)]))\r\n    , naught),\r\n  pyro_dmg_info)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    pyro_dmg_: sum(set2, set4Pyro_dmg_),\r\n    overloaded_dmg_: set4Overload,\r\n    burning_dmg_: set4Burning,\r\n    vaporize_dmg_: set4Vape,\r\n    melt_dmg_: set4Melt,\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Crimson Witch of Flames\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4Overload,\r\n        }, {\r\n          node: set4Burning,\r\n        }, {\r\n          node: set4Vape,\r\n        }, {\r\n          node: set4Melt,\r\n        }],\r\n        conditional: {\r\n          value: condStack,\r\n          path: condStackPath,\r\n          name: st(\"afterUse.skill\"),\r\n          states: Object.fromEntries(stackArr.map(i => [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{ node: set4Pyro_dmg_ }]\r\n          }]))\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { input, tally } from \"../../../Formula/index\"\r\nimport { allElements, ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { objectKeyValueMap } from '../../../Util/Util'\r\n\r\nconst key: ArtifactSetKey = \"DefendersWill\"\r\n\r\nconst set2 = greaterEq(input.artSet.DefendersWill, 2, percent(0.3))\r\n\r\nconst res_ = objectKeyValueMap(allElements, (ele) => [`${ele}_res_`,\r\n  greaterEq(input.artSet.DefendersWill, 4, greaterEq(tally[ele], 1, percent(0.3)))])\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def_: set2,\r\n    ...res_\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Defender's Will\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: Object.values(res_).map(node => ({ node }))\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, trans } from '../../SheetUtil'\r\n\r\nconst key: ArtifactSetKey = \"EchoesOfAnOffering\"\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst set2 = greaterEq(input.artSet.EchoesOfAnOffering, 2, percent(0.18))\r\nconst [condModePath, condMode] = cond(key, \"mode\")\r\nconst normal_dmgInc = greaterEq(input.artSet.EchoesOfAnOffering, 4,\r\n  prod(\r\n    lookup(condMode, {\r\n      \"on\": percent(0.70),\r\n      \"avg\": percent(0.70 * 0.50204)\r\n    }, naught),\r\n    input.total.atk\r\n  )\r\n)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmgInc\r\n  }\r\n})\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Echoes of an Offering\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condMode,\r\n          path: condModePath,\r\n          name: trm(\"mode\"),\r\n          states: {\r\n            on: {\r\n              name: trm(\"always\"),\r\n              fields: [{ node: normal_dmgInc }]\r\n            },\r\n            avg: {\r\n              name: trm(\"avg\"),\r\n              fields: [{ node: normal_dmgInc }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { min, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"EmblemOfSeveredFate\"\r\n\r\nconst set2 = greaterEq(input.artSet.EmblemOfSeveredFate, 2, percent(0.2))\r\n\r\nconst burstBonus = greaterEq(input.artSet.EmblemOfSeveredFate, 4,\r\n  min(percent(0.75), prod(percent(0.25), input.premod.enerRech_)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2,\r\n    burst_dmg_: burstBonus,\r\n  },\r\n}, {\r\n  burstBonus,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Emblem of Severed Fate\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: burstBonus,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Gambler\"\r\n\r\nconst set2 = greaterEq(input.artSet.Gambler, 2, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    skill_dmg_: set2\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Gambler\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: { document: []}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"GladiatorsFinale\"\r\n\r\nconst set2 = greaterEq(input.artSet.GladiatorsFinale, 2, percent(0.18))\r\nconst set4 = greaterEq(input.artSet.GladiatorsFinale, 4, lookup(input.weaponType, { \"sword\": percent(0.35), \"polearm\": percent(0.35), \"claymore\": percent(0.35) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmg_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Gladiator's Finale\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"HeartOfDepth\"\r\nconst set2 = greaterEq(input.artSet.HeartOfDepth, 2, percent(0.15))\r\nconst [condPath, condNode] = cond(key, \"skill\")\r\nconst set4Norm = greaterEq(input.artSet.HeartOfDepth, 4,\r\n  equal(\"cast\", condNode, percent(0.3)))\r\nconst set4Charged = { ...set4Norm }\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hydro_dmg_: set2,\r\n    normal_dmg_: set4Norm,\r\n    charged_dmg_: set4Charged,\r\n  },\r\n}, undefined)\r\nconst sheet: IArtifactSheet = {//Ocean Conqueror\r\n  name: \"Heart of Depth\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"afterUse.skill\"),\r\n          states: {\r\n            cast: {\r\n              fields: [{\r\n                node: set4Norm,\r\n              }, {\r\n                node: set4Charged,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { lookup, naught, percent, sum, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"HuskOfOpulentDreams\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst def_info: Info = { key: \"def_\" }\r\nconst set2 = greaterEq(input.artSet.HuskOfOpulentDreams, 2, percent(0.3), def_info)\r\nconst stackArr = range(1, 4)\r\n\r\nconst set4Def = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\r\n    , naught),\r\n  def_info)\r\nconst set4Geo = greaterEq(input.artSet.HuskOfOpulentDreams, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.06 * i)]))\r\n    , naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def_: sum(set2, set4Def),\r\n    geo_dmg_: set4Geo,\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Husk of Opulent Dreams\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condStack,\r\n          path: condStackPath,\r\n          name: trm(\"condName\"),\r\n          states: Object.fromEntries(stackArr.map(i => [i, {\r\n            name: i.toString(),\r\n            fields: [{ node: set4Def }, {\r\n              node: set4Geo\r\n            }]\r\n          }]))\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Instructor\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"set4\")\r\n\r\nconst set2 = greaterEq(input.artSet.Instructor, 2, 80)\r\nconst set4 = greaterEq(input.artSet.Instructor, 4, equal(\"on\", condState, 120))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    eleMas: set2\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: set4\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Instructor\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condState,\r\n          path: condStatePath,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }, {\r\n                text: \"Duration\",\r\n                value: \"8\",\r\n                unit: \"s\"\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Lavawalker\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.Lavawalker, 2, percent(0.40))\r\nconst set4 = greaterEq(input.artSet.Lavawalker, 4, equal(\"on\", condState, percent(0.35)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    pyro_res_: set2,\r\n    all_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Lavawalker\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { infoMut, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"LuckyDog\"\r\nconst set2 = greaterEq(input.artSet.LuckyDog, 2, 100)\r\nconst heal = greaterEq(input.artSet.LuckyDog, 4, 300)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    def: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Lucky Dog\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"MaidenBeloved\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.MaidenBeloved, 2, percent(0.15))\r\nconst set4 = greaterEq(input.artSet.MaidenBeloved, 4, equal(\"on\", condState, percent(0.2)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    heal_: set2,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      incHeal_: set4\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Maiden Beloved\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condState,\r\n          path: condStatePath,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent, sum } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"MartialArtist\"\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2NA = greaterEq(input.artSet.MartialArtist, 2, percent(0.15), { key: \"normal_dmg_\" })\r\nconst set2CA = greaterEq(input.artSet.MartialArtist, 2, percent(0.15), { key: \"charged_dmg_\" })\r\nconst set4NA = greaterEq(input.artSet.MartialArtist, 4, equal(\"on\", condState, percent(0.25), { key: \"normal_dmg_\" }))\r\nconst set4CA = greaterEq(input.artSet.MartialArtist, 4, equal(\"on\", condState, percent(0.25), { key: \"charged_dmg_\" }))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    normal_dmg_: sum(set2NA, set4NA),\r\n    charged_dmg_: sum(set2CA, set4CA),\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Martial Artist\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2NA }, { node: set2CA }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: st(\"afterUse.skill\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4NA,\r\n              }, {\r\n                node: set4CA,\r\n              }, {\r\n                text: sgt('duration'),\r\n                value: 8,\r\n                unit: 's'\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { customRead, equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"NoblesseOblige\"\r\n\r\nconst [tr, trm] = trans(\"artifact\", key)\r\n\r\nconst set2 = greaterEq(input.artSet.NoblesseOblige, 2, percent(0.2))\r\n\r\nconst [condSet4Path, condSet4] = cond(key, \"set4\")\r\nconst set4TallyWrite = greaterEq(input.artSet.NoblesseOblige, 4, equal(condSet4, \"on\", 1))\r\nconst set4TallyRead = customRead([\"tally\", \"NO4\"])\r\nconst set4 = greaterEq(set4TallyRead, 1, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    burst_dmg_: set2,\r\n    atk_: set4,\r\n  },\r\n  teamBuff: {\r\n    tally: {\r\n      NO4: set4TallyWrite\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Noblesse Oblige\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          value: condSet4,\r\n          path: condSet4Path,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 12,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, infoMut, percent, prod, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { customDmgNode } from '../../Characters/dataUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"OceanHuedClam\"\r\nconst set2 = greaterEq(input.artSet.OceanHuedClam, 2, percent(0.15))\r\nconst heal = greaterEq(input.artSet.OceanHuedClam, 4,\r\n  customDmgNode(prod(percent(0.9), 30000), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })\r\n)\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    heal_: set2\r\n  },\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Ocean-Hued Clam\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: infoMut(heal, { key: `artifact_${key}:condName`, variant: \"physical\" })\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data, Info } from '../../../Formula/type'\r\nimport { lookup, naught, percent, greaterEq, sum, equal } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, sgt, st } from '../../SheetUtil'\r\nimport { range } from '../../../Util/Util'\r\n\r\nconst key: ArtifactSetKey = \"PaleFlame\"\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stacks\")\r\n\r\nconst physical_dmg_info: Info = { key: \"physical_dmg_\" }\r\nconst set2 = greaterEq(input.artSet.PaleFlame, 2, percent(0.25), physical_dmg_info)\r\n\r\nconst stackArr = range(1, 2)\r\nconst set4Atk = greaterEq(input.artSet.PaleFlame, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, percent(0.09 * i)]))\r\n    , naught))\r\nconst set4Phys = greaterEq(input.artSet.PaleFlame, 4,\r\n  lookup(condStack,\r\n    Object.fromEntries(stackArr.map(i => [i, equal(i, 2, percent(0.25))]))\r\n    , naught),\r\n  physical_dmg_info)\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    physical_dmg_: sum(set2, set4Phys),\r\n    atk_: set4Atk\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Pale Flame\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condStack,\r\n          path: condStackPath,\r\n          name: st(\"hitOp.skill\"),\r\n          states: Object.fromEntries(stackArr.map(i => [i, {\r\n            name: i.toString(),\r\n            fields: [{ node: set4Atk }, {\r\n              node: set4Phys\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 7,\r\n              unit: \"s\"\r\n            }]\r\n          }]))\r\n        }\r\n      }],\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import circlet from './circlet.png'\r\nconst icons = { circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"PrayersForDestiny\"\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Prayers for Destiny\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    1: {}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import circlet from './circlet.png'\r\nconst icons = { circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"PrayersForIllumination\"\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Prayers for Illumination\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    1: {}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import circlet from './circlet.png'\r\nconst icons = { circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"PrayersForWisdom\"\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Prayers for Wisdom\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    1: {}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import circlet from './circlet.png'\r\nconst icons = { circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"PrayersToSpringtime\"\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Prayers to Springtime\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    1: {}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"ResolutionOfSojourner\"\r\n\r\nconst set2 = greaterEq(input.artSet.ResolutionOfSojourner, 2, percent(0.18))\r\nconst set4 = greaterEq(input.artSet.ResolutionOfSojourner, 4, percent(0.3))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    charged_critRate_: set4\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Resolution of Sojourner\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"RetracingBolide\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.RetracingBolide, 2, percent(0.35))\r\nconst set4NA = greaterEq(input.artSet.RetracingBolide, 4, equal(\"on\", condState, percent(0.4)))\r\nconst set4CA = greaterEq(input.artSet.RetracingBolide, 4, equal(\"on\", condState, percent(0.4)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    shield_: set2,\r\n    normal_dmg_: set4NA,\r\n    charged_dmg_: set4CA,\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Retracing Bolide\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4NA,\r\n              }, {\r\n                node: set4CA,\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nconst key: ArtifactSetKey = \"Scholar\"\r\n\r\nconst set2 = greaterEq(input.artSet.Scholar, 2, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Scholar\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: { document: []}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"ShimenawasReminiscence\"\r\nconst [, trm] = trans(\"artifact\", key)\r\n\r\nconst [usedEnergyStatePath, usedEnergyState] = cond(key, \"usedEnergy\")\r\n\r\nconst set2 = greaterEq(input.artSet.ShimenawasReminiscence, 2, percent(0.18))\r\nconst set4Norm = greaterEq(input.artSet.ShimenawasReminiscence, 4,\r\n  equal(\"used\", usedEnergyState, percent(0.5)))\r\nconst set4Charged = { ...set4Norm }\r\nconst set4Plunge = { ...set4Norm }\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: set2,\r\n    normal_dmg_: set4Norm,\r\n    charged_dmg_: set4Charged,\r\n    plunging_dmg_: set4Plunge\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Shimenawa's Reminiscence\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: usedEnergyState,\r\n          path: usedEnergyStatePath,\r\n          name: trm(\"afterUseEnergy\"),\r\n          states: {\r\n            used: {\r\n              fields: [{\r\n                node: set4Norm,\r\n              }, {\r\n                node: set4Charged,\r\n              }, {\r\n                node: set4Plunge,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, percent, greaterEq } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"TenacityOfTheMillelith\"\r\nconst [tr] = trans(\"artifact\", key)\r\nconst hp_ = greaterEq(input.artSet.TenacityOfTheMillelith, 2, percent(0.2))\r\nconst [condPath, condNode] = cond(key, \"skill\")\r\nconst set4Atk = greaterEq(input.artSet.TenacityOfTheMillelith, 4,\r\n  equal(\"cast\", condNode, percent(0.2)))\r\nconst set4Shield = greaterEq(input.artSet.TenacityOfTheMillelith, 4,\r\n  equal(\"cast\", condNode, percent(0.3)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: set4Atk,\r\n      shield_: set4Shield\r\n    }\r\n  }\r\n}, undefined)\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Tenacity of the Millelith\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: hp_ }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          teamBuff: true,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          description: tr(`setEffects.4`),\r\n          path: condPath,\r\n          value: condNode,\r\n          name: st(\"hitOp.skill\"),\r\n          states: {\r\n            cast: {\r\n              fields: [{\r\n                node: set4Atk,\r\n              }, {\r\n                node: set4Shield,\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\n\r\nconst key: ArtifactSetKey = \"TheExile\"\r\n\r\nconst set2 = greaterEq(input.artSet.TheExile, 2, percent(0.2))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    enerRech_: set2\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"The Exile\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: { document: []}\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"ThunderingFury\"\r\n\r\nconst set2 = greaterEq(input.artSet.ThunderingFury, 2, percent(0.15))\r\nconst set4 = greaterEq(input.artSet.ThunderingFury, 4, percent(0.40))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    electro_dmg_: set2,\r\n    overloaded_dmg_: set4,\r\n    electrocharged_dmg_: set4,\r\n    superconduct_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Thundering Fury\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        fields: [{\r\n          node: set4,\r\n        }]\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"Thundersoother\"\r\nconst [, trm] = trans(\"artifact\", key)\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.Thundersoother, 2, percent(0.40))\r\nconst set4 = greaterEq(input.artSet.Thundersoother, 4, equal(\"on\", condState, percent(0.35)))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    electro_res_: set2,\r\n    all_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Thundersoother\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: trm(\"condName\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: set4,\r\n              }]\r\n            },\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq, equal, sum } from '../../../Formula/utils'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { allElements, ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport ColorText from '../../../Components/ColoredText'\r\n\r\nconst key: ArtifactSetKey = \"TinyMiracle\"\r\nconst [tr, trm] = trans(\"artifact\", key)\r\nconst [condElePath, condEle] = cond(key, \"element\")\r\n\r\nconst set2Anemo = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"anemo_res_\" })\r\nconst set2Geo = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"geo_res_\" })\r\nconst set2Cryo = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"cryo_res_\" })\r\nconst set2Pyro = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"pyro_res_\" })\r\nconst set2Hydro = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"hydro_res_\" })\r\nconst set2Electro = greaterEq(input.artSet.TinyMiracle, 2, percent(0.2), { key: \"electro_res_\" })\r\n\r\nconst set4Anemo = greaterEq(input.artSet.TinyMiracle, 4, equal('anemo', condEle, percent(0.3), { key: \"anemo_res_\" }))\r\nconst set4Geo = greaterEq(input.artSet.TinyMiracle, 4, equal('geo', condEle, percent(0.3), { key: \"geo_res_\" }))\r\nconst set4Pyro = greaterEq(input.artSet.TinyMiracle, 4, equal('pyro', condEle, percent(0.3), { key: \"pyro_res_\" }))\r\nconst set4Hydro = greaterEq(input.artSet.TinyMiracle, 4, equal('hydro', condEle, percent(0.3), { key: \"hydro_res_\" }))\r\nconst set4Electro = greaterEq(input.artSet.TinyMiracle, 4, equal('electro', condEle, percent(0.3), { key: \"electro_res_\" }))\r\nconst set4Cryo = greaterEq(input.artSet.TinyMiracle, 4, equal('cryo', condEle, percent(0.3), { key: \"cryo_res_\" }))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    anemo_res_: sum(set2Anemo, set4Anemo),\r\n    geo_res_: sum(set2Geo, set4Geo),\r\n    cryo_res_: sum(set2Cryo, set4Cryo),\r\n    pyro_res_: sum(set2Pyro, set4Pyro),\r\n    hydro_res_: sum(set2Hydro, set4Hydro),\r\n    electro_res_: sum(set2Electro, set4Electro)\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Tiny Miracle\", rarity: [3, 4],\r\n  icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [\r\n          { node: set2Anemo },\r\n          { node: set2Geo },\r\n          { node: set2Cryo },\r\n          { node: set2Pyro },\r\n          { node: set2Hydro },\r\n          { node: set2Electro }\r\n        ]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [\r\n        {\r\n          conditional: {\r\n            path: condElePath,\r\n            value: condEle,\r\n            teamBuff: true,\r\n            header: conditionalHeader(tr, icons.flower),\r\n            description: tr(`setEffects.4`),\r\n            name: trm(\"condName\"),\r\n            states: Object.fromEntries(allElements.map(e => [e, {\r\n              name: <ColorText color={e}>{sgt(`element.${e}`)}</ColorText>,\r\n              fields: [\r\n                { node: set4Anemo },\r\n                { node: set4Geo },\r\n                { node: set4Cryo },\r\n                { node: set4Pyro },\r\n                { node: set4Hydro },\r\n                { node: set4Electro },\r\n                {\r\n                  text: sgt(\"duration\"),\r\n                  value: 10,\r\n                  unit: \"s\"\r\n                }\r\n              ]\r\n            }])),\r\n          }\r\n        }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\nconst key: ArtifactSetKey = \"TravelingDoctor\"\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\n\r\nconst set2 = greaterEq(input.artSet.TravelingDoctor, 2, percent(0.2))\r\nconst heal = greaterEq(input.artSet.TravelingDoctor, 4,\r\n  prod(percent(0.2), input.total.hp))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    incHeal_: set2,\r\n  }\r\n}, {\r\n  heal,\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Traveling Doctor\", rarity: [3],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condState,\r\n          path: condStatePath,\r\n          name: st(\"afterUse.burst\"),\r\n          states: {\r\n            on: {\r\n              fields: [{\r\n                node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n              }]\r\n            }\r\n          }\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import icons from './icons'\r\nimport { Data } from '../../../Formula/type'\r\nimport { percent, greaterEq, equal, sum, lookup, naught } from '../../../Formula/utils'\r\nimport { input } from '../../../Formula'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport { cond, st } from '../../SheetUtil'\r\nimport { range } from '../../../Util/Util'\r\n\r\nconst key: ArtifactSetKey = \"VermillionHereafter\"\r\n\r\nconst set2 = greaterEq(input.artSet.VermillionHereafter, 2, percent(0.18), { key: \"atk_\" })\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstAtk_ = greaterEq(input.artSet.VermillionHereafter, 4,\r\n  equal(condAfterBurst, \"on\", percent(0.08)), { key: \"atk_\" }\r\n)\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksAtk_ = greaterEq(input.artSet.VermillionHereafter, 4, equal(condAfterBurst, \"on\",\r\n  lookup(condStacks, Object.fromEntries(range(1, 4).map(stacks => [\r\n    stacks,\r\n    percent(0.10 * stacks)\r\n  ])), naught),\r\n  { key: \"atk_\" }\r\n))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    atk_: sum(set2, afterBurstAtk_, stacksAtk_)\r\n  }\r\n})\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Vermillion Hereafter\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: {\r\n      document: [{\r\n        conditional: {\r\n          value: condAfterBurst,\r\n          path: condAfterBurstPath,\r\n          name: st(\"afterUse.burst\"),\r\n          states: {\r\n            on: {\r\n              fields: [{ node: afterBurstAtk_ }]\r\n            }\r\n          }\r\n        }\r\n      }, {\r\n        conditional: {\r\n          value: condStacks,\r\n          path: condStacksPath,\r\n          name: st(\"stacks\"),\r\n          canShow: equal(condAfterBurst, \"on\", 1),\r\n          states: Object.fromEntries(range(1, 4).map(stacks => [\r\n            stacks, {\r\n              name: st(\"stack\", { count: stacks }),\r\n              fields: [{ node: stacksAtk_ }]\r\n            }\r\n          ]))\r\n        }\r\n      }]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { equal, greaterEq, percent } from '../../../Formula/utils'\r\nimport { absorbableEle, ArtifactSetKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap } from '../../../Util/Util'\r\nimport { condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport { ArtifactSheet, conditionalHeader, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"ViridescentVenerer\"\r\nconst [tr] = trans(\"artifact\", key)\r\n\r\nconst anemo_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 2, percent(0.15))\r\nconst swirl_dmg_ = greaterEq(input.artSet.ViridescentVenerer, 4, percent(0.6))\r\n\r\nconst condSwirlPaths = objectKeyMap(absorbableEle, e => [key, `swirl${e}`])\r\nconst condSwirls = objectKeyMap(absorbableEle, e => condReadNode(condSwirlPaths[e]))\r\n\r\nconst condSwirlNodes = objectKeyValueMap(absorbableEle, e => [`${e}_enemyRes_`,\r\ngreaterEq(input.artSet.ViridescentVenerer, 4,\r\n  equal(\"swirl\", condSwirls[e], percent(-0.4))\r\n)])\r\n\r\nconst data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    anemo_dmg_,\r\n    swirl_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...condSwirlNodes\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Viridescent Venerer\", rarity: [4, 5], icons,\r\n  setEffects: {\r\n    2: {\r\n      document: [{\r\n        fields: [{ node: anemo_dmg_ }]\r\n      }]\r\n    },\r\n    4: {\r\n      document: [{\r\n        fields: [{ node: swirl_dmg_ }],\r\n      },\r\n      ...absorbableEle.map(eleKey => ({\r\n        conditional: {\r\n          value: condSwirls[eleKey],\r\n          path: condSwirlPaths[eleKey],\r\n          teamBuff: true,\r\n          header: conditionalHeader(tr, icons.flower),\r\n          // Only show description once.\r\n          description: eleKey === \"hydro\" ? tr(`setEffects.4`) : \"\",\r\n          name: st(\"eleSwirled\"),\r\n          states: {\r\n            swirl: {\r\n              name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n              fields: [{\r\n                node: condSwirlNodes[`${eleKey}_enemyRes_`]\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: 10,\r\n                unit: \"s\"\r\n              }]\r\n            }\r\n          }\r\n        },\r\n      }))\r\n      ]\r\n    }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import flower from './flower.png'\r\nimport plume from './plume.png'\r\nimport sands from './sands.png'\r\nimport goblet from './goblet.png'\r\nimport circlet from './circlet.png'\r\nconst icons = { flower, plume, sands, goblet, circlet } as const\r\nexport default icons\r\n","import { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { greaterEq, lookup, naught, percent } from '../../../Formula/utils'\r\nimport { ArtifactSetKey } from '../../../Types/consts'\r\nimport { ArtifactSheet, IArtifactSheet } from '../ArtifactSheet'\r\nimport { dataObjForArtifactSheet } from '../dataUtil'\r\nimport icons from './icons'\r\n\r\nconst key: ArtifactSetKey = \"WanderersTroupe\"\r\n\r\nconst set2 = greaterEq(input.artSet.WanderersTroupe, 2, 80)\r\nconst set4 = greaterEq(input.artSet.WanderersTroupe, 4, lookup(input.weaponType, { \"catalyst\": percent(0.35), \"bow\": percent(0.35) }, naught))\r\n\r\nexport const data: Data = dataObjForArtifactSheet(key, {\r\n  premod: {\r\n    eleMas: set2,\r\n    charged_dmg_: set4\r\n  },\r\n})\r\n\r\nconst sheet: IArtifactSheet = {\r\n  name: \"Wanderer's Troupe\", rarity: [4, 5],\r\n  icons,\r\n  setEffects: {\r\n    2: { document: [{ fields: [{ node: set2 }] }] },\r\n    4: { document: [{ fields: [{ node: set4 }] }] }\r\n  }\r\n}\r\nexport default new ArtifactSheet(key, sheet, data)\r\n","import { ArtifactSetKey } from '../../Types/consts'\r\nimport { ArtifactSheet } from './ArtifactSheet'\r\n\r\nimport Adventurer from './Adventurer'\r\nimport ArchaicPetra from './ArchaicPetra'\r\nimport Berserker from './Berserker'\r\nimport BlizzardStrayer from './BlizzardStrayer'\r\nimport BloodstainedChivalry from './BloodstainedChivalry'\r\nimport BraveHeart from './BraveHeart'\r\nimport CrimsonWitchOfFlames from './CrimsonWitchOfFlames'\r\nimport DefendersWill from './DefendersWill'\r\nimport EchoesOfAnOffering from './EchoesOfAnOffering'\r\nimport EmblemOfSeveredFate from './EmblemOfSeveredFate'\r\nimport Gambler from './Gambler'\r\nimport GladiatorsFinale from './GladiatorsFinale'\r\nimport HeartOfDepth from './HeartOfDepth'\r\nimport HuskOfOpulentDreams from './HuskOfOpulentDreams'\r\nimport Instructor from './Instructor'\r\nimport Lavawalker from './Lavawalker'\r\nimport LuckyDog from './LuckyDog'\r\nimport MaidenBeloved from './MaidenBeloved'\r\nimport MartialArtist from './MartialArtist'\r\nimport NoblesseOblige from './NoblesseOblige'\r\nimport OceanHuedClam from './OceanHuedClam'\r\nimport PaleFlame from './PaleFlame'\r\nimport PrayersForDestiny from './PrayersForDestiny'\r\nimport PrayersForIllumination from './PrayersForIllumination'\r\nimport PrayersForWisdom from './PrayersForWisdom'\r\nimport PrayersToSpringtime from './PrayersToSpringtime'\r\nimport ResolutionOfSojourner from './ResolutionOfSojourner'\r\nimport RetracingBolide from './RetracingBolide'\r\nimport Scholar from './Scholar'\r\nimport ShimenawasReminiscence from './ShimenawasReminiscence'\r\nimport TenacityOfTheMillelith from './TenacityOfTheMillelith'\r\nimport TheExile from './TheExile'\r\nimport ThunderingFury from './ThunderingFury'\r\nimport Thundersoother from './Thundersoother'\r\nimport TinyMiracle from './TinyMiracle'\r\nimport TravelingDoctor from './TravelingDoctor'\r\nimport VermillionHereafter from './VermillionHereafter'\r\nimport ViridescentVenerer from './ViridescentVenerer'\r\nimport WanderersTroupe from './WanderersTroupe'\r\nconst artifacts: Record<ArtifactSetKey, ArtifactSheet> = {\r\n  Adventurer,\r\n  ArchaicPetra,\r\n  Berserker,\r\n  BlizzardStrayer,\r\n  BloodstainedChivalry,\r\n  BraveHeart,\r\n  CrimsonWitchOfFlames,\r\n  DefendersWill,\r\n  EchoesOfAnOffering,\r\n  EmblemOfSeveredFate,\r\n  Gambler,\r\n  GladiatorsFinale,\r\n  HeartOfDepth,\r\n  HuskOfOpulentDreams,\r\n  Instructor,\r\n  Lavawalker,\r\n  LuckyDog,\r\n  MaidenBeloved,\r\n  MartialArtist,\r\n  NoblesseOblige,\r\n  OceanHuedClam,\r\n  PaleFlame,\r\n  PrayersForDestiny,\r\n  PrayersForIllumination,\r\n  PrayersForWisdom,\r\n  PrayersToSpringtime,\r\n  ResolutionOfSojourner,\r\n  RetracingBolide,\r\n  Scholar,\r\n  ShimenawasReminiscence,\r\n  TenacityOfTheMillelith,\r\n  TheExile,\r\n  ThunderingFury,\r\n  Thundersoother,\r\n  TinyMiracle,\r\n  TravelingDoctor,\r\n  VermillionHereafter,\r\n  ViridescentVenerer,\r\n  WanderersTroupe,\r\n} as const\r\n\r\nexport default artifacts\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, percent, prod, stringPrio, subscript, sum, unit } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\ncommonBasic.critRate_ = input.total.cappedCritRate\r\n\r\nexport const infusionNode = stringPrio(\r\n  input.infusion.nonOverridableSelf,\r\n  input.infusion.team,\r\n  input.infusion.overridableSelf)\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(unit, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healNode = prod(base, sum(unit, input.total.heal_, input.total.incHeal_))\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { frac, infoMut, percent, prod, subscript, sum, unit } from \"./utils\";\r\n\r\n// https://github.com/Dimbreath/GenshinData/blob/72c9112a7c5e8e5014f61009a1a2764e266aeab7/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//   or if the permalink is dead,\r\n// https://github.com/Dimbreath/GenshinData/blob/master/ExcelBinOutput/ElementCoeffExcelConfigData.json\r\n//\r\n// PlayerElementLevelCo\r\nexport const transformativeReactionLevelMultipliers = [-1.0, // lvl 0\r\n  17.165606, 18.535048, 19.904854, 21.274902, 22.6454, 24.649612, 26.640642, 28.868587, 31.36768, 34.143345, 37.201, 40.66, 44.446667, 48.56352, 53.74848, 59.081898, 64.420044, 69.72446, 75.12314, 80.58478, 86.11203, 91.70374, 97.24463, 102.812645, 108.40956, 113.20169, 118.102905, 122.97932, 129.72733, 136.29291, 142.67085, 149.02902, 155.41699, 161.8255, 169.10631, 176.51808, 184.07274, 191.70952, 199.55692, 207.38205, 215.3989, 224.16566, 233.50217, 243.35057, 256.06308, 268.5435, 281.52606, 295.01364, 309.0672, 323.6016, 336.75754, 350.5303, 364.4827, 378.61917, 398.6004, 416.39825, 434.387, 452.95105, 472.60623, 492.8849, 513.56854, 539.1032, 565.51056, 592.53876, 624.4434, 651.47015, 679.4968, 707.79407, 736.67145, 765.64026, 794.7734, 824.67737, 851.1578, 877.74207, 914.2291, 946.74677, 979.4114, 1011.223, 1044.7917, 1077.4437, 1109.9976, 1142.9766, 1176.3695, 1210.1844, 1253.8357, 1288.9528, 1325.4841, 1363.4569, 1405.0974, 1446.8535]\r\n// PlayerShieldLevelCo\r\nexport const crystallizeLevelMultipliers = [-1.0, // lvl 0\r\n  91.1791, 98.707664, 106.23622, 113.76477, 121.29332, 128.82188, 136.35042, 143.87898, 151.40752, 158.93608, 169.99149, 181.07625, 192.19037, 204.0482, 215.939, 227.86275, 247.68594, 267.5421, 287.4312, 303.82642, 320.22522, 336.62762, 352.31927, 368.01093, 383.70255, 394.43237, 405.18146, 415.94992, 426.73764, 437.5447, 450.6, 463.7003, 476.84558, 491.1275, 502.55457, 514.0121, 531.4096, 549.9796, 568.5849, 584.9965, 605.67035, 626.3862, 646.0523, 665.7556, 685.4961, 700.8394, 723.3331, 745.8653, 768.4357, 786.79193, 809.5388, 832.32904, 855.16266, 878.0396, 899.4848, 919.362, 946.0396, 974.7642, 1003.5786, 1030.077, 1056.635, 1085.2463, 1113.9244, 1149.2587, 1178.0648, 1200.2238, 1227.6603, 1257.243, 1284.9174, 1314.7529, 1342.6652, 1372.7524, 1396.321, 1427.3124, 1458.3745, 1482.3358, 1511.9109, 1541.5493, 1569.1537, 1596.8143, 1622.4197, 1648.074, 1666.3761, 1684.6782, 1702.9803, 1726.1047, 1754.6715, 1785.8666, 1817.1375, 1851.0603]\r\n\r\n\r\nconst asConst = true as const\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers)\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(sum(unit, /** + Crystallize bonus */ crystallizeElemas), crystallizeMulti1), { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers)\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap([\"overloaded\", \"electrocharged\", \"superconduct\", \"shattered\"] as const, reaction => {\r\n    const { multi, variants: [ele] } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      infoMut(prod(multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total[`${reaction}_dmg_`]),\r\n      input.enemy[`${ele}_resMulti`]),\r\n      { key: `${reaction}_hit`, variant: reaction })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => infoMut(\r\n    prod(\r\n      infoMut(prod(transformativeReactions.swirl.multi, transMulti1), { asConst }),\r\n      sum(unit, transMulti2, input.total.swirl_dmg_),\r\n      input.enemy[`${ele}_resMulti`]),\r\n    { key: `${ele}_swirl_hit`, variant: ele }))\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    shattered: trans.shattered,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n  },\r\n}\r\n"],"names":["flower","plume","sands","goblet","circlet","dataObjForArtifactSheet","key","data","displayArtifact","mergeData","inferInfoMut","display","set2","greaterEq","input","heal","prod","percent","premod","hp","sheet","name","rarity","icons","setEffects","document","fields","node","infoMut","variant","ArtifactSheet","trans","tr","trm","cond","condPath","condNode","set4Nodes","Object","fromEntries","absorbableEle","e","equal","geo_dmg_","teamBuff","undefined","durationfield","text","sgt","value","unit","conditional","path","header","conditionalHeader","description","states","critRate_info","set4","critRate_","sum","st","condStatePath","condState","lookup","naught","cryo_dmg_","total","cryo","frozen","set4Charged","set4StamDec","physical_dmg_","charged_dmg_","staminaDec_","hit","atk_","all_dmg_","condStackPath","condStack","pyro_dmg_info","set4Overload","set4Burning","set4Vape","set4Melt","stackArr","range","set4Pyro_dmg_","map","i","pyro_dmg_","overloaded_dmg_","burning_dmg_","vaporize_dmg_","melt_dmg_","count","res_","objectKeyValueMap","allElements","ele","tally","def_","values","condModePath","condMode","normal_dmgInc","on","avg","burstBonus","min","enerRech_","burst_dmg_","skill_dmg_","normal_dmg_","set4Norm","hydro_dmg_","cast","def_info","set4Def","set4Geo","toString","eleMas","pyro_res_","def","heal_","incHeal_","set2NA","set2CA","set4NA","set4CA","condSet4Path","condSet4","set4TallyWrite","set4TallyRead","customRead","NO4","customDmgNode","constant","physical_dmg_info","set4Atk","set4Phys","charged_critRate_","shield_","usedEnergyStatePath","usedEnergyState","set4Plunge","plunging_dmg_","used","hp_","set4Shield","electro_dmg_","electrocharged_dmg_","superconduct_dmg_","electro_res_","condElePath","condEle","set2Anemo","set2Geo","set2Cryo","set2Pyro","set2Hydro","set2Electro","set4Anemo","set4Pyro","set4Hydro","set4Electro","set4Cryo","anemo_res_","geo_res_","cryo_res_","hydro_res_","color","condAfterBurstPath","condAfterBurst","afterBurstAtk_","condStacksPath","condStacks","stacksAtk_","stacks","canShow","anemo_dmg_","swirl_dmg_","condSwirlPaths","objectKeyMap","condSwirls","condReadNode","condSwirlNodes","eleKey","swirl","Adventurer","ArchaicPetra","Berserker","BlizzardStrayer","BloodstainedChivalry","BraveHeart","CrimsonWitchOfFlames","DefendersWill","EchoesOfAnOffering","EmblemOfSeveredFate","Gambler","GladiatorsFinale","HeartOfDepth","HuskOfOpulentDreams","Instructor","Lavawalker","LuckyDog","MaidenBeloved","MartialArtist","NoblesseOblige","OceanHuedClam","PaleFlame","PrayersForDestiny","PrayersForIllumination","PrayersForWisdom","PrayersToSpringtime","ResolutionOfSojourner","RetracingBolide","Scholar","ShimenawasReminiscence","TenacityOfTheMillelith","TheExile","ThunderingFury","Thundersoother","TinyMiracle","TravelingDoctor","VermillionHereafter","ViridescentVenerer","WanderersTroupe","charCurves","objectMap","_charCurves","commonBasic","infusionNode","stringPrio","inferredHitEle","sword","claymore","polearm","catalyst","getTalentType","move","base","additional","customShieldNode","shieldNode","customHealNode","healNode","dmgNode","lvlMultiplier","talentType","subscript","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","charEle","reaction","reactions","layeredAssignment","stat","list","curves","push","ascensions","some","x","props","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","strKey","ns","key18","customStringRead","subKey","typeKey","crystallizeMulti1","crystallizeElemas","frac","crystallizeHit","transMulti1","transMulti2","transformativeReactions","multi","variants","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","hydroSwirl","hydro","shattered","geo","crystallize","overloaded","electrocharged","superconduct"],"sourceRoot":""}