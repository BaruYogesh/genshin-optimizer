{"version":3,"file":"static/js/927.cd1b9a94.chunk.js","mappings":"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","sources":["Components/Character/CharacterAutocomplete.tsx","Components/Character/LocationName.tsx","Components/Character/ThumbSide.tsx","Components/CloseButton.tsx","Components/ConditionalWrapper.tsx","Components/MenuItemWithImage.tsx","Components/ModalWrapper.tsx","Components/SolidColoredTextfield.tsx","Components/SolidToggleButtonGroup.tsx","Components/SortByButton.tsx","Components/StarDisplay.tsx","ReactHooks/useForceUpdate.tsx","ReactHooks/useMediaQueryUp.tsx","Util/CharacterSort.ts","Util/SortByFilters.ts","stateInit.tsx"],"sourcesContent":["import { faUserShield } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { BusinessCenter, Favorite } from \"@mui/icons-material\";\r\nimport { Autocomplete, AutocompleteProps, Box, Skeleton, Typography, useTheme } from \"@mui/material\";\r\nimport { Suspense, useCallback, useContext, useMemo } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { initCharMeta } from \"../../stateInit\";\r\nimport { allElements, allWeaponTypeKeys, CharacterKey } from \"../../Types/consts\";\r\nimport { CharacterFilterConfigs, characterFilterConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction } from \"../../Util/SortByFilters\";\r\nimport MenuItemWithImage from \"../MenuItemWithImage\";\r\nimport SolidColoredTextField from \"../SolidColoredTextfield\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\ntype CharacterAutocompleteValue = CharacterKey | \"\" | \"Inventory\" | \"Equipped\"\r\ntype CharacterAutocompleteOption = {\r\n  value: CharacterAutocompleteValue\r\n  label: string\r\n}\r\ntype CharacterAutocompleteProps = Omit<AutocompleteProps<CharacterAutocompleteOption, false, true, false>, \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  value: CharacterAutocompleteValue\r\n  onChange: (v: any) => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  showInventory?: boolean\r\n  showEquipped?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  placeholderText?: string\r\n  labelText?: string\r\n}\r\n\r\nexport default function CharacterAutocomplete({ value, onChange, defaultText = \"\", defaultIcon = \"\", placeholderText = \"\", labelText = \"\", showDefault = false, showInventory = false, showEquipped = false, filter = () => true, disable = () => false, ...props }: CharacterAutocompleteProps) {\r\n  const { t } = useTranslation([\"ui\", \"artifact\", \"charNames_gen\"])\r\n  const theme = useTheme()\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(() => CharacterSheet.getAll, [])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(database, characterSheets), [database, characterSheets])\r\n  const characterKeys = database.chars.keys.filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n\r\n  const textForValue = useCallback((value: CharacterAutocompleteValue): string => {\r\n    switch (value) {\r\n      case \"Equipped\":\r\n        return t(\"artifact:filterLocation.currentlyEquipped\")\r\n      case \"Inventory\":\r\n        return t(\"artifact:filterLocation.inventory\")\r\n      case \"\":\r\n        return defaultText\r\n      default:\r\n        return t(`charNames_gen:${value}`)\r\n    }\r\n  }, [defaultText, t])\r\n\r\n  const imageForValue = useCallback((value: CharacterAutocompleteValue): Displayable => {\r\n    switch (value) {\r\n      case \"Equipped\":\r\n        return <FontAwesomeIcon icon={faUserShield} />\r\n      case \"Inventory\":\r\n        return <BusinessCenter />\r\n      case \"\":\r\n        return defaultIcon\r\n      default:\r\n        return <ThumbSide src={characterSheets![value]?.thumbImgSide} sx={{ pr: 1 }} />\r\n    }\r\n  }, [defaultIcon, characterSheets])\r\n\r\n  const characterOptions = useMemo(() => filterConfigs && charOptions(characterKeys, filterConfigs, textForValue, showDefault, showInventory, showEquipped),\r\n    [filterConfigs, characterKeys, showDefault, showInventory, showEquipped, textForValue])\r\n\r\n\r\n\r\n  if (!characterSheets || !characterOptions) return <Skeleton height={50} />\r\n\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={characterOptions}\r\n    clearIcon={value ? undefined : \"\"} // Hide the clear icon if the value is already default\r\n    getOptionLabel={(option) => option.label}\r\n    onChange={(event, newValue, reason) => (event.type !== \"change\" || reason !== \"clear\") && onChange(newValue ? newValue.value : \"\")}\r\n    isOptionEqualToValue={(option, value) => option.value === value.value}\r\n    getOptionDisabled={option => disable(option.value)}\r\n    value={{ value, label: textForValue(value) }}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={labelText}\r\n      placeholder={placeholderText}\r\n      startAdornment={imageForValue(value)}\r\n      hasValue={value ? true : false}\r\n    />}\r\n    renderOption={(props, option) => {\r\n      const favorite = option.value !== \"Equipped\" && option.value !== \"Inventory\"\r\n        && option.value !== \"\" && database.states.getWithInit(`charMeta_${option.value}`, initCharMeta).favorite\r\n      return <MenuItemWithImage\r\n        key={option.value ? option.value : \"default\"}\r\n        value={option.value ? option.value : \"default\"}\r\n        image={imageForValue(option.value)}\r\n        text={\r\n          <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\r\n            <Typography variant=\"inherit\" noWrap>\r\n              {textForValue(option.value)}\r\n            </Typography>\r\n          </Suspense>\r\n        }\r\n        theme={theme}\r\n        isSelected={value === option.value}\r\n        addlElement={<>\r\n          {favorite && <Box display=\"flex\" flexGrow={1} />}\r\n          {favorite && <Favorite sx={{ ml: 1, mr: -0.5 }} />}\r\n        </>}\r\n        props={props}\r\n      />\r\n    }}\r\n    {...props}\r\n  />\r\n}\r\n\r\n\r\nfunction charOptions(characterKeys: CharacterKey[], filterConfigs: CharacterFilterConfigs | undefined, textForValue: (v: CharacterAutocompleteValue) => string, showDefault: boolean, showInventory, showEquipped): CharacterAutocompleteOption[] {\r\n  if (!filterConfigs) return []\r\n  const base: CharacterAutocompleteOption[] = []\r\n  if (showDefault) {\r\n    base.push({ value: \"\", label: textForValue(\"\") })\r\n  }\r\n  if (showInventory) {\r\n    base.push({ value: \"Inventory\", label: textForValue(\"Inventory\") })\r\n  }\r\n  if (showEquipped) {\r\n    base.push({ value: \"Equipped\", label: textForValue(\"Equipped\") })\r\n  }\r\n  const faves = characterKeys\r\n    .filter(filterFunction({ element: [...allElements], weaponType: [...allWeaponTypeKeys], favorite: \"yes\", name: \"\" }, filterConfigs))\r\n    .map(characterKey => ({ value: characterKey, label: textForValue(characterKey) }))\r\n  const nonFaves = characterKeys\r\n    .filter(filterFunction({ element: [...allElements], weaponType: [...allWeaponTypeKeys], favorite: \"no\", name: \"\" }, filterConfigs))\r\n    .map(characterKey => ({ value: characterKey, label: textForValue(characterKey) }))\r\n\r\n  return base.concat(faves).concat(nonFaves)\r\n}\r\n","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(() => CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t<string>(\"inventory\")}</span>}\r\n  </Typography>\r\n\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Close } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\ntype CloseButtonProps = ButtonProps & {\r\n  large?: boolean\r\n}\r\nexport default function CloseButton({ large = false, ...props }: CloseButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  if (large)\r\n    return <Button color=\"error\" startIcon={<Close />} {...props} >{t`close`}</Button>\r\n  return <Button color=\"error\" sx={{ p: 1, minWidth: 0 }} {...props} >\r\n    <Close />\r\n  </Button>\r\n}\r\n","import { ReactNode } from \"react\";\r\n\r\ntype Prop = {\r\n  condition: boolean,\r\n  wrapper: (children: ReactNode) => ReactNode\r\n  falseWrapper?: (children: ReactNode) => ReactNode\r\n  children: ReactNode\r\n}\r\n// Wrap children with element provided by wrapper func when condition is true.\r\nexport default function ConditionalWrapper({ condition, wrapper, falseWrapper, children }: Prop) {\r\n  return (condition ? wrapper(children) : (falseWrapper ? falseWrapper(children) : children)) as JSX.Element;\r\n}","import { ListItemIcon, ListItemText, MenuItem, Theme } from \"@mui/material\";\r\n\r\ntype MenuItemWithImageProps = {\r\n  value: string\r\n  image?: Displayable\r\n  text: Displayable\r\n  theme: Theme\r\n  isSelected?: boolean\r\n  addlElement?: Displayable\r\n  props?: object\r\n}\r\n\r\nexport default function MenuItemWithImage({ value, image = \"\", text, theme, isSelected, addlElement, props }: MenuItemWithImageProps) {\r\n  return <MenuItem key={value} value={value} {...props}>\r\n    <ListItemIcon>{image}</ListItemIcon>\r\n    <ListItemText primaryTypographyProps={{ style: { fontWeight: isSelected ? theme.typography.fontWeightMedium : theme.typography.fontWeightRegular } }}>\r\n      {text}\r\n    </ListItemText>\r\n    {addlElement && addlElement}\r\n  </MenuItem>\r\n}\r\n","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import { TextField, TextFieldProps, useTheme } from \"@mui/material\";\r\n\r\ntype SolidColoredTextFieldProps = Omit<TextFieldProps, \"multiline\" | \"variant\" | \"color\" | \"hiddenLabel\" | \"type\" | \"InputLabelProps\"> & {\r\n  hasValue: boolean\r\n  startAdornment?: Displayable\r\n}\r\nexport default function SolidColoredTextField({ hasValue, startAdornment, InputProps, sx, ...props }: SolidColoredTextFieldProps) {\r\n  const theme = useTheme()\r\n  return <TextField\r\n    {...props}\r\n    variant=\"filled\"\r\n    color={hasValue ? \"success\" : \"primary\"}\r\n    hiddenLabel={props.label ? false : true}\r\n    type=\"search\"\r\n    InputProps={{\r\n      ...InputProps,\r\n      startAdornment,\r\n    }}\r\n    InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n    sx={{\r\n      ...sx,\r\n      // Fill in the background without using the `focused` prop\r\n      \"& .MuiFilledInput-root\": { backgroundColor: hasValue ? theme.palette.success.main : theme.palette.primary.main, paddingTop: props.label ? undefined : 0, paddingBottom: 0 },\r\n      \"& .MuiFilledInput-root.Mui-focused\": { backgroundColor: hasValue ? theme.palette.success.light : theme.palette.primary.light },\r\n      \"& .MuiFilledInput-root:hover\": { backgroundColor: hasValue ? theme.palette.success.dark : theme.palette.primary.dark },\r\n      // Remove the colored bar at the bottom of the input\r\n      \"& .MuiFilledInput-root:before\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root.Mui-disabled:before\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root:after\": { border: \"none\" },\r\n      \"& .MuiFilledInput-root:hover:not(.Mui-disabled):before\": { border: \"none\" },\r\n      // Remove the x at the end of search input for IE\r\n      \"& input[type=search]::-ms-clear\": { display: \"none\", width: 0, height: 0 },\r\n      \"& input[type=search]::-ms-reveal\": { display: \"none\", width: 0, height: 0 },\r\n      // Remove the x at the end of search input for Chrome\r\n      \"& input[type=search]::-webkit-search-decoration\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-cancel-button\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-results-button\": { display: \"none\" },\r\n      \"& input[type=search]::-webkit-search-results-decoration\": { display: \"none\" },\r\n    }}\r\n  />\r\n}\r\n","import { ButtonProps, styled, ToggleButtonGroup, ToggleButtonGroupProps } from \"@mui/material\";\r\n\r\nexport type SolidToggleButtonGroupProps = SolidToggleButtonGroupPropsPartial & ToggleButtonGroupProps\r\ntype SolidToggleButtonGroupPropsPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\n\r\nconst SolidToggleButtonGroup = styled(ToggleButtonGroup, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidToggleButtonGroupPropsPartial>(({ theme, baseColor = \"secondary\", selectedColor = \"success\" }) => ({\r\n  '& .MuiToggleButtonGroup-grouped': {\r\n    '&': {\r\n      backgroundColor: theme.palette[baseColor].main,\r\n      color: theme.palette[baseColor].contrastText,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n      transition: \"background-color 0.25s ease\",\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette[selectedColor].main,\r\n      color: theme.palette[selectedColor].contrastText,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n    '&.Mui-disabled': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected.Mui-disabled': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default SolidToggleButtonGroup\r\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <Box display=\"flex\" alignItems=\"center\" gap={1}>\r\n    <Trans t={t} i18nKey={t(\"sortBy\") as any}>Sort by: </Trans>\r\n    <ButtonGroup {...props} >\r\n      <DropdownButton title={<Trans t={t} i18nKey={t(`sortMap.${value}`) as any}>{{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n        {sortKeys.map(key =>\r\n          <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n      </DropdownButton>\r\n      <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n        {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n      </Button>\r\n    </ButtonGroup>\r\n  </Box>\r\n}\r\n","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Typography } from '@mui/material'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nexport const StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nexport const StarsDisplay = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) =>\r\n  <Typography color={colored ? \"warning.main\" : undefined} component=\"span\">\r\n    {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n  </Typography>\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import { useMediaQuery, useTheme } from \"@mui/material\";\r\n\r\nexport default function useMediaQueryUp() {\r\n  const theme = useTheme();\r\n  const sm = useMediaQuery(theme.breakpoints.up('sm'));\r\n  const md = useMediaQuery(theme.breakpoints.up('md'));\r\n  const lg = useMediaQuery(theme.breakpoints.up('lg'));\r\n  const xl = useMediaQuery(theme.breakpoints.up('xl'));\r\n  if (xl) return \"xl\"\r\n  if (lg) return \"lg\"\r\n  if (md) return \"md\"\r\n  if (sm) return \"sm\"\r\n  return \"xs\"\r\n}\r\n","import CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport i18n from \"../i18n\";\r\nimport { initCharMeta } from \"../stateInit\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\r\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\r\nexport type CharacterSortKey = typeof characterSortKeys[number]\r\n\r\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\r\n  return {\r\n    new: {\r\n      getValue: (ck) => database.chars.get(ck as CharacterKey) ? 0 : 1,\r\n      tieBreaker: \"name\"\r\n    },\r\n    name: {\r\n      getValue: (ck) => i18n.t(`charNames_gen\"${ck}`).toString(),\r\n    },\r\n    level: {\r\n      getValue: (ck) => {\r\n        const char = database.chars.get(ck as CharacterKey)\r\n        if (!char) return 0\r\n        return char.level * char.ascension\r\n      },\r\n      tieBreaker: \"rarity\"\r\n    },\r\n    rarity: {\r\n      getValue: (ck) => characterSheets?.[ck]?.rarity,\r\n      tieBreaker: \"level\"\r\n    }\r\n  }\r\n}\r\n\r\nexport type CharacterFilterConfigs = FilterConfigs<\"element\" | \"weaponType\" | \"favorite\" | \"name\", CharacterKey>\r\nexport function characterFilterConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): CharacterFilterConfigs {\r\n  return {\r\n    element: (ck, filter) => filter.includes(characterSheets?.[ck]?.elementKey) ||\r\n      (ck === \"Traveler\" && !database.chars.get(ck as CharacterKey) && filter.some(fe => characterSheets.Traveler.elementKeys.includes(fe))) ||\r\n      (ck === \"Traveler\" && filter.includes(database.chars.get(ck as CharacterKey)?.elementKey)),\r\n    weaponType: (ck, filter) => filter.includes(characterSheets?.[ck]?.weaponTypeKey),\r\n    favorite: (ck, filter) =>\r\n      !filter || (filter === (database.states.getWithInit(`charMeta_${ck}`, initCharMeta).favorite ? \"yes\" : \"no\")),\r\n    name: (ck, filter) => !filter || (i18n.t(`charNames_gen:${ck}`).toLowerCase().includes(filter.toLowerCase()))\r\n  }\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\r\n}\r\n","import { allSubstatKeys } from \"./Types/artifact\"\r\n\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n\r\nexport function initCharMeta() {\r\n  return {\r\n    rvFilter: [...allSubstatKeys],\r\n    favorite: false\r\n  }\r\n}\r\n"],"names":["CharacterAutocomplete","value","onChange","defaultText","defaultIcon","placeholderText","labelText","showDefault","showInventory","showEquipped","filter","disable","props","t","useTranslation","theme","useTheme","database","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","filterConfigs","useMemo","characterFilterConfigs","characterKeys","chars","keys","ck","sort","textForValue","useCallback","imageForValue","icon","faUserShield","src","thumbImgSide","sx","pr","characterOptions","base","push","label","faves","filterFunction","element","allElements","weaponType","allWeaponTypeKeys","favorite","name","map","characterKey","nonFaves","concat","charOptions","autoHighlight","options","clearIcon","undefined","getOptionLabel","option","event","newValue","reason","type","isOptionEqualToValue","getOptionDisabled","renderInput","placeholder","startAdornment","hasValue","renderOption","states","getWithInit","initCharMeta","image","text","Suspense","fallback","variant","width","noWrap","isSelected","addlElement","display","flexGrow","ml","mr","height","LocationName","location","characterSheet","component","nameWIthIcon","verticalAlign","ThumbSide","styled","lineHeight","marginTop","spacing","marginLeft","marginRight","marginBottom","CloseButton","large","color","startIcon","p","minWidth","ConditionalWrapper","condition","wrapper","falseWrapper","children","MenuItemWithImage","primaryTypographyProps","style","fontWeight","typography","fontWeightMedium","fontWeightRegular","ScrollModal","Modal","overflow","paddingTop","paddingBottom","ModalContainer","Container","padding","minHeight","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","SolidColoredTextField","InputProps","hiddenLabel","InputLabelProps","palette","primary","backgroundColor","success","main","light","dark","border","SolidToggleButtonGroup","ToggleButtonGroup","shouldForwardProp","prop","baseColor","selectedColor","contrastText","transition","SortByButton","sortKeys","ascending","onChangeAsc","alignItems","gap","i18nKey","title","key","selected","disabled","onClick","faSortAmountDownAlt","faSortAmountUp","className","StarIcon","faStar","StarsDisplay","stars","colored","Array","_","i","useForceUpdate","useState","stateDirty","update","useMediaQueryUp","sm","useMediaQuery","breakpoints","up","md","lg","characterSortKeys","characterSortConfigs","new","getValue","get","tieBreaker","i18n","toString","level","char","ascension","rarity","includes","elementKey","some","fe","Traveler","elementKeys","weaponTypeKey","toLowerCase","sortFunction","sortby","configs","Sort","a","b","config","aV","bV","localeCompare","filterOption","diff","filterOptions","obj","Object","entries","every","optionKey","optionVal","initGlobalSettings","tcMode","rvFilter","allSubstatKeys"],"sourceRoot":""}