{"version":3,"file":"static/js/131.78705227.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/Image/ImgIcon.tsx","Components/StatIcon.tsx","Data/Characters/CharacterSheet.tsx","Data/SheetUtil.tsx","Formula/index.ts","Formula/utils.ts","ReactHooks/usePromise.tsx"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\"\r\ninterface ImgIconProps {\r\n  size?: number;\r\n}\r\nconst ImgIcon = styled(\"img\", {\r\n  name: 'ImgIcon',\r\n  slot: 'Root',\r\n})<ImgIconProps>(({ size = 1 }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `${size * 1.2}em`,\r\n  verticalAlign: \"text-bottom\"\r\n}))\r\n\r\nexport default ImgIcon","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\nimport { faAnemo, faAtk, faCdReduction, faCritDmg, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRecharge, faGeo, faHealingAdd, faHealingBonus, faHp, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\nexport const elementSvg = {\r\n  anemo: faAnemo,\r\n  geo: faGeo,\r\n  electro: faElectro,\r\n  hydro: faHydro,\r\n  pyro: faPyro,\r\n  cryo: faCryo,\r\n  dendro: faDendro,\r\n  physical: faPhysicalDmgBonus,\r\n}\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} fixedWidth />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} fixedWidth />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} fixedWidth />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} fixedWidth />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} fixedWidth />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} fixedWidth />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} fixedWidth />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} fixedWidth />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} sx={{ lineHeight: 1 }} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  hp_: <FontAwesomeIcon icon={faHp as any} />,\r\n  hp: <FontAwesomeIcon icon={faHp as any} />,\r\n\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faCritDmg as any} />,\r\n  enerRech_: <FontAwesomeIcon icon={faEnergyRecharge as any} />,\r\n  incHeal_: <FontAwesomeIcon icon={faHealingAdd as any} />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <FontAwesomeIcon icon={faCdReduction as any} />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [\r\n    [`${ele}_dmg_`, coloredEleIcon[ele]],\r\n    [`${ele}_res_`, coloredEleIcon[ele]],\r\n    [`${ele}_critDMG_`, coloredEleIcon[ele]],\r\n    [`${ele}_dmgInc`, coloredEleIcon[ele]],\r\n    [`${ele}_enemyRes_`, coloredEleIcon[ele]]\r\n  ]))\r\n}\r\n\r\nexport default StatIcon\r\n","import Assets from \"../../Assets/Assets\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, NumNode } from \"../../Formula/type\";\r\nimport { greaterEq } from \"../../Formula/utils\";\r\nimport { CharacterKey, ElementKey, Rarity, WeaponTypeKey } from \"../../Types/consts\";\r\nimport { DocumentConditional, DocumentConditionalBase, DocumentSection, IDocumentFields, IDocumentHeader } from \"../../Types/sheet\";\r\nimport { ascensionMaxLevel } from \"../LevelData\";\r\nimport { st, trans } from \"../SheetUtil\";\r\n\r\nconst characterSheets = import('.').then(imp => imp.default)\r\n\r\ninterface TalentSheetElement {\r\n  name: Displayable //talentName\r\n  img: string\r\n  sections: DocumentSection[]\r\n}\r\n\r\nexport type TalentSheetElementKey = \"auto\" | \"skill\" | \"burst\" | \"sprint\" | \"passive\" | \"passive1\" | \"passive2\" | \"passive3\" | \"constellation1\" | \"constellation2\" | \"constellation3\" | \"constellation4\" | \"constellation5\" | \"constellation6\"\r\nexport type TalentSheet = {\r\n  sheets: Dict<TalentSheetElementKey, TalentSheetElement>\r\n}\r\n\r\n\r\ninterface ICharacterSheetBase {\r\n  name: Displayable\r\n  cardImg: string\r\n  thumbImg: string\r\n  thumbImgSide: string\r\n  barImg?: string\r\n  bannerImg?: string\r\n  rarity: Rarity\r\n  weaponTypeKey: WeaponTypeKey\r\n  gender: string\r\n  constellationName: Displayable\r\n  title: Displayable\r\n}\r\ninterface ICharacterSheetTalent extends ICharacterSheetBase {\r\n  elementKey: ElementKey\r\n  talent: TalentSheet\r\n}\r\ninterface ICharacterSheetTalents extends ICharacterSheetBase {\r\n  talents: Dict<ElementKey, TalentSheet>\r\n}\r\nexport type ICharacterSheet = ICharacterSheetTalent | ICharacterSheetTalents\r\n\r\nexport default class CharacterSheet {\r\n  sheet: ICharacterSheet;\r\n  private data: Data | Partial<Record<ElementKey, Data>>;\r\n  constructor(charSheet: ICharacterSheet, data: Data | Partial<Record<ElementKey, Data>>) {\r\n    this.sheet = charSheet\r\n    this.data = data\r\n  }\r\n  static get = (charKey: CharacterKey | \"\"): Promise<CharacterSheet> | undefined => charKey ? characterSheets.then(c => c[charKey]) : undefined\r\n  static get getAll() { return characterSheets }\r\n  get name() { return this.sheet.name }\r\n  get icon() { return <ImgIcon src={this.thumbImgSide} sx={{ height: \"2em\", marginTop: \"-2em\", marginLeft: \"-0.5em\" }} /> }\r\n  get nameWIthIcon() { return <span>{this.icon} {this.name}</span> }\r\n  get cardImg() { return this.sheet.cardImg }\r\n  get thumbImg() { return this.sheet.thumbImg }\r\n  get thumbImgSide() { return this.sheet.thumbImgSide }\r\n  get bannerImg() { return this.sheet.bannerImg }\r\n  get rarity() { return this.sheet.rarity }\r\n  get elementKey() { return \"elementKey\" in this.sheet ? this.sheet.elementKey : undefined }\r\n  get elementKeys() { return \"talents\" in this.sheet ? Object.keys(this.sheet.talents) : [] }\r\n  get weaponTypeKey() { return this.sheet.weaponTypeKey }\r\n  get constellationName() { return this.sheet.constellationName }\r\n\r\n  isMelee = () => {\r\n    const weaponTypeKey = this.sheet.weaponTypeKey\r\n    return weaponTypeKey === \"sword\" || weaponTypeKey === \"polearm\" || weaponTypeKey === \"claymore\"\r\n  }\r\n  get isTraveler() {\r\n    return \"talents\" in this.sheet\r\n  }\r\n  getData = (ele: ElementKey = \"anemo\"): Data => {\r\n    if (\"charKey\" in this.data)\r\n      return this.data\r\n    return this.data[ele]!\r\n  }\r\n  getTalent = (eleKey: ElementKey = \"anemo\"): TalentSheet | undefined => {\r\n    if (\"talent\" in this.sheet) return this.sheet.talent\r\n    else return this.sheet.talents[eleKey]\r\n  }\r\n  getTalentOfKey = (talentKey: TalentSheetElementKey, eleKey: ElementKey = \"anemo\") => this.getTalent(eleKey)?.sheets[talentKey]\r\n\r\n  static getLevelString = (level: number, ascension: number): string =>\r\n    `${level}/${ascensionMaxLevel[ascension]}`\r\n}\r\n\r\nconst talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, docSections?: DocumentSection[]): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [\r\n    ...(talentKey !== \"auto\" ? [{ text: tr(`${talentKey}.description`) }] : []),\r\n    ...(docSections || []),\r\n  ],\r\n})\r\n\r\nconst talentHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IDocumentHeader => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{st(`talents.${talentKey}`)}</SqBadge>,\r\n    description: tr(`${talentKey}.description`),\r\n  }\r\n}\r\n\r\nconst headerTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, partialSection: DocumentSection): DocumentSection => ({\r\n  ...partialSection,\r\n  header: talentHeader(talentKey, tr, img),\r\n  canShow: canShowTemplate(talentKey, partialSection.canShow),\r\n})\r\n\r\nconst fieldsTemplate = (talentKey: TalentSheetElementKey, partialFields: IDocumentFields): IDocumentFields => ({\r\n  ...partialFields,\r\n  canShow: canShowTemplate(talentKey, partialFields.canShow),\r\n})\r\n\r\nconst conditionalTemplate = (talentKey: TalentSheetElementKey, partialCond: DocumentConditionalBase, tr: (string) => Displayable, img: string): DocumentConditional => ({\r\n  ...partialCond,\r\n  header: { ...talentHeader(talentKey, tr, img), ...partialCond.header },\r\n  canShow: canShowTemplate(talentKey, partialCond.canShow),\r\n})\r\n\r\nconst canShowTalentsNodes: Partial<Record<TalentSheetElementKey, NumNode>> = {\r\n  \"passive1\": greaterEq(input.asc, 1, 1),\r\n  \"passive2\": greaterEq(input.asc, 4, 1),\r\n  \"constellation1\": greaterEq(input.constellation, 1, 1),\r\n  \"constellation2\": greaterEq(input.constellation, 2, 1),\r\n  \"constellation3\": greaterEq(input.constellation, 3, 1),\r\n  \"constellation4\": greaterEq(input.constellation, 4, 1),\r\n  \"constellation5\": greaterEq(input.constellation, 5, 1),\r\n  \"constellation6\": greaterEq(input.constellation, 6, 1),\r\n}\r\nfunction canShowTemplate(talentKey: TalentSheetElementKey, canShow: NumNode | undefined): NumNode | undefined {\r\n  if (!canShowTalentsNodes[talentKey]) {\r\n    return canShow\r\n  }\r\n  let compareVal\r\n  let val\r\n  if ([\"passive1\", \"passive2\"].includes(talentKey)) {\r\n    compareVal = input.asc\r\n    val = +talentKey.slice(-1) === 1 ? 1 : 4\r\n  } else {\r\n    compareVal = input.constellation\r\n    val = +talentKey.slice(-1)\r\n  }\r\n  // Try to reuse the base canShow node when possible for caching performance\r\n  return canShow\r\n    ? greaterEq(compareVal, val, canShow ? canShow : 1)\r\n    : canShowTalentsNodes[talentKey]\r\n}\r\n\r\ninterface ICharacterTemplate {\r\n  talentTemplate: (talentKey: TalentSheetElementKey, docSections?: DocumentSection[]) => TalentSheetElement\r\n  headerTemplate: (talentKey: TalentSheetElementKey, partialSection: DocumentSection) => DocumentSection\r\n  fieldsTemplate: (talentKey: TalentSheetElementKey, partialFields: IDocumentFields) => IDocumentFields\r\n  conditionalTemplate: (talentKey: TalentSheetElementKey, partialCond: DocumentConditionalBase) => DocumentConditional\r\n}\r\nexport const charTemplates = (cKey: CharacterKey, wKey: WeaponTypeKey, assets: Partial<Record<TalentSheetElementKey, string>>, travelerEle?: ElementKey): ICharacterTemplate => {\r\n  const [tr] = cKey === \"Traveler\"\r\n    ? [(key: string) => <Translate ns=\"char_Traveler_gen\" key18={`${travelerEle}.${key}`} />]\r\n    : trans(\"char\", cKey)\r\n  assets.auto = Assets.weaponTypes[wKey]\r\n  return {\r\n    talentTemplate: (talentKey: TalentSheetElementKey, docSections?: DocumentSection[]) => talentTemplate(talentKey, tr, assets[talentKey] ?? \"\", docSections),\r\n    headerTemplate: (talentKey: TalentSheetElementKey, partialSection: DocumentSection) => headerTemplate(talentKey, tr, assets[talentKey] ?? \"\", partialSection),\r\n    fieldsTemplate: (talentKey: TalentSheetElementKey, partialFields: IDocumentFields) => fieldsTemplate(talentKey, partialFields),\r\n    conditionalTemplate: (talentKey: TalentSheetElementKey, partialCond: DocumentConditionalBase) => conditionalTemplate(talentKey, partialCond, tr, assets[talentKey] ?? \"\")\r\n  }\r\n}\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { allEleEnemyResKeys } from \"../KeyMap\"\r\nimport { allArtifactSets, allElementsWithPhy, allRegions, allSlotKeys } from \"../Types/consts\"\r\nimport { crawlObject, deepClone, objectKeyMap, objectKeyValueMap } from \"../Util/Util\"\r\nimport { Data, Info, NumNode, ReadNode, StrNode } from \"./type\"\r\nimport { constant, equalStr, frac, lookup, max, min, naught, one, percent, prod, read, res, setReadNodeKeys, stringRead, sum, todo } from \"./utils\"\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nconst allElements = allElementsWithPhy\r\nconst allTalents = [\"auto\", \"skill\", \"burst\"] as const\r\nconst allMoves = [\"normal\", \"charged\", \"plunging\", \"skill\", \"burst\", \"elemental\"] as const\r\nconst allArtModStats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"heal_\"] as const\r\nconst allTransformative = [\"overloaded\", \"shattered\", \"electrocharged\", \"superconduct\", \"swirl\"] as const\r\nconst allAmplifying = [\"vaporize\", \"melt\"] as const\r\nconst allMisc = [\r\n  \"stamina\", \"staminaDec_\", \"staminaSprintDec_\", \"staminaGlidingDec_\", \"staminaChargedDec_\",\r\n  \"incHeal_\", \"shield_\", \"cdRed_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\", \"dmgRed_\", \"healInc\"\r\n] as const\r\n\r\nconst allModStats = [\r\n  ...allArtModStats,\r\n  ...([\"all\", \"burning\", ...allTransformative, ...allAmplifying, ...allMoves] as const).map(x => `${x}_dmg_` as const),\r\n] as const\r\nconst allNonModStats = [\r\n  ...allElements.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_res_` as const]),\r\n  ...allMoves.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_critRate_` as const]),\r\n  \"all_dmgInc\" as const,\r\n  ...allEleEnemyResKeys,\r\n  \"enemyDefRed_\" as const,\r\n  ...allMisc,\r\n] as const\r\n\r\nexport const allInputPremodKeys = [...allModStats, ...allNonModStats] as const\r\n\r\nexport type InputPremodKey = typeof allInputPremodKeys[number]\r\n\r\nconst talent = objectKeyMap(allTalents, _ => read())\r\nconst allModStatNodes = objectKeyMap(allModStats, key => read(undefined, { key }))\r\nconst allNonModStatNodes = objectKeyMap(allNonModStats, key => read(undefined, { key }))\r\n\r\nfor (const ele of allElements) {\r\n  allNonModStatNodes[`${ele}_res_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_enemyRes_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_critDMG_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmgInc`].info!.variant = ele\r\n  allModStatNodes[`${ele}_dmg_`].info!.variant = ele\r\n}\r\nfor (const reaction of [...allTransformative, ...allAmplifying]) {\r\n  allModStatNodes[`${reaction}_dmg_`].info!.variant = reaction\r\n}\r\n\r\nfunction withDefaultInfo<T>(info: Info, value: T): T {\r\n  value = deepClone(value)\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => x.info = { ...info, ...x.info, })\r\n  return value\r\n}\r\nfunction markAccu<T>(accu: ReadNode<number>[\"accu\"], value: T): void {\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => {\r\n    if (x.operation === \"read\" && x.type === \"number\") x.accu = accu\r\n  })\r\n}\r\n\r\n/** All read nodes */\r\nconst input = setReadNodeKeys(deepClone({\r\n  activeCharKey: stringRead(),\r\n  charKey: stringRead(), charEle: stringRead(), weaponType: stringRead(),\r\n  lvl: read(undefined, { key: \"level\", prefix: \"char\" }), constellation: read(), asc: read(), special: read(),\r\n\r\n  infusion: {\r\n    overridableSelf: stringRead(\"small\"),\r\n    nonOverridableSelf: stringRead(\"small\"),\r\n    team: stringRead(\"small\"),\r\n  },\r\n\r\n  base: objectKeyMap(['atk', 'hp', 'def'], key => read(\"add\", { key })),\r\n  customBonus: withDefaultInfo({ prefix: \"custom\", pivot }, {\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n  }),\r\n  bonus: { ...talent },\r\n  premod: { ...talent, ...allModStatNodes, ...allNonModStatNodes },\r\n  total: withDefaultInfo({ prefix: \"total\", pivot }, {\r\n    ...talent, ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, read()]),\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n    /** Total Crit Rate capped to [0%, 100%] */\r\n    cappedCritRate: read(undefined, { key: \"critRate_\" }),\r\n  }),\r\n\r\n  art: withDefaultInfo({ prefix: \"art\", asConst }, {\r\n    ...objectKeyMap(allArtModStats, key => allModStatNodes[key]),\r\n    ...objectKeyMap(allSlotKeys, _ => ({ id: stringRead(), set: stringRead() })),\r\n  }),\r\n  artSet: objectKeyMap(allArtifactSets, set => read(\"add\", { key: set })),\r\n\r\n  weapon: withDefaultInfo({ prefix: \"weapon\", asConst }, {\r\n    id: stringRead(),\r\n    key: stringRead(), type: stringRead(),\r\n\r\n    lvl: read(), asc: read(), refinement: read(), refineIndex: read(),\r\n    main: read(), sub: read(), sub2: read(),\r\n  }),\r\n\r\n  enemy: {\r\n    def: read(\"add\", { key: \"enemyDef_multi\", pivot }),\r\n    ...objectKeyMap(allElements.map(ele => `${ele}_resMulti` as const), _ => read()),\r\n\r\n    level: read(undefined, { key: \"enemyLevel\" }),\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_res_`, read(undefined, { prefix: \"base\", key: `${ele}_enemyRes_`, variant: ele })]),\r\n    defRed: read(undefined),\r\n    defIgn: read(\"add\", { key: \"enemyDefIgn_\", pivot }),\r\n  },\r\n\r\n  hit: {\r\n    ele: stringRead(), reaction: stringRead(), move: stringRead(), hitMode: stringRead(),\r\n    base: read(\"add\", { key: \"base\" }),\r\n\r\n    dmgBonus: read(\"add\", { key: \"dmg_\", pivot }),\r\n    dmgInc: read(\"add\", { key: \"dmgInc\", pivot }),\r\n    dmg: read(),\r\n  },\r\n}))\r\n\r\nconst { base, bonus, customBonus, premod, total, art, hit, enemy } = input\r\n\r\n// Adjust `info` for printing\r\nmarkAccu('add', {\r\n  bonus, customBonus, premod, art,\r\n  total: objectKeyMap(allModStats, stat => total[stat]),\r\n})\r\nbonus.auto.info = { key: \"autoBoost\" }\r\nbonus.skill.info = { key: \"skillBoost\" }\r\nbonus.burst.info = { key: \"burstBoost\" }\r\nbase.atk.info = { key: \"atk\", prefix: \"base\", pivot }\r\ndelete total.critRate_.info!.pivot\r\ntotal.critRate_.info!.prefix = \"uncapped\"\r\n\r\n// Nodes that are not used anywhere else but `common` below\r\n\r\n/** Base Amplifying Bonus */\r\nconst baseAmpBonus = sum(one, prod(25 / 9, frac(total.eleMas, 1400)))\r\n/** Effective reaction, taking into account the hit's element */\r\nexport const effectiveReaction = lookup(hit.ele, {\r\n  pyro: lookup(hit.reaction, { pyro_vaporize: constant(\"vaporize\"), pyro_melt: constant(\"melt\") }, undefined),\r\n  hydro: equalStr(hit.reaction, \"hydro_vaporize\", \"vaporize\"),\r\n  cryo: equalStr(hit.reaction, \"cryo_melt\", \"melt\"),\r\n}, undefined)\r\n\r\nconst common: Data = {\r\n  premod: {\r\n    ...objectKeyMap(allTalents, talent => bonus[talent]),\r\n    ...objectKeyMap(allNonModStats, key => {\r\n      const operands: NumNode[] = []\r\n\r\n      if (key.endsWith('_enemyRes_'))\r\n        operands.push(enemy[key.replace(/_enemyRes_$/, \"_res_\")])\r\n\r\n      const list = [...operands, customBonus[key]].filter(x => x)\r\n      return list.length === 1 ? list[0] : sum(...list)\r\n    }),\r\n    ...objectKeyMap(allModStats, key => {\r\n      const operands: NumNode[] = []\r\n      switch (key) {\r\n        case \"atk\": case \"def\": case \"hp\":\r\n          operands.push(prod(base[key], sum(one, premod[`${key}_`])))\r\n          break\r\n        case \"critRate_\":\r\n          operands.push(percent(0.05, { key, prefix: \"default\" }),\r\n            lookup(hit.move, objectKeyMap(allMoves, move => premod[`${move}_critRate_`]), 0))\r\n          break\r\n        case \"critDMG_\":\r\n          operands.push(percent(0.5, { key, prefix: \"default\" }),\r\n            lookup(hit.ele, objectKeyMap(allElements, ele => premod[`${ele}_critDMG_`]), 0),\r\n            lookup(hit.move, objectKeyMap(allMoves, ele => premod[`${ele}_critDMG_`]), 0))\r\n          break\r\n        case \"enerRech_\":\r\n          operands.push(percent(1, { key, prefix: \"default\" }))\r\n          break\r\n      }\r\n      const list = [...operands, art[key], customBonus[key]].filter(x => x)\r\n      return list.length === 1 ? list[0] : sum(...list)\r\n    }),\r\n  },\r\n  total: {\r\n    ...objectKeyMap(allTalents, talent => premod[talent]),\r\n    ...objectKeyMap(allModStats, key => premod[key]),\r\n    ...objectKeyMap(allNonModStats, key => premod[key]),\r\n    ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, sum(total[talent], -1)]),\r\n    stamina: sum(constant(100, { key: \"stamina\", prefix: \"default\" }), customBonus.stamina),\r\n\r\n    cappedCritRate: max(min(total.critRate_, one), naught),\r\n  },\r\n\r\n  hit: {\r\n    dmgBonus: sum(\r\n      total.all_dmg_,\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmg_`]), naught),\r\n      lookup(hit.ele, objectKeyMap(allElements, ele => total[`${ele}_dmg_`]), naught)\r\n    ),\r\n    dmgInc: sum(\r\n      total.all_dmgInc,\r\n      lookup(hit.ele, objectKeyMap(allElements, element => total[`${element}_dmgInc`]), NaN),\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmgInc`]), NaN)\r\n    ),\r\n    dmg: prod(\r\n      sum(hit.base, hit.dmgInc),\r\n      sum(one, hit.dmgBonus),\r\n      lookup(hit.hitMode, {\r\n        hit: one,\r\n        critHit: sum(one, total.critDMG_),\r\n        avgHit: sum(one, prod(total.cappedCritRate, total.critDMG_)),\r\n      }, NaN),\r\n      enemy.def,\r\n      lookup(hit.ele,\r\n        objectKeyMap(allElements, ele => enemy[`${ele}_resMulti` as const]), NaN),\r\n      lookup(effectiveReaction, {\r\n        melt: lookup(hit.ele, {\r\n          pyro: prod(2, sum(baseAmpBonus, total.melt_dmg_)),\r\n          cryo: prod(1.5, sum(baseAmpBonus, total.melt_dmg_)),\r\n        }, 1, { key: \"melt_dmg_\" }),\r\n        vaporize: lookup(hit.ele, {\r\n          hydro: prod(2, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n          pyro: prod(1.5, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n        }, 1, { key: \"vaporize_dmg_\" }),\r\n      }, 1),\r\n    ),\r\n  },\r\n\r\n  enemy: {\r\n    // TODO: shred cap of 90%\r\n    def: frac(sum(input.lvl, 100), prod(sum(enemy.level, 100), sum(one, prod(-1, enemy.defRed)), sum(one, prod(-1, enemy.defIgn)))),\r\n    defRed: total.enemyDefRed_,\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_resMulti`, res(total[`${ele}_enemyRes_`])]),\r\n  },\r\n}\r\n\r\nconst target = setReadNodeKeys(deepClone(input), [\"target\"])\r\nconst tally = {\r\n  ...setReadNodeKeys(objectKeyMap([...allElements, ...allRegions], _ => read(\"add\")), [\"tally\"]),\r\n  ele: todo,\r\n}\r\ntally.ele = sum(...allElements.map(ele => min(tally[ele], 1)))\r\n\r\n/**\r\n * List of `input` nodes, rearranged to conform to the needs of the\r\n * UI code. This is a separate list so that the evolution of the UIs\r\n * does not rely on the structure of `input`. So the UI code can rearrange\r\n * nodes as it sees fit without requiring updates to data sheets, which\r\n * pertains ~90% of all `input`-related code, and so are very sensitive\r\n * to any changes to `input`. For zero overhead, use the nodes directly\r\n * from `input` instead of a copy.\r\n */\r\nconst uiInput = input\r\n\r\nexport {\r\n  input, uiInput, common, customBonus,\r\n\r\n  target, tally,\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\r\n\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype Any = Num | Str\r\n\r\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\r\nexport const one = percent(1), naught = percent(0)\r\n\r\nexport function constant(value: number, info?: Info): NumNode\r\nexport function constant(value: string | undefined, info?: Info): StrNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\r\n  return { operation: \"const\", operands: [], value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): NumNode {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { key: \"_\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\r\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\r\n  return { operation: \"lookup\", operands, table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Num[]): NumNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Num[]): NumNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Num[]): NumNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Num[]): NumNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Num, c: Num): NumNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Num): NumNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<NumNode | StrNode, StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 != v2 ? pass : `undefined` */\r\nexport function unequalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function unequalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function unequalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<NumNode | StrNode, StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(undefined), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\r\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\r\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: Any[]): AnyNode[]\r\nfunction intoOps(values: Any[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: Num | Str): NumNode | StrNode\r\nfunction intoV(value: Any): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\n\r\ntype _NodeList = {\r\n  [key: string]: NodeList\r\n} & {\r\n  operation?: never\r\n}\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n\r\n/**\r\n * `v1` === `v2` ? `match` : `unmatch`\r\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\r\n */\r\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n/**\r\n *\r\n * @param promiseFunc\r\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\r\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\r\n * @returns\r\n */\r\nexport default function usePromise<T>(promiseFunc: () => Promise<T> | undefined, dependencies: any[], useOld = true): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    promiseFunc()?.then(res => pending && setRes(res), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      !useOld && setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res\r\n}\r\n"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","DropdownButton","title","children","id","props","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","ImgIcon","name","slot","size","display","verticalAlign","elementSvg","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","uncoloredEleIcons","icon","fixedWidth","coloredEleIcon","objectKeyMap","Object","keys","key","color","sx","lineHeight","StatIcon","hp_","faHp","hp","atk_","faAtk","atk","def_","faDef","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faCritDmg","enerRech_","faEnergyRecharge","incHeal_","faHealingAdd","heal_","faHealingBonus","cdRed_","faCdReduction","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","characterSheets","then","imp","default","CharacterSheet","charSheet","data","sheet","isMelee","weaponTypeKey","getData","getTalent","eleKey","talent","talents","getTalentOfKey","talentKey","sheets","this","src","thumbImgSide","marginTop","marginLeft","cardImg","thumbImg","bannerImg","rarity","elementKey","constellationName","get","charKey","c","getLevelString","level","ascension","ascensionMaxLevel","talentHeader","tr","img","m","action","st","description","canShowTalentsNodes","greaterEq","input","canShowTemplate","canShow","includes","compareVal","val","slice","charTemplates","cKey","wKey","assets","travelerEle","ns","key18","trans","auto","Assets","talentTemplate","docSections","sections","text","headerTemplate","partialSection","header","fieldsTemplate","partialFields","conditionalTemplate","partialCond","strKey","values","sgt","condReadNode","path","customStringRead","cond","subKey","typeKey","allElements","pivot","allElementsWithPhy","allTalents","allMoves","allArtModStats","allTransformative","allAmplifying","allModStats","map","x","allNonModStats","allEleEnemyResKeys","allInputPremodKeys","_","read","allModStatNodes","allNonModStatNodes","info","variant","reaction","withDefaultInfo","value","deepClone","crawlObject","operation","accu","setReadNodeKeys","activeCharKey","stringRead","charEle","weaponType","lvl","prefix","constellation","asc","special","infusion","overridableSelf","nonOverridableSelf","team","base","customBonus","bonus","premod","total","objectKeyValueMap","cappedCritRate","art","asConst","allSlotKeys","set","artSet","allArtifactSets","weapon","type","refinement","refineIndex","sub","sub2","enemy","defRed","defIgn","hit","move","hitMode","dmgBonus","dmgInc","dmg","stat","skill","burst","baseAmpBonus","sum","one","prod","frac","effectiveReaction","lookup","pyro_vaporize","constant","pyro_melt","equalStr","common","operands","endsWith","push","replace","list","filter","length","percent","max","min","naught","all_dmg_","all_dmgInc","element","NaN","critHit","avgHit","melt","melt_dmg_","vaporize","vaporize_dmg_","enemyDefRed_","res","target","tally","allRegions","todo","uiInput","Number","MAX_VALUE","Infinity","infoMut","node","index","table","defaultV","intoV","intoOps","equal","v1","v2","pass","emptyOn","unequal","greaterEqStr","lessThan","nodeList","Error","resetData","reset","customRead","stringPrio","subscript","matchFull","match","unmatch","usePromise","promiseFunc","dependencies","useOld","setRes","useEffect","pending","console","error"],"sourceRoot":""}