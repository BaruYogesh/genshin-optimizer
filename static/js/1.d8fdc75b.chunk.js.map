{"version":3,"sources":["Components/CustomFormControl.tsx","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Util/UIUtil.ts","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Components/DocumentDisplay.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Components/WIPComponent.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","className","type","e","target","onBlur","onKeyDown","key","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","valueString","unit","Math","round","toFixed","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","faQuestionCircle","style","cursor","variant","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","maximumEfficiency","substatsValidation","numStars","level","mainStatKey","substats","lock","currentEfficiency","mainStatLevel","max","min","mainStatVal","mainStatValue","Stat","getStatUnit","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","slotNames","Body","Title","stars","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","opacity","valid","Footer","Toggle","size","Menu","Divider","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","weaponSheet","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","DocumentDisplay","document","build","section","talentText","evalIfFunc","fields","ListGroup","conditional","ConditionalDisplay","CharacterOverviewPane","constellation","editLevel","setEditLevel","elementKey","weaponTypeKey","getStatValueWithOverride","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","InputGroup","Prepend","Text","val","statKey","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","constellationName","Array","keys","getTalent","img","roundedCircle","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","statsToFields","WeaponStatsEditorCardWeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","DropdownButton","reverse","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","editing","SetEditing","showDescription","setShowDescription","conditionalValues","substatKey","Weapon","getWeaponSubstatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubstatVal","weaponPassiveName","passiveName","weaponBonusStats","conditionals","Conditional","faQuoteLeft","getLevelName","LevelNameData","refineIndex","StatInput","prependEle","faGavel","percent","onValueChange","defaultValue","StatIconEle","passiveDescription","atk","stateKey","fieldClassName","description","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","hasOverride","StatDisplay","getStatNameRaw","xl","CharacterTalentPane","props","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","fixedUnit","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","buildSettings","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","update","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","hasTalentPage","DamageOptionsAndCalculation","CharSelectDropdown","ButtonGroup","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","WIPComponent","Badge","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","ConditionalSelector","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","maxStack","badge","whiteSpace","condial","v","stack","faCheckSquare","faSquare","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionKey","sectionValues","getDisplayHeading","JSON","stringify","DisplayStatDiff","label","oldVal","oldText","diffText","isArray","Formula","invalid","labelVariant","restProps","pointerEvents","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","eleKey","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.d8fdc75b.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => field.canShow(stats), [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { IArtifact, Substat } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number }\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = art.maximumEfficiency !== undefined\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{valueString(efficiency, \"eff\")}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => Character.getDisplayStatKeys(stats, characterSheet), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && Character.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  document: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ document, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  return <div>{document?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport { allElements } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport { IConditionals } from \"../../Types/IConditional\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport StatInput from \"../StatInput\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { characterKey, constellation }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const elementKey = characterSheet.elementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={characterSheet.star} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl placeholder={undefined} onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90), characterSheet, weaponSheet })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey), characterSheet, weaponSheet })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip id=\"artifact-override-level\">Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{characterSheet.constellationName}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={characterSheet.getTalent(`constellation${i + 1}`)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats = {} }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\n\r\nfunction WeaponStatsEditorCardWeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  if (!weaponSheets) return null\r\n\r\n  return <DropdownButton title={weaponSheet.name}>\r\n    {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n      <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n      {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === star).map(([key, weaponObj]: any) =>\r\n        <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n          {weaponObj.name}\r\n        </Dropdown.Item>\r\n      )}\r\n      {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n    </React.Fragment>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const substatKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key] as IConditionals\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <WeaponStatsEditorCardWeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).reverse().map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {substatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><span className=\"mr-2\">{StatIconEle(substatKey)}</span>{Stat.getStatName(substatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(substatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{weaponSheet.name} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {/* TODO: remove conditionals display here in lieu of document once sheets are converted*/}\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n\r\n            {document ? <DocumentDisplay {...{ document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{weaponSheet.description}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key, characterSheet, weaponSheet })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value, characterSheet, weaponSheet })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatKey\"), characterSheet, weaponSheet })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatVal\"), characterSheet, weaponSheet })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined\r\n                  }\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalent(\"sprint\") && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalent(tKey)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = characterSheet.elementKey\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { constellation, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const document = characterSheet.getTalent(talentKey)?.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={characterSheet.getTalent(talentKey)?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{characterSheet.getTalent(talentKey)?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {document ? <DocumentDisplay {...{ document, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])),\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n  buildSettings: {}//use to reset when changing to a new character, so it would not copy from old character.\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: string,\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  useEffect(() => {\r\n    if (weaponSheets && characterSheet && !character.weapon.key) {\r\n      character.weapon.key = Object.keys(WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey))[0] ?? \"\"\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets, character.weapon])\r\n\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key))\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    (newBuild as any).hitMode = character.hitMode;\r\n    (newBuild as any).reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet?.hasTalentPage && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} levelKey={levelKey} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {process.env.NODE_ENV !== \"development\" && !characterSheet.hasTalentPage ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled><h5 className=\"mb-0\">Talents</h5> <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  levelKey: string\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, editable, levelKey, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>{editable ? <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle as={Button}>\r\n        {HeaderIconDisplay}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu as={CustomMenu}>\r\n        {[...allCharacterKeys].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <DropdownButton as={ButtonGroup} disabled={!characterSheet} title={\r\n      <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n    }>\r\n      <Dropdown.ItemText>\r\n        <span>Select Base Stat Template</span>\r\n      </Dropdown.ItemText>\r\n      {Character.getlevelKeys().reverse().map(lvlKey =>\r\n        <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n          <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n  </ButtonGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character, characterSheet, weaponSheet)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip id=\"wip\">Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild as ICalculatedStats\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats.conditionalValues, characterDispatch])\r\n\r\n  if (!canShow) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey))\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined)\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey, invalid as any)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterATK\") + Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ characterSheet, character: { characterKey, reactionMode = \"none\", infusionAura }, characterDispatch, className }: ReactionToggleProps) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = characterSheet.elementKey\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, weaponSheet, build }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => Character.getDisplayStatKeys(build, characterSheet), [build, characterSheet])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys))\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={undefined}\r\n                      disabled={undefined}\r\n                      percent={undefined}\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}