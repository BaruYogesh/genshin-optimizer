{"version":3,"sources":["Assets/icon_bow.png","Assets/Assets.ts","Assets/icon_catalyst.png","Assets/icon_claymore.png","Assets/icon_polearm.png","Assets/icon_sword.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Components/Character/LocationName.tsx","Components/ToggleButton/WeaponToggle.tsx","Util/SortByFilters.ts","Components/SortByButton.tsx","Artifact/RollProbability.ts","Artifact/PercentBadge.tsx","Artifact/ArtifactCard.tsx","Components/Weapon/WeaponSelectionModal.tsx","Weapon/WeaponCard.tsx","Components/Character/CharacterSelectionModal.tsx","Util/CharacterSort.ts","Components/SolidColoredToggleButton.tsx","Components/ToggleButton/ElementToggle.tsx","Weapon/WeaponStatsCard.tsx","Weapon/WeaponDisplayCard.tsx","Components/FormulaCalcCard.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx"],"names":["Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","LocationName","location","t","useTranslation","characterSheet","usePromise","CharacterSheet","get","component","name","nameWIthIcon","sx","verticalAlign","WeaponToggle","value","onChange","props","cb","useCallback","e","newVal","exclusive","allWeaponTypeKeys","map","wt","src","size","sortFunction","sortby","ascending","configs","Sort","a","b","config","aV","getValue","bV","localeCompare","filterOption","diff","tieBreaker","filterFunction","filterOptions","filterConfigs","obj","Object","entries","every","optionKey","optionVal","SortByButton","sortKeys","onChangeAsc","title","i18nKey","key","selected","disabled","onClick","startIcon","icon","faSortAmountDownAlt","faSortAmountUp","className","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","length","i","layeredAssignment","3","4","6","cnr","Array","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","probability","artifact","_target","rarity","NaN","level","substats","target","required","Set","keys","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","m","M","rolls","extra","pExtra","_remaining","remaining","parseInt","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","path","currentCount","sum","calculatePFillerRolls","values","PercentBadge","valid","clamp","floor","toFixed","badgeColor","text","color","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","database","useContext","DatabaseContext","useState","undefined","databaseArtifact","updateDatabaseArtifact","useEffect","followArt","sheet","ArtifactSheet","_getArt","setKey","editable","localDatabase","art","id","lock","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","placement","faInfoCircle","setEffects","setDescTooltip","setNumKey","variant","setNum","setEffectDesc","fallback","width","height","minHeight","display","flexDirection","pt","pb","pr","alignItems","label","pl","flexGrow","updateArt","container","flexWrap","item","getStatName","stars","colored","maxWidth","mt","mb","alignSelf","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","mr","opacity","my","xs","flexShrink","inventory","charKey","setArtLocation","faEdit","arrow","faBan","faChartLine","faTrashAlt","WeaponSelectionModal","show","onHide","onSelect","filter","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","getAll","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","sort","open","onClose","py","spacing","weaponKey","weaponSheet","lg","md","img","px","large","WeaponCard","weaponId","canEquip","databaseWeapon","updateDatabaseWeapon","followWeapon","weapon","cs","weaponTypeKey","actionWrapperFunc","children","equipOnChar","setWeaponLocation","ascension","refinement","weaponMainVal","getMainStatValue","fixedUnit","weaponSubKey","getSubStatKey","weaponSubVal","getSubStatValue","statMap","passiveName","imgAwaken","condition","wrapper","avatar","fontSize","titleTypographyProps","action","updateWeapon","ascensionMaxLevel","alignContent","statKey","statVal","unit","StatIcon","noUnselect","defaultSortKeys","CharacterSelectionModal","newFirst","useMemo","sortBy","setsortBy","setascending","elementalFilter","setelementalFilter","setweaponFilter","characterSheets","sortConfigs","characterSortConfigs","characterFilterConfigs","characterKeyList","allCharacterKeys","cKey","_getChar","element","characterKey","CharacterBtn","character","equippedWeapon","_getWeapon","artifactSheets","stats","Character","calculateBuild","star","thumbImg","elementKey","getLevelString","constellation","tlvl","auto","skillBoost","skill","burstBoost","burst","characterSortKeys","new","ck","SolidColoredToggleButton","styled","ToggleButton","shouldForwardProp","prop","theme","baseColor","selectedColor","backgroundColor","palette","main","contrastText","dark","ElementToggle","ToggleButtonGroup","allElements","ele","Box","lineHeight","uncoloredEleIcons","WeaponStatsCard","statsVals","s","fields","statsToFields","CardDark","CardContent","Typography","FieldDisplay","field","WeaponDisplayCard","propWeaponId","charData","footer","useForceUpdate","databaseToken","onDatabaseUpdate","buildContextObj","buildContext","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","build","newBuild","equippedBuild","refineIndex","ws","initialWeaponFilter","showModal","setshowModal","CardLight","Grid","k","ButtonGroup","Button","DropdownButton","MenuItem","Divider","bgcolor","contentLight","CustomNumberInput","startAdornment","inputProps","textAlign","ambiguousLevel","milestoneLevels","lv","as","lvlstr","Lock","LockOpen","CloseButton","SwapBtn","onChangeId","substatKey","weaponDisplayMainVal","weaponDisplaySubVal","weaponPassiveName","weaponBonusStats","sections","document","gap","minWidth","borderRadius","description","process","SqBadge","gutterBottom","passiveDescription","Provider","compareBuild","setCompareBuild","DocumentDisplay","CharacterDropdownButton","setShow","close","clickHandler","weapons","dbWeapon","SwapHoriz","ModalWrapper","ImgIcon","sm","FormulaCalcCard","sheets","expanded","setexpanded","toggle","ExpandButton","expand","aria-expanded","aria-label","ExpandMore","Collapse","in","timeout","unmountOnExit","CalculationDisplay","displayStatKeys","getDisplayStatKeys","Skeleton","sectionKey","header","getFormulaTargetsDisplayHeading","characterEle","fieldIndex","isArray","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","Boolean","Accordion","AccordionSummary","expandIcon","printStat","AccordionDetails","subKey","formula","Formula","formulaField","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","CharacterArtifactPane","history","useHistory","statKeys","edit","artid","pathname","artToEditId","followAnyArt","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","objectFromKeyMap","allSlotKeys","StatDisplayComponent","statsDisplayKeys","SolidToggleButtonGroup","v","Card","p","warning","setToSlots","setNumKeyArr","SetEffectDisplay","CharacterOverviewPane","characterDispatch","useCharacterReducer","CardMedia","cardImg","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","padding","getTalentOfKey","constellationName","cursor","MainStatsCards","additionalKeys","editStatKeys","otherStatKeys","miscStatkeys","resetString","statBreakpoint","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","StatDisplayCard","content","columnSpacing","rowSpacing","StatDisplay","justifyContent","editContent","characterStatKeys","defVal","round","getBase","StatInput","placeholder","getStatNameRaw","bonusStats","defaultValue","percent","onValueChange","type","onReset","getStatNameWithPercent","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","onClickTitle","ReactionComponents","superconduct_hit","sKey","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","shattered_hit","information","BootstrapTooltip","faQuestionCircle","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talent","actionWrapeprFunc","CardActionArea","levelBoost","talentLvlKey","fullWidth","newTalentLevelKey","talentStats","getTalentStats","talentStatsFields","statsEle","talentSheet","ConditionalWrapper","TabPanel","other","role","hidden","aria-labelledby","CharacterDisplayCard","setCharacterKey","propNewBuild","tabName","initialCharacter","followChar","deepClone","tab","settab","onTab","CharSelectDropdown","Tabs","Tab","HeaderIconDisplay","contentDark","ThumbSide","thumbImgSide","ElementalData","talents","eleKey"],"mappings":"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","file":"static/js/7.c1a154b1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon_bow.7ceaa8e2.png\";","import bow from './icon_bow.png'\r\nimport catalyst from './icon_catalyst.png'\r\nimport claymore from './icon_claymore.png'\r\nimport polearm from './icon_polearm.png'\r\nimport sword from './icon_sword.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/icon_catalyst.db078b7b.png\";","export default __webpack_public_path__ + \"static/media/icon_claymore.63b1abb8.png\";","export default __webpack_public_path__ + \"static/media/icon_polearm.e5f4a2a1.png\";","export default __webpack_public_path__ + \"static/media/icon_sword.619c9c2d.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}","import { ToggleButton } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { allWeaponTypeKeys, WeaponTypeKey } from \"../../Types/consts\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport SolidToggleButtonGroup, { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\ntype WeaponToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: WeaponTypeKey | \"\") => void\r\n  value: WeaponTypeKey | \"\"\r\n}\r\nexport default function WeaponToggle({ value, onChange, ...props }: WeaponToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <SolidToggleButtonGroup exclusive onChange={cb} value={value || allWeaponTypeKeys} {...props}>\r\n    {allWeaponTypeKeys.map(wt => <ToggleButton key={wt} value={wt}>\r\n      <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} />\r\n    </ToggleButton>)}\r\n  </SolidToggleButtonGroup>\r\n}","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any](obj, optionVal))\r\n}","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from './Artifact'\r\nimport ArtifactMainStatsData from './artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n// \r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n * \r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n * \r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/** \r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n * \r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   * \r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   * \r\n   * Then\r\n   * \r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   * \r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   * \r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   * \r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n * \r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability'\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (string) => void,\r\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Partial<Record<SubstatKey, number>>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as ICachedArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact, database])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              {Stat.getStatName(mainStatKey)}\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          const numRolls = stat.rolls?.length ?? 0\r\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n          const efficiency = stat.efficiency ?? 0\r\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\r\n          const statName = Stat.getStatName(stat.key)\r\n          return (<Box key={i} sx={{ display: \"flex\" }}>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\r\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</Typography>\r\n            </Box>\r\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\r\n          </Box>)\r\n        })}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useEffect, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat from \"../Stat\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseWeapon, updateDatabaseWeapon] = useState(undefined as ICachedWeapon | undefined)\r\n  useEffect(() =>\r\n    weaponId ? database.followWeapon(weaponId, updateDatabaseWeapon) : undefined,\r\n    [weaponId, updateDatabaseWeapon, database])\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n  if (!weapon || !weaponSheet) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n\r\n\r\n  const weaponTypeKey = weaponSheet.weaponType\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statMap = [[\"weaponATK\", weaponMainVal]]\r\n  weaponPassiveName && statMap.push([weaponSubKey, weaponSubVal])\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {statMap.map(([statKey, statVal]) => {\r\n            let unit = Stat.getStatUnit(statKey)\r\n            return <Box key={statKey} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[statKey]} {Stat.getStatName(statKey)}</Typography>\r\n              <Typography>{statVal + unit}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\";\r\nimport { useContext, useMemo, useState } from \"react\";\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Character from '../../Character/Character';\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allCharacterKeys, CharacterKey, ElementKey, WeaponTypeKey } from \"../../Types/consts\";\r\nimport { characterFilterConfigs, characterSortConfigs } from \"../../Util/CharacterSort\";\r\nimport { filterFunction, sortFunction } from \"../../Util/SortByFilters\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport CardDark from \"../Card/CardDark\";\r\nimport CardLight from \"../Card/CardLight\";\r\nimport CloseButton from \"../CloseButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport ModalWrapper from \"../ModalWrapper\";\r\nimport SortByButton from \"../SortByButton\";\r\nimport SqBadge from \"../SqBadge\";\r\nimport { Stars } from \"../StarDisplay\";\r\nimport StatIcon from \"../StatIcon\";\r\nimport ElementToggle from \"../ToggleButton/ElementToggle\";\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\";\r\n\r\nconst defaultSortKeys = [\"level\", \"rarity\", \"name\"]\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  newFirst?: boolean\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true, newFirst = false }: CharacterSelectionModalProps) {\r\n  const sortKeys = useMemo(() => newFirst ? [\"new\", ...defaultSortKeys] : defaultSortKeys, [newFirst])\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(sortKeys[0])\r\n  const [ascending, setascending] = useState(false)\r\n  const [elementalFilter, setelementalFilter] = useState<ElementKey | \"\">(\"\")\r\n  const [weaponFilter, setweaponFilter] = useState<WeaponTypeKey | \"\">(\"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n\r\n  const sortConfigs = useMemo(() => characterSheets && characterSortConfigs(database, characterSheets), [database, characterSheets])\r\n  const filterConfigs = useMemo(() => characterSheets && characterFilterConfigs(characterSheets), [characterSheets])\r\n  const characterKeyList = useMemo(() => (characterSheets && sortConfigs && filterConfigs) ?\r\n    [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey]))\r\n      .filter(filterFunction({ element: elementalFilter, weaponType: weaponFilter }, filterConfigs))\r\n      .sort(sortFunction(sortBy, ascending, sortConfigs) as (a: CharacterKey, b: CharacterKey) => number) : [],\r\n    [database, characterSheets, filter, elementalFilter, weaponFilter, sortBy, ascending, sortConfigs, filterConfigs])\r\n\r\n  if (!characterSheets) return null\r\n  return <ModalWrapper open={show} onClose={onHide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1} >\r\n          <Grid item>\r\n            <WeaponToggle sx={{ height: \"100%\" }} onChange={setweaponFilter} value={weaponFilter} size=\"small\" />\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <ElementToggle sx={{ height: \"100%\" }} onChange={setelementalFilter} value={elementalFilter} size=\"small\" />\r\n          </Grid>\r\n\r\n          <Grid item flexGrow={1} />\r\n\r\n          <Grid item >\r\n            <SortByButton sx={{ height: \"100%\" }}\r\n              sortKeys={sortKeys} value={sortBy} onChange={setsortBy as any}\r\n              ascending={ascending} onChangeAsc={setascending} />\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {characterKeyList.map(characterKey => <Grid item key={characterKey} xs={6} md={4} lg={3} >\r\n          <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />\r\n        </Grid>)}\r\n      </Grid></CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weapon = character?.equippedWeapon ? database._getWeapon(character.equippedWeapon) : undefined\r\n  const weaponSheet = usePromise(weapon ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets, database])\r\n  if (!characterSheet) return null\r\n  const rarity = characterSheet.star\r\n  return <CardActionArea onClick={onClick} >\r\n    <CardLight sx={{ display: \"flex\", alignItems: \"center\" }}  >\r\n      <Box component=\"img\" src={characterSheet.thumbImg} sx={{ width: 130, height: \"auto\" }} className={`grad-${rarity}star`} />\r\n      <Box sx={{ pl: 1 }}>\r\n        <Typography><strong>{characterSheet.name}</strong></Typography>\r\n        {stats && character ? <>\r\n          <Typography variant=\"h6\"> {characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />{` `}{Character.getLevelString(character)}</Typography>\r\n          <Typography >\r\n            <SqBadge color=\"success\">{`C${character.constellation}`}</SqBadge>{` `}\r\n            <SqBadge color=\"secondary\"><strong >{stats.tlvl.auto + 1}</strong></SqBadge>{` `}\r\n            <SqBadge color={stats.skillBoost ? \"info\" : \"secondary\"}><strong >{stats.tlvl.skill + 1}</strong></SqBadge>{` `}\r\n            <SqBadge color={stats.burstBoost ? \"info\" : \"secondary\"}><strong >{stats.tlvl.burst + 1}</strong></SqBadge>\r\n          </Typography>\r\n        </> : <>\r\n          <Typography variant=\"h6\"><SqBadge color=\"primary\">NEW</SqBadge></Typography>\r\n        </>}\r\n        <small><Stars stars={characterSheet.star} colored /></small>\r\n      </Box>\r\n    </CardLight>\r\n  </CardActionArea >\r\n}","import CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"./SortByFilters\";\r\nexport const characterSortKeys = [\"level\", \"rarity\", \"name\"]\r\nexport type CharacterSortKey = typeof characterSortKeys[number]\r\n\r\nexport function characterSortConfigs(database: ArtCharDatabase, characterSheets: Record<CharacterKey, CharacterSheet>): SortConfigs<CharacterSortKey, CharacterKey> {\r\n  return {\r\n    new: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey) ? 0 : 1,\r\n      tieBreaker: \"name\"\r\n    },\r\n    name: {\r\n      getValue: (ck) => ck,\r\n    },\r\n    level: {\r\n      getValue: (ck) => database._getChar(ck as CharacterKey)?.level ?? 0,\r\n      tieBreaker: \"rarity\"\r\n    },\r\n    rarity: {\r\n      getValue: (ck) => characterSheets?.[ck]?.star,\r\n      tieBreaker: \"level\"\r\n    }\r\n  }\r\n}\r\n\r\nexport function characterFilterConfigs(characterSheets: Record<CharacterKey, CharacterSheet>): FilterConfigs<\"element\" | \"weaponType\", CharacterKey> {\r\n  return {\r\n    element: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.elementKey),\r\n    weaponType: (ck, filter) => !filter || (filter === characterSheets?.[ck]?.weaponTypeKey),\r\n  }\r\n}","import { ButtonProps, ToggleButton, ToggleButtonProps, styled } from \"@mui/material\";\r\n\r\ntype SolidColoredToggleButtonPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\nexport type SolidColoredToggleButtonProps = SolidColoredToggleButtonPartial & ToggleButtonProps\r\n\r\n\r\nconst SolidColoredToggleButton = styled(ToggleButton, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\"\r\n})<SolidColoredToggleButtonPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '&': {\r\n    backgroundColor: theme.palette[baseColor].main,\r\n    color: theme.palette[baseColor].contrastText,\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected': {\r\n    backgroundColor: theme.palette[selectedColor].main,\r\n    color: theme.palette[selectedColor].contrastText,\r\n  },\r\n  '&.Mui-selected:hover': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n  '&.Mui-disabled': {\r\n    backgroundColor: theme.palette[baseColor].dark,\r\n  },\r\n  '&.Mui-selected.Mui-disabled': {\r\n    backgroundColor: theme.palette[selectedColor].dark,\r\n  },\r\n}));\r\n\r\nexport default SolidColoredToggleButton","import { Box, ToggleButtonGroup } from \"@mui/material\";\r\nimport { useCallback } from \"react\";\r\nimport { allElements, ElementKey } from \"../../Types/consts\";\r\nimport SolidColoredToggleButton from \"../SolidColoredToggleButton\";\r\nimport { SolidToggleButtonGroupProps } from \"../SolidToggleButtonGroup\";\r\nimport { uncoloredEleIcons } from \"../StatIcon\";\r\ntype ElementToggleProps = Omit<SolidToggleButtonGroupProps, \"onChange\" | \"value\"> & {\r\n  onChange: (value: ElementKey | \"\") => void\r\n  value: ElementKey | \"\"\r\n}\r\nexport default function ElementToggle({ value, onChange, ...props }: ElementToggleProps) {\r\n  const cb = useCallback((e, newVal) => onChange(newVal || \"\"), [onChange])\r\n  return <ToggleButtonGroup exclusive onChange={cb} value={value || allElements} {...props}>\r\n    {allElements.map(ele => <SolidColoredToggleButton key={ele} value={ele} selectedColor={ele} >\r\n      <Box sx={{ fontSize: \"2em\", lineHeight: 1 }}>{uncoloredEleIcons[ele]}</Box>\r\n    </SolidColoredToggleButton>)}\r\n  </ToggleButtonGroup>\r\n}\r\n","import { CardContent, Typography } from \"@mui/material\"\r\nimport React from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../Components/FieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nexport default function WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals) as string[]).filter(s => s !== \"modifiers\").length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <CardDark sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Typography>{title}</Typography>\r\n    </CardContent>\r\n    <FieldDisplayList>\r\n      {fields.map((field, i) => <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n  </CardDark>\r\n}","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\r\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport useForceUpdate from \"../ReactHooks/useForceUpdate\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\nimport WeaponStatsCard from \"./WeaponStatsCard\"\r\n\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  charData?: {\r\n    character: ICachedCharacter,\r\n    characterSheet: CharacterSheet,\r\n    equippedBuild?: ICalculatedStats\r\n    newBuild?: ICalculatedStats\r\n    characterDispatch: (any) => void\r\n  }\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  charData,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  // Use databaseToken anywhere `database._get*` is used\r\n  // Use onDatabaseUpdate when `following` database entries\r\n  const [databaseToken, onDatabaseUpdate] = useForceUpdate()\r\n\r\n  const buildContextObj = useContext(buildContext)\r\n  const weapon = useMemo(() =>\r\n    databaseToken && database._getWeapon(propWeaponId!)!,\r\n    [propWeaponId, databaseToken, database])\r\n  const { key, level, refinement, ascension, lock } = weapon\r\n  const { location = \"\", id } = weapon as Partial<ICachedWeapon>\r\n  const weaponSheet: WeaponSheet | undefined = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  useEffect(() =>\r\n    propWeaponId ? database.followWeapon(propWeaponId, onDatabaseUpdate) : undefined,\r\n    [propWeaponId, onDatabaseUpdate, database])\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const build = { ...(charData ? (charData.newBuild ?? charData.equippedBuild) : { weapon: { refineIndex: refinement - 1, level, ascension } }) } as any\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n                <DropdownButton title={\"Select Level\"} >\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        {!!charData && database === localDatabase && <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, charData.character.key)} />\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {(() => {\r\n        if (!weaponSheet) return null\r\n        const substatKey = weaponSheet.getSubStatKey()\r\n        const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n        const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n        const weaponPassiveName = weaponSheet.passiveName\r\n        const weaponBonusStats = weaponSheet.stats(build)\r\n        const sections = weaponSheet.document\r\n        return <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\r\n          <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\r\n            <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n            <Typography><small>{weaponSheet.description}</small></Typography>\r\n          </Box>\r\n          <Box sx={{ mb: -1 }} flexGrow={1} >\r\n            <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n            <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n            <Typography variant=\"subtitle1\">{weaponPassiveName}</Typography>\r\n            <Typography gutterBottom>{weaponPassiveName && weaponSheet.passiveDescription(build)}</Typography>\r\n            {build && <buildContext.Provider value={charData ? buildContextObj : { equippedBuild: build, newBuild: undefined, compareBuild: false, setCompareBuild: undefined }}>\r\n              <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n              <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            </buildContext.Provider>}\r\n            {charData && sections ? (() => {\r\n              const { equippedBuild, newBuild } = charData\r\n              const characterKey = (newBuild ? newBuild : equippedBuild)?.characterKey as CharacterKey | undefined\r\n              return !!characterKey && < DocumentDisplay  {...{ sections, equippedBuild, newBuild, characterKey }} />\r\n            })() : null}\r\n          </Box>\r\n        </Box>\r\n      })()}\r\n    </CardContent>\r\n    {footer && id && <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n        </Grid>\r\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n      </Grid>\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}","import { ExpandMore } from \"@mui/icons-material\"\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../Character/CharacterUtil\"\r\nimport Formula from \"../Formula\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat, { FormulaDisplay } from \"../Stat\"\r\nimport { GetDependencies } from \"../StatDependency\"\r\nimport { ArtifactSetKey } from \"../Types/consts\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CardLight from \"./Card/CardLight\"\r\nimport ColorText from \"./ColoredText\"\r\nimport ExpandButton from \"./ExpandButton\"\r\n\r\nexport default function FormulaCalcCard({ sheets }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n}) {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Formulas {\"&\"} Calculations</Typography>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay sheets={sheets} build={build} />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <CardDark key={sectionKey} sx={{ mb: 1 }}>\r\n        <CardContent sx={{ pb: 1 }}>\r\n          <Typography variant=\"h6\">{header}</Typography>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          {fields.map((field, fieldIndex) => {\r\n            if (Array.isArray(field))\r\n              return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} />\r\n            else if (typeof field === \"string\") {//simple statKey field\r\n              const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n              return Boolean(subFormulaKeys.length) && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={fieldIndex}>\r\n                <AccordionSummary expandIcon={<ExpandMore />}>\r\n                  <Typography>{Stat.printStat(field, build)}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  {subFormulaKeys.map(subKey =>\r\n                    <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            }\r\n            return null\r\n          })}\r\n        </CardContent>\r\n      </CardDark>\r\n    })}\r\n  </Suspense>\r\n}\r\n\r\nfunction FormulaCalculationField({ fieldKeys, build }: { fieldKeys: string[], build: ICalculatedStats }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Accordion sx={{ bgcolor: \"contentLight.main\" }}>\r\n    <AccordionSummary expandIcon={<ExpandMore />}>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}{fieldUnit}</ColorText></Typography>\r\n    </AccordionSummary>\r\n    <AccordionDetails>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}</ColorText> = <small>{fieldFormulaText}</small></Typography>\r\n      {subFormulaKeys.map(subKey =>\r\n        <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n      )}\r\n    </AccordionDetails>\r\n  </Accordion>\r\n}","import { Button, Card, CardContent, Divider, Grid, ToggleButton, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { buildContext } from '../../Build/Build';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport SolidToggleButtonGroup from '../../Components/SolidToggleButtonGroup';\r\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { ICachedCharacter } from '../../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey } from '../../Types/consts';\r\nimport { objectFromKeyMap } from '../../Util/Util';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICachedCharacter,\r\n}\r\nfunction CharacterArtifactPane({ sheets, character, character: { key: characterKey } }: CharacterArtifactPaneProps) {\r\n  const { newBuild, equippedBuild, compareBuild, setCompareBuild } = useContext(buildContext)\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, sheets), [stats, sheets])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n  }, [characterKey, newBuild, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, objectFromKeyMap(allSlotKeys, () => \"\"))\r\n  }, [characterKey, database])\r\n  if (!stats) return null\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent {...{ sheets, character, equippedBuild: (newBuild && !compareBuild) ? undefined : equippedBuild, newBuild, statsDisplayKeys: statKeys }} />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newBuild && <SolidToggleButtonGroup exclusive value={compareBuild} onChange={(e, v) => setCompareBuild?.(v)} size=\"small\">\r\n              <ToggleButton value={false} >\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} >\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} >\r\n        <CardLight sx={{ height: \"100%\" }} ><CardContent sx={{ height: \"100%\" }}><Grid container spacing={2} flexDirection=\"column\" height=\"100%\" >\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n            <Grid item key={setKey}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>{artifactSheets?.[setKey].name ?? \"\"}</Typography>\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterKey }} />)}\r\n            </Grid>\r\n          )}\r\n        </Grid></CardContent></CardLight>\r\n      </Grid>\r\n      {allSlotKeys.map(slotKey =>\r\n        !!stats?.equippedArtifacts?.[slotKey] && <Grid item xs={6} md={4} key={stats?.equippedArtifacts?.[slotKey]} >\r\n          <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { characterStatKeys } from \"../../Util/StatUtil\";\r\nimport WeaponDisplayCard from \"../../Weapon/WeaponDisplayCard\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  character: ICachedCharacter\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, character, character: { constellation, key: characterKey } }: CharacterOverviewPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[elementKey]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.star} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {Character.getLevelString(character)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey] + 1} color={((tKey === \"skill\" && build.skillBoost) || (tKey === \"burst\" && build.burstBoost)) ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {[...Array(6).keys()].map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard {...{ charData: { character, characterSheet, equippedBuild, newBuild, characterDispatch }, weaponId: character.equippedWeapon }} />\r\n      <MainStatsCards {...{ characterSheet, character, equippedBuild, newBuild }} />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\nconst displayStatKeys = [\"characterATK\", \"finalATK\", \"finalHP\", \"finalDEF\"]\r\ndisplayStatKeys.push(...additionalKeys)\r\nconst editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\neditStatKeys.push(...additionalKeys)\r\nconst otherStatKeys: any[] = [];\r\n\r\n[\"physical\", ...allElements].forEach(ele => {\r\n  otherStatKeys.push(`${ele}_dmg_`)\r\n  otherStatKeys.push(`${ele}_res_`)\r\n})\r\notherStatKeys.push(\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\")\r\n\r\nconst miscStatkeys = [\r\n  \"normal_dmg_\", \"normal_critRate_\",\r\n  \"charged_dmg_\", \"charged_critRate_\",\r\n  \"plunging_dmg_\", \"plunging_critRate_\",\r\n  \"skill_dmg_\", \"skill_critRate_\",\r\n  \"burst_dmg_\", \"burst_critRate_\",\r\n  \"dmg_\", \"electrocharged_dmg_\",\r\n  \"vaporize_dmg_\", \"swirl_dmg_\",\r\n  \"moveSPD_\", \"atkSPD_\",\r\n  \"weakspotDMG_\",\r\n]\r\n\r\nconst resetString = {\r\n  \"characterATK\": \"Override Base ATK\",\r\n  \"characterHP\": \"Override Base HP\",\r\n  \"characterDEF\": \"Override Base DEF\"\r\n}\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\n\r\nfunction MainStatsCards({ characterSheet, character, character: { key: characterKey, level, ascension }, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild }\r\n\r\n  return <>\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n        {displayStatKeys.map(statKey => <Grid item key={statKey} {...statBreakpoint} >\r\n          <StatDisplay statKey={statKey} {...displayNewBuildProps} />\r\n        </Grid>)}\r\n        <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Specialized:</b> <span>{specializedStatKey && StatIcon[specializedStatKey]} {Stat.getStatName(specializedStatKey)}</span></span>\r\n          <span >{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n        </Grid>\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {characterStatKeys.map(statKey => {\r\n          const defVal = Math.round(characterSheet.getBase(statKey, level, ascension))\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {resetString[statKey]}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? defVal}\r\n              defaultValue={defVal}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n              onReset={() => characterDispatch({ type: \"resetStats\", statKey })}\r\n            />\r\n          </Grid>\r\n        })}\r\n        {editStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatNameWithPercent(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? (statKey === \"stamina\" ? 100 : 0)}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              defaultValue={statKey === \"stamina\" ? 100 : undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport FieldDisplay, { FieldDisplayList } from \"../../Components/FieldDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n}\r\nexport default function CharacterTalentPane({ characterSheet, character, character: { ascension, constellation, key: characterKey } }: CharacterTalentPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <ReactionDisplay characterSheet={characterSheet} />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Grid item key={i} xs={12} md={4}\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet }: { characterSheet: CharacterSheet }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele stats={build} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.cryo} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.hydro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.pyro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{Stat.getStatName(sKey)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <ColorText color=\"crystalize\">{Stat.getStatName(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICachedCharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { talent, ascension, key: characterKey }, characterDispatch, talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    const talentLvlKey = talent[talentKey] + levelBoost\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${talentLvlKey}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const talentStatsFields = talentStats && statsToFields(talentStats, build)\r\n  const statsEle = talentStatsFields && !!talentStatsFields.length &&\r\n    <FieldDisplayList >\r\n      {talentStatsFields.map((field, i) =>\r\n        <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterKey, equippedBuild, newBuild }} /> : null}\r\n      {statsEle}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport { buildContext } from '../Build/Build';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\r\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { ICachedCharacter } from '../Types/character';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterSheet from './CharacterSheet';\r\nimport { initialCharacter } from './CharacterUtil';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  setCharacterKey?: (any: CharacterKey) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, setCharacterKey, footer, newBuild: propNewBuild, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [compareBuild, setCompareBuild] = useState(false)\r\n  // Use databaseToken anywhere `database._get*` is used\r\n  // Use onDatabaseUpdate when `following` database entries\r\n  const [databaseToken, onDatabaseUpdate] = useForceUpdate()\r\n\r\n  // TODO: We probably don't need to fetch all sheets,\r\n  // though this wouldn't affect the performance currently.\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const character = useMemo(() =>\r\n    databaseToken && (database._getChar(characterKey) ?? initialCharacter(characterKey)),\r\n    [characterKey, databaseToken, database])\r\n  const weapon = useMemo(() =>\r\n    databaseToken && database._getWeapon(character.equippedWeapon),\r\n    [character.equippedWeapon, databaseToken, database])\r\n\r\n  const characterSheet = characterSheets?.[characterKey]\r\n  const weaponSheet = weapon ? weaponSheets?.[weapon.key] : undefined\r\n  const sheets = characterSheet && weaponSheet && artifactSheets && { characterSheet, weaponSheet, artifactSheets }\r\n\r\n  useEffect(() => {\r\n    return database.followChar(characterKey, onDatabaseUpdate)\r\n  }, [characterKey, onDatabaseUpdate, database])\r\n\r\n  useEffect(() => database.followWeapon(character.equippedWeapon, onDatabaseUpdate),\r\n    [character.equippedWeapon, onDatabaseUpdate, database])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return undefined\r\n    return deepClone(propNewBuild)\r\n  }, [propNewBuild])\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\"))\r\n\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => databaseToken && characterSheet && weaponSheet && artifactSheets &&\r\n    Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel),\r\n    [databaseToken, character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel, database])\r\n\r\n  // main CharacterDisplayCard\r\n  return <CardDark >\r\n    <buildContext.Provider value={{ newBuild, equippedBuild, compareBuild, setCompareBuild }}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item flexGrow={1}>\r\n            <CharSelectDropdown characterSheet={characterSheet} character={character} setCharacterKey={setCharacterKey} />\r\n          </Grid>\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newBuild && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newBuild ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <DamageOptionsCard character={character} />\r\n        {!!sheets && <FormulaCalcCard sheets={sheets} />}\r\n        <EnemyExpandCard character={character} />\r\n\r\n        {/* Character Panel */}\r\n        {characterSheet && <TabPanel value=\"character\" current={tab}>\r\n          <CharacterOverviewPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n        {/* Artifacts Panel */}\r\n        {sheets && <buildContext.Provider value={{ newBuild: undefined, equippedBuild, compareBuild, setCompareBuild }}>\r\n          <TabPanel value=\"artifacts\" current={tab} >\r\n            <CharacterArtifactPane sheets={sheets} character={character} />\r\n          </TabPanel >\r\n        </buildContext.Provider>}\r\n        {/* new build panel */}\r\n        {newBuild && sheets && <TabPanel value=\"newartifacts\" current={tab} >\r\n          <CharacterArtifactPane sheets={sheets} character={character} />\r\n        </TabPanel >}\r\n        {/* talent panel */}\r\n        {characterSheet && <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent sx={{ py: 1 }}>\r\n        {footer}\r\n      </CardContent>}\r\n    </buildContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  character: ICachedCharacter\r\n  disabled?: boolean\r\n  setCharacterKey?: (any: CharacterKey) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, character, character: { key: characterKey, elementKey = \"anemo\", level = 1, ascension = 0 }, disabled, setCharacterKey }: CharSelectDropdownProps) {\r\n  const [showModal, setshowModal] = useState(false)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <ImgIcon src={characterSheet.thumbImg} sx={{ mr: 1 }} />\r\n    {characterSheet.name}\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{!disabled ? <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacterKey} />\r\n    <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n      <Button disabled={!setCharacterKey} onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={ElementalData[elementKey].name}>\r\n        {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n          <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n            <strong>{ElementalData[eleKey].name}</strong></MenuItem>)}\r\n      </DropdownButton>}\r\n      <CustomNumberInputButtonGroupWrapper >\r\n        <CustomNumberInput onChange={setLevel} value={level}\r\n          startAdornment=\"Lvl. \"\r\n          inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n          sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n          disabled={!characterSheet} />\r\n      </CustomNumberInputButtonGroupWrapper>\r\n      <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n      <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n        {milestoneLevels.map(([lv, as]) => {\r\n          const sameLevel = lv === ascensionMaxLevel[as]\r\n          const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n          const selected = lv === level && as === ascension\r\n          return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n        })}\r\n      </DropdownButton>\r\n    </ButtonGroup>\r\n  </> : <Typography variant=\"h6\">{HeaderIconDisplay} {characterSheet && Character.getLevelString(character)}</Typography>}</>\r\n}"],"sourceRoot":""}