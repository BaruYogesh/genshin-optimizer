{"version":3,"sources":["Components/CustomFormControl.tsx","Util/UIUtil.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Components/DocumentDisplay.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","valueString","unit","Math","round","toFixed","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","database","_getCharKeys","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","faQuestionCircle","style","cursor","variant","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setLocation","editable","art","location","substats","rolls","Artifact","substatsValidation","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","slotNames","Body","Title","stars","getStatName","stat","i","numRolls","length","efficiency","effOpacity","statName","opacity","has","valid","Footer","Toggle","size","Menu","Divider","lockArtifact","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","weaponSheet","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","DocumentDisplay","sections","build","section","talentText","evalIfFunc","fields","ListGroup","conditional","ConditionalDisplay","CharacterOverviewPane","constellation","ascension","tlvl","elementKey","characterEle","weaponTypeKey","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","getLevelString","tKey","getTalentOfKey","img","roundedCircle","Badge","position","bottom","right","constellationName","Array","keys","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","statsToFields","WeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","Dropdown","as","ButtonGroup","allRarities","arr","Fragment","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","conditionalValues","setLevel","newLevel","clamp","ascensionMaxLevel","findIndex","ascenML","ambiguousLevel","setAscension","lowerAscension","substatKey","getSubStatKey","weaponDisplayMainVal","getMainStatValue","weaponDisplaySubVal","getSubStatValue","weaponPassiveName","passiveName","weaponBonusStats","conditionals","Conditional","document","InputGroup","Prepend","refineIndex","Text","Append","milestoneLevels","lv","lvlstr","description","passiveDescription","atk","stateKey","fieldClassName","editing","SetEditing","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","faSave","statKey","StatInput","prependEle","StatIconEle","getStatNamePretty","getStatValueWithOverride","percent","onValueChange","defaultValue","getBaseStatValue","StatDisplay","fixedUnit","getStatNameRaw","xl","CharacterTalentPane","props","skillDisplayProps","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","DropdownButton","element","shattered_hit","information","OverlayTrigger","Tooltip","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","talentSheet","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","auto","skill","burst","infusionAura","characterReducer","action","_getChar","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","updateChar","possibleWeapons","weaponKey","ws1","ws2","talents","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","DamageOptionsAndCalculation","CharSelectDropdown","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","ElementalData","eleKey","DropdownItem","ConditionalSelector","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","maxStack","badge","whiteSpace","condial","v","stack","faCheckSquare","faSquare","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionKey","sectionValues","getDisplayHeading","JSON","stringify","DisplayStatDiff","label","val","oldVal","oldText","diffText","isArray","Formula","invalid","characterHP","characterDEF","characterATK","weaponATK","labelVariant","hasOverride","restProps","pointerEvents","faUndo","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","reverse","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","immunityStatKey","elementImmunity"],"mappings":"kMAae,SAASA,EAAT,GAAoJ,IAAvHC,EAAsH,EAAtHA,MAAOC,EAA+G,EAA/GA,SAA+G,IAArGC,iBAAqG,MAAzF,GAAyF,MAArFC,gBAAqF,aAAnEC,aAAmE,SAApDC,EAAoD,EAApDA,YAAoD,IAAvCC,kBAAuC,SAAnBC,EAAmB,EAAnBA,IAAKC,EAAc,EAAdA,IAAc,EACtIC,mBAAS,IAD6H,mBACzJC,EADyJ,KAClJC,EADkJ,KAE1JC,EAAaC,uBACjB,WACE,GAAIP,GAAwB,KAAVI,EAAc,OAAOT,OAASa,GAChD,GAAc,KAAVJ,EAAc,OAAOT,EAAS,GAClC,IAAMc,EAAYX,EAAQY,WAAaC,SACvChB,EAASc,EAAUL,MAErB,CAACT,EAAUS,EAAON,EAAOE,IAI3B,OAFAY,qBAAU,wBAAMP,EAAQ,iBAACX,QAAD,IAACA,OAAD,EAACA,EAAOmB,kBAAR,QAAsB,MAAK,CAACnB,EAAOW,IAEpD,cAAC,IAAD,CACLX,MAAOU,EACPU,aAAW,eACXlB,UAAS,0BAAqBA,GAC9BmB,KAAK,SACLhB,YAAaA,EACbJ,SAAU,SAACqB,GAAD,OAAYX,EAASW,EAAEC,OAAOvB,QACxCwB,OAAQZ,EACRT,SAAUA,EACVsB,UAAW,SAACH,GAAD,MAAsB,UAAVA,EAAEI,KAAmBd,KAC5CL,IAAKA,EACLC,IAAKA,M,iCCrCF,SAASmB,EAAY3B,EAAe4B,GACzC,OAAQA,GACN,IAAK,IAAK,OAAQC,KAAKC,MAAc,GAAR9B,GAAc,IAAI+B,QAAQ,GACvD,IAAK,MAAO,OAAO/B,EAAM+B,QAAQ,GAAK,IACtC,QAAS,OAAOF,KAAKC,MAAM9B,GAAO+B,QAAQ,IAJ9C,mC,iCCAA,uGAKMC,EAAgD,CACpDC,OAAQC,IACRC,MAAOC,IACPC,MAAOC,IACPC,OAAQC,IACRC,QAASC,KAGJ,SAASC,EAAiBC,GAC/B,OAAO,cAAC,IAAD,CAAiBC,KAAMb,EAASY,GAAwB1C,UAAU,SAAnB0C,GAEzC,SAASE,EAAT,GAA8D,IAAlCF,EAAiC,EAAjCA,QACjCG,EAAMC,YAAe,YAArBD,EACFF,EAAOF,EAAiBC,GAC9B,OAAO,iCAAOC,EAAP,IAAcE,EAAE,YAAD,OAAaH,S,iCCnBrC,+EAKA,SAASK,EAAT,GAAuD,IAAbC,EAAY,EAAZA,SACxC,OAAO,mCAAGC,IAASC,eAAeC,MAAM,SAACC,EAAGC,GAC1C,OAAID,EAAIC,GAAW,EACfD,EAAIC,EAAU,EAEX,KACLC,KAAI,SAAAC,GAAY,OAAI,cAACC,EAAD,CAAiCD,aAAcA,EAAcP,SAAUA,GAApDO,QAE7C,SAASC,EAAT,GAAmD,IAA3BD,EAA0B,EAA1BA,aAAcP,EAAY,EAAZA,SAC9BS,EAAiBC,YAAWC,IAAeC,IAAIL,GAAe,CAACA,IACrE,OAAKE,EACE,cAAC,IAASI,KAAV,CAAeC,QAAS,kBAAMd,EAASO,IAAvC,SACJE,EAAeM,OAFU,O,iCCf9B,iHASe,SAASC,EAAT,GAAiN,IAAD,IAAxLC,EAAwL,EAAxLA,MAAOC,EAAiL,EAAjLA,MAAOC,EAA0K,EAA1KA,cAAeC,EAA2J,EAA3JA,SAA2J,IAAjJpE,iBAAiJ,MAArI,MAAqI,EACvNqE,EAAyBC,qBAAWC,iCACpCC,EAASJ,GAAsBD,EAC/BM,EAAUC,mBAAQ,yBAAMF,IAAK,OAAGP,QAAH,IAAGA,GAAH,UAAGA,EAAOQ,eAAV,aAAG,OAAAR,EAAiBO,MAAgB,CAACP,EAAOO,IACzEG,GAAgB,OAALV,QAAK,IAALA,OAAA,EAAAA,EAAOW,QAAS,EAC3BC,EAAWH,mBAAQ,WACvB,GAAIT,EAAMnE,MAAO,OAAOgF,IAAUC,oBAAoBd,EAAO,QAASO,GACjE,GAAIP,EAAMe,QAAS,CAAC,IAAD,IAClBC,EAAM,UAAGH,IAAUC,oBAAoBd,EAAO,UAAWO,UAAnD,iBAAG,EAAyD,UAA5D,aAAG,SAA8DA,GAE3E,GAAIH,GAA0BF,GAAmC,kBAAXc,EAAqB,CAAC,IAAD,kBACrEC,EAAmBjB,EAAMnE,MAAQmE,EAAMnE,MAApB,UAA4BmE,EAAMe,eAAlC,iBAA4B,OAAAf,EAAgBE,UAA5C,iBAA4B,EAAiC,UAA7D,aAA4B,SAAsCA,GACzD,oBAArBe,IACTA,EAAmBnE,SAAQ,UAACmE,SAAD,iBAAC,EAAmBf,UAApB,iBAAC,EAAmCtC,eAApC,aAAC,SAA6C8C,KAC3E,IAAIQ,EAAOF,EAASC,EACpBD,EAAS,qDAAOC,SAAP,aAAO,EAAkBrD,QAAQ8C,UAAjC,QAA8CO,EAAkBC,EAAO,uBAAMnF,UAAWmF,EAAO,EAAI,eAAiB,cAA7C,eAA+DA,EAAO,EAAI,IAAM,IAAQ,OAAJA,QAAI,IAAJA,GAAA,UAAAA,EAAMtD,eAAN,oBAAAsD,EAAgBR,KAAaQ,EAAjH,OAAiI,MAEnN,OAAOF,KAER,CAACZ,EAAwBM,EAAUR,EAAeF,EAAOO,IAEtDY,EAAYV,mBAAQ,kBAAMI,IAAUC,oBAAoBd,EAAO,OAAQO,KAAQ,CAACP,EAAOO,IACvFa,EAAeX,mBAAQ,kBAAMI,IAAUC,oBAAoBd,EAAO,UAAWO,KAAQ,CAACP,EAAOO,IAE7Fc,EAAqBZ,mBAAQ,WACjC,IAAMa,EAAmBT,IAAUC,oBAAoBd,EAAO,cAAeO,GAC7E,OAAOe,EAAmB,cAAC,IAAD,CACxBC,UAAU,MACVC,QAAS,cAAC,IAAD,CAASC,GAAG,gBAAZ,SAA6BH,IAFd,SAIxB,cAAC,IAAD,CAAiB5C,KAAMgD,IAAkB3F,UAAU,OAAO4F,MAAO,CAAEC,OAAQ,YACzD,OACnB,CAAC5B,EAAOO,IAEL9C,EAAOgD,mBAAQ,kBAAMI,IAAUC,oBAAoBd,EAAO,OAAQO,KAAQ,CAACP,EAAOO,IAExF,OAAKC,EACE,eAAC,IAAUZ,KAAX,CAAgBiC,QAAS5B,EAAQ,EAAI,aAAe,eAAgBlE,UAAWA,EAA/E,UACL,iCAAM,4BAAIoF,IAAeE,KACzB,uBAAMtF,UAAS,sCAAiCqF,GAAhD,2BAAkER,QAAlE,IAAkEA,GAAlE,UAAkEA,EAAUhD,eAA5E,aAAkE,OAAAgD,EAAoBF,UAAtF,QAAmGE,EAAUnD,QAH1F,O,ySCjBjBqE,EAAmB,IAAIC,IAAIC,KAElB,SAASC,EAAT,GAA2J,IAAD,cAAlIC,EAAkI,EAAlIA,WAAYC,EAAsH,EAAtHA,YAAaC,EAAyG,EAAzGA,OAAQC,EAAiG,EAAjGA,SAAiG,IAAvFC,+BAAuF,MAA7D,EAA6D,MAA1DC,iBAA0D,MAA9CT,EAA8C,IACpHxF,wBAASK,GAD2G,mBAChK6F,EADgK,KAC9IC,EAD8I,KAEvK1F,qBAAU,kBACRmF,EAAalD,IAAS0D,UAAUR,EAAYO,QAA0B9F,IACtE,CAACuF,EAAYO,IACf,IAAME,EAAQlD,YAAWmD,IAAcjD,IAAd,iBAAmBwC,QAAnB,IAAmBA,IAAgBD,EAAalD,IAAS6D,QAAQX,QAAcvF,SAA/E,aAAkB,EAA0EmG,QAAS,CAACX,EAAaD,IACtIa,EAAc,SAACC,GAAD,OAAgChE,IAASiE,YAAYf,EAAac,IAEhFE,GAAYf,EACZgB,EAAG,OAAGhB,QAAH,IAAGA,IAAeK,EACrBhD,EAAiBC,YAAWC,IAAeC,IAAf,iBAAmBwD,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAKC,gBAAxB,QAAoC,IAAK,QAACD,QAAD,IAACA,OAAD,EAACA,EAAKC,WACjF,IAAKD,EAAK,OAAO,UACaxG,IAA1BwG,EAAIE,SAAS,GAAGC,OAAqBC,IAASC,mBAAmBL,GAZkG,IAc/J1B,EAA8D0B,EAA9D1B,GAAIhD,EAA0D0E,EAA1D1E,QAASgF,GAAiDN,EAAjDM,SAAUC,GAAuCP,EAAvCO,MAAOC,GAAgCR,EAAhCQ,YAAaN,GAAmBF,EAAnBE,SAAUO,GAAST,EAATS,KACvDC,GAAgBnG,KAAKtB,IAAIsB,KAAKrB,IAAIiG,EAAoC,EAAXmB,IAAeC,IAC1EI,GAAc,uBAAM/H,UAAW8H,KAAkBH,GAAQ,cAAgB,GAA3D,oBAAgEH,IAASQ,cAAcJ,GAAaF,GAAUI,WAA9G,QAAgI,GAAIG,IAAKC,YAAYN,OAhBF,GAiB1HJ,IAASW,sBAAsBf,EAAKZ,GAAzE4B,GAjB+J,GAiB/JA,kBAAmBC,GAjB4I,GAiB5IA,cACrBC,GAAkC,IAAlBD,GAChBE,GAAY,iBAAG9E,QAAH,IAAGA,OAAH,EAAGA,EAAgBM,YAAnB,QAA2B,YAC7C,OAAQ,eAAC,IAAD,CAAM/D,UAAU,QAAQwI,OAAM,UAAKd,GAAL,QAAqBe,GAAG,eAAeC,KAAM,YAA3E,UACN,cAAC,IAAKC,OAAN,CAAa3I,UAAU,MAAvB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK4I,GAAI,EAAGC,GAAI,EAAhB,SACE,cAAC,IAAD,CAAOC,IAAG,iBAAElC,QAAF,IAAEA,OAAF,EAAEA,EAAOmC,UAAUrG,UAAnB,QAA+B,GAAI1C,UAAS,4BAAuB0H,GAAvB,YAA2CsB,WAAS,MAE5G,eAAC,IAAD,CAAKhJ,UAAU,OAAf,UACE,6BAAI,6CAAI4G,QAAJ,IAAIA,OAAJ,EAAIA,EAAOqC,UAAUvG,UAArB,QAAiC,yBACrC,gCAAK,cAAC,IAAD,CAAkBA,QAASA,IAAhC,YAAiDiF,eAIvD,eAAC,IAAKuB,KAAN,CAAWlJ,UAAU,0BAArB,UACE,eAAC,IAAKmJ,MAAN,WACE,+CAAMvC,QAAN,IAAMA,OAAN,EAAMA,EAAO7C,YAAb,QAAqB,iBACrB,uBAAO/D,UAAU,gBAAjB,SAAiC,cAAC,IAAD,CAAOoJ,MAAO1B,UAEjD,oBAAI1H,UAAU,OAAd,SACE,8BAAIiI,IAAKoB,YAAYzB,IAArB,IAAoCG,QAEtC,cAAC,IAAD,CAAK/H,UAAU,OAAf,SACGsH,GAAShE,KAAI,SAACgG,EAAeC,GAAO,IAAD,MAClC,IAAKD,EAAKxJ,MAAO,OAAO,KACxB,IAAI0J,EAAQ,oBAAGF,EAAK/B,aAAR,aAAG,EAAYkC,cAAf,QAAyB,EACjCC,EAAU,UAAGJ,EAAKI,kBAAR,QAAsB,EAChCC,EAAa,GAAmB,GAAbD,EACnBE,EAAW3B,IAAKoB,YAAYC,EAAK9H,KACrC,OAAQ,eAAC,IAAD,CAAaoH,GAAI,GAAjB,UACN,cAAC,IAAD,CAAO9C,QAAS0D,EAAQ,UAAMA,EAAN,QAAuB,SAAUxJ,UAAU,mBAAnE,SAAsF,4BAAIwJ,GAAsB,QAAiB,IACjI,uBAAMxJ,UAAS,eAAUwJ,EAAV,QAAf,UAA0CI,EAA1C,WAAwDnI,YAAY6H,EAAKxJ,MAAOmI,IAAKC,YAAYoB,EAAK9H,OAAtG,OAA8GyG,IAAKC,YAAYoB,EAAK9H,SACpI,sBAAMxB,UAAU,cAAc4F,MAAO,CAAEiE,QAASF,GAAhD,SAA+DL,EAAK9H,KAAOgF,EAAUsD,IAAIR,EAAK9H,KAAOC,YAAYiI,EAAY,OAAS,QAHtHH,QAOtB,eAAC,IAAD,CAAKvJ,UAAU,UAAf,UACE,eAAC,IAAD,+BAAsB,cAAC,IAAD,CAAcF,MAAOsI,GAAmB2B,MAAOzB,GAAqBtI,UAAW,mBACpGoI,KAAsBC,IAAiB,eAAC,IAAD,CAAKrI,UAAU,aAAf,0BAAyC,cAAC,IAAD,CAAcF,MAAOuI,GAAe0B,MAAOzB,cAIhI,cAAC,IAAK0B,OAAN,CAAahK,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,4CAAf,UACGmH,EAAW,cAAC,IAAD,CAAKyB,GAAG,OAAR,SACV,eAAC,IAAD,WACE,cAAC,IAASqB,OAAV,CAAiBC,KAAK,KAAKlK,UAAU,YAArC,SAAkDuI,KAClD,eAAC,IAAS4B,KAAV,WACE,cAAC,IAAStG,KAAV,CAAeC,QAAS,kBAAMkD,EAAY,KAA1C,uBACA,cAAC,IAASoD,QAAV,IACA,cAAC,IAAD,CAAgCpH,SAAUgE,YAGvC,cAAC,IAAD,CAAK4B,GAAG,OAAR,SAAe,4BAAIL,OAC5B,cAAC,IAAD,CAAKK,GAAG,OAAR,SACE,eAAC,IAAD,WACGzB,EAAW,cAAC,IAAD,CAAgB3B,UAAU,MACpCC,QAAS,cAAC,IAAD,CAASC,GAAG,oBAAZ,6FADC,SAEV,sBAAM1F,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQkK,KAAK,KAAKpG,QAAS,kBAAMb,IAASoH,aAAa3E,GAAKmC,KAA5D,SACE,cAAC,IAAD,CAAiBlF,KAAMkF,GAAOyC,IAASC,IAAYvK,UAAU,gBAG/C,OACjBqG,GAAU,cAAC,IAAD,CAAQP,QAAQ,OAAOoE,KAAK,KACvCpG,QAASuC,EADE,SAEX,cAAC,IAAD,CAAiB1D,KAAM6H,IAAQxK,UAAU,cAExCsG,GAAY,cAAC,IAAD,CAAQR,QAAQ,SAASoE,KAAK,KAC3CpG,QAASwC,EADI,SAEb,cAAC,IAAD,CAAiB3D,KAAM8H,IAAYzK,UAAU,2B,8FCpH5C,SAAS0K,EAAT,GAA+C,IAAvB5K,EAAsB,EAAtBA,MAAOiK,EAAe,EAAfA,MAAe,EACjB,kBAAVjK,EAC9B,CAAC,GAAD,OAAI6B,KAAKgJ,MAAc,IAAR7K,GAAgB,EAA/B,QAAwCA,EAAM+B,QAAQ,GAAK,KAAO,CAAC,YAAa/B,GAFvB,mBACtD8K,EADsD,KAC1ClC,EAD0C,KAI3D,OADKqB,IAAOa,EAAa,UAClB,cAAC,IAAD,CAAO9E,QAAS8E,EAAY5K,UAA0B,cAAf4K,EAA6B,GAAK,mBAAzE,SAA8FlC,M,+aCSjGmC,EAAgB,CAAEjC,GAAI,GAAIC,GAAI,EAAGiC,GAAI,GAyE5BC,MA7Df,YAAsM,IAAD,EAApKtH,EAAoK,EAApKA,eAAgBuH,EAAoJ,EAApJA,YAAaC,EAAuI,EAAvIA,UAAwB1H,EAA+G,EAA5H0H,UAAa1H,aAAgBY,EAA+F,EAA/FA,cAAeC,EAAgF,EAAhFA,SAAU+C,EAAsE,EAAtEA,SAAU+D,EAA4D,EAA5DA,kBAAmBC,EAAyC,EAAzCA,UACpJC,EAAUC,cAEV7G,EAASJ,GAAsBD,EAC/BoC,EAAuB,iBAAG/B,QAAH,IAAGA,OAAH,EAAGA,EAAO+B,+BAAV,QAAqC,EAC5D+E,EAAW5G,mBAAQ,kBAAMF,GAASM,IAAUyG,mBAAmB/G,EAAOf,KAAiB,CAACe,EAAOf,IAC/F+H,EAAO7K,uBACX,SAAA8K,GAAK,OAAIL,EAAQM,KAAK,CACpBC,SAAU,YACVC,YAAaH,MACJ,CAACL,IACRS,EAAiBnI,YAAWmD,IAAciF,SAAU,IAEpDC,EAAYpL,uBAAY,WACvBqL,OAAOC,QAAQ,gEACf7H,IACLA,EAAS8H,mBAAqBjJ,IAASkJ,eAAe5I,EAAca,EAAS8H,mBAC5D,OAAjBhB,QAAiB,IAAjBA,KAAoB,CAAE/J,KAAM,cAC3B,CAACoC,EAAca,EAAU8G,IAEtBkB,EAAczL,uBAAY,WACzBqL,OAAOC,QAAQ,kEACpBhJ,IAASkJ,eAAe5I,EAAc8I,OAAOC,YAAYC,IAAYjJ,KAAI,SAAAkJ,GAAI,MAAI,CAACA,EAAM,SACvE,OAAjBtB,QAAiB,IAAjBA,KAAoB,CAAE/J,KAAM,cAC3B,CAACoC,EAAc2H,IAClB,OAAK1G,EACE,qCACL,eAACiI,EAAA,EAAD,CAAMzM,UAAU,aAAayI,GAAG,eAAeC,KAAM,YAArD,UACE,cAAC+D,EAAA,EAAKvD,KAAN,UACE,cAACwD,EAAA,EAAD,CAA4BjJ,iBAAgBuH,cAAaC,YAAW9G,gBAAeC,WAAUuI,iBAAkBrB,EAAUnE,eAE3H,eAACsF,EAAA,EAAKzC,OAAN,WACG5F,EAAW,cAACwI,EAAA,EAAD,CAAQ9I,QAASiI,EAAjB,sDAAiF5E,GAAY,cAACyF,EAAA,EAAD,CAAQ9I,QAASsI,EAAjB,mCACxGS,QAAQtG,IAA4B,cAACuG,EAAA,EAAD,CAAO9M,UAAU,mCAAmC8F,QAAQ,SAA5D,SAAsE,6DAAgCS,aAG/I,eAACwG,EAAA,EAAD,CAAK/M,UAAU,QAAf,UACE,cAACgN,EAAA,EAAD,2BAASnC,GAAT,IAAwB7K,UAAU,qBAAlC,SACG6L,GAAkBQ,OAAOY,QAAQpG,IAAcqG,WAAWrB,EAAgBrH,EAAM2I,aAAa7J,KAAI,qCAAEyD,EAAF,KAAUqG,EAAV,YAChG,eAACX,EAAA,EAAD,CAAmBzM,UAAU,mBAAmByI,GAAG,eAAeC,KAAM,YAAxE,UACE,cAAC+D,EAAA,EAAK9D,OAAN,2BAAckD,QAAd,IAAcA,OAAd,EAAcA,EAAiB9E,GAAQhD,YAAvC,QAA+C,KAC/C,cAAC0I,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,YAArB,SACIoN,EAAqB9J,KAAI,SAAA+J,GAAS,OAAI,cAACC,EAAA,EAAD,CAAiDvG,SAAQsG,YAAWlJ,gBAAeC,WAAU8G,oBAAmB/D,YAAzFJ,EAASsG,UAHjEtG,SAQdoE,EACCoB,IAAYjJ,KAAI,SAAAZ,GACd,IAAM0E,EAAM+D,EAAUoC,MAAK,SAAAnG,GAAG,OAAIA,EAAI1E,UAAYA,KAClD,OAAOmK,QAAQzF,IAAQ,wBAAC4F,EAAA,EAAD,2BAASnC,GAAT,IAAwBrJ,IAAKkB,EAAS1C,UAAU,SACrE,cAACkG,EAAA,EAAD,CAAcE,YAAagB,QAE1BmF,IAAYjJ,KAAI,SAAAZ,GAAO,iBAC1BmK,QAAO,OAACrI,QAAD,IAACA,GAAD,UAACA,EAAO0H,yBAAR,aAAC,EAA2BxJ,KAAa,wBAACsK,EAAA,EAAD,2BAASnC,GAAT,IAAwBrJ,IAAG,OAAEgD,QAAF,IAAEA,GAAF,UAAEA,EAAO0H,yBAAT,aAAE,EAA2BxJ,GAAU1C,UAAU,SAC1H,cAACkG,EAAA,EAAD,CAAcC,WAAU,OAAE3B,QAAF,IAAEA,GAAF,UAAEA,EAAO0H,yBAAT,aAAE,EAA2BxJ,GAAU6D,wBAAyBA,EAAyBF,OAAQ,wBAAMmF,EAAI,OAAChH,QAAD,IAACA,GAAD,UAACA,EAAO0H,yBAAR,aAAC,EAA2BxJ,iBA9BtJ,M,sDCtCN,SAAS8K,EAAT,GAAqH,IAA1FC,EAAyF,EAAzFA,SAAUvC,EAA+E,EAA/EA,kBAAmB/G,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,SAAU+C,EAAmC,EAAnCA,SACxFuG,EAAQtJ,GAAsBD,EACpC,OAAKuJ,EACE,qCAAMD,QAAN,IAAMA,OAAN,EAAMA,EAAUnK,KAAI,SAACqK,EAASpE,GAAO,IAAD,IACzC,IAAKoE,EAAQlJ,QAASiJ,GAAQ,OAAO,KACrC,IAAME,EAAaC,YAAWF,EAAQjF,KAAMgF,GACtCI,EAAM,UAAGH,EAAQG,cAAX,QAAqB,GACjC,OAAO,sBAAK9N,UAAU,OAAf,UACL,sBAAW4I,GAAI,GAAf,UACE,qBAAK5I,UAAU,OAAf,SAAuB4N,IACtBE,EAAOrE,OAAS,GAAK,cAACsE,EAAA,EAAD,CAAW/N,UAAU,kBAArB,gBACnB8N,QADmB,IACnBA,GADmB,UACnBA,EAAQxK,WADW,aACnB,OAAAwK,GAAc,SAAC7J,EAAOsF,GAAR,OAAc,cAACvF,EAAA,EAAD,CAAsBE,MAAOqF,EAAStF,QAAOE,gBAAeC,YAAzCmF,aAGjDoE,EAAQK,aAAe,cAACC,EAAA,EAAD,CAA0BD,YAAaL,EAAQK,YAAa7J,gBAAeC,WAAU8G,oBAAmB/D,eAPlG,UAAYoC,QAL7B,K,gECmBN,SAAS2E,EAAT,GAA8M,IAAD,EAA5KzK,EAA4K,EAA5KA,eAAgBuH,EAA4J,EAA5JA,YAAa7D,EAA+I,EAA/IA,SAAU8D,EAAqI,EAArIA,UAAqI,IAA1HA,UAAakD,EAA6G,EAA7GA,cAAmCjD,GAA0E,EAA9FvD,MAA8F,EAAvFyG,UAAuF,EAA1ElD,mBAAmB/G,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,SAC5KsJ,EAAQtJ,GAAsBD,EACpC,IAAKuJ,EAAO,OAAO,KAFuM,IAGlNW,EAASX,EAATW,KACFC,EAAaZ,EAAMa,aACnBC,EAAgB/K,EAAe+K,cACrC,OAAO,eAACzB,EAAA,EAAD,WACL,cAACC,EAAA,EAAD,CAAKpE,GAAI,GAAIC,GAAI,EAAjB,SAEE,eAAC4D,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACE,cAACyM,EAAA,EAAKgC,IAAN,CAAU3F,IAAKrF,EAAeiL,QAAS1O,UAAU,iBACjD,eAACyM,EAAA,EAAKvD,KAAN,WACE,+BAAKzF,EAAeM,KAApB,IAA0B,cAAC4K,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASP,GAAatO,UAAU,gBAA7E,IAA8F,cAAC2O,EAAA,EAAD,CAAO7F,IAAG,UAAE8F,IAAOE,mBAAT,aAAE,EAAqBN,GAAgBxO,UAAU,mBACzJ,6BAAI,cAAC,IAAD,CAAOoJ,MAAO3F,EAAesL,KAAMC,SAAO,MAC9C,yCAAYlK,IAAUmK,eAAehE,MACrC,cAAC8B,EAAA,EAAD,CAAK/M,UAAU,YAAf,SACG,CAAC,OAAQ,QAAS,SAASsD,KAAI,SAAA4L,GAAI,aAClC,eAAClC,EAAA,EAAD,CAAKpE,GAAI,EAAG5I,UAAU,MAAtB,UACE,cAAC2O,EAAA,EAAD,CAAO7F,IAAG,UAAErF,EAAe0L,eAAeD,EAAMxB,EAAMa,qBAA5C,aAAE,EAAyDa,IAAKpP,UAAU,eAAeqP,eAAa,IAChH,oBAAIrP,UAAU,OAAd,SAAqB,cAACsP,EAAA,EAAD,CAAOxJ,QAAQ,OAAOF,MAAO,CAAE2J,SAAU,WAAYC,OAAQ,IAAKC,MAAO,KAAzE,SAAgF,iCAASpB,EAAKa,GAAQ,UAF5FA,QAKrC,qBAAKlP,UAAU,cAAf,SAA6B,6BAAKyD,EAAeiM,sBACjD,cAAC3C,EAAA,EAAD,CAAK/M,UAAU,OAAf,SACG,YAAI2P,MAAM,GAAGC,QAAQtM,KAAI,SAAAiG,GAAC,aACzB,cAACyD,EAAA,EAAD,CAAKpE,GAAI,EAAG5I,UAAU,MAAtB,SACE,cAAC2O,EAAA,EAAD,CAAO7F,IAAG,UAAErF,EAAe0L,eAAf,uBAA8C5F,EAAI,GAAKmE,EAAMa,qBAA/D,aAAE,EAA4Ea,IAAKpP,UAAS,uBAAkBmO,EAAgB5E,EAAI,GAAK,eAA3C,mBACpG8F,eAAa,EAACvL,QAAS,kBAAMqD,GAAY+D,EAAkB,CAAEiD,cAAgB5E,EAAI,IAAO4E,EAAgB5E,EAAIA,EAAI,QAFnFA,gBAQ3C,eAACyD,EAAA,EAAD,CAAKpE,GAAI,GAAIC,GAAI,EAAjB,UACE,cAACgH,GAAD,CAA6BpM,iBAAgBuH,cAAa7D,WAAU8D,YAAWC,oBAAmB/G,gBAAeC,aACjH,cAAC0L,GAAD,CAAsBrM,iBAAgBuH,cAAa7D,WAAU8D,YAAWC,oBAAmB/G,gBAAeC,mBAKhH,SAAS2L,GAAT,GAAiI,IAAtGC,EAAqG,EAArGA,MAAqG,IAA9FC,iBAA8F,MAAlF,GAAkF,EAA9EzL,EAA8E,EAA9EA,MAChD,GAAqD,IAAhD6H,OAAOuD,KAAP,OAAYK,QAAZ,IAAYA,IAAa,IAAYxG,OAAc,OAAO,KAC/D,IAAMqE,EAASoC,YAAcD,EAAWzL,GACxC,OAAO,eAACiI,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAAoB1I,UAAU,OAA3D,UACL,cAACyM,EAAA,EAAK9D,OAAN,CAAa3I,UAAU,YAAvB,SAAoCgQ,IACpC,cAACjC,EAAA,EAAD,CAAW/N,UAAU,aAAa8F,QAAQ,QAA1C,SACGgI,EAAOxK,KAAI,SAACW,EAAOsF,GAAR,OAAc,cAACvF,EAAA,EAAD,CAAcI,cAAUxD,EAAmBsD,MAAOqF,EAAStF,QAAOE,cAAeK,EAAOxE,UAAW,aAA3DuJ,WAKxE,SAAS4G,GAAT,GAA8K,IAApJnF,EAAmJ,EAAnJA,YAAawD,EAAsI,EAAtIA,cAAe4B,EAAuH,EAAvHA,eAC9CC,EAAe3M,YAAW4M,IAAYxE,SAAU,IACtD,OAAKuE,EAEE,eAACE,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACL,cAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAArB,SACG5B,EAAYjH,OAEf,cAACwM,EAAA,EAASpG,KAAV,UACGuG,IAAYpN,KAAI,SAAC8F,EAAOG,EAAGoH,GAAX,OAAmB,eAAC,IAAMC,SAAP,WAClC,cAACL,EAAA,EAASM,SAAV,UAAwC,cAAC,IAAD,CAAOzH,MAAOA,KAA9B,OAASA,GAChCiD,OAAOY,QAAQqD,IAAYQ,iBAAiBT,EAAc7B,IAAgBuC,QAAO,uCAAkCC,SAAW5H,KAAO9F,KAAI,mCAAE9B,EAAF,KAAOyP,EAAP,YACxI,cAACV,EAAA,EAAS1M,KAAV,CAAyBC,QAAS,kBAAMsM,EAAe,MAAO5O,IAA9D,SACGyP,EAAUlN,MADOvC,MAIpB+H,IAAMoH,EAAIlH,OAAS,GAAM,cAAE8G,EAAA,EAASnG,QAAX,MAP4BhB,WAPnC,KA6B5B,SAASyG,GAAT,GAAqL,IAApJpM,EAAmJ,EAAnJA,eAAgBuH,EAAmI,EAAnIA,YAAa7D,EAAsH,EAAtHA,SAAU8D,EAA4G,EAA5GA,UAAwBiG,EAAoF,EAAjGjG,UAAaiG,OAAUhG,EAA0E,EAA1EA,kBAAmB/G,EAAuD,EAAvDA,cAAeC,EAAwC,EAAxCA,SAEpIsJ,EAAQtJ,GAAsBD,EAC5BwD,EAAqBuJ,EAArBvJ,MAAOyG,EAAc8C,EAAd9C,UACTgC,EAAiBzP,uBAAY,SAACa,EAAK1B,GACvC,GAAY,QAAR0B,EAAe,CACjB,GAAI1B,IAAUoR,EAAO1P,IAAK,OACrB,IAEK2P,EAAsBlG,EAAtBkG,yBACDA,EAAkBD,OACzBhG,EAAkB,CAAEiG,sBAGxBD,EAAO1P,GAAO1B,EACdoL,EAAkB,CAAEgG,OAAQA,MAC3B,CAACjG,EAAWiG,EAAQhG,IAEjBkG,EAAWzQ,uBAAY,SAAC0Q,GAC5BA,EAAWC,YAAMD,EAAU,EAAG,IAC9B,IAAMjD,EAAYmD,IAAkBC,WAAU,SAAAC,GAAO,OAAIJ,GAAYI,KACrErB,EAAe,QAASiB,GACxBjB,EAAe,YAAahC,KAC3B,CAACgC,IAEEsB,EAAiBH,IAAkBC,WAAU,SAAAC,GAAO,OAAI9J,IAAU8J,KAAW,EAC7EE,EAAehR,uBAAY,WAC/B,IAAMiR,EAAiBL,IAAkBC,WAAU,SAAAC,GAAO,OAAI9J,IAAU8J,KACtCrB,EAAe,YAA7ChC,IAAcwD,EAA4CxD,EAAY,EACzCwD,KAChC,CAACxB,EAAgBhC,EAAWzG,IAE/B,IAAK+F,EAAO,OAAO,KAEnB,IAAMmE,EAAa7G,EAAY8G,gBACzBtD,EAAgB/K,EAAe+K,cAC/BuD,EAAuB/G,EAAYgH,iBAAiBrK,EAAOyG,GAC3D6D,EAAsBjH,EAAYkH,gBAAgBvK,EAAOyG,GACzD+D,EAAoBnH,EAAYoH,YAChCC,EAAmBrH,EAAYxG,MAAMkJ,GACrC4E,EAAeC,IAAYD,aAAapB,OAAOA,EAAO1P,KACtDgR,EAAWxH,EAAYwH,SAC7B,OAAO,eAAC/F,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACL,cAACyM,EAAA,EAAK9D,OAAN,UACE,cAACoE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACG7F,EAAW,eAACsL,EAAA,EAAD,WACV,eAAChC,EAAA,EAAD,CAAaD,GAAIiC,IAAWC,QAA5B,UACE,cAACvC,GAAD,CAAgBnF,YAAaA,EAAawD,cAAeA,EAAe4B,eAAgBA,IACxF,eAACG,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACE,eAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAArB,wBAAyCsE,EAAOyB,YAAc,KAC9D,eAACpC,EAAA,EAASpG,KAAV,WACE,cAACoG,EAAA,EAASM,SAAV,UACE,8DAEF,cAACN,EAAA,EAASnG,QAAV,IACC,YAAIuF,MAAM,GAAGC,QAAQtM,KAAI,SAAA9B,GAAG,OAC3B,cAAC+O,EAAA,EAAS1M,KAAV,CAAyBC,QAAS,kBAAMsM,EAAe,cAAe5O,IAAtE,8BACiBA,EAAM,IADHA,eAM5B,cAACiR,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWG,KAAZ,UAAiB,+CAEnB,cAACH,EAAA,EAAWI,OAAZ,UACE,cAAChT,EAAA,EAAD,CAAmBM,iBAAaS,EAAWb,SAAUqR,EAAUtR,MAAO6H,EAAOrH,IAAK,EAAGD,IAAK,OAE5F,cAACoS,EAAA,EAAWI,OAAZ,UACE,cAACjG,EAAA,EAAD,CAAQ3M,UAAWyR,EAAgB5N,QAAS6N,EAA5C,SAA0D,wCAAWJ,IAAkBnD,UAEzF,cAACqC,EAAA,EAAD,CAAaD,GAAIiC,IAAWI,OAA5B,SACE,eAACtC,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACE,cAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAArB,0BACA,cAAC2D,EAAA,EAASpG,KAAV,UACG2I,IAAgBxP,KAAI,YAAe,IAAD,mBAAZyP,EAAY,KAARvC,EAAQ,KAE3BwC,EADYD,IAAOxB,IAAkBf,GACnB,cAAUuC,GAAV,cAAwBA,EAAxB,YAA8BxB,IAAkBf,IACxE,OAAO,cAACD,EAAA,EAAS1M,KAAV,CAAmCC,QAAS,WAAQsM,EAAe,QAAS2C,GAAK3C,EAAe,YAAaI,IAA7G,SAAqHwC,GAArH,UAAuBD,EAAvB,YAA6BvC,iBAK9B,gDAItB,cAAC/D,EAAA,EAAKvD,KAAN,UACE,eAAC6D,EAAA,EAAD,CAAK/M,UAAU,QAAf,UACE,eAACgN,EAAA,EAAD,CAAKpE,GAAI,GAAIC,GAAI,EAAGiC,GAAI,EAAxB,UACE,cAAC6D,EAAA,EAAD,CAAO7F,IAAKkC,EAAYoE,IAAKpP,UAAS,4BAAuBgL,EAAYgG,OAAnC,QAAiDhI,WAAS,IAChG,gCAAQgC,EAAYiI,iBAEtB,eAACjG,EAAA,EAAD,WACE,qBAAIhN,UAAU,OAAd,UAAsBgL,EAAYjH,KAAlC,QAA6CuM,IAAYrB,eAAeiC,GAAxE,IAAkFiB,GAAqB,eAAC7C,EAAA,EAAD,CAAOxJ,QAAQ,OAAf,wBAAkCoL,EAAOyB,YAAc,QAC9J,qBAAK3S,UAAU,OAAf,SAAsB,cAAC,IAAD,CAAOoJ,MAAO4B,EAAYgG,WAChD,6BAAKmB,IACL,qBAAKnS,UAAU,OAAf,SAAuBmS,GAAqBnH,EAAYkI,mBAAmBxF,KAC3E,cAACqC,GAAD,CAAiBC,MAAO,aAAcC,UAAS,aAAIkD,IAAKpB,GAAuBF,EAAaA,EAAaI,OAAsBrR,GAAa4D,MAAOkJ,IACnJ,cAACqC,GAAD,CAAiBC,MAAO,cAAeC,UAAWoC,EAAkB7N,MAAOkJ,KAEzEb,QAAQ2F,IAAa3F,QAAQyF,IAAiBjG,OAAOY,QAAQqF,GAAchP,KAAI,mCAAE8P,EAAF,KAAYpF,EAAZ,YAC/E,cAACC,EAAA,EAAD,CAAgDD,cAAa7J,gBAAeC,WAAU8G,oBAAmB/D,WAAYkM,eAAe,aAA3GD,MAE1BZ,EAAW,cAAChF,EAAD,CAAuBC,SAAU+E,EAAUrO,gBAAeC,WAAU8G,oBAAmB/D,aAAiB,gBAgB9H,SAAS2I,GAAT,GAAgJ,IAAtHrM,EAAqH,EAArHA,eAAgBuH,EAAqG,EAArGA,YAAa7D,EAAwF,EAAxFA,SAAU8D,EAA8E,EAA9EA,UAAWC,EAAmE,EAAnEA,kBAAmB/G,EAAgD,EAAhDA,cAAeC,EAAiC,EAAjCA,SAAiC,EAC/G7D,oBAAS,GADsG,mBACtI+S,EADsI,KAC7HC,EAD6H,OAErGhT,oBAAS,GAF4F,mBAEtIiT,EAFsI,KAExHC,EAFwH,OAGvGlT,oBAAS,GAH8F,mBAGtImT,EAHsI,KAGzHC,EAHyH,KAKvIC,EAAiB,CAAC,SAAU,YAAa,WAAY,YAAa,SAClEC,EAAkB,CAAC,UAAW,WAAY,YAChDA,EAAgBnI,KAAhB,MAAAmI,EAAwBD,GACxB,IAAME,EAAe,CAAC,KAAM,MAAO,MAAO,OAAQ,MAAO,QACzDA,EAAapI,KAAb,MAAAoI,EAAqBF,GACrB,IAAMG,EAAuB,GAE7B,CAAC,YAAD,mBAAgBC,MAAaC,SAAQ,SAAAC,GACnCH,EAAcrI,KAAd,UAAsBwI,EAAtB,UACAH,EAAcrI,KAAd,UAAsBwI,EAAtB,aAEFH,EAAcrI,KAAK,UAAW,WAAY,cAE1C,IAAMyI,EAAe,CACnB,cAAe,mBACf,eAAgB,oBAChB,gBAAiB,qBACjB,aAAc,kBACd,aAAc,kBACd,OAAQ,WAAY,UAAW,gBAE3BC,EAAqB3Q,EAAe4Q,mBAAmBpJ,EAAUmD,WACjEkG,EAAqB7Q,EAAe8Q,sBAAsBtJ,EAAUmD,WACpEoG,EAAsBvM,IAAKC,YAAYkM,GAEvCK,EAAuB,CAAExJ,YAAW9G,gBAAeC,WAAU+C,YACnE,OAAO,qCACL,eAACsF,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACE,cAACyM,EAAA,EAAK9D,OAAN,UACE,eAACoE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,qDAED7F,EAAW,cAAC6F,EAAA,EAAD,CAAKpE,GAAG,OAAR,SACV,cAACgE,EAAA,EAAD,CAAQ9G,QAASwN,EAAU,SAAW,OAAQxP,QAAS,kBAAMyP,GAAYD,IAAUpJ,KAAK,KAAxF,SACE,iCAAM,cAAC,IAAD,CAAiBvH,KAAM2Q,EAAUoB,IAASlK,MAAhD,IAA4D8I,EAAU,OAAS,cAE1E,UAGZA,EACC,cAAC7G,EAAA,EAAKvD,KAAN,UACE,cAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,SACG8T,EAAaxQ,KAAI,SAAAqR,GAAO,OACvB,cAAC3H,EAAA,EAAD,CAAKlC,GAAI,EAAGlC,GAAI,GAAhB,SACE,cAACgM,EAAA,EAAD,CACEC,gBAAYjU,EACZX,cAAUW,EACVZ,UAAU,OACV+D,KAAM,iCAAO+Q,YAAYH,GAAnB,IAA8B1M,IAAK8M,kBAAkBJ,MAC3DxU,YAAW,eAAU8H,IAAKoB,YAAYsL,IACtC7U,MAAOgF,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa2J,GAClFM,QAAuC,MAA9BhN,IAAKC,YAAYyM,GAC1BO,cAAe,SAAApV,GAAK,OAAIoL,EAAkB,CAAE/J,KAAM,eAAgBwT,UAAS7U,QAAO2D,iBAAgBuH,iBAClGmK,aAAcrQ,IAAUsQ,iBAAiBnK,EAAWxH,EAAgBuH,EAAa2J,MAV5DA,UAe/B,cAAClI,EAAA,EAAKvD,KAAN,UACE,eAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,UACG6T,EAAgBvQ,KAAI,SAAAqR,GAAO,OAAI,cAAC3H,EAAA,EAAD,CAAKpE,GAAI,GAAIkC,GAAI,EAAjB,SAAmC,cAACuK,EAAA,EAAD,aAAa5R,eAAgBA,EAAgBuH,YAAaA,EAAa2J,QAASA,GAAaF,KAAvGE,MACzD,eAAC3H,EAAA,EAAD,CAAKlC,GAAI,EAAGlC,GAAI,GAAhB,UACE,iCAAM,6CAAN,IAA0B,+BAAOX,IAAKoB,YAAY+K,QAClD,sBAAMpU,UAAS,cAAf,mBAAoCsU,EAAmBzS,QAAQoG,IAAKqN,UAAUlB,KAA9E,OAAqGI,gBAM/G,eAAC/H,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACE,cAACyM,EAAA,EAAK9D,OAAN,UACE,eAACoE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,iDAED7F,GAAY,cAAC6F,EAAA,EAAD,CAAKpE,GAAG,OAAR,SACX,cAACgE,EAAA,EAAD,CAAQ9G,QAAS0N,EAAe,SAAW,OAAQ1P,QAAS,kBAAM2P,GAAiBD,IAAetJ,KAAK,KAAvG,SACE,iCAAM,cAAC,IAAD,CAAiBvH,KAAM6Q,EAAekB,IAASlK,MAArD,IAAiEgJ,EAAe,OAAS,mBAKhGA,EACC,cAAC/G,EAAA,EAAKvD,KAAN,UACE,cAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,SACG+T,EAAczQ,KAAI,SAAAqR,GAAO,OACxB,cAAC3H,EAAA,EAAD,CAAKlC,GAAI,EAAGlC,GAAI,GAAhB,SACE,cAACgM,EAAA,EAAD,CACE5U,UAAU,OACV+D,KAAM,iCAAO+Q,YAAYH,GAAnB,IAA8B1M,IAAKoB,YAAYsL,MACrDxU,YAAW,eAAU8H,IAAKsN,eAAeZ,IACzC7U,MAAOgF,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa2J,GAClFM,QAAuC,MAA9BhN,IAAKC,YAAYyM,GAC1BO,cAAe,SAAApV,GAAK,OAAIoL,EAAkB,CAAE/J,KAAM,eAAgBwT,UAAS7U,QAAO2D,iBAAgBuH,iBAClGmK,aAAcrQ,IAAUsQ,iBAAiBnK,EAAWxH,EAAgBuH,EAAa2J,MAR5DA,UAa/B,cAAClI,EAAA,EAAKvD,KAAN,UACE,cAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,SAAuB+T,EAAczQ,KAAI,SAAAqR,GAAO,OAAI,cAAC3H,EAAA,EAAD,CAAKpE,GAAI,GAAIkC,GAAI,EAAjB,SAAmC,cAACuK,EAAA,EAAD,aAAa5R,eAAgBA,EAAgBuH,YAAaA,EAAa2J,QAASA,GAAaF,KAAvGE,aAInF,eAAClI,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACE,cAACyM,EAAA,EAAK9D,OAAN,UACE,eAACoE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,gDAED7F,GAAY,cAAC6F,EAAA,EAAD,CAAKpE,GAAG,OAAR,SACX,cAACgE,EAAA,EAAD,CAAQ9G,QAAS4N,EAAc,SAAW,OAAQ5P,QAAS,kBAAM6P,GAAgBD,IAAcxJ,KAAK,KAApG,SACE,iCAAM,cAAC,IAAD,CAAiBvH,KAAM+Q,EAAcgB,IAASlK,MAApD,IAAgEkJ,EAAc,OAAS,mBAK9FA,EACC,cAACjH,EAAA,EAAKvD,KAAN,UACE,cAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,SACGmU,EAAa7Q,KAAI,SAAAqR,GAAO,OACvB,cAAC3H,EAAA,EAAD,CAAKwI,GAAI,EAAG5M,GAAI,GAAhB,SACE,cAACgM,EAAA,EAAD,CACE5U,UAAU,OACV+D,KAAM,iCAAO+Q,YAAYH,GAAnB,IAA8B1M,IAAKoB,YAAYsL,MACrDxU,YAAW,eAAU8H,IAAKsN,eAAeZ,IACzC7U,MAAOgF,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa2J,GAClFM,QAAuC,MAA9BhN,IAAKC,YAAYyM,GAC1BO,cAAe,SAAApV,GAAK,OAAIoL,EAAkB,CAAE/J,KAAM,eAAgBwT,UAAS7U,QAAO2D,iBAAgBuH,iBAClGmK,aAAcrQ,IAAUsQ,iBAAiBnK,EAAWxH,EAAgBuH,EAAa2J,MAR5DA,UAa/B,cAAClI,EAAA,EAAKvD,KAAN,UACE,cAAC6D,EAAA,EAAD,CAAK/M,UAAU,OAAf,SAAuBmU,EAAa7Q,KAAI,SAAAqR,GAAO,OAAI,cAAC3H,EAAA,EAAD,CAAKpE,GAAI,GAAIkC,GAAI,EAAjB,SAAmC,cAACuK,EAAA,EAAD,aAAa5R,eAAgBA,EAAgBuH,YAAaA,EAAa2J,QAASA,GAAaF,KAAvGE,gB,2CCtWvE,SAASc,GAAoBC,GAAkC,IACpEjS,EAAkHiS,EAAlHjS,eADmE,EAC+CiS,EAAlGzK,UAAamD,EADsC,EACtCA,UAAWD,EAD2B,EAC3BA,cAAiBhH,EAAyDuO,EAAzDvO,SAAU+D,EAA+CwK,EAA/CxK,kBAAmB9G,EAA4BsR,EAA5BtR,SAAUD,EAAkBuR,EAAlBvR,cAGlGwR,EAAiB,2BAAQD,GAAR,IAAetH,cAChCV,EAAQtJ,GAAsBD,EACpC,OAAO,qCACL,cAAC4I,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UAAK,cAAC4I,GAAD,CAAuBnS,iBAAgBW,WAAUD,sBAC3D,eAAC4I,EAAA,EAAD,WANqB,CAAC,CAAC,OAAQ,yBAA0B,CAAC,QAAS,mBAAoB,CAAC,QAAS,oBAQ/EzJ,KAAI,mCAAE4L,EAAF,KAAQ2G,EAAR,YAClB,cAAC7I,EAAA,EAAD,CAAgBpE,GAAI,GAAIC,GAAI,EAAGiC,GAAI,EAAG9K,UAAU,OAAhD,SACE,cAAC8V,GAAD,2BACMH,GADN,IAEEI,UAAW7G,EACX8G,SAAUH,MAJJ3G,QAOTzL,EAAe0L,eAAe,SAA9B,OAAwCzB,QAAxC,IAAwCA,OAAxC,EAAwCA,EAAOa,eAAiB,cAACvB,EAAA,EAAD,CAAKpE,GAAI,GAAIC,GAAI,EAAGiC,GAAI,EAAG9K,UAAU,OAArC,SACjE,cAAC8V,GAAD,2BACMH,GADN,IAEEI,UAAU,SACVC,SAAS,6BAIf,cAACjJ,EAAA,EAAD,UAvBsE,CAAC,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,0BAA2B,GAAI,CAAC,WAAY,sBAAuB,IAyBnLzJ,KAAI,YAAyB,IAAD,mBAAtB4L,EAAsB,KAAhB2G,EAAgB,KAATI,EAAS,KACpCC,EAAU9H,GAAa6H,EAC3B,OAAKxS,EAAe0L,eAAeD,EAA9B,OAAoCxB,QAApC,IAAoCA,OAApC,EAAoCA,EAAOa,cACzC,cAACvB,EAAA,EAAD,CAAgBpH,MAAO,CAAEiE,QAASqM,EAAU,EAAI,IAAOtN,GAAI,GAAIC,GAAI,EAAG7I,UAAU,OAAhF,SACL,cAAC8V,GAAD,2BACMH,GADN,IAEEI,UAAW7G,EACX8G,SAAUH,MAJG3G,GADqD,UAU1E,cAACnC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,qBAAIhN,UAAU,cAAd,+BAA+CmO,SAGnD,cAACpB,EAAA,EAAD,CAAK/M,UAAU,QAAf,SAEG,YAAI2P,MAAM,GAAGC,QAAQtM,KAAI,SAAAiG,GACxB,IAAI2F,EAAI,uBAAmB3F,EAAI,GAC/B,OAAO,cAACyD,EAAA,EAAD,CAAapE,GAAI,GAAIC,GAAI,EAAG7I,UAAU,OAC3C4F,MAAO,CAAEiE,QAASsE,EAAgB5E,EAAI,EAAI,IADrC,SAEL,cAACuM,GAAD,2BACMH,GADN,IAEEI,UAAW7G,EACX8G,SAAQ,2BAAsBzM,EAAI,GAClC4M,aAAc,kBAAMhP,GAAY+D,EAAkB,CAAEiD,cAAgB5E,EAAI,IAAO4E,EAAgB5E,EAAIA,EAAI,SAN1FA,WAazB,IAAM6M,GAAqB,CACzBC,iBAyBF,YAAsC,IAAD,EAAT7R,EAAS,EAATA,MACpBgI,EAAO,mBACb,OAAO,cAACC,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,cAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,SACtD,uBAAMA,UAAU,oBAAhB,UAAqCiI,IAAKoB,YAAYmD,GAAtD,IAA6D,cAACmC,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAA5G,IAA6H,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAAzK,cAA2LwE,EAAMgI,UAAjM,aAA2L,EAAa3K,QAAQoG,IAAKqN,UAAU9I,YA3BjOgK,mBA8BF,YAAwC,IAAD,EAAThS,EAAS,EAATA,MACtBgI,EAAO,qBACb,OAAO,cAACC,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,cAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,SACtD,uBAAMA,UAAU,sBAAhB,UAAuCiI,IAAKoB,YAAYmD,GAAxD,IAA+D,cAACmC,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAA9G,IAA+H,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAA5K,cAA8LwE,EAAMgI,UAApM,aAA8L,EAAa3K,QAAQoG,IAAKqN,UAAU9I,YAhCpOkK,eAmCF,YAAoC,IAAD,EAATlS,EAAS,EAATA,MAClBgI,EAAO,iBACb,OAAO,cAACC,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,cAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,SACtD,uBAAMA,UAAU,kBAAhB,UAAmCiI,IAAKoB,YAAYmD,GAApD,IAA2D,cAACmC,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAA1G,IAA2H,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAAvK,cAAyLwE,EAAMgI,UAA/L,aAAyL,EAAa3K,QAAQoG,IAAKqN,UAAU9I,YArC/NoK,eA+CF,YAA+B,IAAD,EAATpS,EAAS,EAATA,MAAS,EACNjE,mBAAS8L,OAAOuD,KAAKiH,IAAmB,IADlC,mBACrB3C,EADqB,KAChB4C,EADgB,KAEtBtK,EAAI,UAAM0H,EAAN,cACV,OAAO,cAACzH,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,eAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,UACtD,cAAC+W,GAAA,EAAD,CAAgB7M,KAAK,KAAK8F,MAAO6G,GAAkB3C,GAAMlU,UAAU,iBAAiB8F,QAAQ,UAA5F,SACGuG,OAAOY,QAAQ4J,IAAmBvT,KAAI,mCAAE9B,EAAF,KAAOwV,EAAP,YAAoB,cAACzG,EAAA,EAAS1M,KAAV,CAAyBC,QAAS,kBAAMgT,EAAOtV,IAA/C,SAAsDwV,GAAlCxV,QAEjF,uBAAMxB,UAAS,eAAUkU,EAAV,QAAf,wBAAsC1P,EAAMgI,UAA5C,aAAsC,EAAa3K,QAAQoG,IAAKqN,UAAU9I,aArD5EyK,cAwDF,YAAmC,IAAD,EAATzS,EAAS,EAATA,MACjBgI,EAAO,gBACP0K,EAAc,cAACC,GAAA,EAAD,CAClB3R,UAAU,MACVC,QAAS,eAAC2R,GAAA,EAAD,CAAS1R,GAAG,kBAAZ,6CAA8D,sBAAM1F,UAAU,WAAhB,wBAFrD,SAIlB,cAAC,IAAD,CAAiB2C,KAAMgD,IAAkB3F,UAAU,OAAO4F,MAAO,CAAEC,OAAQ,YAE7E,OAAO,cAAC4G,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,cAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,SACtD,uBAAMA,UAAU,iBAAhB,UAAkCiI,IAAKoB,YAAYmD,GAAnD,IAA0D,cAACmC,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAAvG,IAAwH,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAApK,KAAsL,wBAAOA,UAAU,gBAAjB,yBAA8CkX,EAA9C,OAAtL,cAA2P1S,EAAMgI,UAAjQ,aAA2P,EAAa3K,QAAQoG,IAAKqN,UAAU9I,YAhEjS6K,eA0EF,YAAoC,IAAD,EAAT7S,EAAS,EAATA,MAAS,EACXjE,mBAAS8L,OAAOuD,KAAK0H,IAAwB,IADlC,mBAC1BpD,EAD0B,KACrB4C,EADqB,KAE3BtK,EAAe,YAAR0H,EAAoB,iBAApB,UAA0CA,EAA1C,mBACb,OAAO,cAACzH,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,SAAiD,eAAC+D,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,MAArB,UACtD,cAAC+W,GAAA,EAAD,CAAgB7M,KAAK,KAAK8F,MAAOsH,GAAuBpD,GAAMlU,UAAU,iBAAiB8F,QAAQ,UAAjG,SACGuG,OAAOY,QAAQqK,IAAwBhU,KAAI,mCAAE9B,EAAF,KAAOwV,EAAP,YAAoB,cAACzG,EAAA,EAAS1M,KAAV,CAAyBC,QAAS,kBAAMgT,EAAOtV,IAA/C,SAAsDwV,GAAlCxV,QAEtF,uBAAMxB,UAAS,eAAUkU,EAAV,QAAf,wBAAsC1P,EAAMgI,UAA5C,aAAsC,EAAa3K,QAAQoG,IAAKqN,UAAU9I,cA/E9E,SAASoJ,GAAT,GAA0K,IAA/InS,EAA8I,EAA9IA,eAAgBW,EAA8H,EAA9HA,SAAUD,EAAoH,EAApHA,cAC7CuJ,EAAQtJ,GAAsBD,EACpC,IAAKuJ,EAAO,OAAO,KACnB,IAAM6J,EAAa7J,EAAMa,aACnBiJ,EAAW,YAAQC,KAAsBF,IAAe,IAE9D,OADKC,EAAYE,SAAS,kBAAqD,aAAjCjU,EAAe+K,eAA8BgJ,EAAY9L,KAAK,iBACrG,cAACe,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,SACL,cAACyM,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,YAArB,SACE,cAAC+M,EAAA,EAAD,CAAK/M,UAAU,QAAf,SACGwX,EAAYlU,KAAI,SAAA9B,GACf,IAAMmW,EAAMvB,GAAmB5U,GAC/B,OAAKmW,EACE,cAAC3K,EAAA,EAAD,CAAKpE,GAAG,OAAO5I,UAAU,OAAzB,SAA0C,cAAC2X,EAAD,CAAKnT,MAAOkJ,KAAjBlM,GAD3B,cA0B3B,IAAMqV,GAAoB,CACxB,KAAQ,iCAAO5O,IAAKoB,YAAY,kBAAxB,IAA2C,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAAvF,IAAwG,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS+I,MAAO5X,UAAU,mBAC7J,QAAW,iCAAOiI,IAAKoB,YAAY,qBAAxB,IAA8C,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAA7F,IAA8G,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS+I,MAAO5X,UAAU,mBACtK,KAAQ,iCAAOiI,IAAKoB,YAAY,kBAAxB,IAA2C,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAAvF,IAAwG,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS+I,MAAO5X,UAAU,mBAC7J,MAAS,iCAAOiI,IAAKoB,YAAY,mBAAxB,IAA4C,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAAzF,IAA0G,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS+I,MAAO5X,UAAU,oBAwBlK,IAAMsX,GAAyB,CAC7B,QAAW,uBAAMtX,UAAU,kBAAhB,UAAmCiI,IAAKoB,YAAY,kBAApD,IAAuE,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAAtH,IAAuI,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAApL,IAAqM,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAAjP,IAAkQ,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAA9S,IAA+T,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASgJ,IAAK7X,UAAU,mBACrX,KAAQ,iCAAOiI,IAAKoB,YAAY,uBAAxB,IAAgD,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAA5F,IAA6G,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASgJ,IAAK7X,UAAU,mBAChK,QAAW,iCAAOiI,IAAKoB,YAAY,0BAAxB,IAAmD,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASyH,QAAStW,UAAU,gBAAlG,IAAmH,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASgJ,IAAK7X,UAAU,mBACzK,KAAQ,iCAAOiI,IAAKoB,YAAY,uBAAxB,IAAgD,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAA5F,IAA6G,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASgJ,IAAK7X,UAAU,mBAChK,MAAS,iCAAOiI,IAAKoB,YAAY,wBAAxB,IAAiD,cAACsF,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAA9F,IAA+G,cAAC2O,EAAA,EAAD,CAAO7F,IAAK8F,IAAOC,SAASgJ,IAAK7X,UAAU,oBAarK,IAAM8X,GAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAaxC,SAAShC,GAAT,GAAuN,IAA3LrS,EAA0L,EAA1LA,eAA0L,IAA1KwH,UAAyB8M,GAAiJ,EAA7JzJ,WAA6J,EAAjJyJ,iBAAoB7M,EAA6H,EAA7HA,kBAAmB6K,EAA0G,EAA1GA,UAAWC,EAA+F,EAA/FA,SAAU5H,EAAqF,EAArFA,UAAWjK,EAA0E,EAA1EA,cAAeC,EAA2D,EAA3DA,SAAU+C,EAAiD,EAAjDA,SAAUgP,EAAuC,EAAvCA,aACzKzI,EAAQtJ,GAAsBD,EAClC,IAAKuJ,EAAO,OAAO,KACnB,IAAIsK,EAA6B,KAE7BC,EAAe,EACnB,GAAIlC,KAAagC,EAAiB,CAAC,IAAD,EAC1BG,EAAkBH,EAAgBhC,GAClCoC,EAAkB,UAAGzK,EAAM,GAAD,OAAIqI,EAAJ,iBAAR,QAAiC,EAEzD,GADAkC,EAAeC,EAAkBC,EAC7BhR,EAAU,CAKZ6Q,EAAS,cAACvL,EAAA,EAAK9D,OAAN,UACP,cAACoO,GAAA,EAAD,CAAgB/G,MAAK,qBAAgBiI,EAAe,GAApD,SACG,YAAItI,MAAMmI,GAAa1J,IAA4B,SAAd2H,GAAyBoC,EAAiB,EAAJ,IAAQvI,QAAQtM,KAAI,SAAAiG,GAAC,OAC/F,cADmG,CAClGgH,EAAA,EAAS1M,KAAV,CAAuBC,QAAS,kBAPRsU,EAOwC7O,EANpEwO,EAMyDhC,GANjCqC,OACxBlN,EAAkB,CAAE6M,oBAFC,IAAOK,GAOxB,wBAAgF7O,EAAI4O,EAAa,IAA7E5O,eAI1ByO,EAAS,cAACvL,EAAA,EAAK9D,OAAN,kCAA+BsP,EAAe,KAG3D,IAAMI,EAAc5U,EAAe6U,eAAevC,EAAWrI,GACvD6K,EAAWF,GAAe,cAACtL,EAAA,EAAD,UAAK,cAACC,EAAA,EAAD,UACnC,cAACP,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAAoB1I,UAAU,OAA3D,SACE,cAAC+N,EAAA,EAAD,CAAW/N,UAAU,aAAa8F,QAAQ,QAA1C,SACGoK,YAAcmI,EAAa3K,GAAOpK,KAAI,SAACW,EAAOsF,GAAR,OACrC,cAACvF,EAAA,EAAD,CAAsBE,MAAOqF,EAAStF,QAAOE,gBAAeC,YAAzCmF,cAKrBiP,EAAc/U,EAAe0L,eAAe4G,EAAWrI,EAAMa,cAC7Dd,EAAQ,OAAG+K,QAAH,IAAGA,OAAH,EAAGA,EAAa/K,SAC9B,OAAO,eAAChB,EAAA,EAAD,CAAMhE,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,QAA5D,UACJgY,EACD,eAACvL,EAAA,EAAKvD,KAAN,CAAWlJ,UAAU,QAArB,UACE,eAAC+M,EAAA,EAAD,CAAK/M,UAAS,+BAA2BmH,GAAYgP,EAAgB,iBAAmB,IAAMrS,QAASqS,EAAvG,UACE,cAACnJ,EAAA,EAAD,CAAKpE,GAAG,OAAO5I,UAAU,mCAAzB,SACE,cAAC2O,EAAA,EAAD,CAAO7F,IAAG,OAAE0P,QAAF,IAAEA,OAAF,EAAEA,EAAapJ,IAAKpP,UAAU,gBAE1C,eAACgN,EAAA,EAAD,CAAKhN,UAAU,cAAf,UACE,cAACyM,EAAA,EAAKtD,MAAN,iBAAaqP,QAAb,IAAaA,OAAb,EAAaA,EAAazU,OAC1B,cAAC0I,EAAA,EAAKgM,SAAN,UAAgBzC,UAInBvI,EAAW,cAACD,EAAD,CAAuBC,WAAUvC,oBAAmB/G,gBAAeC,WAAU+C,aAAiB,KACzGoR,Q,wBCnNMhU,GAAgCmU,6BAAc9X,GAErD+X,GAAaC,IAAMC,YACvB,WAAoEC,GAAc,IAA/EC,EAA8E,EAA9EA,SAAUnT,EAAoE,EAApEA,MAAO5F,EAA6D,EAA7DA,UAA8BgZ,EAA+B,EAAlD,mBAC7B,OACE,qBACEF,IAAKA,EACLlT,MAAO,CAAEA,QAAOqT,SAAU,SAC1BjZ,UAAWA,EACXkZ,kBAAiBF,EAJnB,SAME,cAACjM,EAAA,EAAD,UACG6L,IAAMO,SAASC,QAAQL,GAAUzV,KAAI,SAAC+V,EAAO9P,GAAR,OAAc,cAACyD,EAAA,EAAD,CAAapE,GAAI,EAAjB,SAAqByQ,GAAX9P,aAMlE+P,GAAmB,SAAC/V,GAAD,MAA+B,CACtDA,aAAY,OAAEA,QAAF,IAAEA,IAAgB,GAC9BoE,MAAO,EACPyG,UAAW,EACXmL,QAAS,SACTC,aAAc,KACdtN,kBAAmBG,OAAOC,YAAYC,IAAYjJ,KAAI,SAAAkJ,GAAI,MAAI,CAACA,EAAM,QACrE2E,kBAAmB,GACnBsI,kBAAmB,GACnBvI,OAAQ,CACN1P,IAAK,GACLmG,MAAO,EACPyG,UAAW,EACXuE,YAAa,GAEfoF,gBAAiB,CACf2B,KAAM,EACNC,MAAO,EACPC,MAAO,GAETC,aAAc,GACd1L,cAAe,IAmBjB,SAAS2L,GAAiBtZ,EAAmBuZ,GAA0C,IAAD,EACpF,GAAI,SAAUA,EAAQ,cAAQA,QAAR,IAAQA,OAAR,EAAQA,EAAQ5Y,MACpC,IAAK,YACH,OAAO,2BAAKX,GAAUuZ,EAAO9O,WAC/B,IAAK,SACH,OAAO,2BAAKzK,GAAZ,UAAsByC,IAAS+W,SAASxZ,EAAM+C,qBAA9C,QAA+D,IACjE,IAAK,eAAiB,IACZoR,EAAiDoF,EAAjDpF,QAAS7U,EAAwCia,EAAxCja,MAAO2D,EAAiCsW,EAAjCtW,eAAgBuH,EAAiB+O,EAAjB/O,YAClCyO,EAAoBjZ,EAAMiZ,kBAMhC,OALoB3U,IAAUsQ,iBAAiB5U,EAAOiD,EAAgBuH,EAAa2J,KAC/D7U,SACX2Z,EAAkB9E,GAEzB8E,EAAkB9E,GAAW7U,EACxB,2BAAKU,GAAZ,IAAmBiZ,sBAKvB,OAAO,2BAAKjZ,GAAUuZ,GAYT,SAASE,GAAT,GAAuO,IAAD,QAAtM1W,aAAc2W,OAAwL,MAArK,GAAqK,EAAtJC,EAAsJ,EAAjKlP,UAA2CmP,EAAsH,EAAvIC,gBAAsCC,EAAiG,EAAjGA,OAAkBC,EAA+E,EAAzFnW,SAAyF,IAAjE+C,gBAAiE,SAA/CqT,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,QAAsC,EAC5MC,qBAAWZ,GAAkBR,GAAiBY,IAD8J,mBAC5OjP,EAD4O,KACjOC,EADiO,OAEvL3K,oBAAS,GAF8K,mBAE5O8D,EAF4O,KAEpNsW,EAFoN,KAG7OC,EAAcC,kBAAO,GACrBxK,EAAe3M,YAAW4M,IAAYxE,SAAU,IAChDvI,EAAY,iBAAG4W,QAAH,IAAGA,OAAH,EAAGA,EAAe5W,oBAAlB,QAAkC0H,EAAU1H,aACxDE,EAAiBC,YAAWC,KAAeC,IAAIL,GAAe,CAACA,IAC/DyH,EAActH,YAAW4M,IAAY1M,IAAIqH,EAAUiG,OAAO1P,KAAM,CAACyJ,EAAUiG,OAAO1P,MAClFqK,EAAiBnI,YAAWmD,IAAciF,SAAU,IAE1D9K,qBAAU,WAAO,IAAD,EACd,GAAKkZ,EAAL,CACA,IAAMY,EAAI,2BAAQxB,GAAiBY,IAAzB,UAA+CjX,IAAS+W,SAASE,UAAjE,QAAsF,IAChGhP,EAAkB,CAAE/J,KAAM,YAAa8J,UAAW6P,OACjD,CAACZ,IAEJlZ,qBAAU,WACR,GAAKmZ,EAAL,CACA,IAAMW,EAAI,2BAAQxB,GAAiBa,EAAc5W,eAAkB4W,GACnEjP,EAAkB,CAAE/J,KAAM,YAAa8J,UAAW6P,OACjD,CAACX,IAEJnZ,qBAAU,WAEJ4Z,EAAYG,QACdH,EAAYG,SAAU,EAIxB5T,GAAYlE,IAAS+X,WAAW/P,KAC/B,CAACA,EAAW9D,IAGfnG,qBAAU,WACR,IAAKiK,EAAUiG,OAAO1P,KAAO6O,GAAgB5M,EAAgB,CAC3D,IAAMwX,EAAkB3K,IAAYQ,iBAAiBT,EAAc5M,EAAe+K,eAE3E0M,EAHoD,YAGvC7O,OAAOY,QAAQgO,GAAiB9X,MAAK,qCAAMgY,GAAN,8BAAiBC,GAAjB,kBAA0BD,EAAInK,OAASoK,EAAIpK,UAAQ,GAHjD,MAI3D/F,EAAUiG,OAAO1P,IAAM0Z,EACvBhQ,EAAkB,CAAEgG,OAAQjG,EAAUiG,YAEvC,CAACzN,EAAgB4M,IAEpBrP,qBAAU,WACJyC,GAAkB,YAAaA,EAAemD,QAAUqE,EAAUqD,YACpEpD,EAAkB,CAAEoD,WAAYjC,OAAOuD,KAAKnM,EAAemD,MAAMyU,SAAS,OAC3E,CAACpQ,EAAUqD,WAAY7K,IAE1B,IAAM4W,EAAkB1Z,uBACtB,SAAA2a,GACE,IAAI9a,EAAQ8Y,GAAiBgC,GACvBR,EAAO7X,IAAS+W,SAASsB,GAC3BR,IAAMta,EAAK,2BAAQA,GAAUsa,IACjC5P,EAAkB,CAAE/J,KAAM,YAAa8J,UAAWzK,IAC9C8a,IAAY/X,IACK,OAAnB6W,QAAmB,IAAnBA,KAAsBkB,MACvB,CAAC/X,EAAc2H,EAAmBkP,IAEjChW,EAAWM,mBAAQ,WACvB,GAAK6V,EAAL,CACA,IAAMnW,EAAWmW,GAAgBgB,YAAUhB,GAG3C,OAFAnW,EAASmV,QAAUtO,EAAUsO,QAC7BnV,EAASoV,aAAevO,EAAUuO,aAC3BpV,KACN,CAACmW,EAActP,EAAUsO,QAAStO,EAAUuO,eAE5BgC,EAAavQ,EAAxBE,UAEF5E,EAAuB,iBAAGnC,QAAH,IAAGA,OAAH,EAAGA,EAAUmC,+BAAb,QAAwC,EAC/DpC,EAAgBO,mBAAQ,kBAAMjB,GAAkBuH,GAAea,GAAkB/G,IAAU2W,eAAexQ,EAAWxH,EAAgBuH,EAAaa,EAAgBtF,KAA0B,CAAC0E,EAAWxH,EAAgBuH,EAAaa,EAAgBtF,IAErPmV,GAAkB,CAAEzQ,YAAW7G,WAAUD,eAAiBC,GAAYC,EAA0BF,OAAgBvD,EAAWuG,WAAU+D,oBAAmB7G,0BAC1JmX,IAAWE,GAAwBvQ,UAAYqQ,GAEnD,IAAMG,GAAiClY,GAAkBuH,GAAe,cAAC4Q,GAAA,EAAD,CAAmCnY,iBAAgBuH,cAAaC,YAAWC,oBAAmB9G,WAAUD,gBAAiBnE,UAAU,SAC3M,OAAQ,eAACyM,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAA7B,UACN,cAAC+D,EAAA,EAAK9D,OAAN,UACE,eAACoE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKpE,GAAI,OAAQ5I,UAAU,UAA3B,SAEE,cAAC6b,GAAD,CAAoBpY,eAAgBA,EAAgBwH,UAAWA,EAAWD,YAAaA,EAAa7D,SAAUA,EAAU+D,kBAAmBA,EAAmBmP,gBAAiBA,MAEhLxN,QAAQtG,IAA4B,cAACyG,EAAA,EAAD,CAAKpE,GAAG,OAAR,SAAe,cAACkE,EAAA,EAAD,CAAO9M,UAAU,kBAAkB8F,QAAQ,SAA3C,SAAqD,6DAAgCS,SAExInC,EAAW,cAAC4I,EAAA,EAAD,CAAKpE,GAAG,OAAR,SACV,eAAC6H,EAAA,EAAD,WACE,cAAC7D,EAAA,EAAD,CAAQ9G,QAASzB,EAAyB,UAAY,UAAWpE,UAAWoE,EAAwBP,QAAS,kBAAM6W,GAA0B,IAA7I,SACE,8DAEF,cAAC/N,EAAA,EAAD,CAAQ9G,QAAUzB,EAAqC,UAAZ,UAAuBpE,SAAUoE,EAAwBP,QAAS,kBAAM6W,GAA0B,IAA7I,SACE,8EAGG,KACR9N,QAAQ2N,IAAY,cAACxN,EAAA,EAAD,CAAKpE,GAAG,OAAR,SACnB,cAACgE,EAAA,EAAD,CAAQ9G,QAAQ,SAAShC,QAAS0W,EAAlC,SACE,cAAC,IAAD,CAAiB7X,KAAMmZ,eAI9BvY,GAAgBE,GAAkBuH,GAAe,cAACyB,EAAA,EAAKvD,KAAN,UAChD,cAAC3E,GAA8BwX,SAA/B,CAAwCjc,MAAOuE,EAA/C,SACE,eAAC2X,EAAA,EAAIC,UAAL,CAAeC,iBAAkBzB,IAAqBrW,EAAW,eAAiB,aAAc+X,cAAc,EAAMC,eAAe,EAAnI,UACE,eAACC,EAAA,EAAD,CAAKvW,QAAQ,QAAQ9F,UAAU,YAAYsc,MAAI,EAA/C,UACE,cAACD,EAAA,EAAIxY,KAAL,UACE,cAACwY,EAAA,EAAIE,KAAL,CAAUC,SAAS,YAAnB,SAA+B,oBAAIxc,UAAU,OAAd,2BAEhCoE,EAAW,cAACiY,EAAA,EAAIxY,KAAL,UACV,cAACwY,EAAA,EAAIE,KAAL,CAAUC,SAAS,eAAnB,SAAkC,oBAAIxc,UAAU,OAAd,+BACtB,KACd,cAACqc,EAAA,EAAIxY,KAAL,UACE,cAACwY,EAAA,EAAIE,KAAL,CAAUC,SAAS,YAAnB,SAA+B,oBAAIxc,UAAU,OAAd,SAAsBoE,EAAW,oBAAsB,kBAExF,cAACiY,EAAA,EAAIxY,KAAL,UACE,cAACwY,EAAA,EAAIE,KAAL,CAAUC,SAAS,SAAnB,SAA4B,oBAAIxc,UAAU,OAAd,4BAGhC,eAACgc,EAAA,EAAIS,QAAL,WACE,eAACT,EAAA,EAAIU,KAAL,CAAUF,SAAS,YAAnB,UACGb,GACD,cAACzN,EAAD,aAAuBzK,eAAgBA,EAAgBuH,YAAaA,GAAiB0Q,QAEvF,eAACM,EAAA,EAAIU,KAAL,CAAUF,SAAS,YAAnB,UACGb,GACD,cAAC,EAAD,aAAuBlY,eAAgBA,EAAgBuH,YAAaA,EAAaG,eAAWvK,GAA5F,2BAAgH8a,IAAhH,IAAiItX,cAAUxD,EAAWuD,uBAEvJC,EAAW,eAAC4X,EAAA,EAAIU,KAAL,CAAUF,SAAS,eAAnB,UACTb,GACD,cAAC,EAAD,aAAuBlY,eAAgBA,EAAgBuH,YAAaA,EAAaG,eAAWvK,GAAe8a,QAC/F,KACd,eAACM,EAAA,EAAIU,KAAL,CAAUF,SAAS,SAAnB,UACGb,GACD,cAAClG,GAAD,aAAqBhS,eAAgBA,GAAoBiY,kBAMlEpB,GAAU,cAAC7N,EAAA,EAAKzC,OAAN,UACRsQ,OAaP,SAASuB,GAAT,GAA+M,IAAjLpY,EAAgL,EAAhLA,eAAgBuH,EAAgK,EAAhKA,YAAaC,EAAmJ,EAAnJA,UAAmJ,IAAxIA,UAAwI,IAA3HqD,kBAA2H,MAA9G,QAA8G,MAArG3G,aAAqG,MAA7F,EAA6F,MAA1FyG,iBAA0F,MAA9E,EAA8E,EAAzEjH,EAAyE,EAAzEA,SAAU+D,EAA+D,EAA/DA,kBAAmBmP,EAA4C,EAA5CA,gBAC1JsC,EAAoBlZ,EAAiB,iCACzC,cAACkL,EAAA,EAAD,CAAO7F,IAAKrF,EAAemZ,SAAU5c,UAAU,0BAA0BqP,eAAa,IACtF,qBAAIrP,UAAU,WAAd,cAA2ByD,EAAeM,KAA1C,UACQ,sDACJqN,EAAWzQ,uBAAY,SAACgH,GAC5BA,EAAQ2J,YAAM3J,EAAO,EAAG,IACxB,IAAMyG,EAAYmD,IAAkBC,WAAU,SAAAC,GAAO,OAAI9J,GAAS8J,KAClEvG,EAAkB,CAAEvD,QAAOyG,gBAC1B,CAAClD,IACEwG,EAAiBH,IAAkBC,WAAU,SAAAC,GAAO,OAAI9J,IAAU8J,KAAW,EAC7EE,EAAehR,uBAAY,WAC/B,IAAMiR,EAAiBL,IAAkBC,WAAU,SAAAC,GAAO,OAAI9J,IAAU8J,KACtCvG,EAA9BkD,IAAcwD,EAAkC,CAAExD,UAAWA,EAAY,GACtD,CAAEA,UAAWwD,MACnC,CAAC1G,EAAmBkD,EAAWzG,IAClC,OAAO,mCAAGR,EAAW,eAACsL,EAAA,EAAD,WACnB,eAAChC,EAAA,EAAD,CAAaD,GAAIiC,IAAWC,QAA5B,UACE,eAACnC,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACE,cAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAArB,SACG+P,IAEH,cAACpM,EAAA,EAASpG,KAAV,CAAeqG,GAAImI,GAAnB,SACG,YAAI,IAAI3S,IAAI6W,MAAmB1Z,OAAOG,KAAI,SAAA2D,GAAO,OAAI,cAAC6V,GAAD,CAAgCvZ,aAAc0D,EAASoT,gBAAiBA,GAAjDpT,YAGlE,OAAdxD,QAAc,IAAdA,OAAA,EAAAA,EAAgBmD,QAAS,mBAAanD,QAAb,IAAaA,OAAb,EAAaA,EAAgBmD,QAAS,eAAC2J,EAAA,EAAD,CAAUC,GAAIC,IAAd,UAC9D,cAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAAQ5M,UAAS,eAAUsO,GAAhD,SACE,iCAASyO,IAAczO,GAAYvK,SAErC,cAACwM,EAAA,EAASpG,KAAV,UACGkC,OAAOuD,KAAKnM,EAAemD,MAAMyU,SAAS/X,KAAI,SAAA0Z,GAAM,OACnD,cAACzM,EAAA,EAAS1M,KAAV,CAA4B7D,UAAS,eAAUgd,GAAUlZ,QAAS,kBAAMoH,EAAkB,CAAEoD,WAAY0O,KAAxG,SAAmH,iCAASD,IAAcC,GAAQjZ,QAA9HiZ,cAI5B,cAACvK,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWG,KAAZ,UAAiB,+CAGnB,cAACH,EAAA,EAAWI,OAAZ,UACE,cAAChT,EAAA,EAAD,CAAmBM,iBAAaS,EAAWZ,UAAU,QAAQD,SAAUqR,EAAUtR,MAAO6H,EAAOrH,IAAK,EAAGD,IAAK,GAAIJ,UAAWwD,MAE7H,cAACgP,EAAA,EAAWI,OAAZ,UACE,cAACjG,EAAA,EAAD,CAAQ3M,UAAWyR,IAAmBjO,EAAgBK,QAAS6N,EAA/D,SAA6E,wCAAWJ,IAAkBnD,UAE5G,cAACqC,EAAA,EAAD,CAAaD,GAAIiC,IAAWI,OAA5B,SACE,eAACtC,EAAA,EAAD,CAAUC,GAAIC,IAAd,UACE,cAACF,EAAA,EAAStG,OAAV,CAAiBuG,GAAI5D,IAAQ3M,UAAWwD,EAAxC,0BACA,cAAC8M,EAAA,EAASpG,KAAV,UACG2I,IAAgBxP,KAAI,YAAe,IAAD,mBAAZyP,EAAY,KAARvC,EAAQ,KAE3BwC,EADYD,IAAOxB,IAAkBf,GACnB,cAAUuC,GAAV,cAAwBA,EAAxB,YAA8BxB,IAAkBf,IACxE,OAAO,cAACyM,EAAA,EAAD,CAAkCnZ,QAAS,kBAAMoH,EAAkB,CAAEvD,MAAOoL,EAAI3E,UAAWoC,KAA3F,SAAmGwC,GAAnG,UAAsBD,EAAtB,YAA4BvC,iBAK7B,iCAAOmM,EAAP,IAA2BlZ,GAAkBuH,GAAelG,IAAUmK,eAAehE,QAEvG,SAAS6R,GAAT,GAA8D,IAAlCvZ,EAAiC,EAAjCA,aAAc8W,EAAmB,EAAnBA,gBAClC5W,EAAiBC,YAAWC,KAAeC,IAAIL,GAAe,CAACA,IACrE,OAAKE,EACE,cAAC8M,EAAA,EAAS1M,KAAV,CAAeC,QAAS,kBAAMuW,EAAgB9W,IAAevD,UAAU,YAAvE,SACL,eAAC+M,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKpE,GAAG,OAAR,SAAe,cAAC+F,EAAA,EAAD,CAAO7F,IAAKrF,EAAemZ,SAAU5c,UAAS,oCAA+ByD,EAAesL,KAA9C,QAA0D/F,WAAS,MAChI,cAACgE,EAAA,EAAD,UAAMvJ,EAAeM,YAJG,O,sLChUf,SAASmZ,EAAT,GAC6K,IAD9IlP,EAC6I,EAD7IA,YAAamP,EACgI,EADhIA,iBAAkBC,EAC8G,EAD9GA,eAAgBrZ,EAC8F,EAD9FA,KAAM9D,EACwF,EADxFA,SAAUuE,EAC8E,EAD9EA,MAC8E,cACvI2Y,EADuI,UAClLE,OADkL,MACjK,EADiK,EAC9JC,EAD8J,KAEzL,IAAKtP,EAAa,OAAOjK,EACzB,GAAI,WAAYiK,EAAa,CAC3B,IAAMxN,EAAQ8c,EAAsBtP,EAAYuP,OAAOD,GAAuBjR,OAAOmR,OAAOxP,EAAYuP,QAAQ,GAC1G7U,EAA0B,IAAnB2U,EAAuB,aAAe,iCAAO7c,EAAMuD,KAAb,IAAqB8J,YAAWrN,EAAOid,SAAUjZ,GAAmB,EAA/C,YAAyD6Y,EAAzD,iBAAgFA,EAAiB,EAAI,IAAM,IAAQ,MACrLK,EAAQ,cAACpO,EAAA,EAAD,CAAOxJ,QAA4B,IAAnBuX,EAAuB,YAAc,UAArD,SAAiE3U,IAC/E,OAAO,eAAC6H,EAAA,EAAD,WACL,cAACA,EAAA,EAAStG,OAAV,CAAiBC,KAAK,KAAKjK,SAAUA,EAArC,SACE,qBAAID,UAAU,gBAAgB4F,MAAO,CAAE+X,WAAY,UAAnD,UAAgE5Z,EAAhE,IAAuE2Z,OAEzE,eAACnN,EAAA,EAASpG,KAAV,WACE,cAACoG,EAAA,EAAS1M,KAAV,CAAeC,QAAS,kBAAMsZ,EAAe,CAAC,KAA9C,SACE,gDAED/Q,OAAOY,QAAQe,EAAYuP,QAAQja,KAAI,WAA2BiG,GAA3B,uBAAE6J,EAAF,KAAYwK,EAAZ,YACtC,cAAC,IAAMhN,SAAP,UACG,YAAIjB,MAAMiO,EAAQH,UAAU7N,QAAQtM,KAAI,SAAAua,GAAC,OAAIA,EAAI,KAAGva,KAAI,SAACwa,EAAOvU,GAAR,OACvD,eAACgH,EAAA,EAAS1M,KAAV,CAAkCC,QAAS,kBAAMsZ,EAAe,CAACU,EAAO1K,KAAxE,UACGwK,EAAQ7Z,KAAM6Z,EAAQH,SAAW,EAAnB,YAA4BK,EAA5B,iBAA0CA,EAAQ,EAAI,IAAM,IAAO,KADhE1K,EAAW7J,OAFdA,YAU3B,IAAMkU,EAAW5P,YAAWG,EAAayP,SAAUjZ,GACnD,GAAIiZ,EAAW,EAAG,CAEhB,IAAMC,EAAQ,cAACpO,EAAA,EAAD,CAAOxJ,QAA4B,IAAnBuX,EAAuB,YAAc,UAArD,SAAiEA,EAAiB,EAAjB,UAAwBA,EAAxB,iBAA+CA,EAAiB,EAAI,IAAM,IAAO,eAChK,OAAO,eAAC9M,EAAA,EAAD,WACL,cAACA,EAAA,EAAStG,OAAV,CAAiBC,KAAK,KAAKjK,SAAUA,EAArC,SACE,qBAAID,UAAU,gBAAgB4F,MAAO,CAAE+X,WAAY,UAAnD,UAAgE5Z,EAAhE,IAAuE2Z,OAEzE,eAACnN,EAAA,EAASpG,KAAV,WACE,cAACoG,EAAA,EAAS1M,KAAV,CAAeC,QAAS,kBAAMsZ,EAAe,CAAC,KAA9C,SACE,gDAED,YAAIzN,MAAM8N,GAAU7N,QAAQtM,KAAI,SAAAua,GAAC,OAAIA,EAAI,KAAGva,KAAI,SAAAwa,GAAK,OACpD,cAACvN,EAAA,EAAS1M,KAAV,CAA2BC,QAAS,kBAAMsZ,EAAe,CAACU,KAA1D,mBACMA,EADN,iBACoBA,EAAQ,EAAI,IAAM,KADlBA,YAKrB,OAAiB,IAAbL,EACF,cAAC7Q,EAAA,EAAD,CAAQ1C,KAAK,KAAKpG,QAAS,kBAAMsZ,EAAe,CAACC,EAAiB,EAAI,KAAKpd,SAAUA,EAArF,SACL,qBAAID,UAAU,OAAd,UAAqB,cAAC,IAAD,CAAiB2C,KAAM0a,EAAiBU,IAAgBC,MAA7E,IAA2Fja,OAI1F,K,qBC3CM,SAASkK,EAAT,GAA6I,IAA/GD,EAA8G,EAA9GA,YAAa7J,EAAiG,EAAjGA,cAAeC,EAAkF,EAAlFA,SAAU8G,EAAwE,EAAxEA,kBAAmB/D,EAAqD,EAArDA,SAAUkM,EAA2C,EAA3CA,eACxG7O,EAAQJ,GAAsBD,EAE9BM,EAAUC,mBAAQ,kBAAM6N,IAAY9N,QAAQuJ,EAAaxJ,KAAQ,CAACwJ,EAAaxJ,IAHoE,EAI9DE,mBAAQ,kBAAMD,GAAW8N,IAAY0L,QAAQjQ,EAAaxJ,OAAO5D,KAAY,CAAC6D,EAASuJ,EAAaxJ,IAJtC,IAIjJA,MAAO0Z,OAJ0I,MAIvH,GAJuH,MAInHpQ,OAAQqQ,OAJ2G,MAIvF,GAJuF,EAInFhB,EAJmF,EAInFA,iBAChEiB,EAAgB1Z,mBAAQ,kBAAMD,GAAO,sBAAQyL,YAAcgO,EAAkB1Z,IAAxC,YAAmD2Z,MAAoB,CAAC1Z,EAASyZ,EAAkB1Z,EAAO2Z,IAC/If,EAAiBzc,uBAAY,SAAA0d,GACjC,GAAK7Z,EAAL,CAD0C,kBAEb6Z,EAFa,kBAElB,EAFkB,GAM/BrQ,EAAY4B,MACrB0O,YAAkB9Z,EAAM2M,kBAAmBnD,EAAa4B,KAAMyO,IAH9DE,YAAe/Z,EAAM2M,kBAAmBnD,EAAa4B,MACrD4O,YAAgBha,EAAM2M,oBAGxBjG,EAAkB,CAAEiG,kBAAmB3M,EAAM2M,uBAC5C,CAACnD,EAAaxJ,EAAO0G,IAExB,OAAKzG,GAAYD,EACV,eAACiI,EAAA,EAAD,CAAMhE,GAAG,cAAcC,KAAM,YAAoB1I,UAAU,aAA3D,UACL,cAACyM,EAAA,EAAK9D,OAAN,CAAa3I,UAAU,MAAvB,SACE,cAACkd,EAAD,CAAqBjd,UAAWkH,EAC9B6G,YAAaA,EACbmP,iBAAkBA,EAClBC,eAAgBA,EAChBrZ,KAAMiK,EAAYjK,KAClBS,MAAOA,MAEX,cAACuJ,EAAA,EAAD,CAAW/N,UAAU,aAAa8F,QAAQ,QAA1C,SACGsY,EAAc9a,KAAI,SAACW,EAAOsF,GAAR,OAAc,cAACvF,EAAA,EAAD,CAAsBE,MAAOqF,EAAStF,QAAOE,gBAAeC,WAAUpE,UAAWqT,GAA9D9J,WAXzB,O,2JC1BlB,SAAS+D,EAAT,GAA8G,IAAlFvG,EAAiF,EAAjFA,OAAQsG,EAAyE,EAAzEA,UAAWlJ,EAA8D,EAA9DA,cAAeC,EAA+C,EAA/CA,SAAU+C,EAAqC,EAArCA,SAAU+D,EAA2B,EAA3BA,kBACzFtE,EAAQlD,YAAWmD,IAAcjD,IAAImD,GAAS,CAACA,IACrD,IAAKH,EAAO,OAAO,KAEnB,IAAMpC,EAAK,OAAGJ,QAAH,IAAGA,IAAYD,EACpBsa,EAAgB7X,EAAM8X,eAAerR,EAAW7I,GAChDma,EAAW/X,EAAMgY,YAAYvR,EAAW7I,GACxCqa,EAAiB3O,YAAcyO,EAAUna,GACzC8N,EAAe1L,EAAMkY,sBAAsBzR,EAAW7I,GAC5D,OAAO,qCACL,eAAC,IAAD,CAAMiE,GAAG,cAAcC,KAAM,YAAoB1I,UAAU,aAA3D,UACE,eAAC,IAAK2I,OAAN,CAAa3I,UAAU,MAAvB,UACE,eAAC,IAAD,CAAO8F,QAAQ,UAAf,UAA0BuH,EAA1B,UADF,IACoDoR,KAEpD,cAAC,IAAD,CAAWze,UAAU,aAAa8F,QAAQ,QAA1C,SACG+Y,EAAevb,KAAI,SAACW,EAAOsF,GAAR,OAAc,cAAC,IAAD,CAAsBrF,MAAOqF,EAAStF,QAAOE,gBAAeC,YAAzCmF,WAGxDsD,QAAQyF,IAAiBjG,OAAOY,QAAQqF,GAAehP,KAAI,mCAAEyb,EAAF,KAAQ/Q,EAAR,YAAyB,cAAC,IAAD,CAA4CA,cAAa7J,gBAAeC,WAAU8G,oBAAmB/D,YAA5E4X,W,+HCLnG,SAASrS,EAAT,GAAmL,IAAnJjJ,EAAkJ,EAAlJA,eAAgBuH,EAAkI,EAAlIA,YAAaC,EAAqH,EAArHA,UAAW9G,EAA0G,EAA1GA,cAAeC,EAA2F,EAA3FA,SAAUuI,EAAiF,EAAjFA,iBAAkBxF,EAA+D,EAA/DA,SAA+D,IAArD6X,cAAqD,MAA5C,cAA4C,EACzLtR,EAAQtJ,GAAsBD,EACpC,OAAO,cAAC,IAAD,CAAKnE,UAAU,QAAf,SAAwBqM,OAAOY,QAAQN,GAAkBrJ,KAAI,YAAuC,IAAD,mBAApC2b,EAAoC,KAAxBC,EAAwB,KAClGlH,EAASlT,IAAUqa,kBAAkBF,EAAYxb,EAAgBuH,EAAxD,OAAqE0C,QAArE,IAAqEA,OAArE,EAAqEA,EAAOa,cAC3F,OAAO,cAAC,IAAD,CAAsBvO,UAAU,OAAO4I,GAAI,GAAIC,GAAI,EAAG2M,GAAI,EAA1D,SACL,eAAC,IAAD,CAAM/M,GAAIuW,EAAQtW,KAAM,YAAoB1I,UAAU,QAAtD,UACE,cAAC,IAAK2I,OAAN,UAAcqP,IACd,cAAC,IAAK9O,KAAN,UACE,cAAC,IAAD,UAAMgW,EAAc5b,KAAI,SAAAqR,GAAO,OAAI,cAAC,IAAD,CAAiDlR,iBAAgBuH,cAAaC,YAAW9G,gBAAeC,WAAU+C,WAAUwN,WAA1GyK,KAAKC,UAAU1K,eAJzDsK,U,iCC1BrB,gHAaA,SAASK,EAAT,GAA2F,IAAD,QAA/DC,aAA+D,MAAvD,GAAuD,EAAnDC,EAAmD,EAAnDA,IAAKC,EAA8C,EAA9CA,OAA8C,IAAtC7a,aAAsC,MAA9B,EAA8B,MAA3BlD,YAA2B,MAApB,GAAoB,MAAhBoE,eAAgB,MAAN,GAAM,EAClE,qBAAX2Z,GAAyC,kBAARD,IAC1CC,EAASD,EACTA,OAAM5e,GAER,IAAMuE,OAAevE,IAAR4e,EAAoBA,EAAMC,EAAS,EAC5CC,EAAuB,GAAIC,EAAwB,GAMvD,OALIF,GAAmB,IAATta,EAAYua,EAAO,UAAGD,SAAH,aAAG,EAAQ5d,QAAQ+C,QAChChE,IAAX6e,IAAsBC,EAAO,UAAGF,SAAH,aAAG,EAAK3d,QAAQ+C,IAClD8a,IAASA,EAAU,uBAAM1f,UAAS,eAAU8F,GAAzB,UAAqC4Z,EAAShe,MACxD,IAATyD,IAAYwa,EAAW,uBAAM3f,UAAS,eAAUmF,EAAO,EAAI,UAAY,UAAhD,UAA6DA,EAAO,EAAI,IAAM,GAA9E,OAAkFA,QAAlF,IAAkFA,OAAlF,EAAkFA,EAAMtD,QAAQ+C,GAAQlD,MAE5H,cAAC,IAAD,CAAKkH,GAAG,KAAR,SAAa,eAAC,IAAD,WAClB,cAAC,IAAD,UAAK,4BAAI2W,MACT,eAAC,IAAD,CAAK3W,GAAG,OAAR,UAAgB8W,EAASva,EAAO,IAAM,GAAIwa,UAY/B,SAAStK,EAAT,GAAgI,IAAzG5R,EAAwG,EAAxGA,eAAgBuH,EAAwF,EAAxFA,YAAaC,EAA2E,EAA3EA,UAAW9G,EAAgE,EAAhEA,cAAeC,EAAiD,EAAjDA,SAAU+C,EAAuC,EAAvCA,SAAUwN,EAA6B,EAA7BA,QACzG3P,EAAUtB,YAAWiM,MAAMiQ,QAAQjL,GAAWkL,IAAQjc,IAAI+Q,QAAW/T,EAAW,CAAC+T,IADqD,EAGvFjQ,mBAAQ,WAC3D,IAAI8a,EAAKC,EAAQ7a,EAAOlD,EAAMoE,EAASyZ,EAAqB,GAC5D,GAAuB,kBAAZ5K,EAAsB,CAC/B,GAAIvQ,GAAYD,EAAe,CAAC,IAAD,IAG7Bqb,EAAG,iBAAGpb,QAAH,IAAGA,OAAH,EAAGA,EAAWuQ,UAAd,QAA0B,EAC7B8K,EAAM,iBAAGtb,QAAH,IAAGA,OAAH,EAAGA,EAAgBwQ,UAAnB,QAA+B,MAChC,CAAC,IAAD,IACCjH,EAAQtJ,GAAsBD,EAEpCqb,EAAG,iBAAG9R,QAAH,IAAGA,OAAH,EAAGA,EAAQiH,UAAX,QAAuB,EAE1B,IAAMmL,EAAU,WAChBL,EAAM,UAAG3a,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa2J,UAA9E,QAA0FmL,KACrFA,IAAYL,OAAS7e,GAC5B8M,IACc,YAAZiH,EACF8K,EAAS/R,EAAMqS,YACI,aAAZpL,EACP8K,EAAS/R,EAAMsS,aACI,aAAZrL,IACP8K,EAAS/R,EAAMuS,aAAevS,EAAMwS,YAG1Cxe,EAAOuG,IAAKC,YAAYyM,GACxB/P,EAAQqD,IAAKqN,UAAUX,GACvB4K,EAAQ,iCAAOzK,YAAYH,GAAnB,IAA8B1M,IAAKoB,YAAYsL,WAClD,GAAI3P,EAAS,CAAC,IAAD,IAOa,IANzB0I,EAAQtJ,GAAsBD,EAC9BF,EAASe,EAAgBf,MACzBkc,EAAerb,IAAUC,oBAAoBd,EAAO,UAAWyJ,GAIrE,GAHA6R,EAAQ,sBAAMvf,UAAS,eAAUmgB,GAAzB,SAA0Crb,IAAUC,oBAAoBd,EAAO,OAAQyJ,KAC/F9I,EAAQE,IAAUC,oBAAoBd,EAAO,QAASyJ,EAAO,GAC7D8R,EAAG,UAAG1a,IAAUC,oBAAoBd,EAAO,UAAWyJ,UAAnD,iBAAG,EAAyD,UAA5D,aAAG,SAA8DA,GAChEtJ,GAAYD,EACdsb,EAAM,UAAG3a,IAAUC,oBAAoBd,EAAO,UAAWE,UAAnD,iBAAG,EAAiE,UAApE,aAAG,SAAsEA,GAInF,OADIgD,GAAYrC,IAAUsb,YAAYnV,EAAW0J,KAAU7O,EAAU,WAC9D,CAAE0Z,MAAKC,SAAQ7a,QAAOlD,OAAMoE,UAASyZ,WAC3C,CAACtU,EAAWxH,EAAgBuH,EAAa7G,EAAeC,EAAU+C,EAAUwN,EAAS3P,IAzChFwa,EAHoI,EAGpIA,IAAKC,EAH+H,EAG/HA,OAAQ7a,EAHuH,EAGvHA,MAAOlD,EAHgH,EAGhHA,KAAMoE,EAH0G,EAG1GA,QAASyZ,EAHiG,EAGjGA,MA2C3C,OAAO,cAACD,EAAD,CAAuBE,MAAKC,SAAQ7a,QAAOlD,OAAMoE,UAASyZ,MAAOA,M,yHCxC3D3K,IAzBG,SAAC,GAAD,IAAG7Q,EAAH,EAAGA,KAAM8Q,EAAT,EAASA,WAAY/U,EAArB,EAAqBA,MAAOK,EAA5B,EAA4BA,YAAagV,EAAzC,EAAyCA,aAAcD,EAAvD,EAAuDA,cAAvD,IAAsED,eAAtE,aAAuFhV,gBAAvF,SAA4GogB,EAA5G,sHAChB,eAAC,IAAD,2BAAgBA,GAAhB,cACGxL,EAAa,cAAC,IAAWnC,QAAZ,UAAqBmC,IAAmC,KACtE,cAAC,IAAWnC,QAAZ,UACE,cAAC,IAAWE,KAAZ,UAAkB7O,MAEpB,cAAC,IAAD,CACE7D,MAAO+U,EACP9U,YAAaA,EACbL,MAAOA,EACPC,SAAUmV,EACVjV,SAAUA,IAEZ,eAAC,IAAW4S,OAAZ,WACGhG,QAAQoI,IAAY,cAAC,IAAWrC,KAAZ,qBACHhS,IAAjBuU,GAA8B,cAAC,IAAD,CAAgB3P,UAAU,MACvDC,QAAS,cAAC,IAAD,CAASC,GAAG,gBAAZ,uDADoB,SAE7B,sBAAM1F,UAAU,iBAAhB,SACE,cAAC,IAAD,CAAQ8D,QAAS,kBAAMoR,EAAcC,IAAelV,SAAUA,GAAYH,IAAUqV,EAAcvP,MAAO9F,IAAUqV,EAAe,CAAEmL,cAAe,QAAW,GAA9J,SACE,cAAC,IAAD,CAAiB3d,KAAM4d,qB,8XCrB7BC,EAAe,CACnB,GAAI,wDACJ,KAAQ,iDACR,KAAQ,kDAQH,SAASC,EAAT,GAA4J,IAA5Hhd,EAA2H,EAA3HA,eAA2H,IAA3GwH,UAA2G,IAA9F4O,oBAA8F,MAA/E,GAA+E,EAA3D3O,GAA2D,EAA3E3H,aAA2E,EAA3D2H,mBAAmBlL,EAAwC,EAAxCA,UACxH,OAAKyD,EAAeid,UACb,eAAC,IAAD,CAAU1gB,UAAWA,EAArB,UACL,cAAC,IAASiK,OAAV,CAAiBnE,QAAS+T,GAAgB,YAA1C,SAAwD2G,EAAa3G,KACrE,cAAC,IAAS1P,KAAV,UACGkC,OAAOY,QAAQuT,GAAcld,KAAI,mCAAE9B,EAAF,KAAOkH,EAAP,YAAiB,cAAC,IAAS7E,KAAV,CAAyB7D,UAAS,eAAUwB,GAAOsC,QAAS,kBAAMoH,EAAkB,CAAE2O,aAAcrY,KAApG,SAA6GkH,GAAzFlH,WAJrC,KAejC,SAASmf,EAAT,GAAyI,IAAD,IAA9G1V,UAA8G,IAAjGuO,oBAAiG,MAAlF,KAAkF,EAA5EK,EAA4E,EAA5EA,aAAgBnM,EAA4D,EAA5DA,MAAOxC,EAAqD,EAArDA,kBAAmBlL,EAAkC,EAAlCA,UAC3G,IAAK0N,EAAO,OAAO,KACnB,IAAM6J,EAAa7J,EAAMa,aACzB,MAAK,CAAC,OAAQ,QAAS,QAAQmJ,SAASH,IAAgB,CAAC,OAAQ,QAAS,QAAQG,SAASmC,GACpF,eAAC,IAAD,CAAmB7Z,UAAWA,EAAWmB,KAAK,QAAQ4C,KAAK,eAAejE,MAAO0Z,EAAczZ,SAAU,SAAAyf,GAAG,OAAItU,EAAkB,CAAEsO,aAAsB,SAARgG,EAAiB,KAAOA,KAA1K,UACL,cAAC,IAAD,CAAc1f,MAAO,OAAQgG,QAAS0T,EAAe,UAAY,UAAjE,2BACiB,SAAfjC,GAA0C,SAAjBsC,IAA4B,cAAC,IAAD,CAAc/Z,MAAO,gBAAiBgG,QAA0B,kBAAjB0T,EAAmC,UAAY,UAA9F,SACrD,uBAAMxZ,UAAU,gBAAhB,4BAA+C,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,gBAA5F,IAA6G,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,sBAE1I,SAAfuX,GAA0C,SAAjBsC,IAA4B,cAAC,IAAD,CAAc/Z,MAAO,YAAagG,QAA0B,cAAjB0T,EAA+B,UAAY,UAAtF,SACrD,uBAAMxZ,UAAU,YAAhB,wBAAuC,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,gBAAnF,IAAoG,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,sBAEjI,UAAfuX,GAA2C,UAAjBsC,IAA6B,cAAC,IAAD,CAAc/Z,MAAO,iBAAkBgG,QAA0B,mBAAjB0T,EAAoC,UAAY,UAAhG,SACvD,uBAAMxZ,UAAU,gBAAhB,6BAAgD,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAA5F,IAA6G,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS4H,MAAOzW,UAAU,sBAE3I,SAAfuX,GAA0C,SAAjBsC,IAA4B,cAAC,IAAD,CAAc/Z,MAAO,YAAagG,QAA0B,cAAjB0T,EAA+B,UAAY,UAAtF,SACrD,uBAAMxZ,UAAU,YAAhB,wBAAuC,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS8H,KAAM3W,UAAU,gBAAnF,IAAoG,cAAC,IAAD,CAAO8I,IAAK8F,IAAOC,SAAS0H,KAAMvW,UAAU,wBAbnC,KAiB5G,SAAS4gB,EAAT,GAAmE,IAA1CrH,EAAyC,EAAzCA,QAASrO,EAAgC,EAAhCA,kBAAmBlL,EAAa,EAAbA,UAC1D,OAAO,eAAC,IAAD,CAAmBmB,KAAK,QAAQrB,MAAOyZ,EAASxV,KAAK,aAAahE,SAAU,SAAA8gB,GAAC,OAAI3V,EAAkB,CAAEqO,QAASsH,KAAM7gB,UAAWA,EAA/H,UACL,cAAC,IAAD,CAAcF,MAAM,SAASgG,QAAqB,WAAZyT,EAAuB,UAAY,UAAzE,sBACA,cAAC,IAAD,CAAczZ,MAAM,MAAMgG,QAAqB,QAAZyT,EAAoB,UAAY,UAAnE,0BACA,cAAC,IAAD,CAAczZ,MAAM,UAAUgG,QAAqB,YAAZyT,EAAwB,UAAY,UAA3E,6BAIJ,SAASuH,EAAT,GAA4J,IAA9Hrd,EAA6H,EAA7HA,eAAgBuH,EAA6G,EAA7GA,YAAa0C,EAAgG,EAAhGA,MACnDmG,EAAkBnP,mBAAQ,kBAAMgJ,GAAS5I,IAAUyG,mBAAmBmC,EAAOjK,KAAiB,CAACiK,EAAOjK,IAC5G,OAAKiK,EACE,8BACJrB,OAAOY,QAAQ4G,GAAiBvQ,KAAI,YAA0C,IAAD,mBAAvC2b,EAAuC,KAA3BnR,EAA2B,KACtEkK,EAASlT,IAAUqa,kBAAkBF,EAAYxb,EAAgBuH,EAAa0C,EAAMa,cAC1F,OAAO,eAAC,IAAD,CAAM9F,GAAG,cAAcC,KAAM,YAAqC1I,UAAU,aAA5E,UACL,cAAC,IAAK2I,OAAN,UAAcqP,IACd,cAAC,IAAK9O,KAAN,CAAWlJ,UAAU,MAArB,SACE,cAAC,IAAD,CAAWA,UAAU,QAArB,SACG8N,EAAOxK,KAAI,SAACW,EAAO8c,GAClB,GAAIpR,MAAMiQ,QAAQ3b,GAChB,OAAO,cAAC+c,EAAD,CAA0CC,UAAWhd,EAAOyJ,MAAOA,EAAOqT,WAAYA,GAAxDA,GAClC,GAAqB,kBAAV9c,EAAoB,CAClC,IAAMid,EAAwBjZ,IAAKkZ,+BAA+BC,YAAe,OAAC1T,QAAD,IAACA,OAAD,EAACA,EAAO2T,UAAW,CAACpd,IAAvE,OAAgFyJ,QAAhF,IAAgFA,OAAhF,EAAgFA,EAAO2T,WAAWC,UAChI,OAAOzU,QAAQqU,EAAezX,SAAW,eAAC,IAAD,CAAuBhB,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA7E,UACvC,cAAC,IAAUiK,OAAX,CAAkBuG,GAAI/D,IAAK9D,OAAQ3I,UAAU,qBAAqB8F,QAAQ,OAAO0W,SAAQ,eAAUuE,GAAnG,SACG9Y,IAAKsZ,UAAUtd,EAAOyJ,KAEzB,cAAC,IAAU8T,SAAX,CAAoBhF,SAAQ,eAAUuE,GAAtC,SACE,cAAC,IAAK7X,KAAN,CAAWlJ,UAAU,MAArB,SACE,qBAAKA,UAAU,QAAf,SACGkhB,EAAe5d,KAAI,SAAAme,GAAM,OACxB,oBAAGzhB,UAAU,OAAb,UAAkCiI,IAAKsZ,UAAUE,EAAQ/T,GAAzD,MAAmE,gCAAQzF,IAAKyZ,aAAaD,EAAQ/T,EAAOA,EAAM2T,WAAW,OAApGI,cARiBV,GAetD,OAAO,cAxB8C9B,QAJ9C,KAoCrB,SAAS+B,EAAT,GAA2I,IAAD,IAAvGC,EAAuG,EAAvGA,UAAWvT,EAA4F,EAA5FA,MAAOqT,EAAqF,EAArFA,WAC7C/b,EAAUtB,YAAWmc,IAAQjc,IAAIqd,GAAY,CAACA,IACpD,IAAKjc,EAAS,OAAO,KACrB,IAAM2c,EAAgB3c,EAAgBf,MAChCmB,EAAYN,IAAUC,oBAAoB4c,EAAc,OAAQjU,GAChErI,EAAeP,IAAUC,oBAAoB4c,EAAc,UAAWjU,GACtEnI,EAAmBT,IAAUC,oBAAoB4c,EAAc,cAAejU,GANoD,EAOzF5I,IAAUC,oBAAoB4c,EAAc,UAAWjU,EAAO,IAP2B,mBAOjIkU,EAPiI,KAOnHC,EAPmH,KAQxI,IAAKD,IAAiBC,EAAwB,OAAO,KACrD,IAAMC,EAAU,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAelU,UAAlB,iBAAG,EAAuB7L,eAA1B,aAAG,UACbqf,EAAiBjZ,IAAKkZ,+BAA+BC,YAAe,OAAC1T,QAAD,IAACA,OAAD,EAACA,EAAO2T,UAAWQ,GAAtE,OAA+FnU,QAA/F,IAA+FA,OAA/F,EAA+FA,EAAO2T,WAAWC,UACxI,OAAO,eAAC,IAAD,CAAM7Y,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,UACL,eAAC,IAAUiK,OAAX,CAAkBuG,GAAI/D,IAAK9D,OAAQ3I,UAAU,qBAAqB8F,QAAQ,OAAO0W,SAAQ,eAAUuE,GAAnG,UACE,mBAAG/gB,UAAS,eAAUqF,GAAtB,SAAuCD,IADzC,IACwD,sBAAMpF,UAAU,YAAhB,SAA6B8hB,OAErF,cAAC,IAAUN,SAAX,CAAoBhF,SAAQ,eAAUuE,GAAtC,SACE,cAAC,IAAK7X,KAAN,CAAWlJ,UAAU,MAArB,SACE,sBAAKA,UAAU,QAAf,UACE,oBAAGA,UAAU,OAAb,UAAoB,mBAAGA,UAAS,eAAUqF,GAAtB,SAAuCD,IAA3D,IAA0E,sBAAMpF,UAAU,YAAhB,SAA6B8hB,IAAvG,MAA4H,gCAAQvc,OACnI2b,EAAe5d,KAAI,SAAAme,GAAM,OACxB,oBAAGzhB,UAAU,OAAb,UAAkCiI,IAAKsZ,UAAUE,EAAQ/T,GAAzD,MAAmE,gCAAQzF,IAAKyZ,aAAaD,EAAQ/T,EAAOA,EAAM2T,WAAW,OAApGI,gBAQrC,IAAMM,EAAqB,SAAC,GAA4B,IAA1BvF,EAAyB,EAAzBA,SAAUwF,EAAe,EAAfA,SAChCC,EAAkB3d,qBAAW4d,KAC7BC,EAAmBC,YACvB5F,GACA,kBAAMwF,GAAYA,EAASxF,MAEvB6F,EAAWJ,IAAoBzF,EACrC,OACE,eAAC,IAAD,CAAQ1Y,QAASqe,EAAkBrc,QAAQ,OAA3C,UACE,cAAC,IAAD,CAAiBnD,KAAM0f,EAAWC,IAAmBC,IAAkBviB,UAAS,gBAAWqiB,EAAW,gBAAkB,MACxH,qCAAeA,EAAW,UAAY,aAc7B,SAASzG,EAAT,GAAmM,IAA5JnY,EAA2J,EAA3JA,eAAgBuH,EAA2I,EAA3IA,YAAaC,EAA8H,EAA9HA,UAAwBsO,EAAsG,EAAnHtO,UAAasO,QAAWrO,EAA2F,EAA3FA,kBAAmB9G,EAAwE,EAAxEA,SAAUD,EAA8D,EAA9DA,cAAenE,EAA+C,EAA/CA,UAE1J0N,EAAQtJ,GAAsBD,EACpC,OAAO,sBAAKnE,UAAWA,EAAhB,UACL,cAAC,IAAD,CAAMyI,GAAG,eAAeC,KAAM,YAAoB1I,UAAU,OAA5D,SACE,cAAC,IAAK2I,OAAN,UACE,eAAC,IAAD,CAAK3I,UAAU,QAAf,UACE,cAAC,IAAD,CAAK4I,GAAG,OAAR,SAAe,cAAC6X,EAAD,CAAsBhd,eAAgBA,EAAgBwH,UAAWA,EAAWC,kBAAmBA,EAAmBlL,UAAU,WAC3I,cAAC,IAAD,CAAK4I,GAAG,OAAR,SAAe,cAACgY,EAAD,CAAerH,QAASA,EAASrO,kBAAmBA,EAAmBlL,UAAU,WAChG,cAAC,IAAD,CAAK4I,GAAG,OAAR,SAAe,cAAC+X,EAAD,CAAgB1V,UAAWA,EAAWyC,MAAOA,EAAOxC,kBAAmBA,EAAmBlL,UAAU,kBAIzH,cAAC,IAAD,UACE,eAAC,IAAD,CAAMyI,GAAG,eAAeC,KAAM,YAA9B,UACE,cAAC,IAAKC,OAAN,UACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,sBAAM3I,UAAU,UAAhB,mDACA,wGAEF,cAAC,IAAD,CAAK4I,GAAG,OAAR,SACE,cAACmZ,EAAD,CAAoBC,cAAUphB,EAAiB4P,GAAI5D,IAAU4P,SAAS,mBAI5E,cAAC,IAAUgF,SAAX,CAAoBhF,SAAS,UAA7B,SACE,eAAC,IAAKtT,KAAN,CAAWlJ,UAAU,MAArB,UACE,eAAC,IAAD,CAAMA,UAAU,OAAOyI,GAAG,cAAcC,KAAM,YAA9C,UACE,cAAC,IAAKC,OAAN,UACE,eAAC,IAAD,WACE,cAAC,IAAD,2BACA,cAAC,IAAD,CAAKC,GAAG,OAAR,SACE,cAAC,IAAD,CAAQ9C,QAAQ,UAAUoE,KAAK,KAA/B,SACE,mBAAGsY,KAAK,uEAAuEnhB,OAAO,SAASohB,IAAI,aAAnG,+FAKR,cAAC,IAAKvZ,KAAN,CAAWlJ,UAAU,MAArB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAK4I,GAAI,GAAI4M,GAAI,EAAGxV,UAAU,OAA9B,SACE,cAAC,IAAD,CACE+D,KAAM,4CACNjE,MAAOgF,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa,cAClF7K,YAAa8H,IAAKsN,eAAe,cACjCJ,aAAcrQ,IAAUsQ,iBAAiBnK,EAAWxH,EAAgBuH,EAAa,cACjFkK,cAAe,SAAApV,GAAK,OAAIoL,EAAkB,CAAE/J,KAAM,eAAgBwT,QAAS,aAAc7U,QAAO2D,iBAAgBuH,qBAGnH,CAAC,YAAD,mBAAgBgJ,MAAa1Q,KAAI,SAAA0Z,GAChC,IAAIrI,EAAO,UAAMqI,EAAN,cACP0F,EAAe,UAAM1F,EAAN,kBACf2F,EAAkB7d,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa0X,GACjG,OAAO,cAAC,IAAD,CAAK9Z,GAAI,GAAI4M,GAAI,EAAgBxV,UAAU,OAA3C,SACL,cAAC,IAAD,CACE6U,WAAY,eAAC,IAAD,CAAQ/O,QAASkX,EAAQlZ,QAAS,kBAAMoH,EAAkB,CAAE/J,KAAM,eAAgBwT,QAAS+N,EAAiB5iB,OAAQ6iB,EAAiBlf,iBAAgBuH,iBAAgBhL,UAAU,mBAA/K,UACV,cAAC,IAAD,CAAiB2C,KAAMggB,EAAkB5E,IAAgBC,IAAUhe,UAAU,UADnE,eAGZ+D,KAAM,4BAAIkE,IAAKoB,YAAYsL,KAC3B7U,MAAOgF,IAAUkQ,yBAAyB/J,EAAWxH,EAAgBuH,EAAa2J,GAClFxU,YAAa8H,IAAKsN,eAAeZ,GACjCQ,aAAcrQ,IAAUsQ,iBAAiBnK,EAAWxH,EAAgBuH,EAAa2J,GACjFO,cAAe,SAAApV,GAAK,OAAIoL,EAAkB,CAAE/J,KAAM,eAAgBwT,UAAS7U,QAAO2D,iBAAgBuH,iBAClG/K,SAAU0iB,EACV1N,SAAO,KAXqB+H,MAelC,cAAC,IAAD,CAAKpU,GAAI,GAAT,SAAa,uNAInB,cAACkY,EAAD,CAAoBrd,eAAgBA,EAAgBuH,YAAaA,EAAa0C,MAAOA","file":"static/js/1.ce80fd16.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { database } from \"../Database/Database\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{database._getCharKeys().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }: { field: IFieldDisplay, index: number, equippedBuild?: ICalculatedStats, newBuild?: ICalculatedStats, className?: string }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => stats ? field?.canShow?.(stats) : false, [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as IArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maxEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.lockArtifact(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { database } from '../../Database/Database';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, characterSheet), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  if (!stats) return null\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div>{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Dropdown, Image, InputGroup, ListGroup, Row } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\";\r\nimport CustomFormControl from '../../Components/CustomFormControl';\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport { StatIconEle } from \"../../Components/StatIcon\";\r\nimport Conditional from \"../../Conditional/Conditional\";\r\nimport { ascensionMaxLevel, milestoneLevels } from \"../../Data/CharacterData\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements, allRarities } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IConditionals } from \"../../Types/IConditional\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport { clamp } from \"../../Util/Util\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { constellation, level, ascension }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n          <h6><Stars stars={characterSheet.star} colored /></h6>\r\n          <h5>Level: {Character.getLevelString(character)}</h5>\r\n          <Row className=\"px-2 mb-2\">\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Col xs={4} className=\"p-1\" key={tKey}>\r\n                <Image src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} className=\"w-100 h-auto\" roundedCircle />\r\n                <h5 className=\"mb-0\"><Badge variant=\"info\" style={{ position: \"absolute\", bottom: \"0\", right: \"0\" }}><strong>{tlvl[tKey] + 1}</strong></Badge></h5>\r\n              </Col>)}\r\n          </Row>\r\n          <div className=\"text-center\"><h6>{characterSheet.constellationName}</h6></div>\r\n          <Row className=\"px-2\">\r\n            {[...Array(6).keys()].map(i =>\r\n              <Col xs={4} className=\"p-1\" key={i}>\r\n                <Image src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                  roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\nfunction WeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  if (!weaponSheets) return null\r\n\r\n  return <Dropdown as={ButtonGroup}>\r\n    <Dropdown.Toggle as={Button}>\r\n      {weaponSheet.name}\r\n    </Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {allRarities.map((stars, i, arr) => <React.Fragment key={stars}>\r\n        <Dropdown.ItemText key={\"star\" + stars}><Stars stars={stars} /></Dropdown.ItemText>\r\n        {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === stars).map(([key, weaponObj]: any) =>\r\n          <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n            {weaponObj.name}\r\n          </Dropdown.Item>\r\n        )}\r\n        {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n      </React.Fragment>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const { level, ascension } = weapon\r\n  const setStateWeapon = useCallback((key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    weapon[key] = value\r\n    characterDispatch({ weapon: weapon })\r\n  }, [character, weapon, characterDispatch])\r\n\r\n  const setLevel = useCallback((newLevel) => {\r\n    newLevel = clamp(newLevel, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => newLevel <= ascenML)\r\n    setStateWeapon(\"level\", newLevel)\r\n    setStateWeapon(\"ascension\", ascension)\r\n  }, [setStateWeapon])\r\n\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level === ascenML)\r\n    if (ascension === lowerAscension) setStateWeapon(\"ascension\", ascension + 1)\r\n    else setStateWeapon(\"ascension\", lowerAscension)\r\n  }, [setStateWeapon, ascension, level])\r\n\r\n  if (!build) return null\r\n\r\n  const substatKey = weaponSheet.getSubStatKey()\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n  const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key] as IConditionals\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          {editable ? <InputGroup >\r\n            <ButtonGroup as={InputGroup.Prepend}>\r\n              <WeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Refinement {weapon.refineIndex + 1}</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.ItemText>\r\n                    <span>Select Weapon Refinement</span>\r\n                  </Dropdown.ItemText>\r\n                  <Dropdown.Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <InputGroup.Append>\r\n              <CustomFormControl placeholder={undefined} onChange={setLevel} value={level} min={1} max={90} />\r\n            </InputGroup.Append>\r\n            <InputGroup.Append>\r\n              <Button disabled={!ambiguousLevel} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n            </InputGroup.Append>\r\n            <ButtonGroup as={InputGroup.Append}>\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Select Level</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    return <Dropdown.Item key={`${lv}/${as}`} onClick={() => { setStateWeapon(\"level\", lv); setStateWeapon(\"ascension\", as) }}>{lvlstr}</Dropdown.Item>\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n          </InputGroup> : <span>Weapon</span>}\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n          <small>{weaponSheet.description}</small>\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">{weaponSheet.name} Lv. {WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <Badge variant=\"info\">Refinement {weapon.refineIndex + 1}</Badge>}</h5>\r\n          <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n          <h6>{weaponPassiveName}</h6>\r\n          <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n          <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n          <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n          {/* TODO: remove conditionals display here in lieu of document once sheets are converted*/}\r\n          {!Boolean(document) && Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n            <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n\r\n          {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"plunging_dmg_\", \"plunging_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right`}>{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { ascension, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { elementKey, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={talentSheet?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{talentSheet?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, ButtonGroup, Dropdown, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { ascensionMaxLevel, milestoneLevels } from '../Data/CharacterData';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { database } from '../Database/Database';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys, CharacterKey } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  level: 1,\r\n  ascension: 0,\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as any,\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\" as any,\r\n    level: 1,\r\n    ascension: 0,\r\n    refineIndex: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\": // for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...database._getChar(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: CharacterKey | \"\",\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey = \"\", character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key), [character.weapon.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...database._getChar(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && database.updateChar(character)\r\n  }, [character, editable])\r\n\r\n  //callback for when switching to a new character, and need to initiate a weapon.\r\n  useEffect(() => {\r\n    if (!character.weapon.key && weaponSheets && characterSheet) {\r\n      const possibleWeapons = WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey)\r\n      //sort the weapons to get the lowest rarity weapon.\r\n      const [weaponKey] = Object.entries(possibleWeapons).sort(([k1, ws1], [k2, ws2]) => ws1.rarity - ws2.rarity)[0]\r\n      character.weapon.key = weaponKey\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {//check for default value for traveler\r\n    if (characterSheet && \"talents\" in characterSheet.sheet && !character.elementKey)\r\n      characterDispatch({ elementKey: Object.keys(characterSheet.sheet.talents)[0] })\r\n  }, [character.elementKey, characterSheet])\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = database._getChar(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, character: { elementKey = \"anemo\", level = 1, ascension = 0 }, editable, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{editable ? <InputGroup >\r\n    <ButtonGroup as={InputGroup.Prepend}>\r\n      <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button}>\r\n          {HeaderIconDisplay}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu as={CustomMenu}>\r\n          {[...new Set(allCharacterKeys)].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button} className={`text-${elementKey}`}>\r\n          <strong>{ElementalData[elementKey].name}</strong>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu >\r\n          {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n            <Dropdown.Item key={eleKey} className={`text-${eleKey}`} onClick={() => characterDispatch({ elementKey: eleKey })}><strong>{ElementalData[eleKey].name}</strong></Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>}\r\n    </ButtonGroup>\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n\r\n    <InputGroup.Append>\r\n      <CustomFormControl placeholder={undefined} className=\"h-100\" onChange={setLevel} value={level} min={1} max={90} disabled={!characterSheet} />\r\n    </InputGroup.Append>\r\n    <InputGroup.Append>\r\n      <Button disabled={!ambiguousLevel || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n    </InputGroup.Append>\r\n    <ButtonGroup as={InputGroup.Append}>\r\n      <Dropdown as={ButtonGroup} >\r\n        <Dropdown.Toggle as={Button} disabled={!characterSheet}>Select Level</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {milestoneLevels.map(([lv, as]) => {\r\n            const sameLevel = lv === ascensionMaxLevel[as]\r\n            const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n            return <DropdownItem key={`${lv}/${as}`} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</DropdownItem>\r\n          })}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </ButtonGroup>\r\n  </InputGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\" //can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey) ?? invalid\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\ntype StatInputInput = {\r\n  name: Displayable,\r\n  prependEle?: Displayable,\r\n  value: number,\r\n  placeholder: string,\r\n  defaultValue: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  className?: any,\r\n}\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent = false, disabled = false, ...restProps }: StatInputInput) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = null, infusionAura }, build, characterDispatch, className }: ReactionToggleProps) {\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode ? \"primary\" : \"success\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, weaponSheet, build }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, characterSheet), [build, characterSheet])\r\n  if (!build) return null\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}