{"version":3,"file":"static/js/335.a4ebe0e6.chunk.js","mappings":"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","sources":["Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { key: `weapon_${key}:inactiveKey` })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { key: \"sheet:stacks\" })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, { key: \"atk\" })\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, { key: \"atk\" }),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"normal_dmg_\" })\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"charged_dmg_\" })\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"normal_dmg_\" }))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"anemo\", condPassive, eleDmg))\r\nconst cryo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"cryo\", condPassive, eleDmg))\r\nconst geo_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"geo\", condPassive, eleDmg))\r\nconst hydro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"hydro\", condPassive, eleDmg))\r\nconst pyro_dmg_ = unequal(input.activeCharKey, input.charKey, equal(\"pyro\", condPassive, eleDmg))\r\n\r\nconst electro_dmg_ = unequal(input.activeCharKey, input.charKey, lookup(condPassive, { \"anemo\": eleDmg, \"cryo\": eleDmg, \"geo\": eleDmg, \"hydro\": eleDmg, \"pyro\": eleDmg }, naught))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"afterElectroReaction\"),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: anemo_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{sgt(\"reaction.Superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: cryo_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: geo_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: pyro_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: hydro_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: sgt(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"success\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst anemo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst cryo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst electro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst geo_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst hydro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst pyro_dmg_ = equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    anemo_dmg_,\r\n    cryo_dmg_,\r\n    electro_dmg_,\r\n    geo_dmg_,\r\n    hydro_dmg_,\r\n    pyro_dmg_,\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [{\r\n          node: anemo_dmg_\r\n        }, {\r\n          node: cryo_dmg_\r\n        }, {\r\n          node: electro_dmg_\r\n        }, {\r\n          node: geo_dmg_\r\n        }, {\r\n          node: hydro_dmg_\r\n        }, {\r\n          node: pyro_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, { key: \"atk_\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["weaponCurves","Object","fromEntries","entries","_weaponCurves","map","key","value","values","dataObjForWeaponSheet","gen","additional","displayWeapon","result","base","premod","total","weapon","constant","type","weaponType","display","mainStat","subStat","merging","Error","mainStatNode","infoMut","sum","prod","subscript","input","curve","ascension","x","addStats","push","main","substatNode","sub","mergeData","inferInfoMut","data_gen","data_gen_json","trans","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","lookup","min","naught","data","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","objectKeyMap","c","count","text","sgt","unit","all_dmg_","equal","on","dmg","customDmgNode","hit","ele","charged_dmg_","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","undefined","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","teamBuff","shield","customShieldNode","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","customHealNode","variant","percent","claymore","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","NaN","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","stacks","stacksRefine","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","atk","moveSPD_","autoSrc","sword","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","tr","dmg_Nodes","e","compareEq","atkDefInc","enerRech_","dmgInc","atk1","atk2","atk2_","burst_critRate_","polearm","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","keys","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","WindblumeOde","condChargedPath","condCharged","heal_","eleDmg","anemo_dmg_","unequal","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","electro_dmg_","canShow","anemo","color","cryo","geo","pyro","hydro","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","target","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong","catalyst"],"sourceRoot":""}