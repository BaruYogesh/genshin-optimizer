{"version":3,"file":"static/js/145.caaa4c6f.chunk.js","mappings":"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","sources":["Components/Artifact/SetEffectDisplay.tsx","Components/Character/CharacterDropdownButton.tsx","Components/Character/StatDisplayComponent.tsx","Components/Character/ThumbSide.tsx","Components/CustomNumberInput.tsx","Components/Conditional/ConditionalSelector.tsx","Components/Conditional/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Components/EnemyEditor.tsx","Components/ExpandButton.tsx","Components/HitModeEditor.tsx","Components/TextButton.tsx","Formula/DisplayUtil.tsx","PageCharacter/StatInput.tsx","ReactHooks/useArtifact.tsx","ReactHooks/useWeapon.tsx"],"sourcesContent":["import { Box, CardContent, Typography } from \"@mui/material\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport DocumentDisplay from \"../DocumentDisplay\"\r\nimport SqBadge from \"../SqBadge\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>\r\n    <CardDark>\r\n      <CardContent>\r\n        <Typography><SqBadge color=\"success\">{setNumKey}-Set</SqBadge> {setEffectText}</Typography>\r\n      </CardContent>\r\n    </CardDark>\r\n    {document ? <DocumentDisplay sections={document} /> : null}\r\n  </Box>\r\n}\r\n","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Data/Characters/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet, ck: CharacterKey) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean,\r\n  unSelectText?: Displayable,\r\n  unSelectIcon?: Displayable,\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, unSelectText, unSelectIcon, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck], ck)).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : (unSelectText ?? t`unselect`))}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : (unSelectIcon ?? <Replay />))}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey]?.thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}\r\n","import { Masonry } from \"@mui/lab\"\r\nimport { CardContent, CardHeader, Divider } from \"@mui/material\"\r\nimport { Box } from \"@mui/system\"\r\nimport { useContext, useMemo } from \"react\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport { NodeFieldDisplay } from \"../FieldDisplay\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport { DataContext } from \"../../DataContext\"\r\nimport { getDisplayHeader, getDisplaySections } from \"../../Formula/DisplayUtil\"\r\nimport { DisplaySub } from \"../../Formula/type\"\r\nimport { NodeDisplay } from \"../../Formula/uiData\"\r\nimport { customRead } from \"../../Formula/utils\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { objectMap } from \"../../Util/Util\"\r\n\r\nexport default function StatDisplayComponent() {\r\n  const { data } = useContext(DataContext)\r\n  const sections = getDisplaySections(data)\r\n  return <Box sx={{ mr: -1, mb: -1 }}>\r\n    <Masonry columns={{ xs: 1, sm: 2, md: 3 }} spacing={1}>\r\n      {sections.map(([key, Nodes]) =>\r\n        <Section key={key} displayNs={Nodes} sectionKey={key} />)}\r\n    </Masonry >\r\n  </Box>\r\n}\r\n\r\nfunction Section({ displayNs, sectionKey }: { displayNs: DisplaySub<NodeDisplay>, sectionKey: string }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const header = usePromise(getDisplayHeader(data, sectionKey), [data, sectionKey])\r\n  const displayNsReads = useMemo(() => objectMap(displayNs, (n, nodeKey) => customRead([\"display\", sectionKey, nodeKey])), [displayNs, sectionKey]);\r\n  // TODO: Should still show the section if `oldData` contains some non-empty entries\r\n  if (!header || Object.values(displayNs).every(x => x.isEmpty)) return null\r\n  const { title, icon, action } = header\r\n  return <CardDark >\r\n    <CardHeader avatar={icon && <ImgIcon size={2} sx={{ m: -1 }} src={icon} />} title={title} action={action} titleTypographyProps={{ variant: \"subtitle1\" }} />\r\n    <Divider />\r\n    <CardContent>\r\n      {Object.entries(displayNs).map(([nodeKey, n]) => <NodeFieldDisplay key={nodeKey} node={n} oldValue={oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined} />)}\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\r\nimport { Button, Divider, MenuItem } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport DropdownButton from '../DropdownMenu/DropdownButton';\r\nimport SqBadge from '../SqBadge';\r\nimport { DataContext } from '../../DataContext';\r\nimport IConditional from '../../Types/IConditional';\r\nimport { deepClone, layeredAssignment } from '../../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, disabled = false, }:\r\n  { conditional: IConditional, conditionalValue?: string, disabled?: boolean }) {\r\n  const { character, characterDispatch } = useContext(DataContext)\r\n  const setConditional = useCallback((v?: string) => {\r\n    const conditionalValues = deepClone(character.conditional)\r\n    layeredAssignment(conditionalValues, conditional.path, v)\r\n    characterDispatch({ conditional: conditionalValues })\r\n  }, [conditional, character, characterDispatch])\r\n\r\n  if (Object.keys(conditional.states).length === 1) {\r\n    const [stateKey, st] = Object.entries(conditional.states)[0]\r\n    const badge = st.name && <SqBadge color={\"success\"}>{st.name}</SqBadge>\r\n    return <Button fullWidth size=\"small\" onClick={() => setConditional(conditionalValue ? undefined : stateKey)} disabled={disabled} startIcon={conditionalValue ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n      {conditional.name} {badge}\r\n    </Button>\r\n  } else {//complex conditional\r\n    const state = conditionalValue ? conditional.states[conditionalValue] : undefined\r\n    const badge = state?.name && <SqBadge color={state ? \"success\" : \"secondary\"}>{state ? state.name : \"Not Active\"}</SqBadge>\r\n    return <DropdownButton fullWidth size=\"small\" title={<span>{conditional.name} {badge}</span>} disabled={disabled}>\r\n      <MenuItem onClick={() => setConditional()} selected={!state} disabled={!state}>\r\n        <span>Not Active</span>\r\n      </MenuItem>\r\n      <Divider />\r\n      {Object.entries(conditional.states).map(([stateKey, st]) =>\r\n        <MenuItem key={stateKey} onClick={() => setConditional(stateKey)} selected={conditionalValue === stateKey} disabled={conditionalValue === stateKey} >{st.name}</MenuItem>)}\r\n    </DropdownButton>\r\n  }\r\n}\r\n","import { Box, CardContent, CardHeader, Divider, ListItem } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport ConditionalSelector from \"./ConditionalSelector\"\r\nimport { DataContext, dataContextObj } from \"../../DataContext\"\r\nimport { Data } from \"../../Formula/type\"\r\nimport { data as dataNode } from '../../Formula/utils'\r\nimport IConditional from \"../../Types/IConditional\"\r\nimport { evalIfFunc } from \"../../Util/Util\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../FieldDisplay\"\r\n\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  hideHeader?: boolean,\r\n  hideDesc?: boolean,\r\n  fieldContext?: dataContextObj\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, hideHeader = false, hideDesc = false, fieldContext }: ConditionalDisplayProps) {\r\n  const dataContext = useContext(DataContext)\r\n  const { data } = dataContext\r\n  // TODO: as Data\r\n  const canShow = conditional.canShow ? !!(fieldContext ? data.get(dataNode(conditional.canShow, { target: fieldContext.data.data[0] } as Data)).value : data.get(conditional.canShow).value) : true\r\n  if (!canShow) return null\r\n  const condVal = data.get(conditional.value).value\r\n\r\n  const description = !hideDesc && evalIfFunc(conditional.description, data)\r\n  let { icon, title, action } = conditional.header ?? {}\r\n  icon = evalIfFunc(icon, data)\r\n  const fields = condVal && conditional.states[condVal]?.fields\r\n\r\n  return <CardDark>\r\n    {!hideHeader && conditional.header && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n    {!hideHeader && conditional.header && <Divider />}\r\n    {!!conditional.name && <CardContent>\r\n      {description && <Box mb={1}>{description}</Box>}\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={condVal} />\r\n    </CardContent>}\r\n    {fields &&\r\n      <FieldDisplayList sx={{ m: 0 }}>\r\n        {fields.map((field, i) => <FieldDisplay key={i} field={field} fieldContext={fieldContext} component={ListItem} />)}\r\n      </FieldDisplayList>\r\n    }\r\n  </CardDark>\r\n}\r\n","import { Box, CardHeader, ListItem, Divider, CardContent } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport { DataContext } from \"../DataContext\"\r\nimport { DocumentSection } from \"../Types/sheet\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./Conditional/ConditionalDisplay\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\r\n\r\nexport default function DocumentDisplay({ sections, teamBuffOnly }: { sections: DocumentSection[], teamBuffOnly?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const sectionsDisplay = sections?.map((section, i) => {\r\n    if (section.canShow && !section.canShow(data)) return null\r\n    if (teamBuffOnly && !section.teamBuff && !section.conditional?.teamBuff) return null\r\n    const talentText = evalIfFunc(section.text, data)\r\n    const description = evalIfFunc(section.fieldsDescription, data)\r\n    const fields = section.fields ?? []\r\n    let { icon, title, action } = section.fieldsHeader ?? {}\r\n    icon = evalIfFunc(icon, data)\r\n    return <Box key={\"section\" + i} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {!teamBuffOnly && talentText && <div>{talentText}</div>}\r\n      {(!teamBuffOnly || section.teamBuff) && <CardDark>\r\n        {teamBuffOnly && talentText && <CardContent>{talentText}</CardContent>}\r\n        {section.fieldsHeader && <CardHeader avatar={icon} title={title} action={action} titleTypographyProps={{ variant: \"subtitle2\" }} />}\r\n        {section.fieldsHeader && <Divider />}\r\n        {teamBuffOnly && description && <CardContent>{description}</CardContent>}\r\n        {fields.length > 0 && <FieldDisplayList>\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} component={ListItem} />)}\r\n        </FieldDisplayList>}\r\n      </CardDark>}\r\n      {!!section.conditional && (!teamBuffOnly || section.conditional.teamBuff) && <ConditionalDisplay conditional={section.conditional} hideDesc={!teamBuffOnly} />}\r\n    </Box>\r\n  }).filter(s => s)\r\n  if (!sectionsDisplay.length) return null\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1}>{sectionsDisplay}</Box>\r\n}\r\n","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ExpandMore } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\r\nimport { useCallback, useContext, useState } from 'react';\r\nimport StatInput from \"../PageCharacter/StatInput\";\r\nimport { DataContext } from \"../DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport KeyMap, { valueString } from '../KeyMap';\r\nimport { allElementsWithPhy, ElementKeyWithPhy } from \"../Types/consts\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport ExpandButton from \"./ExpandButton\";\r\nimport { uncoloredEleIcons } from \"./StatIcon\";\r\n\r\nexport function EnemyExpandCard() {\r\n  const { data } = useContext(DataContext)\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const eLvlNode = data.get(input.enemy.level)\r\n  const eDefRed = data.get(input.enemy.defRed)\r\n  const eDefIgn = data.get(input.enemy.defIgn)\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1} alignItems=\"center\">\r\n          <Grid container spacing={1}>\r\n            <Grid item>\r\n              <Chip size=\"small\" color=\"success\" label={<span>{KeyMap.get(eLvlNode.key)} <strong>{eLvlNode.value}</strong></span>} />\r\n            </Grid>\r\n            {allElementsWithPhy.map(element => <Grid item key={element}>\r\n              <Typography key={element} ><EnemyResText element={element} /></Typography>\r\n            </Grid>)}\r\n            <Grid item>\r\n              <Typography>DEF Reduction {valueString(eDefRed.value, eDefRed.unit)}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography>DEF Ignore {valueString(eDefIgn.value, eDefIgn.unit)}</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n            size=\"small\"\r\n            sx={{ p: 0 }}\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nexport function EnemyResText({ element }: { element: ElementKeyWithPhy }) {\r\n  const { data } = useContext(DataContext)\r\n  const node = data.get(input.enemy[`${element}_res_`])\r\n  const immune = !isFinite(node.value)\r\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\r\n    <span >{uncoloredEleIcons[element]}RES <strong>{valueString(node.value, node.unit)}</strong></span>\r\n  return <ColorText color={element}>{content}</ColorText>\r\n}\r\n\r\nexport function EnemyEditor({ bsProps = { xs: 12, md: 6 } }: { bsProps?: object }) {\r\n  const { data, character: { enemyOverride }, characterDispatch } = useContext(DataContext)\r\n  const defaultVal = 10\r\n\r\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\r\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\r\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\r\n  return <Grid container spacing={1}>\r\n    <Grid item {...bsProps}>\r\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n        To get the specific resistance values of enemies, please visit the wiki.\r\n      </Button>\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyLevel\")}</b>}\r\n        value={eLvl}\r\n        placeholder={KeyMap.getStr(\"enemyLevel\")}\r\n        defaultValue={data.get(input.lvl).value}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value })}\r\n        onReset={() => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyLevel\", value: undefined })}\r\n      />\r\n    </Grid>\r\n    {allElementsWithPhy.map(eleKey => {\r\n      const statKey = `${eleKey}_enemyRes_`\r\n      const val = enemyOverride[statKey]\r\n      const elementImmunity = val === Number.MAX_VALUE\r\n      return <Grid item key={eleKey} {...bsProps}>\r\n        <StatInput\r\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n          name={<ColorText color={eleKey}><b>{KeyMap.get(statKey)}</b></ColorText>}\r\n          value={val ? (elementImmunity ? Infinity : val) : 10}\r\n          placeholder={elementImmunity ? \"Immune \" : KeyMap.getStr(statKey)}\r\n          defaultValue={defaultVal}\r\n          onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey, value })}\r\n          disabled={elementImmunity}\r\n          percent\r\n        >\r\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"enemyOverride\", statKey, value: elementImmunity ? defaultVal : Number.MAX_VALUE })} >\r\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n          </Button>\r\n        </StatInput>\r\n      </Grid>\r\n    })}\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefIgn_\")}</b>}\r\n        value={eDefRed}\r\n        placeholder={KeyMap.getStr(\"enemyDefIgn_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefIgn_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{KeyMap.get(\"enemyDefRed_\")}</b>}\r\n        value={eDefIgn}\r\n        placeholder={KeyMap.getStr(\"enemyDefRed_\")}\r\n        defaultValue={0}\r\n        onValueChange={value => characterDispatch({ type: \"enemyOverride\", statKey: \"enemyDefRed_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { CardContent, Grid, MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\r\nimport { useContext } from 'react';\r\nimport { DataContext } from \"../DataContext\";\r\nimport { uiInput as input } from \"../Formula\";\r\nimport { ElementKey } from \"../Types/consts\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\r\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\r\nimport StatIcon, { uncoloredEleIcons } from \"./StatIcon\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\">\r\nexport function InfusionAuraDropdown(props: InfusionAuraDropdownProps) {\r\n  const { characterSheet, character: { infusionAura }, characterDispatch } = useContext(DataContext)\r\n  if (!characterSheet?.isMelee()) return null\r\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} {...props}>\r\n    {Object.entries(infusionVals).map(([key, text]) =>\r\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\r\n        selected={key === infusionAura} disabled={key === infusionAura}\r\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\">\r\nexport function ReactionToggle(props: ReactionToggleProps) {\r\n  const { data, character: { reactionMode, infusionAura }, characterDispatch } = useContext(DataContext)\r\n  const charEleKey = data.get(input.charEle).value as ElementKey\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={reactionMode} onChange={(e, reactionMode) => characterDispatch({ reactionMode })} {...props}>\r\n    <ToggleButton value=\"\" >No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value=\"pyro_vaporize\"  >\r\n      <ColorText color=\"vaporize\">Vaporize(Pyro){StatIcon.hydro}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"}  >\r\n      <ColorText color=\"vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</ColorText>\r\n    </ToggleButton >}\r\n  </SolidToggleButtonGroup>\r\n}\r\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\">\r\nexport function HitModeToggle(props: HitModeToggleProps) {\r\n  const { character: { hitMode }, characterDispatch } = useContext(DataContext)\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={hitMode} onChange={(e, hitMode) => characterDispatch({ hitMode })} {...props} >\r\n    <ToggleButton value=\"avgHit\">Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\">Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\">Crit Hit DMG</ToggleButton>\r\n  </SolidToggleButtonGroup>\r\n}\r\n\r\n\r\nexport function DamageOptionsCard() {\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item><HitModeToggle size=\"small\" /></Grid>\r\n        <Grid item><InfusionAuraDropdown /></Grid>\r\n        <Grid item><ReactionToggle size=\"small\" /></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { Typography } from \"@mui/material\";\r\nimport { input } from \".\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport ColorText from \"../Components/ColoredText\";\r\nimport SqBadge from \"../Components/SqBadge\";\r\nimport { ArtifactSetKey, CharacterKey, ElementKey, WeaponKey } from \"../Types/consts\";\r\nimport { range } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport { DisplaySub } from \"./type\";\r\nimport { NodeDisplay, UIData } from \"./uiData\";\r\n\r\nconst errHeader = {\r\n  title: <ColorText color=\"warning\">ERROR</ColorText>\r\n}\r\n\r\nconst talentMap = {\r\n  normal: \"Normal Atk.\",\r\n  charged: \"Charged Atk.\",\r\n  plunging: \"Plunging Atk.\",\r\n  skill: \"Ele. Skill\",\r\n  burst: \"Ele. Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"1st Asc. Pass.\",\r\n  passive2: \"4th Asc. Pass.\",\r\n  passive3: \"Util. Pass.\",\r\n  ...Object.fromEntries(range(1, 6).map(i => [`constellation${i}`, `Const. ${i}`]))\r\n}\r\nexport async function getDisplayHeader(data: UIData, sectionKey: string): Promise<{\r\n  title: Displayable,\r\n  icon?: string,\r\n  action?: Displayable\r\n}> {\r\n  if (!sectionKey) return errHeader\r\n  if (sectionKey === \"basic\") return { title: \"Basic Stats\" }\r\n  else if (sectionKey === \"reaction\") return { title: \"Transformative Reactions\" }\r\n  else if (sectionKey.includes(\":\")) {\r\n    const [namespace, key] = sectionKey.split(\":\")\r\n    if (namespace === \"artifact\") {\r\n      const sheet = await ArtifactSheet.get(key as ArtifactSetKey)\r\n      if (!sheet) return errHeader\r\n      return {\r\n        title: sheet.name,\r\n        icon: sheet.defIconSrc\r\n      }\r\n    } else if (namespace === \"weapon\") {\r\n      const sheet = await WeaponSheet.get(key as WeaponKey)\r\n      if (!sheet) return errHeader\r\n      const asc = data.get(input.weapon.asc).value\r\n      return {\r\n        title: sheet.name,\r\n        icon: asc < 2 ? sheet.img : sheet.imgAwaken\r\n      }\r\n    }\r\n  } else {\r\n    const cKey = data.get(input.charKey).value\r\n    const cEle = data.get(input.charEle).value\r\n    if (!cKey || !cEle) return errHeader\r\n    const sheet = await CharacterSheet.get(cKey as CharacterKey)\r\n    const talentKey = [\"normal\", \"charged\", \"plunging\"].includes(sectionKey) ? \"auto\" : sectionKey\r\n    const talent = sheet?.getTalentOfKey(talentKey as any, cEle as ElementKey)\r\n    if (!talent) return errHeader\r\n    const actionText = talentMap[sectionKey]\r\n    return {\r\n      icon: talent.img,\r\n      title: talent.name,\r\n      action: actionText ? <SqBadge ><Typography variant=\"subtitle2\">{actionText}</Typography></SqBadge> : undefined\r\n    }\r\n  }\r\n  return errHeader\r\n}\r\n/**\r\n * Use this function to reorganize the sections to have basic stats at the beginning, and reation at the end.\r\n * @param data\r\n * @returns\r\n */\r\nexport function getDisplaySections(data: UIData,): [string, DisplaySub<NodeDisplay>][] {\r\n  const display = data.getDisplay()\r\n  const sections = Object.entries(display)\r\n  const basic = sections.filter(([k]) => k === \"basic\")\r\n  const reaction = sections.filter(([k]) => k === \"reaction\")\r\n  const weapon = sections.filter(([k]) => k.startsWith(\"weapon\"))\r\n  const artifact = sections.filter(([k]) => k.startsWith(\"artifact\"))\r\n  const rest = sections.filter(([k]) => k !== \"basic\" && k !== \"reaction\" && !k.startsWith(\"weapon\") && !k.startsWith(\"artifact\"))\r\n\r\n  return [\r\n    ...basic,\r\n    ...rest,\r\n    ...weapon,\r\n    ...artifact,\r\n    ...reaction\r\n  ]\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\r\nimport { ReactNode } from \"react\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport TextButton from \"../Components/TextButton\"\r\n\r\ntype StatInputInput = ButtonGroupProps & {\r\n  name: Displayable,\r\n  children?: ReactNode,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  onReset?: () => void\r\n}\r\nconst FlexButtonGroup = styled(ButtonGroup)({\r\n  display: \"flex\"\r\n})\r\n\r\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\r\n\r\n  return <FlexButtonGroup {...restProps} >\r\n    {children}\r\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\r\n      {name}\r\n    </TextButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n      <CustomNumberInput\r\n        sx={{ px: 1 }}\r\n        inputProps={{\r\n          sx: { textAlign: \"right\" }\r\n        }}\r\n        float={percent}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onValueChange}\r\n        disabled={disabled}\r\n        endAdornment={percent ? \"%\" : undefined}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\r\n      <Replay />\r\n    </Button>\r\n  </FlexButtonGroup>\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useArtifact(artifactID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [artifact, setArtifact] = useState(database._getArt(artifactID))\r\n  useEffect(() => setArtifact(database._getArt(artifactID)), [database, artifactID])\r\n  useEffect(() =>\r\n    artifactID ? database.followArt(artifactID, setArtifact) : undefined,\r\n    [artifactID, setArtifact, database])\r\n  return artifact\r\n}\r\n","import { useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useWeapon(weaponID: string | undefined = \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [weapon, setWeapon] = useState(database._getWeapon(weaponID))\r\n  useEffect(() => setWeapon(database._getWeapon(weaponID)), [database, weaponID])\r\n  useEffect(() =>\r\n    weaponID ? database.followWeapon(weaponID, setWeapon) : undefined,\r\n    [weaponID, setWeapon, database])\r\n  return weapon\r\n}\r\n"],"names":["SetEffectDisplay","setKey","setNumKey","sheet","usePromise","ArtifactSheet","setEffectText","setEffectDesc","document","setEffectDocument","display","flexDirection","gap","color","sections","CharacterDropdownButton","value","onChange","unSelectText","unSelectIcon","inventory","noUnselect","filter","props","t","useTranslation","database","useContext","DatabaseContext","characterSheets","CharacterSheet","characterSheet","characterKeys","_getCharKeys","ck","sort","title","name","startIcon","thumbImg","src","thumbImgSide","onClick","selected","disabled","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","map","characterKey","StatDisplayComponent","data","DataContext","getDisplaySections","sx","mr","mb","columns","xs","sm","md","spacing","key","Nodes","Section","displayNs","sectionKey","oldData","header","getDisplayHeader","displayNsReads","useMemo","objectMap","n","nodeKey","customRead","Object","values","every","x","isEmpty","icon","action","avatar","size","m","titleTypographyProps","entries","node","oldValue","get","undefined","ThumbSide","styled","theme","width","height","lineHeight","verticalAlign","marginTop","marginLeft","marginRight","marginBottom","StyledInputBase","InputBase","backgroundColor","palette","primary","main","transition","dark","Wrapper","Button","padding","overflow","CustomNumberInputButtonGroupWrapper","children","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","float","useState","number","setNumber","focused","setFocus","parseFunc","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","type","inputProps","step","onKeyDown","ConditionalSelector","conditional","conditionalValue","character","characterDispatch","setConditional","v","conditionalValues","deepClone","layeredAssignment","path","keys","states","length","stateKey","st","badge","SqBadge","fullWidth","CheckBox","CheckBoxOutlineBlank","state","DropdownButton","MenuItem","Divider","ConditionalDisplay","hideHeader","hideDesc","fieldContext","canShow","dataNode","condVal","description","evalIfFunc","fields","CardDark","CardHeader","CardContent","Box","FieldDisplay","field","i","component","ListItem","DocumentDisplay","teamBuffOnly","sectionsDisplay","section","teamBuff","talentText","text","fieldsDescription","fieldsHeader","s","EnemyExpandCard","expanded","setexpanded","toggle","eLvlNode","input","eDefRed","eDefIgn","container","item","flexGrow","alignItems","label","KeyMap","allElementsWithPhy","element","EnemyResText","valueString","unit","expand","p","in","timeout","unmountOnExit","pt","EnemyEditor","content","isFinite","uncoloredEleIcons","bsProps","enemyOverride","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","href","rel","bgcolor","contentLight","placeholder","defaultValue","onValueChange","statKey","onReset","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","percent","faCheckSquare","faSquare","className","ExpandButton","other","transform","transitions","create","duration","shortest","infusionVals","InfusionAuraDropdown","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","includes","exclusive","baseColor","StatIcon","HitModeToggle","hitMode","DamageOptionsCard","DisabledButton","secondary","TextButton","errHeader","talentMap","normal","charged","plunging","skill","burst","passive","passive1","passive2","passive3","fromEntries","range","split","namespace","defIconSrc","WeaponSheet","asc","img","imgAwaken","cKey","cEle","talentKey","talent","getTalentOfKey","actionText","getDisplay","basic","reaction","weapon","startsWith","artifact","rest","k","FlexButtonGroup","ButtonGroup","StatInput","restProps","whiteSpace","flexBasis","px","textAlign","endAdornment","useArtifact","artifactID","_getArt","setArtifact","followArt","useWeapon","weaponID","_getWeapon","setWeapon","followWeapon"],"sourceRoot":""}