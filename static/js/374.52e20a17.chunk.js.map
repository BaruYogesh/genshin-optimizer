{"version":3,"file":"static/js/374.52e20a17.chunk.js","mappings":"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","sources":["Formula/reaction.ts","Data/Characters/dataUtil.tsx","Data/Weapons/util.ts","Data/Weapons/Claymore/Akuoumaru/index.tsx","Data/Weapons/Claymore/BlackcliffSlasher/index.tsx","Data/Weapons/Claymore/BloodtaintedGreatsword/index.tsx","Data/Weapons/Claymore/DebateClub/index.tsx","Data/Weapons/Claymore/FavoniusGreatsword/index.tsx","Data/Weapons/Claymore/FerrousShadow/index.tsx","Data/Weapons/Claymore/ForestRegalia/index.tsx","Data/Weapons/Claymore/KatsuragikiriNagamasa/index.tsx","Data/Weapons/Claymore/LithicBlade/index.tsx","Data/Weapons/Claymore/LuxuriousSeaLord/index.tsx","Data/Weapons/Claymore/MakhairaAquamarine/index.tsx","Data/Weapons/Claymore/OldMercsPal/index.tsx","Data/Weapons/Claymore/PrototypeArchaic/index.tsx","Data/Weapons/Claymore/Rainslasher/index.tsx","Data/Weapons/Claymore/RedhornStonethresher/index.tsx","Data/Weapons/Claymore/RoyalGreatsword/index.tsx","Data/Weapons/Claymore/SacrificialGreatsword/index.tsx","Data/Weapons/Claymore/SerpentSpine/index.tsx","Data/Weapons/Claymore/SkyriderGreatsword/index.tsx","Data/Weapons/Claymore/SkywardPride/index.tsx","Data/Weapons/Claymore/SnowTombedStarsilver/index.tsx","Data/Weapons/Claymore/SongOfBrokenPines/index.tsx","Data/Weapons/Claymore/TheBell/index.tsx","Data/Weapons/Claymore/TheUnforged/index.tsx","Data/Weapons/Claymore/WasterGreatsword/index.tsx","Data/Weapons/Claymore/Whiteblind/index.tsx","Data/Weapons/Claymore/WhiteIronGreatsword/index.tsx","Data/Weapons/Claymore/WolfsGravestone/index.tsx","Data/Weapons/Claymore/index.ts","Data/Weapons/Sword/AmenomaKageuchi/index.tsx","Data/Weapons/Sword/AquilaFavonia/index.tsx","Data/Weapons/Sword/BlackcliffLongsword/index.tsx","Data/Weapons/Sword/CinnabarSpindle/index.tsx","Data/Weapons/Sword/CoolSteel/index.tsx","Data/Weapons/Sword/KagotsurubeIsshin/index.tsx","Data/Weapons/Sword/DarkIronSword/index.tsx","Data/Weapons/Sword/DullBlade/index.tsx","Data/Weapons/Sword/FavoniusSword/index.tsx","Data/Weapons/Sword/FesteringDesire/index.tsx","Data/Weapons/Sword/FilletBlade/index.tsx","Data/Weapons/Sword/FreedomSworn/index.tsx","Data/Weapons/Sword/HaranGeppakuFutsu/index.tsx","Data/Weapons/Sword/HarbingerOfDawn/index.tsx","Data/Weapons/Sword/IronSting/index.tsx","Data/Weapons/Sword/LionsRoar/index.tsx","Data/Weapons/Sword/MistsplitterReforged/index.tsx","Data/Weapons/Sword/PrimordialJadeCutter/index.tsx","Data/Weapons/Sword/PrototypeRancour/index.tsx","Data/Weapons/Sword/RoyalLongsword/index.tsx","Data/Weapons/Sword/SacrificialSword/index.tsx","Data/Weapons/Sword/SapwoodBlade/index.tsx","Data/Weapons/Sword/SilverSword/index.tsx","Data/Weapons/Sword/SkyriderSword/index.tsx","Data/Weapons/Sword/SkywardBlade/index.tsx","Data/Weapons/Sword/SummitShaper/index.tsx","Data/Weapons/Sword/SwordOfDescension/index.tsx","Data/Weapons/Sword/TheAlleyFlash/index.tsx","Data/Weapons/Sword/TheBlackSword/index.tsx","Data/Weapons/Sword/TheFlute/index.tsx","Data/Weapons/Sword/TravelersHandySword/index.tsx","Data/Weapons/Sword/index.ts","Data/Weapons/Polearm/BeginnersProtector/index.tsx","Data/Weapons/Polearm/BlackcliffPole/index.tsx","Data/Weapons/Polearm/BlackTassel/index.tsx","Data/Weapons/Polearm/CalamityQueller/index.tsx","Data/Weapons/Polearm/CrescentPike/index.tsx","Data/Weapons/Polearm/Deathmatch/index.tsx","Data/Weapons/Polearm/DragonsBane/index.tsx","Data/Weapons/Polearm/DragonspineSpear/index.tsx","Data/Weapons/Polearm/EngulfingLightning/index.tsx","Data/Weapons/Polearm/FavoniusLance/index.tsx","Data/Weapons/Polearm/Halberd/index.tsx","Data/Weapons/Polearm/IronPoint/index.tsx","Data/Weapons/Polearm/KitainCrossSpear/index.tsx","Data/Weapons/Polearm/LithicSpear/index.tsx","Data/Weapons/Polearm/MissiveWindspear/index.tsx","Data/Weapons/Polearm/Moonpiercer/index.tsx","Data/Weapons/Polearm/PrimordialJadeWingedSpear/index.tsx","Data/Weapons/Polearm/PrototypeStarglitter/index.tsx","Data/Weapons/Polearm/RoyalSpear/index.tsx","Data/Weapons/Polearm/SkywardSpine/index.tsx","Data/Weapons/Polearm/StaffOfHoma/index.tsx","Data/Weapons/Polearm/StaffOfTheScarletSands/index.tsx","Data/Weapons/Polearm/TheCatch/index.tsx","Data/Weapons/Polearm/VortexVanquisher/index.tsx","Data/Weapons/Polearm/WavebreakersFin/index.tsx","Data/Weapons/Polearm/WhiteTassel/index.tsx","Data/Weapons/Polearm/index.ts","Data/Weapons/Bow/AlleyHunter/index.tsx","Data/Weapons/Bow/AmosBow/index.tsx","Data/Weapons/Bow/AquaSimulacra/index.tsx","Data/Weapons/Bow/BlackcliffWarbow/index.tsx","Data/Weapons/Bow/CompoundBow/index.tsx","Data/Weapons/Bow/ElegyForTheEnd/index.tsx","Data/Weapons/Bow/FadingTwilight/index.tsx","Data/Weapons/Bow/FavoniusWarbow/index.tsx","Data/Weapons/Bow/Hamayumi/index.tsx","Data/Weapons/Bow/HuntersBow/index.tsx","Data/Weapons/Bow/HuntersPath/index.tsx","Data/Weapons/Bow/KingsSquire/index.tsx","Data/Weapons/Bow/Messenger/index.tsx","Data/Weapons/Bow/MitternachtsWaltz/index.tsx","Data/Weapons/Bow/MouunsMoon/index.tsx","Data/Weapons/Bow/PolarStar/index.tsx","Data/Weapons/Bow/Predator/index.tsx","Data/Weapons/Bow/PrototypeCrescent/index.tsx","Data/Weapons/Bow/RavenBow/index.tsx","Data/Weapons/Bow/RecurveBow/index.tsx","Data/Weapons/Bow/RoyalBow/index.tsx","Data/Weapons/Bow/Rust/index.tsx","Data/Weapons/Bow/SacrificialBow/index.tsx","Data/Weapons/Bow/SeasonedHuntersBow/index.tsx","Data/Weapons/Bow/SharpshootersOath/index.tsx","Data/Weapons/Bow/SkywardHarp/index.tsx","Data/Weapons/Bow/Slingshot/index.tsx","Data/Weapons/Bow/TheStringless/index.tsx","Data/Weapons/Bow/TheViridescentHunt/index.tsx","Data/Weapons/Bow/ThunderingPulse/index.tsx","Data/Weapons/Bow/EndOfTheLine/index.tsx","Data/Weapons/Bow/WindblumeOde/index.tsx","Data/Weapons/Bow/index.ts","Data/Weapons/Catalyst/ApprenticesNotes/index.tsx","Data/Weapons/Catalyst/BlackcliffAgate/index.tsx","Data/Weapons/Catalyst/DodocoTales/index.tsx","Data/Weapons/Catalyst/EmeraldOrb/index.tsx","Data/Weapons/Catalyst/EverlastingMoonglow/index.tsx","Data/Weapons/Catalyst/EyeOfPerception/index.tsx","Data/Weapons/Catalyst/FavoniusCodex/index.tsx","Data/Weapons/Catalyst/Frostbearer/index.tsx","Data/Weapons/Catalyst/FruitOfFulfillment/index.tsx","Data/Weapons/Catalyst/HakushinRing/index.tsx","Data/Weapons/Catalyst/KagurasVerity/index.tsx","Data/Weapons/Catalyst/LostPrayerToTheSacredWinds/index.tsx","Data/Weapons/Catalyst/MagicGuide/index.tsx","Data/Weapons/Catalyst/MappaMare/index.tsx","Data/Weapons/Catalyst/MemoryOfDust/index.tsx","Data/Weapons/Catalyst/OathswornEye/index.tsx","Data/Weapons/Catalyst/OtherworldlyStory/index.tsx","Data/Weapons/Catalyst/PocketGrimoire/index.tsx","Data/Weapons/Catalyst/PrototypeAmber/index.tsx","Data/Weapons/Catalyst/RoyalGrimoire/index.tsx","Data/Weapons/Catalyst/SacrificialFragments/index.tsx","Data/Weapons/Catalyst/SkywardAtlas/index.tsx","Data/Weapons/Catalyst/SolarPearl/index.tsx","Data/Weapons/Catalyst/TheWidsith/index.tsx","Data/Weapons/Catalyst/ThrillingTalesOfDragonSlayers/index.tsx","Data/Weapons/Catalyst/TwinNephrite/index.tsx","Data/Weapons/Catalyst/WineAndSong/index.tsx","Data/Weapons/Catalyst/index.ts","Data/Weapons/index.ts"],"sourcesContent":["import { crystallizeLevelMultipliers, transformativeReactionLevelMultipliers, transformativeReactions } from \"../KeyMap/StatConstants\";\r\nimport { absorbableEle } from \"../Types/consts\";\r\nimport { objectKeyMap } from \"../Util/Util\";\r\nimport { infusionNode, input } from \"./index\";\r\nimport { constant, data, equal, frac, infoMut, one, percent, prod, subscript, sum } from \"./utils\";\r\n\r\nconst crystallizeMulti1 = subscript(input.lvl, crystallizeLevelMultipliers, { key: \"crystallize_level_multi\" })\r\nconst crystallizeElemas = prod(40 / 9, frac(input.total.eleMas, 1400))\r\nconst crystallizeHit = infoMut(prod(\r\n  infoMut(sum(one, /** + Crystallize bonus */ crystallizeElemas), { pivot: true, key: \"base_crystallize_multi\" }),\r\n  crystallizeMulti1),\r\n  { key: \"crystallize\", variant: \"geo\" })\r\n\r\nconst transMulti1 = subscript(input.lvl, transformativeReactionLevelMultipliers, { key: \"transformative_level_multi\" })\r\nconst transMulti2 = prod(16, frac(input.total.eleMas, 2000))\r\nconst trans = {\r\n  ...objectKeyMap(Object.keys(transformativeReactions), reaction => {\r\n    const { multi, resist } = transformativeReactions[reaction]\r\n    return infoMut(prod(\r\n      prod(constant(multi, { key: `${reaction}_multi` }), transMulti1),\r\n      sum(\r\n        infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }),\r\n        input.total[`${reaction}_dmg_`]\r\n      ),\r\n      input.enemy[`${resist}_resMulti`]\r\n    ), { key: `${reaction}_hit` })\r\n  }),\r\n  swirl: objectKeyMap(transformativeReactions.swirl.variants, ele => {\r\n    const base = prod(\r\n      prod(constant(transformativeReactions.swirl.multi, { key: \"swirl_multi\" }), transMulti1),\r\n      sum(infoMut(sum(one, transMulti2), { pivot: true, key: \"base_transformative_multi\" }), input.total.swirl_dmg_)\r\n    )\r\n    const res = input.enemy[`${ele}_resMulti`]\r\n    return infoMut(\r\n      // CAUTION:\r\n      // Add amp multiplier/additive term only to swirls that have amp/additive reactions.\r\n      // It is wasteful to add them indiscriminately, but this means\r\n      // that we need to audit and add appropriate elements here\r\n      // should amp/additive reactions be added to more swirls.\r\n      [\"pyro\", \"hydro\", \"cryo\", \"electro\"].includes(ele)\r\n        ? (ele === \"electro\"\r\n          // Additive reactions apply the additive term before resistance, but after swirl bonuses\r\n          ? data(prod(sum(base, input.hit.addTerm), res), { hit: { ele: constant(ele) } })\r\n          // Amp reaction\r\n          : data(prod(base, res, input.hit.ampMulti), { hit: { ele: constant(ele) } }))\r\n        : prod(base, res),\r\n      { key: `${ele}_swirl_hit` })\r\n  })\r\n}\r\nconst infusionReactions = {\r\n  overloaded: equal(infusionNode, \"pyro\", trans.overloaded, { key: \"overloaded_hit\" }),\r\n  electrocharged: equal(infusionNode, \"hydro\", trans.electrocharged, { key: \"electrocharged_hit\" }),\r\n  superconduct: equal(infusionNode, \"cryo\", trans.superconduct, { key: \"superconduct_hit\" }),\r\n  burning: equal(infusionNode, \"pyro\", trans.burning, { key: \"burning_hit\" }),\r\n  bloom: equal(infusionNode, \"hydro\", trans.bloom, { key: \"bloom_hit\" }),\r\n  burgeon: equal(infusionNode, \"pyro\", trans.burgeon, { key: \"burgeon_hit\" }),\r\n}\r\nexport const reactions = {\r\n  anemo: {\r\n    electroSwirl: trans.swirl.electro,\r\n    pyroSwirl: trans.swirl.pyro,\r\n    cryoSwirl: trans.swirl.cryo,\r\n    hydroSwirl: trans.swirl.hydro,\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    burgeon: trans.burgeon,\r\n    hyperbloom: trans.hyperbloom,\r\n  },\r\n  geo: {\r\n    crystallize: crystallizeHit,\r\n    ...Object.fromEntries(absorbableEle.map(e => [`${e}Crystallize`,\r\n    infoMut(prod(percent(2.5), crystallizeHit), { key: `${e}_crystallize`, variant: e })])),\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  electro: {\r\n    overloaded: trans.overloaded,\r\n    electrocharged: trans.electrocharged,\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    hyperbloom: trans.hyperbloom,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  hydro: {\r\n    electrocharged: trans.electrocharged,\r\n    shattered: trans.shattered,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    superconduct: infusionReactions.superconduct,\r\n    burning: infusionReactions.burning,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  pyro: {\r\n    overloaded: trans.overloaded,\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    burgeon: trans.burgeon,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    bloom: infusionReactions.bloom,\r\n  },\r\n  cryo: {\r\n    superconduct: trans.superconduct,\r\n    shattered: trans.shattered,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    burning: infusionReactions.burning,\r\n    bloom: infusionReactions.bloom,\r\n    burgeon: infusionReactions.burgeon,\r\n  },\r\n  dendro: {\r\n    shattered: trans.shattered,\r\n    burning: trans.burning,\r\n    bloom: trans.bloom,\r\n    overloaded: infusionReactions.overloaded,\r\n    electrocharged: infusionReactions.electrocharged,\r\n    superconduct: infusionReactions.superconduct,\r\n    burgeon: infusionReactions.burgeon,\r\n  }\r\n}\r\n","import { SubstatKey } from \"pipeline\";\r\nimport { infusionNode, input } from \"../../Formula\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { reactions } from \"../../Formula/reaction\";\r\nimport { Data, DisplaySub, NumNode } from \"../../Formula/type\";\r\nimport { constant, data, infoMut, lookup, one, percent, prod, stringPrio, subscript, sum } from \"../../Formula/utils\";\r\nimport { allMainStatKeys, MainStatKey } from \"../../Types/artifact\";\r\nimport { CharacterKey, ElementKey, Region } from \"../../Types/consts\";\r\nimport { layeredAssignment, objectKeyMap, objectMap } from \"../../Util/Util\";\r\nimport _charCurves from \"./expCurve_gen.json\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst charCurves = objectMap(_charCurves, value => [0, ...Object.values(value)])\r\n\r\nconst commonBasic = objectKeyMap([\"hp\", \"atk\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"heal_\"], key => input.total[key])\r\n\r\nconst inferredHitEle = stringPrio(\r\n  lookup(input.hit.move, {\r\n    \"skill\": input.charEle, \"burst\": input.charEle,\r\n  }, undefined),\r\n  lookup(input.weaponType, {\r\n    sword: infusionNode, claymore: infusionNode, polearm: infusionNode,\r\n    catalyst: input.charEle,\r\n  }, undefined),\r\n  \"physical\"\r\n)\r\n\r\nfunction getTalentType(move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\") {\r\n  switch (move) {\r\n    case \"normal\": case \"charged\": case \"plunging\": return \"auto\";\r\n    case \"skill\": return \"skill\";\r\n    case \"burst\": return \"burst\";\r\n  }\r\n}\r\n\r\n/** Note: `additional` applies only to this formula */\r\nexport function customDmgNode(base: NumNode, move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\" | \"elemental\", additional: Data = {}): NumNode {\r\n  return data(input.hit.dmg, mergeData([{\r\n    hit: { base, move: constant(move), ele: additional?.hit?.ele ? undefined : inferredHitEle },\r\n  }, additional]))\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customShieldNode(base: NumNode, additional?: Data): NumNode {\r\n  const shieldNode = prod(base, sum(one, input.total.shield_))\r\n  return additional ? data(shieldNode, additional) : shieldNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function customHealNode(base: NumNode, additional?: Data): NumNode {\r\n  const healInc = input.total.healInc\r\n  const healNode = prod(sum(base, healInc), sum(one, input.total.heal_, input.total.incHeal_))\r\n\r\n  return additional ? data(healNode, additional) : healNode\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function dmgNode(base: MainStatKey | SubstatKey, lvlMultiplier: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional: Data = {}): NumNode {\r\n  const talentType = getTalentType(move)\r\n  return customDmgNode(prod(subscript(input.total[`${talentType}Index`], lvlMultiplier, { key: '_' }), input.total[base]), move, additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customShieldNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNode(base: MainStatKey | SubstatKey, percent: NumNode | number, flat: NumNode | number, additional?: Data): NumNode {\r\n  return customHealNode(sum(prod(percent, input.total[base]), flat), additional)\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function shieldNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customShieldNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function shieldElement(element: \"electro\" | \"cryo\" | \"hydro\" | \"pyro\" | \"geo\", shieldNode: NumNode) {\r\n  return infoMut(prod(percent(element === \"geo\" ? 1.5 : 2.5), shieldNode), { variant: element })\r\n}\r\n/** Note: `additional` applies only to this formula */\r\nexport function healNodeTalent(base: MainStatKey | SubstatKey, baseMultiplier: number[], flat: number[], move: \"normal\" | \"charged\" | \"plunging\" | \"skill\" | \"burst\", additional?: Data): NumNode {\r\n  const talentType = getTalentType(move)\r\n  const talentIndex = input.total[`${talentType}Index`]\r\n  return customHealNode(sum(\r\n    prod(subscript(talentIndex, baseMultiplier, { key: '_' }), input.total[base]),\r\n    subscript(talentIndex, flat)\r\n  ), additional)\r\n}\r\nexport function dataObjForCharacterSheet(\r\n  key: CharacterKey,\r\n  element: ElementKey | undefined,\r\n  region: Region | undefined,\r\n  gen: {\r\n    weaponTypeKey: string,\r\n    base: { hp: number, atk: number, def: number },\r\n    curves: { [key in string]?: string },\r\n    ascensions: { props: { [key in string]?: number } }[]\r\n  },\r\n  display: { [key: string]: DisplaySub },\r\n  additional: Data = {},\r\n): Data {\r\n  function curve(base: number, lvlCurve: string): NumNode {\r\n    return prod(base, subscript(input.lvl, charCurves[lvlCurve]))\r\n  }\r\n  display.basic = { ...commonBasic }\r\n  const data: Data = {\r\n    charKey: constant(key),\r\n    base: {},\r\n    weaponType: constant(gen.weaponTypeKey),\r\n    premod: {},\r\n    display,\r\n  }\r\n  if (element) {\r\n    data.charEle = constant(element)\r\n    data.teamBuff = { tally: { [element]: constant(1) } }\r\n    data.display!.basic[`${element}_dmg_`] = input.total[`${element}_dmg_`]\r\n    data.display!.reaction = reactions[element]\r\n  }\r\n  if (region)\r\n    layeredAssignment(data, [\"teamBuff\", \"tally\", region], constant(1))\r\n  layeredAssignment(data, [\"teamBuff\", \"tally\", \"maxEleMas\"], input.premod.eleMas)\r\n  if (gen.weaponTypeKey !== \"catalyst\") {\r\n    if (!data.display!.basic) data.display!.basic = {}\r\n    data.display!.basic!.physical_dmg_ = input.total.physical_dmg_\r\n  }\r\n\r\n  let foundSpecial: boolean | undefined\r\n  for (const stat of [...allMainStatKeys, \"def\" as const]) {\r\n    const list: NumNode[] = []\r\n    if (gen.curves[stat])\r\n      list.push(curve(gen.base[stat], gen.curves[stat]!))\r\n    const asc = gen.ascensions.some(x => x.props[stat])\r\n    if (asc)\r\n      list.push(subscript(input.asc, gen.ascensions.map(x => x.props[stat] ?? NaN)))\r\n\r\n    if (!list.length) continue\r\n\r\n    const result = infoMut(list.length === 1 ? list[0] : sum(...list), { key: stat, prefix: \"char\", asConst: true })\r\n    if (stat.endsWith(\"_dmg_\")) result.info!.variant = stat.slice(0, -5) as any\r\n    if (stat === \"atk\" || stat === \"def\" || stat === \"hp\")\r\n      data.base![stat] = result\r\n    else {\r\n      if (foundSpecial) throw new Error(\"Duplicated Char Special\")\r\n      foundSpecial = true\r\n      data.special = result\r\n      data.premod![stat] = input.special\r\n    }\r\n  }\r\n\r\n  return mergeData([data, inferInfoMut(additional)])\r\n}\r\n","import type { WeaponData } from \"pipeline\";\r\nimport { inferInfoMut, mergeData } from \"../../Formula/api\";\r\nimport { WeaponKey } from \"../../Types/consts\";\r\nimport _weaponCurves from \"./expCurve_gen.json\";\r\nimport { input } from \"../../Formula\";\r\nimport { Data, DisplaySub } from \"../../Formula/type\";\r\nimport { infoMut, prod, constant, subscript, sum } from \"../../Formula/utils\";\r\n\r\n// TODO: Remove this conversion after changing the file format\r\nconst weaponCurves = Object.fromEntries(Object.entries(_weaponCurves).map(([key, value]) => [key, [0, ...Object.values(value)]]))\r\n\r\nexport function dataObjForWeaponSheet(\r\n  key: WeaponKey,\r\n  gen: WeaponData,\r\n  additional: Data = {},\r\n  displayWeapon: DisplaySub = {},\r\n): Data {\r\n  const result: Data = {\r\n    base: {},\r\n    premod: {},\r\n    total: {},\r\n    weapon: {\r\n      key: constant(key), type: constant(gen.weaponType),\r\n    },\r\n    display: {\r\n      [`weapon:${key}`]: displayWeapon\r\n    },\r\n  }\r\n\r\n  const { mainStat, subStat } = gen\r\n  const merging = [result]\r\n\r\n  if (mainStat.type !== \"atk\" && mainStat.type !== \"def\" && mainStat.type !== \"hp\") throw new Error(\"Main stat type must be `atk`\")\r\n  const mainStatNode = infoMut(sum(prod(mainStat.base, subscript(input.weapon.lvl, weaponCurves[mainStat.curve])), subscript(input.weapon.asc, gen.ascension.map(x => x.addStats[mainStat.type] ?? 0))), { key: mainStat.type })\r\n  merging.push({ base: { [mainStat.type]: input.weapon.main }, weapon: { main: mainStatNode } })\r\n\r\n  if (subStat) {\r\n    if (subStat.type === \"atk\" || subStat.type === \"def\" || subStat.type === \"hp\") throw new Error(\"SubStat cannot be `atk`, `def`, or `hp`\")\r\n    const substatNode = infoMut(prod(subStat.base, subscript(input.weapon.lvl, weaponCurves[subStat.curve])), { key: subStat.type })\r\n    merging.push({\r\n      premod: { [subStat.type]: input.weapon.sub },\r\n      weapon: { sub: substatNode },\r\n    })\r\n  }\r\n  return mergeData([...merging, inferInfoMut(additional, key)])\r\n}\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Akuoumaru\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffSlasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BloodtaintedGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DebateClub\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst dmg = customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n  hit: { ele: constant(\"physical\") }\r\n})\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FerrousShadow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\n// const hpThreshold = [0.7, 0.75, 0.8, 0.85, 0.9]\r\nconst bonusInc = [0.3, 0.35, 0.4, 0.45, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unbending\")\r\nconst charged_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, bonusInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    // TODO: need st(\"lessPercentHP\", { percent: xx }) to change depending on the weapon refine index.\r\n    // Probably need to change IConditional.name to have (data:Data)=>Displayable as well.\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_,\r\n        }, {\r\n          text: trm(\"resistance\")\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ForestRegalia\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"ele_mas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KatsuragikiriNagamasa\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_Src = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmg_Src)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: skill_dmg_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LuxuriousSeaLord\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burst_dmg_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst dmg_Src = [1, 1.25, 1.5, 1.75, 2]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burst_dmg_Src)\r\nconst [condPassivePath, condPassive] = cond(key, \"OceanicVictory\")\r\nconst dmg = equal(input.weapon.key, key, equal(condPassive, 'on',\r\n  customDmgNode(prod(\r\n    subscript(\r\n      input.weapon.refineIndex, dmg_Src, { key: \"_\" }),\r\n      input.total.atk\r\n    ),\r\n    \"elemental\",\r\n    { hit: { ele: constant(\"physical\") }\r\n})))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }],\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st('hitOp.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","\r\nimport { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, percent, prod, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MakhairaAquamarine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst atk_arr = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atkSelf = equal(input.weapon.key, key, equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n))\r\nconst atkTeamDisp = equal(input.weapon.key, key, prod(percent(0.3), atkSelf))\r\nconst atkTeam = unequal(input.activeCharKey, input.charKey, atkTeamDisp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk: atkSelf\r\n  },\r\n  teamBuff: {\r\n    total: {\r\n      atk: atkTeam\r\n    }\r\n  }\r\n}, {\r\n  atkSelf,\r\n  atkTeamDisp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    path: condPassivePath,\r\n    value: condPassive,\r\n    teamBuff: true,\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkSelf\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }],\r\n      }\r\n    }\r\n  }, {\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"teamBuff\")),\r\n    teamBuff: true,\r\n    canShow: equal(condPassive, \"on\", 1),\r\n    fields: [{\r\n      node: infoMut(atkTeamDisp, { key: \"atk\", isTeamBuff: true }),\r\n    }, {\r\n        text: sgt(\"duration\"),\r\n        value: 12,\r\n        unit: \"s\"\r\n    }]\r\n  }],\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OldMercsPal\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeArchaic\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 3, 3.6, 4.2, 4.8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rainslasher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RedhornStonethresher\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst def_Src = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst normal_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst charged_dmg_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst def_ = subscript(input.weapon.refineIndex, def_Src)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, normal_dmg_Src, { key: \"_\" }), input.premod.def))\r\nconst charged_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, charged_dmg_Src, { key: \"_\" }), input.premod.def))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    def_,\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    charged_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n  }\r\n}, {\r\n  normal_dmgInc,\r\n  charged_dmgInc,\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: def_\r\n    }, {\r\n      node: normal_dmgInc\r\n    }, {\r\n      node: charged_dmgInc\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"opponentsDamaged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SerpentSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst takeDMG_s = [3, 2.7, 2.4, 2.2, 2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Wavesplitter\")\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, all_dmg_s, { key: \"_\" })\r\nconst all_dmg_stack = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(all_dmg_, i)),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: all_dmg_stack\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: {\r\n      ...objectKeyMap(range(1, 5), i => ({\r\n        name: st(\"seconds\", { count: i * 4 }),\r\n        fields: [{\r\n          node: all_dmg_stack\r\n        }, {\r\n          text: trm(\"takeMoreDmg\"),\r\n          value: data => takeDMG_s[data.get(input.weapon.refineIndex).value] * i,\r\n          unit: \"%\"\r\n        }]\r\n      })),\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.07, 0.08, 0.09, 0.1]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardPride\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst all_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: all_dmg_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SnowTombedStarsilver\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SongOfBrokenPines\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atk_Src = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atkTeam_Src = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst atkSPD_Src = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelsBannerHymn\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src, { key: \"_\" })\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\nconst atkSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSPD_Src))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n      atkSPD_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { infoMut, equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customShieldNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBell\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst shieldSrc = [0.2, 0.23, 0.26, 0.29, 0.32]\r\nconst allDmgSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"RebelliousGuardian\")\r\nconst shield = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customShieldNode(prod(subscript(input.weapon.refineIndex, shieldSrc, { key: \"_\" }), input.total.hp))))\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst all_dmg_ = equal(condWithShield, \"protected\", subscript(input.weapon.refineIndex, allDmgSrc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n}, {\r\n  shield\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"takeDmg\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 45,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheUnforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"WasterGreatsword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Whiteblind\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteIronGreatsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegen = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst [condPath, condNode] = cond(key, \"CullTheWeak\")\r\nconst heal = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customHealNode(prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.total.hp))))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('afterDefeatEnemy'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WolfsGravestone\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkTeam_Src = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"WolfishTracker\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atk_Src)\r\nconst atkTeam_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkTeam_Src, { key: \"atk_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: atkTeam_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: atk_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"enemyLessPercentHP\", { percent: 30 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atkTeam_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponClaymoreKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport Akuoumaru from \"./Akuoumaru\"\r\nimport BlackcliffSlasher from \"./BlackcliffSlasher\"\r\nimport BloodtaintedGreatsword from \"./BloodtaintedGreatsword\"\r\nimport DebateClub from \"./DebateClub\"\r\nimport FavoniusGreatsword from \"./FavoniusGreatsword\"\r\nimport FerrousShadow from \"./FerrousShadow\"\r\nimport ForestRegalia from \"./ForestRegalia\"\r\nimport KatsuragikiriNagamasa from \"./KatsuragikiriNagamasa\"\r\nimport LithicBlade from \"./LithicBlade\"\r\nimport LuxuriousSeaLord from \"./LuxuriousSeaLord\"\r\nimport MakhairaAquamarine from \"./MakhairaAquamarine\"\r\nimport OldMercsPal from \"./OldMercsPal\"\r\nimport PrototypeArchaic from \"./PrototypeArchaic\"\r\nimport Rainslasher from \"./Rainslasher\"\r\nimport RedhornStonethresher from \"./RedhornStonethresher\"\r\nimport RoyalGreatsword from \"./RoyalGreatsword\"\r\nimport SacrificialGreatsword from \"./SacrificialGreatsword\"\r\nimport SerpentSpine from \"./SerpentSpine\"\r\nimport SkyriderGreatsword from \"./SkyriderGreatsword\"\r\nimport SkywardPride from \"./SkywardPride\"\r\nimport SnowTombedStarsilver from \"./SnowTombedStarsilver\"\r\nimport SongOfBrokenPines from \"./SongOfBrokenPines\"\r\nimport TheBell from \"./TheBell\"\r\nimport TheUnforged from \"./TheUnforged\"\r\nimport WasterGreatsword from \"./WasterGreatsword\"\r\nimport Whiteblind from \"./Whiteblind\"\r\nimport WhiteIronGreatsword from \"./WhiteIronGreatsword\"\r\nimport WolfsGravestone from \"./WolfsGravestone\"\r\nconst claymore: Record<WeaponClaymoreKey, WeaponSheet> = {\r\n  Akuoumaru,\r\n  BlackcliffSlasher,\r\n  BloodtaintedGreatsword,\r\n  DebateClub,\r\n  FavoniusGreatsword,\r\n  FerrousShadow,\r\n  ForestRegalia,\r\n  KatsuragikiriNagamasa,\r\n  LithicBlade,\r\n  LuxuriousSeaLord,\r\n  MakhairaAquamarine,\r\n  OldMercsPal,\r\n  PrototypeArchaic,\r\n  Rainslasher,\r\n  RedhornStonethresher,\r\n  RoyalGreatsword,\r\n  SacrificialGreatsword,\r\n  SerpentSpine,\r\n  SkyriderGreatsword,\r\n  SkywardPride,\r\n  SnowTombedStarsilver,\r\n  SongOfBrokenPines,\r\n  TheBell,\r\n  TheUnforged,\r\n  WasterGreatsword,\r\n  Whiteblind,\r\n  WhiteIronGreatsword,\r\n  WolfsGravestone,\r\n} as const\r\nexport default claymore\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmenomaKageuchi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquilaFavonia\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkDealt = [2, 2.3, 2.6, 2.9, 3.2]\r\nconst hpRegen = [1, 1.15, 1.3, 1.45, 1.6]\r\nconst [condPath, condNode] = cond(key, \"FalconOfTheWest\")\r\nconst atk_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.atk_ ?? NaN))\r\nconst heal = equal(input.weapon.key, key, equal(condNode, 'on', prod(subscript(input.weapon.refineIndex, hpRegen, { key: \"_\" }), input.premod.atk)))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condNode, 'on', customDmgNode(prod(subscript(input.weapon.refineIndex, atkDealt, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n  },\r\n}, {\r\n  heal, dmg\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: st('takeDmg'),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(heal, { key: \"sheet_gen:healing\", variant: \"heal\" })\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CinnabarSpindle\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleDmgIncSrc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"SpotlessHeart\")\r\nconst skill_dmgInc = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, eleDmgIncSrc, { key: \"_\" }), input.premod.def)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: { // TODO: should be total\r\n    skill_dmgInc\r\n  }\r\n}, {\r\n  skill_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"name\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmgInc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CoolSteel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfWaterAndIce\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagotsurubeIsshin\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_ = equal(condPassive, \"on\", percent(0.15)) // No refinement data\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(condPassive, \"on\", customDmgNode(prod(percent(1.8), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } })))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"hitOp.normalChargedOrPlunging\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DarkIronSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.5]\r\nconst [condPassivePath, condPassive] = cond(key, \"Overloaded\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"DullBlade\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FesteringDesire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst skill_critInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc, { key: '_' })\r\nconst skill_critRate_ = subscript(input.weapon.refineIndex, skill_critInc, { key: '_' })\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    skill_critRate_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_\r\n    }, {\r\n      node: skill_critRate_\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FilletBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.8, 3.2, 3.6, 4]\r\nconst cd_Src = [15, 14, 13, 12, 11]\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }, {\r\n      text: sgt(\"cd\"),\r\n      value: (data) => cd_Src[data.get(input.weapon.refineIndex).value],\r\n      unit: \"s\"\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FreedomSworn\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"MillennialMovement\")\r\nconst autoSrc = [0.16, 0.20, 0.24, 0.28, 0.32]\r\nconst atk_Src = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst dmg_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.dmg_ ?? NaN))\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atk_Src))\r\nconst normal_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, autoSrc))\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      normal_dmg_,\r\n      charged_dmg_,\r\n      plunging_dmg_,\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: dmg_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"sigilsConsumed\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: normal_dmg_\r\n        }, {\r\n          node: charged_dmg_\r\n        }, {\r\n          node: plunging_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HaranGeppakuFutsu\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stack_normal_dmg_ = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPath, condNode] = cond(key, \"HonedFlow\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst normal_dmg_ = lookup(condNode,\r\n  objectKeyMap(range(1, 2), i => prod(i, subscript(input.weapon.refineIndex, stack_normal_dmg_)))\r\n  , naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...passive_dmg_,\r\n    normal_dmg_,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [ // Passive\r\n      ...allElements.map((ele) => {\r\n        return { node: passive_dmg_[`${ele}_dmg_`] }\r\n      })\r\n    ],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"consumed\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HarbingerOfDawn\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst critRateSrc_ = [0.14, 0.175, 0.21, 0.245, 0.28]\r\nconst critRate_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, critRateSrc_))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"greaterPercentHP\", { percent: 90 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: critRate_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"IronSting\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionStinger\")\r\nconst eleDmgDealtStack = range(1, 2)\r\nconst allDmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst all_dmg_ = prod(lookup(condPassive, objectKeyMap(eleDmgDealtStack, i => constant(i)), naught),\r\n  subscript(input.weapon.refineIndex, allDmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(eleDmgDealtStack.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LionsRoar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFireAndThunder\")\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MistsplitterReforged\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst stacks = [\"1\", \"2\", \"3\"] as const\r\nconst passiveRefine = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst stacksRefine = {\r\n  \"1\": [0.08, 0.1, 0.12, 0.14, 0.16],\r\n  \"2\": [0.16, 0.2, 0.24, 0.28, 0.32],\r\n  \"3\": [0.28, 0.35, 0.42, 0.49, 0.56]\r\n}\r\nconst [condPath, condNode] = cond(key, \"MistsplittersEmblem\")\r\nconst passive_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, passiveRefine, { key: `${ele}_dmg_`, variant: ele })]\r\n))\r\nconst stacks_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  equal(input.charEle, ele,\r\n    lookup(condNode, objectKeyMap(stacks, stack =>\r\n      subscript(input.weapon.refineIndex, stacksRefine[stack])), naught, { key: `${ele}_dmg_`, variant: ele })\r\n  )]\r\n))\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele =>\r\n  [`${ele}_dmg_`,\r\n  sum(passive_dmg_[`${ele}_dmg_`], stacks_dmg_[`${ele}_dmg_`])]\r\n))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: allElements.map(ele => (\r\n      { node: passive_dmg_[`${ele}_dmg_`] }\r\n    ))\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    name: trm(\"emblem\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    states: Object.fromEntries(\r\n      stacks.map(stack => [stack, {\r\n        name: st(\"stack\", { count: parseInt(stack) }),\r\n        fields: allElements.map(ele => ({\r\n          node: stacks_dmg_[`${ele}_dmg_`]\r\n        }))\r\n      }])\r\n    )\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeCutter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkSrc = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpSrc)\r\nconst atk = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, atkSrc, { key: \"_\" }), input.premod.hp))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk\r\n  }\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: hp_ }, { node: atk }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeRancour\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst bonusInc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\nconst def_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"onHit\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: def_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalLongsword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SapwoodBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 75, 90, 105, 120]\r\nconst eleMas_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, eleMasArr))\r\nconst eleMas = equal(input.activeCharKey, target.charKey, eleMas_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas\r\n    },\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(eleMas_disp, { key: \"eleMas\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SilverSword\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkyriderSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Determination\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\nconst moveSPD_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardBlade\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SkyPiercingMight\")\r\nconst atkSrc_ = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst moveSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst atkSPD_ = equal(\"on\", condPassive, percent(0.1))\r\nconst dmg = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, customDmgNode(prod(subscript(input.weapon.refineIndex, atkSrc_, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst critRate_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.critRate_ ?? NaN))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    moveSPD_,\r\n    atkSPD_,\r\n  }\r\n}, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: critRate_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st('afterUse.burst'),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: moveSPD_\r\n        }, {\r\n          node: atkSPD_\r\n        }, {\r\n          node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SummitShaper\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SwordOfDescension\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = equal(\"Traveler\", input.charKey, 66)\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk\r\n  }\r\n}, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk\r\n    }, {\r\n      node: infoMut(dmg_, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheAlleyFlash\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"ItinerantHero\")\r\nconst bonusInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst all_dmg_ = equal(condPassive, 'on', subscript(input.weapon.refineIndex, bonusInc, { key: \"_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheBlackSword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst autoSrc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst hpRegenSrc = [0.6, 0.7, 0.8, 0.9, 1]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoSrc)\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.atk)))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n}, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }, {\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheFlute\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_ = equal(input.weapon.key, key,\r\n  customDmgNode(prod(percent(2), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg_, { key: \"sheet:dmg\" }) }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TravelersHandySword\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpRegenSrc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, hpRegenSrc, { key: \"_\" }), input.total.hp)))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      { node: infoMut(heal, { key: \"sheet_gen:healing\" }) }\r\n    ]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponSwordKey } from \"../../../Types/consts\"\r\nimport WeaponSheet from \"../WeaponSheet\"\r\nimport AmenomaKageuchi from \"./AmenomaKageuchi\"\r\nimport AquilaFavonia from \"./AquilaFavonia\"\r\nimport BlackcliffLongsword from \"./BlackcliffLongsword\"\r\nimport CinnabarSpindle from \"./CinnabarSpindle\"\r\nimport CoolSteel from \"./CoolSteel\"\r\nimport KagotsurubeIsshin from \"./KagotsurubeIsshin\"\r\nimport DarkIronSword from \"./DarkIronSword\"\r\nimport DullBlade from \"./DullBlade\"\r\nimport FavoniusSword from \"./FavoniusSword\"\r\nimport FesteringDesire from \"./FesteringDesire\"\r\nimport FilletBlade from \"./FilletBlade\"\r\nimport FreedomSworn from \"./FreedomSworn\"\r\nimport HaranGeppakuFutsu from \"./HaranGeppakuFutsu\"\r\nimport HarbingerOfDawn from \"./HarbingerOfDawn\"\r\nimport IronSting from \"./IronSting\"\r\nimport LionsRoar from \"./LionsRoar\"\r\nimport MistsplitterReforged from \"./MistsplitterReforged\"\r\nimport PrimordialJadeCutter from \"./PrimordialJadeCutter\"\r\nimport PrototypeRancour from \"./PrototypeRancour\"\r\nimport RoyalLongsword from \"./RoyalLongsword\"\r\nimport SacrificialSword from \"./SacrificialSword\"\r\nimport SapwoodBlade from \"./SapwoodBlade\"\r\nimport SilverSword from \"./SilverSword\"\r\nimport SkyriderSword from \"./SkyriderSword\"\r\nimport SkywardBlade from \"./SkywardBlade\"\r\nimport SummitShaper from \"./SummitShaper\"\r\nimport SwordOfDescension from \"./SwordOfDescension\"\r\nimport TheAlleyFlash from \"./TheAlleyFlash\"\r\nimport TheBlackSword from \"./TheBlackSword\"\r\nimport TheFlute from \"./TheFlute\"\r\nimport TravelersHandySword from \"./TravelersHandySword\"\r\nconst sword: Record<WeaponSwordKey, WeaponSheet> = {\r\n  AmenomaKageuchi,\r\n  AquilaFavonia,\r\n  BlackcliffLongsword,\r\n  CinnabarSpindle,\r\n  CoolSteel,\r\n  KagotsurubeIsshin,\r\n  DarkIronSword,\r\n  DullBlade,\r\n  FavoniusSword,\r\n  FesteringDesire,\r\n  FilletBlade,\r\n  FreedomSworn,\r\n  HaranGeppakuFutsu,\r\n  HarbingerOfDawn,\r\n  IronSting,\r\n  LionsRoar,\r\n  MistsplitterReforged,\r\n  PrimordialJadeCutter,\r\n  PrototypeRancour,\r\n  RoyalLongsword,\r\n  SacrificialSword,\r\n  SapwoodBlade,\r\n  SilverSword,\r\n  SkyriderSword,\r\n  SkywardBlade,\r\n  SummitShaper,\r\n  SwordOfDescension,\r\n  TheAlleyFlash,\r\n  TheBlackSword,\r\n  TheFlute,\r\n  TravelersHandySword,\r\n} as const\r\nexport default sword\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"BeginnersProtector\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"BlackcliffPole\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states:\r\n      Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n        name: st(\"stack\", { count: c }),\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 30,\r\n          unit: \"s\"\r\n        }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { compareEq, constant, lookup, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CalamityQueller\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [tr] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\n// const [condActivePath, condActive] = cond(key, \"active\")\r\n\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = [0.032, 0.04, 0.048, 0.056, 0.064]\r\n\r\nconst dmg_Nodes = Object.fromEntries(allElements.map(e => [`${e}_dmg_`, subscript(input.weapon.refineIndex, dmg_)]))\r\nconst atkInc = prod(\r\n  compareEq(input.activeCharKey, input.charKey,\r\n    constant(1, { /* TODO: Add key for active char */ }),\r\n    constant(2, { key: `weapon_${key}:inactiveKey` })),\r\n  lookup(condStack, objectKeyMap(range(1, 6), i => constant(i, { key: \"sheet:stacks\" })), 0),\r\n  subscript(input.weapon.refineIndex, atk_, { key: '_' }),\r\n)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...dmg_Nodes,\r\n    atk_: atkInc,\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(dmg_Nodes).map(node => ({ node })),\r\n  }, {\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: tr(\"passiveName\"),\r\n    states: Object.fromEntries(range(1, 6).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: atkInc }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CrescentPike\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionNeedle\")\r\nconst hit = equal(input.weapon.key, key,\r\n  equal(condPassive, 'on', customDmgNode(prod(input.total.atk, subscript(input.weapon.refineIndex, atkInc, { key: \"_\" })), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  })))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { hit })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(hit, { key: `weapon_${key}:hitName` })\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Deathmatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkDefInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst atk_ = lookup(condStack, { \"oneOrNone\": subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), \"moreThanOne\": subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }) }, naught)\r\nconst def_ = equal(condStack, \"moreThanOne\", subscript(input.weapon.refineIndex, atkDefInc, { key: \"_\" }))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    def_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      \"oneOrNone\": {\r\n        name: trm(\"opponents.oneOrNone\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n      \"moreThanOne\": {\r\n        name: trm(\"opponents.moreThanOne\"),\r\n        fields: [{ node: atk_ }, { node: def_ }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonsBane\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.2, 0.24, 0.28, 0.32, 0.36]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DragonspineSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmgAoe, dmgOnCryoOp })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, min, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EngulfingLightning\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst atkMax = [0.8, 0.9, 1, 1.1, 1.2]\r\nconst atk_ = equal(input.weapon.key, key,\r\n  min(prod(subscript(input.weapon.refineIndex, atk), sum(input.premod.enerRech_, percent(-1))), subscript(input.weapon.refineIndex, atkMax)))\r\n\r\nconst enerRech = [0.3, 0.35, 0.40, 0.45, 0.5, 0.55]\r\nconst [condPassivePath, condPassive] = cond(key, \"TimelessDream\")\r\nconst enerRech_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, enerRech))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    enerRech_\r\n  },\r\n}, {\r\n  atk_\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.burst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusLance\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Halberd\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\n\r\nconst key: WeaponKey = \"IronPoint\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KitainCrossSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmgInc = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, skill_dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LithicSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.07, 0.08, 0.09, 0.1, 0.11]\r\nconst critInc = [0.03, 0.04, 0.05, 0.06, 0.07]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, critInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"member\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MissiveWindspear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst emArr = [48, 60, 72, 84, 96]\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, emArr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    eleMas,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterReaction\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_,\r\n        }, {\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Moonpiercer\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst atk_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atk_disp = equal(condPassive, 'on', subscript(input.weapon.refineIndex, atk_arr, { key: \"_\" }))\r\nconst atk_ = equal(input.activeCharKey, target.charKey, atk_disp)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_disp, { key: \"atk_\" }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrimordialJadeWingedSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst atkInc = [0.032, 0.039, 0.046, 0.053, 0.06]\r\nconst allDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = lookup(condStack, objectKeyMap(range(1, 7), i => prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), i)), naught)\r\nconst all_dmg_ = equal(condStack, \"7\", subscript(input.weapon.refineIndex, allDmgInc, { key: \"_\" }))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    all_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.none\"),\r\n    states: Object.fromEntries(range(1, 7).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{ node: atk_ }, { node: all_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeStarglitter\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst dmgInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst normal_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nconst charged_dmg_ = lookup(condStack, objectKeyMap(range(1, 2), i => prod(subscript(input.weapon.refineIndex, dmgInc, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: Object.fromEntries(range(1, 2).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: normal_dmg_ }, { node: charged_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalSpear\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardSpine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRateInc = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst dmgPerc = [0.4, 0.55, 0.7, 0.85, 1]\r\nconst atkSPD_ = percent(0.12)\r\nconst critRate_ = subscript(input.weapon.refineIndex, critRateInc)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_,\r\n    atkSPD_\r\n  }\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critRate_,\r\n    }, {\r\n      node: atkSPD_,\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfHoma\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hpInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst atkInc = [0.008, 0.01, 0.012, 0.014, 0.016]\r\nconst lowHpAtkInc = [0.01, 0.012, 0.014, 0.016, 0.018]\r\nconst hp_ = subscript(input.weapon.refineIndex, hpInc, { key: \"_\" })\r\nconst [condPassivePath, condPassive] = cond(key, \"RecklessCinnabar\")\r\nconst atk1 = prod(subscript(input.weapon.refineIndex, atkInc, { key: \"_\" }), input.premod.hp)\r\nconst atk2 = equal(input.weapon.key, key,\r\n  equal(\"on\", condPassive, prod(subscript(input.weapon.refineIndex, lowHpAtkInc, { key: \"_\" }), input.premod.hp), { key: \"atk\" }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_,\r\n  },\r\n  total: {\r\n    atk: sum(atk1, atk2)\r\n  }\r\n}, {\r\n  atk2_: atk2\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: hp_\r\n    }, {\r\n      node: infoMut(atk1, { key: \"atk\" })\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: st(\"lessPercentHP\", { percent: 50 }),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk2, { key: \"atk\" }),\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"StaffOfTheScarletSands\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\n\r\nconst baseAtkArr = [0.52, 0.65, 0.78, 0.91, 1.04]\r\nconst stacksAttArr = [0.28, 0.35, 0.42, 0.49, 0.56]\r\nconst stacksArr = range(1, 3)\r\nconst baseAtk = equal(input.weapon.key, key, prod(\r\n  subscript(input.weapon.refineIndex, baseAtkArr, { key: \"_\" }),\r\n  input.premod.eleMas\r\n), { key: \"atk\" })\r\nconst stacksAtk = lookup(condStacks, Object.fromEntries(stacksArr.map(stack => [\r\n  stack,\r\n  prod(\r\n    stack,\r\n    subscript(input.weapon.refineIndex, stacksAttArr, { key: \"_\" }),\r\n    input.premod.eleMas\r\n  )\r\n])), naught, { key: \"atk\" })\r\nconst atk = equal(input.weapon.key, key, sum(baseAtk, stacksAtk))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  total: {\r\n    atk\r\n  },\r\n}, {\r\n  atk\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: baseAtk\r\n    }],\r\n  }, {\r\n    value: condStacks,\r\n    path: condStacksPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: Object.fromEntries(stacksArr.map(i =>\r\n      [i, {\r\n        name: st(\"hits\", { count: i }),\r\n        fields: [{\r\n          node: stacksAtk\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheCatch\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst burstDmgSrc_ = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst burstCritSrc_ = [0.06, 0.075, 0.09, 0.105, 0.12]\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, burstDmgSrc_)\r\nconst burst_critRate_ = subscript(input.weapon.refineIndex, burstCritSrc_)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_,\r\n    burst_critRate_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: burst_dmg_ }, { node: burst_critRate_ }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"VortexVanquisher\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, trm(\"shield\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WavebreakersFin\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WhiteTassel\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgInc = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, dmgInc)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_,\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponPoleArmKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport BeginnersProtector from './BeginnersProtector'\r\nimport BlackcliffPole from './BlackcliffPole'\r\nimport BlackTassel from './BlackTassel'\r\nimport CalamityQueller from './CalamityQueller'\r\nimport CrescentPike from './CrescentPike'\r\nimport Deathmatch from './Deathmatch'\r\nimport DragonsBane from './DragonsBane'\r\nimport DragonspineSpear from './DragonspineSpear'\r\nimport EngulfingLightning from './EngulfingLightning'\r\nimport FavoniusLance from './FavoniusLance'\r\nimport Halberd from './Halberd'\r\nimport IronPoint from './IronPoint'\r\nimport KitainCrossSpear from './KitainCrossSpear'\r\nimport LithicSpear from './LithicSpear'\r\nimport MissiveWindspear from './MissiveWindspear'\r\nimport Moonpiercer from './Moonpiercer'\r\nimport PrimordialJadeWingedSpear from './PrimordialJadeWingedSpear'\r\nimport PrototypeStarglitter from './PrototypeStarglitter'\r\nimport RoyalSpear from './RoyalSpear'\r\nimport SkywardSpine from './SkywardSpine'\r\nimport StaffOfHoma from './StaffOfHoma'\r\nimport StaffOfTheScarletSands from './StaffOfTheScarletSands'\r\nimport TheCatch from './TheCatch'\r\nimport VortexVanquisher from './VortexVanquisher'\r\nimport WavebreakersFin from './WavebreakersFin'\r\nimport WhiteTassel from './WhiteTassel'\r\nconst polearm: Record<WeaponPoleArmKey, WeaponSheet> = {\r\n  BeginnersProtector,\r\n  BlackcliffPole,\r\n  BlackTassel,\r\n  CalamityQueller,\r\n  CrescentPike,\r\n  Deathmatch,\r\n  DragonsBane,\r\n  DragonspineSpear,\r\n  EngulfingLightning,\r\n  FavoniusLance,\r\n  Halberd,\r\n  IronPoint,\r\n  KitainCrossSpear,\r\n  LithicSpear,\r\n  MissiveWindspear,\r\n  Moonpiercer,\r\n  PrimordialJadeWingedSpear,\r\n  PrototypeStarglitter,\r\n  RoyalSpear,\r\n  SkywardSpine,\r\n  StaffOfHoma,\r\n  StaffOfTheScarletSands,\r\n  TheCatch,\r\n  VortexVanquisher,\r\n  WavebreakersFin,\r\n  WhiteTassel,\r\n} as const\r\nexport default polearm\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AlleyHunter\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst dmgInc = [.02, .025, .03, .035, .04]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"OppidanAmbush\")\r\nconst all_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 10), i => prod(subscript(input.weapon.refineIndex, dmgInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(range(1, 10).map(c => [c, {\r\n      name: st(\"seconds\", { count: c }),\r\n      fields: [{\r\n        node: all_dmg_\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AmosBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst autoDmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst arrowDmgInc = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"StrongWilled\")\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"normal_dmg_\" })\r\nconst charged_dmg_ = subscript(input.weapon.refineIndex, autoDmgInc, { key: \"charged_dmg_\" })\r\n\r\nconst dmgInc = subscript(input.weapon.refineIndex, arrowDmgInc)\r\nconst normal_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"normal_dmg_\" })\r\nconst charged_dmg_arrow_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(dmgInc, i)),\r\n}, naught, { key: \"charged_dmg_\" })\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_, normal_dmg_arrow_),\r\n    charged_dmg_: sum(charged_dmg_, charged_dmg_arrow_),\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 5), i => ({\r\n      name: st(\"seconds\", { count: i / 10 }),\r\n      fields: [{\r\n        node: normal_dmg_arrow_\r\n      }, {\r\n        node: charged_dmg_arrow_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"AquaSimulacra\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst hp_arr = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst dmg_arr = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\n\r\nconst base_hp_ = subscript(input.weapon.refineIndex, hp_arr)\r\nconst cond_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    hp_: base_hp_,\r\n    all_dmg_: cond_dmg_,\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: base_hp_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: cond_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst atkInc = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 3), i => prod(subscript(input.weapon.refineIndex, atkInc), i))\r\n}, naught)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(range(1, 3).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"CompoundBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.04, .05, .06, .07, .08]\r\nconst atkSPD_s = [0.012, 0.015, 0.018, 0.021, 0.024]\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionArrow\")\r\nconst atk_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atk_s), i))\r\n}, naught)\r\nconst atkSPD_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(subscript(input.weapon.refineIndex, atkSPD_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    atkSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.normalOrCharged\"),\r\n    states: Object.fromEntries(range(1, 4).map(i => [i, {\r\n      name: st(\"hits\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }, {\r\n        node: atkSPD_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ElegyForTheEnd\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\nconst eleMasInc = [60, 75, 90, 105, 120]\r\nconst eleMasInc2 = [100, 125, 150, 175, 200]\r\nconst atk_s = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condPath, condNode] = cond(key, \"ThePartingRefrain\")\r\nconst eleMas = subscript(input.weapon.refineIndex, eleMasInc, { key: \"eleMas\" })\r\n// TODO: These should not stack, similar to NO. But I don't want to copy NO's\r\n// solution, since then these nodes won't show in the team buff panel. And it's\r\n// a bit unlikely people will try to stack this buff\r\nconst eleMas2 = equal(condNode, 'on', subscript(input.weapon.refineIndex, eleMasInc2, { key: \"eleMas\" }))\r\nconst atk_ = equal(condNode, 'on', subscript(input.weapon.refineIndex, atk_s,))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n      eleMas: eleMas2\r\n    }\r\n  }\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: eleMas,\r\n    }],\r\n  }, {\r\n    value: condNode,\r\n    path: condPath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas2\r\n        }, {\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FadingTwilight\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condStatePath, condState] = cond(key, \"state\")\r\nconst state_dmg_dict = {\r\n  evengleam: subscript(input.weapon.refineIndex, [0.06, 0.075, 0.09, 0.105, 0.12]),\r\n  afterglow: subscript(input.weapon.refineIndex, [0.1, 0.125, 0.15, 0.175, 0.20]),\r\n  dawnblaze: subscript(input.weapon.refineIndex, [0.14, 0.175, 0.21, 0.245, 0.28])\r\n}\r\nconst state_dmg_ = lookup(condState, state_dmg_dict, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_: state_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condState,\r\n    path: condStatePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: Object.fromEntries(Object.keys(state_dmg_dict).map(state => [\r\n      state,\r\n      {\r\n        name: trm(`states.${state}`),\r\n        fields: [{ node: state_dmg_ }]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusWarbow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Hamayumi\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst normal_dmg_s = [.16, .20, .24, .28, .32]\r\nconst charged_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst normal_dmg = subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" })\r\nconst charged_dmg = subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" })\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"FullDraw\")\r\nconst normal_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s, { key: \"normal_dmg_\" }))\r\nconst charged_passive = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, charged_dmg_s, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg, normal_passive),\r\n    charged_dmg_: sum(charged_dmg, charged_passive)\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg\r\n    }, {\r\n      node: charged_dmg\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_passive\r\n        }, {\r\n          node: charged_passive\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"HuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HuntersPath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst allEle_dmg_arr = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst allEle_dmg_ = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_dmg_`,\r\n  subscript(input.weapon.refineIndex, allEle_dmg_arr, { key: \"_\" })\r\n]))\r\n\r\nconst charged_dmgIncArr = [1.6, 2, 2.4, 2.8, 3.2]\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst charged_dmgInc = equal(condPassive, \"on\",\r\n  prod(\r\n    subscript(input.weapon.refineIndex, charged_dmgIncArr, { key: \"_\" }),\r\n    input.total.eleMas\r\n  ))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...allEle_dmg_,\r\n    charged_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: Object.values(allEle_dmg_).map(node => ({\r\n      node\r\n    }))\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.charged\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmgInc,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: 12\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KingsSquire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"passive\")\r\nconst eleMasArr = [60, 80, 100, 120, 140]\r\nconst eleMas = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, eleMasArr))\r\nconst dmg_arr = [1, 1.2, 1.4, 1.6, 1.8]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmg_arr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\",\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skillOrBurst\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: 20,\r\n          unit: \"s\",\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Messenger\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_s = [1, 1.25, 1.5, 1.75, 2]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MitternachtsWaltz\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst skill_dmg_s = [.20, .25, .30, .35, .40]\r\nconst normal_dmg_s = [.20, .25, .30, .35, .40]\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"EvernightDuetSkill\")\r\nconst [condNormalPath, condNormal] = cond(key, \"EvernightDuetNormal\")\r\n\r\nconst skill_dmg_ = equal(condSkill, \"on\", subscript(input.weapon.refineIndex, skill_dmg_s))\r\nconst normal_dmg_ = equal(condNormal, \"on\", subscript(input.weapon.refineIndex, normal_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    normal_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skill\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkill,\r\n    path: condSkillPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, min, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MouunsMoon\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"WatatsumiWavewalker\")\r\nconst energyRange = range(4, 36).map(i => i * 10)\r\nconst ratio = [0.0012, 0.0015, 0.0018, 0.0021, 0.0024]\r\nconst max = [0.4, 0.5, 0.6, 0.7, 0.8]\r\nconst burst_dmg_ = lookup(condPassive, Object.fromEntries(energyRange.map(i => [i, min(prod(subscript(input.weapon.refineIndex, ratio, { key: \"_\" }), i), subscript(input.weapon.refineIndex, max, { key: \"_\" }))])), naught)\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    burst_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"party\"),\r\n    states: Object.fromEntries(energyRange.map(i => [i, {\r\n      name: i.toString(),\r\n      fields: [{ node: burst_dmg_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PolarStar\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst eleSrc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst ashenStack1 = [0.1, 0.125, 0.15, 0.175, 0.2]\r\nconst ashenStack2 = [0.2, 0.25, 0.3, 0.35, 0.4]\r\nconst ashenStack3 = [0.3, 0.375, 0.45, 0.528, 0.6]\r\nconst ashenStack4 = [0.48, 0.6, 0.72, 0.84, 0.96]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\n\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, eleSrc)\r\nconst atk_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, ashenStack1), \"2\": subscript(input.weapon.refineIndex, ashenStack2),\r\n  \"3\": subscript(input.weapon.refineIndex, ashenStack3), \"4\": subscript(input.weapon.refineIndex, ashenStack4),\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    atk_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: atk_\r\n      }]\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, percent, prod } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Predator\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normalInc = percent(.1)\r\nconst chargedInc = percent(.1)\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(normalInc, i))\r\n}, naught)\r\nconst charged_dmg_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(chargedInc, i))\r\n}, naught)\r\nconst atk = equal(input.activeCharKey, \"Aloy\", 66)\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    atk\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hitOp.cryo\"),\r\n    states: Object.fromEntries(range(1, 2).map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }, {\r\n        node: charged_dmg_\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 6,\r\n        unit: 's'\r\n      }],\r\n    }]))\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeCrescent\"\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.36, .45, .54, .63, .72]\r\nconst [condPassivePath, condPassive] = cond(key, \"Unreturning\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\nconst moveSPD_ = equal(condPassive, \"on\", percent(.1))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RavenBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst all_dmg_s = [.12, .15, .18, .21, .24]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfFlameAndWater\")\r\nconst all_dmg_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, all_dmg_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RecurveBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healing_s = [.08, .10, .12, .14, .16]\r\nconst healing = equal(input.weapon.key, key,\r\n  customHealNode(prod(input.total.hp, subscript(input.weapon.refineIndex, healing_s))))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { healing })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(healing, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critRate_s = [.08, .10, .12, .14, .16]\r\nconst [condPassivePath, condPassive] = cond(key, \"Focus\")\r\nconst critRate_ = lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, critRate_s), i))\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: critRate_\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Rust\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst normal_dmg_s = [.4, .5, .6, .7, .8]\r\n\r\nconst normal_dmg_ = subscript(input.weapon.refineIndex, normal_dmg_s)\r\nconst charged_dmg_ = constant(-0.1)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_\r\n    }, {\r\n      node: charged_dmg_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialBow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"SeasonedHuntersBow\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SharpshootersOath\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst weakspotDMG_s = [.24, .30, .36, .42, .48]\r\nconst weakspotDMG_ = subscript(input.weapon.refineIndex, weakspotDMG_s)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    weakspotDMG_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: weakspotDMG_\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardHarp\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst critd_s = [.20, .25, .30, .35, .40]\r\nconst dmgPerc = percent(1.25)\r\nconst critDMG_ = subscript(input.weapon.refineIndex, critd_s)\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(dmgPerc, input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critDMG_\r\n  },\r\n}, {\r\n  dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: critDMG_\r\n    }, {\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, percent, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Slingshot\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmg_arr = [.36, .42, .48, .54, .60]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Slingshot\")\r\nconst normal_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"normal_dmg_\" })\r\nconst charged_dmg_inc = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, dmg_arr), { key: \"charged_dmg_\" })\r\nconst normal_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"normal_dmg_\" }))\r\nconst charged_dmg_dec = equal(condPassive, undefined, percent(-0.1, { key: \"charged_dmg_\" }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmg_: sum(normal_dmg_inc, normal_dmg_dec),\r\n    charged_dmg_: sum(charged_dmg_inc, charged_dmg_dec),\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: normal_dmg_dec\r\n    }, {\r\n      node: charged_dmg_dec\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: trm(\"condName\"),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: normal_dmg_inc\r\n        }, {\r\n          node: charged_dmg_inc\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheStringless\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\nconst skill_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\nconst burst_dmg_ = subscript(input.weapon.refineIndex, refinementVals)\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: skill_dmg_,\r\n    }, {\r\n      node: burst_dmg_,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TheViridescentHunt\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgPerc_s = [.4, .5, .6, .7, .8]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc_s), input.total.atk), \"elemental\", { hit: { ele: constant(\"physical\") } }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThunderingPulse\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.20, 0.25, 0.30, 0.35, 0.40]\r\nconst naStack1 = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst naStack2 = [0.24, 0.3, 0.36, 0.42, 0.48]\r\nconst naStack3 = [0.4, 0.5, 0.6, 0.7, 0.8]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"RuleByThunder\")\r\nconst atk_ = subscript(input.weapon.refineIndex, atkSrc)\r\nconst normal_dmg_ = lookup(condPassive, {\r\n  \"1\": subscript(input.weapon.refineIndex, naStack1), \"2\": subscript(input.weapon.refineIndex, naStack2), \"3\": subscript(input.weapon.refineIndex, naStack3)\r\n}, naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    normal_dmg_\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: atk_,\r\n    }]\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 3), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{\r\n        node: normal_dmg_\r\n      }]\r\n    })),\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EndOfTheLine\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgArr = [0.8, 1, 1.2, 1.4, 1.6]\r\nconst dmg = equal(input.weapon.key, key, customDmgNode(\r\n  prod(\r\n    subscript(input.weapon.refineIndex, dmgArr, { key: \"_\" }),\r\n    input.total.atk\r\n  ),\r\n  \"elemental\"\r\n))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmg, { key: \"sheet:dmg\" })\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WindblumeOde\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atk_s = [.16, .20, .24, .28, .32]\r\nconst [condPassivePath, condPassive] = cond(key, \"WindblumeWish\")\r\nconst atk_ = equal(condPassive, \"on\", subscript(input.weapon.refineIndex, atk_s))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.skill\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: 's'\r\n        }]\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponBowKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\n\r\nimport AlleyHunter from './AlleyHunter'\r\nimport AmosBow from \"./AmosBow\"\r\nimport AquaSimulacra from \"./AquaSimulacra\"\r\nimport BlackcliffWarbow from './BlackcliffWarbow'\r\nimport CompoundBow from './CompoundBow'\r\nimport ElegyForTheEnd from \"./ElegyForTheEnd\"\r\nimport FadingTwilight from \"./FadingTwilight\"\r\nimport FavoniusWarbow from './FavoniusWarbow'\r\nimport Hamayumi from './Hamayumi'\r\nimport HuntersBow from \"./HuntersBow\"\r\nimport HuntersPath from './HuntersPath'\r\nimport KingsSquire from './KingsSquire'\r\nimport Messenger from './Messenger'\r\nimport MitternachtsWaltz from './MitternachtsWaltz'\r\nimport MouunsMoon from './MouunsMoon'\r\nimport PolarStar from './PolarStar'\r\nimport Predator from './Predator'\r\nimport PrototypeCrescent from './PrototypeCrescent'\r\nimport RavenBow from './RavenBow'\r\nimport RecurveBow from './RecurveBow'\r\nimport RoyalBow from './RoyalBow'\r\nimport Rust from './Rust'\r\nimport SacrificialBow from \"./SacrificialBow\"\r\nimport SeasonedHuntersBow from './SeasonedHuntersBow'\r\nimport SharpshootersOath from './SharpshootersOath'\r\nimport SkywardHarp from './SkywardHarp'\r\nimport Slingshot from './Slingshot'\r\nimport TheStringless from './TheStringless'\r\nimport TheViridescentHunt from './TheViridescentHunt'\r\nimport ThunderingPulse from './ThunderingPulse'\r\nimport EndOfTheLine from './EndOfTheLine'\r\nimport WindblumeOde from './WindblumeOde'\r\n\r\nconst bow: Record<WeaponBowKey, WeaponSheet> = {\r\n  AlleyHunter,\r\n  AmosBow,\r\n  AquaSimulacra,\r\n  BlackcliffWarbow,\r\n  CompoundBow,\r\n  ElegyForTheEnd,\r\n  FadingTwilight,\r\n  FavoniusWarbow,\r\n  Hamayumi,\r\n  HuntersBow,\r\n  HuntersPath,\r\n  KingsSquire,\r\n  Messenger,\r\n  MitternachtsWaltz,\r\n  MouunsMoon,\r\n  PolarStar,\r\n  Predator,\r\n  PrototypeCrescent,\r\n  RavenBow,\r\n  RecurveBow,\r\n  RoyalBow,\r\n  Rust,\r\n  SacrificialBow,\r\n  SeasonedHuntersBow,\r\n  SharpshootersOath,\r\n  SkywardHarp,\r\n  Slingshot,\r\n  TheStringless,\r\n  TheViridescentHunt,\r\n  ThunderingPulse,\r\n  EndOfTheLine,\r\n  WindblumeOde,\r\n} as const\r\nexport default bow\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst data_gen = data_gen_json as WeaponData\r\nconst key: WeaponKey = \"ApprenticesNotes\"\r\nexport const data = dataObjForWeaponSheet(key, data_gen)\r\nconst sheet: IWeaponSheet = {\r\n  ...data_gen as WeaponData,\r\n  icon,\r\n  iconAwaken,\r\n  document: []\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, lookup, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"BlackcliffAgate\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"PressTheAdvantage\")\r\nconst opponentsDefeated = range(1, 3)\r\nconst atkInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst atk_ = prod(lookup(condPassive, objectKeyMap(opponentsDefeated, i => constant(i)), 0),\r\n  subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_: atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterDefeatEnemy\"),\r\n    states: Object.fromEntries(opponentsDefeated.map(c => [c, {\r\n      name: st(\"stack\", { count: c }),\r\n      fields: [{\r\n        node: atk_,\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: 30,\r\n        unit: \"s\"\r\n      }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"DodocoTales\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst chargedDmgInc = [0.16, 0.2, 0.24, 0.28, 0.32]\r\nconst atkInc = [0.8, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"DodoventureNormal\")\r\nconst [condChargedPath, condCharged] = cond(key, \"DodoventureCharged\")\r\nconst charged_dmg_ = equal(\"on\", condNormal, subscript(input.weapon.refineIndex, chargedDmgInc))\r\nconst atk_ = equal(\"on\", condCharged, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    charged_dmg_,\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    name: st(\"hitOp.normal\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: charged_dmg_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condCharged,\r\n    path: condChargedPath,\r\n    name: st(\"hitOp.charged\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EmeraldOrb\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Rapids\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.hydro\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 12,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EverlastingMoonglow\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst hp_conv = [0.01, 0.015, 0.02, 0.025, 0.03]\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst normal_dmgInc = equal(input.weapon.key, key,\r\n  prod(subscript(input.weapon.refineIndex, hp_conv, { key: '_' }), input.premod.hp))\r\nconst heal_ = subscript(input.weapon.refineIndex, data_gen.addProps.map(x => x.heal_ ?? NaN))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    normal_dmgInc, // TODO: technically should be in \"total\", but should be fine as premod\r\n    heal_\r\n  }\r\n}, {\r\n  normal_dmgInc\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: heal_\r\n    }, {\r\n      text: trm(\"name\"),\r\n      node: normal_dmgInc,\r\n    }],\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"EyeOfPerception\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmg_Src = [2.4, 2.7, 3, 3.3, 3.6]\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmg_Src, { key: \"_\" }), input.premod.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmg_: dmg\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: infoMut(dmg, { key: \"sheet:dmg\" }) }],\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FavoniusCodex\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"Frostbearer\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgAoePerc = [0.8, 0.95, 1.1, 1.25, 1.4]\r\nconst dmgCryoPerc = [2, 2.4, 2.8, 3.2, 3.6]\r\nconst dmgAoe = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgAoePerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst dmgOnCryoOp = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgCryoPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, undefined, {\r\n  dmgAoe,\r\n  dmgOnCryoOp\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(dmgAoe, { key: `weapon_${key}:aoeDmg` }),\r\n    }, {\r\n      node: infoMut(dmgOnCryoOp, { key: `weapon_${key}:cryoAffectedDmg` }),\r\n    }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"FruitOfFulfillment\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst eleMasArr = [24, 27, 30, 33, 36]\r\nconst [condStacksPath, condStacks] = cond(key, \"stacks\")\r\nconst stacksArr = range(1, 5)\r\nconst eleMas = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    subscript(input.weapon.refineIndex, eleMasArr),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst atk_ = lookup(condStacks, Object.fromEntries(stacksArr.map(stacks => [\r\n  stacks,\r\n  prod(\r\n    percent(-0.05),\r\n    stacks\r\n  )\r\n])), naught)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    eleMas,\r\n    atk_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    path: condStacksPath,\r\n    value: condStacks,\r\n    name: trm(\"stackName\"),\r\n    states: Object.fromEntries(stacksArr.map(stack => [\r\n      stack,\r\n      {\r\n        name: st(\"stack\", { count: stack }),\r\n        fields: [{\r\n          node: eleMas,\r\n        }, {\r\n          node: atk_\r\n        }]\r\n      }\r\n    ]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"HakushinRing\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementEleBonusSrc = [0.1, 0.125, 0.15, 0.175, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"SakuraSaiguu\")\r\nconst eleDmg = subscript(input.weapon.refineIndex, refinementEleBonusSrc)\r\nconst anemo_dmg_disp  = equal(\"anemo\", condPassive, eleDmg)\r\nconst cryo_dmg_disp   = equal(\"cryo\", condPassive, eleDmg)\r\nconst geo_dmg_disp    = equal(\"geo\", condPassive, eleDmg)\r\nconst hydro_dmg_disp  = equal(\"hydro\", condPassive, eleDmg)\r\nconst pyro_dmg_disp   = equal(\"pyro\", condPassive, eleDmg)\r\nconst dendro_dmg_disp = equal(\"dendro\", condPassive, eleDmg)\r\nconst anemo_dmg_  = equal(\"anemo\", target.charEle, anemo_dmg_disp)\r\nconst cryo_dmg_   = equal(\"cryo\", target.charEle, cryo_dmg_disp)\r\nconst geo_dmg_    = equal(\"geo\", target.charEle, geo_dmg_disp)\r\nconst hydro_dmg_  = equal(\"hydro\", target.charEle, hydro_dmg_disp)\r\nconst pyro_dmg_   = equal(\"pyro\", target.charEle, pyro_dmg_disp)\r\nconst dendro_dmg_ = equal(\"dendro\", target.charEle, dendro_dmg_disp)\r\n\r\nconst electro_dmg_disp = unequal(condPassive, undefined, eleDmg)\r\nconst electro_dmg_ = equal(\"electro\", target.charEle, electro_dmg_disp)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_dmg_,\r\n      cryo_dmg_,\r\n      electro_dmg_,\r\n      geo_dmg_,\r\n      hydro_dmg_,\r\n      pyro_dmg_,\r\n      dendro_dmg_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"elementalReaction.electro\"),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      anemo: {\r\n        name: <ColorText color=\"swirl\">{sgt(\"reaction.swirl\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(anemo_dmg_disp, { key: \"anemo_dmg_\", variant: \"anemo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      cryo: {\r\n        name: <ColorText color=\"superconduct\">{sgt(\"reaction.superconduct\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      geo: {\r\n        name: <ColorText color=\"crystallize\">{sgt(\"reaction.crystallize\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(geo_dmg_disp, { key: \"geo_dmg_\", variant: \"geo\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      pyro: {\r\n        name: <ColorText color=\"overloaded\">{sgt(\"reaction.overloaded\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(pyro_dmg_disp, { key: \"pyro_dmg_\", variant: \"pyro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      hydro: {\r\n        name: <ColorText color=\"electrocharged\">{sgt(\"reaction.electrocharged\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(hydro_dmg_disp, { key: \"hydro_dmg_\", variant: \"hydro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      dendro: {\r\n        name: <ColorText color=\"aggravate\">{sgt(\"reaction.aggravate\")}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n        }, {\r\n          node: infoMut(electro_dmg_disp, { key: \"electro_dmg_\", variant: \"electro\", isTeamBuff: true }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 6,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript, sum } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"KagurasVerity\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPath, condNode] = cond(key, \"KaguraDance\")\r\nconst totems = range(1, 3)\r\nconst dmg_ = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst skill_dmg_s = totems.map(i => equal(condNode, i.toString(), subscript(input.weapon.refineIndex, dmg_.map(d => d * i)), { key: \"skill_dmg_\" }))\r\nconst ele_dmg_s = Object.fromEntries(allElements.map(ele => [ele, equal(condNode, \"3\", subscript(input.weapon.refineIndex, dmg_))]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_: sum(...skill_dmg_s),\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, ele_dmg_s[ele]]))\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNode,\r\n    path: condPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states:\r\n      Object.fromEntries(totems.map(i => [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: skill_dmg_s[i - 1]\r\n        },\r\n        ...allElements.map(ele => ({ node: ele_dmg_s[ele] }))]\r\n      }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, percent, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"LostPrayerToTheSacredWinds\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst ele_dmg_s = [0.08, 0.10, 0.12, 0.14, 0.16]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"BoundlessBlessing\")\r\n\r\nconst moveSPD_ = percent(0.1)\r\nconst eleDmgInc = subscript(input.weapon.refineIndex, ele_dmg_s, { key: \"_\" })\r\nconst eleDmgStacks = Object.fromEntries(allElements.map(ele => [ele, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 4), i => prod(eleDmgInc, i)),\r\n}, naught)]))\r\n\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    moveSPD_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleDmgStacks[ele]])),\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{ node: moveSPD_ }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"activeCharField\"),\r\n    states: objectKeyMap(range(1, 4), i => ({\r\n      name: st(\"seconds\", { count: i * 4 }),\r\n      fields: allElements.map(ele => ({ node: eleDmgStacks[ele] }))\r\n    }))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MagicGuide\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst dmgInc = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst [condPassivePath, condPassive] = cond(key, \"BaneOfStormAndTide\")\r\nconst all_dmg_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, dmgInc))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    all_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm(\"condName\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: all_dmg_,\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MappaMare\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"InfusionScroll\")\r\n\r\nconst dmgBonus = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst allDmgInc = subscript(input.weapon.refineIndex, dmgBonus)\r\nconst eleDmgs = objectKeyValueMap(allElements, e => [`${e}_dmg_`, lookup(condPassive, {\r\n  ...objectKeyMap(range(1, 2), i => prod(allDmgInc, i))\r\n}, naught)])\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: eleDmgs\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: trm(\"condName\"),\r\n    states: objectKeyMap(range(1, 2), i => ({\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [...Object.values(eleDmgs).map(node => ({ node })), {\r\n        text: sgt(\"duration\"),\r\n        value: 10,\r\n        unit: \"s\"\r\n      }]\r\n    }))\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, lookup, naught, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"MemoryOfDust\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\nconst shieldSrc = [0.2, 0.25, 0.3, 0.35, 0.40]\r\nconst atkSrc = [0.04, 0.05, 0.06, 0.07, 0.08]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GoldenMajesty\")\r\nconst shield_ = subscript(input.weapon.refineIndex, shieldSrc)\r\n\r\nconst [condWithShieldPath, condWithShield] = cond(key, \"WithShield\")\r\n\r\nconst atkInc = subscript(input.weapon.refineIndex, atkSrc)\r\nconst atkStacks = prod(\r\n  sum(1, equal(condWithShield, \"protected\", 1)),\r\n  lookup(condPassive, Object.fromEntries(range(1, 5).map(i =>\r\n    [i, prod(atkInc, i)])), naught)\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    shield_,\r\n    atk_: atkStacks\r\n  },\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: shield_\r\n    }],\r\n  }, {\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"hits\"),\r\n    states: Object.fromEntries(range(1, 5).map(i =>\r\n      [i, {\r\n        name: st(\"stack\", { count: i }),\r\n        fields: [{\r\n          node: atkStacks\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 8,\r\n          unit: \"s\"\r\n        }]\r\n      }]\r\n    )),\r\n  }, {\r\n    value: condWithShield,\r\n    path: condWithShieldPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"protectedByShield\"),\r\n    states: {\r\n      protected: {\r\n        fields: [{\r\n          text: trm(\"atkEffInc\"),\r\n          value: 100,\r\n          unit: \"%\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OathswornEye\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.24, 0.30, 0.36, 0.42, 0.48]\r\n\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"faLight\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst enerRech_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    enerRech_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"afterUse.skill\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: enerRech_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"OtherworldlyStory\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst healPerc = [0.01, 0.0125, 0.015, 0.0175, 0.02]\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [{\r\n      node: infoMut(heal, { key: \"sheet_gen:healing\" })\r\n    }]\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PocketGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, infoMut, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { customHealNode } from '../../../Characters/dataUtil'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"PrototypeAmber\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Gliding\")\r\nconst healPerc = [0.04, 0.045, 0.05, 0.055, 0.06]\r\n\r\nconst heal = equal(input.weapon.key, key,\r\n  customHealNode(prod(subscript(input.weapon.refineIndex, healPerc, { key: \"_\" }), input.total.hp)))\r\nexport const data = dataObjForWeaponSheet(key, data_gen, undefined, { heal })\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterUse.burst\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{ node: infoMut(heal, { key: \"sheet_gen:healing\" }) }]\r\n      }\r\n    }\r\n  }]\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import type { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { lookup, naught, prod, subscript } from \"../../../../Formula/utils\"\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../../Util/Util'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"RoyalGrimoire\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst [condStackPath, condStack] = cond(key, \"stack\")\r\nconst crit_ = [0.08, 0.1, 0.12, 0.14, 0.16]\r\nconst critRate_ = lookup(condStack, objectKeyMap(range(1, 5), i => prod(subscript(input.weapon.refineIndex, crit_, { key: \"_\" }), i)), naught)\r\nexport const data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    critRate_\r\n  },\r\n})\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condStack,\r\n    path: condStackPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"stacks\")),\r\n    name: st(\"opponentsDamaged\"),\r\n    states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n      name: st(\"stack\", { count: i }),\r\n      fields: [{ node: critRate_ }]\r\n    }]))\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SacrificialFragments\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen)\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{ header: headerTemplate(key, icon, iconAwaken), fields: [] }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { constant, equal, infoMut, prod, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { customDmgNode } from '../../../Characters/dataUtil'\r\nimport { st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from \"../../WeaponSheet\"\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SkywardAtlas\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst dmgBonus = [0.12, 0.15, 0.18, 0.21, 0.24]\r\nconst eleBonus_ = Object.fromEntries(allElements.map(ele => [ele, subscript(input.weapon.refineIndex, dmgBonus)]))\r\nconst dmgPerc = [1.6, 2, 2.4, 2.8, 3.2]\r\n\r\nconst dmg = equal(input.weapon.key, key,\r\n  customDmgNode(prod(subscript(input.weapon.refineIndex, dmgPerc, { key: \"_\" }), input.total.atk), \"elemental\", {\r\n    hit: { ele: constant(\"physical\") }\r\n  }))\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n  }\r\n}, { dmg })\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"base\")),\r\n    fields: [\r\n      ...allElements.map(ele => ({ node: eleBonus_[ele] })),\r\n      {\r\n        node: infoMut(dmg, { key: \"sheet:dmg\" }),\r\n      }]\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"SolarPearl\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refinementVals = [0.20, 0.25, 0.30, 0.35, 0.40]\r\n\r\nconst [condNormalPath, condNormal] = cond(key, \"solarShineNormal\")\r\nconst [condSkillBurstPath, condSkillBurst] = cond(key, \"solarShineSkillBurst\")\r\nconst refineVal = subscript(input.weapon.refineIndex, refinementVals)\r\nconst skill_dmg_ = equal(\"normal\", condNormal, refineVal)\r\nconst burst_dmg_ = { ...skill_dmg_ }\r\nconst normal_dmg_ = equal(\"skillBurst\", condSkillBurst, refineVal)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    skill_dmg_,\r\n    burst_dmg_,\r\n    normal_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condNormal,\r\n    path: condNormalPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.normal\"),\r\n    states: {\r\n      normal: {\r\n        fields: [{\r\n          node: skill_dmg_\r\n        }, {\r\n          node: burst_dmg_\r\n        }]\r\n      }\r\n    }\r\n  }, {\r\n    value: condSkillBurst,\r\n    path: condSkillBurstPath,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: st(\"hitOp.skillOrBurst\"),\r\n    states: {\r\n      skillBurst: {\r\n        fields: [{\r\n          node: normal_dmg_\r\n        }]\r\n      },\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { allElements, WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\nconst key: WeaponKey = \"TheWidsith\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [tr, trm] = trans(\"weapon\", key)\r\n\r\nconst refinementAtkVals = [0.6, 0.75, 0.9, 1.05, 1.2]\r\nconst refinementEleDmgVals = [0.48, 0.6, 0.72, 0.84, 0.96]\r\nconst refinementEleMasVals = [240, 300, 360, 420, 480]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Debut\")\r\nconst atk_ = equal(\"recitative\", condPassive, subscript(input.weapon.refineIndex, refinementAtkVals))\r\nconst eleBonus_ = Object.fromEntries(allElements.map(\r\n  ele => [ele, equal(\"aria\", condPassive, subscript(input.weapon.refineIndex, refinementEleDmgVals))]\r\n))\r\nconst eleMas = equal(\"interlude\", condPassive, subscript(input.weapon.refineIndex, refinementEleMasVals))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    ...Object.fromEntries(allElements.map(ele => [`${ele}_dmg_`, eleBonus_[ele]])),\r\n    eleMas\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    name: tr(\"passiveName\"),\r\n    states: {\r\n      aria: {\r\n        name: trm(\"aria\"),\r\n        fields: [\r\n          ...allElements.map(ele => ({ node: eleBonus_[ele] }))\r\n        ,{\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      interlude: {\r\n        name: trm(\"interlude\"),\r\n        fields: [{\r\n          node: eleMas\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      },\r\n      recitative: {\r\n        name: trm(\"recitative\"),\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, infoMut, subscript, unequal } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"ThrillingTalesOfDragonSlayers\"\r\nconst data_gen = data_gen_json as WeaponData\r\nconst [, trm] = trans(\"weapon\", key)\r\n\r\nconst atkSrc = [0.24, 0.3, 0.36, 0.42, 0.48]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"Heritage\")\r\nconst atk_Disp = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkSrc))\r\nconst atk_ = unequal(input.activeCharKey, input.charKey, // Don't apply to wielding char\r\n  equal(input.activeCharKey, target.charKey, atk_Disp) // Only apply to active char\r\n)\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  teamBuff: {\r\n    premod: {\r\n      atk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: trm('condName'),\r\n    canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n    teamBuff: true,\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: infoMut(atk_Disp, { key: \"atk_\" })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 10,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"TwinNephrite\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst refineInc = [0.12, 0.14, 0.16, 0.18, 0.2]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"GuerillaTactics\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\nconst moveSPD_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, refineInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_,\r\n    moveSPD_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterDefeatEnemy\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          node: moveSPD_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 15,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponData } from 'pipeline'\r\nimport { input } from '../../../../Formula'\r\nimport { equal, subscript } from '../../../../Formula/utils'\r\nimport { WeaponKey } from '../../../../Types/consts'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { dataObjForWeaponSheet } from '../../util'\r\nimport WeaponSheet, { headerTemplate, IWeaponSheet } from '../../WeaponSheet'\r\nimport iconAwaken from './AwakenIcon.png'\r\nimport data_gen_json from './data_gen.json'\r\nimport icon from './Icon.png'\r\n\r\nconst key: WeaponKey = \"WineAndSong\"\r\nconst data_gen = data_gen_json as WeaponData\r\n\r\nconst atkInc = [0.2, 0.25, 0.3, 0.35, 0.4]\r\n\r\nconst [condPassivePath, condPassive] = cond(key, \"EverChanging\")\r\nconst atk_ = equal(\"on\", condPassive, subscript(input.weapon.refineIndex, atkInc))\r\n\r\nconst data = dataObjForWeaponSheet(key, data_gen, {\r\n  premod: {\r\n    atk_\r\n  }\r\n})\r\n\r\nconst sheet: IWeaponSheet = {\r\n  icon,\r\n  iconAwaken,\r\n  document: [{\r\n    value: condPassive,\r\n    path: condPassivePath,\r\n    name: st(\"afterSprint\"),\r\n    header: headerTemplate(key, icon, iconAwaken, st(\"conditional\")),\r\n    states: {\r\n      on: {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 5,\r\n          unit: \"s\"\r\n        }]\r\n      }\r\n    }\r\n  }],\r\n}\r\nexport default new WeaponSheet(key, sheet, data_gen, data)\r\n","import { WeaponCatalystKey } from '../../../Types/consts'\r\nimport WeaponSheet from '../WeaponSheet'\r\nimport ApprenticesNotes from './ApprenticesNotes'\r\nimport BlackcliffAgate from './BlackcliffAgate'\r\nimport DodocoTales from './DodocoTales'\r\nimport EmeraldOrb from './EmeraldOrb'\r\nimport EverlastingMoonglow from './EverlastingMoonglow'\r\nimport EyeOfPerception from './EyeOfPerception'\r\nimport FavoniusCodex from './FavoniusCodex'\r\nimport Frostbearer from './Frostbearer'\r\nimport FruitOfFulfillment from './FruitOfFulfillment'\r\nimport HakushinRing from './HakushinRing'\r\nimport KagurasVerity from './KagurasVerity'\r\nimport LostPrayerToTheSacredWinds from './LostPrayerToTheSacredWinds'\r\nimport MagicGuide from './MagicGuide'\r\nimport MappaMare from './MappaMare'\r\nimport MemoryOfDust from './MemoryOfDust'\r\nimport OathswornEye from './OathswornEye'\r\nimport OtherworldlyStory from './OtherworldlyStory'\r\nimport PocketGrimoire from './PocketGrimoire'\r\nimport PrototypeAmber from './PrototypeAmber'\r\nimport RoyalGrimoire from './RoyalGrimoire'\r\nimport SacrificialFragments from './SacrificialFragments'\r\nimport SkywardAtlas from './SkywardAtlas'\r\nimport SolarPearl from './SolarPearl'\r\nimport TheWidsith from './TheWidsith'\r\nimport ThrillingTalesOfDragonSlayers from './ThrillingTalesOfDragonSlayers'\r\nimport TwinNephrite from './TwinNephrite'\r\nimport WineAndSong from './WineAndSong'\r\nconst catalyst: Record<WeaponCatalystKey, WeaponSheet> = {\r\n  ApprenticesNotes,\r\n  BlackcliffAgate,\r\n  DodocoTales,\r\n  EmeraldOrb,\r\n  EverlastingMoonglow,\r\n  EyeOfPerception,\r\n  FavoniusCodex,\r\n  Frostbearer,\r\n  FruitOfFulfillment,\r\n  HakushinRing,\r\n  KagurasVerity,\r\n  LostPrayerToTheSacredWinds,\r\n  MagicGuide,\r\n  MappaMare,\r\n  MemoryOfDust,\r\n  OathswornEye,\r\n  OtherworldlyStory,\r\n  PocketGrimoire,\r\n  PrototypeAmber,\r\n  RoyalGrimoire,\r\n  SacrificialFragments,\r\n  SkywardAtlas,\r\n  SolarPearl,\r\n  TheWidsith,\r\n  ThrillingTalesOfDragonSlayers,\r\n  TwinNephrite,\r\n  WineAndSong,\r\n} as const\r\nexport default catalyst\r\n","import claymore from './Claymore'\r\nimport sword from './Sword'\r\nimport polearm from './Polearm'\r\nimport bow from './Bow'\r\nimport { WeaponKey } from '../../Types/consts'\r\nimport catalyst from './Catalyst'\r\nimport WeaponSheet from './WeaponSheet'\r\n\r\nconst WeaponData: Record<WeaponKey, WeaponSheet> = {\r\n  ...sword,\r\n  ...claymore,\r\n  ...polearm,\r\n  ...bow,\r\n  ...catalyst\r\n} as const\r\nexport default WeaponData\r\n"],"names":["crystallizeMulti1","subscript","input","crystallizeLevelMultipliers","key","crystallizeElemas","prod","frac","crystallizeHit","infoMut","sum","one","pivot","variant","transMulti1","transformativeReactionLevelMultipliers","transMulti2","trans","objectKeyMap","Object","keys","transformativeReactions","reaction","multi","resist","constant","swirl","ele","base","res","includes","data","hit","infusionReactions","overloaded","equal","infusionNode","electrocharged","superconduct","burning","bloom","burgeon","reactions","anemo","electroSwirl","electro","pyroSwirl","pyro","cryoSwirl","cryo","hydroSwirl","hydro","shattered","hyperbloom","geo","crystallize","fromEntries","absorbableEle","e","percent","dendro","charCurves","objectMap","_charCurves","value","values","commonBasic","inferredHitEle","stringPrio","lookup","undefined","sword","claymore","polearm","catalyst","getTalentType","move","customDmgNode","additional","mergeData","customShieldNode","shieldNode","customHealNode","healInc","healNode","dmgNode","lvlMultiplier","talentType","flat","shieldNodeTalent","baseMultiplier","talentIndex","shieldElement","element","healNodeTalent","dataObjForCharacterSheet","region","gen","display","curve","lvlCurve","basic","foundSpecial","charKey","weaponType","weaponTypeKey","premod","charEle","teamBuff","tally","layeredAssignment","physical_dmg_","stat","list","curves","push","ascensions","some","x","props","map","NaN","length","result","prefix","asConst","endsWith","info","slice","Error","special","allMainStatKeys","inferInfoMut","weaponCurves","entries","_weaponCurves","dataObjForWeaponSheet","displayWeapon","total","weapon","type","mainStat","subStat","merging","mainStatNode","ascension","addStats","main","substatNode","sub","data_gen","data_gen_json","trm","cond","condPassivePath","condPassive","energyRange","range","i","ratio","max","burst_dmg_","min","naught","sheet","icon","iconAwaken","document","path","header","headerTemplate","st","name","states","toString","fields","node","WeaponSheet","opponentsDefeated","atk_","c","count","text","sgt","unit","all_dmg_","on","dmg","charged_dmg_","eleMas_disp","eleMas","target","skill_dmg_","condStackPath","condStack","atkInc","critInc","critRate_","atkSelf","atkTeamDisp","atkTeam","unequal","atk","canShow","isTeamBuff","def_","normal_dmgInc","charged_dmgInc","crit_","takeDMG_s","all_dmg_stack","get","bonusInc","dmgAoe","dmgOnCryoOp","atkTeam_","atkSPD_","shield","condWithShieldPath","condWithShield","protected","shield_","atkStacks","condPath","condNode","heal","Akuoumaru","BlackcliffSlasher","BloodtaintedGreatsword","DebateClub","FavoniusGreatsword","FerrousShadow","ForestRegalia","KatsuragikiriNagamasa","LithicBlade","LuxuriousSeaLord","MakhairaAquamarine","OldMercsPal","PrototypeArchaic","Rainslasher","RedhornStonethresher","RoyalGreatsword","SacrificialGreatsword","SerpentSpine","SkyriderGreatsword","SkywardPride","SnowTombedStarsilver","SongOfBrokenPines","TheBell","TheUnforged","WasterGreatsword","Whiteblind","WhiteIronGreatsword","WolfsGravestone","addProps","skill_dmgInc","skill_critRate_","cd_Src","dmg_","normal_dmg_","plunging_dmg_","passiveRefine","stack_normal_dmg_","passive_dmg_","allElements","eleDmgDealtStack","stacks","stacksRefine","stacks_dmg_","stack","allEle_dmg_","parseInt","hp_","moveSPD_","autoSrc","AmenomaKageuchi","AquilaFavonia","BlackcliffLongsword","CinnabarSpindle","CoolSteel","KagotsurubeIsshin","DarkIronSword","DullBlade","FavoniusSword","FesteringDesire","FilletBlade","FreedomSworn","HaranGeppakuFutsu","HarbingerOfDawn","IronSting","LionsRoar","MistsplitterReforged","PrimordialJadeCutter","PrototypeRancour","RoyalLongsword","SacrificialSword","SapwoodBlade","SilverSword","SkyriderSword","SkywardBlade","SummitShaper","SwordOfDescension","TheAlleyFlash","TheBlackSword","TheFlute","TravelersHandySword","tr","dmg_Nodes","compareEq","atkDefInc","enerRech_","atk_disp","dmgInc","atk1","atk2","atk2_","condStacksPath","condStacks","stacksAttArr","stacksArr","baseAtk","stacksAtk","burst_critRate_","BeginnersProtector","BlackcliffPole","BlackTassel","CalamityQueller","CrescentPike","Deathmatch","DragonsBane","DragonspineSpear","EngulfingLightning","FavoniusLance","Halberd","IronPoint","KitainCrossSpear","LithicSpear","MissiveWindspear","Moonpiercer","PrimordialJadeWingedSpear","PrototypeStarglitter","RoyalSpear","SkywardSpine","StaffOfHoma","StaffOfTheScarletSands","TheCatch","VortexVanquisher","WavebreakersFin","WhiteTassel","autoDmgInc","normal_dmg_arrow_","charged_dmg_arrow_","base_hp_","cond_dmg_","atk_s","atkSPD_s","eleMas2","condStatePath","condState","state_dmg_dict","evengleam","afterglow","dawnblaze","state_dmg_","state","normal_dmg_s","charged_dmg_s","normal_dmg","charged_dmg","normal_passive","charged_passive","allEle_dmg_arr","condSkillPath","condSkill","condNormalPath","condNormal","eleSrc","normalInc","chargedInc","healing","critRate_s","weakspotDMG_","dmgPerc","critDMG_","dmg_arr","normal_dmg_inc","charged_dmg_inc","normal_dmg_dec","charged_dmg_dec","refinementVals","bow","AlleyHunter","AmosBow","AquaSimulacra","BlackcliffWarbow","CompoundBow","ElegyForTheEnd","FadingTwilight","FavoniusWarbow","Hamayumi","HuntersBow","HuntersPath","KingsSquire","Messenger","MitternachtsWaltz","MouunsMoon","PolarStar","Predator","PrototypeCrescent","RavenBow","RecurveBow","RoyalBow","Rust","SacrificialBow","SeasonedHuntersBow","SharpshootersOath","SkywardHarp","Slingshot","TheStringless","TheViridescentHunt","ThunderingPulse","EndOfTheLine","WindblumeOde","condChargedPath","condCharged","heal_","eleMasArr","eleDmg","anemo_dmg_disp","cryo_dmg_disp","geo_dmg_disp","hydro_dmg_disp","pyro_dmg_disp","dendro_dmg_disp","anemo_dmg_","cryo_dmg_","geo_dmg_","hydro_dmg_","pyro_dmg_","dendro_dmg_","electro_dmg_disp","electro_dmg_","color","totems","skill_dmg_s","d","ele_dmg_s","eleDmgInc","eleDmgStacks","allDmgInc","eleDmgs","objectKeyValueMap","condSkillBurstPath","condSkillBurst","refineVal","skillBurst","dmgBonus","eleBonus_","normal","refinementEleDmgVals","aria","interlude","recitative","atk_Disp","refineInc","ApprenticesNotes","BlackcliffAgate","DodocoTales","EmeraldOrb","EverlastingMoonglow","EyeOfPerception","FavoniusCodex","Frostbearer","FruitOfFulfillment","HakushinRing","KagurasVerity","LostPrayerToTheSacredWinds","MagicGuide","MappaMare","MemoryOfDust","OathswornEye","OtherworldlyStory","PocketGrimoire","PrototypeAmber","RoyalGrimoire","SacrificialFragments","SkywardAtlas","SolarPearl","TheWidsith","ThrillingTalesOfDragonSlayers","TwinNephrite","WineAndSong"],"sourceRoot":""}