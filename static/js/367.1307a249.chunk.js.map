{"version":3,"file":"static/js/367.1307a249.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactAutocomplete.tsx","Components/Artifact/ArtifactFilterDisplay.tsx","Components/Artifact/ArtifactLevelSlider.tsx"],"sourcesContent":["import { Autocomplete, AutocompleteProps, Chip, TextField, useTheme } from '@mui/material';\r\nimport { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap from '../../KeyMap';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { allMainStatKeys, allSubstatKeys, MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { allArtifactSets, allElementsWithPhy, ArtifactSetKey } from '../../Types/consts';\r\nimport MenuItemWithImage from '../MenuItemWithImage';\r\nimport SolidColoredTextField from '../SolidColoredTextfield';\r\nimport StatIcon from '../StatIcon';\r\n\r\ntype ArtifactMultiAutocompleteKey = ArtifactSetKey | MainStatKey | SubstatKey\r\ntype ArtifactMultiAutocompleteOption<T extends ArtifactMultiAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactMultiAutocompleteProps<T extends ArtifactMultiAutocompleteKey> = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<T>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKeys: T[]\r\n  setArtifactKeys: (keys: T[]) => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n}\r\nfunction ArtifactMultiAutocomplete<T extends ArtifactMultiAutocompleteKey>({ allArtifactKeys, selectedArtifactKeys, setArtifactKeys, getName, getImage, label, ...props }:\r\n  ArtifactMultiAutocompleteProps<T>) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (_, value: ArtifactMultiAutocompleteOption<T>[]) => {\r\n    setArtifactKeys(value.map(v => v.key))\r\n  };\r\n  const options = useMemo(() => allArtifactKeys.map(key => ({ key: key, label: getName(key) })), [allArtifactKeys, getName])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    multiple\r\n    options={options}\r\n    value={selectedArtifactKeys.map(key => ({ key: key, label: getName(key) }))}\r\n    onChange={handleChange}\r\n    getOptionLabel={(option) => option.label}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    renderInput={(params) => <TextField\r\n      {...params}\r\n      label={label}\r\n      variant=\"filled\"\r\n      InputLabelProps={{ style: { color: theme.palette.text.primary } }}\r\n      color={selectedArtifactKeys.length ? \"success\" : \"primary\"}\r\n      type=\"search\"\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKeys.includes(option.key)}\r\n        props={props}\r\n      />\r\n    )}\r\n    renderTags={(selected, getTagProps) => selected.map((value, index) => {\r\n      const element = allElementsWithPhy.find(ele => value.key === `${ele}_dmg_`)\r\n      const color = element ? element : undefined\r\n      return <Chip {...getTagProps({ index })} key={value.key} icon={getImage(value.key)} label={value.label} color={color} />\r\n    })}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<ArtifactSetKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  artSetKeys: ArtifactSetKey[]\r\n  setArtSetKeys: (keys: ArtifactSetKey[]) => void\r\n}\r\nexport function ArtifactSetMultiAutocomplete({ artSetKeys, setArtSetKeys, ...props }: ArtifactSetMultiAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactMultiAutocomplete<ArtifactSetKey>\r\n    allArtifactKeys={allArtifactSets}\r\n    selectedArtifactKeys={artSetKeys}\r\n    setArtifactKeys={setArtSetKeys}\r\n    getName={(key: ArtifactSetKey) => artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey) => artifactSheets[key].defIcon}\r\n    label={t(\"autocompleteLabels.set\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactMainStatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<MainStatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  mainStatKeys: MainStatKey[]\r\n  setMainStatKeys: (keys: MainStatKey[]) => void\r\n}\r\nexport function ArtifactMainStatMultiAutocomplete({ mainStatKeys, setMainStatKeys, ...props }: ArtifactMainStatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<MainStatKey>\r\n    allArtifactKeys={allMainStatKeys}\r\n    selectedArtifactKeys={mainStatKeys}\r\n    setArtifactKeys={setMainStatKeys}\r\n    getName={(key: MainStatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: MainStatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.mainStat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSubstatMultiAutocompleteProps = Omit<AutocompleteProps<ArtifactMultiAutocompleteOption<SubstatKey>, true, false, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  substatKeys: SubstatKey[]\r\n  setSubstatKeys: (keys: SubstatKey[]) => void\r\n}\r\nexport function ArtifactSubstatMultiAutocomplete({ substatKeys, setSubstatKeys, ...props }: ArtifactSubstatMultiAutocompleteProps) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <ArtifactMultiAutocomplete<SubstatKey>\r\n    allArtifactKeys={allSubstatKeys}\r\n    selectedArtifactKeys={substatKeys}\r\n    setArtifactKeys={setSubstatKeys}\r\n    getName={(key: SubstatKey) => KeyMap.getArtStr(key)}\r\n    getImage={(key: SubstatKey) => StatIcon[key]}\r\n    label={t(\"autocompleteLabels.substat\")}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSingleAutocompleteKey = (ArtifactSetKey | \"\") | (MainStatKey | \"\") | (SubstatKey | \"\")\r\ntype ArtifactSingleAutocompleteOption<T extends ArtifactSingleAutocompleteKey> = {\r\n  key: T\r\n  label: string\r\n}\r\ntype ArtifactSingleAutocompleteProps<T extends ArtifactSingleAutocompleteKey> = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<T>, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtifactKeys: readonly T[]\r\n  selectedArtifactKey: T\r\n  setArtifactKey: (key: T | \"\") => void\r\n  getName: (key: T) => string\r\n  getImage: (key: T) => JSX.Element\r\n  label: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nfunction ArtifactSingleAutocomplete<T extends ArtifactSingleAutocompleteKey>({ allArtifactKeys, selectedArtifactKey, setArtifactKey, getName, getImage, label, disable= () => false, showDefault = false, defaultText = \"\", defaultIcon = \"\", flattenCorners = false, ...props }:\r\n  ArtifactSingleAutocompleteProps<T>) {\r\n  const theme = useTheme();\r\n\r\n  const options = useMemo(() =>\r\n    (showDefault\r\n      ? [{ key: \"\" as T, label: defaultText }]\r\n      : []\r\n    ).concat(allArtifactKeys.map(key => (\r\n      { key: key, label: getName(key) }\r\n    ))), [allArtifactKeys, getName, defaultText, showDefault])\r\n  return <Autocomplete\r\n    autoHighlight\r\n    options={options}\r\n    value={{ key: selectedArtifactKey, label: getName(selectedArtifactKey) }}\r\n    onChange={(_, newValue) => setArtifactKey(newValue ? newValue.key : \"\")}\r\n    getOptionLabel={(option) => option.label ? option.label : defaultText}\r\n    isOptionEqualToValue={(option, value) => option.key === value.key}\r\n    getOptionDisabled={option => option.key ? disable(option.key) : false}\r\n    renderInput={(props) => <SolidColoredTextField\r\n      {...props}\r\n      label={label}\r\n      startAdornment={getImage(selectedArtifactKey)}\r\n      hasValue={selectedArtifactKey ? true : false}\r\n      flattenCorners={flattenCorners}\r\n    />}\r\n    renderOption={(props, option) => (\r\n      <MenuItemWithImage\r\n        key={option.key}\r\n        value={option.key}\r\n        image={getImage(option.key)}\r\n        text={option.label}\r\n        theme={theme}\r\n        isSelected={selectedArtifactKey === option.key}\r\n        props={props}\r\n      />\r\n    )}\r\n    {...props}\r\n  />\r\n}\r\n\r\ntype ArtifactSetSingleAutocompleteProps = Omit<AutocompleteProps<ArtifactSingleAutocompleteOption<ArtifactSetKey | \"\">, false, true, false>, \"title\" | \"children\" | \"onChange\" | \"options\" | \"renderInput\" | \"value\"> & {\r\n  allArtSetKeys?: readonly ArtifactSetKey[]\r\n  artSetKey: ArtifactSetKey | \"\"\r\n  setArtSetKey: (key: ArtifactSetKey | \"\") => void\r\n  label?: string\r\n  disable?: (v: any) => boolean\r\n  showDefault?: boolean\r\n  defaultText?: string\r\n  defaultIcon?: Displayable\r\n  flattenCorners?: boolean\r\n}\r\nexport function ArtifactSetSingleAutocomplete({ allArtSetKeys = allArtifactSets, artSetKey, setArtSetKey, label = \"\", flattenCorners, ...props }: ArtifactSetSingleAutocompleteProps) {\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const { t } = useTranslation(\"artifact\")\r\n  label = label ? label : t(\"autocompleteLabels.set\")\r\n  if (!artifactSheets) return null\r\n  return <ArtifactSingleAutocomplete<ArtifactSetKey | \"\">\r\n    allArtifactKeys={allArtSetKeys}\r\n    selectedArtifactKey={artSetKey}\r\n    setArtifactKey={setArtSetKey}\r\n    getName={(key: ArtifactSetKey | \"\") => key && artifactSheets[key].nameRaw}\r\n    getImage={(key: ArtifactSetKey | \"\") => key ? artifactSheets[key].defIcon : <></>}\r\n    label={label}\r\n    flattenCorners={flattenCorners}\r\n    {...props}\r\n  />\r\n}\r\n","import { faBan, faChartLine } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Grid, ToggleButton } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { FilterOption } from \"../../PageArtifact/ArtifactSort\";\r\nimport { allArtifactRarities, allSlotKeys } from \"../../Types/consts\";\r\nimport CharacterAutocomplete from \"../Character/CharacterAutocomplete\";\r\nimport SolidToggleButtonGroup from \"../SolidToggleButtonGroup\";\r\nimport { Stars } from \"../StarDisplay\";\r\nimport { ArtifactMainStatMultiAutocomplete, ArtifactSetMultiAutocomplete, ArtifactSubstatMultiAutocomplete } from \"./ArtifactAutocomplete\";\r\nimport ArtifactLevelSlider from \"./ArtifactLevelSlider\";\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\";\r\n\r\nexport default function ArtifactFilterDisplay({ filterOption, filterOptionDispatch, }: { filterOption: FilterOption, filterOptionDispatch: (any) => void }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", exclusion = [\"excluded\", \"included\"], locked = [\"locked\", \"unlocked\"] } = filterOption\r\n\r\n  return <Grid container spacing={1}>\r\n    {/* left */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact stars filter */}\r\n      <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\r\n        {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* Artifact Slot */}\r\n      <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ slotKeys: newVal })} value={slotKeys} size=\"small\">\r\n        {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n      {/* exclusion + locked */}\r\n      <Box display=\"flex\" gap={1}>\r\n        <SolidToggleButtonGroup fullWidth value={exclusion} onChange={(e, newVal) => filterOptionDispatch({ exclusion: newVal })} size=\"small\">\r\n          <ToggleButton value=\"excluded\" sx={{ display: \"flex\", gap: 1 }}>\r\n            <FontAwesomeIcon icon={faBan} /><Trans i18nKey={\"exclusion.excluded\"} t={t} />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"included\" sx={{ display: \"flex\", gap: 1 }}>\r\n            <FontAwesomeIcon icon={faChartLine} /><Trans i18nKey={\"exclusion.included\"} t={t} />\r\n          </ToggleButton>\r\n        </SolidToggleButtonGroup>\r\n        <SolidToggleButtonGroup fullWidth value={locked} onChange={(e, newVal) => filterOptionDispatch({ locked: newVal })} size=\"small\">\r\n          <ToggleButton value=\"locked\" sx={{ display: \"flex\", gap: 1 }}>\r\n            <Lock /><Trans i18nKey={\"ui:locked\"} t={t} />\r\n          </ToggleButton>\r\n          <ToggleButton value=\"unlocked\" sx={{ display: \"flex\", gap: 1 }}>\r\n            <LockOpen /><Trans i18nKey={\"ui:unlocked\"} t={t} />\r\n          </ToggleButton>\r\n        </SolidToggleButtonGroup>\r\n      </Box>\r\n      {/* Artiface level filter */}\r\n      <ArtifactLevelSlider showLevelText levelLow={levelLow} levelHigh={levelHigh}\r\n        setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n        setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n        setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n      <Grid container display=\"flex\" gap={1}>\r\n        <Grid item flexGrow={1}>\r\n          {/* location */}\r\n          <CharacterAutocomplete\r\n            value={location}\r\n            onChange={location => filterOptionDispatch({ location })}\r\n            placeholderText={t(\"artifact:filterLocation.any\")}\r\n            defaultText={t(\"artifact:filterLocation.any\")}\r\n            labelText={t(\"artifact:filterLocation.location\")}\r\n            showDefault\r\n            showInventory\r\n            showEquipped\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n    {/* right */}\r\n    <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n      {/* Artifact Set */}\r\n      <ArtifactSetMultiAutocomplete artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n      <ArtifactMainStatMultiAutocomplete mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n      <ArtifactSubstatMultiAutocomplete substatKeys={substats} setSubstatKeys={substats => filterOptionDispatch({ substats })} />\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false, showLevelText = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean,\r\n  disabled?: boolean,\r\n  showLevelText?: boolean,\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e: unknown, value: number | number[]) => {\r\n      if (typeof value == \"number\") throw new TypeError()\r\n      const [l, h] = value\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ px: 1, pl: showLevelText ? 2 : undefined, width: showLevelText ? 100 : 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={showLevelText ? \"Level: \" : undefined}\r\n      disabled={disabled}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n      disabled={disabled}\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      disabled={disabled}\r\n    />\r\n  </Card>\r\n}\r\n"],"names":["ArtifactMultiAutocomplete","allArtifactKeys","selectedArtifactKeys","setArtifactKeys","getName","getImage","label","props","theme","useTheme","options","useMemo","map","key","autoHighlight","multiple","value","onChange","_","v","getOptionLabel","option","isOptionEqualToValue","renderInput","params","variant","InputLabelProps","style","color","palette","text","primary","length","type","renderOption","image","isSelected","includes","renderTags","selected","getTagProps","index","element","allElementsWithPhy","ele","undefined","icon","ArtifactSetMultiAutocomplete","artSetKeys","setArtSetKeys","artifactSheets","usePromise","ArtifactSheet","t","useTranslation","allArtifactSets","nameRaw","defIcon","ArtifactMainStatMultiAutocomplete","mainStatKeys","setMainStatKeys","allMainStatKeys","KeyMap","StatIcon","ArtifactSubstatMultiAutocomplete","substatKeys","setSubstatKeys","allSubstatKeys","ArtifactSingleAutocomplete","selectedArtifactKey","setArtifactKey","disable","showDefault","defaultText","defaultIcon","flattenCorners","concat","newValue","getOptionDisabled","startAdornment","hasValue","ArtifactSetSingleAutocomplete","allArtSetKeys","artSetKey","setArtSetKey","ArtifactFilterDisplay","filterOption","filterOptionDispatch","rarity","slotKeys","levelLow","levelHigh","substats","location","exclusion","locked","container","spacing","item","xs","md","display","flexDirection","gap","fullWidth","e","newVal","size","allArtifactRarities","star","stars","allSlotKeys","slotKey","artifactSlotIcon","sx","faBan","i18nKey","faChartLine","showLevelText","setLow","setHigh","setBoth","flexGrow","placeholderText","labelText","showInventory","showEquipped","ArtifactLevelSlider","dark","disabled","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","TypeError","l","h","useEffect","width","alignItems","bgcolor","val","clamp","px","pl","inputProps","textAlign","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks"],"sourceRoot":""}