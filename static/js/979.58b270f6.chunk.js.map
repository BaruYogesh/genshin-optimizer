{"version":3,"file":"static/js/979.58b270f6.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/CustomNumberInput.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/ModalWrapper.tsx","../node_modules/@mui/icons-material/esm/ImportExport.js","../node_modules/@mui/icons-material/esm/Upload.js","../node_modules/@mui/icons-material/esm/Delete.js","Database/exim.ts","Database/exports/good.ts","Database/imports/good.ts","Database/imports/merge.ts","Database/imports/mona.ts","PageSettings/UploadCard.tsx","PageSettings/DatabaseCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","PageSettings/index.tsx","ReactHooks/useBoolState.tsx","stateInit.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@mui/system/esm/Box/Box.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Button, ButtonProps, InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\nconst Wrapper = styled(Button)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  \"div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport function CustomNumberInputButtonGroupWrapper({ children, disableRipple, disableFocusRipple, disableTouchRipple, ...props }: ButtonProps) {\r\n  return <Wrapper disableRipple disableFocusRipple disableTouchRipple {...props}>{children}</Wrapper>\r\n}\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    inputProps={{ step: float ? 0.1 : 1 }}\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}\r\n","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M9 3 5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"\n}), 'ImportExport');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\nimport type { DBStorage } from \"./DBStorage\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nexport function newCounter<T>(): ImportResultCounter<T> {\r\n  return { total: 0, invalid: [], new: [], updated: [], unchanged: [], removed: [], }\r\n}\r\n\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n  buildSettings?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  total: number, // total # in file\r\n  new: T[],\r\n  updated: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  removed: T[],\r\n  invalid: T[],\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  storage: DBStorage,\r\n  source: string,\r\n  artifacts?: ImportResultCounter<IArtifact>,\r\n  weapons?: ImportResultCounter<IWeapon>,\r\n  characters?: ImportResultCounter<ICharacter>,\r\n}\r\n","\r\nimport { DBStorage } from \"../DBStorage\";\r\nimport { BuildSetting } from \"../Data/BuildsettingData\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  const artifactIDs = new Map<string, number>()\r\n  const artifacts = storage.entries\r\n    .filter(([key]) => key.startsWith(\"artifact_\"))\r\n    .map(([id, value], i) => {\r\n      artifactIDs.set(id, i)\r\n      return JSON.parse(value)\r\n    })\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    artifacts,\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n    buildSettings: storage.entries\r\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\r\n      .map(([key, value]) => {\r\n        const result: BuildSetting = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\r\n        // Make sure the artifact ids match the new ids after import\r\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\r\n        return result\r\n      }),\r\n  }\r\n}\r\n","import { ArtCharDatabase } from \"../Database\";\r\nimport { SandboxStorage } from \"../DBStorage\";\r\nimport { GOSource, IGO, IGOOD, ImportResult, newCounter } from \"../exim\";\r\nimport { merge } from \"./merge\";\r\nimport { migrate } from \"./migrate\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data, oldDatabase)\r\n  }\r\n}\r\n\r\n// TODO: Remove this function or move it somewhere else\r\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const result = parseImport(data)\r\n  if (!result) return\r\n  // TODO\r\n  // Handle the error thrown when the `storage` uses unsupported DB version.\r\n  migrate(result.storage)\r\n  // TODO\r\n  // The `merging` part can be separated into another step in DB migration.\r\n  // We can let the user select finer grain migration options, such as\r\n  // weapon-only migration.\r\n  merge(result, oldDatabase)\r\n  return result\r\n}\r\n\r\n/**\r\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\r\n * If the DB version is not specified, the default version is used.\r\n */\r\nfunction parseImport(data: IGOOD): ImportResult | undefined {\r\n  const source = data.source, storage = new SandboxStorage()\r\n  const result: ImportResult = { type: \"GOOD\", storage, source }\r\n\r\n  if (data.artifacts) {\r\n    result.artifacts = newCounter()\r\n    const counter = result.artifacts\r\n    counter.total = data.artifacts.length\r\n\r\n    data.artifacts.forEach((a, i) => {\r\n      const parsed = parseArtifact(a)\r\n      if (!parsed) counter.invalid.push(a)\r\n      else storage.set(`artifact_${i}`, a)\r\n    })\r\n  }\r\n  if (data.weapons) {\r\n    result.weapons = newCounter()\r\n    const counter = result.weapons\r\n    counter.total = data.weapons!.length\r\n\r\n    data.weapons.forEach((w, i) => {\r\n      const parsed = parseWeapon(w)\r\n      if (!parsed) counter.invalid.push(w)\r\n      else storage.set(`weapon_${i}`, w)\r\n      return parsed ? [parsed] : []\r\n    })\r\n\r\n    result.weapons = counter\r\n  }\r\n  if (data.characters) {\r\n    result.characters = newCounter()\r\n    const counter = result.characters\r\n    counter.total = data.characters.length\r\n\r\n    data.characters.forEach(c => {\r\n      const parsed = parseCharacter(c)\r\n      if (!parsed) counter.invalid.push(c)\r\n\r\n      // We invalidate build results here because we need to do\r\n      // it regardless of whether the file has character/art data.\r\n      if (c.buildSettings) {\r\n        c.buildSettings.builds = []\r\n        c.buildSettings.buildDate = 0\r\n      }\r\n\r\n      storage.set(`char_${c.key}`, c);\r\n    })\r\n  }\r\n  if (source === GOSource) {\r\n    const { dbVersion, states, buildSettings } = data as unknown as IGO\r\n    if (dbVersion < 8) return // Something doesn't look right here\r\n    storage.setDBVersion(dbVersion)\r\n    states && states.forEach(s => {\r\n      const { key, ...state } = s as any\r\n      if (!key) return\r\n      storage.set(`state_${key}`, state)\r\n    });\r\n    buildSettings && buildSettings.forEach(b => {\r\n      const { key, ...state } = b as any\r\n      if (!key) return\r\n      storage.set(`buildSetting_${key}`, state)\r\n    })\r\n  } else {\r\n    // DO NOT CHANGE THE DB VERSION\r\n    // Update this ONLY when it has been verified that base GOODv1 is a valid GO\r\n    // of that particular version. Any missing/extra keys could crash the system.\r\n    storage.setDBVersion(8)\r\n  }\r\n  return result\r\n}\r\n","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { ImportResult } from \"../exim\";\r\n\r\n/**\r\n * Merge the parsed storage (`result`) of the current DB version with existing\r\n * database (`base`) to create a new (parsed) storage. If the data for art/char/weapon\r\n * exists in `result`, it will be merged with `base` on best-effort basis. The\r\n * information in `result` takes precedence when the data exists in both locations.\r\n *\r\n * `result` must be using the latest DB format, i.e., it must already be `migrate`d.\r\n *\r\n * TODO:\r\n * This can be easily extended to include options whether to merge\r\n * each category (art/char/weapon) or to force the `result` data or `base` data.\r\n */\r\nexport function merge(result: ImportResult, base: ArtCharDatabase) {\r\n  const { artifacts: artCounter, weapons: weaponCounter, characters: charCounter, storage } = result\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (artCounter) {\r\n    const arts = storage.entries.filter(([k]) => k.startsWith(\"artifact_\")).map(([key, v]) => [key, JSON.parse(v) as IArtifact] as const)\r\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\r\n    const hasLocations = arts.some(a => a[1].location)\r\n\r\n    for (const [key, art] of arts) {\r\n      let { duplicated, upgraded } = base.arts.findDups(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match: ICachedArtifact | undefined = duplicated[0] ?? upgraded[0]\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in art) && key !== \"location\")\r\n            art[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          art.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) artCounter.unchanged.push(art)\r\n      else if (upgraded.length) artCounter.updated.push(art)\r\n      else artCounter.new.push(art)\r\n      storage.set(key, art)\r\n    }\r\n    artCounter.removed = [...idsToRemove].map(id => base.arts.get(id)!)\r\n  } else\r\n    base.arts.values.forEach((x, i) => storage.set(`artifact_${i}`, x))\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (weaponCounter) {\r\n    const weapons = storage.entries.filter(([k]) => k.startsWith(\"weapon_\")).map(([key, v]) => [key, JSON.parse(v) as IWeapon] as const)\r\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\r\n    const hasLocations = weapons.some(weapon => weapon[1].location)\r\n\r\n    for (const [key, weapon] of weapons) {\r\n      let { duplicated, upgraded } = base.weapons.findDup(weapon)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\r\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in weapon) && key !== \"location\")\r\n            weapon[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          weapon.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) weaponCounter.unchanged.push(weapon)\r\n      else if (upgraded.length) weaponCounter.updated.push(weapon)\r\n      else weaponCounter.new.push(weapon)\r\n      storage.set(key, weapon)\r\n    }\r\n    weaponCounter.removed = [...idsToRemove].map(id => base.weapons.get(id)!)\r\n  } else\r\n    base.weapons.values.forEach((x, i) => storage.set(`weapon_${i}`, x))\r\n\r\n  if (charCounter) {\r\n    const newCharEntries = storage.entries.filter(([k]) => k.startsWith(\"char_\")).map(([key, value]) => [key.slice(5), JSON.parse(value) as ICharacter] as const)\r\n    const newCharKeys = new Set(newCharEntries.map(([k]) => k))\r\n    const oldCharKeys = new Set(base.chars.keys as string[])\r\n\r\n    charCounter.updated = []\r\n    charCounter.new = []\r\n\r\n    const hasTeamData = newCharEntries.some(([_, char]) => char.team.some(x => x))\r\n\r\n    for (const [key, char] of newCharEntries) {\r\n      const match = base.chars.get(key as any)\r\n      if (match) {\r\n        charCounter.updated.push(char)\r\n      } else {\r\n        charCounter.new.push(char)\r\n        continue\r\n      }\r\n\r\n      for (const key in match)\r\n        if (!(key in char))\r\n          char[key] = match[key]\r\n      if (!hasTeamData)\r\n        char.team = match.team\r\n\r\n      storage.set(`char_${key}`, char)\r\n    }\r\n\r\n    charCounter.removed = [...oldCharKeys].filter(([k]) => newCharKeys.has(k)).map(k => base.chars.get(k as any)!)\r\n    charCounter.unchanged = []\r\n  } else\r\n    base.chars.keys.forEach(k => storage.set(`char_${k}`, base.chars.get(k)))\r\n\r\n  // Merge misc.\r\n  const newKeys = new Set(storage.keys)\r\n  for (const key of base.storage.keys)\r\n    if (!newKeys.has(key) && !key.startsWith(\"artifact_\") && !key.startsWith(\"weapon_\") && !key.startsWith(\"char_\"))\r\n      storage.setString(key, base.storage.getString(key)!)\r\n}\r\n","import { MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\r\nimport { ArtCharDatabase } from '../Database';\r\nimport { importGOOD } from './good';\r\n\r\nconst DefaultVersion = \"1\";\r\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: any[] }> = {\r\n  \"1\": importMona1\r\n};\r\n\r\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ReturnType<typeof importGOOD> {\r\n  const version = dataObj.version ?? DefaultVersion\r\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\r\n\r\n  if (!converted)\r\n    return // TODO: Maybe add failure reason, or throws here\r\n\r\n  return importGOOD({\r\n    format: \"GOOD\",\r\n    source: \"mona-uranai\",\r\n    version: 1,\r\n    artifacts: converted.artifacts\r\n  }, oldDatabase)\r\n}\r\n\r\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\r\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\r\n\r\nfunction importMona1(dataObj: any): { artifacts: any[] } {\r\n  const artifacts: any[] = []\r\n\r\n  for (const property in dataObj) {\r\n    if (!(property in ArtifactSlotKeyMap))\r\n      continue\r\n\r\n    for (const genshinArtArtifact of dataObj[property]) {\r\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\r\n      const raw = {\r\n        setKey: ArtifactSetKeyMap[setName],\r\n        rarity: star,\r\n        level,\r\n        slotKey: ArtifactSlotKeyMap[position],\r\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\r\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\r\n          const key = ArtifactSubStatKeyMap[name]\r\n          return {\r\n            key,\r\n            value: key?.endsWith(\"_\") ?\r\n              Math.round(value * 1000) / 10 : // decimal to percentage\r\n              value,\r\n          }\r\n        }),\r\n      }\r\n      artifacts.push(raw)\r\n    }\r\n  }\r\n\r\n  return { artifacts }\r\n}\r\n\r\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\r\n\r\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\r\n  \"flower\": \"flower\",\r\n  \"feather\": \"plume\",\r\n  \"sand\": \"sands\",\r\n  \"cup\": \"goblet\",\r\n  \"head\": \"circlet\",\r\n}\r\n\r\n// Referencing https://github.com/daydreaming666/Amenoma/blob/main/ArtScanner/ArtsInfo.py SetNamesGenshinArt\r\n\r\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\r\n  \"adventurer\": \"Adventurer\",\r\n  \"archaicPetra\": \"ArchaicPetra\",\r\n  \"berserker\": \"Berserker\",\r\n  \"blizzardStrayer\": \"BlizzardStrayer\",\r\n  \"bloodstainedChivalry\": \"BloodstainedChivalry\",\r\n  \"braveHeart\": \"BraveHeart\",\r\n  \"crimsonWitch\": \"CrimsonWitchOfFlames\",\r\n  \"defenderWill\": \"DefendersWill\",\r\n  \"gambler\": \"Gambler\",\r\n  \"gladiatorFinale\": \"GladiatorsFinale\",\r\n  \"heartOfDepth\": \"HeartOfDepth\",\r\n  \"instructor\": \"Instructor\",\r\n  \"lavaWalker\": \"Lavawalker\",\r\n  \"luckyDog\": \"LuckyDog\",\r\n  \"maidenBeloved\": \"MaidenBeloved\",\r\n  \"martialArtist\": \"MartialArtist\",\r\n  \"noblesseOblige\": \"NoblesseOblige\",\r\n  \"prayersForDestiny\": \"PrayersForDestiny\",\r\n  \"prayersForIllumination\": \"PrayersForIllumination\",\r\n  \"prayersForWisdom\": \"PrayersForWisdom\",\r\n  \"prayersToSpringtime\": \"PrayersToSpringtime\",\r\n  \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\r\n  \"retracingBolide\": \"RetracingBolide\",\r\n  \"scholar\": \"Scholar\",\r\n  \"exile\": \"TheExile\",\r\n  \"thunderingFury\": \"ThunderingFury\",\r\n  \"thunderSmoother\": \"Thundersoother\",\r\n  \"tinyMiracle\": \"TinyMiracle\",\r\n  \"travelingDoctor\": \"TravelingDoctor\",\r\n  \"viridescentVenerer\": \"ViridescentVenerer\",\r\n  \"wandererTroupe\": \"WanderersTroupe\",\r\n  \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\r\n  \"paleFlame\": \"PaleFlame\",\r\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\r\n  \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\r\n  \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\r\n  \"oceanHuedClam\": \"OceanHuedClam\",\r\n  \"EchoesOfAnOffering\": \"EchoesOfAnOffering\",\r\n  \"VermillionHereafter\": \"VermillionHereafter\",\r\n}\r\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\r\n  \"cureEffect\": \"heal_\",\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  // \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  // // \"eCritical\": \"\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n  \"thunderBonus\": \"electro_dmg_\",\r\n  \"fireBonus\": \"pyro_dmg_\",\r\n  \"waterBonus\": \"hydro_dmg_\",\r\n  \"iceBonus\": \"cryo_dmg_\",\r\n  \"windBonus\": \"anemo_dmg_\",\r\n  \"rockBonus\": \"geo_dmg_\",\r\n  // \"grassBonus\": \"dendro_dmg_\",  // the day will come...\r\n  \"physicalBonus\": \"physical_dmg_\",\r\n  // \"bonus\": \"\",\r\n  // \"aBonus\": \"\",\r\n  // \"bBonus\": \"\",\r\n  // \"eBonus\": \"\",\r\n  // \"qBonus\": \"\",\r\n}\r\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Upload } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\r\nimport { useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\nimport { importGOOD } from '../Database/imports/good'\r\nimport { importMona } from '../Database/imports/mona'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard({ onReplace }: { onReplace: () => void }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const dataObj: UploadData | undefined = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\r\n      // Parse as mona format\r\n      const imported = importMona(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database])\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n    onReplace()\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {UploadInfo(dataObj) ?? t(errorMsg)}\r\n    </CardContent>\r\n    {UploadAction(dataObj, reset)}\r\n  </CardLight>\r\n}\r\n\r\nfunction UploadInfo(data: UploadData | undefined) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOODUploadInfo data={data} />\r\n  }\r\n}\r\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\r\n  }\r\n}\r\n\r\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: ImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result?: ImportResultCounter<any>, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  if (!result) return null\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {result.total}</Typography>\r\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: ImportResult, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const dataValid = data.characters?.total || data.artifacts?.total || data.weapons?.total\r\n  const replaceDB = () => {\r\n    database.clear()\r\n    database.storage.copyFrom(storage)\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n    reset()\r\n  }\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n\r\ntype UploadData = ImportResult\r\n","import { faClipboard } from '@fortawesome/free-solid-svg-icons'\r\nimport { Delete, Download, ImportExport, Upload } from '@mui/icons-material'\r\nimport { Button, CardContent, Chip, Divider, Grid, Typography } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport { useCallback, useContext, useEffect, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { StyledInputBase } from '../Components/CustomNumberInput'\r\nimport FontAwesomeSvgIcon from '../Components/FontAwesomeSvgIcon'\r\nimport ModalWrapper from '../Components/ModalWrapper'\r\nimport { ArtCharDatabase, DatabaseContext, DatabaseContextObj } from \"../Database/Database\"\r\nimport { ExtraStorage } from '../Database/DBStorage'\r\nimport { exportGOOD } from '../Database/exports/good'\r\nimport useBoolState from '../ReactHooks/useBoolState'\r\nimport useDBState, { dbMetaInit } from '../ReactHooks/useDBState'\r\nimport { range } from '../Util/Util'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function DatabaseCard() {\r\n  const databaseContextObj = useContext(DatabaseContext)\r\n  const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n  const { t } = useTranslation([\"settings\"]);\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        {t`DatabaseCard.title`}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <Grid container spacing={2} columns={{ xs: 1, md: 2, }}>\r\n        {range(1, 4).map(i => <Grid key={i} item xs={1}>\r\n          {i === dbIndex ? <DataCard index={i} /> :\r\n            <ExtraDatabaseWrapper index={i}>\r\n              <DataCard index={i} databaseContextObj={databaseContextObj} />\r\n            </ExtraDatabaseWrapper>}\r\n        </Grid>)}\r\n      </Grid>\r\n    </CardContent >\r\n  </CardLight >\r\n}\r\nfunction ExtraDatabaseWrapper({ index, children }) {\r\n  const [database, setDatabase] = useState(() => {\r\n    const dbName = `extraDatabase_${index}`\r\n    const storage = new ExtraStorage(dbName)\r\n    const dbObj = JSON.parse(localStorage.getItem(dbName) ?? `{ \"dbIndex\": \"${index}\" }`)\r\n    storage.setStorage(dbObj)\r\n\r\n    // A bit of preventive programming\r\n    storage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    const db = new ArtCharDatabase(storage)\r\n    storage.saveStorage()\r\n    return db\r\n  })\r\n\r\n  return <DatabaseContext.Provider value={{ database, setDatabase }}>\r\n    {children}\r\n  </DatabaseContext.Provider>\r\n}\r\n\r\nfunction DataCard({ index, databaseContextObj }: { index: number, databaseContextObj?: DatabaseContextObj }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const [{ name, lastEdit }, setDbMeta] = useDBState(\"dbMeta\", dbMetaInit(index))\r\n  const current = !databaseContextObj\r\n  const [uploadOpen, onOpen, onClose] = useBoolState()\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const hasData = Boolean(numChar || numArt || numWeapon)\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const onUpload = useCallback(() => {\r\n    onClose()\r\n    if (!current) {\r\n      const storage = database.storage as ExtraStorage\r\n      storage.saveStorage()\r\n    }\r\n  }, [onClose, current, database.storage])\r\n\r\n  const onDelete = useCallback(() => {\r\n    if (!window.confirm(`Are you sure you want to delete \"${name}\"?`)) return\r\n    if (current) {\r\n      database.clear()\r\n      setDatabase(new ArtCharDatabase(database.storage))\r\n    } else {\r\n      const storage = database.storage as ExtraStorage\r\n      const dbName = storage.databaseName\r\n      const extraStorage = new ExtraStorage(dbName)\r\n      extraStorage.setStorage({})\r\n      setDatabase(new ArtCharDatabase(extraStorage))\r\n      localStorage.removeItem(dbName)\r\n    }\r\n  }, [database, current, name, setDatabase])\r\n\r\n  const download = useCallback(() => {\r\n    const date = new Date()\r\n    const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n    const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n    const filename = `${name.trim().replaceAll(\" \", \"_\")}_${dateStr}.json`\r\n    const contentType = \"application/json;charset=utf-8\"\r\n    const a = document.createElement('a');\r\n    a.download = filename\r\n    a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n    a.target = \"_blank\"\r\n    document.body.appendChild(a)\r\n    a.click()\r\n    document.body.removeChild(a)\r\n  }, [database, name])\r\n\r\n  const onSwap = useCallback(() => {\r\n    if (!databaseContextObj) return\r\n\r\n    // save current database to appropriate slot\r\n    const dbIndex = parseInt(databaseContextObj.database.storage.getString(\"dbIndex\") || \"1\")\r\n    const tempStorage = new ExtraStorage(`extraDatabase_${dbIndex}`, databaseContextObj.database.storage)\r\n    tempStorage.removeForKeys(k => k.startsWith(\"extraDatabase_\"))\r\n    tempStorage.saveStorage()\r\n\r\n    // clear this slot database\r\n    const storage = database.storage as ExtraStorage\r\n    const dbName = storage.databaseName\r\n    localStorage.removeItem(dbName)\r\n\r\n    // swap over database\r\n    databaseContextObj.database.clear()\r\n    databaseContextObj.database.storage.copyFrom(database.storage)\r\n    databaseContextObj.database.storage.set(\"dbIndex\", index)\r\n    databaseContextObj.setDatabase(new ArtCharDatabase(databaseContextObj.database.storage))\r\n\r\n  }, [databaseContextObj, database, index])\r\n\r\n  const [tempName, setTempName] = useState(name)\r\n  useEffect(() => setTempName(name), [name])\r\n\r\n  const onBlur = useCallback(() => {\r\n    setDbMeta({ name: tempName })\r\n    if (!current) (database.storage as ExtraStorage).saveStorage()\r\n  }, [setDbMeta, tempName, database, current])\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n\r\n  return <CardDark sx={{ height: \"100%\" }}>\r\n    <CardContent sx={{ display: \"flex\", gap: 1, justifyContent: \"space-between\" }}>\r\n      < StyledInputBase value={tempName} sx={{ borderRadius: 1, px: 1, flexGrow: 1 }} onChange={(e) => setTempName(e.target.value)} onBlur={onBlur} onKeyDown={onKeyDOwn} />\r\n      {!current && <Button startIcon={<ImportExport />} onClick={onSwap} color=\"success\">{t`DatabaseCard.button.swap`}</Button>}\r\n      <Chip color={current ? \"success\" : \"secondary\"} label={current ? t`DatabaseCard.currentDB` : `${t`DatabaseCard.title`} ${index}`} />\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Box display=\"flex\" gap={2}>\r\n        <Box flexGrow={1}>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.chars\" /> <strong>{numChar}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.arts\" /> <strong>{numArt}</strong></Typography>\r\n          <Typography noWrap><Trans t={t} i18nKey=\"count.weapons\" /> <strong>{numWeapon}</strong></Typography>\r\n          {!!lastEdit && <Typography noWrap><strong>{(new Date(lastEdit).toLocaleString())}</strong></Typography>}\r\n        </Box>\r\n        <Box>\r\n          <Grid container spacing={1} columns={{ xs: 2 }} >\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeSvgIcon icon={faClipboard} />}>\r\n                <Trans t={t} i18nKey=\"DatabaseCard.button.copy\" />\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <ModalWrapper open={uploadOpen} onClose={onClose} >\r\n                <UploadCard onReplace={onUpload} />\r\n              </ModalWrapper>\r\n              <Button fullWidth component=\"span\" color=\"info\" startIcon={<Upload />} onClick={onOpen}>\r\n                {t`DatabaseCard.button.upload`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} onClick={download} startIcon={<Download />}>\r\n                {t`DatabaseCard.button.download`}\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n              <Button fullWidth disabled={!hasData} color=\"error\" onClick={onDelete} startIcon={<Delete />}>\r\n                {t`DatabaseCard.button.delete`}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../stateInit\";\r\nimport useDBState from \"../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DatabaseCard from './DatabaseCard'\r\nimport LanguageCard from './LanguageCard'\r\nimport TCToggleCard from './TCToggleCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DatabaseCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useBoolState(initial: boolean = false) {\r\n  const [bool, setBool] = useState(initial)\r\n  const onTrue = useCallback(() => setBool(true), [setBool],)\r\n  const onFalse = useCallback(() => setBool(false), [setBool],)\r\n  return [bool, onTrue, onFalse] as [boolean, () => void, () => void]\r\n}\r\n","import { allSubstatKeys } from \"./Types/artifact\"\r\n\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n\r\nexport function initCharMeta() {\r\n  return {\r\n    rvFilter: [...allSubstatKeys],\r\n    favorite: false\r\n  }\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","import PropTypes from 'prop-types';\nimport createBox from '../createBox';\nconst Box = createBox();\nprocess.env.NODE_ENV !== \"production\" ? Box.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Box;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","StyledInputBase","InputBase","primary","transition","dark","Wrapper","Button","padding","overflow","width","height","CustomNumberInputButtonGroupWrapper","children","props","disableRipple","disableFocusRipple","disableTouchRipple","CustomNumberInput","value","onChange","disabled","float","useState","number","setNumber","focused","setFocus","parseFunc","useMemo","parseFloat","parseInt","onBlur","useCallback","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","type","inputProps","step","onKeyDown","DropdownButton","title","id","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","handleClose","Suspense","fallback","endIcon","undefined","onClick","onClose","MenuListProps","ScrollModal","Modal","paddingTop","spacing","paddingBottom","ModalContainer","Container","minHeight","display","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","variant","createSvgIcon","_jsx","d","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","split","buildSettings","result","builds","x","has","get","importGOOD","data","oldDatabase","SandboxStorage","total","invalid","new","updated","unchanged","removed","counter","length","forEach","a","parseArtifact","push","w","parsed","parseWeapon","c","parseCharacter","buildDate","setDBVersion","s","state","b","parseImport","migrate","base","artCounter","weaponCounter","charCounter","arts","v","idsToRemove","Set","values","hasLocations","some","location","art","findDups","duplicated","upgraded","match","delete","weapon","findDup","newCharEntries","slice","newCharKeys","oldCharKeys","chars","keys","hasTeamData","team","char","k","newKeys","setString","getString","merge","importGOOD1","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","name","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","InvisInput","UploadCard","onReplace","database","useContext","DatabaseContext","t","useTranslation","setdata","filename","setfilename","errorMsg","setErrorMsg","Object","includes","imported","converted","importMona","onUpload","file","files","reader","FileReader","onload","readAsText","CardContent","sx","py","Trans","i18nKey","Grid","container","mb","item","htmlFor","accept","component","startIcon","Upload","flexGrow","px","Typography","icon","faFileCode","faArrowLeft","gutterBottom","fontFamily","resize","UploadInfo","UploadAction","GOODUploadInfo","reset","GOUploadAction","Divider","MergeResult","color","stringify","setDatabase","dataValid","clear","copyFrom","ArtCharDatabase","faFileUpload","DatabaseCard","databaseContextObj","dbIndex","gap","columns","xs","md","range","DataCard","index","ExtraDatabaseWrapper","dbName","ExtraStorage","dbObj","localStorage","getItem","setStorage","removeForKeys","db","saveStorage","Database","useDBState","dbMetaInit","lastEdit","setDbMeta","current","useBoolState","uploadOpen","onOpen","numChar","numArt","numWeapon","hasData","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","console","error","onDelete","window","confirm","databaseName","extraStorage","removeItem","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","trim","document","createElement","href","encodeURIComponent","body","appendChild","click","removeChild","onSwap","tempStorage","tempName","setTempName","borderRadius","ImportExport","Chip","label","Box","noWrap","toLocaleString","fullWidth","FontAwesomeSvgIcon","faClipboard","Download","Delete","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","language","languageCodeList","MenuItem","selected","TCToggleCard","initGlobalSettings","tcMode","setGlobalSettings","CheckBox","CheckBoxOutlineBlank","PageSettings","ReactGA","hitType","page","my","initial","bool","setBool","onTrue","onFalse","initCharMeta","rvFilter","allSubstatKeys","favorite","createBox","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}