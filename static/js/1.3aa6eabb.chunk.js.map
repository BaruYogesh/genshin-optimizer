{"version":3,"sources":["Character/Character.ts","Components/StarDisplay.tsx","Assets/Weapon-class-bow-icon.png","Assets/Assets.ts","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Character/CharacterSelection.tsx","StatDependency.ts"],"names":["Character","this","Error","getElementalName","elementalKey","ElementalData","name","getLevelString","character","level","ascensionMaxLevel","ascension","getTalentFieldValue","field","key","stats","defVal","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","weaponSheet","includes","characterStatBase","getStatValueWithOverride","characterSheet","calculateBuild","database","artifactSheets","mainStatAssumptionLevel","artifacts","Object","fromEntries","entries","equippedArtifacts","map","artid","_getArt","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","values","forEach","art","mainStatKey","mainStatValue","rarity","Math","max","min","substats","substat","value","mergeStats","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","id","dependencies","GetDependencies","modifiers","PreprocessFormulas","preprocessedStats","formula","characterKey","elementKey","hitMode","infusionAura","reactionMode","talent","constellation","equippedWeapon","weapon","_getWeapon","defaultInitialWeapon","weaponTypeKey","statKeys","keys","characterHP","getBase","characterDEF","characterATK","characterLevel","characterEle","weaponType","tlvl","refineIndex","refinement","allElements","eleKey","overrides","hasOwnProperty","specialStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","getTalentStatsAll","s","weaponATK","getMainStatValue","weaponSubKey","getSubStatKey","getSubStatValue","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","addFormula","fields","parseSection","section","sheets","talentKey","sections","formKey","document","num","artifactSheet","setEffects","setNum","StarIcon","icon","faStar","Stars","stars","colored","className","Array","_","i","Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CharacterSelectionDropdownList","onSelect","useContext","DatabaseContext","characterSheets","usePromise","CharacterSheet","getAll","_getCharKeys","filter","cKey","sort","DropDownItem","get","Item","onClick","nameWIthIcon","CharSelectionButton","useState","show","setshow","HeaderIconDisplay","src","thumbImg","roundedCircle","disabled","CharacterSelectionModal","onHide","toggle","filterReducer","oldFilter","newFilter","sortBy","setsortBy","useReducer","elementalFilter","elementalFilterDispatch","weaponFilter","weaponFilterDispatch","sortingFunc","ck","_getChar","star","characterKeyList","Set","allCharacterKeys","a","b","diff","size","contentClassName","bg","text","Header","xs","variant","uncoloredEleIcons","allWeaponTypeKeys","type","onChange","faTimes","Body","CharacterBtn","undefined","WeaponSheet","useMemo","lg","md","thumbnail","auto","skill","burst","StatIcon","GetFormulaDependency","dependency","Proxy","target","prop","receiver","add","toString","formulaKeyDependency","freeze","Formulas","baseStat","StatData","found","numStages","InsertDependencies","flatMap","dep","has","k","path","Formula","getCurrent","getStage"],"mappings":"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","file":"static/js/1.3aa6eabb.chunk.js","sourcesContent":["import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { ascensionMaxLevel, characterStatBase } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ArtCharDatabase } from \"../Database/Database\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { ICachedArtifact } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allElements, ArtifactSetKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { mergeStats } from \"../Util/StatUtil\";\r\nimport { defaultInitialWeapon } from \"../Weapon/WeaponUtil\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey: ElementKey | \"physical\"): string =>\r\n    ElementalData[elementalKey].name\r\n  static getLevelString = (character: ICachedCharacter): string =>\r\n    `${character.level}/${ascensionMaxLevel[character.ascension]}`\r\n\r\n  static getTalentFieldValue = (field: IFieldDisplay, key: keyof IFieldDisplay, stats = {}, defVal = \"\"): any => {\r\n    if (!field[key]) return defVal\r\n    return evalIfFunc(field[key] as any, stats!)\r\n  }\r\n\r\n  static hasOverride = (character: ICachedCharacter, statKey): boolean => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\")\r\n    if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\")\r\n    if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\")\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICachedCharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string): number => {\r\n    if (statKey === \"enemyLevel\") return character.level\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    return 0\r\n  }\r\n  static getStatValueWithOverride = (character: ICachedCharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string) => {\r\n    if (Character.hasOverride(character, statKey)) return character.baseStatOverrides?.[statKey] ?? 0\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    const artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, database._getArt(artid)]))\r\n    const initialStats = Character.createInitialStats(character, database, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats: ICalculatedStats, artifacts: Dict<SlotKey, ICachedArtifact>, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>): ICalculatedStats => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    const artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(stats.mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    mergeStats(stats, artifactSetEffectsStats)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey, setNumKey]) => {\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      mergeStats(stats, condStats)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats, stats?.modifiers)\r\n    const { initialStats: preprocessedStats, formula } = PreprocessFormulas(dependencies, stats)\r\n    formula(preprocessedStats)\r\n    return { ...stats, ...preprocessedStats }\r\n  }\r\n\r\n  static createInitialStats = (character: ICachedCharacter, database: ArtCharDatabase, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { key: characterKey, elementKey, level, ascension, hitMode, infusionAura, reactionMode, talent, constellation, equippedArtifacts, conditionalValues = {}, equippedWeapon } = character\r\n    const weapon = database._getWeapon(equippedWeapon) ?? defaultInitialWeapon(characterSheet.weaponTypeKey) // need to ensure all characters have a weapon\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"enemyLevel\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterHP = characterSheet.getBase(\"hp\", level, ascension)\r\n    initialStats.characterDEF = characterSheet.getBase(\"def\", level, ascension)\r\n    initialStats.characterATK = characterSheet.getBase(\"atk\", level, ascension)\r\n    initialStats.characterLevel = level\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = Object.fromEntries(Object.entries(talent ?? {}).map(([key, value]) => [key, value - 1])) as any;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    initialStats.weapon = { key: weapon.key, refineIndex: weapon.refinement - 1 }\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    const specialStatKey = characterSheet.getSpecializedStat(ascension)\r\n    if (specialStatKey) {\r\n      const specializedStatVal = characterSheet.getSpecializedStatVal(ascension)\r\n      mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n    }\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponATK = weaponSheet.getMainStatValue(weapon.level, weapon.ascension)\r\n    initialStats.weaponATK = weaponATK\r\n    const weaponSubKey = weaponSheet.getSubStatKey()\r\n    if (weaponSubKey) mergeStats(initialStats, { [weaponSubKey]: weaponSheet.getSubStatValue(weapon.level, weapon.ascension) })\r\n    mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (keys[0] === \"character\" && keys[3] === \"talents\" && keys[4] !== elementKey) return //fix for Traveler, make sure conditionals match element.\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  //TODO: this needs weaponSheet/artifactsheets as a parameter.\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    const addFormula = (fields, key) => fields.forEach(field => {\r\n      if (!field.formula || !field?.canShow?.(stats)) return\r\n      if (!charFormulas[key]) charFormulas[key] = []\r\n      charFormulas[key].push((field.formula as any).keys)\r\n    })\r\n    const parseSection = (section, key) => {\r\n      //conditional\r\n      if (section.conditional && Conditional.canShow(section.conditional, stats)) {\r\n        const { fields }: { fields?: Array<IFieldDisplay> } = Conditional.resolve(section.conditional, stats, null)\r\n        fields && addFormula(fields, key)\r\n      }\r\n      //fields\r\n      if (section.fields) addFormula(section.fields, key)\r\n    }\r\n    talentSheet && Object.entries(talentSheet.sheets).forEach(([talentKey, { sections }]) => {\r\n      if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n      sections.forEach(section => parseSection(section, `talentKey_${talentKey}`))\r\n    })\r\n\r\n    const formKey = `weapon_${stats.weapon.key}`\r\n    weaponSheet.document && weaponSheet.document.map(section => parseSection(section, formKey))\r\n\r\n    stats.setToSlots && Object.entries(stats.setToSlots).map(([setKey, slots]) => [setKey, slots.length]).forEach(([setKey, num]) => {\r\n      const artifactSheet = artifactSheets[setKey] as ArtifactSheet\r\n      if (!artifactSheet) return\r\n      Object.entries(artifactSheet.setEffects).forEach(([setNum, { document }]) => {\r\n        if (num < parseInt(setNum)) return\r\n        document && document.map(section => parseSection(section, `artifact_${setKey}_${setNum}`))\r\n      })\r\n    })\r\n\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n}","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","import bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo, useReducer, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Image, Modal, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Assets from \"../Assets/Assets\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allCharacterKeys, allElements, allWeaponTypeKeys, CharacterKey, WeaponTypeKey } from \"../Types/consts\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\nimport { Stars } from \"../Components/StarDisplay\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../Components/StatIcon\";\r\nimport Character from './Character'\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\n\r\nexport function CharacterSelectionDropdownList({ onSelect, weaponTypeKey }: { onSelect: (ckey: CharacterKey) => void, weaponTypeKey?: WeaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  return <>{database._getCharKeys().filter(cKey =>\r\n    weaponTypeKey ? (characterSheets?.[cKey]?.weaponTypeKey === weaponTypeKey) : true\r\n  ).sort().map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>{characterSheet.nameWIthIcon}</Dropdown.Item>\r\n}\r\n\r\ntype characterFilter = (character: ICachedCharacter | undefined, sheet: CharacterSheet) => boolean\r\n\r\nexport function CharSelectionButton({ characterSheet, onSelect, filter }: { characterSheet?: CharacterSheet, onSelect?: (cKey: CharacterKey) => void, filter?: characterFilter }) {\r\n  const [show, setshow] = useState(false)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>\r\n    <Button disabled={!onSelect} onClick={() => setshow(true)} >{HeaderIconDisplay}</Button>\r\n    <CharacterSelectionModal show={show} onHide={() => setshow(false)} onSelect={onSelect} filter={filter} />\r\n  </>\r\n}\r\n\r\nconst toggle = {\r\n  rarity: \"Rarity\",\r\n  level: \"Level\",\r\n  name: \"Name\"\r\n} as const\r\n\r\nfunction filterReducer(oldFilter, newFilter) {\r\n  if (newFilter === oldFilter)\r\n    return \"\"\r\n  return newFilter\r\n}\r\n\r\n\r\ntype CharacterSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect?: (ckey: CharacterKey) => void,\r\n  filter?: characterFilter\r\n}\r\n\r\nexport function CharacterSelectionModal({ show, onHide, onSelect, filter = () => true }: CharacterSelectionModalProps) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  const [sortBy, setsortBy] = useState(() => Object.keys(toggle)[0])\r\n  const [elementalFilter, elementalFilterDispatch] = useReducer(filterReducer, \"\")\r\n  const [weaponFilter, weaponFilterDispatch] = useReducer(filterReducer, \"\")\r\n\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n\r\n  const sortingFunc = {\r\n    level: (ck) => database._getChar(ck)?.level ?? 0,\r\n    rarity: (ck) => characterSheets?.[ck]?.star,\r\n    name: (ck) => characterSheets?.[ck]?.name\r\n  }\r\n\r\n  const characterKeyList = !characterSheets ? [] : [...new Set(allCharacterKeys)].filter(cKey => filter(database._getChar(cKey), characterSheets[cKey])).filter(cKey => {\r\n    if (elementalFilter && elementalFilter !== characterSheets?.[cKey]?.elementKey) return false\r\n    if (weaponFilter && weaponFilter !== characterSheets?.[cKey]?.weaponTypeKey) return false\r\n    return true\r\n  }).sort((a, b) => {\r\n    if (sortBy === \"name\") {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      // names must be equal\r\n      return 0;\r\n    }\r\n    if (sortBy === \"level\") {\r\n      const diff = sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n    } else {\r\n      const diff = sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n    }\r\n  })\r\n\r\n  if (!characterSheets) return null\r\n  return <Modal show={show} size=\"xl\" contentClassName=\"bg-transparent\" onHide={onHide}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              {allElements.map(eleKey => <Button key={eleKey} variant={(!elementalFilter || elementalFilter === eleKey) ? eleKey : \"secondary\"} className=\"py-1 px-2 text-white\" onClick={() => elementalFilterDispatch(eleKey)} >\r\n                <h3 className=\"mb-0\">{uncoloredEleIcons[eleKey]}</h3>\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col>\r\n            <ButtonGroup >\r\n              {allWeaponTypeKeys.map(weaponType =>\r\n                <Button key={weaponType} variant={(!weaponFilter || weaponFilter === weaponType) ? \"success\" : \"secondary\"} className=\"py-1 px-2\" onClick={() => weaponFilterDispatch(weaponType)}>\r\n                  <h3 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponType]} className=\"inline-icon\" /></h3></Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <span>Sort by: </span>\r\n            <ToggleButtonGroup type=\"radio\" name=\"level\" value={sortBy} onChange={setsortBy}>\r\n              {Object.entries(toggle).map(([key, text]) =>\r\n                <ToggleButton key={key} value={key} variant={sortBy === key ? \"success\" : \"primary\"}>\r\n                  <h6 className=\"mb-0\">{text}</h6>\r\n                </ToggleButton>)}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button onClick={onHide} variant=\"danger\"><FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body><Row>\r\n        {characterKeyList.map(characterKey => <CharacterBtn key={characterKey} characterKey={characterKey} onClick={() => { onHide(); onSelect?.(characterKey) }} />)}\r\n      </Row></Card.Body>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nfunction CharacterBtn({ onClick, characterKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weapon = character?.equippedWeapon ? database._getWeapon(character.equippedWeapon) : undefined\r\n  const weaponSheet = usePromise(weapon ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets, database])\r\n  if (!characterSheet) return null\r\n  return <Col key={characterKey} lg={3} md={4} className=\"mb-2\">\r\n    <Button className=\"w-100\" variant=\"darkcontent\" onClick={onClick}>\r\n      <h5>{characterSheet.name}</h5>\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          {stats && character ? <>\r\n            <h5 className=\"mb-0\">Lv. {Character.getLevelString(character)} {`C${character.constellation}`}</h5>\r\n            <h6 className=\"mb-0\">\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.auto + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.skill + 1}</strong></Badge>{` `}\r\n              <Badge variant=\"secondary\"><strong className=\"mx-1\">{stats.tlvl.burst + 1}</strong></Badge>\r\n            </h6>\r\n          </> : <>\r\n            <h4><Badge variant=\"primary\">NEW</Badge></h4>\r\n          </>}\r\n          <h6 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h6>\r\n          <h3 className=\"mb-0\">{characterSheet.elementKey && StatIcon[characterSheet.elementKey]} <Image src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n        </Col>\r\n      </Row>\r\n    </Button>\r\n  </Col>\r\n}","import Formula from \"./Formula\"\r\nimport { Formulas, getStage, numStages, StatData } from \"./StatData\"\r\nimport { IBaseStat } from \"./Types/character\"\r\nimport { Modifier } from \"./Types/stats\"\r\n\r\n// Generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula: (s) => number) {\r\n  const dependency: Set<string> = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop.toString()) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.entries(Formulas).map(([key, value]) => [key, GetFormulaDependency(value)])\r\n)) as Dict<string, string[]>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(baseStat: IBaseStat, modifiers: Modifier = {}, keys = Object.keys(StatData)): Dependencies {\r\n  const found = new Set<string>()\r\n  const dependencies = [...Array(numStages)].map(_ => new Set<string>())\r\n  keys.forEach(key => InsertDependencies(baseStat, key, modifiers, dependencies, found))\r\n  return dependencies.flatMap(dep => [...dep])\r\n}\r\nfunction InsertDependencies(baseStat: IBaseStat, key: string, modifiers: Modifier, dependencies: Set<string>[], found: Set<string>) {\r\n  if (found.has(key)) return\r\n  found.add(key)\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(baseStat, k, modifiers, dependencies, found));\r\n  (modifiers[key] ?? []).forEach(path => Formula.getCurrent(path, baseStat)[1].forEach(k =>\r\n    InsertDependencies(baseStat, k, modifiers, dependencies, found)))\r\n  dependencies[getStage(key)].add(key)\r\n}\r\n\r\ntype Dependencies = string[]\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n"],"sourceRoot":""}