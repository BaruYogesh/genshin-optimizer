{"version":3,"file":"static/js/916.5f4c01ad.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/DropdownMenu/DropdownButton.tsx","GlobalSettings.tsx","Database/exim.ts","Database/exports/good.ts","PageSettings/DownloadCard.tsx","PageSettings/LanguageCard.tsx","PageSettings/TCToggleCard.tsx","../node_modules/@mui/icons-material/esm/Upload.js","Database/imports/good.ts","Database/imports/merge.ts","Database/imports/mona.ts","PageSettings/UploadCard.tsx","PageSettings/index.tsx","ReactHooks/useDBState.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\nimport type { DBStorage } from \"./DBStorage\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nexport function newCounter<T>(): ImportResultCounter<T> {\r\n  return { total: 0, invalid: [], new: [], updated: [], unchanged: [], removed: [], }\r\n}\r\n\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n  buildSettings?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  total: number, // total # in file\r\n  new: T[],\r\n  updated: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  removed: T[],\r\n  invalid: T[],\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  storage: DBStorage,\r\n  source: string,\r\n  artifacts?: ImportResultCounter<IArtifact>,\r\n  weapons?: ImportResultCounter<IWeapon>,\r\n  characters?: ImportResultCounter<ICharacter>,\r\n}\r\n","\r\nimport { DBStorage } from \"../DBStorage\";\r\nimport { BuildSetting } from \"../Data/BuildsettingData\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  const artifactIDs = new Map<string, number>()\r\n  const artifacts = storage.entries\r\n    .filter(([key]) => key.startsWith(\"artifact_\"))\r\n    .map(([id, value], i) => {\r\n      artifactIDs.set(id, i)\r\n      return JSON.parse(value)\r\n    })\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    artifacts,\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n    buildSettings: storage.entries\r\n      .filter(([key]) => key.startsWith(\"buildSetting_\"))\r\n      .map(([key, value]) => {\r\n        const result: BuildSetting = { ...JSON.parse(value), key: key.split(\"buildSetting_\")[1] }\r\n        // Make sure the artifact ids match the new ids after import\r\n        result.builds = result.builds.map(x => x.map(x => artifactIDs.has(x) ? `artifact_${artifactIDs.get(x)}` : \"\").filter(x => x))\r\n        return result\r\n      }),\r\n  }\r\n}\r\n","import { faClipboard, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Download } from '@mui/icons-material'\r\nimport { Button, CardContent, Divider, Grid, Typography } from '@mui/material'\r\nimport { useCallback, useContext } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { exportGOOD } from '../Database/exports/good'\r\n\r\nexport default function DownloadCard() {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database.chars.keys.length\r\n  const numArt = database.arts.values.length\r\n  const numWeapon = database.weapons.values.length\r\n  const downloadValid = Boolean(numChar || numArt)\r\n  const deleteDB = useCallback(() => {\r\n    database.storage.clear()\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n  }, [database, setDatabase])\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const download = useCallback(\r\n    () => {\r\n      const date = new Date()\r\n      const dateStr = date.toISOString().split(\".\")[0].replace(\"T\", \"_\").replaceAll(\":\", \"-\")\r\n      const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n      const filename = `go-data_${dateStr}.json`\r\n      const contentType = \"application/json;charset=utf-8\"\r\n      const a = document.createElement('a');\r\n      a.download = filename\r\n      a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n      a.target = \"_blank\"\r\n      document.body.appendChild(a)\r\n      a.click()\r\n      document.body.removeChild(a)\r\n    },\r\n    [database],\r\n  )\r\n\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"downloadCard.databaseDownload\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container mb={2} spacing={2}>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.chars\" /> {numChar}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.arts\" /> {numArt}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.weapons\" /> {numWeapon}</Typography></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item><Button disabled={!downloadValid} onClick={download} startIcon={<Download />}><Trans t={t} i18nKey=\"downloadCard.button.download\" /></Button></Grid>\r\n        <Grid item flexGrow={1} ><Button disabled={!downloadValid} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeIcon icon={faClipboard} />}><Trans t={t} i18nKey=\"downloadCard.button.copy\" /></Button></Grid>\r\n        <Grid item><Button disabled={!downloadValid} color=\"error\" onClick={deleteDB} startIcon={<FontAwesomeIcon icon={faTrashAlt} />}><Trans t={t} i18nKey=\"downloadCard.button.delete\" /></Button></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../Components/SqBadge'\r\nimport { languageCodeList } from \"../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../GlobalSettings\";\r\nimport useDBState from \"../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import { ArtCharDatabase } from \"../Database\";\r\nimport { SandboxStorage } from \"../DBStorage\";\r\nimport { GOSource, IGO, IGOOD, ImportResult, newCounter } from \"../exim\";\r\nimport { merge } from \"./merge\";\r\nimport { migrate } from \"./migrate\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data, oldDatabase)\r\n  }\r\n}\r\n\r\n// TODO: Remove this function or move it somewhere else\r\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const result = parseImport(data)\r\n  if (!result) return\r\n  // TODO\r\n  // Handle the error thrown when the `storage` uses unsupported DB version.\r\n  migrate(result.storage)\r\n  // TODO\r\n  // The `merging` part can be separated into another step in DB migration.\r\n  // We can let the user select finer grain migration options, such as\r\n  // weapon-only migration.\r\n  merge(result, oldDatabase)\r\n  return result\r\n}\r\n\r\n/**\r\n * Parse GOODv1 data format into a parsed data of the version specified in `data`.\r\n * If the DB version is not specified, the default version is used.\r\n */\r\nfunction parseImport(data: IGOOD): ImportResult | undefined {\r\n  const source = data.source, storage = new SandboxStorage()\r\n  const result: ImportResult = { type: \"GOOD\", storage, source }\r\n\r\n  if (data.artifacts) {\r\n    result.artifacts = newCounter()\r\n    const counter = result.artifacts\r\n    counter.total = data.artifacts.length\r\n\r\n    data.artifacts.forEach((a, i) => {\r\n      const parsed = parseArtifact(a)\r\n      if (!parsed) counter.invalid.push(a)\r\n      else storage.set(`artifact_${i}`, a)\r\n    })\r\n  }\r\n  if (data.weapons) {\r\n    result.weapons = newCounter()\r\n    const counter = result.weapons\r\n    counter.total = data.weapons!.length\r\n\r\n    data.weapons.forEach((w, i) => {\r\n      const parsed = parseWeapon(w)\r\n      if (!parsed) counter.invalid.push(w)\r\n      else storage.set(`weapon_${i}`, w)\r\n      return parsed ? [parsed] : []\r\n    })\r\n\r\n    result.weapons = counter\r\n  }\r\n  if (data.characters) {\r\n    result.characters = newCounter()\r\n    const counter = result.characters\r\n    counter.total = data.characters.length\r\n\r\n    data.characters.forEach(c => {\r\n      const parsed = parseCharacter(c)\r\n      if (!parsed) counter.invalid.push(c)\r\n\r\n      // We invalidate build results here because we need to do\r\n      // it regardless of whether the file has character/art data.\r\n      if (c.buildSettings) {\r\n        c.buildSettings.builds = []\r\n        c.buildSettings.buildDate = 0\r\n      }\r\n\r\n      storage.set(`char_${c.key}`, c);\r\n    })\r\n  }\r\n  if (source === GOSource) {\r\n    const { dbVersion, states, buildSettings } = data as unknown as IGO\r\n    if (dbVersion < 8) return // Something doesn't look right here\r\n    storage.setDBVersion(dbVersion)\r\n    states && states.forEach(s => {\r\n      const { key, ...state } = s as any\r\n      if (!key) return\r\n      storage.set(`state_${key}`, state)\r\n    });\r\n    buildSettings && buildSettings.forEach(b => {\r\n      const { key, ...state } = b as any\r\n      if (!key) return\r\n      storage.set(`buildSetting_${key}`, state)\r\n    })\r\n  } else {\r\n    // DO NOT CHANGE THE DB VERSION\r\n    // Update this ONLY when it has been verified that base GOODv1 is a valid GO\r\n    // of that particular version. Any missing/extra keys could crash the system.\r\n    storage.setDBVersion(8)\r\n  }\r\n  return result\r\n}\r\n","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { ImportResult } from \"../exim\";\r\n\r\n/**\r\n * Merge the parsed storage (`result`) of the current DB version with existing\r\n * database (`base`) to create a new (parsed) storage. If the data for art/char/weapon\r\n * exists in `result`, it will be merged with `base` on best-effort basis. The\r\n * information in `result` takes precedence when the data exists in both locations.\r\n *\r\n * `result` must be using the latest DB format, i.e., it must already be `migrate`d.\r\n *\r\n * TODO:\r\n * This can be easily extended to include options whether to merge\r\n * each category (art/char/weapon) or to force the `result` data or `base` data.\r\n */\r\nexport function merge(result: ImportResult, base: ArtCharDatabase) {\r\n  const { artifacts: artCounter, weapons: weaponCounter, characters: charCounter, storage } = result\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (artCounter) {\r\n    const arts = storage.entries.filter(([k]) => k.startsWith(\"artifact_\")).map(([key, v]) => [key, JSON.parse(v) as IArtifact] as const)\r\n    const idsToRemove = new Set(base.arts.values.map(a => a.id))\r\n    const hasLocations = arts.some(a => a[1].location)\r\n\r\n    for (const [key, art] of arts) {\r\n      let { duplicated, upgraded } = base.arts.findDups(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match: ICachedArtifact | undefined = duplicated[0] ?? upgraded[0]\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in art) && key !== \"location\")\r\n            art[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          art.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) artCounter.unchanged.push(art)\r\n      else if (upgraded.length) artCounter.updated.push(art)\r\n      else artCounter.new.push(art)\r\n      storage.set(key, art)\r\n    }\r\n    artCounter.removed = [...idsToRemove].map(id => base.arts.get(id)!)\r\n  } else\r\n    base.arts.values.forEach((x, i) => storage.set(`artifact_${i}`, x))\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (weaponCounter) {\r\n    const weapons = storage.entries.filter(([k]) => k.startsWith(\"weapon_\")).map(([key, v]) => [key, JSON.parse(v) as IWeapon] as const)\r\n    const idsToRemove = new Set(base.weapons.values.map(w => w.id))\r\n    const hasLocations = weapons.some(weapon => weapon[1].location)\r\n\r\n    for (const [key, weapon] of weapons) {\r\n      let { duplicated, upgraded } = base.weapons.findDup(weapon)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\r\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in weapon) && key !== \"location\")\r\n            weapon[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          weapon.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) weaponCounter.unchanged.push(weapon)\r\n      else if (upgraded.length) weaponCounter.updated.push(weapon)\r\n      else weaponCounter.new.push(weapon)\r\n      storage.set(key, weapon)\r\n    }\r\n    weaponCounter.removed = [...idsToRemove].map(id => base.weapons.get(id)!)\r\n  } else\r\n    base.weapons.values.forEach((x, i) => storage.set(`weapon_${i}`, x))\r\n\r\n  if (charCounter) {\r\n    const newCharEntries = storage.entries.filter(([k]) => k.startsWith(\"char_\")).map(([key, value]) => [key.slice(5), JSON.parse(value) as ICharacter] as const)\r\n    const newCharKeys = new Set(newCharEntries.map(([k]) => k))\r\n    const oldCharKeys = new Set(base.chars.keys as string[])\r\n\r\n    charCounter.updated = []\r\n    charCounter.new = []\r\n\r\n    const hasTeamData = newCharEntries.some(([_, char]) => char.team.some(x => x))\r\n\r\n    for (const [key, char] of newCharEntries) {\r\n      const match = base.chars.get(key as any)\r\n      if (match) {\r\n        charCounter.updated.push(char)\r\n      } else {\r\n        charCounter.new.push(char)\r\n        continue\r\n      }\r\n\r\n      for (const key in match)\r\n        if (!(key in char))\r\n          char[key] = match[key]\r\n      if (!hasTeamData)\r\n        char.team = match.team\r\n\r\n      storage.set(`char_${key}`, char)\r\n    }\r\n\r\n    charCounter.removed = [...oldCharKeys].filter(([k]) => newCharKeys.has(k)).map(k => base.chars.get(k as any)!)\r\n    charCounter.unchanged = []\r\n  } else\r\n    base.chars.keys.forEach(k => storage.set(`char_${k}`, base.chars.get(k)))\r\n\r\n  // Merge misc.\r\n  const newKeys = new Set(storage.keys)\r\n  for (const key of base.storage.keys)\r\n    if (!newKeys.has(key) && !key.startsWith(\"artifact_\") && !key.startsWith(\"weapon_\") && !key.startsWith(\"char_\"))\r\n      storage.setString(key, base.storage.getString(key)!)\r\n}\r\n","import { MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\r\nimport { ArtCharDatabase } from '../Database';\r\nimport { importGOOD } from './good';\r\n\r\nconst DefaultVersion = \"1\";\r\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: any[] }> = {\r\n  \"1\": importMona1\r\n};\r\n\r\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ReturnType<typeof importGOOD> {\r\n  const version = dataObj.version ?? DefaultVersion\r\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\r\n\r\n  if (!converted)\r\n    return // TODO: Maybe add failure reason, or throws here\r\n\r\n  return importGOOD({\r\n    format: \"GOOD\",\r\n    source: \"mona-uranai\",\r\n    version: 1,\r\n    artifacts: converted.artifacts\r\n  }, oldDatabase)\r\n}\r\n\r\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\r\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\r\n\r\nfunction importMona1(dataObj: any): { artifacts: any[] } {\r\n  const artifacts: any[] = []\r\n\r\n  for (const property in dataObj) {\r\n    if (!(property in ArtifactSlotKeyMap))\r\n      continue\r\n\r\n    for (const genshinArtArtifact of dataObj[property]) {\r\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\r\n      const raw = {\r\n        setKey: ArtifactSetKeyMap[setName],\r\n        rarity: star,\r\n        level,\r\n        slotKey: ArtifactSlotKeyMap[position],\r\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\r\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\r\n          const key = ArtifactSubStatKeyMap[name]\r\n          return {\r\n            key,\r\n            value: key?.endsWith(\"_\") ?\r\n              Math.round(value * 1000) / 10 : // decimal to percentage\r\n              value,\r\n          }\r\n        }),\r\n      }\r\n      artifacts.push(raw)\r\n    }\r\n  }\r\n\r\n  return { artifacts }\r\n}\r\n\r\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\r\n\r\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\r\n  \"flower\": \"flower\",\r\n  \"feather\": \"plume\",\r\n  \"sand\": \"sands\",\r\n  \"cup\": \"goblet\",\r\n  \"head\": \"circlet\",\r\n}\r\n\r\n// Referencing https://github.com/daydreaming666/Amenoma/blob/main/ArtScanner/ArtsInfo.py SetNamesGenshinArt\r\n\r\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\r\n  \"adventurer\": \"Adventurer\",\r\n  \"archaicPetra\": \"ArchaicPetra\",\r\n  \"berserker\": \"Berserker\",\r\n  \"blizzardStrayer\": \"BlizzardStrayer\",\r\n  \"bloodstainedChivalry\": \"BloodstainedChivalry\",\r\n  \"braveHeart\": \"BraveHeart\",\r\n  \"crimsonWitch\": \"CrimsonWitchOfFlames\",\r\n  \"defenderWill\": \"DefendersWill\",\r\n  \"gambler\": \"Gambler\",\r\n  \"gladiatorFinale\": \"GladiatorsFinale\",\r\n  \"heartOfDepth\": \"HeartOfDepth\",\r\n  \"instructor\": \"Instructor\",\r\n  \"lavaWalker\": \"Lavawalker\",\r\n  \"luckyDog\": \"LuckyDog\",\r\n  \"maidenBeloved\": \"MaidenBeloved\",\r\n  \"martialArtist\": \"MartialArtist\",\r\n  \"noblesseOblige\": \"NoblesseOblige\",\r\n  \"prayersForDestiny\": \"PrayersForDestiny\",\r\n  \"prayersForIllumination\": \"PrayersForIllumination\",\r\n  \"prayersForWisdom\": \"PrayersForWisdom\",\r\n  \"prayersToSpringtime\": \"PrayersToSpringtime\",\r\n  \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\r\n  \"retracingBolide\": \"RetracingBolide\",\r\n  \"scholar\": \"Scholar\",\r\n  \"exile\": \"TheExile\",\r\n  \"thunderingFury\": \"ThunderingFury\",\r\n  \"thunderSmoother\": \"Thundersoother\",\r\n  \"tinyMiracle\": \"TinyMiracle\",\r\n  \"travelingDoctor\": \"TravelingDoctor\",\r\n  \"viridescentVenerer\": \"ViridescentVenerer\",\r\n  \"wandererTroupe\": \"WanderersTroupe\",\r\n  \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\r\n  \"paleFlame\": \"PaleFlame\",\r\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\r\n  \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\r\n  \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\r\n  \"oceanHuedClam\": \"OceanHuedClam\",\r\n  \"EchoesOfAnOffering\": \"EchoesOfAnOffering\",\r\n  \"VermillionHereafter\": \"VermillionHereafter\",\r\n}\r\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\r\n  \"cureEffect\": \"heal_\",\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  // \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  // // \"eCritical\": \"\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n  \"thunderBonus\": \"electro_dmg_\",\r\n  \"fireBonus\": \"pyro_dmg_\",\r\n  \"waterBonus\": \"hydro_dmg_\",\r\n  \"iceBonus\": \"cryo_dmg_\",\r\n  \"windBonus\": \"anemo_dmg_\",\r\n  \"rockBonus\": \"geo_dmg_\",\r\n  // \"grassBonus\": \"dendro_dmg_\",  // the day will come...\r\n  \"physicalBonus\": \"physical_dmg_\",\r\n  // \"bonus\": \"\",\r\n  // \"aBonus\": \"\",\r\n  // \"bBonus\": \"\",\r\n  // \"eBonus\": \"\",\r\n  // \"qBonus\": \"\",\r\n}\r\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Upload } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\r\nimport { useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport CardLight from '../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport { ImportResult, ImportResultCounter } from '../Database/exim'\r\nimport { importGOOD } from '../Database/imports/good'\r\nimport { importMona } from '../Database/imports/mona'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const dataObj: UploadData | undefined = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\r\n      // Parse as mona format\r\n      const imported = importMona(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database])\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {UploadInfo(dataObj) ?? errorMsg}\r\n    </CardContent>\r\n    {UploadAction(dataObj, reset)}\r\n  </CardLight>\r\n}\r\n\r\nfunction UploadInfo(data: UploadData | undefined) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOODUploadInfo data={data} />\r\n  }\r\n}\r\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\r\n  }\r\n}\r\n\r\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: ImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result?: ImportResultCounter<any>, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  if (!result) return null\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {result.total}</Typography>\r\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: ImportResult, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const dataValid = data.characters?.total || data.artifacts?.total || data.weapons?.total\r\n  const replaceDB = () => {\r\n    database.storage.clear()\r\n    database.storage.copyFrom(storage)\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n    reset()\r\n  }\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n\r\ntype UploadData = ImportResult\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga4'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DownloadCard from './DownloadCard'\r\nimport LanguageCard from './LanguageCard'\r\nimport TCToggleCard from './TCToggleCard'\r\nimport UploadCard from './UploadCard'\r\n\r\nexport default function PageSettings() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.send({ hitType: \"pageview\", page: '/setting' })\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DownloadCard />\r\n      <UploadCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database.states.getWithInit<O>(key, init))\r\n\r\n  useEffect(() =>\r\n    key ? database.states.follow(key, setState as any) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.states.set(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state ?? init(), updateState]\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","DropdownButton","title","children","id","props","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","initGlobalSettings","tcMode","GOSource","exportGOOD","storage","artifactIDs","Map","artifacts","entries","filter","startsWith","map","i","value","set","JSON","parse","format","dbVersion","currentDBVersion","source","version","characters","weapons","states","key","split","buildSettings","result","builds","x","has","get","DownloadCard","useContext","DatabaseContext","database","setDatabase","t","useTranslation","numChar","chars","keys","length","numArt","arts","values","numWeapon","downloadValid","deleteDB","clear","ArtCharDatabase","copyToClipboard","navigator","clipboard","writeText","stringify","then","alert","catch","console","error","download","dateStr","Date","toISOString","replace","replaceAll","JSONStr","filename","a","document","createElement","href","encodeURIComponent","target","body","appendChild","click","removeChild","CardContent","sx","py","Typography","variant","Trans","i18nKey","Divider","Grid","container","mb","spacing","item","xs","md","Button","disabled","startIcon","Download","flexGrow","color","icon","faClipboard","faTrashAlt","LanguageCard","SqBadge","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","fullWidth","language","languageCodeList","MenuItem","selected","TCToggleCard","useDBState","setGlobalSettings","gutterBottom","CheckBox","CheckBoxOutlineBlank","createSvgIcon","_jsx","d","importGOOD","data","oldDatabase","SandboxStorage","type","total","invalid","new","updated","unchanged","removed","counter","forEach","parseArtifact","push","w","parsed","parseWeapon","c","parseCharacter","buildDate","setDBVersion","s","state","b","parseImport","migrate","base","artCounter","weaponCounter","charCounter","v","idsToRemove","Set","hasLocations","some","location","art","findDups","duplicated","upgraded","match","delete","weapon","findDup","newCharEntries","slice","newCharKeys","oldCharKeys","hasTeamData","team","char","k","newKeys","setString","getString","merge","importGOOD1","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","name","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","InvisInput","display","UploadCard","setdata","setfilename","errorMsg","setErrorMsg","useMemo","e","Object","includes","imported","converted","importMona","onUpload","file","files","reader","FileReader","onload","readAsText","htmlFor","accept","onChange","component","Upload","px","faFileCode","faArrowLeft","Box","fontFamily","minHeight","resize","UploadInfo","UploadAction","GOODUploadInfo","reset","GOUploadAction","MergeResult","dataValid","copyFrom","faFileUpload","PageSettings","ReactGA","hitType","page","my","flexDirection","gap","init","getWithInit","setState","useEffect","follow","updateState","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}