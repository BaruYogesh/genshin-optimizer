{"version":3,"sources":["Character/Character.ts","Assets/Element_Anemo.png","Assets/Assets.ts","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Weapon/Weapon.ts","Formula.ts","Data/WeaponData.ts","StatDependency.ts","Data/CharacterData.ts"],"names":["Character","this","Error","characterKey","character","CharacterDatabase","get","Object","values","equippedArtifacts","forEach","artid","ArtifactDatabase","moveToNewLocation","remove","key","characterSheet","weaponSheet","eleKey","startsWith","subkey","split","getTalentOfKey","name","getElementalName","elementalKey","defVal","ElementalData","getlevelKeys","keys","LevelsData","getlevelTemplateName","levelKey","getLevelString","levelOverride","getStatValueWithOverride","getLevel","getIndexFromlevelkey","indexOf","level","getAscension","asend","getTalentFieldValue","field","stats","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","specializeStat","value","Weapon","getWeaponMainStatValWithOverride","weapon","includes","characterStatBase","baseStat","equipArtifacts","artIds","artIdsOnCharacter","allSlotKeys","slotKey","artNotOnChar","location","artOnChar","notCharLoc","id","equipArtifactOnSlot","equipArtifactBuild","calculateBuild","artifactSheets","artifacts","mainStatAssumptionLevel","fromEntries","map","art","i","entries","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","mainStatKey","mainStatValue","numStars","Math","max","min","substats","substat","stat","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","dependencies","GetDependencies","modifiers","PreprocessFormulas","formula","mergeStats","modifier","mkey","multiplier","undefined","elementKey","hitMode","infusionAura","reactionMode","talentLevelKeys","constellation","refineIndex","ascension","statKeys","characterEle","weaponType","weaponTypeKey","tlvl","weapon_key","weapon_refineIndex","allElements","overrides","hasOwnProperty","specializedStatVal","specialStatKey","getTalentStatsAll","s","weaponSubKey","getWeaponSubstatKey","getWeaponSubstatValWithOverride","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","talentKey","formulas","formKey","weaponFormulas","Formula","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","getLevelName","LevelNameData","getLevelIndex","WeaponLevelKeys","getWeaponMainStatVal","baseStats","main","getWeaponSubstatVal","sub","substatKey","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal","formulaImport","then","imp","default","crawlObject","f","objPathValue","GetFormulaDependency","dependency","Set","Proxy","target","prop","receiver","add","formulaKeyDependency","freeze","Formulas","StatData","InsertDependencies","has","k","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey"],"mappings":"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","file":"static/js/4.184026eb.chunk.js","sourcesContent":["import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport Formula from \"../Formula\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { ICharacter } from \"../Types/character\";\r\nimport { allElements, allSlotKeys, CharacterKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = (): string[] => Object.keys(LevelsData)\r\n  static getlevelTemplateName = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getLevelString = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet) => {\r\n    const levelOverride = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n    return Character.getLevel(character.levelKey) === levelOverride ? Character.getlevelTemplateName(character.levelKey) : `Lvl. ${levelOverride}`\r\n  }\r\n  static getIndexFromlevelkey = (levelKey) => Character.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  static getTalentFieldValue = (field, key, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    return evalIfFunc(field?.[key], stats)\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string, defVal = 0) => {\r\n    const { levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return characetSheet.specializeStat.key\r\n    if (statKey === \"specializedStatVal\") return characetSheet.specializeStat.value[Character.getIndexFromlevelkey(levelKey)]\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon, weaponSheet)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return Character.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    if (statKey in characetSheet.baseStat) return characetSheet.baseStat[statKey][Character.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n  static getStatValueWithOverride = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string, defVal = 0) => {\r\n    if (Character.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey: CharacterKey | \"\", artIds: StrictDict<SlotKey, string>) => {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    const artIdsOnCharacter = character.equippedArtifacts;\r\n\r\n    //swap, by slot\r\n    allSlotKeys.forEach(slotKey => {\r\n      const artNotOnChar = ArtifactDatabase.get(artIds[slotKey])\r\n      if (artNotOnChar?.location === characterKey) return; //it is already equipped\r\n      const artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      const notCharLoc = (artNotOnChar?.location ?? \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifactOnSlot(notCharLoc, slotKey, artOnChar?.id ?? \"\")\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char\r\n    CharacterDatabase.equipArtifactBuild(characterKey, artIds);\r\n  }\r\n  static remove(characterKey) {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return\r\n    Object.values(character.equippedArtifacts).forEach(artid =>\r\n      ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    let artifacts\r\n    if (character.artifacts) //from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    const initialStats = Character.createInitialStats(character, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats, artifacts, artifactSheets) => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach((art: any) => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.numStars, Math.max(Math.min(stats.mainStatAssumptionLevel, art.numStars * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.value)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey]) => {\r\n      const { setNumKey } = conditional\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      Object.entries(condStats).forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return stats\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]: any) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of (Object.entries(val) as any)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of (Object.entries(modifier) as any))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else {\r\n      if (initialStats[key] === undefined) initialStats[key] = val\r\n      else if (typeof initialStats[key] === \"number\") initialStats[key] += val\r\n    }\r\n  })\r\n\r\n  static createInitialStats = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { characterKey, elementKey, levelKey, hitMode, infusionAura, reactionMode, talentLevelKeys, constellation, equippedArtifacts, conditionalValues = {}, weapon = { key: \"\", refineIndex: 0 } } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    const { key: weapon_key, refineIndex: weapon_refineIndex } = weapon\r\n    initialStats.weapon = { key: weapon_key, refineIndex: weapon_refineIndex }\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n    Character.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => Character.mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n    if (weaponSubKey) Character.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubstatValWithOverride(character?.weapon, weaponSheet) })\r\n    Character.mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      Character.mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, characterSheet: CharacterSheet) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    talentSheet && Object.entries(talentSheet.formula).forEach(([talentKey, formulas]: any) => {\r\n      Object.values(formulas as any).forEach((formula: any) => {\r\n        if (!formula.field.canShow(stats)) return\r\n        if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n        const formKey = `talentKey_${talentKey}`\r\n        if (!charFormulas[formKey]) charFormulas[formKey] = []\r\n        charFormulas[formKey].push(formula.keys)\r\n      })\r\n    })\r\n\r\n    const weaponFormulas = Formula.formulas.weapon[stats.weapon.key]\r\n\r\n    if (weaponFormulas) {\r\n      Object.values(weaponFormulas as any).forEach((formula: any) => {\r\n        if (!formula.field.canShow(stats)) return\r\n        const formKey = `weapon_${stats.weapon.key}`\r\n        if (!charFormulas[formKey]) charFormulas[formKey] = []\r\n        charFormulas[formKey].push(formula.keys)\r\n      })\r\n    }\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n  static getDisplayHeading(key: string, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, eleKey: ElementKey = \"anemo\") {\r\n    if (key === \"basicKeys\") return \"Basic Stats\"\r\n    else if (key === \"genericAvgHit\") return \"Generic Optimization Values\"\r\n    else if (key === \"transReactions\") return \"Transformation Reaction\"\r\n    else if (key.startsWith(\"talentKey_\")) {\r\n      const subkey = key.split(\"talentKey_\")[1]\r\n      return (characterSheet?.getTalentOfKey(subkey, eleKey)?.name ?? subkey)\r\n    } else if (key.startsWith(\"weapon_\")) {\r\n      const subkey = key.split(\"weapon_\")[1]\r\n      return (weaponSheet?.name ?? subkey)\r\n    }\r\n    return \"\"\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { LevelNameData, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData';\r\nimport WeaponSheet from './WeaponSheet';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey): number => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponSheet: WeaponSheet, levelKey, defVal = 0) => (weaponSheet.baseStats.main[Weapon.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubstatVal = (weaponSheet: WeaponSheet, levelKey, defVal = 0) => (weaponSheet.baseStats.sub?.[Weapon.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubstatKey = (weaponSheet: WeaponSheet, defVal = \"\") => (weaponSheet.baseStats?.substatKey || defVal)\r\n\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = (): string[] => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj: any, weaponSheet: WeaponSheet, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubstatValWithOverride = (weaponObj: any, weaponSheet: WeaponSheet, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weaponObj?.levelKey, defVal);\r\n}","import ICalculatedStats from './Types/ICalculatedStats';\r\nimport { crawlObject, objPathValue } from './Util/Util';\r\n\r\nexport const formulaImport = import('./Data/formula').then(imp => {\r\n  Formula.formulas = imp.default\r\n  crawlObject(imp.default, [], f => typeof f === \"function\", (formula, keys) => formula.keys = keys)\r\n})\r\n\r\nexport default class Formula {\r\n  constructor() { if (this instanceof Formula) throw Error('A static class cannot be instantiated.'); }\r\n  static formulas: any = {}\r\n  static get = (keys: string[]): Promise<((stats: ICalculatedStats) => any[]) | object | undefined> => formulaImport.then(() => objPathValue(Formula.formulas, keys))\r\n}\r\n","const WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20/40\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40/50\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50/60\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60/70\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70/80\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80/90\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]: any) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]: any) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0] as any] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","// import characters from\r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20/40\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40/50\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50/60\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60/70\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70/80\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80/90\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterSpecializedStatKey\r\n}"],"sourceRoot":""}