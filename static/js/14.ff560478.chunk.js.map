{"version":3,"sources":["Components/StarDisplay.tsx","Components/CustomFormControl.tsx","Util/UIUtil.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/InfoComponent.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Artifact/Component/ArtifactSetDropDownMenuFragment.tsx","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Artifact/UploadDisplay.tsx","Util/BorrowManager.ts","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","valueString","unit","Math","round","toFixed","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","database","_getCharKeys","sort","a","b","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","InfoComponent","pageKey","text","modalTitle","children","loadFromLocalStorage","showInfoModal","setshowInfoModal","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","faTimes","Body","fallback","animation","Footer","faQuestionCircle","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setLocation","editable","art","location","substats","rolls","Artifact","substatsValidation","id","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","border","md","src","slotIcons","thumbnail","getSlotName","getStatName","stat","numRolls","length","efficiency","effOpacity","statName","style","opacity","has","valid","Toggle","Menu","Divider","placement","overlay","lockArtifact","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","ArtifactSetDropDownMenuFragment","sheets","click","Fragment","Object","entries","setKeysByRarities","reverse","star","sets","Dropdown","Trans","i18nKey","starColor","r","g","schedulers","init","deinit","data","this","callback","refCount","box","result","language","scheduler","createScheduler","promises","fill","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","process","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","rarityRates","fromEntries","allArtifactRarities","rarity","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","relevantMainStatValues","filter","numStarsString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","uploadDisplayReset","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","artifactDispatch","artifactSheets","deepClone","reset","update","newValue","newSheet","pick","prefer","slots","setSubstat","isValid","validateFlexArtifact","errors","useMemo","editorArt","isDup","candidates","_getArts","candidate","upgraded","some","duplicated","candidateSubstat","dupId","checkDuplicate","errMsgs","InputGroup","as","Prepend","DropdownButton","Append","title","Text","l","sKey","getStatNameWithPercent","ItemText","mainStatK","FormControl","readOnly","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","saveArtifact","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","val","indexOf","ButtonGroup","action","updateArt","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterLocked","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","useForceUpdate","dbDirty","forceUpdate","effFilterSet","deleteArtifact","removeArt","editArtifact","current","scrollIntoView","behavior","cancelEditArtifact","pageview","followAnyArt","locationDisplay","lockedDisplay","allArtifacts","artifacts","filterKey","item","numUnequip","numUnlock","numLock","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","paginationCard","showingValue","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","faUserSlash","faTrash","ButtonToolbar","slicep","n"],"mappings":"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","file":"static/js/14.ff560478.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1) + \"%\"\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { database } from \"../Database/Database\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{database._getCharKeys().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as IArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{valueString(Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.getSlotName(slotKey) ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maxEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.lockArtifact(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import React from \"react\"\r\nimport { Dropdown } from \"react-bootstrap\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport { ArtifactSetKey, Rarity } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\ntype Data = {\r\n  sheets?: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  click: (ArtifactSetKey) => void\r\n}\r\nexport default function ArtifactSetDropDownMenuFragment({ sheets, click }: Data) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <React.Fragment>\r\n    {sheets && Object.entries(ArtifactSheet.setKeysByRarities(sheets)).reverse().map(([star, sets], i) =>\r\n      <React.Fragment key={star}>\r\n        {i > 0 && <Dropdown.Divider />}\r\n        <Dropdown.Header><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans></Dropdown.Header>\r\n        {sets.map(setKey => <Dropdown.Item key={setKey} onClick={() => click(setKey)}>{sheets[setKey].name}</Dropdown.Item >)}\r\n      </React.Fragment>)}\r\n  </React.Fragment>\r\n}\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, IArtifact, MainStatKey, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }: { setState: (art: IArtifact) => void, setReset: (reset: () => void) => void, artifactInEditor: boolean }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.numStars}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n            </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: Substat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof IArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    id: \"\",\r\n    setKey: \"Adventurer\", numStars: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<Rarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [numStarsString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const numStars = parseInt(numStarsString) as Rarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(numStars))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(numStars, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                id: \"\", setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              id: \"\", setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof IArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), numStars: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof IArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.numStars, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.numStars!.add(other.numStars as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof IArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"numStars\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{value.value}{Stat.getStatUnit(value.key) === \"%\" ? \"%\" : \"\"}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): Substat[] {\r\n  const matches: Substat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof IArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport { validateFlexArtifact } from '../Database/validation';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat } from '../Types/artifact';\r\nimport { Rarity, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\ntype ArtifactEditorArgument = { artifactIdToEdit: string, cancelEdit: () => void }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nlet uploadDisplayReset: (() => void) | undefined\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }: ArtifactEditorArgument) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const [artifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    if (artifactIdToEdit && artifactIdToEdit !== artifact?.id) {\r\n      const databaseArtifact = database._getArt(artifactIdToEdit)\r\n      if (databaseArtifact)\r\n        artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, artifact?.id])\r\n\r\n  const getUpdloadDisplayReset = (reset: () => void) => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.numStars = pick(artifact?.numStars, newSheet.rarity, Math.max(...newSheet.rarity) as Rarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.numStars)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.numStars ?? artifact!.numStars))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: Substat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = artifact ? !validateFlexArtifact(artifact).errors.length : false\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { dupId, isDup } = useMemo(() => checkDuplicate(artifact), [artifact])\r\n  const { numStars = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const errMsgs = artifact ? Artifact.substatsValidation(artifact) : []\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = artifact ? Artifact.getArtifactEfficiency(artifact, allSubstatFilter) : {}\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.name ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(setKey => update({ setKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={numStars} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as Rarity[]).map((numStars, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(numStars)} onClick={() => update({ numStars })}>\r\n                {<Stars stars={numStars} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${numStars * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {numStars ? [...Array(numStars + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (numStars * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2 w-100 d-flex flex-row\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {sheet?.slots?.map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <InputGroup.Text as={InputGroup.Append} className=\"flex-grow-1\">{sheet?.getSlotName(artifact!.slotKey) ?? t`editor.unknownPieceName` as any}</InputGroup.Text>\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${valueString(Artifact.mainStatValue(artifact.mainStatKey, numStars, level), Stat.getStatUnit(artifact.mainStatKey))}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (currentEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (maxEfficiency)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? (isDup ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { saveArtifact(artifact!, artifact!.id); reset() }} disabled={!isValid} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? t`editor.btnSave` : t`editor.btnAdd`}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {Boolean(dupId) && <Button className=\"float-right\" onClick={() => { saveArtifact(artifact!, dupId); reset() }} disabled={!isValid} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: IArtifact | undefined, setSubstat: (index: number, substat: Substat) => void, className: string }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", substats = [] } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    const numStars = artifact.numStars\r\n    const { numUpgrades, high } = Artifact.rollInfo(numStars)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, numStars) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = rolls.map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key && substats.every(other => other.key !== key))\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : undefined}\r\n        onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          const newValue = valueString(accurateValue + v, unit)\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: Substat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      state!.substats[index] = substat\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nfunction checkDuplicate(editorArt: IArtifact | undefined): { dupId?: string, isDup: boolean } {\r\n  if (!editorArt) return { isDup: false }\r\n  const { id, setKey, numStars, level, slotKey, mainStatKey, substats } = editorArt\r\n  if (id) return { isDup: false }\r\n\r\n  const candidates = database._getArts().filter(candidate =>\r\n    setKey === candidate.setKey &&\r\n    numStars === candidate.numStars &&\r\n    slotKey === candidate.slotKey &&\r\n    mainStatKey === candidate.mainStatKey &&\r\n    level >= candidate.level &&\r\n    substats.every((substat, i) =>\r\n      !candidate.substats[i].key || // Candidate doesn't have anything on this slot\r\n      (substat.key === candidate.substats[i].key && // Or editor simply has better substat\r\n        substat.value >= candidate.substats[i].value)\r\n    )\r\n  )\r\n\r\n  // Strictly upgraded artifact\r\n  const upgraded = candidates.filter(candidate =>\r\n    level > candidate.level &&\r\n    (Math.floor(level / 4) === Math.floor(candidate.level / 4) ? // Check for extra rolls\r\n      substats.every((substat, i) => // Has no extra roll\r\n        substat.key === candidate.substats[i].key && substat.value === candidate.substats[i].value) :\r\n      substats.some((substat, i) => // Has extra rolls\r\n        candidate.substats[i].key ?\r\n          substat.value > candidate.substats[i].value : // Extra roll to existing substat\r\n          substat.key // Extra roll to new substat\r\n      )\r\n    )\r\n  )\r\n  // Strictly duplicated artifact\r\n  const duplicated = candidates.filter(candidate =>\r\n    level === candidate.level &&\r\n    substats.every(substat =>\r\n      !substat.key ||  // Empty slot\r\n      candidate.substats.some(candidateSubstat =>\r\n        substat.key === candidateSubstat.key && // Or same slot\r\n        substat.value === candidateSubstat.value\r\n      )))\r\n\r\n  if (!duplicated.length && !upgraded.length)\r\n    return { isDup: false }\r\n\r\n  const dupId = duplicated[0]?.id! ?? upgraded[0].id!\r\n  return { dupId, isDup: duplicated.length > 0 }\r\n}\r\n\r\nconst saveArtifact = (artifact: IArtifact, id: string | undefined) => {\r\n  artifact.id = id ?? \"\"\r\n  database.updateArt(artifact)\r\n}\r\n","import { faCheckSquare, faLock, faLockOpen, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, ButtonToolbar, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys, allSubstats, IArtifact, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport { database } from '../Database/Database';\r\nimport ArtifactSetDropDownMenuFragment from './Component/ArtifactSetDropDownMenuFragment';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterLocked: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50,\r\n  effFilter: [...allSubstats]\r\n})\r\nfunction filterReducer(state, action) {\r\n  //reset all except the efficiency filter, since its a separate UI with its own reset\r\n  if (action.type === \"reset\") return { ...initialFilter(), effFilter: state.effFilter }\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const { effFilter } = filters\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback(\r\n    (id: string) => database.removeArt(id), [])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numUnlock, numLock } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const allArtifacts = database._getArts()\r\n    const artifacts: IArtifact[] = allArtifacts.filter(art => {\r\n      if (filterLocked) {\r\n        if (filterLocked === \"locked\" && !art.lock) return false\r\n        if (filterLocked === \"unlocked\" && art.lock) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).map((art) => {\r\n      switch (sortType) {\r\n        case \"quality\": return { value: [art.numStars], art }\r\n        case \"level\": return { value: [art.level, art.numStars], art }\r\n        case \"efficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency], art }\r\n        case \"mefficiency\": return { value: [Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency], art }\r\n      }\r\n      return { value: [0], art }\r\n    }).sort((a, b) => {\r\n      for (let i = 0; i < a.value.length; i++) {\r\n        if (a.value[i] !== b.value[i])\r\n          return (a.value[i] - b.value[i]) * (ascending ? 1 : -1)\r\n      }\r\n      return 0\r\n    }).map(item => item.art)\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 1 : 0), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n\r\n    return { artifacts, totalArtNum: allArtifacts.length, numUnequip, numUnlock, numLock, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty, effFilterSet])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation), [filterLocation])\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.any\") })\r\n  else if (filterLocation === \"Inventory\") locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.inventory\") })\r\n  else if (filterLocation === \"Equipped\") locationDisplay = t(\"filterLocation.currentlyEquipped\")\r\n  else locationDisplay = <b>{locationCharacterSheet?.name}</b>\r\n\r\n  let lockedDisplay\r\n  if (filterLocked === \"locked\") lockedDisplay = <span><FontAwesomeIcon icon={faLock} /> {t`lock.locked`}</span>\r\n  else if (filterLocked === \"unlocked\") lockedDisplay = <span><FontAwesomeIcon icon={faLockOpen} /> {t`lock.unlocked`}</span>\r\n  else lockedDisplay = t(\"lockDisplay\", { value: t(\"lock.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => database.setLocation(art.id!, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => database.removeArt(art.id!))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numLock} artifacts?`) &&\r\n    artifacts.map(art => database.lockArtifact(art.id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numUnlock} artifacts?`) &&\r\n    artifacts.map(art => database.lockArtifact(art.id, false))\r\n\r\n  const paginationCard = useMemo(() => {\r\n    const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n    return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }, [numPages, currentPageIndex, artifactsToShow.length, artifacts.length, totalArtNum, t])\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"resetFilters\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                <ArtifactSetDropDownMenuFragment sheets={artifactSheets} click={(filterArtSetKey => filterDispatch({ filterArtSetKey }))} />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocked ? \"success\" : \"primary\"} >\r\n                    {lockedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"\" })}><Trans t={t} i18nKey=\"lock.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"locked\" })}><span><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"lock.locked\" >Locked</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"unlocked\" })}><span><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"lock.unlocked\" >Unlocked</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numLock} onClick={lockArtifacts}><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnlock} onClick={unlockArtifacts}><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"button.unlockArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Efficiency Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ effFilter: [...allSubstats] })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> <Trans t={t} i18nKey=\"ui:reset\" /></Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <ButtonToolbar as={Row} className=\"w-100 d-flex flex-row\">\r\n          {[[0, 6], [6]].map(slicep => <ToggleButtonGroup key={slicep.toString()} as={Col} type=\"checkbox\" value={effFilter} onChange={n => filterDispatch({ effFilter: n })} className=\"flex-grow-1 mb-2\">\r\n            {allSubstats.slice(...slicep).map(substat => <ToggleButton key={substat} value={substat} variant={effFilter.includes(substat) ? \"success\" : \"primary\"}>{Stat.getStatNameWithPercent(substat)}</ToggleButton>)}\r\n          </ToggleButtonGroup>)}\r\n        </ButtonToolbar>\r\n      </Card.Body>\r\n    </Card>\r\n    {paginationCard}\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            effFilter={effFilterSet}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && paginationCard}\r\n  </Container >\r\n}\r\n"],"sourceRoot":""}