{"version":3,"file":"static/js/831.2a0d118b.chunk.js","mappings":"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","sources":["Components/BootstrapTooltip.tsx","Components/ConditionalWrapper.tsx","Components/FieldDisplay.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","Data/Resonance.tsx","Data/SheetUtil.tsx","Data/Weapons/WeaponSheet.tsx","PageCharacter/CharacterCard.tsx","ReactHooks/useCharSelectionCallback.tsx","Util/CharacterUtil.tsx","ReactHooks/useCharacterReducer.tsx","ReactHooks/useTeamData.tsx"],"sourcesContent":["import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { ReactNode } from \"react\";\r\n\r\ntype Prop = {\r\n  condition: boolean,\r\n  wrapper: (children: ReactNode) => ReactNode\r\n  falseWrapper?: (children: ReactNode) => ReactNode\r\n  children: ReactNode\r\n}\r\n// Wrap children with element provided by wrapper func when condition is true.\r\nexport default function ConditionalWrapper({ condition, wrapper, falseWrapper, children }: Prop) {\r\n  return (condition ? wrapper(children) : (falseWrapper ? falseWrapper(children) : children)) as JSX.Element;\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, List, styled, Typography } from \"@mui/material\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { DataContext, dataContextObj } from \"../DataContext\";\r\nimport { NodeDisplay } from \"../Formula/api\";\r\nimport KeyMap, { valueString } from \"../KeyMap\";\r\nimport { IBasicFieldDisplay, IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { evalIfFunc } from \"../Util/Util\";\r\nimport BootstrapTooltip from \"./BootstrapTooltip\";\r\nimport ColorText from \"./ColoredText\";\r\nimport StatIcon from \"./StatIcon\";\r\nimport { data as dataNode } from '../Formula/utils'\r\nimport { Data } from \"../Formula/type\";\r\n\r\nexport default function FieldDisplay({ field, fieldContext, component }: { field: IFieldDisplay, fieldContext?: dataContextObj, component?: React.ElementType }) {\r\n  const { data, oldData } = useContext(DataContext)\r\n  const canShow = useMemo(() => field?.canShow?.(data) ?? true, [field, data])\r\n  if (!canShow) return null\r\n  if (\"node\" in field) {\r\n    // TODO: remove as Data\r\n    const node = fieldContext ? data.get(dataNode(field.node, { target: fieldContext.data.data[0] } as Data)) : data.get(field.node)\r\n    if (node.isEmpty) return null\r\n    if (oldData) {\r\n      const oldNode = fieldContext ? oldData.get(dataNode(field.node, { target: fieldContext.oldData!.data[0] } as Data)) : oldData.get(field.node)\r\n      const oldValue = oldNode.isEmpty ? 0 : oldNode.value\r\n      return <NodeFieldDisplay node={node} oldValue={oldValue} suffix={field.textSuffix} component={component} />\r\n    }\r\n    else return <NodeFieldDisplay node={node} suffix={field.textSuffix} component={component} />\r\n  }\r\n  return <BasicFieldDisplay field={field} component={component} />\r\n}\r\n\r\nfunction BasicFieldDisplay({ field, component }: { field: IBasicFieldDisplay, component?: React.ElementType }) {\r\n  const { data } = useContext(DataContext)\r\n  const v = evalIfFunc(field.value, data)\r\n  const variant = evalIfFunc(field.variant, data)\r\n  const text = field.text && <span>{field.text}</span>\r\n  const suffix = field.textSuffix && <span>{field.textSuffix}</span>\r\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\", gap: 1 }} component={component} >\r\n    <Typography color={`${variant}.main`} sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>{text}{suffix}</Typography>\r\n    <Typography >{typeof v === \"number\" ? v.toFixed?.(field.fixed) : v}{field.unit}</Typography>\r\n  </Box>\r\n}\r\n\r\nexport function NodeFieldDisplay({ node, oldValue, suffix, component }: { node: NodeDisplay, oldValue?: number, suffix?: Displayable, component?: React.ElementType }) {\r\n  if (node.isEmpty) return null\r\n\r\n  suffix = suffix && <span>{suffix}</span>\r\n  const icon = node.key && StatIcon[node.key]\r\n  const fieldText = node.key ? KeyMap.get(node.key) : \"\"\r\n  const fieldFormulaText = node.formula\r\n  let fieldVal = \"\" as Displayable\r\n  if (oldValue) {\r\n    const diff = node.value - oldValue\r\n    fieldVal = <span>{valueString(oldValue, node.unit)}{diff ? <ColorText color={diff > 0 ? \"success\" : \"error\"}> {diff > 0 ? \"+\" : \"\"}{valueString(diff, node.unit)}</ColorText> : \"\"}</span>\r\n  } else fieldVal = valueString(node.value, node.unit)\r\n  const formulaTextOverlay = !!node.formula && <BootstrapTooltip placement=\"top\" title={<Typography>{fieldFormulaText}</Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n  return <Box width=\"100%\" sx={{ display: \"flex\", justifyContent: \"space-between\", gap: 1 }} component={component} >\r\n    <Typography color={`${node.variant}.main`} sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }}>{icon}{fieldText}{suffix}</Typography>\r\n    <Typography sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }} >{fieldVal}{formulaTextOverlay}</Typography>\r\n  </Box>\r\n}\r\n\r\nexport const FieldDisplayList = styled(List)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius,\r\n  overflow: \"hidden\",\r\n  margin: 0,\r\n  '> .MuiListItem-root:nth-of-type(even)': {\r\n    backgroundColor: theme.palette.contentDark.main\r\n  },\r\n  '> .MuiListItem-root:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.contentDarker.main\r\n  },\r\n}));\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet,\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (_: any) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\"\r\nimport { input } from \"../../Formula\"\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  get defIcon() { return <ImgIcon src={this.defIconSrc} sx={{ fontSize: \"1.5em\" }} /> }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      case \"PrayersForDestiny\":\r\n      case \"PrayersForIllumination\":\r\n      case \"PrayersForWisdom\":\r\n      case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\r\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\r\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\r\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\r\n      if (setNums.length) artifactSetEffect[setKey] = setNums\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(\"setName\"),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">4-set</SqBadge>\r\n  }\r\n}\r\n","import StatIcon from \"../Components/StatIcon\";\r\nimport { Translate } from \"../Components/Translate\";\r\nimport { tally } from \"../Formula\";\r\nimport { inferInfoMut } from \"../Formula/api\";\r\nimport { UIData } from \"../Formula/uiData\";\r\nimport { equal, greaterEq, min, percent, sum } from \"../Formula/utils\";\r\nimport { allElements, allElementsWithPhy } from \"../Types/consts\";\r\nimport { DocumentSection } from \"../Types/sheet\";\r\nimport { objectKeyValueMap } from \"../Util/Util\";\r\nimport { condReadNode, sgt, st } from \"./SheetUtil\";\r\nconst tr = (strKey: string) => <Translate ns=\"elementalResonance_gen\" key18={strKey} />\r\nconst trm = (strKey: string) => <Translate ns=\"elementalResonance\" key18={strKey} />\r\n\r\ntype IResonance = {\r\n  name: Displayable,\r\n  icon: Displayable,\r\n  canShow: (data: UIData) => boolean\r\n  sections: DocumentSection[]\r\n}\r\n\r\n// Protective Canopy\r\nconst pcNodes = objectKeyValueMap(allElementsWithPhy, e => [`${e}_res_`,\r\ngreaterEq(sum(...allElementsWithPhy.map(i => min(1, tally[i]))), 4, percent(0.15))])\r\n\r\nconst protectiveCanopy: IResonance = {\r\n  name: tr(\"ProtectiveCanopy.name\"),\r\n  icon: <span>{StatIcon.anemo} {StatIcon.geo} {StatIcon.pyro} {StatIcon.hydro} {StatIcon.cryo} {StatIcon.electro} x4</span>,\r\n  canShow: (data: UIData) => allElements.filter(e => data.get(tally[e]).value >= 1).length === 4,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"ProtectiveCanopy.desc\"),\r\n    fields: Object.values(pcNodes).map(node => ({ node }))\r\n  }]\r\n}\r\n\r\n// Fervent Flames\r\nconst ffNode = greaterEq(tally.pyro, 2, percent(0.25))\r\nconst ferventFlames: IResonance = {\r\n  name: tr(\"FerventFlames.name\"),\r\n  icon: <span>{StatIcon.pyro} {StatIcon.pyro}</span>,\r\n  canShow: (data: UIData) => data.get(tally.pyro).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"FerventFlames.desc\"),\r\n    fields: [{\r\n      text: st(\"effectDuration.cryo\"),\r\n      value: -40,\r\n      unit: \"%\"\r\n    }, {\r\n      node: ffNode\r\n    }]\r\n  }]\r\n}\r\n\r\n// Soothing Waters\r\nconst swNode = greaterEq(tally.hydro, 2, percent(0.25))\r\nconst soothingWaters: IResonance = {\r\n  name: tr(\"SoothingWater.name\"),\r\n  icon: <span>{StatIcon.hydro} {StatIcon.hydro}</span>,\r\n  canShow: (data: UIData) => data.get(tally.hydro).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"SoothingWater.desc\"),\r\n    fields: [{\r\n      text: st(\"effectDuration.pyro\"),\r\n      value: -40,\r\n      unit: \"%\"\r\n    }, {\r\n      node: swNode\r\n    }]\r\n  }]\r\n}\r\n\r\n//ShatteringIce\r\nconst condSIPath = [\"resonance\", \"ShatteringIce\"]\r\nconst condSI = condReadNode(condSIPath)\r\nconst siNode = greaterEq(tally.cryo, 2, equal(condSI, \"on\", percent(0.15)))\r\nconst shatteringIce: IResonance = {\r\n  name: tr(\"ShatteringIce.name\"),\r\n  icon: <span>{StatIcon.cryo} {StatIcon.cryo}</span>,\r\n  canShow: (data: UIData) => data.get(tally.cryo).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"ShatteringIce.desc\"),\r\n    fields: [{\r\n      text: st(\"effectDuration.electro\"),\r\n      value: -40,\r\n      unit: \"%\"\r\n    }],\r\n    conditional: {\r\n      teamBuff: true,\r\n      path: condSIPath,\r\n      value: condSI,\r\n      name: trm(\"ShatteringIce.cond\"),\r\n      header: {\r\n        title: tr(\"ShatteringIce.name\"),\r\n        icon: StatIcon.cryo,\r\n      },\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: siNode\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\n// High Voltage\r\nconst highVoltage: IResonance = {\r\n  name: tr(\"HighVoltage.name\"),\r\n  icon: <span>{StatIcon.electro} {StatIcon.electro}</span>,\r\n  canShow: (data: UIData) => data.get(tally.electro).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"HighVoltage.desc\"),\r\n    fields: [{\r\n      text: st(\"effectDuration.hydro\"),\r\n      value: -40,\r\n      unit: \"%\"\r\n    }]\r\n  }]\r\n}\r\n\r\n// Impetuous Winds\r\nconst iwNodeStam = greaterEq(tally.anemo, 2, percent(-0.15))\r\nconst iwNodeMove = greaterEq(tally.anemo, 2, percent(0.1))\r\nconst iwNodeCD = greaterEq(tally.anemo, 2, percent(-0.05))\r\nconst impetuousWinds: IResonance = {\r\n  name: tr(\"ImpetuousWinds.name\"),\r\n  icon: <span>{StatIcon.anemo} {StatIcon.anemo}</span>,\r\n  canShow: (data: UIData) => data.get(tally.anemo).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"ImpetuousWinds.desc\"),\r\n    fields: [{\r\n      node: iwNodeStam\r\n    }, {\r\n      node: iwNodeMove\r\n    }, {\r\n      node: iwNodeCD\r\n    }]\r\n  }]\r\n}\r\n\r\n// Enduring Rock\r\nconst condERPath = [\"resonance\", \"EnduringRock\"]\r\nconst condER = condReadNode(condERPath)\r\nconst erNodeshield_ = greaterEq(tally.geo, 2, percent(0.15))\r\nconst erNodeDMG_ = greaterEq(tally.geo, 2, equal(condER, \"on\", percent(0.15)))\r\nconst erNodeRes_ = greaterEq(tally.geo, 2, equal(condER, \"on\", percent(-0.2)))\r\nconst enduringRock: IResonance = {\r\n  name: tr(\"EnduringRock.name\"),\r\n  icon: <span>{StatIcon.geo} {StatIcon.geo}</span>,\r\n  canShow: (data: UIData) => data.get(tally.geo).value >= 2,\r\n  sections: [{\r\n    teamBuff: true,\r\n    text: tr(\"EnduringRock.desc\"),\r\n    fields: [{\r\n      node: erNodeshield_\r\n    }],\r\n    conditional: {\r\n      teamBuff: true,\r\n      path: condERPath,\r\n      value: condER,\r\n      header: {\r\n        title: tr(\"EnduringRock.name\"),\r\n        icon: StatIcon.geo,\r\n      },\r\n      name: st(\"protectedByShield\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: erNodeDMG_\r\n          }, {\r\n            node: erNodeRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: 15,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }\r\n  }]\r\n}\r\n\r\nexport const resonanceSheets: IResonance[] = [\r\n  protectiveCanopy,\r\n  ferventFlames,\r\n  soothingWaters,\r\n  shatteringIce,\r\n  highVoltage,\r\n  impetuousWinds,\r\n  enduringRock,\r\n]\r\n\r\nexport const resonanceData = inferInfoMut({\r\n  premod: {\r\n    ...pcNodes,\r\n    atk_: ffNode,\r\n    incHeal_: swNode,\r\n    staminaDec_: iwNodeStam,\r\n    moveSPD_: iwNodeMove,\r\n    cdRed_: iwNodeCD,\r\n    shield_: erNodeshield_,\r\n    all_dmg_: erNodeDMG_,\r\n    geo_enemyRes_: erNodeRes_,\r\n  },\r\n  total: {\r\n    // TODO: this crit rate is on-hit. Might put it in a `hit.critRate_` namespace later.\r\n    critRate_: siNode\r\n  }\r\n})\r\n","import { Translate } from \"../Components/Translate\"\r\nimport { ReadNode } from \"../Formula/type\"\r\nimport { customStringRead } from \"../Formula/utils\"\r\nimport { ArtifactSetKey, CharacterKey, WeaponKey } from \"../Types/consts\"\r\n\r\nexport const st = (strKey: string, values?: object) => <Translate ns=\"sheet\" key18={strKey} values={values} />\r\nexport const sgt = (strKey: string) => <Translate ns=\"sheet_gen\" key18={strKey} />\r\n\r\nexport const condReadNode = (path: string[]) => customStringRead([\"conditional\", ...path])\r\nexport function cond(key: CharacterKey | WeaponKey | ArtifactSetKey, subKey: string): [path: string[], node: ReadNode<string>] {\r\n  const path = [key, subKey]\r\n  const node = condReadNode(path)\r\n  return [path, node]\r\n}\r\n\r\ntype Translated = [tr: ((i18key: string) => Displayable), tran: ((i18key: string, values?: object) => Displayable)]\r\nexport function trans(typeKey: \"char\", key: CharacterKey): Translated\r\nexport function trans(typeKey: \"weapon\", key: WeaponKey): Translated\r\nexport function trans(typeKey: \"artifact\", key: ArtifactSetKey): Translated\r\nexport function trans(typeKey: \"char\" | \"weapon\" | \"artifact\", key: CharacterKey | WeaponKey | ArtifactSetKey): Translated {\r\n  return [\r\n    (strKey: string) => <Translate ns={`${typeKey}_${key}_gen`} key18={strKey} />,\r\n    (strKey: string, values?: object) => <Translate ns={`${typeKey}_${key}`} key18={strKey} values={values} />\r\n  ]\r\n}\r\n","import { Translate } from '../../Components/Translate';\r\nimport { Data } from '../../Formula/type';\r\nimport { Rarity, WeaponKey, WeaponTypeKey } from '../../Types/consts';\r\nimport { DocumentSection } from '../../Types/sheet';\r\nimport { ICachedWeapon } from '../../Types/weapon';\r\nimport { ambiguousLevel, ambiguousLevelLow, ascensionMaxLevel, lowRarityMilestoneLevels, milestoneLevels } from '../LevelData';\r\nimport type { WeaponData } from 'pipeline';\r\nimport IConditional from '../../Types/IConditional';\r\nimport ImgIcon from '../../Components/Image/ImgIcon';\r\nimport { input } from '../../Formula';\r\nimport SqBadge from '../../Components/SqBadge';\r\nconst weaponSheets = import('.').then(imp => imp.default)\r\n\r\nexport interface IWeaponSheet {\r\n  icon: string,\r\n  iconAwaken: string,\r\n  document: DocumentSection[],\r\n}\r\n\r\nexport default class WeaponSheet {\r\n  readonly key: WeaponKey;\r\n  readonly sheet: IWeaponSheet;\r\n  readonly data: Data;\r\n  readonly rarity: Rarity;\r\n  readonly weaponType: WeaponTypeKey;\r\n  constructor(key: WeaponKey, weaponSheet: IWeaponSheet, weaponData: WeaponData, data: Data) {\r\n    this.rarity = weaponData.rarity\r\n    this.weaponType = weaponData.weaponType\r\n    this.key = key\r\n    this.sheet = weaponSheet\r\n    this.data = data\r\n  }\r\n  static get = (weaponKey: WeaponKey | \"\"): Promise<WeaponSheet> | undefined => weaponKey ? weaponSheets.then(w => w[weaponKey]) : undefined\r\n  static get getAll() { return weaponSheets }\r\n  static getWeaponsOfType = (sheets: StrictDict<WeaponKey, WeaponSheet>, weaponType: string): Dict<WeaponKey, WeaponSheet> => Object.fromEntries(Object.entries(sheets).filter(([key, sheet]) => (sheet as WeaponSheet).weaponType === weaponType))\r\n  static getLevelString = (weapon: ICachedWeapon): string => `${weapon.level}/${ascensionMaxLevel[weapon.ascension]}`\r\n  tr = (strKey: string) => <Translate ns={`weapon_${this.key}_gen`} key18={strKey} />\r\n  get name() { return this.tr(\"name\") }\r\n  get hasRefinement() { return this.rarity > 2 }\r\n  get passiveName() { return this.hasRefinement ? this.tr(\"passiveName\") : \"\" }\r\n  get description() { return this.tr(\"description\") }\r\n  passiveDescription = (refineIndex: number) => this.hasRefinement ? this.tr(`passiveDescription.${refineIndex}`) : \"\"\r\n  get img() { return this.sheet.icon }\r\n  get imgAwaken() { return this.sheet.iconAwaken }\r\n  get document() { return this.sheet.document }\r\n  get milestoneLevels(): Array<[number, number]> {\r\n    if (this.hasRefinement) return milestoneLevels as any\r\n    else return lowRarityMilestoneLevels as any\r\n  }\r\n  ambiguousLevel(level: number) {\r\n    if (this.hasRefinement) return ambiguousLevel(level)\r\n    else return ambiguousLevelLow(level)\r\n  }\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string, imgAwaken: string, action?: Displayable): IConditional[\"header\"] => ({\r\n  title: tr(`passiveName`),\r\n  icon: data => <ImgIcon size={2} sx={{ m: -1 }} src={data.get(input.weapon.asc).value < 2 ? img : imgAwaken} />,\r\n  action: action && <SqBadge color=\"success\">{action}</SqBadge>,\r\n})\r\n\r\nexport const conditionaldesc = (tr: (string) => Displayable) =>\r\n  data => tr(`passiveDescription.${data.get(input.weapon.refineIndex).value}`)\r\n","import { Box, CardActionArea, CardContent, Chip, Grid, Skeleton, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useMemo } from 'react';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport ConditionalWrapper from '../Components/ConditionalWrapper';\r\nimport { NodeFieldDisplay } from '../Components/FieldDisplay';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { ascensionMaxLevel } from '../Data/LevelData';\r\nimport WeaponSheet from '../Data/Weapons/WeaponSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { DataContext, dataContextObj, TeamData } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport { computeUIData, dataObjForWeapon } from '../Formula/api';\r\nimport KeyMap, { valueString } from '../KeyMap';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport useTeamData from '../ReactHooks/useTeamData';\r\nimport { ICachedArtifact } from '../Types/artifact';\r\nimport { allSlotKeys, CharacterKey, ElementKey, SlotKey } from '../Types/consts';\r\nimport { ICachedWeapon } from '../Types/weapon';\r\nimport { NodeDisplay } from '../Formula/uiData'\r\n\r\ntype CharacterCardProps = {\r\n  characterKey: CharacterKey | \"\",\r\n  onClick?: (characterKey: CharacterKey) => void,\r\n  onClickHeader?: (characterKey: CharacterKey) => void,\r\n  artifactChildren?: Displayable,\r\n  weaponChildren?: Displayable,\r\n  characterChildren?: Displayable,\r\n  footer?: Displayable,\r\n}\r\nexport default function CharacterCard({ characterKey, artifactChildren, weaponChildren, characterChildren, onClick, onClickHeader, footer }: CharacterCardProps) {\r\n  const { teamData: teamDataContext } = useContext(DataContext)\r\n  const teamData = useTeamData(teamDataContext ? \"\" : characterKey) ?? (teamDataContext as TeamData | undefined)\r\n  const { character, characterSheet, target: data } = teamData?.[characterKey] ?? {}\r\n  const onClickHandler = useCallback(() => characterKey && onClick?.(characterKey), [characterKey, onClick])\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickHandler} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClickHandler],\r\n  )\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!teamData || !character || !characterSheet || !data) return null;\r\n  const dataContextObj: dataContextObj = {\r\n    character,\r\n    data,\r\n    characterSheet,\r\n    mainStatAssumptionLevel: 0,\r\n    teamData,\r\n    characterDispatch\r\n  }\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <DataContext.Provider value={dataContextObj}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n          <Header onClick={!onClick ? onClickHeader : undefined} />\r\n          <CardContent sx={{ width: \"100%\", display: \"flex\", flexDirection: \"column\", gap: 1, flexGrow: 1 }}>\r\n            <Weapon weaponId={character.equippedWeapon} />\r\n            {weaponChildren}\r\n            {/* will grow to fill the 100% height */}\r\n            <Box flexGrow={1} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n              <ArtifactDisplay />\r\n              {artifactChildren}\r\n            </Box>\r\n            <Stats />\r\n            {characterChildren}\r\n          </CardContent>\r\n        </ConditionalWrapper>\r\n        {footer}\r\n      </CardLight>\r\n    </DataContext.Provider>\r\n  </Suspense>\r\n}\r\nfunction Header({ onClick }: { onClick?: (characterKey: CharacterKey) => void }) {\r\n  const { data, characterSheet } = useContext(DataContext)\r\n  const characterKey = data.get(input.charKey).value as CharacterKey\r\n  const characterEle = data.get(input.charEle).value as ElementKey\r\n  const characterLevel = data.get(input.lvl).value\r\n  const constellation = data.get(input.constellation).value\r\n  const ascension = data.get(input.asc).value\r\n  const autoBoost = data.get(input.bonus.auto).value\r\n  const skillBoost = data.get(input.bonus.skill).value\r\n  const burstBoost = data.get(input.bonus.burst).value\r\n\r\n  const tAuto = data.get(input.total.auto).value\r\n  const tSkill = data.get(input.total.skill).value\r\n  const tBurst = data.get(input.total.burst).value\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => characterKey && onClick?.(characterKey)} sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\" }}>{children}</CardActionArea>,\r\n    [onClick, characterKey],\r\n  )\r\n  return <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc} >\r\n    <Box display=\"flex\"\r\n      position=\"relative\"\r\n      className={`grad-${characterSheet.rarity}star`}\r\n      sx={{\r\n        \"&::before\": {\r\n          content: '\"\"',\r\n          display: \"block\", position: \"absolute\",\r\n          left: 0, top: 0,\r\n          width: \"100%\", height: \"100%\",\r\n          opacity: 0.7,\r\n          backgroundImage: `url(${characterSheet.bannerImg})`, backgroundPosition: \"center\", backgroundSize: \"cover\",\r\n        }\r\n      }}\r\n      width=\"100%\" >\r\n      <Box flexShrink={1} sx={{ maxWidth: { xs: \"40%\", lg: \"40%\" } }} alignSelf=\"flex-end\" display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Box\r\n          component=\"img\"\r\n          src={characterSheet.thumbImg}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          maxWidth={256}\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ py: 1, pr: 1 }} display=\"flex\" flexDirection=\"column\" zIndex={1}>\r\n        <Chip label={<Typography variant=\"subtitle1\">{characterSheet.name}</Typography>} size=\"small\" color={characterEle} />\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item sx={{ textShadow: \"0 0 5px gray\" }}>\r\n            <Typography component=\"span\" variant=\"h6\" whiteSpace=\"nowrap\" >Lv. {characterLevel}</Typography>\r\n            <Typography component=\"span\" variant=\"h6\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"h6\"><SqBadge>C{constellation}</SqBadge></Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} flexWrap=\"nowrap\">\r\n          <Grid item>\r\n            <Chip color={autoBoost ? \"info\" : \"secondary\"} label={<strong >{tAuto}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={skillBoost ? \"info\" : \"secondary\"} label={<strong >{tSkill}</strong>} />\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip color={burstBoost ? \"info\" : \"secondary\"} label={<strong >{tBurst}</strong>} />\r\n          </Grid>\r\n        </Grid>\r\n        <Typography mt={1} ><Stars stars={characterSheet.rarity} colored /></Typography>\r\n      </Box>\r\n    </Box>\r\n  </ConditionalWrapper>\r\n}\r\nfunction Weapon({ weaponId }: { weaponId: string }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const weapon = database._getWeapon(weaponId)\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n  const UIData = useMemo(() => weaponSheet && weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]), [weaponSheet, weapon])\r\n  if (!weapon || !weaponSheet || !UIData) return null;\r\n  return <CardDark>\r\n    <Box display=\"flex\" >\r\n      <Box flexShrink={1} maxWidth=\"35%\" display=\"flex\" flexDirection=\"column\" alignContent=\"flex-end\" className={`grad-${weaponSheet.rarity}star`} >\r\n        <Box\r\n          component=\"img\"\r\n          src={weaponSheet.img}\r\n          width=\"100%\"\r\n          height=\"auto\"\r\n          sx={{ mt: \"auto\" }}\r\n        />\r\n      </Box>\r\n      <Box flexGrow={1} sx={{ p: 1 }}>\r\n        <Typography variant=\"body2\" gutterBottom><strong>{weaponSheet?.name}</strong></Typography>\r\n        <Typography variant='subtitle1' sx={{ display: \"flex\", gap: 1 }} gutterBottom>\r\n          <SqBadge color=\"primary\">Lv. {WeaponSheet.getLevelString(weapon as ICachedWeapon)}</SqBadge>\r\n          {weaponSheet.hasRefinement && <SqBadge color=\"info\">R{weapon.refinement}</SqBadge>}\r\n        </Typography>\r\n        <Typography variant='subtitle1' sx={{ display: \"flex\", gap: 1 }} >\r\n          <WeaponStat node={UIData.get(input.weapon.main)} />\r\n          <WeaponStat node={UIData.get(input.weapon.sub)} />\r\n        </Typography>\r\n\r\n      </Box>\r\n    </Box>\r\n  </CardDark>\r\n}\r\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\r\n  if (!node.key) return null\r\n  const val = valueString(node.value, node.unit, !node.unit ? 0 : undefined)\r\n  return <SqBadge color=\"secondary\">{StatIcon[node.key]} {val}</SqBadge>\r\n}\r\nfunction ArtifactDisplay() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { data } = useContext(DataContext)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const artifacts = useMemo(() =>\r\n    allSlotKeys.map(k => [k, database._getArt(data.get(input.art[k].id).value ?? \"\")]),\r\n    [data, database]) as Array<[SlotKey, ICachedArtifact | undefined]>;\r\n  if (!artifactSheets) return null\r\n  return <Grid container spacing={1} >\r\n    {artifacts.map(([key, art]) => {\r\n      if (!art) return null\r\n      const { setKey, slotKey, mainStatKey } = art\r\n      return <Grid item key={key} flexGrow={1}>\r\n        <Chip color=\"secondary\" sx={{ width: \"100%\" }} icon={<ImgIcon src={artifactSheets?.[setKey].slotIcons[slotKey]} size={2.5} />}\r\n          label={<span>{StatIcon[mainStatKey]} {KeyMap.get(mainStatKey)}</span>} />\r\n      </Grid>\r\n    })}\r\n  </Grid>\r\n}\r\nfunction Stats() {\r\n  const { data } = useContext(DataContext)\r\n  return <Box sx={{ width: \"100%\" }} >\r\n    {Object.values(data.getDisplay().basic).map(n => <NodeFieldDisplay key={n.key} node={n} />)}\r\n    {data.get(input.special).key && <Box sx={{ display: \"flex\", gap: 1, alignItems: \"center\" }} >\r\n      <Typography flexGrow={1}><strong>Specialized:</strong></Typography>\r\n      {StatIcon[data.get(input.special).key!]}\r\n      <Typography>{KeyMap.get(data.get(input.special).key!)}</Typography>\r\n    </Box>}\r\n  </Box>\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { initialCharacter } from \"../Util/CharacterUtil\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { defaultInitialWeapon } from \"../Util/WeaponUtil\";\r\n\r\n/**\r\n * Basically a history hook to go to the dedicated character page. Will create the character if it doesn't exist.\r\n * @returns\r\n */\r\nexport default function useCharSelectionCallback() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  const cb = useCallback(\r\n    async (characterKey: CharacterKey) => {\r\n      const character = database._getChar(characterKey)\r\n      // Create a new character + weapon, with linking if char isnt in db.\r\n      if (!character) {\r\n        const newChar = initialCharacter(characterKey)\r\n        database.updateChar(newChar)\r\n        const characterSheet = await CharacterSheet.get(characterKey)\r\n        if (!characterSheet) return\r\n        const weapon = defaultInitialWeapon(characterSheet.weaponTypeKey)\r\n        const weaponId = database.createWeapon(weapon)\r\n        database.setWeaponLocation(weaponId, characterKey)\r\n      }\r\n      history.push(`/character/${characterKey}`)\r\n    },\r\n    [history, database],\r\n  )\r\n  return cb\r\n}\r\n","import { initialBuildSettings } from \"../PageBuild/BuildSetting\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { objectKeyMap } from \"./Util\"\r\n\r\nexport function initialCharacter(key: CharacterKey): ICachedCharacter {\r\n  return {\r\n    key, // the game character this is based off\r\n    level: 1,\r\n    ascension: 0,\r\n    hitMode: \"avgHit\",\r\n    reactionMode: \"\",\r\n    equippedArtifacts: objectKeyMap(allSlotKeys, () => \"\"),\r\n    equippedWeapon: \"\",\r\n    conditional: {},\r\n    bonusStats: {},\r\n    enemyOverride: {},\r\n    buildSettings: initialBuildSettings(),\r\n    talent: {\r\n      auto: 1,\r\n      skill: 1,\r\n      burst: 1,\r\n    },\r\n    infusionAura: \"\",\r\n    constellation: 0,\r\n    team: [\"\", \"\", \"\"],\r\n    compareData: false,\r\n  }\r\n}\r\n","import { useCallback, useContext } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { deepClone } from \"../Util/Util\";\r\n\r\ntype characterEquipWeapon = {\r\n  type: \"weapon\", id: string\r\n}\r\ntype characterReducerBonusStatsAction = {\r\n  type: \"editStats\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerenemyOverrideAction = {\r\n  type: \"enemyOverride\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerResetStatsAction = {\r\n  type: \"resetStats\",\r\n  statKey: string\r\n}\r\ntype characterTeamAction = {\r\n  type: \"team\",\r\n  index: number,\r\n  charKey: CharacterKey | \"\"\r\n}\r\nexport type characterReducerAction = characterEquipWeapon | characterReducerBonusStatsAction | characterReducerenemyOverrideAction | characterReducerResetStatsAction | characterTeamAction | Partial<ICachedCharacter>\r\n\r\nexport default function useCharacterReducer(characterKey: CharacterKey | \"\") {\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  return useCallback((action: characterReducerAction): void => {\r\n    if (!characterKey) return\r\n\r\n    if (\"type\" in action) switch (action.type) {\r\n      case \"weapon\":\r\n        database.setWeaponLocation(action.id, characterKey)\r\n        break\r\n      case \"enemyOverride\": {\r\n        const character = database._getChar(characterKey)!\r\n        const enemyOverride = character.enemyOverride\r\n        const { statKey, value } = action\r\n        if (enemyOverride[statKey] === value) break\r\n        database.updateChar({ ...character, enemyOverride: { ...enemyOverride, [statKey]: value } })\r\n        break\r\n      }\r\n      case \"editStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey, value } = action\r\n\r\n        const bonusStats = deepClone(character.bonusStats)\r\n\r\n        if (bonusStats[statKey] === value) break\r\n        if (!value) delete bonusStats[statKey]\r\n        else bonusStats[statKey] = value\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"resetStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey } = action\r\n\r\n        const bonusStats = character.bonusStats\r\n        delete bonusStats[statKey]\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"team\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { team } = character\r\n\r\n        const { index, charKey: newCharKey } = action\r\n        const oldCharKey = team[index]\r\n        team[index] = newCharKey\r\n\r\n        // move the old char to \"inventory\"\r\n        if (oldCharKey) {\r\n          const oldChar = database._getChar(oldCharKey)\r\n          if (oldChar) database.updateChar({ ...oldChar, team: [\"\", \"\", \"\"] })\r\n        }\r\n\r\n        // unequip new char from its old teammates\r\n        if (newCharKey) {\r\n          const newChar = database._getChar(newCharKey)\r\n          if (newChar) {\r\n            newChar.team.forEach(t => {\r\n              if (!t) return\r\n              const tChar = database._getChar(t)\r\n              tChar && database.updateChar({ ...tChar, team: tChar.team.map(c => c === newCharKey ? \"\" : c) as ICachedCharacter[\"team\"] })\r\n            })\r\n          }\r\n        }\r\n\r\n        // equip new char to new teammates\r\n        team.forEach((t, tind) => {\r\n          if (!t) return\r\n          const newChar = database._getChar(t)\r\n          if (newChar) database.updateChar({ ...newChar, team: [characterKey, ...team].filter((_, i) => i !== tind + 1) as ICachedCharacter[\"team\"] })\r\n        })\r\n\r\n        // update src character\r\n        database.updateChar({ ...character, team })\r\n      }\r\n    } else\r\n      database.updateChar({ ...database._getChar(characterKey)!, ...action })\r\n  }, [characterKey, database])\r\n\r\n}\r\n","import { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { ArtifactSheet } from \"../Data/Artifacts/ArtifactSheet\";\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\";\r\nimport { ArtCharDatabase, DatabaseContext } from \"../Database/Database\";\r\nimport { TeamData } from \"../DataContext\";\r\nimport { common } from \"../Formula\";\r\nimport { dataObjForArtifact, dataObjForCharacter, uiDataForTeam, dataObjForWeapon } from \"../Formula/api\";\r\nimport { Data } from \"../Formula/type\";\r\nimport { ICachedArtifact } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon\";\r\nimport { objectMap } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Data/Weapons/WeaponSheet\";\r\nimport useForceUpdate from \"./useForceUpdate\";\r\nimport { resonanceData } from \"../Data/Resonance\";\r\n\r\ntype TeamDataBundle = {\r\n  team: CharacterKey[],\r\n  teamData: Dict<CharacterKey, Data[]>\r\n  teamBundle: Dict<CharacterKey, CharBundle>\r\n}\r\n\r\nexport default function useTeamData(characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0): TeamData | undefined {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [dbDirty, setDbDirty] = useForceUpdate()\r\n  const [teamDataBundle, setTeamdataBundle] = useState(undefined as TeamDataBundle | undefined)\r\n  useEffect(() => {\r\n    getTeamData(database, characterKey, mainStatAssumptionLevel).then(r => setTeamdataBundle(r))\r\n  }, [dbDirty, characterKey, database, mainStatAssumptionLevel])\r\n\r\n  const { team = [], teamData, teamBundle } = teamDataBundle ?? {}\r\n\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, setDbDirty) : undefined,\r\n    [characterKey, setDbDirty, database])\r\n\r\n  const [t1, t2, t3, t4] = team\r\n  useEffect(() =>\r\n    t1 ? database.followChar(t1, setDbDirty) : undefined,\r\n    [t1, setDbDirty, database])\r\n  useEffect(() =>\r\n    t2 ? database.followChar(t2, setDbDirty) : undefined,\r\n    [t2, setDbDirty, database])\r\n  useEffect(() =>\r\n    t3 ? database.followChar(t3, setDbDirty) : undefined,\r\n    [t3, setDbDirty, database])\r\n  useEffect(() =>\r\n    t4 ? database.followChar(t4, setDbDirty) : undefined,\r\n    [t4, setDbDirty, database])\r\n\r\n  const calcData = useMemo(() => {\r\n    return teamData && uiDataForTeam(teamData, characterKey as CharacterKey)\r\n  }, [teamData, characterKey])\r\n  const data = useMemo(() => {\r\n    if (!calcData || !teamBundle) return\r\n    return objectMap(calcData, (obj, ck) => {\r\n      const { data: _, ...rest } = teamBundle[ck]!\r\n      return { ...obj, ...rest }\r\n    })\r\n  }, [calcData, teamBundle])\r\n\r\n  return data\r\n}\r\n\r\nexport async function getTeamData(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[]):\r\n  Promise<TeamDataBundle | undefined> {\r\n  if (!characterKey) return\r\n  const char1DataBundle = await getCharDataBundle(database, characterKey, mainStatAssumptionLevel, overrideArt)\r\n  if (!char1DataBundle) return\r\n  const team: CharacterKey[] = [characterKey]\r\n  const teamBundle = { [characterKey]: char1DataBundle }\r\n  const teamData: Dict<CharacterKey, Data[]> = { [characterKey]: char1DataBundle.data }\r\n\r\n  await Promise.all(char1DataBundle.character.team.map(async (ck) => {\r\n    if (!ck) return\r\n    const databundle = await getCharDataBundle(database, ck)\r\n    if (!databundle) return\r\n    team.push(ck)\r\n    teamBundle[ck] = databundle\r\n    teamData[ck] = databundle.data\r\n  }))\r\n\r\n  return { team, teamData, teamBundle }\r\n}\r\ntype CharBundle = {\r\n  character: ICachedCharacter,\r\n  weapon: ICachedWeapon,\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  data: Data[]\r\n}\r\nasync function getCharDataBundle(database: ArtCharDatabase, characterKey: CharacterKey | \"\", mainStatAssumptionLevel: number = 0, overrideArt?: ICachedArtifact[])\r\n  : Promise<CharBundle | undefined> {\r\n  if (!characterKey) return\r\n  const character = database._getChar(characterKey)\r\n  if (!character) return\r\n  const weapon = database._getWeapon(character.equippedWeapon)\r\n  if (!weapon) return\r\n  const characterSheet = await CharacterSheet.get(characterKey)\r\n  const weaponSheet = await WeaponSheet.get(weapon.key)\r\n  const artifactSheetsData = await ArtifactSheet.getAllData\r\n  if (!characterSheet || !weaponSheet || !artifactSheetsData) return\r\n  const artifacts = (overrideArt ?? Object.values(character.equippedArtifacts).map(a => database._getArt(a))).filter(a => a) as ICachedArtifact[]\r\n  const data = [\r\n    ...artifacts.map(a => dataObjForArtifact(a, mainStatAssumptionLevel)),\r\n    dataObjForCharacter(character),\r\n    characterSheet.getData(character.elementKey),\r\n    dataObjForWeapon(weapon),\r\n    weaponSheet.data,\r\n    artifactSheetsData,\r\n    common, // NEED TO PUT THIS AT THE END\r\n    resonanceData,\r\n  ]\r\n  return { character, weapon, characterSheet, weaponSheet, data }\r\n}\r\n"],"names":["BootstrapTooltip","styled","className","props","arrow","classes","popper","theme","tooltipClasses","color","palette","common","black","backgroundColor","ConditionalWrapper","condition","wrapper","falseWrapper","children","FieldDisplay","field","fieldContext","component","useContext","DataContext","data","oldData","useMemo","canShow","node","get","dataNode","target","isEmpty","oldNode","oldValue","value","NodeFieldDisplay","suffix","textSuffix","BasicFieldDisplay","v","evalIfFunc","variant","text","width","sx","display","justifyContent","gap","alignItems","toFixed","fixed","unit","icon","key","StatIcon","fieldText","KeyMap","fieldFormulaText","formula","fieldVal","diff","valueString","formulaTextOverlay","placement","title","cursor","faQuestionCircle","FieldDisplayList","List","borderRadius","shape","overflow","margin","contentDark","main","contentDarker","createContext","artifactSheets","then","imp","default","tr","setKey","strKey","ns","key18","allData","as","mergeData","Object","values","map","s","ArtifactSheet","sheet","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","input","this","slots","slotIcons","src","defIconSrc","fontSize","name","rarity","allSlotKeys","icons","set","a","undefined","sheets","grouped","entries","forEach","Math","max","push","artifactSetEffect","setNums","keys","k","parseInt","filter","sn","length","conditionalHeader","img","size","m","action","pcNodes","objectKeyValueMap","allElementsWithPhy","e","greaterEq","sum","i","min","tally","percent","protectiveCanopy","allElements","sections","teamBuff","fields","ffNode","ferventFlames","st","swNode","soothingWaters","condSIPath","condSI","condReadNode","siNode","equal","shatteringIce","conditional","path","header","states","on","highVoltage","iwNodeStam","iwNodeMove","iwNodeCD","impetuousWinds","condERPath","condER","erNodeshield_","erNodeDMG_","erNodeRes_","resonanceSheets","sgt","resonanceData","inferInfoMut","premod","atk_","incHeal_","staminaDec_","moveSPD_","cdRed_","shield_","all_dmg_","geo_enemyRes_","total","critRate_","customStringRead","cond","subKey","trans","typeKey","weaponSheets","WeaponSheet","weaponSheet","weaponData","weaponType","passiveDescription","refineIndex","hasRefinement","iconAwaken","milestoneLevels","lowRarityMilestoneLevels","level","ambiguousLevel","ambiguousLevelLow","weaponKey","w","getWeaponsOfType","fromEntries","getLevelString","weapon","ascensionMaxLevel","ascension","imgAwaken","conditionaldesc","CharacterCard","characterKey","artifactChildren","weaponChildren","characterChildren","onClick","onClickHeader","footer","teamDataContext","teamData","useTeamData","character","characterSheet","onClickHandler","useCallback","actionWrapperFunc","flexGrow","flexDirection","characterDispatch","useCharacterReducer","dataContextObj","mainStatAssumptionLevel","Suspense","fallback","height","minHeight","Header","Weapon","weaponId","equippedWeapon","ArtifactDisplay","Stats","characterEle","characterLevel","constellation","autoBoost","skillBoost","burstBoost","tAuto","tSkill","tBurst","position","content","left","top","opacity","backgroundImage","bannerImg","backgroundPosition","backgroundSize","flexShrink","maxWidth","xs","lg","alignSelf","zIndex","thumbImg","mt","py","pr","label","container","spacing","flexWrap","item","textShadow","whiteSpace","stars","colored","DatabaseContext","database","_getWeapon","usePromise","UIData","computeUIData","dataObjForWeapon","alignContent","p","gutterBottom","refinement","WeaponStat","val","artifacts","_getArt","id","art","mainStatKey","getDisplay","basic","n","useCharSelectionCallback","history","useHistory","cb","_getChar","newChar","hitMode","reactionMode","equippedArtifacts","objectKeyMap","bonusStats","enemyOverride","buildSettings","initialBuildSettings","talent","auto","skill","burst","infusionAura","team","compareData","updateChar","CharacterSheet","defaultInitialWeapon","weaponTypeKey","createWeapon","setWeaponLocation","type","statKey","deepClone","index","newCharKey","charKey","oldCharKey","oldChar","t","tChar","c","tind","_","useForceUpdate","dbDirty","setDbDirty","useState","teamDataBundle","setTeamdataBundle","useEffect","getTeamData","r","teamBundle","followChar","t1","t2","t3","t4","calcData","uiDataForTeam","objectMap","obj","ck","rest","overrideArt","getCharDataBundle","char1DataBundle","Promise","all","databundle","artifactSheetsData","dataObjForArtifact","dataObjForCharacter","getData","elementKey"],"sourceRoot":""}