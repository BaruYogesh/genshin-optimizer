{"version":3,"sources":["Character/CharacterDisplay.tsx"],"names":["InfoDisplay","React","lazy","CharacterDisplayCard","toggle","level","rarity","name","filterReducer","oldFilter","newFilter","CharacterDisplay","props","useState","charIdToEdit","setcharIdToEdit","Object","keys","sortBy","setsortBy","useReducer","elementalFilter","elementalFilterDispatch","weaponFilter","weaponFilterDispatch","newCharacter","setnewCharacter","useForceUpdate","forceUpdate","scrollRef","useRef","useEffect","ReactGA","pageview","saved","loadFromLocalStorage","allElements","includes","allWeaponTypeKeys","database","followAnyChar","allCharacterSheets","usePromise","CharacterSheet","getAll","sortingFunc","ck","_getChar","star","save","saveToLocalStorage","deleteCharacter","useCallback","id","a","get","chararcterSheet","i18next","t","window","confirm","removeChar","editCharacter","setTimeout","current","scrollIntoView","behavior","cancelEditCharacter","charKeyList","_getCharKeys","filter","cKey","elementKey","weaponTypeKey","sort","b","diff","showEditor","Boolean","ref","className","pageKey","modalTitle","text","Suspense","fallback","bg","Body","animation","variant","character","undefined","newBuild","tabName","editable","setCharacterKey","characterKey","onClose","footer","CharDisplayFooter","xs","map","eleKey","onClick","uncoloredEleIcons","weaponType","src","Assets","weaponTypes","type","value","onChange","entries","key","lg","md","Header","icon","faPlus","charKey","header","cardClassName","onDelete","onEdit","as","Link","to","pathname","faLink"],"mappings":"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","file":"static/js/21.72ab9c89.chunk.js","sourcesContent":["import { faLink, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport i18next from 'i18next';\r\nimport React, { lazy, useCallback, useEffect, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, Card, Col, Container, Image, Row, Spinner, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { Link } from 'react-router-dom';\r\nimport Assets from '../Assets/Assets';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport { uncoloredEleIcons } from '../Components/StatIcon';\r\nimport { database } from '../Database/Database';\r\nimport { allElements, allWeaponTypeKeys, CharacterKey } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport CharacterCard from './CharacterCard';\r\nimport CharacterSheet from './CharacterSheet';\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCard = lazy(() => import('./CharacterDisplayCard'))\r\nconst toggle = {\r\n  level: \"Level\",\r\n  rarity: \"Rarity\",\r\n  name: \"Name\"\r\n}\r\n\r\nfunction filterReducer(oldFilter, newFilter) {\r\n  if (newFilter === oldFilter)\r\n    return \"\"\r\n  return newFilter\r\n}\r\n\r\nexport default function CharacterDisplay(props) {\r\n  const [charIdToEdit, setcharIdToEdit] = useState(\"\" as CharacterKey | \"\")\r\n  const [sortBy, setsortBy] = useState(() => Object.keys(toggle)[0])\r\n  const [elementalFilter, elementalFilterDispatch] = useReducer(filterReducer, \"\")\r\n  const [weaponFilter, weaponFilterDispatch] = useReducer(filterReducer, \"\")\r\n  const [newCharacter, setnewCharacter] = useState(false)\r\n  const [, forceUpdate] = useForceUpdate()\r\n  const scrollRef = useRef(null as any)\r\n  useEffect(() => {\r\n    ReactGA.pageview('/character')\r\n    const saved = loadFromLocalStorage(\"CharacterDisplay.state\")\r\n    if (saved) {\r\n      const { charIdToEdit, sortBy, elementalFilter, weaponFilter } = saved\r\n      setcharIdToEdit(charIdToEdit)\r\n      setsortBy(sortBy)\r\n      allElements.includes(elementalFilter) && elementalFilterDispatch(elementalFilter)\r\n      allWeaponTypeKeys.includes(weaponFilter) && weaponFilterDispatch(weaponFilter)\r\n    }\r\n    return database.followAnyChar(forceUpdate)\r\n  }, [forceUpdate])\r\n  const allCharacterSheets = usePromise(CharacterSheet.getAll(), []) ?? {}\r\n  const sortingFunc = {\r\n    level: (ck) => database._getChar(ck)?.level ?? 0,\r\n    rarity: (ck) => allCharacterSheets[ck]?.star\r\n  }\r\n  useEffect(() => {\r\n    const save = { charIdToEdit, sortBy, elementalFilter, weaponFilter }\r\n    saveToLocalStorage(\"CharacterDisplay.state\", save)\r\n  }, [charIdToEdit, sortBy, elementalFilter, weaponFilter])\r\n  const deleteCharacter = useCallback(async (id: CharacterKey) => {\r\n    const chararcterSheet = await CharacterSheet.get(id)\r\n    let name = chararcterSheet?.name\r\n    //use translated string\r\n    if (typeof name === \"object\")\r\n      name = i18next.t(`char_${id}_gen:name`)\r\n\r\n    if (!window.confirm(`Are you sure you want to remove ${name}?`)) return\r\n    database.removeChar(id)\r\n    if (charIdToEdit === id)\r\n      setcharIdToEdit(\"\")\r\n  }, [charIdToEdit, setcharIdToEdit])\r\n\r\n  const editCharacter = useCallback(id => {\r\n    setcharIdToEdit(id)\r\n    setTimeout(() => {\r\n      scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, 500);\r\n  }, [setcharIdToEdit, scrollRef])\r\n\r\n  const cancelEditCharacter = useCallback(() => {\r\n    setcharIdToEdit(\"\")\r\n    setnewCharacter(false)\r\n  }, [setcharIdToEdit])\r\n\r\n  const charKeyList = database._getCharKeys().filter(cKey => {\r\n    if (elementalFilter && elementalFilter !== allCharacterSheets[cKey]?.elementKey) return false\r\n    if (weaponFilter && weaponFilter !== allCharacterSheets[cKey]?.weaponTypeKey) return false\r\n    return true\r\n  }).sort((a, b) => {\r\n    if (sortBy === \"name\") {\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      // names must be equal\r\n      return 0;\r\n    }\r\n    if (sortBy === \"level\") {\r\n      const diff = sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n    } else {\r\n      const diff = sortingFunc[\"rarity\"](b) - sortingFunc[\"rarity\"](a)\r\n      if (diff) return diff\r\n      return sortingFunc[\"level\"](b) - sortingFunc[\"level\"](a)\r\n    }\r\n  })\r\n  const showEditor = Boolean(charIdToEdit || newCharacter)\r\n  return <Container ref={scrollRef} className=\"mt-2\">\r\n    <InfoComponent\r\n      pageKey=\"characterPage\"\r\n      modalTitle=\"Character Management Page Guide\"\r\n      text={[\"Every character will be tested with in-game numbers for maximum accuracy.\",\r\n        \"You can see the details of the calculations of every number.\",\r\n        \"You need to manually enable auto infusion for characters like Choungyun or Noelle.\",\r\n        \"You can change character constellations in both \\\"Character\\\" tab and in \\\"Talents\\\" tab.\",\r\n        \"Modified character Stats show up in yellow.\"]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    {/* editor/character detail display */}\r\n    {showEditor ? <Row className=\"mt-2\"><Col>\r\n      <React.Suspense fallback={<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Body><h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3></Card.Body>\r\n      </Card>}>\r\n        <CharacterDisplayCard\r\n          character={undefined}\r\n          newBuild={undefined}\r\n          tabName={undefined}\r\n          editable\r\n          setCharacterKey={editCharacter}\r\n          characterKey={charIdToEdit}\r\n          onClose={cancelEditCharacter}\r\n          footer={<CharDisplayFooter onClose={cancelEditCharacter} characterKey={charIdToEdit} />}\r\n        />\r\n      </React.Suspense>\r\n    </Col></Row> : null}\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mt-2\">\r\n      <Card.Body className=\"p-2\">\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              {allElements.map(eleKey => <Button key={eleKey} variant={(!elementalFilter || elementalFilter === eleKey) ? eleKey : \"secondary\"} className=\"py-1 px-2 text-white\" onClick={() => elementalFilterDispatch(eleKey)} >\r\n                <h3 className=\"mb-0\">{uncoloredEleIcons[eleKey]}</h3>\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col>\r\n            <ButtonGroup >\r\n              {allWeaponTypeKeys.map(weaponType =>\r\n                <Button key={weaponType} variant={(!weaponFilter || weaponFilter === weaponType) ? \"success\" : \"secondary\"} className=\"py-1 px-2\" onClick={() => weaponFilterDispatch(weaponType)}>\r\n                  <h3 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponType]} className=\"inline-icon\" /></h3></Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <span>Sort by: </span>\r\n            <ToggleButtonGroup type=\"radio\" name=\"level\" value={sortBy} onChange={setsortBy}>\r\n              {Object.entries(toggle).map(([key, text]) =>\r\n                <ToggleButton key={key} value={key} variant={sortBy === key ? \"success\" : \"primary\"}>\r\n                  <h6 className=\"mb-0\">{text}</h6>\r\n                </ToggleButton>)}\r\n            </ToggleButtonGroup>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Row className=\"mt-2\">\r\n      {!showEditor && <Col lg={4} md={6} className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n          <Card.Header className=\"pr-2\">\r\n            <span>Add New Character</span>\r\n          </Card.Header>\r\n          <Card.Body className=\"d-flex flex-column justify-content-center\">\r\n            <Row className=\"d-flex flex-row justify-content-center\">\r\n              <Col xs=\"auto\">\r\n                <Button onClick={() => setnewCharacter(true)}>\r\n                  <h1><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></h1>\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>}\r\n      {charKeyList.map(charKey =>\r\n        <Col key={charKey} lg={4} md={6} className=\"mb-2\">\r\n          <CharacterCard\r\n            header={undefined}\r\n            cardClassName=\"h-100\"\r\n            characterKey={charKey}\r\n            onDelete={deleteCharacter}\r\n            onEdit={editCharacter}\r\n            footer\r\n          />\r\n        </Col>)}\r\n    </Row>\r\n  </Container>\r\n}\r\nfunction CharDisplayFooter({ onClose, characterKey }) {\r\n  return <Row>\r\n    <Col>\r\n      <Button variant=\"info\" as={Link} to={{ pathname: \"/flex\", characterKey } as any}><FontAwesomeIcon icon={faLink} /> Share Character</Button>\r\n    </Col>\r\n    <Col xs=\"auto\">\r\n      <Button variant=\"danger\" onClick={onClose}>Close</Button>\r\n    </Col>\r\n  </Row>\r\n}"],"sourceRoot":""}