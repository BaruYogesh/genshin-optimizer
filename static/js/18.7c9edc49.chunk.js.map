{"version":3,"sources":["ReactHooks/useCharacterReducer.tsx","Components/FieldDisplay.tsx","Components/CustomNumberInput.tsx","Components/Character/CharacterDropdownButton.tsx","Components/BootstrapTooltip.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Components/ExpandButton.tsx","Components/Character/ThumbSide.tsx","Components/Character/LocationName.tsx","Artifact/RollProbability.ts","Artifact/PercentBadge.tsx","Components/TextButton.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Artifact/ArtifactCard.tsx","Components/Weapon/WeaponSelectionModal.tsx","Weapon/WeaponCard.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/EnemyEditor.tsx","Components/HitModeEditor.tsx","Weapon/WeaponStatsCard.tsx","Weapon/WeaponDisplayCard.tsx","Components/FormulaCalcCard.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx"],"names":["useCharacterReducer","characterKey","database","useContext","DatabaseContext","useCallback","action","type","setWeaponLocation","id","character","_getChar","statKey","value","bonusStats","overrideStatKeys","includes","characterBaseStats","updateChar","FieldDisplay","field","buildContext","newBuild","equippedBuild","compareBuild","build","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","parseInt","toFixed","diff","color","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","title","component","sx","cursor","ml","icon","faQuestionCircle","unit","display","justifyContent","FieldDisplayList","styled","List","theme","borderRadius","shape","overflow","margin","backgroundColor","palette","contentDark","main","contentDarker","StyledInputBase","InputBase","primary","transition","dark","CustomNumberInputButtonGroupWrapper","shouldForwardProp","prop","padding","border","width","height","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","CustomNumberInput","onChange","disabled","float","props","useState","number","setNumber","focused","setFocus","parseFunc","parseFloat","onBlur","onFocus","useEffect","onInputChange","e","target","onKeyDOwn","key","aria-label","onKeyDown","CharacterDropdownButton","inventory","noUnselect","filter","t","useTranslation","characterSheets","usePromise","CharacterSheet","getAll","characterSheet","get","characterKeys","_getCharKeys","ck","sort","name","startIcon","thumbImg","src","thumbImgSide","onClick","selected","variant","noWrap","CharacterMenuItemArray","selectedCharacterKey","map","BootstrapTooltip","className","arrow","classes","popper","tooltipClasses","common","black","tooltip","ConditionalSelector","conditional","conditionalValue","setConditional","stats","conditionalNum","conditionalStateKey","state","states","Object","values","text","evalIfFunc","maxStack","badge","SqBadge","DropdownButton","size","MenuItem","Divider","entries","flatMap","i","stateKey","condial","Array","keys","v","stack","Button","CheckBox","CheckBoxOutlineBlank","ConditionalDisplay","characterDispatch","Conditional","resolve","undefined","conditionalStats","fields","conditionalFields","displayFields","statsToFields","condV","layeredAssignment","conditionalValues","deletePropPath","objClearEmpties","CardDark","CardContent","m","DocumentDisplay","sections","section","talentText","Box","pb","mb","length","ExpandButton","expand","other","transform","marginLeft","transitions","create","duration","shortest","ThumbSide","lineHeight","verticalAlign","marginTop","spacing","marginRight","marginBottom","LocationName","location","nameWIthIcon","allWeights","fWeight","hp","atk","def","hp_","atk_","def_","eleMas","enerRech_","critRate_","critDMG_","pFillerSeq","populatePFillerSeq","prefix","prob","sumProb","current","3","4","6","cnr","fill","_","n","result","r","push","pNExtra","last","next","forEach","x","array","accu","reduce","a","b","probability","artifact","_target","rarity","NaN","level","substats","required","Set","numFillerSlots","mainStatKey","maxLevel","ArtifactMainStatsData","delete","has","numUpgradeRolls","Artifact","rollsRemaining","Math","max","ceil","maxSubstatValues","minTotalUpgrades","targetEntries","filler","minUpgrade","reverse","additionalUpgradeRolls","targetIndex","M","rolls","extra","pExtra","_remaining","remaining","pRolls","pow","index","mainStat","mainStatRatio","pFillerRolls","numUnusedSubstats","pSuffixFillerSeq","ratio","requiredCount","total","crawlObject","obj","path","currentCount","sum","calculatePFillerRolls","PercentBadge","valid","clamp","floor","badgeColor","DisabledButton","secondary","TextButton","children","DisplayStatDiff","label","val","oldVal","hasBonus","oldText","diffText","valueText","StatDisplay","isArray","Formula","characterHP","characterDEF","characterATK","weaponATK","Stat","getStatUnit","fixedUnit","StatIcon","getStatName","labelVariant","hasBonusStats","FlexButtonGroup","ButtonGroup","StatInput","placeholder","defaultValue","onValueChange","percent","onReset","restProps","whiteSpace","flexBasis","flexGrow","px","inputProps","textAlign","endAdornment","allSubstatFilter","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","probabilityFilter","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","editable","localDatabase","art","lock","slotKey","exclude","mainStatLevel","min","levelVariant","mainStatVal","valueStringWithUnit","mainStatValue","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","slotName","getSlotName","slotDesc","getSlotDesc","slotDescTooltip","faInfoCircle","setEffects","setDescTooltip","setNumKey","setNum","setEffectDesc","fallback","minHeight","flexDirection","pt","pr","alignItems","pl","updateArt","container","flexWrap","item","stars","colored","maxWidth","mt","alignSelf","image","slotIcons","stat","numRolls","rollColor","efficiency","effOpacity","statName","mr","opacity","my","xs","flexShrink","charKey","setArtLocation","faEdit","faBan","faChartLine","faTrashAlt","WeaponSelectionModal","show","onHide","onSelect","propWeaponFilter","weaponFilter","weaponSheets","WeaponSheet","setWeaponfilter","weaponIdList","allWeaponKeys","wKey","weaponType","open","onClose","py","weaponKey","weaponSheet","lg","md","img","Assets","weaponTypes","large","WeaponCard","weaponId","canEquip","databaseWeapon","updateDatabaseWeapon","followWeapon","weapon","cs","weaponTypeKey","actionWrapperFunc","equipOnChar","ascension","refinement","weaponMainVal","getMainStatValue","weaponSubKey","getSubStatKey","weaponSubVal","getSubStatValue","statMap","passiveName","imgAwaken","condition","wrapper","avatar","fontSize","titleTypographyProps","updateWeapon","ascensionMaxLevel","alignContent","statVal","SetEffectDisplay","setEffectText","setStats","setNumStats","setStatsFields","document","setEffectDocument","StatDisplayComponent","sheets","statsDisplayKeys","sectionKey","sectionValues","header","getFormulaTargetsDisplayHeading","characterEle","sm","JSON","stringify","EnemyExpandCard","expanded","setexpanded","toggle","getStatValueWithBonus","allElements","element","EnemyResText","aria-expanded","p","in","timeout","unmountOnExit","EnemyEditor","immune","resKey","content","uncoloredEleIcons","bsProps","charBaseStats","fullWidth","href","rel","bgcolor","contentLight","getStatNameRaw","enemyLevel","eleKey","immunityStatKey","elementImmunity","faCheckSquare","faSquare","infusionVals","pyro","cryo","InfusionAuraDropdown","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","exclusive","baseColor","hydro","HitModeToggle","hitMode","DamageOptionsCard","WeaponStatsCard","statsVals","s","Typography","WeaponDisplayCard","propWeaponId","charData","footer","useForceUpdate","databaseToken","onDatabaseUpdate","buildContextObj","_getWeapon","weaponDispatch","newWeapon","setLevel","findIndex","ascenML","setAscension","lowerAscension","refineIndex","ws","initialWeaponFilter","showModal","setshowModal","CardLight","Grid","k","startAdornment","ambiguousLevel","milestoneLevels","lv","as","lvlstr","Lock","LockOpen","CloseButton","SwapBtn","onChangeId","substatKey","weaponDisplayMainVal","weaponDisplaySubVal","weaponPassiveName","weaponBonusStats","gap","minWidth","description","process","getLevelString","gutterBottom","passiveDescription","Provider","setCompareBuild","setShow","close","clickHandler","weapons","dbWeapon","SwapHoriz","ModalWrapper","ImgIcon","FormulaCalcCard","ExpandMore","Collapse","CalculationDisplay","displayStatKeys","getDisplayStatKeys","Skeleton","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","Boolean","Accordion","AccordionSummary","expandIcon","printStat","AccordionDetails","subKey","formulaField","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","CharacterArtifactPane","history","useHistory","statKeys","edit","artid","pathname","artToEditId","artifactSheets","followAnyArt","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","objectFromKeyMap","allSlotKeys","SolidToggleButtonGroup","ToggleButton","Card","warning","setToSlots","setNumKeyArr","CharacterOverviewPane","constellation","tlvl","elementKey","CardMedia","cardImg","star","tKey","Badge","badgeContent","skillBoost","burstBoost","overlap","anchorOrigin","vertical","horizontal","getTalentOfKey","constellationName","equippedWeapon","MainStatsCards","additionalKeys","editStatKeys","otherStatKeys","ele","miscStatkeys","resetString","statBreakpoint","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","StatDisplayCard","columnSpacing","rowSpacing","editContent","characterStatKeys","defVal","round","getBase","getStatNameWithPercent","setedit","faSave","CharacterTalentPane","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","style","onClickTitle","ReactionComponents","superconduct_hit","sKey","electro","electrocharged_hit","overloaded_hit","pyro_swirl_hit","swirlEleToDisplay","setele","shattered_hit","information","crystalize_hit","crystalizeEleToDisplay","eleInterArr","ElementToReactionKeys","Ele","anemo","geo","talentLimits","talent","actionWrapeprFunc","CardActionArea","levelBoost","talentLvlKey","newTalentLevelKey","talentStats","getTalentStats","talentStatsFields","statsEle","talentSheet","ConditionalWrapper","TabPanel","role","hidden","aria-labelledby","CharacterDisplayCard","setCharacterKey","propNewBuild","tabName","initialCharacter","followChar","deepClone","tab","settab","onTab","calculateBuild","CharSelectDropdown","Tabs","Tab","HeaderIconDisplay","CharacterSelectionModal","ElementalData","talents"],"mappings":"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","file":"static/js/18.7c9edc49.chunk.js","sourcesContent":["import { useCallback, useContext } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { CharacterKey } from \"../Types/consts\";\r\nimport { characterBaseStats, overrideStatKeys } from \"../Util/StatUtil\";\r\n\r\ntype characterEquipWeapon = {\r\n  type: \"weapon\", id: string\r\n}\r\ntype characterReducerBonusStatsAction = {\r\n  type: \"editStats\",\r\n  statKey: string\r\n  value: any | undefined\r\n}\r\ntype characterReducerResetStatsAction = {\r\n  type: \"resetStats\",\r\n  statKey: string\r\n}\r\nexport type characterReducerAction = characterEquipWeapon | characterReducerBonusStatsAction | characterReducerResetStatsAction | Partial<ICachedCharacter>\r\n\r\nexport default function useCharacterReducer(characterKey: CharacterKey) {\r\n  const database = useContext(DatabaseContext)\r\n\r\n  return useCallback((action: characterReducerAction): void => {\r\n    if (!characterKey) return\r\n\r\n    if (\"type\" in action) switch (action.type) {\r\n      case \"weapon\":\r\n        database.setWeaponLocation(action.id, characterKey)\r\n        break\r\n      case \"editStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey, value } = action\r\n\r\n        const bonusStats = character.bonusStats\r\n\r\n        if (bonusStats[statKey] === value) return\r\n        if (overrideStatKeys.includes(statKey)) {\r\n          if ((characterBaseStats(character)[statKey] ?? 0) === value)\r\n            delete bonusStats[statKey]\r\n          else\r\n            bonusStats[statKey] = value\r\n        } else {\r\n          if (value)\r\n            bonusStats[statKey] = value\r\n          else\r\n            delete bonusStats[statKey]\r\n        }\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n      case \"resetStats\": {\r\n        const character = database._getChar(characterKey)!\r\n        const { statKey } = action\r\n\r\n        const bonusStats = character.bonusStats\r\n        delete bonusStats[statKey]\r\n\r\n        database.updateChar({ ...character, bonusStats })\r\n        break\r\n      }\r\n    } else\r\n      database.updateChar({ ...database._getChar(characterKey)!, ...action })\r\n  }, [characterKey, database])\r\n\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, List, ListItem, styled, Typography } from \"@mui/material\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { buildContext } from \"../Build/Build\";\r\nimport Character from \"../Character/Character\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport BootstrapTooltip from \"./BootstrapTooltip\";\r\nimport ColorText from \"./ColoredText\";\r\n\r\nexport default function FieldDisplay({ field }: { field: IFieldDisplay }) {\r\n  const { newBuild, equippedBuild, compareBuild } = useContext(buildContext)\r\n  const build = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => build ? field?.canShow?.(build) : false, [field, build])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", build)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      //compareAgainstEquipped\r\n      if (compareBuild && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <ColorText color={diff > 0 ? \"success\" : \"error\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</ColorText> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareBuild, fixedVal, equippedBuild, field, build])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", build), [field, build])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", build), [field, build])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build)\r\n    return fieldFormulaText ? <BootstrapTooltip placement=\"top\" title={<Typography>{fieldFormulaText}</Typography>}>\r\n      <Box component=\"span\" sx={{ cursor: \"help\", ml: 1 }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n    </BootstrapTooltip> : null\r\n  }, [field, build])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", build), [field, build])\r\n\r\n  if (!canShow) return null\r\n  return <ListItem sx={{ display: \"flex\", justifyContent: \"space-between\" }}  >\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <Typography color={`${fieldVariant}.main`}>{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</Typography>\r\n  </ListItem>\r\n}\r\nexport const FieldDisplayList = styled(List)(({ theme }) => ({\r\n  borderRadius: theme.shape.borderRadius,\r\n  overflow: \"hidden\",\r\n  margin: 0,\r\n  '> .MuiListItem-root:nth-of-type(even)': {\r\n    backgroundColor: theme.palette.contentDark.main\r\n  },\r\n  '> .MuiListItem-root:nth-of-type(odd)': {\r\n    backgroundColor: theme.palette.contentDarker.main\r\n  },\r\n}));","import { InputBase, InputProps, styled } from '@mui/material'\r\nimport { useCallback, useEffect, useMemo, useState } from 'react'\r\ntype props = Omit<InputProps, \"onChange\"> & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\n\r\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  transition: \"all 0.5s ease\",\r\n  \"&:hover\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-focused\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  },\r\n}))\r\n\r\n// wrap the Input with this when using the input in a buttongroup\r\nexport const CustomNumberInputButtonGroupWrapper = styled(\"button\", {\r\n  shouldForwardProp: (prop) => ![\"fullWidth\", \"disableRipple\", \"disableFocusRipple\", \"disableElevation\"].includes(prop as string)\r\n})(({ theme }) => ({\r\n  backgroundColor: theme.palette.primary.main,\r\n  padding: 0,\r\n  overflow: \"hidden\",\r\n  border: \"none\",\r\n  borderRadius: theme.shape.borderRadius,\r\n  \"& div\": {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  \"&.MuiButtonGroup-grouped:not(:last-of-type)\": {\r\n    borderTopRightRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n  },\r\n  \"&.MuiButtonGroup-grouped:not(:first-of-type)\": {\r\n    borderTopLeftRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n  },\r\n}))\r\n\r\nexport default function CustomNumberInput({ value = 0, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [number, setNumber] = useState(value)\r\n  const [focused, setFocus] = useState(false)\r\n  const parseFunc = useMemo(() => float ? parseFloat : parseInt, [float],)\r\n  const onBlur = useCallback(\r\n    () => {\r\n      onChange(number)\r\n      setFocus(false)\r\n    },\r\n    [onChange, number, setFocus],\r\n  )\r\n  const onFocus = useCallback(\r\n    () => {\r\n      setFocus(true)\r\n    },\r\n    [setFocus],\r\n  )\r\n  useEffect(() => setNumber(value), [value, setNumber]) // update value on value change\r\n  const onInputChange = useCallback(e => setNumber(parseFunc(e.target.value) || 0), [setNumber, parseFunc],)\r\n  const onKeyDOwn = useCallback(e => e.key === \"Enter\" && onBlur(), [onBlur],)\r\n  return <StyledInputBase\r\n    value={(focused && !number) ? \"\" : number}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={onInputChange}\r\n    onBlur={onBlur}\r\n    onFocus={onFocus}\r\n    disabled={disabled}\r\n    onKeyDown={onKeyDOwn}\r\n    {...props}\r\n  />\r\n}","import { BusinessCenter, Replay } from \"@mui/icons-material\";\r\nimport { Divider, ListItemIcon, MenuItem, Typography } from \"@mui/material\";\r\nimport { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport { DatabaseContext } from \"../../Database/Database\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { CharacterKey } from \"../../Types/consts\";\r\nimport DropdownButton, { DropdownButtonProps } from \"../DropdownMenu/DropdownButton\";\r\nimport ThumbSide from \"./ThumbSide\";\r\n\r\nexport type CharacterDropdownButtonProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  value: CharacterKey | \"\"\r\n  onChange: (ck: CharacterKey | \"\") => void\r\n  filter?: (cs: CharacterSheet) => boolean\r\n  inventory?: boolean\r\n  noUnselect?: boolean\r\n}\r\n\r\nexport default function CharacterDropdownButton({ value, onChange, inventory = false, noUnselect = false, filter = () => true, ...props }: CharacterDropdownButtonProps) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const database = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  const characterSheet = usePromise(CharacterSheet.get(value), [value])\r\n  const characterKeys = database._getCharKeys().filter(ck => characterSheets?.[ck] && filter(characterSheets[ck])).sort()\r\n  return <DropdownButton\r\n    {...props}\r\n    title={characterSheet?.name ?? (inventory ? t`inventory` : t`unselect`)}\r\n    color={value ? \"success\" : \"primary\"}\r\n    startIcon={characterSheet?.thumbImg ? <ThumbSide src={characterSheet.thumbImgSide} /> : (inventory ? <BusinessCenter /> : <Replay />)}>\r\n    {!noUnselect && (inventory ? <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`inventory`}\r\n      </Typography>\r\n    </MenuItem> : <MenuItem onClick={() => onChange(\"\")} selected={value === \"\"} disabled={value === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {t`unselect`}\r\n      </Typography>\r\n    </MenuItem>)}\r\n    {!noUnselect && <Divider key=\"div\" />}\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, characterKeys, onChange, value)}\r\n  </DropdownButton >\r\n}\r\n\r\n// Returning an array instead of Fragment because MUI Menu doesn't like fragments.\r\nexport function CharacterMenuItemArray(characterSheets: StrictDict<CharacterKey, CharacterSheet>, characterKeys: CharacterKey[], onChange: (ck: CharacterKey) => void, selectedCharacterKey: CharacterKey | \"\" = \"\") {\r\n  return characterKeys.map(characterKey =>\r\n    <MenuItem onClick={() => onChange(characterKey)} key={characterKey} selected={selectedCharacterKey === characterKey} disabled={selectedCharacterKey === characterKey} >\r\n      <ListItemIcon>\r\n        <ThumbSide src={characterSheets[characterKey].thumbImgSide} />\r\n      </ListItemIcon>\r\n      <Typography variant=\"inherit\" noWrap>\r\n        {characterSheets?.[characterKey]?.name}\r\n      </Typography>\r\n    </MenuItem>)\r\n}","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material';\r\nimport { Button, Divider, MenuItem } from '@mui/material';\r\nimport React from 'react';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled = false, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled?: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <SqBadge color={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</SqBadge>\r\n    return <DropdownButton size=\"small\" title={<span>{name} {badge}</span>} disabled={disabled}>\r\n      <MenuItem onClick={() => setConditional([0])} selected={conditionalNum === 0} disabled={conditionalNum === 0}>\r\n        <span>Not Active</span>\r\n      </MenuItem>\r\n      <Divider />\r\n      {Object.entries(conditional.states).flatMap(([stateKey, condial]: any, i) =>\r\n        [...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n          <MenuItem key={stateKey + i} onClick={() => setConditional([stack, stateKey])} selected={conditionalStateKey === stateKey && conditionalNum === stack} disabled={conditionalStateKey === stateKey && conditionalNum === stack} >\r\n            {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n          </MenuItem>)\r\n      )}\r\n    </DropdownButton>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <SqBadge color={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</SqBadge>\r\n      return <DropdownButton size=\"small\" title={<span>{name} {badge}</span>} disabled={disabled}>\r\n        <MenuItem onClick={() => setConditional([0])} selected={conditionalNum === 0} disabled={conditionalNum === 0}>\r\n          <span>Not Active</span>\r\n        </MenuItem>\r\n        <Divider />\r\n        {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <MenuItem key={stack} onClick={() => setConditional([stack])} selected={conditionalNum === stack} disabled={conditionalNum === stack}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </MenuItem>)}\r\n      </DropdownButton>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"small\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled} startIcon={conditionalNum ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        {name}\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { CardContent } from \"@mui/material\"\r\nimport { useCallback, useContext, useMemo } from \"react\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport useCharacterReducer from \"../ReactHooks/useCharacterReducer\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\r\n\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  characterKey: CharacterKey\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, characterKey }: ConditionalDisplayProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <CardDark>\r\n    <CardContent>\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </CardContent>\r\n    <FieldDisplayList sx={{ m: 0 }}>\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n  </CardDark>\r\n}","import { Box } from \"@mui/material\"\r\nimport { useContext } from \"react\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport FieldDisplay, { FieldDisplayList } from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterKey: CharacterKey,\r\n}\r\nexport default function DocumentDisplay({ sections, characterKey }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div>{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <Box key={\"section\" + i} sx={{\r\n      pb: -1,\r\n      \"& > *\": {\r\n        mb: 1\r\n      }\r\n    }}>\r\n      <div>{talentText}</div>\r\n      {fields.length > 0 && <FieldDisplayList>\r\n        {fields?.map?.((field, i) => <FieldDisplay key={i} field={field} />)}\r\n      </FieldDisplayList>}\r\n      {!!section.conditional && <ConditionalDisplay conditional={section.conditional} characterKey={characterKey} />}\r\n    </Box>\r\n  })}</div>\r\n}\r\n","import { IconButton, IconButtonProps, styled } from \"@mui/material\";\r\n\r\ninterface ExpandMoreProps extends IconButtonProps {\r\n  expand: boolean;\r\n}\r\nconst ExpandButton = styled((props: ExpandMoreProps) => {\r\n  const { expand, ...other } = props;\r\n  return <IconButton {...other} />;\r\n})(({ theme, expand }) => ({\r\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\r\n  marginLeft: 'auto',\r\n  transition: (theme as any).transitions.create('transform', {\r\n    duration: (theme as any).transitions.duration.shortest,\r\n  }),\r\n}));\r\n\r\nexport default ExpandButton","import { styled } from \"@mui/system\";\r\n\r\nconst ThumbSide = styled(\"img\")(({ theme }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `2.3em`,\r\n  lineHeight: 1,\r\n  verticalAlign: \"text-bottom\",\r\n  marginTop: theme.spacing(-3),\r\n  marginLeft: theme.spacing(-1.25),\r\n  marginRight: theme.spacing(-1),\r\n  marginBottom: theme.spacing(-1),\r\n}))\r\n\r\nexport default ThumbSide","import { BusinessCenter } from \"@mui/icons-material\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../../Character/CharacterSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\n\r\nexport default function LocationName({ location }) {\r\n  const { t } = useTranslation(\"ui\");\r\n  const characterSheet = usePromise(CharacterSheet.get(location ?? \"\"), [location])\r\n  return <Typography component=\"span\">\r\n    {characterSheet?.name ? characterSheet.nameWIthIcon : <span><BusinessCenter sx={{ verticalAlign: \"text-bottom\" }} /> {t`inventory`}</span>}\r\n  </Typography>\r\n\r\n}","import { IArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact'\r\nimport { crawlObject, layeredAssignment } from '../Util/Util'\r\nimport Artifact from './Artifact'\r\nimport ArtifactMainStatsData from './artifact_main_gen.json'\r\n\r\n// We separate rolls into \"filler rolls\" that occurs when there are less than 4 substats,\r\n// and \"upgrade rolls\" that occurs when all 4 substats are added. They have different\r\n// probability distribution and require separate consideration.\r\n\r\n// Notations for the remainder of this file.\r\n//\r\n// i, j, k := substat\r\n// E(i) := Extra substat that rolls into substat i\r\n// T(i) := Targetted (extra) substat for substat i\r\n// Nf(i) := # of filler roll into substat i (0 <= Nfi <= 1)\r\n// Nu(i) := # of upgrade rolls into substat i\r\n//\r\n// E := { E1, E2, ... }\r\n// T := { T1, T2, ... }\r\n// N(i) := Nf(i) + Nu(i)\r\n// Nf := Nf(1) + Nf(2) + ...\r\n// Nu := Nu(1) + Nu(2) + ...\r\n//\r\n// For example, if the artifact has 14 atk, and the target atk is 30,\r\n// in a scenario where we roll 2 rolls of 16 and 18 into atk, then\r\n// \r\n// i = atk, E(atk) = 16 + 18, T(atk) = 30 - 14, Nf(atk) = 0 roll, Nu(atk) = 2 rolls\r\n\r\nconst allWeights = [3, 4, 6] as const\r\ntype Weight = typeof allWeights[number]\r\n\r\n/**\r\n * Weight used when rolling a filler roll. Each roll will choose from available\r\n * substats (excluding main stat and existing substats) with these weights.\r\n */\r\nconst fWeight: StrictDict<SubstatKey, Weight> = {\r\n  hp: 6, atk: 6, def: 6,\r\n  hp_: 4, atk_: 4, def_: 4, eleMas: 4, enerRech_: 4,\r\n  critRate_: 3, critDMG_: 3\r\n}\r\n\r\n/**\r\n * Probability of observing a filler sequence with particular weights\r\n * \r\n * pFillerSeq[w0][w1][w2][...] = Pr [ fWeight[main stat] = w0, fWeight[substat1] = w1, fWeight[substat2] = w2, ... ]\r\n */\r\nconst pFillerSeq: Dict<0 | Weight, Dict<Weight, Dict<Weight, Dict<Weight, Dict<Weight, number>>>>> = {}\r\nfunction populatePFillerSeq(prefix: (0 | Weight)[], prob: { [key in Weight]: number }, sumProb: number, current: number) {\r\n  if (prefix.length === 5) {\r\n    layeredAssignment(pFillerSeq, prefix as any, current)\r\n    return\r\n  }\r\n\r\n  for (const i of allWeights)\r\n    if (prob[i] > 0)\r\n      populatePFillerSeq([...prefix, i], { ...prob, [i]: prob[i] - i }, sumProb - i, current * prob[i] / sumProb)\r\n}\r\npopulatePFillerSeq([0], { 3: 6, 4: 20, 6: 18 }, 44, 1)\r\n\r\npopulatePFillerSeq([3], { 3: 3, 4: 20, 6: 18 }, 41, 1)\r\npopulatePFillerSeq([4], { 3: 6, 4: 16, 6: 18 }, 40, 1)\r\npopulatePFillerSeq([6], { 3: 6, 4: 20, 6: 12 }, 38, 1)\r\n\r\n/**\r\n * cnr[n][r] = C(n, r) = n! / (r!(n-r)!)\r\n * \r\n * 0 <= n <= 5; 0 <= r <= n\r\n */\r\nconst cnr = Array(6).fill(0).map((_, n) => {\r\n  const result = [1]\r\n  let r = 0, value = 1\r\n  while (++r <= n) {\r\n    value *= n - r + 1\r\n    value /= r\r\n    result.push(value)\r\n  }\r\n\r\n  return result\r\n})\r\n\r\n/** \r\n * pNExtra[n][i] = Pr[ E(k) >= (i - 7n) * alpha(i) | N(k) = n ]\r\n *               = Pr[ (E(k) / alpha(k)) - 7n >= i | N(k) = n ]\r\n * \r\n * 0 <= n <= 5; 0 <= i < 3*n + 1\r\n */\r\nconst pNExtra = [[1]]\r\nwhile (pNExtra.length < 6) {\r\n  const last = pNExtra[pNExtra.length - 1]\r\n  const next = Array(last.length + 3).fill(0)\r\n  last.forEach((value, i) => {\r\n    for (const j of [0, 1, 2, 3]) {\r\n      next[i + j] += value\r\n    }\r\n  })\r\n\r\n  pNExtra.push(next.map(x => x / 4))\r\n}\r\nfor (const array of pNExtra) {\r\n  let accu = array.reduce((a, b) => a + b)\r\n  array.forEach((x, i, array) => {\r\n    array[i] = accu\r\n    accu -= x\r\n  })\r\n}\r\n\r\n/** Probability that `artifact` will have at least `target` stats at max level */\r\nfunction probability(artifact: IArtifact, _target: { [key in SubstatKey]?: number }): number {\r\n  if (artifact.rarity <= 2) return NaN // Doesn't work with 1* and 2* should we decide to add them\r\n\r\n  const { rarity, level, substats } = artifact\r\n\r\n  // `target = target - mainstat - substat` to find the extra substats we need\r\n  // Also count filler rolls (4 - # of substats) while we're at it\r\n  const target = { ..._target }, required = new Set(Object.keys(target))\r\n  let numFillerSlots = 0\r\n  {\r\n    const key = artifact.mainStatKey\r\n    if (key in target) {\r\n      const maxLevel = rarity * 4 // Note: this formula doesn't work with 1* and 2* artifacts\r\n      const maxLevelMainStat = ArtifactMainStatsData[rarity][key][maxLevel]\r\n      if (maxLevelMainStat < target[key]!) return 0 // Main stat won't meet the target\r\n\r\n      delete target[key]\r\n      required.delete(key as SubstatKey)\r\n    }\r\n  }\r\n  for (const { key, value } of substats) {\r\n    if (key) {\r\n      if (required.has(key)) {\r\n        required.delete(key)\r\n        if (target[key]! > value)\r\n          target[key]! -= value\r\n        else delete target[key] // Requirement already met\r\n      }\r\n    } else numFillerSlots += 1\r\n  }\r\n  numFillerSlots += 4 - substats.length\r\n\r\n  if (required.size > numFillerSlots || Object.keys(target).length > 4) return 0 // Not enough filler rolls\r\n\r\n  const numUpgradeRolls = Artifact.rollsRemaining(level, rarity) - numFillerSlots\r\n\r\n  // normalize `target`\r\n  for (const [key, value] of Object.entries(target))\r\n    target[key] = Math.max(Math.ceil(10 * value / Artifact.maxSubstatValues(key, rarity)), 1)\r\n\r\n  let minTotalUpgrades = 0\r\n  const targetEntries = Object.entries(target).map(([key, target]) => {\r\n    const filler = required.has(key) ? 1 : 0 // Nf(i)\r\n    const minUpgrade = Math.ceil(target / 10) - filler // Minimum # of upgrade rolls to ensure E(i) > T(i)\r\n    minTotalUpgrades += minUpgrade\r\n    return { target, filler, minUpgrade }\r\n  }).reverse()\r\n\r\n  if (minTotalUpgrades > numUpgradeRolls) return 0 // Not enough upgrade rolls\r\n\r\n  /**\r\n   * The optimization trick here is to write Pr[ E > T | N ] using a recursive relation. Let\r\n   * \r\n   *  f(n, t) = Pr[ E(i) >= t | N(i) = n ]\r\n   *  g(k, n) = Pr[ E(1) >= T(1), E(2) >= T(2), ..., E(k) >= T(k) | Nu - Nu(1) - Nu(2) - ... - Nu(k) = n ]\r\n   *  h(n, m, M) = Pr[ Nu(k) = m | 0 <= Nu(k) <= n, |K| = M ]\r\n   * \r\n   * Then\r\n   * \r\n   *  Pr [ E > T | N ] = Pr[ Nf(k) = I(k requires filler) for all k | N ] sum{0 <= n <= Nu} g(|K|, n)\r\n   * \r\n   * where I(X) is the indicator function, and |K| is the number of substat constraints, and\r\n   * \r\n   *  f(n, e * alpha(i)) = pNExtra[n][ e - 7n ]\r\n   *  h(n, m, M) = C(n, m) (M-1)^(n - m) M^(-n) = pRollInto(n, m, M)\r\n   *  g(0, N) = 1\r\n   *  g(0, n) = 0 for n != N\r\n   * \r\n   *  g(k + 1, n) = sum{0 <= m <= n} g(k, n + m) f(m + Nf(k), T(k)) h(n + m, m, |K| - k)\r\n   */\r\n\r\n  // At this point,\r\n  //  `target` = ceil(T / alpha)\r\n  //  `numUpgradeRolls` = Nu\r\n\r\n  let result = { [numUpgradeRolls]: 1 }, additionalUpgradeRolls = numUpgradeRolls - minTotalUpgrades\r\n\r\n  // Keep applying `target` from first to last.\r\n  // At each step i in the loop, `result[n]` = g(i, n)\r\n  targetEntries.forEach(({ target, filler, minUpgrade }, targetIndex) => {\r\n    const next: typeof result = {}\r\n\r\n    for (let rolls = minUpgrade; rolls <= minUpgrade + additionalUpgradeRolls; rolls++) {\r\n      // rolls = m; extra = T(i) / alpha - 7n\r\n\r\n      // Extra substat (mutiple of alpha) required from upgrade & filler rolls\r\n      const extra = target - 7 * (rolls + filler)\r\n      // pExtra = Pr[ Has at least `extra` * alpha from `rolls` upgrade or filler rolls into `key` ]\r\n      //        = f(m + Nf(i), T(i))\r\n      const pExtra = (extra > 0 ? pNExtra[rolls + filler][extra] : 1)\r\n\r\n      for (const [_remaining, probability] of Object.entries(result)) {\r\n        const remaining = parseInt(_remaining)\r\n        if (remaining < rolls) continue\r\n\r\n        // n := remaining - m\r\n        // remaining = n + m\r\n        // probability = g(i, n + m)\r\n\r\n        // `pRolls` = Pr[ Has `rolls` rolls into `key` from `remaining` upgrade rolls ]\r\n        //          = h(n + m, m, |K| - i)\r\n        const pRolls = pRollInto(remaining, rolls, 4 - targetIndex)\r\n        const index = remaining - rolls // n\r\n\r\n        // g(i + 1, n) += g(i, n + m) f(m + Nf(i), T(i)) h(n + m, m, |K| - i)\r\n        next[index] = (next[index] ?? 0) + probability * pExtra * pRolls\r\n      }\r\n    }\r\n    result = next\r\n  })\r\n\r\n  // At this point, `result[i]` = g(|K|, i)\r\n\r\n  return calculatePFillerRolls(artifact.mainStatKey, substats, required) * Object.values(result).reduce((a, b) => a + b)\r\n}\r\n\r\n/**\r\n * Pr[ N(k) = n | N = m, |K| = M ]\r\n * \r\n * 0 <= n <= N <= 5; 0 <= M <= 4\r\n */\r\nfunction pRollInto(m: number, n: number, M: number) {\r\n  return cnr[m][n] * Math.pow(M - 1, m - n) / Math.pow(M, m)\r\n}\r\n\r\n// Given a list of substat (in that order), calculate the probability that filler rolls will have all `required` substats in any order\r\nfunction calculatePFillerRolls(mainStat: MainStatKey, substats: ISubstat[], required: Set<SubstatKey>) {\r\n  // Instead of picking substats in a particular order [critDMG_, atk_, ...],\r\n  // We pick substat weights first [3, 4, 3, ...], then assign proper substats\r\n  // that corresponds to that weight: 3 => critDMG_ | critRate_ ; 4 => atk_, etc.\r\n  // This reduces the search space significantly (5040 substat sequences => 71 weight sequences).\r\n\r\n  const mainStatRatio = fWeight[mainStat] ?? 0\r\n  let pFillerRolls = 0 // Pr[ filler rolls include all `required` substats, Substats are in the same order as `substats` ]\r\n\r\n  const numUnusedSubstats = { 3: 2, 4: 5, 6: 3 } // # of substat not used by main stat or substats\r\n  let pSuffixFillerSeq: any = pFillerSeq[mainStatRatio] // Suffix of `pFillerSeq` that excludes the `substats` portion\r\n  for (const { key } of substats) {\r\n    if (key) {\r\n      const ratio = fWeight[key]\r\n      pSuffixFillerSeq = pSuffixFillerSeq[ratio]\r\n      numUnusedSubstats[ratio] -= 1\r\n    }\r\n  }\r\n  if (mainStatRatio) numUnusedSubstats[mainStatRatio] -= 1\r\n\r\n  const requiredCount = { 3: 0, 4: 0, 6: 0 }\r\n  for (const key of required) requiredCount[fWeight[key]] += 1\r\n\r\n  let total = 0\r\n  crawlObject(pSuffixFillerSeq, [], obj => typeof obj === \"number\", (prob: number, path: string[]) => {\r\n    total += prob\r\n    const currentCount = { 3: 0, 4: 0, 6: 0 }\r\n    for (const key of path) currentCount[key] += 1\r\n\r\n    let sum = prob\r\n    for (const i of allWeights) {\r\n      const current = currentCount[i], required = requiredCount[i]\r\n      if (current < required) return\r\n      sum *= cnr[current][required]\r\n    }\r\n\r\n    pFillerRolls += sum\r\n  })\r\n\r\n  for (const i of allWeights)\r\n    pFillerRolls /= cnr[numUnusedSubstats[i]][requiredCount[i]]\r\n  return pFillerRolls / total\r\n}\r\n\r\nexport { probability }\r\n","import SqBadge from '../Components/SqBadge';\r\nimport { clamp } from '../Util/Util';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`roll${clamp(Math.floor(value * 0.05) + 1, 1, 6)}`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"error\"\r\n  return <SqBadge color={badgeColor} >{text}</SqBadge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { Button, ButtonProps, styled } from \"@mui/material\";\r\n\r\nconst DisabledButton = styled(Button)(({ theme }) => ({\r\n  \"&.Mui-disabled\": {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    color: theme.palette.text.secondary,\r\n  }\r\n}))\r\n\r\nexport default function TextButton({ children, disabled, ...props }: ButtonProps) {\r\n  return <DisabledButton {...props} disabled  >\r\n    {children}\r\n  </DisabledButton>\r\n}\r\n","import { Box, Typography } from \"@mui/material\"\r\nimport { useMemo } from \"react\"\r\nimport Character from \"../Character/Character\"\r\nimport Formula from \"../Formula\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat from \"../Stat\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { characterBaseStats } from \"../Util/StatUtil\"\r\nimport ColorText from \"./ColoredText\"\r\nimport StatIcon from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", hasBonus = false }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <ColorText color={diff > 0 ? \"success\" : \"error\"}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</ColorText>\r\n  const valueText = <>{oldText}{diffText}</>\r\n  return <Box display=\"flex\" justifyContent=\"space-between\" >\r\n    <Typography>{label}</Typography>\r\n    <Typography>\r\n      {hasBonus ? <strong>{valueText}</strong> : valueText}\r\n    </Typography>\r\n  </Box>\r\n}\r\ntype StatDisplayProps = {\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ character, equippedBuild, newBuild, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, label, hasBonus } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        oldVal = characterBaseStats(character)[statKey] as number | undefined\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <ColorText color={labelVariant} >{Character.getTalentFieldValue(field, \"text\", build)}</ColorText>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      unit = Character.getTalentFieldValue(field, \"unit\", build, \"\")\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    return { val, oldVal, fixed, unit, label, hasBonus: Character.hasBonusStats(character, statKey) }\r\n  }, [character, equippedBuild, newBuild, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, label: label as any, hasBonus }} />\r\n}","import { Replay } from \"@mui/icons-material\"\r\nimport { Button, ButtonGroup, ButtonGroupProps, styled } from \"@mui/material\"\r\nimport { ReactNode } from \"react\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport TextButton from \"../Components/TextButton\"\r\n\r\ntype StatInputInput = ButtonGroupProps & {\r\n  name: Displayable,\r\n  children?: ReactNode,\r\n  value: number,\r\n  placeholder?: string,\r\n  defaultValue?: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  onReset?: () => void\r\n}\r\nconst FlexButtonGroup = styled(ButtonGroup)({\r\n  display: \"flex\"\r\n})\r\n\r\nexport default function StatInput({ name, children, value, placeholder, defaultValue = 0, onValueChange, percent = false, disabled = false, onReset, ...restProps }: StatInputInput) {\r\n\r\n  return <FlexButtonGroup {...restProps} >\r\n    {children}\r\n    <TextButton sx={{ whiteSpace: \"nowrap\" }} >\r\n      {name}\r\n    </TextButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n      <CustomNumberInput\r\n        sx={{ px: 1 }}\r\n        inputProps={{\r\n          sx: { textAlign: \"right\" }\r\n        }}\r\n        float={percent}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onValueChange}\r\n        disabled={disabled}\r\n        endAdornment={percent ? \"%\" : undefined}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    <Button onClick={() => onReset ? onReset() : onValueChange(defaultValue)} disabled={disabled || value === defaultValue} >\r\n      <Replay />\r\n    </Button>\r\n  </FlexButtonGroup>\r\n}","import { faBan, faChartLine, faEdit, faInfoCircle, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Lock, LockOpen } from '@mui/icons-material';\r\nimport { Box, Button, ButtonGroup, CardActions, CardContent, CardMedia, Chip, Grid, IconButton, Skeleton, Tooltip, Typography } from '@mui/material';\r\nimport React, { Suspense, useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport BootstrapTooltip from '../Components/BootstrapTooltip';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton';\r\nimport LocationName from '../Components/Character/LocationName';\r\nimport ColorText from '../Components/ColoredText';\r\nimport SqBadge from '../Components/SqBadge';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database as localDatabase, DatabaseContext } from '../Database/Database';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, ICachedArtifact, ICachedSubstat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport { clamp } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport { probability } from './RollProbability'\r\n\r\ntype Data = {\r\n  artifactId?: string,\r\n  artifactObj?: ICachedArtifact,\r\n  onEdit?: (string) => void,\r\n  onDelete?: (string) => void, mainStatAssumptionLevel?: number,\r\n  effFilter?: Set<SubstatKey>,\r\n  probabilityFilter?: Partial<Record<SubstatKey, number>>\r\n}\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter, probabilityFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as ICachedArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact, database])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setArtLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj && database === localDatabase // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  if (!art) return null\r\n\r\n  const { id, lock, slotKey, rarity, level, mainStatKey, substats, exclude, location = \"\" } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, rarity * 4), level)\r\n  const levelVariant = \"roll\" + (Math.floor(Math.max(level, 0) / 4) + 1)\r\n  const mainStatVal = <ColorText color={mainStatLevel !== level ? \"warning\" : undefined}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, rarity, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</ColorText>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescTooltip = slotDesc && <BootstrapTooltip placement=\"top\" title={<Typography>{slotDesc}</Typography>}>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n  const setEffects = sheet?.setEffects\r\n  const setDescTooltip = sheet && setEffects && <BootstrapTooltip placement=\"top\" title={\r\n    <span>\r\n      {Object.keys(setEffects).map(setNumKey => <span key={setNumKey}>\r\n        <Typography variant=\"h6\"><SqBadge color=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</SqBadge></Typography>\r\n        <Typography>{sheet.setEffectDesc(setNumKey as any)}</Typography>\r\n      </span>)}\r\n    </span>\r\n  }>\r\n    <span><FontAwesomeIcon icon={faInfoCircle} /></span>\r\n  </BootstrapTooltip>\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 350 }} />}>\r\n    <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n      <CardContent className={`grad-${rarity}star`} sx={{ pt: 1, pb: 0, pr: 0 }}>\r\n        <Box component=\"div\" sx={{ display: \"flex\", alignItems: \"center\", pr: 1 }}>\r\n          <Chip size=\"small\" label={<strong>{` +${level}`}</strong>} color={levelVariant as any} />\r\n          <Typography sx={{ pl: 1, flexGrow: 1 }}>{slotName} {slotDescTooltip}</Typography>\r\n          <IconButton color=\"primary\" disabled={!editable} onClick={() => database.updateArt({ lock: !lock }, id)}>\r\n            {lock ? <Lock /> : <LockOpen />}\r\n          </IconButton>\r\n        </Box>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item flexGrow={1}>\r\n            <Typography color=\"text.secondary\" variant=\"body2\">\r\n              <SlotNameWithIcon slotKey={slotKey} />\r\n            </Typography>\r\n            <Typography variant=\"h6\">\r\n              {Stat.getStatName(mainStatKey)}\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <strong>{mainStatVal}</strong>\r\n            </Typography>\r\n            <Stars stars={rarity} colored />\r\n            {/* {process.env.NODE_ENV === \"development\" && <Typography color=\"common.black\">{id || `\"\"`} </Typography>} */}\r\n          </Grid>\r\n          <Grid item maxWidth=\"40%\" sx={{ mt: -3, mb: -1, pl: -2 }} alignSelf=\"flex-end\">\r\n            <CardMedia\r\n              component=\"img\"\r\n              image={sheet?.slotIcons[slotKey] ?? \"\"}\r\n              width=\"100%\"\r\n              height=\"auto\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <CardContent sx={{ flexGrow: 1, display: \"flex\", flexDirection: \"column\", pt: 1, pb: 0 }}>\r\n        {substats.map((stat: ICachedSubstat, i) => {\r\n          if (!stat.value) return null\r\n          const numRolls = stat.rolls?.length ?? 0\r\n          const rollColor = `roll${clamp(numRolls, 1, 6)}`\r\n          const efficiency = stat.efficiency ?? 0\r\n          const effOpacity = 0.3 + (efficiency / 100) * 0.7\r\n          const statName = Stat.getStatName(stat.key)\r\n          return (<Box key={i} sx={{ display: \"flex\" }}>\r\n            <Box sx={{ flexGrow: 1 }}>\r\n              <SqBadge color={(numRolls ? rollColor : \"error\") as any} sx={{ mr: 1 }}><strong>{numRolls ? numRolls : \"?\"}</strong></SqBadge>\r\n              <Typography color={(numRolls ? `${rollColor}.main` : \"error.main\") as any} component=\"span\">{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</Typography>\r\n            </Box>\r\n            <Typography sx={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</Typography>\r\n          </Box>)\r\n        })}\r\n        <Box sx={{ display: \"flex\", my: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.curSubEff`}</Typography>\r\n          <PercentBadge value={currentEfficiency} valid={artifactValid} />\r\n        </Box>\r\n        {currentEfficiency !== maxEfficiency && <Box sx={{ display: \"flex\", mb: 1 }}>\r\n          <Typography color=\"text.secondary\" component=\"span\" variant=\"caption\" sx={{ flexGrow: 1 }}>{t`editor.maxSubEff`}</Typography>\r\n          <PercentBadge value={maxEfficiency} valid={artifactValid} />\r\n        </Box>}\r\n        <Box flexGrow={1} />\r\n        {probabilityFilter && <strong>Probability: {(probability(art, probabilityFilter) * 100).toFixed(2)}%</strong>}\r\n        <Typography color=\"success.main\">{sheet?.name ?? \"Artifact Set\"} {setDescTooltip}</Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item xs=\"auto\" flexShrink={1}>\r\n            {editable ?\r\n              <CharacterDropdownButton size=\"small\" inventory value={location} onChange={equipOnChar} /> : <LocationName location={location} />}\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n          {editable && <Grid item xs=\"auto\">\r\n            <ButtonGroup sx={{ height: \"100%\" }}>\r\n              {!!onEdit && <Button color=\"info\" onClick={() => onEdit(id)} size=\"small\">\r\n                <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n              </Button>}\r\n              <Tooltip title={<Typography>{t`excludeArtifactTip`}</Typography>} placement=\"top\" arrow>\r\n                <Button onClick={() => database.updateArt({ exclude: !exclude }, id)} color={exclude ? \"error\" : \"success\"} size=\"small\">\r\n                  <FontAwesomeIcon icon={exclude ? faBan : faChartLine} className=\"fa-fw\" />\r\n                </Button>\r\n              </Tooltip>\r\n              {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={lock}>\r\n                <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n              </Button>}\r\n            </ButtonGroup>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardActions>\r\n    </CardLight >\r\n  </Suspense>\r\n}\r\n","import { Box, CardActionArea, CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useEffect, useState } from \"react\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { allWeaponKeys, WeaponKey, WeaponTypeKey } from \"../../Types/consts\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport CardDark from \"../Card/CardDark\"\r\nimport CardLight from \"../Card/CardLight\"\r\nimport CloseButton from \"../CloseButton\"\r\nimport ImgIcon from \"../Image/ImgIcon\"\r\nimport ModalWrapper from \"../ModalWrapper\"\r\nimport { Stars } from \"../StarDisplay\"\r\nimport WeaponToggle from \"../ToggleButton/WeaponToggle\"\r\n\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean,\r\n  weaponFilter?: WeaponTypeKey,\r\n}\r\n\r\nexport default function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true, weaponFilter: propWeaponFilter }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const [weaponFilter, setWeaponfilter] = useState<WeaponTypeKey | \"\">(propWeaponFilter ?? \"\")\r\n\r\n  useEffect(() => propWeaponFilter && setWeaponfilter(propWeaponFilter), [propWeaponFilter])\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n\r\n  return <ModalWrapper open={show} onClose={onHide}>\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <WeaponToggle value={weaponFilter} onChange={setWeaponfilter} disabled={!!propWeaponFilter} size=\"small\" />\r\n          </Grid >\r\n          <Grid item>\r\n            <CloseButton onClick={onHide} />\r\n          </Grid >\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent><Grid container spacing={1}>\r\n        {weaponIdList.map(weaponKey => {\r\n          const weaponSheet = weaponSheets[weaponKey]\r\n          return <Grid item key={weaponKey} lg={3} md={4}>\r\n            <CardLight sx={{ height: \"100%\" }} >\r\n              <CardActionArea onClick={() => { onHide(); onSelect(weaponKey) }} sx={{ display: \"flex\" }}>\r\n                <Box component=\"img\" src={weaponSheet.img} sx={{ width: 100, height: \"auto\" }} className={` grad-${weaponSheet.rarity}star`} />\r\n                <Box sx={{ flexGrow: 1, px: 1 }}>\r\n                  <Typography variant=\"subtitle1\">{weaponSheet.name}</Typography>\r\n                  <Typography><ImgIcon src={Assets.weaponTypes?.[weaponSheet.weaponType]} /> <Stars stars={weaponSheet.rarity} colored /></Typography>\r\n                </Box>\r\n              </CardActionArea>\r\n            </CardLight>\r\n          </Grid>\r\n        })}\r\n      </Grid></CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={onHide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Lock, LockOpen } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardActionArea, CardContent, CardHeader, Grid, IconButton, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useEffect, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from '../Components/Character/CharacterDropdownButton'\r\nimport LocationName from \"../Components/Character/LocationName\"\r\nimport ConditionalWrapper from \"../Components/ConditionalWrapper\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { ascensionMaxLevel } from \"../Data/LevelData\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat from \"../Stat\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\n\r\ntype WeaponCardProps = { weaponId: string, onClick?: (weaponId: string) => void, onEdit?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, canEquip?: boolean }\r\nexport default function WeaponCard({ weaponId, onClick, onEdit, onDelete, canEquip = false }: WeaponCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseWeapon, updateDatabaseWeapon] = useState(undefined as ICachedWeapon | undefined)\r\n  useEffect(() =>\r\n    weaponId ? database.followWeapon(weaponId, updateDatabaseWeapon) : undefined,\r\n    [weaponId, updateDatabaseWeapon, database])\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n\r\n  const actionWrapperFunc = useCallback(\r\n    children => <CardActionArea onClick={() => onClick?.(weaponId)} sx={{ height: \"100%\" }}>{children}</CardActionArea>,\r\n    [onClick, weaponId],\r\n  )\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => database.setWeaponLocation(weaponId, charKey), [database, weaponId],)\r\n  if (!weapon || !weaponSheet) return null;\r\n  const { level, ascension, refinement, id, location = \"\", lock } = weapon\r\n\r\n\r\n  const weaponTypeKey = weaponSheet.weaponType\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statMap = [[\"weaponATK\", weaponMainVal]]\r\n  weaponPassiveName && statMap.push([weaponSubKey, weaponSubVal])\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 300 }} />}>\r\n    <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\r\n      <CardLight sx={{ height: \"100%\", display: \"flex\", flexDirection: \"column\" }}>\r\n        <div className={`grad-${weaponSheet.rarity}star`} >\r\n          <CardHeader title={weaponSheet.name} avatar={<ImgIcon sx={{ fontSize: \"2em\" }} src={Assets.weaponTypes?.[weaponTypeKey]} />} titleTypographyProps={{ variant: \"h6\" }}\r\n            action={!onClick && <IconButton color=\"primary\" onClick={() => database.updateWeapon({ lock: !lock }, id)}>\r\n              {lock ? <Lock /> : <LockOpen />}\r\n            </IconButton>} />\r\n          <Grid container sx={{ flexWrap: \"nowrap\", pl: 2 }}>\r\n            <Grid item flexGrow={1}>\r\n              <Typography component=\"span\" variant=\"h4\">Lv. {level}</Typography>\r\n              <Typography component=\"span\" variant=\"h4\" color=\"text.secondary\">/{ascensionMaxLevel[ascension]}</Typography>\r\n              <Typography variant=\"h6\">Refinement <strong>{refinement}</strong></Typography>\r\n              <Typography><Stars stars={weaponSheet.rarity} colored /></Typography>\r\n            </Grid>\r\n            {/* use flex-end here to align the image to the bottom. */}\r\n            <Grid item container maxWidth=\"40%\" alignContent=\"flex-end\" sx={{ mt: -3 }}>\r\n              <Box component=\"img\" src={img} width=\"100%\" height=\"auto\" />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n        <CardContent>\r\n          {statMap.map(([statKey, statVal]) => {\r\n            let unit = Stat.getStatUnit(statKey)\r\n            return <Box key={statKey} sx={{ display: \"flex\" }}>\r\n              <Typography flexGrow={1}>{StatIcon[statKey]} {Stat.getStatName(statKey)}</Typography>\r\n              <Typography>{statVal + unit}</Typography>\r\n            </Box>\r\n          })}\r\n        </CardContent>\r\n        {/* grow to fill the 100% heigh */}\r\n        <Box flexGrow={1} />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container sx={{ flexWrap: \"nowrap\" }} >\r\n            <Grid item xs=\"auto\" flexShrink={1}>\r\n              {canEquip ? <CharacterDropdownButton size=\"small\" noUnselect inventory value={location} onChange={equipOnChar} filter={filter} /> : <LocationName location={location} />}\r\n            </Grid>\r\n            <Grid item flexGrow={1} sx={{ mr: 1 }} />\r\n            <Grid item xs=\"auto\">\r\n              <ButtonGroup sx={{ height: \"100%\" }}>\r\n                {!!onEdit && <Button color=\"info\" size=\"small\" onClick={() => onEdit(id)} >\r\n                  <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n                </Button>}\r\n                {!!onDelete && <Button color=\"error\" size=\"small\" onClick={() => onDelete(id)} disabled={!!location || lock} >\r\n                  <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n                </Button>}\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n\r\n      </CardLight>\r\n    </ConditionalWrapper>\r\n  </Suspense>\r\n}","import { Box, CardContent, Typography } from \"@mui/material\"\r\nimport CardDark from \"../../Components/Card/CardDark\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../../Components/FieldDisplay\"\r\nimport SqBadge from \"../../Components/SqBadge\"\r\nimport usePromise from \"../../ReactHooks/usePromise\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <Box sx={{\r\n    mt: 1,\r\n    \"> div\": { mb: 1 },\r\n  }}>\r\n    <CardDark>\r\n      <CardContent>\r\n        <Typography><SqBadge color=\"success\">{setNumKey}-Set</SqBadge> {setEffectText}</Typography>\r\n      </CardContent>\r\n      <FieldDisplayList sx={{ m: 0 }}>\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} field={field} />)}\r\n      </FieldDisplayList>\r\n    </CardDark>\r\n    {document ? <DocumentDisplay sections={document} characterKey={stats.characterKey} /> : null}\r\n  </Box>\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\"\r\nimport CardDark from \"../../Components/Card/CardDark\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICachedCharacter } from \"../../Types/character\"\r\nimport { ArtifactSetKey } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  character: ICachedCharacter\r\n  statsDisplayKeys: any,\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ sheets, sheets: { characterSheet, weaponSheet }, character, equippedBuild, newBuild, statsDisplayKeys }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Grid container spacing={1}>{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build?.characterEle)\r\n    return <Grid item key={sectionKey} xs={12} sm={6} md={4} lg={4}>\r\n      <CardDark sx={{ height: \"100%\", }}>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Typography variant=\"subtitle1\">{header}</Typography>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          {sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statKey }} />)}\r\n        </CardContent>\r\n      </CardDark>\r\n    </Grid>\r\n  })}</Grid>\r\n}","import { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ExpandMore } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Chip, Collapse, Grid, Typography } from \"@mui/material\";\r\nimport { useCallback, useState } from 'react';\r\nimport Character from \"../Character/Character\";\r\nimport StatInput from \"../Character/StatInput\";\r\nimport useCharacterReducer from \"../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../Stat\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allElements, ElementKey } from \"../Types/consts\";\r\nimport { characterBaseStats } from \"../Util/StatUtil\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport ExpandButton from \"./ExpandButton\";\r\nimport { uncoloredEleIcons } from \"./StatIcon\";\r\n\r\nexport function EnemyExpandCard({ character }) {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1} alignItems=\"center\">\r\n          <Grid container spacing={1}>\r\n            <Grid item>\r\n              <Chip size=\"small\" color=\"success\" label={<span>{Stat.getStatName(\"enemyLevel\")} <strong>{Character.getStatValueWithBonus(character, \"enemyLevel\")}</strong></span>} />\r\n            </Grid>\r\n            {[\"physical\", ...allElements].map(element => <Grid item key={element}>\r\n              <Typography key={element} ><EnemyResText element={element} character={character} /></Typography>\r\n            </Grid>)}\r\n            <Grid item>\r\n              <Typography>DEF Reduction {Character.getStatValueWithBonus(character, \"enemyDEFRed_\")}%</Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n            size=\"small\"\r\n            sx={{ p: 0 }}\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <EnemyEditor character={character} />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nexport function EnemyResText({ character, element }: { character: ICachedCharacter, element: string }) {\r\n  const immune = !!Character.getStatValueWithBonus(character, `${element}_enemyImmunity`)\r\n  const resKey = `${element}_enemyRes_`\r\n  const content = immune ? <span >{uncoloredEleIcons[element]} IMMUNE</span> :\r\n    <span >{uncoloredEleIcons[element]}RES <strong>{Character.getStatValueWithBonus(character, resKey)}%</strong></span>\r\n  return <ColorText color={element}>{content}</ColorText>\r\n}\r\n\r\n\r\nexport function EnemyEditor({ character, character: { key: characterKey, }, bsProps = { xs: 12, md: 6 } }: { character: ICachedCharacter, bsProps?: object }) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const charBaseStats = characterBaseStats(character)\r\n  return <Grid container spacing={1}>\r\n    <Grid item {...bsProps}>\r\n      <Button fullWidth sx={{ height: \"100%\" }} size=\"small\" component=\"a\" color=\"warning\" href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n        To get the specific resistance values of enemies, please visit the wiki.\r\n      </Button>\r\n    </Grid>\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>Enemy Level</b>}\r\n        value={Character.getStatValueWithBonus(character, \"enemyLevel\")}\r\n        placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n        defaultValue={charBaseStats.enemyLevel}\r\n        onValueChange={value => characterDispatch({ type: \"editStats\", statKey: \"enemyLevel\", value })}\r\n      />\r\n    </Grid>\r\n    {([\"physical\", ...allElements] as Array<ElementKey | \"physical\">).map(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      let immunityStatKey = `${eleKey}_enemyImmunity`\r\n      let elementImmunity = Character.getStatValueWithBonus(character, immunityStatKey)\r\n      return <Grid item key={eleKey} {...bsProps}>\r\n        <StatInput\r\n          sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n          name={<b>{Stat.getStatName(statKey)}</b>}\r\n          value={Character.getStatValueWithBonus(character, statKey)}\r\n          placeholder={Stat.getStatNameRaw(statKey)}\r\n          defaultValue={charBaseStats[statKey]}\r\n          onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n          disabled={elementImmunity}\r\n          percent\r\n        >\r\n          <Button color={eleKey} onClick={() => characterDispatch({ type: \"editStats\", statKey: immunityStatKey, value: !elementImmunity })} >\r\n            <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n          </Button>\r\n        </StatInput>\r\n      </Grid>\r\n    })}\r\n    <Grid item {...bsProps}>\r\n      <StatInput\r\n        sx={{ bgcolor: t => t.palette.contentLight.main, width: \"100%\" }}\r\n        name={<b>{Stat.getStatName(\"enemyDEFRed_\")}</b>}\r\n        value={Character.getStatValueWithBonus(character, \"enemyDEFRed_\")}\r\n        placeholder={Stat.getStatNameRaw(\"enemyDEFRed_\")}\r\n        defaultValue={charBaseStats[\"enemyDEFRed_\"]}\r\n        onValueChange={value => characterDispatch({ type: \"editStats\", statKey: \"enemyDEFRed_\", value })}\r\n        percent\r\n      />\r\n    </Grid>\r\n    <Grid item xs={12}>\r\n      <small>Note: Genshin Impact halves resistance shred values below 0%. For the sake of calculations enter the RAW value and GO will do the rest. (e.g. 10% - 20% = -10%)</small>\r\n    </Grid>\r\n  </Grid>\r\n}","import { CardContent, Grid, MenuItem, ToggleButton, ToggleButtonGroupProps } from \"@mui/material\";\r\nimport { useContext } from 'react';\r\nimport { buildContext } from \"../Build/Build\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport useCharacterReducer from \"../ReactHooks/useCharacterReducer\";\r\nimport usePromise from \"../ReactHooks/usePromise\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport CardLight from \"./Card/CardLight\";\r\nimport ColorText from \"./ColoredText\";\r\nimport DropdownButton, { DropdownButtonProps } from \"./DropdownMenu/DropdownButton\";\r\nimport SolidToggleButtonGroup from \"./SolidToggleButtonGroup\";\r\nimport StatIcon, { uncoloredEleIcons } from \"./StatIcon\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = Omit<DropdownButtonProps, \"title\" | \"onChange\" | \"children\"> & {\r\n  character: ICachedCharacter,\r\n}\r\nexport function InfusionAuraDropdown({ character: { infusionAura = \"\", key: characterKey }, ...props }: InfusionAuraDropdownProps) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!characterSheet?.isMelee()) return null\r\n  return <DropdownButton title={infusionVals[infusionAura]} color={infusionAura || \"secondary\"} {...props}>\r\n    {Object.entries(infusionVals).map(([key, text]) =>\r\n      <MenuItem key={key} sx={key ? { color: `${key}.main` } : undefined}\r\n        selected={key === infusionAura} disabled={key === infusionAura}\r\n        onClick={() => characterDispatch({ infusionAura: key })}>{text}</MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype ReactionToggleProps = Omit<ToggleButtonGroupProps, \"color\"> & {\r\n  character: ICachedCharacter,\r\n  build: ICalculatedStats,\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = \"\", infusionAura, key: characterKey }, build, ...props }: ReactionToggleProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={reactionMode} onChange={(e, reactionMode) => characterDispatch({ reactionMode })} {...props}>\r\n    <ToggleButton value=\"\" >No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value=\"pyro_vaporize\"  >\r\n      <ColorText color=\"vaporize\">Vaporize(Pyro){StatIcon.hydro}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"}  >\r\n      <ColorText color=\"vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</ColorText>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"}  >\r\n      <ColorText color=\"melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</ColorText>\r\n    </ToggleButton >}\r\n  </SolidToggleButtonGroup>\r\n}\r\ntype HitModeToggleProps = Omit<ToggleButtonGroupProps, \"color\"> & {\r\n  character: ICachedCharacter\r\n}\r\nexport function HitModeToggle({ character: { hitMode = \"avgHit\", key: characterKey }, ...props }: HitModeToggleProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  return <SolidToggleButtonGroup exclusive baseColor=\"secondary\"\r\n    value={hitMode} onChange={(e, hitMode) => characterDispatch({ hitMode })} {...props} >\r\n    <ToggleButton value=\"avgHit\">Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\">Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\">Crit Hit DMG</ToggleButton>\r\n  </SolidToggleButtonGroup>\r\n}\r\n\r\n\r\nexport function DamageOptionsCard({ character }: { character: ICachedCharacter }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item><HitModeToggle character={character} size=\"small\" /></Grid>\r\n        <Grid item><InfusionAuraDropdown character={character} /></Grid>\r\n        <Grid item><ReactionToggle character={character} build={build} size=\"small\" /></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\n","import { CardContent, Typography } from \"@mui/material\"\r\nimport React from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport FieldDisplay, { FieldDisplayList } from \"../Components/FieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nexport default function WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals) as string[]).filter(s => s !== \"modifiers\").length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <CardDark sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Typography>{title}</Typography>\r\n    </CardContent>\r\n    <FieldDisplayList>\r\n      {fields.map((field, i) => <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n  </CardDark>\r\n}","import { Lock, LockOpen, SwapHoriz } from \"@mui/icons-material\"\r\nimport { Box, Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\"\r\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport CharacterDropdownButton from \"../Components/Character/CharacterDropdownButton\"\r\nimport CloseButton from \"../Components/CloseButton\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from \"../Components/CustomNumberInput\"\r\nimport DocumentDisplay from \"../Components/DocumentDisplay\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport ImgIcon from \"../Components/Image/ImgIcon\"\r\nimport ModalWrapper from \"../Components/ModalWrapper\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport WeaponSelectionModal from \"../Components/Weapon/WeaponSelectionModal\"\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from \"../Data/LevelData\"\r\nimport { database as localDatabase, DatabaseContext } from \"../Database/Database\"\r\nimport useForceUpdate from \"../ReactHooks/useForceUpdate\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { clamp } from \"../Util/Util\"\r\nimport WeaponCard from \"./WeaponCard\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\nimport WeaponStatsCard from \"./WeaponStatsCard\"\r\n\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  weaponId: string\r\n  charData?: {\r\n    character: ICachedCharacter,\r\n    characterSheet: CharacterSheet,\r\n    equippedBuild?: ICalculatedStats\r\n    newBuild?: ICalculatedStats\r\n    characterDispatch: (any) => void\r\n  }\r\n  footer?: boolean\r\n  onClose?: () => void\r\n}\r\nexport default function WeaponDisplayCard({\r\n  weaponId: propWeaponId,\r\n  charData,\r\n  footer = false,\r\n  onClose\r\n}: WeaponStatsEditorCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  // Use databaseToken anywhere `database._get*` is used\r\n  // Use onDatabaseUpdate when `following` database entries\r\n  const [databaseToken, onDatabaseUpdate] = useForceUpdate()\r\n\r\n  const buildContextObj = useContext(buildContext)\r\n  const weapon = useMemo(() =>\r\n    databaseToken && database._getWeapon(propWeaponId!)!,\r\n    [propWeaponId, databaseToken, database])\r\n  const { key, level, refinement, ascension, lock } = weapon\r\n  const { location = \"\", id } = weapon as Partial<ICachedWeapon>\r\n  const weaponSheet: WeaponSheet | undefined = usePromise(WeaponSheet.get(key), [key])\r\n  const weaponTypeKey = weaponSheet?.weaponType\r\n\r\n  useEffect(() =>\r\n    propWeaponId ? database.followWeapon(propWeaponId, onDatabaseUpdate) : undefined,\r\n    [propWeaponId, onDatabaseUpdate, database])\r\n\r\n  const weaponDispatch = useCallback((newWeapon: Partial<ICachedWeapon>) => {\r\n    database.updateWeapon(newWeapon, propWeaponId)\r\n  }, [propWeaponId, database])\r\n\r\n  const setLevel = useCallback(level => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    weaponDispatch({ level, ascension })\r\n  }, [weaponDispatch])\r\n\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) weaponDispatch({ ascension: ascension + 1 })\r\n    else weaponDispatch({ ascension: lowerAscension })\r\n  }, [weaponDispatch, ascension, level])\r\n\r\n  const build = { ...(charData ? (charData.newBuild ?? charData.equippedBuild) : { weapon: { refineIndex: refinement - 1, level, ascension } }) } as any\r\n\r\n  const characterSheet = usePromise(location ? CharacterSheet.get(location) : undefined, [location])\r\n  const weaponFilter = characterSheet ? (ws) => ws.weaponType === characterSheet.weaponTypeKey : undefined\r\n  const initialWeaponFilter = characterSheet && characterSheet.weaponTypeKey\r\n\r\n  const equipOnChar = useCallback((charKey: CharacterKey | \"\") => id && database.setWeaponLocation(id, charKey), [database, id])\r\n  const filter = useCallback(\r\n    (cs: CharacterSheet) => cs.weaponTypeKey === weaponSheet?.weaponType,\r\n    [weaponSheet],\r\n  )\r\n  const [showModal, setshowModal] = useState(false)\r\n  const img = ascension < 2 ? weaponSheet?.img : weaponSheet?.imgAwaken\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={1}>\r\n        <Grid item flexGrow={1}>\r\n          <Grid container spacing={1}>\r\n            <Grid item >\r\n              <WeaponSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={k => weaponDispatch({ key: k })} filter={weaponFilter} weaponFilter={initialWeaponFilter} />\r\n              <ButtonGroup>\r\n                <Button onClick={() => setshowModal(true)} >{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n                <DropdownButton title={`Refinement ${refinement}`}>\r\n                  <MenuItem>Select Weapon Refinement</MenuItem>\r\n                  <Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <MenuItem key={key} onClick={() => weaponDispatch({ refinement: key + 1 })} selected={refinement === (key + 1)} disabled={refinement === (key + 1)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </MenuItem>)}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item >\r\n              <ButtonGroup sx={{ bgcolor: t => t.palette.contentLight.main }} >\r\n                <CustomNumberInputButtonGroupWrapper >\r\n                  <CustomNumberInput onChange={setLevel} value={level}\r\n                    startAdornment=\"Lvl. \"\r\n                    inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n                    sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n                  />\r\n                </CustomNumberInputButtonGroupWrapper>\r\n                <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level)} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n                <DropdownButton title={\"Select Level\"} >\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    const selected = lv === level && as === ascension\r\n                    return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => weaponDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n                  })}\r\n                </DropdownButton>\r\n              </ButtonGroup>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button color=\"error\" onClick={() => id && database.updateWeapon({ lock: !lock }, id)} startIcon={lock ? <Lock /> : <LockOpen />}>\r\n                {lock ? \"Locked\" : \"Unlocked\"}\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {!!onClose && <Grid item  >\r\n          <CloseButton onClick={onClose} />\r\n        </Grid>}\r\n        {!!charData && database === localDatabase && <Grid item >\r\n          <SwapBtn weaponTypeKey={weaponTypeKey} onChangeId={id => database.setWeaponLocation(id, charData.character.key)} />\r\n        </Grid>}\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      {(() => {\r\n        if (!weaponSheet) return null\r\n        const substatKey = weaponSheet.getSubStatKey()\r\n        const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n        const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n        const weaponPassiveName = weaponSheet.passiveName\r\n        const weaponBonusStats = weaponSheet.stats(build)\r\n        const sections = weaponSheet.document\r\n        return <Box display=\"flex\" gap={{ xs: 1, md: 1.5, lg: 2 }} >\r\n          <Box sx={{ maxWidth: 256 }} flexShrink={1} minWidth=\"25%\">\r\n            <Box component=\"img\" src={img} className={`grad-${weaponSheet.rarity}star`} sx={{ maxWidth: 256, width: \"100%\", height: \"auto\", borderRadius: 1 }} />\r\n            <Typography><small>{weaponSheet.description}</small></Typography>\r\n          </Box>\r\n          <Box sx={{ mb: -1 }} flexGrow={1} >\r\n            <Typography variant=\"h6\" >{process.env.NODE_ENV === \"development\" && <ColorText color=\"warning\">{id || `\"\"`} </ColorText>}{weaponSheet.name} Lv. {WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <SqBadge color=\"info\">Refinement {refinement}</SqBadge>}</Typography>\r\n            <Typography><Stars stars={weaponSheet.rarity} /></Typography>\r\n            <Typography variant=\"subtitle1\">{weaponPassiveName}</Typography>\r\n            <Typography gutterBottom>{weaponPassiveName && weaponSheet.passiveDescription(build)}</Typography>\r\n            {build && <buildContext.Provider value={charData ? buildContextObj : { equippedBuild: build, newBuild: undefined, compareBuild: false, setCompareBuild: undefined }}>\r\n              <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n              <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            </buildContext.Provider>}\r\n            {charData && sections ? (() => {\r\n              const { equippedBuild, newBuild } = charData\r\n              const characterKey = (newBuild ? newBuild : equippedBuild)?.characterKey as CharacterKey | undefined\r\n              return !!characterKey && < DocumentDisplay  {...{ sections, equippedBuild, newBuild, characterKey }} />\r\n            })() : null}\r\n          </Box>\r\n        </Box>\r\n      })()}\r\n    </CardContent>\r\n    {footer && id && <CardContent sx={{ py: 1 }}>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <CharacterDropdownButton noUnselect inventory value={location} onChange={equipOnChar} filter={filter} />\r\n        </Grid>\r\n        {!!onClose && <Grid item><CloseButton large onClick={onClose} /></Grid>}\r\n      </Grid>\r\n    </CardContent>}\r\n  </CardLight>\r\n}\r\nfunction SwapBtn({ onChangeId, weaponTypeKey }) {\r\n  const database = useContext(DatabaseContext)\r\n  const [show, setShow] = useState(false)\r\n  const open = () => setShow(true)\r\n  const close = () => setShow(false)\r\n\r\n  const clickHandler = (id) => {\r\n    onChangeId(id)\r\n    close()\r\n  }\r\n\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n\r\n  const weaponIdList = database.weapons.keys.filter(wKey => {\r\n    const dbWeapon = database._getWeapon(wKey)\r\n    if (!dbWeapon) return false\r\n    if (weaponTypeKey && weaponTypeKey !== weaponSheets?.[dbWeapon.key]?.weaponType) return false\r\n    return true\r\n  })\r\n\r\n\r\n  return <>\r\n    <Button color=\"info\" onClick={open} startIcon={<SwapHoriz />} >SWAP WEAPON</Button>\r\n    <ModalWrapper open={show} onClose={close} >\r\n      <CardDark>\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{weaponTypeKey ? <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} /> : null} Swap Weapon</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={close} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Grid container spacing={1}>\r\n            {weaponIdList.map(weaponId =>\r\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3} >\r\n                <WeaponCard\r\n                  weaponId={weaponId}\r\n                  onClick={clickHandler}\r\n                />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper>\r\n  </>\r\n}","import { ExpandMore } from \"@mui/icons-material\"\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CardContent, Collapse, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useContext, useMemo, useState } from \"react\"\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../Character/CharacterUtil\"\r\nimport Formula from \"../Formula\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport Stat, { FormulaDisplay } from \"../Stat\"\r\nimport { GetDependencies } from \"../StatDependency\"\r\nimport { ArtifactSetKey } from \"../Types/consts\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CardLight from \"./Card/CardLight\"\r\nimport ColorText from \"./ColoredText\"\r\nimport ExpandButton from \"./ExpandButton\"\r\n\r\nexport default function FormulaCalcCard({ sheets }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n}) {\r\n  const [expanded, setexpanded] = useState(false)\r\n  const toggle = useCallback(() => setexpanded(!expanded), [setexpanded, expanded])\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Typography>Formulas {\"&\"} Calculations</Typography>\r\n          <Typography variant=\"caption\" color=\"text.secondary\">Expand to see every formula and all their calculations.</Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <ExpandButton\r\n            expand={expanded}\r\n            onClick={toggle}\r\n            aria-expanded={expanded}\r\n            aria-label=\"show more\"\r\n          >\r\n            <ExpandMore />\r\n          </ExpandButton>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <CalculationDisplay sheets={sheets} build={build} />\r\n      </CardContent>\r\n    </Collapse>\r\n  </CardLight>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />} >\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <CardDark key={sectionKey} sx={{ mb: 1 }}>\r\n        <CardContent sx={{ pb: 1 }}>\r\n          <Typography variant=\"h6\">{header}</Typography>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          {fields.map((field, fieldIndex) => {\r\n            if (Array.isArray(field))\r\n              return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} />\r\n            else if (typeof field === \"string\") {//simple statKey field\r\n              const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n              return Boolean(subFormulaKeys.length) && <Accordion sx={{ bgcolor: \"contentLight.main\" }} key={fieldIndex}>\r\n                <AccordionSummary expandIcon={<ExpandMore />}>\r\n                  <Typography>{Stat.printStat(field, build)}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  {subFormulaKeys.map(subKey =>\r\n                    <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n                  )}\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            }\r\n            return null\r\n          })}\r\n        </CardContent>\r\n      </CardDark>\r\n    })}\r\n  </Suspense>\r\n}\r\n\r\nfunction FormulaCalculationField({ fieldKeys, build }: { fieldKeys: string[], build: ICalculatedStats }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Accordion sx={{ bgcolor: \"contentLight.main\" }}>\r\n    <AccordionSummary expandIcon={<ExpandMore />}>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}{fieldUnit}</ColorText></Typography>\r\n    </AccordionSummary>\r\n    <AccordionDetails>\r\n      <Typography><Box color={`${fieldVariant}.main`} component=\"strong\">{fieldText}</Box> <ColorText color=\"info\">{fieldValue}</ColorText> = <small>{fieldFormulaText}</small></Typography>\r\n      {subFormulaKeys.map(subKey =>\r\n        <Typography key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></Typography>\r\n      )}\r\n    </AccordionDetails>\r\n  </Accordion>\r\n}","import { Button, Card, CardContent, Divider, Grid, ToggleButton, Typography } from '@mui/material';\r\nimport { useCallback, useContext, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { buildContext } from '../../Build/Build';\r\nimport CardLight from '../../Components/Card/CardLight';\r\nimport SolidToggleButtonGroup from '../../Components/SolidToggleButtonGroup';\r\nimport { database as localDatabase, DatabaseContext } from '../../Database/Database';\r\nimport useForceUpdate from '../../ReactHooks/useForceUpdate';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { ICachedCharacter } from '../../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey } from '../../Types/consts';\r\nimport { objectFromKeyMap } from '../../Util/Util';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICachedCharacter,\r\n}\r\nfunction CharacterArtifactPane({ sheets, character, character: { key: characterKey } }: CharacterArtifactPaneProps) {\r\n  const { newBuild, equippedBuild, compareBuild, setCompareBuild } = useContext(buildContext)\r\n  const database = useContext(DatabaseContext)\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, sheets), [stats, sheets])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n  }, [characterKey, newBuild, database])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, objectFromKeyMap(allSlotKeys, () => \"\"))\r\n  }, [characterKey, database])\r\n  if (!stats) return null\r\n  return <>\r\n    <CardLight sx={{ mb: 1 }}>\r\n      <CardContent>\r\n        <StatDisplayComponent {...{ sheets, character, equippedBuild: (newBuild && !compareBuild) ? undefined : equippedBuild, newBuild, statsDisplayKeys: statKeys }} />\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item>\r\n            {newBuild ? <Button onClick={equipArts} className=\"mr-2\">Equip artifacts</Button> : (database === localDatabase && <Button color=\"error\" onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n          </Grid>\r\n          <Grid item>\r\n            {/* Compare against new build toggle */}\r\n            {!!newBuild && <SolidToggleButtonGroup exclusive value={compareBuild} onChange={(e, v) => setCompareBuild?.(v)} size=\"small\">\r\n              <ToggleButton value={false} >\r\n                <small>Show New artifact Stats</small>\r\n              </ToggleButton>\r\n              <ToggleButton value={true} >\r\n                <small>Compare against equipped artifacts</small>\r\n              </ToggleButton>\r\n            </SolidToggleButtonGroup>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}></Grid>\r\n          <Grid item>{!!mainStatAssumptionLevel && <Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card>}</Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardLight>\r\n    <Grid container spacing={1}>\r\n      <Grid item xs={12} sm={6} md={4} >\r\n        <CardLight sx={{ height: \"100%\" }} ><CardContent sx={{ height: \"100%\" }}><Grid container spacing={2} flexDirection=\"column\" height=\"100%\" >\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n            <Grid item key={setKey}>\r\n              <Typography variant=\"subtitle1\" gutterBottom>{artifactSheets?.[setKey].name ?? \"\"}</Typography>\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterKey }} />)}\r\n            </Grid>\r\n          )}\r\n        </Grid></CardContent></CardLight>\r\n      </Grid>\r\n      {allSlotKeys.map(slotKey =>\r\n        !!stats?.equippedArtifacts?.[slotKey] && <Grid item xs={6} md={4} key={stats?.equippedArtifacts?.[slotKey]} >\r\n          <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Badge, Box, Button, CardContent, CardMedia, Divider, Grid, Typography } from \"@mui/material\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { characterStatKeys } from \"../../Util/StatUtil\";\r\nimport WeaponDisplayCard from \"../../Weapon/WeaponDisplayCard\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  character: ICachedCharacter\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, character, character: { constellation, key: characterKey } }: CharacterOverviewPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={3}  >\r\n      {/* Image card with star and name and level */}\r\n      <CardLight >\r\n        <CardMedia src={characterSheet.cardImg} component=\"img\" width=\"100%\" height=\"auto\" />\r\n        <CardContent>\r\n          <Typography variant=\"h4\" >{characterSheet.name} <ImgIcon src={Assets.weaponTypes?.[weaponTypeKey]} /> {StatIcon[elementKey]} </Typography>\r\n          <Typography variant=\"h6\"><Stars stars={characterSheet.star} colored /></Typography>\r\n          <Typography variant=\"h5\">Lvl. {Character.getLevelString(character)}</Typography>\r\n          <Grid container spacing={1} mt={1}>\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Grid item xs={4} key={tKey}>\r\n                <Badge badgeContent={tlvl[tKey] + 1} color={((tKey === \"skill\" && build.skillBoost) || (tKey === \"burst\" && build.burstBoost)) ? \"info\" : \"secondary\"}\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  sx={{\r\n                    \"& > .MuiBadge-badge\": {\r\n                      fontSize: \"1.25em\",\r\n                      padding: \".25em .4em\",\r\n                      borderRadius: \".5em\",\r\n                      lineHeight: 1,\r\n                      height: \"1.25em\"\r\n                    }\r\n                  }}>\r\n                  <Box component=\"img\" src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} width=\"100%\" height=\"auto\" />\r\n                </Badge>\r\n              </Grid>)}\r\n          </Grid>\r\n          <Typography sx={{ textAlign: \"center\", mt: 1 }} variant=\"h6\">{characterSheet.constellationName}</Typography>\r\n          <Grid container spacing={1}>\r\n            {[...Array(6).keys()].map(i =>\r\n              <Grid item xs={4} key={i}>\r\n                <Box component=\"img\" src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img}\r\n                  sx={{\r\n                    cursor: \"pointer\",\r\n                    ...(constellation > i ? {} : { filter: \"brightness(50%)\" })\r\n                  }}\r\n                  width=\"100%\" height=\"auto\"\r\n                  onClick={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Grid>)}\r\n          </Grid>\r\n        </CardContent>\r\n      </CardLight>\r\n    </Grid>\r\n    <Grid item xs={12} md={9} sx={{\r\n      \"> div:not(:last-child)\": { mb: 1 }\r\n    }} >\r\n      <WeaponDisplayCard {...{ charData: { character, characterSheet, equippedBuild, newBuild, characterDispatch }, weaponId: character.equippedWeapon }} />\r\n      <MainStatsCards {...{ characterSheet, character, equippedBuild, newBuild }} />\r\n    </Grid>\r\n  </Grid >\r\n}\r\nconst EDIT = \"Edit Stats\"\r\nconst EXIT = \"EXIT\"\r\n\r\nconst additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\nconst displayStatKeys = [\"characterATK\", \"finalATK\", \"finalHP\", \"finalDEF\"]\r\ndisplayStatKeys.push(...additionalKeys)\r\nconst editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\neditStatKeys.push(...additionalKeys)\r\nconst otherStatKeys: any[] = [];\r\n\r\n[\"physical\", ...allElements].forEach(ele => {\r\n  otherStatKeys.push(`${ele}_dmg_`)\r\n  otherStatKeys.push(`${ele}_res_`)\r\n})\r\notherStatKeys.push(\"stamina\", \"incHeal_\", \"shield_\", \"cdRed_\")\r\n\r\nconst miscStatkeys = [\r\n  \"normal_dmg_\", \"normal_critRate_\",\r\n  \"charged_dmg_\", \"charged_critRate_\",\r\n  \"plunging_dmg_\", \"plunging_critRate_\",\r\n  \"skill_dmg_\", \"skill_critRate_\",\r\n  \"burst_dmg_\", \"burst_critRate_\",\r\n  \"dmg_\", \"electrocharged_dmg_\",\r\n  \"vaporize_dmg_\", \"swirl_dmg_\",\r\n  \"moveSPD_\", \"atkSPD_\",\r\n  \"weakspotDMG_\",\r\n]\r\n\r\nconst resetString = {\r\n  \"characterATK\": \"Override Base ATK\",\r\n  \"characterHP\": \"Override Base HP\",\r\n  \"characterDEF\": \"Override Base DEF\"\r\n}\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nconst statBreakpoint = {\r\n  xs: 12, sm: 6, md: 6, lg: 4,\r\n} as const\r\n\r\n\r\nfunction MainStatsCards({ characterSheet, character, character: { key: characterKey, level, ascension }, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild }\r\n\r\n  return <>\r\n    <StatDisplayCard\r\n      title=\"Main Stats\"\r\n      content={<Grid container columnSpacing={{ xs: 2, lg: 3 }} rowSpacing={1}>\r\n        {displayStatKeys.map(statKey => <Grid item key={statKey} {...statBreakpoint} >\r\n          <StatDisplay statKey={statKey} {...displayNewBuildProps} />\r\n        </Grid>)}\r\n        <Grid item {...statBreakpoint} display=\"flex\" flexDirection=\"row\" justifyContent=\"space-between\">\r\n          <span><b>Specialized:</b> <span>{specializedStatKey && StatIcon[specializedStatKey]} {Stat.getStatName(specializedStatKey)}</span></span>\r\n          <span >{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n        </Grid>\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {characterStatKeys.map(statKey => {\r\n          const defVal = Math.round(characterSheet.getBase(statKey, level, ascension))\r\n          return <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {resetString[statKey]}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? defVal}\r\n              defaultValue={defVal}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n              onReset={() => characterDispatch({ type: \"resetStats\", statKey })}\r\n            />\r\n          </Grid>\r\n        })}\r\n        {editStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatNameWithPercent(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Other Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {otherStatKeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? (statKey === \"stamina\" ? 100 : 0)}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              defaultValue={statKey === \"stamina\" ? 100 : undefined}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n    <StatDisplayCard\r\n      title=\"Misc Stats\"\r\n      content={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey => <Grid item {...statBreakpoint} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Grid>)}\r\n      </Grid>}\r\n      editContent={<Grid container columnSpacing={2} rowSpacing={1}>\r\n        {miscStatkeys.map(statKey =>\r\n          <Grid item xs={12} lg={6} key={statKey}>\r\n            <StatInput\r\n              name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n              placeholder={Stat.getStatNameRaw(statKey)}\r\n              value={character.bonusStats[statKey] ?? 0}\r\n              percent={Stat.getStatUnit(statKey) === \"%\"}\r\n              onValueChange={value => characterDispatch({ type: \"editStats\", statKey, value })}\r\n            />\r\n          </Grid>)}\r\n      </Grid>}\r\n    />\r\n  </>\r\n}\r\nfunction StatDisplayCard({ title, content, editContent }) {\r\n  const [edit, setedit] = useState(false)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Box display=\"flex\" justifyContent=\"space-between\">\r\n        <Typography variant=\"subtitle1\">{title}</Typography>\r\n        <Button size=\"small\" color={edit ? \"error\" : \"info\"} onClick={() => setedit(!edit)} >\r\n          <span><FontAwesomeIcon icon={edit ? faSave : faEdit} /> {edit ? EXIT : EDIT}</span>\r\n        </Button>\r\n      </Box>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      {edit ? editContent : content}\r\n    </CardContent>\r\n  </CardLight>\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Box, CardActionArea, CardContent, Divider, Grid, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useCallback, useContext, useState } from 'react';\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport BootstrapTooltip from \"../../Components/BootstrapTooltip\";\r\nimport CardDark from \"../../Components/Card/CardDark\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport ColorText from \"../../Components/ColoredText\";\r\nimport ConditionalWrapper from \"../../Components/ConditionalWrapper\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport DropdownButton from \"../../Components/DropdownMenu/DropdownButton\";\r\nimport FieldDisplay, { FieldDisplayList } from \"../../Components/FieldDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport useCharacterReducer from \"../../ReactHooks/useCharacterReducer\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n}\r\nexport default function CharacterTalentPane({ characterSheet, character, character: { ascension, constellation, key: characterKey } }: CharacterTalentPaneProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <ReactionDisplay characterSheet={characterSheet} />\r\n    <Grid container spacing={1} sx={{ mb: 1 }}>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Grid item key={tKey} xs={12} md={6} lg={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Grid>}\r\n      {!!characterSheet.getTalentOfKey(\"passive\", build?.characterEle) && <Grid item xs={12} md={6} lg={4} >\r\n        <SkillDisplayCard\r\n          characterSheet={characterSheet}\r\n          character={character}\r\n          characterDispatch={characterDispatch}\r\n          talentKey=\"passive\"\r\n          subtitle=\"Passive\"\r\n        />\r\n      </Grid>}\r\n    </Grid>\r\n    <Grid container spacing={1}>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Grid item key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} >\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n    <Typography variant=\"h6\" sx={{ textAlign: \"center\" }}>Constellation Lv. {constellation}</Typography>\r\n    <Grid container spacing={1}>\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Grid item key={i} xs={12} md={4}\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            characterSheet={characterSheet}\r\n            character={character}\r\n            characterDispatch={characterDispatch}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet }: { characterSheet: CharacterSheet }) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <CardLight sx={{ mb: 1 }}>\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Grid item key={key}><Ele stats={build} /></Grid>\r\n        })}\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"superconduct.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.cryo} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"electrocharged.main\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.hydro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <Typography color=\"overloaded.main\" >{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.pyro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Typography>\r\n  </CardContent></CardDark>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} {StatIcon.pyro} + {StatIcon.anemo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} {StatIcon.cryo} + {StatIcon.anemo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} {StatIcon.hydro} + {StatIcon.anemo}</span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={swirlEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <BootstrapTooltip placement=\"top\" title={<Typography>Claymores, Plunging Attacks and <ColorText color=\"geo\">Geo DMG</ColorText></Typography>}>\r\n    <Box component=\"span\" sx={{ cursor: \"help\" }}><FontAwesomeIcon icon={faQuestionCircle} /></Box>\r\n  </BootstrapTooltip>\r\n\r\n  return <CardDark><CardContent sx={{ p: 1 }}>\r\n    <ColorText color=\"shattered\">{Stat.getStatName(sKey)} {StatIcon.hydro}+{StatIcon.cryo}+ <ColorText color=\"physical\"><small>Heavy Attack{information} </small></ColorText> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></ColorText>\r\n  </CardContent></CardDark>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <ColorText color=\"crystalize\">{Stat.getStatName(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</ColorText>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <CardDark sx={{ display: \"flex\" }}>\r\n    <DropdownButton size=\"small\" title={crystalizeEleToDisplay[ele]} color=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <MenuItem key={key} selected={ele === key} disabled={ele === key} onClick={() => setele(key)}>{element}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Box sx={{ color: `${ele}.main`, p: 1 }}><strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></Box>\r\n  </CardDark>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICachedCharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { talent, ascension, key: characterKey }, characterDispatch, talentKey, subtitle, onClickTitle }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const actionWrapeprFunc = useCallback(\r\n    children => <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>,\r\n    [onClickTitle],\r\n  )\r\n\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  if (talentKey in talent) {\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    const talentLvlKey = talent[talentKey] + levelBoost\r\n    const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n      talent[tKey] = newTalentLevelKey\r\n      characterDispatch({ talent })\r\n    }\r\n    header = <>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <DropdownButton fullWidth title={`Talent Lv. ${talentLvlKey}`} color={levelBoost ? \"info\" : \"primary\"}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <MenuItem key={i} selected={talent[talentKey] === (i + 1)} disabled={talent[talentKey] === (i + 1)} onClick={() => setTalentLevel(talentKey, i + 1)}>Talent Lv. {i + levelBoost + 1}</MenuItem>)}\r\n        </DropdownButton>\r\n      </CardContent>\r\n      <Divider />\r\n    </>\r\n\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const talentStatsFields = talentStats && statsToFields(talentStats, build)\r\n  const statsEle = talentStatsFields && !!talentStatsFields.length &&\r\n    <FieldDisplayList >\r\n      {talentStatsFields.map((field, i) =>\r\n        <FieldDisplay key={i} field={field} />)}\r\n    </FieldDisplayList>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n\r\n  return <CardLight sx={{ height: \"100%\" }}>\r\n    {header}\r\n    <CardContent>\r\n      <ConditionalWrapper condition={!!onClickTitle} wrapper={actionWrapeprFunc} >\r\n        <Grid container sx={{ flexWrap: \"nowrap\" }}>\r\n          <Grid item>\r\n            <Box component=\"img\" src={talentSheet?.img} sx={{ width: 60, height: \"auto\" }} />\r\n          </Grid>\r\n          <Grid item flexGrow={1} sx={{ pl: 1 }}>\r\n            <Typography variant=\"h6\">{talentSheet?.name}</Typography>\r\n            <Typography variant=\"subtitle1\">{subtitle}</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </ConditionalWrapper>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterKey, equippedBuild, newBuild }} /> : null}\r\n      {statsEle}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { Button, ButtonGroup, Card, CardContent, Divider, Grid, MenuItem, Skeleton, Tab, Tabs, Typography } from '@mui/material';\r\nimport { Suspense, useCallback, useContext, useEffect, useMemo, useState } from 'react';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport { buildContext } from '../Build/Build';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport { CharacterSelectionModal } from '../Components/Character/CharacterSelectionModal';\r\nimport ThumbSide from '../Components/Character/ThumbSide';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../Components/CustomNumberInput';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport { EnemyExpandCard } from '../Components/EnemyEditor';\r\nimport FormulaCalcCard from '../Components/FormulaCalcCard';\r\nimport { DamageOptionsCard } from '../Components/HitModeEditor';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { ambiguousLevel, ascensionMaxLevel, milestoneLevels } from '../Data/LevelData';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport useCharacterReducer from '../ReactHooks/useCharacterReducer';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { ICachedCharacter } from '../Types/character';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport CharacterSheet from './CharacterSheet';\r\nimport { initialCharacter } from './CharacterUtil';\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  value: string;\r\n  current: string | boolean;\r\n}\r\n\r\nfunction TabPanel({ children, current, value, ...other }: TabPanelProps) {\r\n  if (value !== current) return null\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}>\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== current}\r\n      id={`simple-tabpanel-${value}`}\r\n      aria-labelledby={`simple-tab-${value}`}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </div>\r\n  </Suspense>\r\n}\r\n\r\ntype CharacterDisplayCardProps = {\r\n  characterKey: CharacterKey,\r\n  setCharacterKey?: (any: CharacterKey) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey, setCharacterKey, footer, newBuild: propNewBuild, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [compareBuild, setCompareBuild] = useState(false)\r\n  // Use databaseToken anywhere `database._get*` is used\r\n  // Use onDatabaseUpdate when `following` database entries\r\n  const [databaseToken, onDatabaseUpdate] = useForceUpdate()\r\n\r\n  // TODO: We probably don't need to fetch all sheets,\r\n  // though this wouldn't affect the performance currently.\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterSheets = usePromise(CharacterSheet.getAll(), [])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const character = useMemo(() =>\r\n    databaseToken && (database._getChar(characterKey) ?? initialCharacter(characterKey)),\r\n    [characterKey, databaseToken, database])\r\n  const weapon = useMemo(() =>\r\n    databaseToken && database._getWeapon(character.equippedWeapon),\r\n    [character.equippedWeapon, databaseToken, database])\r\n\r\n  const characterSheet = characterSheets?.[characterKey]\r\n  const weaponSheet = weapon ? weaponSheets?.[weapon.key] : undefined\r\n  const sheets = characterSheet && weaponSheet && artifactSheets && { characterSheet, weaponSheet, artifactSheets }\r\n\r\n  useEffect(() => {\r\n    return database.followChar(characterKey, onDatabaseUpdate)\r\n  }, [characterKey, onDatabaseUpdate, database])\r\n\r\n  useEffect(() => database.followWeapon(character.equippedWeapon, onDatabaseUpdate),\r\n    [character.equippedWeapon, onDatabaseUpdate, database])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return undefined\r\n    return deepClone(propNewBuild)\r\n  }, [propNewBuild])\r\n\r\n  // set initial state to false, because it fails to check validity of the tab values on 1st load\r\n  const [tab, settab] = useState<string | boolean>(tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\"))\r\n\r\n  const onTab = useCallback((e, v) => settab(v), [settab])\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => databaseToken && characterSheet && weaponSheet && artifactSheets &&\r\n    Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel),\r\n    [databaseToken, character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel, database])\r\n\r\n  // main CharacterDisplayCard\r\n  return <CardDark >\r\n    <buildContext.Provider value={{ newBuild, equippedBuild, compareBuild, setCompareBuild }}>\r\n      <CardContent sx={{\r\n        \"> div:not(:last-child)\": { mb: 1 },\r\n      }}>\r\n        <Grid container spacing={1}>\r\n          <Grid item flexGrow={1}>\r\n            <CharSelectDropdown characterSheet={characterSheet} character={character} setCharacterKey={setCharacterKey} />\r\n          </Grid>\r\n          {!!mainStatAssumptionLevel && <Grid item><Card sx={{ p: 1, bgcolor: t => t.palette.warning.dark }}><Typography><strong>Assume Main Stats are Level {mainStatAssumptionLevel}</strong></Typography></Card></Grid>}\r\n          {!!onClose && <Grid item>\r\n            <CloseButton onClick={onClose} />\r\n          </Grid>}\r\n        </Grid>\r\n        <CardLight>\r\n          <Tabs\r\n            onChange={onTab}\r\n            value={tab}\r\n            variant=\"fullWidth\"\r\n          >\r\n            <Tab value=\"character\" label=\"Character\" />\r\n            {!!newBuild && <Tab value=\"newartifacts\" label=\"New Artifacts\" />}\r\n            <Tab value=\"artifacts\" label={newBuild ? \"Current Artifacts\" : \"Artifacts\"} />\r\n            <Tab value=\"talent\" label=\"Talents\" />\r\n          </Tabs>\r\n        </CardLight>\r\n        <DamageOptionsCard character={character} />\r\n        {!!sheets && <FormulaCalcCard sheets={sheets} />}\r\n        <EnemyExpandCard character={character} />\r\n\r\n        {/* Character Panel */}\r\n        {characterSheet && <TabPanel value=\"character\" current={tab}>\r\n          <CharacterOverviewPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n        {/* Artifacts Panel */}\r\n        {sheets && <buildContext.Provider value={{ newBuild: undefined, equippedBuild, compareBuild, setCompareBuild }}>\r\n          <TabPanel value=\"artifacts\" current={tab} >\r\n            <CharacterArtifactPane sheets={sheets} character={character} />\r\n          </TabPanel >\r\n        </buildContext.Provider>}\r\n        {/* new build panel */}\r\n        {newBuild && sheets && <TabPanel value=\"newartifacts\" current={tab} >\r\n          <CharacterArtifactPane sheets={sheets} character={character} />\r\n        </TabPanel >}\r\n        {/* talent panel */}\r\n        {characterSheet && <TabPanel value=\"talent\" current={tab}>\r\n          <CharacterTalentPane characterSheet={characterSheet} character={character} />\r\n        </TabPanel >}\r\n      </CardContent>\r\n      {!!footer && <Divider />}\r\n      {footer && <CardContent sx={{ py: 1 }}>\r\n        {footer}\r\n      </CardContent>}\r\n    </buildContext.Provider>\r\n  </CardDark>\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  character: ICachedCharacter\r\n  disabled?: boolean\r\n  setCharacterKey?: (any: CharacterKey) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, character, character: { key: characterKey, elementKey = \"anemo\", level = 1, ascension = 0 }, disabled, setCharacterKey }: CharSelectDropdownProps) {\r\n  const [showModal, setshowModal] = useState(false)\r\n  const characterDispatch = useCharacterReducer(characterKey)\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <ImgIcon src={characterSheet.thumbImg} sx={{ mr: 1 }} />\r\n    {characterSheet.name}\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{!disabled ? <>\r\n    <CharacterSelectionModal show={showModal} onHide={() => setshowModal(false)} onSelect={setCharacterKey} />\r\n    <ButtonGroup sx={{ bgcolor: t => t.palette.contentDark.main }} >\r\n      <Button disabled={!setCharacterKey} onClick={() => setshowModal(true)} startIcon={<ThumbSide src={characterSheet?.thumbImgSide} />} >{characterSheet?.name ?? \"Select a Character\"}</Button>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <DropdownButton title={ElementalData[elementKey].name}>\r\n        {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n          <MenuItem key={eleKey} selected={elementKey === eleKey} disabled={elementKey === eleKey} onClick={() => characterDispatch({ elementKey: eleKey })}>\r\n            <strong>{ElementalData[eleKey].name}</strong></MenuItem>)}\r\n      </DropdownButton>}\r\n      <CustomNumberInputButtonGroupWrapper >\r\n        <CustomNumberInput onChange={setLevel} value={level}\r\n          startAdornment=\"Lvl. \"\r\n          inputProps={{ min: 1, max: 90, sx: { textAlign: \"center\" } }}\r\n          sx={{ width: \"100%\", height: \"100%\", pl: 2 }}\r\n          disabled={!characterSheet} />\r\n      </CustomNumberInputButtonGroupWrapper>\r\n      <Button sx={{ pl: 1 }} disabled={!ambiguousLevel(level) || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n      <DropdownButton title={\"Select Level\"} disabled={!characterSheet}>\r\n        {milestoneLevels.map(([lv, as]) => {\r\n          const sameLevel = lv === ascensionMaxLevel[as]\r\n          const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n          const selected = lv === level && as === ascension\r\n          return <MenuItem key={`${lv}/${as}`} selected={selected} disabled={selected} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</MenuItem>\r\n        })}\r\n      </DropdownButton>\r\n    </ButtonGroup>\r\n  </> : <Typography variant=\"h6\">{HeaderIconDisplay} {characterSheet && Character.getLevelString(character)}</Typography>}</>\r\n}"],"sourceRoot":""}