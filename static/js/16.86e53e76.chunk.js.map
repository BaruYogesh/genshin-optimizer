{"version":3,"sources":["Components/FieldDisplay.tsx","Components/CustomFormControl.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Character/StatInput.tsx","Components/StatDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx"],"names":["FieldDisplay","field","index","className","useContext","buildContext","newBuild","equippedBuild","compareBuild","build","canShow","useMemo","fixedVal","fixed","fieldVal","value","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","parseInt","toFixed","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","icon","faQuestionCircle","style","cursor","unit","Item","variant","CustomFormControl","onChange","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","ConditionalSelector","conditional","conditionalValue","setConditional","name","stats","conditionalNum","conditionalStateKey","states","Object","values","text","evalIfFunc","maxStack","badge","Badge","Dropdown","Toggle","size","whiteSpace","Menu","onClick","entries","map","i","stateKey","condial","Fragment","Array","keys","v","stack","Button","faCheckSquare","faSquare","ConditionalDisplay","characterDispatch","fieldClassName","Conditional","resolve","conditionalStats","fields","conditionalFields","displayFields","statsToFields","condV","layeredAssignment","conditionalValues","deletePropPath","objClearEmpties","Card","bg","Header","ListGroup","DocumentDisplay","sections","section","talentText","length","StatInput","prependEle","defaultValue","onValueChange","percent","restProps","Prepend","Text","Append","Boolean","pointerEvents","faUndo","DisplayStatDiff","label","val","oldVal","oldText","diffText","xs","StatDisplay","characterSheet","weaponSheet","character","statKey","usePromise","isArray","Formula","get","invalid","getStatValueWithOverride","characterHP","characterDEF","characterATK","weaponATK","Stat","getStatUnit","fixedUnit","StatIcon","getStatName","labelVariant","hasOverride","SetEffectDisplay","setKey","setNumKey","sheet","ArtifactSheet","setEffectText","setEffectDesc","setStats","setNumStats","setStatsFields","document","setEffectDocument","infusionVals","uncoloredEleIcons","pyro","cryo","InfusionAuraDropdown","infusionAura","isMelee","ReactionToggle","reactionMode","charEleKey","characterEle","includes","s","hydro","HitModeToggle","hitMode","m","CalculationDisplay","sheets","displayStatKeys","getDisplayStatKeys","sectionKey","header","getFormulaTargetsDisplayHeading","Body","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","reverse","as","eventKey","printStat","Collapse","subKey","expand","formulaField","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","DamageOptionsAndCalculation","href","rel","xl","getStatNameRaw","getBaseStatValue","allElements","eleKey","immunityStatKey","elementImmunity","StatDisplayComponent","statsDisplayKeys","cardbg","sectionValues","md","JSON","stringify"],"mappings":"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","file":"static/js/16.86e53e76.chunk.js","sourcesContent":["import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { buildContext } from \"../Build/Build\";\r\nimport Character from \"../Character/Character\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, className = \"p-2\" }: { field: IFieldDisplay, index: number, className?: string }) {\r\n  const { newBuild, equippedBuild, compareBuild } = useContext(buildContext)\r\n  const build = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => build ? field?.canShow?.(build) : false, [field, build])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", build)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      //compareAgainstEquipped\r\n      if (compareBuild && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareBuild, fixedVal, equippedBuild, field, build])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", build), [field, build])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", build), [field, build])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, build])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", build), [field, build])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled?: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useContext, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, characterDispatch, fieldClassName }: ConditionalDisplayProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} field={field} className={fieldClassName} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { useContext } from \"react\"\r\nimport { ListGroup } from \"react-bootstrap\"\r\nimport { buildContext } from \"../Build/Build\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch }: SkillDisplayCardProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div className=\"w-100\">{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} field={field} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay conditional={section.conditional} characterDispatch={characterDispatch} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\ntype StatInputInput = {\r\n  name: Displayable,\r\n  prependEle?: Displayable,\r\n  value: number,\r\n  placeholder: string,\r\n  defaultValue: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  className?: any,\r\n}\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent = false, disabled = false, ...restProps }: StatInputInput) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport StatIcon from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICachedCharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\" //can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey) ?? invalid\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      unit = Character.getTalentFieldValue(field, \"unit\", build,\"\")\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} field={field} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {document ? <DocumentDisplay sections={document} characterDispatch={characterDispatch} /> : null}\r\n  </>\r\n}\r\n","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\";\r\nimport { buildContext } from \"../../Build/Build\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../../Components/StatIcon\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat, { FormulaDisplay } from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICachedCharacter } from \"../../Types/character\";\r\nimport { allElements, ArtifactSetKey } from \"../../Types/consts\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport type { characterReducerAction } from \"../CharacterDisplayCard\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICachedCharacter,\r\n  characterDispatch: (any: characterReducerAction) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\" }, characterDispatch, className, disabled = false }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"} disabled={disabled}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICachedCharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any: characterReducerAction) => void,\r\n  className: string\r\n  disabled?: boolean\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = null, infusionAura }, build, characterDispatch, className, disabled = false }: ReactionToggleProps) {\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={v(!reactionMode)} disabled={disabled}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={v(reactionMode === \"pyro_vaporize\")} disabled={disabled}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) {StatIcon.hydro}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={v(reactionMode === \"pyro_melt\")} disabled={disabled}>\r\n      <span className=\"text-melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={v(reactionMode === \"hydro_vaporize\")} disabled={disabled}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={v(reactionMode === \"cryo_melt\")} disabled={disabled}>\r\n      <span className=\"text-melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className, disabled = false }) {\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className} >\r\n    <ToggleButton value=\"avgHit\" variant={v(hitMode === \"avgHit\")} disabled={disabled} >Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={v(hitMode === \"hit\")} disabled={disabled} >Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={v(hitMode === \"critHit\")} disabled={disabled} >Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}{fieldUnit}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICachedCharacter,\r\n  characterDispatch: (any: characterReducerAction) => void,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ sheets, sheets: { characterSheet, weaponSheet }, character, character: { hitMode }, characterDispatch, className }: DamageOptionsAndCalculationProps) {\r\n  const { newBuild, equippedBuild } = useContext(buildContext)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay sheets={sheets} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICachedCharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport { ArtifactSetKey } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  character: ICachedCharacter\r\n  statsDisplayKeys: any,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ sheets, sheets: { characterSheet, weaponSheet }, character, equippedBuild, newBuild, statsDisplayKeys, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}"],"sourceRoot":""}