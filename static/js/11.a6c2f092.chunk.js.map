{"version":3,"sources":["Build/Build.js","Character/Character.js","Weapon/Weapon.js","Assets/Element_Anemo.png","Assets/Assets.js","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Components/CustomFormControl.js","Components/StarDisplay.js","StatDependency.js","Data/WeaponData.js","Data/CharacterData.js","Components/StatIcon.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","Components/ConditionalSelector.js","Components/CharacterSelection.js","Character/StatInput.js","Components/StatDisplay.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","Character/CharacterDisplay/DamageOptionsAndCalculation.js","Character/CharacterDisplay/StatDisplayComponent.js","Character/CharacterCard.js","Util/TimeUtil.js","Build/BuildWorker.js","Build/BuildDisplay.js"],"names":["calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","getTalentStatKey","skillKey","stats","elemental","hitMode","autoInfused","reactionMode","characterEle","weaponType","ElementalData","includes","eleKey","getTalentStatKeyVariant","Character","this","Error","characterKey","talentKey","formula","formulaDB","getCDataObj","formulaKey","tk","find","character","CharacterDatabase","get","equippedArtifacts","values","forEach","artid","ArtifactDatabase","moveToNewLocation","remove","getCharacterDataImport","CharacterDataImport","getBaseStatValue","statKey","defVal","levelKey","getSpecializedStatKey","getSpeicalizedStatVal","Weapon","getWeaponMainStatValWithOverride","weapon","getLevel","characterStatBase","characterObj","baseStat","getIndexFromlevelkey","charKey","CharacterData","getElementalName","elementalKey","name","getAllCharacterKeys","getName","getStar","star","getElementalKey","elementKey","getElementalKeys","getElementalKeysWithoutPhysical","filter","e","getWeaponTypeKey","weaponTypeKey","getConstellationName","constellationName","getTitles","titles","getlevelKeys","LevelsData","getlevelNames","indexOf","level","getAscension","asend","getSpecializedStat","specializeStat","value","getThumb","thumbImg","getCard","cardImg","getTalentImg","getTalent","img","getConstellationImg","constIndex","talent","getTalentName","getTalentLevelBoost","constellation","talents","talentBoost","boostEntry","getTalentDocument","document","getTalentDocumentSections","section","getTalentField","sectionIndex","fieldIndex","field","fields","getTalentFieldValue","getTalentStats","talentStats","getTalentStatsAll","statsArr","getTalentConditional","conditionalKey","sections","cond","tempCond","conditional","getTalentConditionalStats","conditionalNum","ConditionalsUtil","getConditionalProp","stacks","fromEntries","val","getTalentConditionalFields","isAutoElemental","isAutoInfusable","auto","infusable","hasTalentPage","Boolean","getDisplayStatKeys","basicKeys","transReactions","deepClone","ElementToReactionKeys","charFormulas","genericAvgHit","reactions","startsWith","replace","hasOverride","baseStatOverrides","getStatValueWithOverride","equipArtifacts","artifactIds","artIdsOnCharacter","artIdsNotOnCharacter","Artifact","getSlotKeys","artNotOnChar","location","artOnChar","notCharLoc","id","equipArtifact","update","calculateBuild","art","initialStats","calculateCharacterWithWeaponStats","calculateBuildWithObjs","artifactConditionals","setToSlots","artifactSetEffectsStats","getArtifactSetEffectsStats","mainStatKey","getMainStatValue","numStars","artifactsAssumeFull","substats","substat","stat","statVal","srcKey","setNumKey","srcKey2","parseInt","getConditionalStats","dependencies","GetDependencies","modifiers","PreprocessFormulas","finalStats","mergeStats","modifier","mkey","multiplier","talentLevelKeys","talentConditionals","ascension","statKeys","tlvl","overrides","hasOwnProperty","specializedStatVal","specialStatKey","s","weaponSubKey","getWeaponSubStatKey","getWeaponSubStatValWithOverride","getWeaponBonusStat","refineIndex","getWeaponConditionalStat","getWeaponDataImport","WeaponDataImport","getLevelName","LevelNameData","getLevelIndex","WeaponLevelKeys","getWeaponName","weaponKey","WeaponData","getWeaponRarity","rarity","getWeaponPassiveName","passiveName","getWeaponPassiveDescription","charFinalStats","passiveDescription","getWeaponDescription","description","getWeaponConditional","getWeaponImg","getWeaponMainStatVal","baseStats","main","getWeaponSubStatVal","sub","subStatKey","getWeaponsOfType","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal","objMultiplication","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CustomFormControl","float","placeholder","onValueChange","disabled","allowEmpty","useState","focus","setFocus","props","type","className","toString","onChange","target","parseFloat","onFocus","onBlur","aria-label","StarIcon","icon","faStar","Stars","stars","colored","Array","_","GetFormulaDependency","dependency","Proxy","prop","receiver","add","formulaKeyDependency","Formulas","StatData","InsertDependencies","k","then","imp","default","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","StatIcon","characterHP","faTint","finalHP","hp_","hp","baseATK","faFistRaised","characterATK","finalATK","atk_","atk","characterDEF","faShieldAlt","finalDEF","def_","def","eleMas","faMagic","faDice","faDiceD20","faSync","heal_","faFirstAid","StatIconEle","_assertThisInitialized","self","ReferenceError","ConditionalSelector","setConditional","defEle","isArray","selectedConditionalNum","selectedConditional","curConditional","maxStack","text","condition","badge","variant","count","Toggle","size","Menu","Item","onClick","condial","Fragment","v","stack","tempcount","faCheckSquare","faSquare","CharacterSelectionDropdownList","onSelect","getCharacterKeyList","sort","a","b","StatInput","prependEle","defaultValue","percent","restProps","Prepend","Text","Append","undefined","placement","overlay","style","pointerEvents","faUndo","DisplayStatDiff","label","oldVal","fixed","unit","diff","oldText","diffText","toFixed","xs","StatDisplay","equippedBuild","newBuild","editable","build","invalid","Stat","getStatUnit","fixedUnit","getStatName","labelVariant","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","_typeof","obj","Symbol","iterator","constructor","prototype","_possibleConstructorReturn","call","assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Date","Super","NewTarget","arguments","apply","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","writable","configurable","ReactionToggle","setReactionMode","charEleKey","src","HitModeToggle","setHitMode","CalculationDisplay","header","bg","Header","Body","subFormulaKeys","getPrintableFormulaStatKeyList","reverse","as","Card","eventKey","printStat","Collapse","subKey","printFormula","talentField","fieldText","fieldVariant","fieldFormulaText","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","DamageOptionsAndCalculation","setState","setOverride","r","Button","href","rel","xl","getStatNameRaw","immunityStatKey","elementImmunity","m","StatDisplayComponent","statsDisplayKeys","cardbg","md","JSON","stringify","CharacterCard","onEdit","onDelete","cardClassName","footer","useReducer","x","forceUpdate","useEffect","Promise","all","getDataImport","weaponName","weaponMainVal","weaponSubVal","weaponLevelName","weaponPassiveName","faEdit","faTrashAlt","thumbnail","getSetEffects","arr","artifactSetName","getSetName","highestNum","Math","max","Footer","Link","to","pathname","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","Worker_fn","Worker","CharacterDisplayCardPromise","CharacterDisplayCard","lazy","warningBuildNumber","maxBuildsToShowList","BuildDisplay","forceUpdateBuildDisplay","selectCharacter","getInitialState","state","buildSetting","maxBuildsToShow","showCharacterModal","splitArtifacts","artifactDatabase","getArtifactDatabase","useLockedArts","lock","split","splitArtifactsBySlot","artifactsSlotsToSelectMainStats","mainStat","changeMainStat","autoGenerateBuilds","changeSetFilterKey","newkey","setsNumArr","dropdownitemsForStar","getSetsByMaxStarEntries","setobj","some","getSetEffectsObj","artsAccountedOther","cur","ind","every","Dropdown","totBuildNumber","generateBuilds","builds","generationProgress","generationDuration","generatingBuilds","statFilters","ascending","optimizationTarget","getFormulaPath","artifactSetEffects","getAllArtifactSetEffectsObj","artArr","mainStatVal","minFilters","min","maxFilters","data","worker","terminate","onmessage","progress","timing","ReactGA","category","variable","postMessage","BuildGeneratorEditorCard","characterName","artsAccounted","totalBuildNumberString","toLocaleString","generationProgressString","buildAlert","progPercent","Alert","ProgressBar","now","characterDropDown","DropdownButton","title","Divider","CharacterSelection","cKey","Row","Col","lg","HitModeCard","StatFilterCard","setStatFilters","sFs","showArtCondModal","Badge","setNum","ButtonGroup","ItemText","setNkey","setStats","getArtifactSetNumStats","getSetEffectConditional","getConditionalNum","conditionalElement","getSetEffectText","getSlotNameWithIcon","getStatNameWithPercent","getSlotMainStatKeys","SortByStatDropdown","updater","closeModal","modalBuild","BuildModal","Modal","show","onHide","contentClassName","Suspense","fallback","setCharacterKey","onClose","closeArtCondModal","ArtConditionalModal","artSetKeyList","flat","faTimes","getPieceIcon","getPieces","getRarityArr","pop","Image","componentDidUpdate","prevProps","prevState","saveToLocalStorage","localStorage","loadFromLocalStorage","pageview","Container","ListGroup","ArtifactDisplayItem","join","React","Component","sortByText","getStatVariant","getStatNamePretty","drop","align","minWidth","faSortAmountDownAlt","faSortAmountUp","StatFilterItem","close","setFilter","isFloat","inputProps","minInputProps","maxInputProps","InputGroup","sKey","faTrash","char","remainingKeys","action","slotarr1","slotarr","getSlotIcon","initialState"],"mappings":"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","file":"static/js/11.a6c2f092.chunk.js","sourcesContent":["import ElementalData from \"../Data/ElementalData\"\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot, setFilters) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet = {}\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey].push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet[null]) artifactsBySet[null].push(artifact)\r\n        else artifactsBySet[null] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu = {}, result = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot, setFilters) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1].length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey]) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The character. Will extract hitMode, autoInfused...\r\n  * @param {*} elemental - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, elemental = false) {\r\n  const { hitMode = \"\", autoInfused = false, reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (Object.keys(ElementalData).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, elemental = false) {\r\n  if (Object.keys(ElementalData).includes(skillKey)) return skillKey\r\n  const { autoInfused = false, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  let { reactionMode } = stats\r\n  //reactionMode can be one of pyro_vaporize, pyro_melt, hydro_vaporize,cryo_melt\r\n  if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode))\r\n    reactionMode = \"vaporize\"\r\n  else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode))\r\n    reactionMode = \"melt\"\r\n  if (!elemental) elemental = weaponType === \"catalyst\" || autoInfused\r\n  let eleKey = \"physical\"\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || elemental)\r\n    eleKey = (reactionMode ? reactionMode : characterEle)\r\n  return eleKey\r\n}","import Artifact from \"../Artifact/Artifact\";\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\";\r\nimport { CharacterData, CharacterDataImport, characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport ConditionalsUtil from \"../Util/ConditionalsUtil\";\r\nimport { deepClone } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n  static getCharacterDataImport = () => CharacterDataImport\r\n  static getBaseStatValue = (character, statKey, defVal = 0) => {\r\n    let { characterKey, levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return this.getSpecializedStatKey(characterKey);\r\n    if (statKey === \"specializedStatVal\") return this.getSpeicalizedStatVal(characterKey, levelKey)\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return this.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    let characterObj = this.getCDataObj(characterKey)\r\n    if (characterObj && statKey in characterObj.baseStat) return characterObj.baseStat[statKey][this.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n\r\n  static getCDataObj = (charKey) => CharacterData[charKey];\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n  static getAllCharacterKeys = () => Object.keys(CharacterData)\r\n\r\n  static getName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.name || defVal)\r\n  static getStar = (charKey, defVal = 0) => (this.getCDataObj(charKey)?.star || defVal)\r\n  static getElementalKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.elementKey || defVal)\r\n  static getElementalKeys = () => Object.keys(ElementalData)\r\n  static getElementalKeysWithoutPhysical = () => this.getElementalKeys().filter(e => e !== \"physical\")\r\n  static getWeaponTypeKey = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.weaponTypeKey || defVal)\r\n  static getConstellationName = (charKey, defVal = \"\") => (this.getCDataObj(charKey)?.constellationName || defVal)\r\n  static getTitles = (charKey, defVal = []) => (this.getCDataObj(charKey)?.titles || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = () => Object.keys(LevelsData)\r\n  static getlevelNames = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getIndexFromlevelkey = (levelKey) => this.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  //SPECIALIZED STAT\r\n  static getSpecializedStat = (charKey) => this.getCDataObj(charKey)?.specializeStat;\r\n  static getSpecializedStatKey = (charKey) => this.getSpecializedStat(charKey)?.key;\r\n  static getSpeicalizedStatVal = (charKey, levelKey) => this.getSpecializedStat(charKey)?.value?.[this.getIndexFromlevelkey(levelKey)]\r\n  //ASSETS\r\n  static getThumb = (charKey, defVal = null) => this.getCDataObj(charKey)?.thumbImg || defVal\r\n  static getCard = (charKey, defVal = null) => this.getCDataObj(charKey)?.cardImg || defVal\r\n  static getTalentImg = (charKey, talentKey, defVal = null) => this.getTalent(charKey, talentKey)?.img || defVal\r\n  static getConstellationImg = (charKey, constIndex, defVal = null) => this.getCDataObj(charKey)?.talent?.[`constellation${constIndex + 1}`]?.img || defVal\r\n\r\n  //talents\r\n  static getTalent = (charKey, talentKey, defVal = {}) => this.getCDataObj(charKey)?.talent?.[talentKey] || defVal\r\n  static getTalentName = (charKey, talentKey, defVal = \"\") => this.getTalent(charKey, talentKey)?.name || defVal\r\n\r\n  static getTalentLevelBoost = (characterKey, talentKey, constellation, defVal = 0) => {\r\n    //so far we only get level boost from constellations, so only burst and skills.\r\n    if (talentKey !== \"burst\" && talentKey !== \"skill\") return defVal\r\n    let talents = this.getCDataObj(characterKey)?.talent || {}\r\n    for (let i = 1; i <= constellation; i++) {\r\n      let talentBoost = talents[`constellation${i}`]?.talentBoost || {};\r\n      let boostEntry = Object.entries(talentBoost).find(([key, val]) => key === talentKey)\r\n      if (boostEntry) return boostEntry[1]\r\n    }\r\n    return defVal\r\n  }\r\n\r\n  static getTalentDocument = (charKey, talentKey, defVal = []) => this.getTalent(charKey, talentKey)?.document || defVal\r\n  static getTalentDocumentSections = (stats, talentKey) =>\r\n    this.getTalentDocument(stats.characterKey, talentKey).map(section => typeof section === \"function\" ? section(stats) : section)\r\n\r\n  static getTalentField = (stats, talentKey, sectionIndex, fieldIndex, defVal = {}) => {\r\n    if (!stats) return defVal\r\n    const field = this.getTalentDocumentSections(stats, talentKey)?.[sectionIndex]?.fields?.[fieldIndex]\r\n    if (!field) return defVal\r\n    return typeof field === \"function\" ? field(stats) : field\r\n  }\r\n  static getTalentFieldValue = (field, key, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    return typeof field?.[key] === \"function\" ? field[key](stats) : field[key]\r\n  }\r\n\r\n  static getTalentStats = (charKey, talentKey, stats, defVal = null) => {\r\n    const talentStats = this.getTalent(charKey, talentKey)?.stats\r\n    if (typeof talentStats === \"function\")\r\n      return talentStats(stats)\r\n    return talentStats || defVal\r\n  }\r\n  static getTalentStatsAll = (charKey, stats) => {\r\n    const talents = this.getCDataObj(charKey)?.talent || {}\r\n    const statsArr = []\r\n    Object.keys(talents).forEach(talentKey => {\r\n      const talentStats = this.getTalentStats(charKey, talentKey, stats)\r\n      if (talentStats) statsArr.push(talentStats)\r\n    })\r\n    return statsArr\r\n  }\r\n  static getTalentConditional = (stats, talentKey, conditionalKey, defVal = null) => {\r\n    const sections = this.getTalentDocumentSections(stats, talentKey)\r\n    let cond = null\r\n    for (const section of sections) {\r\n      let tempCond = section.conditional\r\n      if (typeof tempCond === \"function\")\r\n        tempCond = tempCond(stats)\r\n      if (tempCond?.conditionalKey === conditionalKey) {\r\n        cond = tempCond\r\n        break;\r\n      }\r\n    }\r\n    return cond || defVal\r\n  }\r\n  static getTalentConditionalStats = (conditional, conditionalNum, defVal = null) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let [stats = {}, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    return Object.fromEntries(Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? [key, val] : [key, val * stacks]))\r\n  }\r\n  static getTalentConditionalFields = (conditional, conditionalNum, defVal = []) => {\r\n    if (!conditionalNum || !conditional) return defVal\r\n    let fields = ConditionalsUtil.getConditionalProp(conditional, \"fields\", conditionalNum)[0]\r\n    return fields || defVal\r\n  }\r\n\r\n  static isAutoElemental = (charKey, defVal = false) => this.getWeaponTypeKey(charKey) === \"catalyst\" || defVal\r\n  static isAutoInfusable = (charKey, defVal = false) => this.getCDataObj(charKey)?.talent?.auto?.infusable || defVal\r\n\r\n  //look up the formula, and generate the formulaPath to send to worker.\r\n  static getFormulaPath(characterKey, talentKey, formula) {\r\n    const formulaDB = this.getCDataObj(characterKey)?.formula\r\n    if (!formulaDB) return\r\n    let formulaKey\r\n    if (talentKey === \"auto\") {\r\n      for (const tk of [\"normal\", \"charged\", \"plunging\"]) {\r\n        ([formulaKey,] = Object.entries(formulaDB?.[tk] ?? {}).find(([, value]) => value === formula) ?? [])\r\n        if (formulaKey) {\r\n          talentKey = tk\r\n          break;\r\n        }\r\n      }\r\n    } else ([formulaKey,] = Object.entries(formulaDB?.[talentKey] ?? {}).find(([, value]) => value === formula) ?? [])\r\n    if (!formulaKey) return\r\n    return { characterKey, talentKey, formulaKey }\r\n  }\r\n\r\n\r\n  static hasTalentPage = (characterKey) => Boolean(Character.getCDataObj(characterKey)?.talent)\r\n\r\n  static getDisplayStatKeys = (stats, defVal = { basicKeys: [] }) => {\r\n    if (!stats) return defVal\r\n    const { characterKey } = stats\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    if (!eleKey) return defVal //usually means the character has not been lazy loaded yet\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    //we need to figure out if the character has: normal phy auto, elemental auto, infusable auto(both normal and phy)\r\n    const isAutoElemental = Character.isAutoElemental(characterKey)\r\n    const isAutoInfusable = Character.isAutoInfusable(characterKey)\r\n    if (!isAutoElemental)\r\n      basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = this.getWeaponTypeKey(characterKey)\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    if (this.hasTalentPage(characterKey)) {\r\n      const charFormulas = {}\r\n      Object.keys(Character.getCDataObj(characterKey)?.talent ?? {}).forEach(talentKey =>\r\n        Character.getTalentDocumentSections(stats, talentKey)?.forEach((section, sectionIndex) =>\r\n          section?.fields?.forEach((field, fieldIndex) => {\r\n            const hasFormula = field?.formula || this.getTalentField(stats, talentKey, sectionIndex, fieldIndex)?.formula\r\n            if (!hasFormula) return\r\n            if (!charFormulas[talentKey]) charFormulas[talentKey] = []\r\n            charFormulas[talentKey].push({ talentKey, sectionIndex, fieldIndex })\r\n          })))\r\n      return { basicKeys, ...charFormulas, transReactions }\r\n    } else {\r\n      //generic average hit parameters.\r\n      const genericAvgHit = []\r\n      if (!isAutoElemental) //add phy auto + charged + physical \r\n        genericAvgHit.push(\"physical_normal_avgHit\", \"physical_charged_avgHit\")\r\n\r\n      if (isAutoElemental || isAutoInfusable) //add elemental auto + charged\r\n        genericAvgHit.push(`${eleKey}_normal_avgHit`, `${eleKey}_charged_avgHit`)\r\n      else if (Character.getWeaponTypeKey(characterKey) === \"bow\") {//bow charged atk does elemental dmg on charge\r\n        genericAvgHit.push(`${eleKey}_charged_avgHit`)\r\n      }\r\n      //show skill/burst \r\n      genericAvgHit.push(`${eleKey}_skill_avgHit`, `${eleKey}_burst_avgHit`)\r\n\r\n      //add reactions.\r\n      if (eleKey === \"pyro\") {\r\n        const reactions = []\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n        reactions.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n        genericAvgHit.push(...reactions)\r\n      } else if (eleKey === \"cryo\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_melt_`)))\r\n      else if (eleKey === \"hydro\")\r\n        genericAvgHit.push(...genericAvgHit.filter(key => key.startsWith(`${eleKey}_`)).map(key => key.replace(`${eleKey}_`, `${eleKey}_vaporize_`)))\r\n\r\n      return { basicKeys, genericAvgHit, transReactions }\r\n    }\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getStatValueWithOverride = (character, statKey, defVal = 0) => {\r\n    if (this.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return this.getBaseStatValue(character, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey, artifactIds) => {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    let artIdsOnCharacter = character.equippedArtifacts;\r\n    let artIdsNotOnCharacter = artifactIds\r\n\r\n    //swap, by slot\r\n    Artifact.getSlotKeys().forEach(slotKey => {\r\n      let artNotOnChar = ArtifactDatabase.get(artIdsNotOnCharacter?.[slotKey])\r\n      if (artNotOnChar.location === characterKey) return; //it is already equipped\r\n      let artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      let notCharLoc = (artNotOnChar?.location || \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifact(notCharLoc, artOnChar)\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char \r\n    character.equippedArtifacts = {}\r\n    Object.entries(artifactIds).forEach(([key, artid]) =>\r\n      character.equippedArtifacts[key] = artid)\r\n    CharacterDatabase.update(character);\r\n  }\r\n  static remove(characterKey) {\r\n    let character = CharacterDatabase.get(characterKey)\r\n    if (character.equippedArtifacts)\r\n      Object.values(character.equippedArtifacts).forEach(artid =>\r\n        ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character) => {\r\n    let artifacts\r\n    if (character.artifacts) //from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    else return {}//probably won't happen. just in case.\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    return this.calculateBuildWithObjs(character.artifactConditionals, initialStats, artifacts)\r\n  }\r\n\r\n  static calculateBuildWithObjs = (artifactConditionals = [], initialStats, artifacts) => {\r\n    let setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = Artifact.getArtifactSetEffectsStats(setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.getMainStatValue(art.mainStatKey, art.numStars, stats.artifactsAssumeFull ? art.numStars * 4 : art.level)\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.statVal)\r\n    //setEffects conditionals\r\n    artifactConditionals.forEach(({ srcKey: setKey, srcKey2: setNumKey, conditionalNum }) => {\r\n      if (!setToSlots[setKey] || setToSlots[setKey].length < parseInt(setNumKey)) return\r\n      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum))\r\n        .forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return {\r\n      artifactIds: Object.fromEntries(Object.entries(artifacts).map(([key, val]) => [key, val?.id])),\r\n      setToSlots,\r\n      finalStats: stats,\r\n      artifactConditionals\r\n    }\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of Object.entries(val)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of Object.entries(modifier))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else initialStats[key] = (initialStats[key] ?? 0) + val\r\n  })\r\n\r\n  static calculateCharacterWithWeaponStats = (character) => {\r\n    if (!character) return {}\r\n    character = deepClone(character)\r\n    const { characterKey, levelKey, hitMode, autoInfused, reactionMode, talentLevelKeys, constellation, talentConditionals = [] } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, this.getStatValueWithOverride(character, key)]))\r\n    initialStats.characterEle = this.getElementalKey(characterKey);\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.autoInfused = autoInfused && Character.getCDataObj(characterKey)?.talent?.auto?.infusable\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.talentConditionals = talentConditionals\r\n    initialStats.weaponType = this.getWeaponTypeKey(characterKey)\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += this.getTalentLevelBoost(character.characterKey, key, constellation);\r\n\r\n    //enemy stuff\r\n    Character.getElementalKeys().forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = this.getStatValueWithOverride(character, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n    this.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n    //add stats from all talents\r\n    Character.getTalentStatsAll(characterKey, initialStats).forEach(s => this.mergeStats(initialStats, s))\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubStatKey(character?.weapon?.key)\r\n    if (weaponSubKey) this.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubStatValWithOverride(character?.weapon) })\r\n    this.mergeStats(initialStats, Weapon.getWeaponBonusStat(character?.weapon?.key, character?.weapon?.refineIndex))\r\n    this.mergeStats(initialStats, Weapon.getWeaponConditionalStat(character?.weapon?.key, character?.weapon?.refineIndex, character?.weapon?.conditionalNum, {}));\r\n\r\n    //add stats from talentconditionals\r\n    talentConditionals.forEach(cond => {\r\n      const { srcKey: talentKey, srcKey2: conditionalKey, conditionalNum } = cond\r\n      const conditional = Character.getTalentConditional(initialStats, talentKey, conditionalKey)\r\n      this.mergeStats(initialStats, Character.getTalentConditionalStats(conditional, conditionalNum, {}))\r\n    })\r\n\r\n    return initialStats\r\n  }\r\n}","import { LevelNameData, WeaponData, WeaponDataImport, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData.js';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil.js';\r\nimport { objMultiplication } from '../Util/Util.js';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getWeaponDataImport = () => WeaponDataImport\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey) => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  static getWeaponName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.name || defVal)\r\n  static getWeaponRarity = (weaponKey, defVal = 0) => (WeaponData[weaponKey]?.rarity || defVal)\r\n  static getWeaponPassiveName = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.passiveName || defVal)\r\n  static getWeaponPassiveDescription = (weaponKey, refineIndex, charFinalStats, character, defVal = \"\") => (WeaponData[weaponKey]?.passiveDescription?.(refineIndex, charFinalStats, character) || defVal)\r\n  static getWeaponDescription = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.description || defVal)\r\n  static getWeaponConditional = (weaponKey, defVal = null) => (WeaponData[weaponKey]?.conditional || defVal)\r\n  static getWeaponImg = (weaponKey, defVal = null) => WeaponData[weaponKey]?.img || defVal\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.main?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatVal = (weaponKey, levelKey, defVal = 0) => (WeaponData[weaponKey]?.baseStats?.sub?.[this.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubStatKey = (weaponKey, defVal = \"\") => (WeaponData[weaponKey]?.baseStats?.subStatKey || defVal)\r\n  static getWeaponBonusStat = (weaponKey, refineIndex, defVal = {}) => WeaponData[weaponKey]?.stats?.(refineIndex) ?? defVal\r\n\r\n  static getWeaponsOfType = (weaponType) => Object.fromEntries(Object.entries(WeaponData).filter(([key, weaponObj]) => weaponObj.weaponType === weaponType))\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = () => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || this.getWeaponMainStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubStatValWithOverride = (weaponObj, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || this.getWeaponSubStatVal(weaponObj?.key, weaponObj?.levelKey, defVal);\r\n\r\n  static getWeaponConditionalStat = (weaponKey, refineIndex, conditionalNum, defVal = null) => {\r\n    let conditional = this.getWeaponConditional(weaponKey)\r\n    if (!conditional || !conditionalNum) return defVal\r\n    let [stats, stacks] = ConditionalsUtil.getConditionalProp(conditional, \"stats\", conditionalNum)\r\n    if (!stacks) return defVal\r\n    stats = stats(refineIndex)\r\n    if (stacks !== 1) objMultiplication(stats, stacks)\r\n    return stats\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import React, { useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst CustomFormControl = ({ float = false, placeholder, value, onValueChange, disabled, allowEmpty = false }) => {\r\n  let [focus, setFocus] = useState(false)\r\n  let displayValue = value\r\n  if (allowEmpty) displayValue = typeof value === \"number\" ? value : \"\"\r\n  else displayValue = !value && focus ? \"\" : (value?.toString?.() || value)\r\n  const props = {\r\n    type: \"number\",\r\n    className: \"hide-appearance\",\r\n    placeholder,\r\n    value: displayValue,\r\n    disabled,\r\n    onChange: (e) => {\r\n      let value = e.target.value;\r\n      if (float) {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseFloat(value) || 0)\r\n        else value = parseFloat(value) || 0\r\n      } else {\r\n        if (allowEmpty) value = value === \"\" ? null : (parseInt(value) || 0)\r\n        else value = parseInt(value) || 0\r\n      }\r\n      onValueChange?.(value);\r\n    },\r\n    onFocus: () => setFocus(true),\r\n    onBlur: () => setFocus(false),\r\n  }\r\n  return <FormControl {...props} aria-label=\"custom-input\" />\r\n}\r\nexport default CustomFormControl;","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key) &&\r\n        console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key => \r\n      !StatData[key]?.const &&\r\n        console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0]] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","let WeaponData = {}\r\nlet WeaponDataImport = import('./Weapons')\r\nWeaponDataImport.then(imp => {\r\n  WeaponData = imp.default\r\n  WeaponDataImport = null\r\n})\r\n\r\nconst WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20A\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40A\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50A\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60A\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70A\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80A\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponData,\r\n  WeaponDataImport,\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","let CharacterData = {}\r\nlet CharacterDataImport = import('./Characters')\r\nCharacterDataImport.then(imp => {\r\n  CharacterData = imp.default\r\n  CharacterDataImport = null\r\n})\r\n// import characters from \r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20 As.1\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40 As.2\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50 As.3\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60 As.4\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70 As.5\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80 As.6\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterData,\r\n  CharacterDataImport,\r\n  CharacterSpecializedStatKey\r\n}","import { faDice, faDiceD20, faFirstAid, faFistRaised, faMagic, faShieldAlt, faSync, faTint } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StatIcon = {\r\n  characterHP: faTint,\r\n  finalHP: faTint,\r\n  hp_: faTint,\r\n  hp: faTint,\r\n\r\n  baseATK: faFistRaised,\r\n  characterATK: faFistRaised,\r\n  finalATK: faFistRaised,\r\n  atk_: faFistRaised,\r\n  atk: faFistRaised,\r\n\r\n  characterDEF: faShieldAlt,\r\n  finalDEF: faShieldAlt,\r\n  def_: faShieldAlt,\r\n  def: faShieldAlt,\r\n\r\n  eleMas: faMagic,\r\n  critRate_: faDice,\r\n  critDMG_: faDiceD20,\r\n  enerRech_: faSync,\r\n  heal_: faFirstAid,\r\n}\r\n\r\nconst StatIconEle = (statKey) =>\r\n  StatIcon[statKey] ? <FontAwesomeIcon icon={StatIcon[statKey]} className=\"fa-fw\" /> : null\r\n\r\nexport default StatIcon\r\n\r\nexport {\r\n  StatIconEle\r\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector(props) {\r\n  let { conditional, conditionalNum, setConditional, defEle, disabled } = props\r\n  if (!conditional) return defEle\r\n  if (Array.isArray(conditional)) {\r\n    let selectedConditionalNum = conditionalNum\r\n    let selectedConditional = null\r\n    for (const curConditional of conditional) {\r\n      if (selectedConditionalNum > curConditional.maxStack) selectedConditionalNum -= curConditional.maxStack\r\n      else {\r\n        selectedConditional = curConditional;\r\n        break;\r\n      }\r\n    }\r\n    if (!selectedConditional) {\r\n      selectedConditionalNum = 0\r\n      selectedConditional = conditional[0]\r\n    }\r\n\r\n    //multi conditional\r\n    let text = selectedConditionalNum === 0 ? \"Not Active\" :\r\n      (<span>{selectedConditional.condition} {(selectedConditional.maxStack > 1 ? (`: ${selectedConditionalNum} stack${selectedConditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>)\r\n    let badge = <Badge variant={selectedConditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    let count = 0;\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {conditional.map((condial, i) =>\r\n          <React.Fragment key={i}>{[...Array(condial.maxStack).keys()].map(v => v + 1).map(stack => {\r\n            let tempcount = ++count\r\n            return <Dropdown.Item key={tempcount} onClick={() => setConditional(tempcount)}>\r\n              {condial.condition}{selectedConditional.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n            </Dropdown.Item>\r\n          })}</React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    let badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\">{defEle} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional(0)}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional(stack)}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {\r\n    //single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional(conditionalNum ? 0 : 1)} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {defEle}</h6>\r\n    </Button>\r\n  }\r\n\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport Character from \"../Character/Character\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey =>\r\n    <Dropdown.Item key={characterKey} onClick={() => onSelect(characterKey)}>\r\n      {Character.getName(characterKey)}\r\n    </Dropdown.Item>)\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onValueChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    {percent ? (<InputGroup.Append>\r\n      <InputGroup.Text>%</InputGroup.Text>\r\n    </InputGroup.Append>) : null}\r\n    {defaultValue !== undefined ? <InputGroup.Append>\r\n      <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip>Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>\r\n    </InputGroup.Append> : null}\r\n  </InputGroup>\r\nexport default StatInput","import { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport Stat from \"../Stat\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText = \"\", diffText = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\nexport default function StatDisplay({ character, character: { characterKey }, equippedBuild, newBuild, editable, statKey }) {\r\n  let val, oldVal, fixed, unit, variant;\r\n  let label = \"\"\r\n  if (typeof statKey === \"string\") {//basic statKey\r\n    if (newBuild && equippedBuild) {//comparable\r\n      //newbuild -> val\r\n      //equippedbuild ->old\r\n      val = newBuild?.finalStats?.[statKey] ?? 0\r\n      oldVal = equippedBuild?.finalStats?.[statKey] ?? 0\r\n    } else {\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      //build ->val\r\n      val = build?.finalStats?.[statKey] ?? 0\r\n      //statvaluewith override -> old\r\n      const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n      oldVal = Character.getStatValueWithOverride(character, statKey, invalid)\r\n      oldVal === invalid && (oldVal = undefined)\r\n      if (statKey === \"finalHP\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterHP\")\r\n      else if (statKey === \"finalDEF\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterDEF\")\r\n      else if (statKey === \"finalATK\")\r\n        oldVal = Character.getStatValueWithOverride(character, \"characterATK\") + Character.getStatValueWithOverride(character, \"weaponATK\")\r\n    }\r\n    unit = Stat.getStatUnit(statKey)\r\n    fixed = Stat.fixedUnit(statKey)\r\n    label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n  } else {//from character sheet\r\n    const build = newBuild ? newBuild : equippedBuild\r\n    const { talentKey, sectionIndex, fieldIndex } = statKey\r\n    const field = Character.getTalentField(build.finalStats, talentKey, sectionIndex, fieldIndex)\r\n    const labelVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n    label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build.finalStats)}</span>\r\n    fixed = Character.getTalentFieldValue(field, \"fixed\", build.finalStats, 0)\r\n    val = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n    if (newBuild && equippedBuild) {//comparable\r\n      oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n    }\r\n  }\r\n\r\n  if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label }} />\r\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport Character from \"../Character\";\r\nimport StatInput from \"../StatInput\";\r\n\r\nfunction ReactionToggle({ character: { characterKey, reactionMode = \"none\" }, setReactionMode, className }) {\r\n  reactionMode === null && (reactionMode = \"none\")\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  return [\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && <ToggleButtonGroup className={className}\r\n    type=\"radio\" name=\"reactionMode\" defaultValue={reactionMode} onChange={(val) => setReactionMode(val === \"none\" ? null : val)}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"pyro\" && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"hydro\" && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {charEleKey === \"cryo\" && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nfunction HitModeToggle({ hitMode, setHitMode, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={setHitMode} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Normal Hit, No Crit</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ character, character: { characterKey }, build }) {\r\n  return <div>\r\n    {Object.entries(Character.getDisplayStatKeys(build.finalStats)).map(([talentKey, fields]) => {\r\n      let header = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n      return <Card bg=\"darkcontent\" text=\"lightfont\" key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              //simple statKey field\r\n              if (typeof field === \"string\") {\r\n                const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, [field]), build?.finalStats?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build.finalStats)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              //fields\r\n              const talentField = Character.getTalentField(build.finalStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n              const fieldText = Character.getTalentFieldValue(talentField, \"text\", build.finalStats)\r\n              const fieldVariant = Character.getTalentFieldValue(talentField, \"variant\", build.finalStats)\r\n              const fieldFormulaText = Character.getTalentFieldValue(talentField, \"formulaText\", build.finalStats)\r\n              const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(talentField, \"formula\", build.finalStats, [])\r\n              if (!fieldFormula || !fieldFormulaDependency) return null\r\n              const fieldValue = fieldFormula?.(build.finalStats)?.toFixed?.()\r\n              const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.finalStats?.modifiers, fieldFormulaDependency), build?.finalStats?.modifiers).reverse()\r\n              return <Card key={fieldIndex} bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                  <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n                </Accordion.Toggle>\r\n                <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                  <Card.Body className=\"p-2\">\r\n                    <div className=\"mb-n2\">\r\n                      <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n                      {subFormulaKeys.map(subKey =>\r\n                        <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build.finalStats)} = <small>{Stat.printFormula(subKey, build.finalStats, build.finalStats.modifiers, false)}</small></p>\r\n                      )}\r\n                    </div>\r\n                  </Card.Body>\r\n                </Accordion.Collapse>\r\n              </Card>\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} >\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default function DamageOptionsAndCalculation({ character, character: { hitMode }, setState, setOverride, newBuild, equippedBuild }) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Accordion>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Options</span>\r\n            <small>Expand below to edit enemy details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* TODO reaction interaction UI */}\r\n            <ReactionToggle {...{ character, setReactionMode: r => setState({ reactionMode: r }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"1\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"1\">\r\n        <Card.Body>\r\n          <Row className=\"mb-2\"><Col>\r\n            <Button variant=\"warning\" >\r\n              <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">\r\n                To get the specific resistance values of enemies, please visit the wiki.\r\n          </a>\r\n            </Button >\r\n          </Col></Row>\r\n          <Row>\r\n            <Col xs={12} xl={6} className=\"mb-2\">\r\n              <StatInput\r\n                name={<b>Enemy Level</b>}\r\n                value={Character.getStatValueWithOverride(character, \"enemyLevel\")}\r\n                placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                defaultValue={Character.getBaseStatValue(character, \"enemyLevel\")}\r\n                onValueChange={(val) => setOverride?.(\"enemyLevel\", val)}\r\n              />\r\n            </Col>\r\n            {Character.getElementalKeys().map(eleKey => {\r\n              let statKey = eleKey === \"physical\" ? \"physical_enemyRes_\" : `${eleKey}_enemyRes_`\r\n              let immunityStatKey = eleKey === \"physical\" ? \"physical_enemyImmunity\" : `${eleKey}_enemyImmunity`\r\n              let elementImmunity = Character.getStatValueWithOverride(character, immunityStatKey)\r\n              return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                <StatInput\r\n                  prependEle={<Button variant={eleKey} onClick={() => setOverride(immunityStatKey, !elementImmunity)} className=\"text-darkcontent\">\r\n                    <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                  name={<b>{Stat.getStatNameRaw(statKey)}</b>}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  placeholder={Stat.getStatNameRaw(statKey)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                  onValueChange={(val) => setOverride?.(statKey, val)}\r\n                  disabled={elementImmunity}\r\n                />\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n\r\n    <Card bg=\"lightcontent\" text=\"lightfont\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span className=\"d-block\">Damage Calculation Formulas</span>\r\n            <small>Expand below to see calculation details.</small>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <HitModeToggle {...{ hitMode, setHitMode: m => setState({ hitMode: m }) }} />\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <ContextAwareToggle as={Button} eventKey=\"2\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Accordion.Collapse eventKey=\"2\">\r\n        <Card.Body className=\"p-2\">\r\n          <CalculationDisplay character={character} build={build} />\r\n        </Card.Body>\r\n      </Accordion.Collapse>\r\n    </Card>\r\n  </Accordion>\r\n}\r\nexport {\r\n  HitModeToggle,\r\n  ReactionToggle,\r\n};\r\n\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport Character from \"../Character\"\r\n\r\nexport default function StatDisplayComponent({ character, character: { characterKey }, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text=\"lightfont\" className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{fields.map(field => <StatDisplay key={JSON.stringify(field)} {...{ character, equippedBuild, newBuild, editable, statKey: field }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport Stat from '../Stat';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer }) {\r\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n  useEffect(() => {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => forceUpdate())\r\n  }, [])\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null;\r\n  const build = Character.calculateBuild(character)\r\n  const { setToSlots } = build\r\n\r\n  const { weapon = {}, constellation } = character\r\n  const name = Character.getName(characterKey)\r\n  const elementKey = Character.getElementalKey(characterKey)\r\n  const weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  const weaponName = Weapon.getWeaponName(weapon.key)\r\n  const weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon)\r\n  const weaponSubKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  const weaponSubVal = Weapon.getWeaponSubStatValWithOverride(weapon)\r\n  const weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  const weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text=\"lightfont\">\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={onEdit} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={Character.getThumb(characterKey)} className={`thumb-big grad-${Character.getStar(characterKey)}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h3 className=\"mb-0\">{`Lvl. ${Character.getStatValueWithOverride(character, \"characterLevel\")} C${constellation}`}</h3>\r\n          <h5 className=\"mb-0\"><Stars stars={Character.getStar(characterKey)} colored /></h5>\r\n          <h2 className=\"mb-0\"><Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {Object.entries(Artifact.getSetEffects(setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = Artifact.getSetName(key)\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = build.finalStats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        characterKey\r\n      }}>\r\n        Generate Builds\r\n        </Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nexport function msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms, \"hours\")\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.162b6009.worker.js\");\n}\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker.js\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { HitModeToggle, ReactionToggle } from '../Character/CharacterDisplay/DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from '../Character/CharacterDisplay/StatDisplayComponent';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport ConditionalSelector from '../Components/ConditionalSelector';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport Stat from '../Stat';\r\nimport ConditionalsUtil from '../Util/ConditionalsUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport { calculateTotalBuildNumber } from './Build';\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCardPromise = import('../Character/CharacterDisplayCard');\r\nconst CharacterDisplayCard = lazy(() => CharacterDisplayCardPromise)\r\n\r\nconst warningBuildNumber = 10000000\r\nconst maxBuildsToShowList = [50, 25, 10, 5]\r\nconst maxBuildsToShowDefault = 25\r\nconst autoBuildGenLimit = 100\r\nexport default class BuildDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = BuildDisplay.getInitialState();\r\n    if (\"BuildsDisplay.state\" in localStorage) {\r\n      const { characterKey = \"\", maxBuildsToShow = maxBuildsToShowDefault } = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n      this.state = { ...this.state, characterKey, maxBuildsToShow }\r\n    }\r\n    if (props.location.characterKey) //override the one stored in BuildsDisplay.state\r\n      this.state.characterKey = props.location.characterKey\r\n\r\n    if (this.state.characterKey) {\r\n      const character = CharacterDatabase.get(this.state.characterKey)\r\n      if (character)\r\n        this.state = { ...this.state, ...(character?.buildSetting ?? {}) }\r\n      else\r\n        this.state.characterKey = \"\"\r\n    }\r\n\r\n    ReactGA.pageview('/build')\r\n  }\r\n  static initialState = {\r\n    builds: [],\r\n    generatingBuilds: false,\r\n    characterKey: \"\",\r\n    setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n    statFilters: {},\r\n    artifactConditionals: [],//{ setKey: \"\", setNumKey: \"\", conditionalNum: 0 }\r\n    mainStat: [\"\", \"\", \"\"],\r\n    optimizationTarget: \"finalATK\",\r\n    artifactsAssumeFull: false,\r\n    useLockedArts: false,\r\n    ascending: false,\r\n    modalBuild: null,\r\n    showArtCondModal: false,\r\n    showCharacterModal: false,\r\n    maxBuildsToShow: maxBuildsToShowDefault,\r\n    generationProgress: 0,\r\n    generationDuration: 0,//in ms\r\n  }\r\n\r\n  static getInitialState = () => deepClone(BuildDisplay.initialState)\r\n  static artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"]\r\n  forceUpdateBuildDisplay = () => this.forceUpdate()\r\n\r\n  selectCharacter = (characterKey = \"\") => {\r\n    if (!characterKey)\r\n      return this.setState({ ...BuildDisplay.getInitialState(), characterKey: \"\" })\r\n    if (characterKey === this.state.characterKey) return\r\n    const character = CharacterDatabase.get(characterKey)\r\n    return this.setState(state => ({\r\n      ...BuildDisplay.getInitialState(), //get default state\r\n      characterKey, //add character key\r\n      ...(character?.buildSetting ?? {}), //override build settings, if character has any\r\n      maxBuildsToShow: state.maxBuildsToShow,//maintain build settings\r\n      showCharacterModal: state.showCharacterModal//maintain modal\r\n    }))\r\n  }\r\n  splitArtifacts = () => {\r\n    if (!this.state.characterKey) // Make sure we have all slotKeys\r\n      return Object.fromEntries(Artifact.getSlotKeys().map(slotKey => [slotKey, []]))\r\n    const artifactDatabase = deepClone(ArtifactDatabase.getArtifactDatabase())\r\n    //do not use artifacts that are locked.\r\n    if (!this.state.useLockedArts)\r\n      Object.entries(artifactDatabase).forEach(([key, val]) => {\r\n        //if its equipped on the selected character, bypass the lock check\r\n        if (this.state.characterKey && val.location === this.state.characterKey) return\r\n        //if its locked, or equipped, remove from consideration\r\n        if (val.lock || val.location)\r\n          delete artifactDatabase[key]\r\n      })\r\n    let split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    BuildDisplay.artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      this.state.mainStat[index] && (split[slotKey] = split[slotKey].filter((art) => art.mainStatKey === this.state.mainStat[index])))\r\n    return split\r\n  }\r\n  changeMainStat = (index, mainStatKey) => {\r\n    this.setState(state => {\r\n      let mainStat = state.mainStat;\r\n      mainStat[index] = mainStatKey;\r\n      return { mainStat }\r\n    }, this.autoGenerateBuilds)\r\n  }\r\n  changeSetFilterKey = (index, newkey, setsNumArr) => this.setState(state => {\r\n    let oldKey = state.setFilters[index].key\r\n    if (oldKey === newkey) return\r\n    let setFilters = state.setFilters;\r\n    let num = 0\r\n    //automatically select the 1st element from setsNumArr\r\n    if (setsNumArr && setsNumArr[0])\r\n      num = parseInt(setsNumArr[0])\r\n    setFilters[index] = { key: newkey, num }\r\n    return { setFilters }\r\n  }, this.autoGenerateBuilds)\r\n\r\n  dropdownitemsForStar = (star, index) =>\r\n    Artifact.getSetsByMaxStarEntries(star).map(([setKey, setobj]) => {\r\n      if (this.state.setFilters.some(filter => filter.key === setKey)) return false;\r\n      let setsNumArr = Object.keys(Artifact.getSetEffectsObj(setKey))\r\n      let artsAccountedOther = this.state.setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n      if (setsNumArr.every(num => parseInt(num) + artsAccountedOther > 5)) return false;\r\n      return (<Dropdown.Item key={setKey}\r\n        onClick={() => this.changeSetFilterKey(index, setKey, setsNumArr)}\r\n      >\r\n        {setobj.name}\r\n      </Dropdown.Item>)\r\n    })\r\n  autoGenerateBuilds = () => {\r\n    if (typeof this.totBuildNumber === \"number\" && this.totBuildNumber <= autoBuildGenLimit)\r\n      this.generateBuilds()\r\n    else if (this.state.builds.length) this.setState({ builds: [], generationProgress: 0, generationDuration: 0 })\r\n  }\r\n\r\n  generateBuilds = () => {\r\n    let { split, totBuildNumber } = this\r\n    if (!totBuildNumber) return this.setState({ builds: [] })\r\n    this.setState({ generatingBuilds: true, builds: [], generationDuration: 0, generationProgress: 0 })\r\n    let { characterKey, setFilters, statFilters = {}, ascending, optimizationTarget, maxBuildsToShow, artifactConditionals, artifactsAssumeFull } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    //get the formula for this targer\r\n    if (typeof optimizationTarget === \"object\") {\r\n      const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n      const { formula } = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex)\r\n      optimizationTarget = Character.getFormulaPath(characterKey, talentKey, formula)\r\n    }\r\n\r\n    initialStats.artifactsAssumeFull = artifactsAssumeFull\r\n\r\n    let artifactSetEffects = Artifact.getAllArtifactSetEffectsObj(artifactConditionals)\r\n    let splitArtifacts = deepClone(split)\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr.forEach(art => {\r\n        art.mainStatVal = Artifact.getMainStatValue(art.mainStatKey, art.numStars, artifactsAssumeFull ? art.numStars * 4 : art.level);\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    const minFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { min }]) => [statKey, min]).filter(([, min]) => typeof min === \"number\"))\r\n    const maxFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { max }]) => [statKey, max]).filter(([, max]) => typeof max === \"number\"))\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    let data = {\r\n      splitArtifacts, initialStats, artifactSetEffects,\r\n      setFilters, minFilters, maxFilters, maxBuildsToShow, optimizationTarget, ascending,\r\n    }\r\n    if (this.worker) this.worker.terminate()\r\n    this.worker = new Worker();\r\n    this.worker.onmessage = (e) => {\r\n      if (typeof e.data.progress === \"number\") {\r\n        const { progress = 0, timing = 0 } = e.data\r\n        return this.setState({ generationProgress: progress, generationDuration: timing })\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: this.totBuildNumber\r\n      })\r\n      let builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildWithObjs(artifactConditionals, initialStats, obj.artifacts))\r\n      this.setState({ builds, generatingBuilds: false })\r\n      // worker.terminate()\r\n      this.worker.terminate()\r\n      delete this.worker\r\n    }\r\n\r\n    this.worker.postMessage(data)\r\n  }\r\n\r\n  BuildGeneratorEditorCard = ({ statsDisplayKeys, initialStats }) => {\r\n    let { setFilters, statFilters = {}, characterKey, artifactsAssumeFull, artifactConditionals, useLockedArts, generatingBuilds, generationProgress, generationDuration, optimizationTarget, ascending } = this.state\r\n    let characterName = Character.getName(characterKey, \"Character Name\")\r\n    let artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n    //these variables are used for build generator.\r\n    this.split = this.splitArtifacts();\r\n    this.totBuildNumber = calculateTotalBuildNumber(this.split, setFilters)\r\n    let { totBuildNumber } = this\r\n    let totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n    let generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n    let buildAlert = null\r\n    if (generatingBuilds) {\r\n      let progPercent = generationProgress * 100 / totBuildNumber\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generating and testing <b>{generationProgressString}/{totalBuildNumberString}</b> Build configurations against the criteria for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n      </Alert>\r\n    } else if (!generatingBuilds && generationProgress) {//done\r\n      buildAlert = <Alert variant=\"success\">\r\n        <span>Generated and tested <b>{totalBuildNumberString}</b> Build configurations against the criteria for <b>{characterName}</b></span>\r\n        <h6>Time elapsed: {timeStringMs(generationDuration)}</h6>\r\n        <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n      </Alert>\r\n    } else {\r\n      buildAlert = totBuildNumber === 0 ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n        : (totBuildNumber > warningBuildNumber ?\r\n          <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite a while to generate...</span></Alert> :\r\n          <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= this.state.maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n    }\r\n    let characterDropDown = <DropdownButton title={Character.getName(characterKey, \"Select Character\")} disabled={generatingBuilds}>\r\n      <Dropdown.Item onClick={() => this.selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n      <Dropdown.Divider />\r\n      <CharacterSelectionDropdownList onSelect={cKey => this.selectCharacter(cKey)} />\r\n    </DropdownButton>\r\n    const toggleArtifactsAssumeFull = () => this.setState(state => ({ artifactsAssumeFull: !state.artifactsAssumeFull }), this.autoGenerateBuilds)\r\n    return <Card bg=\"darkcontent\" text=\"lightfont\">\r\n      <Card.Header>Build Generator</Card.Header>\r\n      <Card.Body>\r\n        <Row >\r\n          <Col xs={12} lg={6}>\r\n            {/* character selection */}\r\n            {characterKey ?\r\n              <CharacterCard header={characterDropDown} characterKey={characterKey} bg={\"lightcontent\"} footer={false} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => this.setState({ showCharacterModal: true }) : null} /> :\r\n              <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n                <Card.Header>\r\n                  {characterDropDown}\r\n                </Card.Header>\r\n              </Card>}\r\n            {/* Hit mode options */}\r\n            {Character.hasTalentPage(characterKey) && <HitModeCard className=\"mb-2\" characterKey={characterKey} forceUpdate={() => { this.forceUpdateBuildDisplay(); this.autoGenerateBuilds() }} />}\r\n            {/* Final Stat Filter */}\r\n            <StatFilterCard className=\"mb-2\" statFilters={statFilters} statsDisplayKeys={statsDisplayKeys} setStatFilters={sFs => this.setState({ statFilters: sFs })} />\r\n          </Col>\r\n          <Col xs={12} lg={6}><Row>\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState({ showArtCondModal: true })} disabled={generatingBuilds}>\r\n                  <span>Default Artifact Set Effects {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* Artifact set picker */}\r\n            {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <ButtonGroup>\r\n                    {/* Artifact set */}\r\n                    <DropdownButton as={ButtonGroup} title={Artifact.getSetName(setKey, \"Artifact Set Filter\")} disabled={generatingBuilds}>\r\n                      <Dropdown.Item onClick={() => this.changeSetFilterKey(index, \"\")}>Unselect Artifact</Dropdown.Item>\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(5, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(4, index)}\r\n                      <Dropdown.Divider />\r\n                      <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                      {this.dropdownitemsForStar(3, index)}\r\n                    </DropdownButton>\r\n                    {/* set number */}\r\n                    <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                      disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                    >\r\n                      {Object.keys(Artifact.getSetEffectsObj(setKey)).map(num => {\r\n                        let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                        return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                          (<Dropdown.Item key={num}\r\n                            onClick={() => this.setState((state) => {\r\n                              let setFilters = state.setFilters;\r\n                              setFilters[index].num = parseInt(num)\r\n                              return { setFilters }\r\n                            }, this.autoGenerateBuilds)}\r\n                          >\r\n                            {`${num}-set`}\r\n                          </Dropdown.Item>)\r\n                      })}\r\n                    </DropdownButton>\r\n                  </ButtonGroup>\r\n                </Card.Header>\r\n                {setKey ? <Card.Body><Row>\r\n                  {Object.keys(Artifact.getSetEffectsObj(setKey)).filter(setNkey => parseInt(setNkey) <= setNum).map(setNumKey => {\r\n                    let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                    let conditionalNum = 0;\r\n                    let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                    if (conditional) {\r\n                      conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                      Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                        setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                    }\r\n                    let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                      ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }), this.autoGenerateBuilds)\r\n                    let conditionalElement = <ConditionalSelector\r\n                      conditional={conditional}\r\n                      conditionalNum={conditionalNum}\r\n                      setConditional={setStateArtifactConditional}\r\n                      defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                    />\r\n                    return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                      <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                      {setStats ? <Row>\r\n                        {Object.entries(setStats).map(([statKey, val]) =>\r\n                          <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                      </Row> : null}\r\n                    </Col>\r\n                  })}\r\n                </Row></Card.Body> : null}\r\n              </Card>\r\n            </Col>)}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\"><Card.Body>\r\n                <Button className=\"w-100\" onClick={() => this.setState(state => ({ useLockedArts: !state.useLockedArts }), this.autoGenerateBuilds)} disabled={generatingBuilds}>\r\n                  <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> Use Locked {\"&\"} Equipped Artifacts</span>\r\n                </Button>\r\n              </Card.Body></Card>\r\n            </Col>\r\n            {/* main stat selector */}\r\n            <Col className=\"mb-2\" xs={12}>\r\n              <Card bg=\"lightcontent\" text=\"lightfont\">\r\n                <Card.Header>\r\n                  <span>Artifact Main Stat</span>\r\n                  <Button className=\"float-right text-right\" variant={artifactsAssumeFull ? \"orange\" : \"primary\"} onClick={toggleArtifactsAssumeFull} disabled={generatingBuilds}>\r\n                    <span><FontAwesomeIcon icon={artifactsAssumeFull ? faCheckSquare : faSquare} className=\"fa-fw\" /> Assume Fully Leveled</span>\r\n                  </Button>\r\n                </Card.Header>\r\n                <Card.Body className=\"mb-n2\">\r\n                  {BuildDisplay.artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                  (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                    <h6 className=\"d-inline mb-0\">\r\n                      {Artifact.getSlotNameWithIcon(slotKey)}\r\n                    </h6>\r\n                    <DropdownButton disabled={generatingBuilds} size=\"sm\"\r\n                      title={this.state.mainStat[index] ? Stat.getStatNameWithPercent(this.state.mainStat[index]) : \"Select a mainstat\"}\r\n                      className=\"d-inline\">\r\n                      <Dropdown.Item onClick={() => this.changeMainStat(index, \"\")} >No MainStat</Dropdown.Item>\r\n                      {Artifact.getSlotMainStatKeys(slotKey).map(mainStatKey =>\r\n                        <Dropdown.Item onClick={() => this.changeMainStat(index, mainStatKey)} key={mainStatKey}>\r\n                          {Stat.getStatNameWithPercent(mainStatKey)}\r\n                        </Dropdown.Item>\r\n                      )}\r\n                    </DropdownButton>\r\n                  </div>))}\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row></Col>\r\n        </Row>\r\n        <Row className=\"mb-2\">\r\n          <Col>{characterKey && buildAlert}</Col>\r\n        </Row>\r\n        <Row className=\"d-flex justify-content-between\">\r\n          <Col xs=\"auto\" >\r\n            <ButtonGroup>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!characterKey || generatingBuilds}\r\n                variant={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                onClick={this.generateBuilds}\r\n              ><span>Generate Builds</span></Button>\r\n              <Button\r\n                className=\"h-100\"\r\n                disabled={!generatingBuilds}\r\n                variant=\"danger\"\r\n                onClick={() => {\r\n                  if (this.worker) {\r\n                    this.worker.terminate()\r\n                    delete this.worker\r\n                    this.setState({ generatingBuilds: false, builds: [], generationDuration: 0, generationProgress: 0 })\r\n                  }\r\n                }}\r\n              ><span>Cancel</span></Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {/* Dropdown to select sorting value */}\r\n            <SortByStatDropdown\r\n              characterKey={characterKey}\r\n              disabled={generatingBuilds || !characterKey}\r\n              autoGenerateBuilds={this.autoGenerateBuilds}\r\n              setState={(updater) => this.setState(updater, this.autoGenerateBuilds)}\r\n              optimizationTarget={optimizationTarget}\r\n              ascending={ascending}\r\n              statsDisplayKeys={statsDisplayKeys}\r\n              initialStats={initialStats}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  }\r\n  closeModal = () => this.setState({ modalBuild: null, showCharacterModal: false })\r\n  BuildModal = ({ build, characterKey }) => {\r\n    let { showCharacterModal } = this.state\r\n    return <Modal show={Boolean(showCharacterModal || build)} onHide={this.closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <React.Suspense fallback={<span>Loading...</span>}>\r\n        <CharacterDisplayCard\r\n          characterKey={characterKey}\r\n          setCharacterKey={cKey => this.selectCharacter(cKey)}\r\n          newBuild={build}\r\n          onClose={this.closeModal}\r\n          forceUpdate={this.forceUpdateBuildDisplay}\r\n          editable={showCharacterModal}\r\n          footer={<Button variant=\"danger\" onClick={this.closeModal}>Close</Button>} />\r\n      </React.Suspense>\r\n    </Modal>\r\n  }\r\n  closeArtCondModal = () => this.setState({ showArtCondModal: false })\r\n  ArtConditionalModal = () => {\r\n    let { showArtCondModal, artifactConditionals } = this.state\r\n    let artSetKeyList = [5, 4, 3].map(s => Artifact.getSetsByMaxStarEntries(s).map(([key]) => key)).flat()\r\n    return <Modal show={showArtCondModal} onHide={this.closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text=\"lightfont\" >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <h5>Default Artifact Set Effects  {Boolean(artifactConditionals.length) && <Badge variant=\"success\">{artifactConditionals.length} Selected</Badge>}</h5>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button onClick={() => this.setState({ artifactConditionals: [] })}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n            </Col>\r\n            <Col xs=\"auto\" >\r\n              <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Row>\r\n            {artSetKeyList.map(setKey => {\r\n              let icon = Artifact.getPieceIcon(setKey, Object.keys(Artifact.getPieces(setKey))?.[0])\r\n              let numStars = [...Artifact.getRarityArr(setKey)].pop() || 1\r\n              return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n                <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n                  <Card.Header >\r\n                    <Row>\r\n                      <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                        <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                      </Col>\r\n                      <Col >\r\n                        <h6><b>{Artifact.getSetName(setKey)}</b></h6>\r\n                        <span><Stars stars={numStars} /></span>\r\n                      </Col>\r\n                    </Row>\r\n                  </Card.Header>\r\n                  <Card.Body><Row>\r\n                    {Object.keys(Artifact.getSetEffectsObj(setKey)).map(setNumKey => {\r\n                      let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                      let conditionalNum = 0;\r\n                      let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                      if (conditional) {\r\n                        conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                        Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                          setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                      }\r\n                      let setStateArtifactConditional = (conditionalNum) => this.setState(state =>\r\n                        ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }),\r\n                        this.autoGenerateBuilds())\r\n                      let conditionalElement = <ConditionalSelector\r\n                        conditional={conditional}\r\n                        conditionalNum={conditionalNum}\r\n                        setConditional={setStateArtifactConditional}\r\n                        defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                      />\r\n                      return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                        <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey)}</h6>\r\n                        {setStats ? <Row>\r\n                          {Object.entries(setStats).map(([statKey, val]) =>\r\n                            <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                        </Row> : null}\r\n                      </Col>\r\n                    })}\r\n                  </Row></Card.Body>\r\n                </Card>\r\n              </Col>\r\n            })}\r\n          </Row>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={this.closeArtCondModal}>\r\n            <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal>\r\n  }\r\n\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport()\r\n    ]).then(() => {\r\n      this.forceUpdate()\r\n      //try to generate a build at the beginning after mount.\r\n      this.autoGenerateBuilds()\r\n    })\r\n  }\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    if (prevState.characterKey !== this.state.characterKey || prevState.maxBuildsToShow !== this.state.maxBuildsToShow) {\r\n      let { characterKey, maxBuildsToShow } = this.state\r\n      saveToLocalStorage(\"BuildsDisplay.state\", { characterKey, maxBuildsToShow })\r\n    }\r\n\r\n    if (this.state.characterKey) {\r\n      let character = CharacterDatabase.get(this.state.characterKey)\r\n      if (!character) return\r\n      const { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending } = deepClone(this.state)\r\n      character.buildSetting = { setFilters, statFilters, artifactConditionals, mainStat, optimizationTarget, artifactsAssumeFull, useLockedArts, ascending }\r\n      CharacterDatabase.update(character)\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this.worker?.terminate()\r\n    delete this.worker\r\n  }\r\n  render() {\r\n    const { characterKey, modalBuild, maxBuildsToShow, builds = [] } = this.state\r\n    const character = CharacterDatabase.get(characterKey)\r\n    const initialStats = Character.calculateCharacterWithWeaponStats(character)\r\n    const characterName = Character.getName(characterKey, \"Character Name\")\r\n    const statsDisplayKeys = Character.getDisplayStatKeys(initialStats)\r\n    return (<Container>\r\n      <this.BuildModal build={modalBuild} characterKey={characterKey} />\r\n      <this.ArtConditionalModal />\r\n      <Row className=\"mt-2 mb-2\">\r\n        <Col>\r\n          {/* Build Generator Editor */}\r\n          <this.BuildGeneratorEditorCard statsDisplayKeys={statsDisplayKeys} initialStats={initialStats} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <Card bg=\"darkcontent\" text=\"lightfont\">\r\n            <Card.Header>\r\n              <Row>\r\n                <Col>{characterKey ? <span>Showing <b>{builds.length}</b> Builds generated for {characterName}</span> : <span>Select a character to generate builds.</span>}</Col>\r\n                <Col xs=\"auto\">\r\n                  <DropdownButton title={<span>Max builds to show: <b>{maxBuildsToShow}</b></span>} size=\"sm\">\r\n                    {maxBuildsToShowList.map(v => <Dropdown.Item key={v} onClick={() => this.setState({ maxBuildsToShow: v }, this.autoGenerateBuilds)}>{v}</Dropdown.Item>)}\r\n                  </DropdownButton>\r\n                </Col>\r\n              </Row>\r\n            </Card.Header>\r\n            {/* Build List */}\r\n            <ListGroup>\r\n              {builds.map((build, index) =>\r\n                (index < maxBuildsToShow) && <ArtifactDisplayItem build={build} characterKey={characterKey} index={index} key={Object.values(build.artifactIds).join(\"_\")} statsDisplayKeys={statsDisplayKeys} setState={s => this.setState(s)} />\r\n              )}\r\n            </ListGroup>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>)\r\n  }\r\n}\r\nfunction SortByStatDropdown({ characterKey, statsDisplayKeys, initialStats, disabled, optimizationTarget, ascending, setState }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  let sortByText = \"VALUE\"\r\n  if (typeof optimizationTarget === \"object\") {\r\n    const { talentKey, sectionIndex, fieldIndex } = optimizationTarget\r\n    const field = Character.getTalentField(initialStats, talentKey, sectionIndex, fieldIndex) ?? {}\r\n    const variant = Character.getTalentFieldValue(field, \"variant\", initialStats)\r\n    const text = Character.getTalentFieldValue(field, \"text\", initialStats)\r\n    sortByText = <b>{Character.getTalentName(characterKey, talentKey)}: <span className={`text-${variant}`}>{text}</span></b>\r\n  } else\r\n    sortByText = <b>Basic Stat: <span className={`text-${Stat.getStatVariant(optimizationTarget)}`}>{Stat.getStatNamePretty(optimizationTarget)}</span></b>\r\n\r\n  return <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle disabled={disabled} >\r\n        <span>Sort by {sortByText}</span>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu drop=\"up\" align=\"right\" style={{ minWidth: \"35rem\" }} >\r\n        <Row>\r\n          {Object.entries(statsDisplayKeys).map(([talentKey, fields]) => {\r\n            let header = \"\"\r\n            if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n            else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n            else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n            else header = Character.getTalentName(characterKey, talentKey, talentKey)\r\n            return <Col xs={12} md={6} key={talentKey}>\r\n              <Dropdown.Header><b>{header}</b></Dropdown.Header>\r\n              {fields.map((field, i) => {\r\n                if (typeof field === \"string\")\r\n                  return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>{Stat.getStatNamePretty(field)}</Dropdown.Item>\r\n                const talentField = Character.getTalentField(initialStats, field.talentKey, field.sectionIndex, field.fieldIndex)\r\n                return <Dropdown.Item key={i} onClick={() => setState({ optimizationTarget: field })}>\r\n                  <span className={`text-${Character.getTalentFieldValue(talentField, \"variant\", initialStats)}`}>{Character.getTalentFieldValue(talentField, \"text\", initialStats)}</span>\r\n                </Dropdown.Item>\r\n              })}\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <Button onClick={() => setState(state => ({ ascending: !state.ascending }))} disabled={disabled} variant={ascending ? \"danger\" : \"primary\"}>\r\n      <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n      <span>{ascending ? \"Ascending\" : \"Descending\"}</span>\r\n    </Button>\r\n  </ButtonGroup >\r\n}\r\nfunction StatFilterItem({ statKey, statKeys = [], min, max, close, setFilter }) {\r\n  const isFloat = Stat.getStatUnit(statKey) === \"%\"\r\n  const inputProps = {\r\n    disabled: !statKey,\r\n    allowEmpty: true,\r\n    float: isFloat,\r\n  }\r\n  const minInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MIN\",\r\n    value: min,\r\n    onValueChange: (s) => setFilter(statKey, s, max)\r\n  }\r\n  const maxInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MAX\",\r\n    value: max,\r\n    onValueChange: (s) => setFilter(statKey, min, s)\r\n  }\r\n  return <InputGroup className=\"mb-2\">\r\n    <DropdownButton\r\n      as={InputGroup.Prepend}\r\n      title={Stat.getStatNamePretty(statKey, \"New Stat\")}\r\n      id=\"input-group-dropdown-1\"\r\n    >\r\n      {statKeys.map(sKey => <Dropdown.Item key={sKey} onClick={() => { close?.(); setFilter(sKey, min, max) }}>{Stat.getStatNamePretty(sKey)}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <CustomFormControl {...minInputProps} />\r\n    <CustomFormControl {...maxInputProps} />\r\n    {Boolean(close) && <InputGroup.Append>\r\n      <Button variant=\"danger\" onClick={close}><FontAwesomeIcon icon={faTrash} /></Button>\r\n    </InputGroup.Append>}\r\n  </InputGroup>\r\n}\r\n\r\nfunction HitModeCard({ characterKey, forceUpdate, className }) {\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  const { hitMode } = character\r\n  const setHitmode = v => {\r\n    const char = CharacterDatabase.get(characterKey)\r\n    char.hitMode = v;\r\n    CharacterDatabase.update(char)\r\n    forceUpdate()\r\n  }\r\n  const setReactionMode = r => {\r\n    const char = CharacterDatabase.get(characterKey)\r\n    char.reactionMode = r;\r\n    CharacterDatabase.update(char)\r\n    forceUpdate()\r\n  }\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Hit Mode Options</Card.Header>\r\n    <Card.Body>\r\n      <HitModeToggle hitMode={hitMode} setHitMode={setHitmode} className=\"w-100\" />\r\n      <ReactionToggle character={character} setReactionMode={setReactionMode} className=\"w-100 mt-2\" />\r\n    </Card.Body>\r\n  </Card >\r\n}\r\n\r\nfunction StatFilterCard({ statsDisplayKeys = { basicKeys: [] }, statFilters = {}, setStatFilters, className }) {\r\n  const remainingKeys = statsDisplayKeys.basicKeys.filter(key => !Object.keys(statFilters).some(k => k === key))\r\n  const setFilter = (sKey, min, max) => setStatFilters({ ...statFilters, [sKey]: { min, max } })\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className={className}>\r\n    <Card.Header>Final Stat Filter</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-n2\">\r\n        {Object.entries(statFilters).map(([statKey, { min, max }]) => {\r\n          return <Col xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} min={min} max={max} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Col>\r\n        })}\r\n        <Col xs={12}>\r\n          <StatFilterItem statKeys={remainingKeys} setFilter={setFilter} />\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\n//for displaying each artifact build\r\nfunction ArtifactDisplayItem({ index, characterKey, build, statsDisplayKeys, setState }) {\r\n  return (<div>\r\n    <ListGroup.Item\r\n      variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n      onClick={() => setState({ modalBuild: build })}\r\n    >\r\n      <h5>{Object.entries(build.setToSlots).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n        <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n          {slotarr.map(slotKey => Artifact.getSlotIcon(slotKey))} {Artifact.getSetName(key)}\r\n        </Badge>\r\n      )}</h5>\r\n      <StatDisplayComponent {...{ character: CharacterDatabase.get(characterKey), newBuild: build, statsDisplayKeys, cardbg: (index % 2 ? \"lightcontent\" : \"darkcontent\") }} />\r\n    </ListGroup.Item>\r\n  </div>)\r\n}"],"sourceRoot":""}