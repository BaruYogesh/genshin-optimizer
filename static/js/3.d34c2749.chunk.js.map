{"version":3,"sources":["Util/FormulaUtil.ts","Build/Build.ts","Data/Characters/dataUtil.tsx","Util/DataminedUtil.ts","Data/Characters/Albedo/data.ts","Data/Characters/Aloy/data.ts","Data/Characters/Amber/data.ts","Data/Characters/Barbara/data.ts","Data/Characters/Beidou/data.ts","Data/Characters/Bennett/data.ts","Data/Characters/Chongyun/data.ts","Data/Characters/Diluc/data.ts","Data/Characters/Diona/data.ts","Data/Characters/Eula/data.ts","Data/Characters/Fischl/data.ts","Data/Characters/Ganyu/data.ts","Data/Characters/HuTao/data.ts","Data/Characters/Jean/data.ts","Data/Characters/KaedeharaKazuha/data.ts","Data/Characters/Kaeya/data.ts","Data/Characters/KamisatoAyaka/data.ts","Data/Characters/Keqing/data.ts","Data/Characters/Klee/data.ts","Data/Characters/KujouSara/data.ts","Data/Characters/Lisa/data.ts","Data/Characters/Mona/data.ts","Data/Characters/Ningguang/data.ts","Data/Characters/Noelle/data.ts","Data/Characters/Qiqi/data.ts","Data/Characters/RaidenShogun/data.ts","Data/Characters/Razor/data.ts","Data/Characters/Rosaria/data.ts","Data/Characters/Sayu/data.ts","Data/Characters/Sucrose/data.ts","Data/Characters/Tartaglia/data.ts","Data/Characters/Traveler/anemo/data.ts","Data/Characters/Traveler/geo/data.ts","Data/Characters/Traveler/electro/data.ts","Data/Characters/Venti/data.ts","Data/Characters/Xiao/data.ts","Data/Characters/Xiangling/data.ts","Data/Characters/Xingqiu/data.ts","Data/Characters/Xinyan/data.ts","Data/Characters/Yanfei/data.ts","Data/Characters/Yoimiya/data.ts","Data/Characters/Zhongli/data.ts"],"names":["basicDMGFormula","percent","stats","skillKey","elemental","val","statKey","getTalentStatKey","s","basicHealingFormula","scaleStatKey","flat","ratio","heal_multi","calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","overwriteElement","hitMode","infusionAura","infusionSelf","reactionMode","characterEle","weaponType","ElementalData","includes","startsWith","eleKey","getTalentStatKeyVariant","absorbableEle","toTalentPercent","arr","d","parseFloat","toFixed","toTalentInt","parseInt","singleToTalentPercent","data","normal","hitArr","charged","atk1","atk2","plunging","dmg","low","high","skill","press","blossom","burst","burDMG","stacks","stacksVal","finalATK","finalDEF","formula","fromEntries","percentArr","tlvl","auto","blossom50","hitModeMultiKey","geo_skill_hit_base_multi","enemyLevel_multi","geo_enemyRes_multi","dmg1c2","dmg2c2","dmg3c2","dmg4c2","blossom1c2","blossom2c2","blossom3c2","blossom4c2","skillParam_gen","skillParam_gen_pre","hit","full","bomblet","atkDec","atkDecDur","coil1","coil2","coil3","coil4","rushDur","cd","cost","a1","duration","passive1","name","undefined","hp","dmgPerWave","totDMG","finalHP","detonationDMG","hpFlat","contHP","contHPFlat","regenPerHit","contRegen","regen","spinning","final","onHit","lightningDMG","dmgRed","shield","shield_","shieldElectro","hit1","hit2","constellation1","constellation4","lvl1hit1","lvl1hit2","lvl2hit1","lvl2hit2","explosion","healHP","healHPFlat","atkRatio","atkBonus","constellation","baseATK","infusionDuration","passive2","hit3","slashing","dot","hit2b","hit3b","dmgPerPaw","shieldFlat","shieldHp","durationPerPaw","continuousDmg","hpPercent","shieldCryo","shdStr","shieldHoldCryo","shieldHold","a","b","stam","maxDuration","pressDMG","holdDMG","brandDMG","phyResDec","cyroResDec","resDecDuration","cdPress","cdHold","baseDMG","stackDMG","maxStack","physicalBurst25","physical_burst_hit_base_multi","physical_enemyRes_multi","Array","dmg50","aimedShot","fullAimedShot","oz","aimShot","fullAimedShotOz","activeChar","addDmg","aimShot1","frostflake","frostflakeBloom","conditionalValues","character","Ganyu","sheet","talent","Math","min","critRate_","charged_critRate_","critDMG_","atk_inc","low_dmg","low_regen","dmgC2","field_dmg","heal_flat","heal_atk","regen_flat","regen_atk","dmg_hold","anemo_skill_hit_base_multi","anemo_enemyRes_multi","heal","atk","hold","add","pdmg","plow","phigh","bonus","eleMas","constellation6","cutting","bloom","constellation2","stilleto","thunderclasp_slash","consec_slash","last","atk_","electro_","thunderclap_slashing","jumpyDmg","mineDmg","cluster","c2","stack0","stack1","stack2","stack3","summon","bubble_explosion","dmg_","omen_duration","enerRech_","jade","inheri_hp","dmg_per_gem","skill_dmg","shield_def","shield_flat","heal_def","heal_trigger","burst_dmg","herald","hitregen","base","continuousregen","healing","energyCosts","resolveStacks","skillDMG","coorDMG","eleBurConv","resolve","resolve_","resGain","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","enerCost","c","burstDMG","a4","eleDMG","intial","resolveStack","value","RaidenShogun","res","condEleKey","multi","enemyLevelMulti","characterLevel","enemyLevel","enemyDEFRed_","electro_burst_hit_base_multi","electro_enemyRes_multi","atkspd","normVal","normStatKey","burstVal","burstStatKey","ele_dmg","kick_press","kick_hold","ele_kick","heal_","muji_dmg","muji_heal","muji_heal_","skillPercent","basic","Sayu","em","skillDmg","melee","ranged","riptide","flash","slash","blast","initial_dmg","initial_max","storm_dmg","storm_max","windAuto","exp","geoAuto","enerRegen","thunder","enerRechInc","ascension","thunder3","hit_bonus","full_bonus","flatMap","totBurst","absorptionEle","swirlTicks","absorptionStatKey","swirlStatKey","burstScaling","absorptionTicks","atk_bonus","drain","hydro_dmg_","def1","flat1","def2","flat2","def3","flat3","nyanDMG","defMulti","spinningDEF","_","kindling","c6","steeleDMG","resonanceDMG","shieldBase","shieldMaxHP","petriDur","zliDMG","hpMulti","dmgHP","lowHP","highHP","steeleDMGHP","resonanceDMGHP","holdDMGHP"],"mappings":"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","file":"static/js/3.d34c2749.chunk.js","sourcesContent":["import { getTalentStatKey } from \"../Build/Build\"\r\nimport { StatKey } from \"../Types/artifact\"\r\nimport { FormulaItem } from \"../Types/character\"\r\nimport { ElementKey } from \"../Types/consts\"\r\nimport { BasicStats } from \"../Types/stats\"\r\n\r\n//for basic formula in the format of \"percent/100 * s[statKey]\"\r\nexport function basicDMGFormula(percent: number, stats: BasicStats, skillKey: string, elemental?: \"physical\" | ElementKey): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats, elemental)\r\n  return [s => val * s[statKey], [statKey]]\r\n}\r\nexport function basicHealingFormula(percent: number, scaleStatKey: StatKey, flat: number = 0): FormulaItem {\r\n  const ratio = percent / 100\r\n  return [s => ((ratio * s[scaleStatKey]) + flat) * s.heal_multi, [scaleStatKey, \"heal_multi\"]]\r\n}","import ElementalData from \"../Data/ElementalData\"\r\nimport { StatKey, ICachedArtifact, SubstatKey } from \"../Types/artifact\"\r\nimport { ArtifactSetEffects, ArtifactsBySlot, SetFilter } from \"../Types/Build\"\r\nimport { ArtifactSetKey, ElementKey, SetNum, SlotKey } from \"../Types/consts\"\r\nimport { BasicStats, BonusStats, ICalculatedStats } from \"../Types/stats\"\r\nimport { mergeStats } from \"../Util/StatUtil\"\r\nimport { deepClone } from \"../Util/Util\"\r\n\r\n/**\r\n * Remove artifacts that can never be used in optimized builds when trying to optimize for top `maxBuildsToShow` builds\r\n * @param {artifact[]} artifacts - List of artifacts of the same slot\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - The list of the set effects\r\n * @param {Set.<statKey>} significantStats - A set of stats that pruning needs to take into consideration\r\n * @param {bool} ascending - Whether the sorting is ascending or descending\r\n * @param {Set.<setKey>} alwaysAccepted - The list of artifact sets that are always included\r\n */\r\nexport function pruneArtifacts(artifacts: ICachedArtifact[], artifactSetEffects: ArtifactSetEffects, significantStats: Set<StatKey>, maxBuildsToShow: number = 1, ascending: boolean = false, alwaysAccepted: Set<ArtifactSetKey> = new Set()): ICachedArtifact[] {\r\n  function shouldKeepFirst(first: Dict<StatKey, number>, second: Dict<StatKey, number>, preferFirst: boolean) {\r\n    let firstBetter = Object.entries(first).some(([k, v]) => !isFinite(v) || v > (second[k] ?? 0))\r\n    let secondBetter = Object.entries(second).some(([k, v]) => !isFinite(v) || v > (first[k] ?? 0))\r\n    if (ascending) [firstBetter, secondBetter] = [secondBetter, firstBetter]\r\n    // Keep if first is strictly better, uncomparable, or equal + prefer first.\r\n    // That is, return false if second is strictly better, or equal + NOT prefer first\r\n    return firstBetter || (!secondBetter && preferFirst)\r\n  }\r\n\r\n  // Prune unused set effects. Sets with no relevant effects are regrouped to \"other\"\r\n  const prunedSetEffects: PrunedArtifactSetEffects = { \"other\": {} }\r\n  Object.entries(artifactSetEffects).forEach(([set, effect]) => {\r\n    Object.entries(effect).forEach(([num, item]) => {\r\n      const effects = Object.entries(item).filter(([key]) => significantStats.has(key as StatKey))\r\n      if (effects.length > 0) {\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = Object.fromEntries(effects)\r\n      }\r\n      const modifiers = item.modifiers\r\n      if (modifiers) {\r\n        // Modifiers are treated as infinite stats\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = prunedSetEffects[set]![num] ?? {}\r\n\r\n        Object.keys(modifiers)\r\n          .filter(key => significantStats.has(key as StatKey))\r\n          .forEach(key =>\r\n            prunedSetEffects[set]![num]![key] = Infinity\r\n          )\r\n      }\r\n    })\r\n  })\r\n\r\n  // array of artifacts, artifact stats, and set (may be \"other\")\r\n  let tmp: { artifact: ICachedArtifact, numberOfBetterSameSetArtifacts: number, stats: Dict<StatKey, number>, set: ArtifactSetKey | \"other\" }[] = artifacts.map(artifact => {\r\n    const stats: Dict<StatKey, number> = {}, set: ArtifactSetKey | \"other\" = (artifact.setKey in prunedSetEffects || alwaysAccepted.has(artifact.setKey)) ? artifact.setKey : \"other\"\r\n    if (significantStats.has(artifact.mainStatKey as any))\r\n      stats[artifact.mainStatKey] = artifact.mainStatVal!\r\n    for (const { key, value } of artifact.substats)\r\n      if (key && significantStats.has(key as SubstatKey))\r\n        stats[key] = (stats[key] ?? 0) + value\r\n    for (const key in stats)\r\n      if (key.endsWith(\"enemyRes_\"))\r\n        stats[key as StatKey] = -stats[key as StatKey]!\r\n    return { artifact, numberOfBetterSameSetArtifacts: 0, stats, set }\r\n  })\r\n\r\n  // Compare artifacts' base stats from the same set\r\n  tmp = tmp.filter((first) => {\r\n    const { artifact: candidate, stats: candidateStats, set: candidateSet } = first\r\n    return tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) => {\r\n      if (candidateSet !== otherSet || shouldKeepFirst(candidateStats, otherStats, candidate.id! <= other.id!)) {\r\n        return true\r\n      } else {\r\n        first.numberOfBetterSameSetArtifacts += 1\r\n        return first.numberOfBetterSameSetArtifacts < maxBuildsToShow\r\n      }\r\n    })\r\n  })\r\n\r\n  // Cross-check with different sets\r\n  tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) => {\r\n    if (alwaysAccepted.has(candidate.setKey))\r\n      return true\r\n    // Possible \"additional stats\" if a build equips `candidate` on an empty slot.\r\n    let possibleStats = [...Object.values(prunedSetEffects[candidateSet]!), {}].map(c => {\r\n      const current: BonusStats = { ...candidateStats }\r\n      mergeStats(current, c)\r\n      return { stat: current, numberOfBetterArtifacts: 0 }\r\n    })\r\n    return tmp.every(({ artifact: other, stats: otherStats, set: otherSet, numberOfBetterSameSetArtifacts }) => {\r\n      if (candidateSet === otherSet) return true // Already checked same-set\r\n\r\n      // Remove possibilities that shouldn't be kept\r\n      possibleStats = possibleStats.filter(current => {\r\n        if (shouldKeepFirst(current.stat, otherStats, candidate.id! <= other.id!)) {\r\n          return true\r\n        } else {\r\n          current.numberOfBetterArtifacts += 1\r\n          return current.numberOfBetterArtifacts + numberOfBetterSameSetArtifacts < maxBuildsToShow\r\n        }\r\n      })\r\n      return possibleStats.length !== 0\r\n    })\r\n  })\r\n\r\n  return tmp.map(tmp => tmp.artifact)\r\n}\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet: Dict<ArtifactSetKey, ICachedArtifact[]> = {}\r\n    for (const artifact of (artifactsBySlot[slotKey] ?? [])) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey]!.push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet['null']) artifactsBySet['null'].push(artifact)\r\n        else artifactsBySet['null'] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu: ArtifactsBySlot = {}, result: ArtifactsBySlot[] = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1]!.length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats: ICalculatedStats, artifactsBySlot: ArtifactsBySlot, artifactSetEffects: ArtifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount: Dict<ArtifactSetKey, SetNum> = {}, accu = {}\r\n  function slotPerm(index: number, stats: ICalculatedStats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey] ?? []) {\r\n      const newStats = { ...stats }\r\n\r\n      // Hand-pick costly copying\r\n      if (newStats.modifiers) newStats.modifiers = deepClone(newStats.modifiers)\r\n\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey]! -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey: SlotKey, art: ICachedArtifact, setCount: Dict<ArtifactSetKey, SetNum>, accu: Dict<SlotKey, ICachedArtifact>, stats: ICalculatedStats, artifactSetEffects: ArtifactSetEffects) {\r\n  const setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1 as SetNum\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal!\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  const setEffect = artifactSetEffects[setKey]?.[setCount[setKey]!]\r\n  setEffect && mergeStats(stats, setEffect) // TODO: This may slow down the computation\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The calculated stats\r\n  * @param {*} overwriteElement - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey: string, stats: BasicStats, overwriteElement?: ElementKey | \"physical\") {\r\n  const { hitMode = \"\", infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n    return `${overwriteElement || characterEle}_${skillKey}_${hitMode}`\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey: string, stats: BasicStats, overwriteElement: ElementKey | \"physical\" | undefined | \"\" = \"\") {\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return skillKey//elemental DMG\r\n  const { infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) {\r\n      if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n      else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n    }\r\n    return overwriteElement || characterEle\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) {\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n  }\r\n  return eleKey\r\n}\r\n\r\nexport type PrunedArtifactSetEffects = Dict<ArtifactSetKey | \"other\", Dict<SetNum, Dict<StatKey, number>>>\r\n","import { ElementKey } from \"../../Types/consts\";\r\n\r\nexport const absorbableEle = [\"hydro\", \"pyro\", \"cryo\", \"electro\"] as ElementKey[]","//Utility functionst to take data from datamined _gen.json data.\r\n//TODO: when we decide to use decimals instead of percent, this function needs to be changed. I\r\n//TODO: Ideaily, we retain the most accurate number in the src code, and do this toFixed on UI. \r\nexport function toTalentPercent(arr: number[]): number[] {\r\n  return arr.map(d => parseFloat((d * 100).toFixed(2)))\r\n}\r\n\r\nexport function toTalentInt(arr: number[]): number[] {\r\n  return arr.map(d => parseInt(d.toFixed()))\r\n}\r\nexport function singleToTalentPercent(num) {\r\n  return parseFloat((num * 100).toFixed(2))\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [36.74, 39.73, 42.72, 46.99, 49.98, 53.4, 58.1, 62.8, 67.5, 72.62, 78.5, 85.41, 92.31, 99.22, 106.76],\r\n      [47.45, 51.32, 55.18, 60.7, 64.56, 68.98, 75.04, 81.11, 87.18, 93.81, 101.39, 110.32, 119.24, 128.16, 137.89],\r\n      [49.75, 53.8, 57.85, 63.64, 67.68, 72.31, 78.68, 85.04, 91.4, 98.35, 106.3, 115.65, 125.01, 134.36, 144.57],\r\n      [62.07, 67.13, 72.18, 79.4, 84.45, 90.22, 98.16, 106.1, 114.04, 122.7, 132.63, 144.3, 155.97, 167.64, 180.38]\r\n    ],\r\n  },\r\n  charged: {\r\n    atk1: [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 101.06, 109.96, 118.85, 127.74, 137.45],\r\n    atk2: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 128.62, 139.94, 151.26, 162.58, 174.93],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [130.4, 140.18, 149.96, 163, 172.78, 182.56, 195.6, 208.64, 221.68, 234.72, 247.76, 260.8, 277.1, 293.4, 309.7],\r\n    blossom: [133.6, 143.62, 153.64, 167, 177.02, 187.04, 200.4, 213.76, 227.12, 240.48, 253.84, 267.2, 283.9, 300.6, 317.3]\r\n  },\r\n  burst: {\r\n    dmg: [367.2, 394.74, 422.28, 459, 486.54, 514.08, 550.8, 587.52, 624.24, 660.96, 697.68, 734.4, 780.3, 826.2, 872.1],\r\n    blossom: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171]\r\n  }\r\n}\r\nfunction burDMG(percent, stats, skillKey, stacks = 0): [(stat: any) => number, string[]] {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  const stacksVal = stacks * 0.3\r\n  return [s => (val * s.finalATK + stacksVal * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")\r\n  ])),\r\n  charged: {\r\n    atk1: stats => basicDMGFormula(data.charged.atk1[stats.tlvl.auto], stats, \"charged\"),\r\n    atk2: stats => basicDMGFormula(data.charged.atk2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    blossom: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => val * s.finalDEF * s[statKey], [\"finalDEF\", statKey]]\r\n    },\r\n    blossom50: stats => {\r\n      const val = data.skill.blossom[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalDEF * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.geo_skill_hit_base_multi + 0.25) * s.enemyLevel_multi * s.geo_enemyRes_multi,\r\n      [\"finalDEF\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"geo_skill_hit_base_multi\", \"enemyLevel_multi\", \"geo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg1c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 1),\r\n    dmg2c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 2),\r\n    dmg3c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 3),\r\n    dmg4c2: stats => burDMG(data.burst.dmg[stats.tlvl.burst], stats, \"burst\", 4),\r\n    blossom: stats => basicDMGFormula(data.burst.blossom[stats.tlvl.burst], stats, \"burst\"),\r\n    blossom1c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 1),\r\n    blossom2c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 2),\r\n    blossom3c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 3),\r\n    blossom4c2: stats => burDMG(data.burst.blossom[stats.tlvl.burst], stats, \"burst\", 4),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),//1.1\r\n      toTalentPercent(skillParam_gen.auto[1]),//1.2\r\n      toTalentPercent(skillParam_gen.auto[2]),//2\r\n      toTalentPercent(skillParam_gen.auto[3]),//3\r\n      toTalentPercent(skillParam_gen.auto[4]),//4\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[5]),\r\n    full: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[7]),\r\n    low: toTalentPercent(skillParam_gen.auto[8]),\r\n    high: toTalentPercent(skillParam_gen.auto[9]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    bomblet: toTalentPercent(skillParam_gen.skill[1]),\r\n    atkDec: toTalentPercent(skillParam_gen.skill[2]),\r\n    atkDecDur: skillParam_gen.skill[3][0],\r\n    coil1: toTalentPercent(skillParam_gen.skill[4]),\r\n    coil2: toTalentPercent(skillParam_gen.skill[5]),\r\n    coil3: toTalentPercent(skillParam_gen.skill[6]),\r\n    coil4: toTalentPercent(skillParam_gen.skill[7]),\r\n    rushDur: skillParam_gen.skill[8][0],\r\n    cd: skillParam_gen.skill[8][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    cd: skillParam_gen.burst[1][0],\r\n    cost: skillParam_gen.burst[2][0],\r\n  },\r\n  a1: {\r\n    duration: skillParam_gen.passive1[1],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"electro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    bomblet: stats => basicDMGFormula(data.skill.bomblet[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 76.44, 81.48, 86.52, 91.56, 96.6],\r\n      [46.44, 50.22, 54, 59.4, 63.18, 67.5, 73.44, 79.38, 85.32, 91.8, 98.28, 104.76, 111.24, 117.72, 124.2],\r\n      [47.3, 51.15, 55, 60.5, 64.35, 68.75, 74.8, 80.85, 86.9, 93.5, 100.1, 106.7, 113.3, 119.9, 126.5],\r\n      [59.34, 64.17, 69, 75.9, 80.73, 86.25, 93.84, 101.43, 109.02, 117.3, 125.58, 133.86, 142.14, 150.42, 158.7],\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [41.36, 44.46, 47.56, 51.7, 54.8, 57.9, 62.04, 66.18, 70.31, 74.45, 78.58, 82.72, 87.89, 93.06, 98.23],\r\n    dmg: [123.2, 132.44, 141.68, 154, 163.24, 172.48, 184.8, 197.12, 209.44, 221.76, 234.08, 246.4, 261.8, 277.2, 292.6],\r\n  },\r\n  burst: {\r\n    dmgPerWave: [28.08, 30.19, 32.29, 35.1, 37.21, 39.31, 42.12, 44.93, 47.74, 50.54, 53.35, 56.16, 59.67, 63.18, 66.69],\r\n    totDMG: [505.44, 543.35, 581.26, 631.8, 669.71, 707.62, 758.16, 808.7, 859.25, 909.79, 960.34, 1010.88, 1074.06, 1137.24, 1200.42],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"pyro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    detonationDMG: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 200, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmgPerWave: stats => basicDMGFormula(data.burst.dmgPerWave[stats.tlvl.burst], stats, \"burst\"),\r\n    totDMG: stats => basicDMGFormula(data.burst.totDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.84, 40.68, 43.52, 47.3, 50.14, 52.98, 56.76, 60.54, 64.33, 68.11, 72.05, 77.19, 82.34, 87.49, 92.63],\r\n      [35.52, 38.18, 40.85, 44.4, 47.06, 49.73, 53.28, 56.83, 60.38, 63.94, 67.63, 72.46, 77.29, 82.12, 86.95],\r\n      [41.04, 44.12, 47.2, 51.3, 54.38, 57.46, 61.56, 65.66, 69.77, 73.87, 78.14, 83.72, 89.3, 94.88, 100.47],\r\n      [55.2, 59.34, 63.48, 69, 73.14, 77.28, 82.8, 88.32, 93.84, 99.36, 105.1, 112.61, 120.12, 127.62, 135.13],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [166.24, 178.71, 191.18, 207.8, 220.27, 232.74, 249.36, 265.98, 282.61, 299.23, 316.52, 339.13, 361.74, 384.35, 406.96],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [0.75, 0.81, 0.86, 0.94, 0.99, 1.05, 1.13, 1.2, 1.27, 1.35, 1.43, 1.5, 1.59, 1.69, 1.78],\r\n    hpFlat: [72, 79, 87, 96, 105, 114, 125, 135, 147, 159, 172, 185, 199, 213, 228],\r\n    contHP: [4, 4.3, 4.6, 5, 5.3, 5.6, 6, 6.4, 6.8, 7.2, 7.6, 8, 8.5, 9, 9.5],\r\n    contHPFlat: [385, 424, 465, 510, 559, 610, 664, 722, 783, 847, 915, 986, 1059, 1136, 1217],\r\n    dmg: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n  },\r\n  burst: {\r\n    hp: [17.6, 18.92, 20.24, 22, 23.32, 24.64, 26.4, 28.16, 29.92, 31.68, 33.44, 35.2, 37.4, 39.6, 41.8],\r\n    flat: [1694, 1864, 2047, 2245, 2457, 2683, 2923, 3177, 3445, 3728, 4024, 4335, 4660, 4999, 5352],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    regenPerHit: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.hpFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    contRegen: stats => {\r\n      const hp = data.skill.contHP[stats.tlvl.skill] / 100\r\n      const flat = data.skill.contHPFlat[stats.tlvl.skill]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hp[stats.tlvl.burst] / 100\r\n      const flat = data.burst.flat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [71.12, 76.91, 82.7, 90.97, 96.76, 103.38, 112.47, 121.57, 130.67, 140.59, 151.96, 165.33, 178.71, 192.08, 206.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.32, 95.51, 102.7, 112.97, 120.16, 128.38, 139.67, 150.97, 162.27, 174.59, 188.71, 205.32, 221.92, 238.53, 256.65],\r\n      [86.52, 93.56, 100.6, 110.66, 117.7, 125.75, 136.82, 147.88, 158.95, 171.02, 184.85, 201.12, 217.39, 233.65, 251.4],\r\n      [112.14, 121.27, 130.4, 143.44, 152.57, 163, 177.34, 191.69, 206.03, 221.68, 239.61, 260.7, 281.78, 302.87, 325.87],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.24, 60.82, 65.4, 71.94, 76.52, 81.75, 88.94, 96.14, 103.33, 111.18, 120.17, 130.75, 141.32, 151.9, 163.43],\r\n    final: [101.82, 110.11, 118.4, 130.24, 138.53, 148, 161.02, 174.05, 187.07, 201.28, 217.56, 236.71, 255.85, 275, 295.88]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    hp: [14.4, 15.48, 16.56, 18, 19.08, 20.16, 21.6, 23.04, 24.48, 25.92, 27.36, 28.8, 30.6, 32.4, 34.2],\r\n    flat: [1386, 1525, 1675, 1837, 2010, 2195, 2392, 2600, 2819, 3050, 3293, 3547, 3813, 4090, 4379],\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    onHit: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n  },\r\n  burst: {\r\n    dmg: [121.6, 130.72, 139.84, 152, 161.12, 170.24, 182.4, 194.56, 206.72, 218.88, 231.04, 243.2, 258.4, 273.6, 288.8],\r\n    lightningDMG: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    dmgRed: [20, 21, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 37, 38, 39],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) =>\r\n    [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shield: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldElectro: stats => {\r\n      const percent = data.skill.hp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalHP + flat) * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    hit1: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n    hit2: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + 2 * data.skill.onHit[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    lightningDMG: stats => basicDMGFormula(data.burst.lightningDMG[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    shield: stats => [s => 0.16 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldElectro: stats => [s => 0.16 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(20, stats, \"electro\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.55, 48.17, 51.8, 56.98, 60.61, 64.75, 70.45, 76.15, 81.84, 88.06, 94.28, 100.49, 106.71, 112.92, 119.14],\r\n      [42.74, 46.22, 49.7, 54.67, 58.15, 62.13, 67.59, 73.06, 78.53, 84.49, 90.45, 96.42, 102.38, 108.35, 114.31],\r\n      [54.61, 59.06, 63.5, 69.85, 74.3, 79.38, 86.36, 93.35, 100.33, 107.95, 115.57, 123.19, 130.81, 138.43, 146.05],\r\n      [59.68, 64.54, 69.4, 76.34, 81.2, 86.75, 94.38, 102.02, 109.65, 117.98, 126.31, 134.64, 142.96, 151.29, 159.62],\r\n      [71.9, 77.75, 83.6, 91.96, 97.81, 104.5, 113.7, 122.89, 132.09, 142.12, 152.15, 162.18, 172.22, 182.25, 192.28]\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n    ]\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    press: [137.6, 147.92, 158.24, 172, 182.32, 192.64, 206.4, 220.16, 233.92, 247.68, 261.44, 275.2, 292.4, 309.6, 326.8],\r\n    lvl1hit1: [84, 90.3, 96.6, 105, 111.3, 117.6, 126, 134.4, 142.8, 151.2, 159.6, 168, 178.5, 189, 199.5],\r\n    lvl1hit2: [92, 98.9, 105.8, 115, 121.9, 128.8, 138, 147.2, 156.4, 165.6, 174.8, 184, 195.5, 207, 218.5],\r\n    lvl2hit1: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    lvl2hit2: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    explosion: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5]\r\n  },\r\n  burst: {\r\n    dmg: [232.8, 250.26, 267.72, 291, 308.46, 325.92, 349.2, 372.48, 395.76, 419.04, 442.32, 465.6, 494.7, 523.8, 552.9],\r\n    healHP: [6, 6.45, 6.9, 7.5, 7.95, 8.4, 9, 9.6, 10.2, 10.8, 11.4, 12, 12.75, 13.5, 14.25],\r\n    healHPFlat: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n    atkRatio: [56, 60.2, 64.4, 70, 74.2, 78.4, 84, 89.6, 95.2, 100.8, 106.4, 112, 119, 126, 133]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const hp = data.burst.healHP[stats.tlvl.burst] / 100\r\n      const flat = data.burst.healHPFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    atkBonus: stats => {\r\n      const { constellation } = stats\r\n      const percent = (data.burst.atkRatio[stats.tlvl.burst] + (constellation < 1 ? 0 : 20)) / 100\r\n      return [s => percent * s.baseATK, [\"baseATK\"]]\r\n    }\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [70, 75.7, 81.4, 89.54, 95.24, 101.75, 110.7, 119.66, 128.61, 138.38, 148.15, 157.92, 167.68, 177.45, 187.22],\r\n      [63.12, 68.26, 73.4, 80.74, 85.88, 91.75, 99.82, 107.9, 115.97, 124.78, 133.59, 142.4, 151.2, 160.01, 168.82],\r\n      [80.32, 86.86, 93.4, 102.74, 109.28, 116.75, 127.02, 137.3, 147.57, 158.78, 169.99, 181.2, 192.4, 203.61, 214.82],\r\n      [101.22, 109.46, 117.7, 129.47, 137.71, 147.13, 160.07, 173.02, 185.97, 200.09, 214.21, 228.34, 242.46, 256.59, 270.71],\r\n    ],\r\n  },\r\n  charged: {\r\n    spinning: [56.29, 60.87, 65.45, 71.99, 76.57, 81.81, 89.01, 96.21, 103.41, 111.26, 119.12, 126.97, 134.82, 142.68, 150.53],\r\n    final: [101.78, 110.07, 118.35, 130.19, 138.47, 147.94, 160.96, 173.97, 186.99, 201.2, 215.4, 229.6, 243.8, 258, 272.21]\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.40, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21]\r\n  },\r\n  skill: {\r\n    dmg: [172.04, 184.94, 197.85, 215.05, 227.95, 240.86, 258.06, 275.26, 292.47, 309.67, 326.88, 344.08, 365.59, 387.09, 408.60],\r\n    infusionDuration: [2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3, 3, 3, 3],\r\n  },\r\n  burst: {\r\n    dmg: [142.40, 153.08, 163.76, 178, 188.68, 199.36, 213.60, 227.84, 242.08, 256.32, 270.56, 284.80, 302.60, 320.40, 338.20],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(50, stats, \"elemental\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n\r\n  normal: {\r\n    hitArr: [\r\n      [89.7, 97, 104.3, 114.73, 122.03, 130.38, 141.85, 153.32, 164.79, 177.31, 191.65, 208.52, 225.38, 242.25, 260.65],\r\n      [87.63, 94.77, 101.9, 112.09, 119.22, 127.38, 138.58, 149.79, 161, 173.23, 187.24, 203.72, 220.2, 236.67, 254.65],\r\n      [98.81, 106.86, 114.9, 126.39, 134.43, 143.63, 156.26, 168.9, 181.54, 195.33, 211.13, 229.71, 248.29, 266.87, 287.14],\r\n      [133.99, 144.89, 155.8, 171.38, 182.29, 194.75, 211.89, 229.03, 246.16, 264.86, 286.28, 311.48, 336.67, 361.86, 389.34],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [68.8, 74.4, 80, 88, 93.6, 100, 108.8, 117.6, 126.4, 136, 147, 159.94, 172.87, 185.81, 199.92],\r\n    final: [124.7, 134.85, 145, 159.5, 169.65, 181.25, 197.2, 213.15, 229.1, 246.5, 266.44, 289.88, 313.33, 336.78, 362.36]\r\n  },\r\n  plunging: {\r\n    dmg: [89.51, 96.79, 104.08, 114.48, 121.77, 130.1, 141.54, 152.99, 164.44, 176.93, 189.42, 201.91, 214.4, 226.89, 239.37],\r\n    low: [178.97, 193.54, 208.11, 228.92, 243.49, 260.13, 283.03, 305.92, 328.81, 353.78, 378.76, 403.73, 428.7, 453.68, 478.65],\r\n    high: [223.55, 241.74, 259.94, 285.93, 304.13, 324.92, 353.52, 382.11, 410.7, 441.89, 473.09, 504.28, 535.47, 566.66, 597.86]\r\n  },\r\n  skill: {\r\n    hit1: [94.4, 101.48, 108.56, 118, 125.08, 132.16, 141.6, 151.04, 160.48, 169.92, 179.36, 188.8, 200.6, 212.4, 224.2],\r\n    hit2: [97.6, 104.92, 112.24, 122, 129.32, 136.64, 146.4, 156.16, 165.92, 175.68, 185.44, 195.2, 207.4, 219.6, 231.8],\r\n    hit3: [128.8, 138.46, 148.12, 161, 170.66, 180.32, 193.2, 206.08, 218.96, 231.84, 244.72, 257.6, 273.7, 289.8, 305.9],\r\n  },\r\n  burst: {\r\n    slashing: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n    dot: [60, 64.5, 69, 75, 79.5, 84, 90, 96, 102, 108, 114, 120, 127.5, 135, 142.5],\r\n    explosion: [204, 219.3, 234.6, 255, 270.3, 285.6, 306, 326.4, 346.8, 367.2, 387.6, 408, 433.5, 459, 484.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    ...Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n      [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n    hit2b: stats => basicDMGFormula(data.skill.hit2[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n    hit3b: stats => basicDMGFormula(data.skill.hit3[stats.tlvl.skill] + 40, stats, \"skill\"),\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [36.12, 39.06, 42, 46.2, 49.14, 52.5, 57.12, 61.74, 66.36, 71.4, 77.18, 83.97, 90.76, 97.55, 104.96],\r\n      [33.54, 36.27, 39, 42.9, 45.63, 48.75, 53.04, 57.33, 61.62, 66.3, 71.66, 77.97, 84.28, 90.58, 97.46],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91.88, 99.96, 108.05, 116.13, 124.95],\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19]\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmgPerPaw: [41.92, 45.06, 48.21, 52.4, 55.54, 58.69, 62.88, 67.07, 71.26, 75.46, 79.65, 83.84, 89.08, 94.32, 99.56],\r\n    shieldFlat: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    shieldHp: [7.2, 7.74, 8.28, 9, 9.54, 10.08, 10.8, 11.52, 12.24, 12.96, 13.68, 14.4, 15.3, 16.2, 17.1],\r\n    durationPerPaw: [1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4, 2.4]\r\n  },\r\n  burst: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    continuousDmg: [52.64, 56.59, 60.54, 65.8, 69.75, 73.7, 78.96, 84.22, 89.49, 94.75, 100.02, 105.28, 111.86, 118.44, 125.02],\r\n    hpFlat: [513, 565, 620, 680, 744, 813, 885, 962, 1044, 1129, 1219, 1313, 1411, 1514, 1621],\r\n    hpPercent: [5.34, 5.74, 6.14, 6.67, 7.07, 7.47, 8, 8.54, 9.07, 9.6, 10.14, 10.67, 11.34, 12.01, 12.67]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    shieldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shield: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldHoldCryo: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 2.5 * 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    shieldHold: stats => {\r\n      const hp = data.skill.shieldHp[stats.tlvl.skill] / 100\r\n      const flat = data.skill.shieldFlat[stats.tlvl.skill]\r\n      const shdStr = 1.75 * (stats.constellation >= 2 ? 1.15 : 1)\r\n      return [s => (hp * s.finalHP + flat) * (1 + s.shield_ / 100) * shdStr, [\"finalHP\", \"shield_\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmgPerPaw[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: stats => {\r\n      const hp = data.burst.hpPercent[stats.tlvl.burst] / 100\r\n      const flat = data.burst.hpFlat[stats.tlvl.burst]\r\n      return [s => (hp * s.finalHP + flat) * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    continuousDmg: stats => basicDMGFormula(data.burst.continuousDmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n      toTalentPercent(skillParam_gen.auto[a++]),\r\n      toTalentPercent(skillParam_gen.auto[a++]),//x2\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: toTalentPercent(skillParam_gen.auto[a++]),\r\n    final: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n    maxDuration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    pressDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    holdDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    brandDMG: toTalentPercent(skillParam_gen.skill[s++]),\r\n    phyResDec: toTalentPercent(skillParam_gen.skill[s++]),\r\n    cyroResDec: toTalentPercent(skillParam_gen.skill[s++]),\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    //TODO: 14?\r\n    //TODO: neg of dec\r\n    //TODO: neg of dec\r\n    //TODO: 18?\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[b++]),\r\n    baseDMG: toTalentPercent(skillParam_gen.burst[b++]),\r\n    stackDMG: toTalentPercent(skillParam_gen.burst[b++]),\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  }\r\n} as const\r\nconst physicalBurst25 = (val, stats): FormulaItem => {\r\n  val = val / 100\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"burst_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.physical_burst_hit_base_multi + 0.25) * s.enemyLevel_multi * s.physical_enemyRes_multi, [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"physical_burst_hit_base_multi\", \"enemyLevel_multi\", \"physical_enemyRes_multi\"]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    pressDMG: stats => basicDMGFormula(data.skill.pressDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    brandDMG: stats => basicDMGFormula(data.skill.brandDMG[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [i, stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats, \"burst\", \"physical\")])),\r\n    ...Object.fromEntries([...Array(31).keys()].map(i =>\r\n      [`${i}_50`, stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] + i * data.burst.stackDMG[stats.tlvl.burst], stats)]))\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.burst.baseDMG[stats.tlvl.burst] / 2, stats, \"burst\", \"physical\"),\r\n    dmg50: stats => physicalBurst25(data.burst.baseDMG[stats.tlvl.burst] / 2, stats)\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.12, 47.71, 51.3, 56.43, 60.02, 64.13, 69.77, 75.41, 81.05, 87.21, 93.37, 99.52, 105.68, 111.83, 117.99],\r\n      [46.78, 50.59, 54.4, 59.84, 63.65, 68, 73.98, 79.97, 85.95, 92.48, 99.01, 105.54, 112.06, 118.59, 125.12],\r\n      [58.14, 62.87, 67.6, 74.36, 79.09, 84.5, 91.94, 99.37, 106.81, 114.92, 123.03, 131.14, 139.26, 147.37, 155.48],\r\n      [57.71, 62.4, 67.1, 73.81, 78.51, 83.88, 91.26, 98.64, 106.02, 114.07, 122.12, 130.17, 138.23, 146.28, 154.33],\r\n      [72.07, 77.93, 83.8, 92.18, 98.05, 104.75, 113.97, 123.19, 132.4, 142.46, 152.52, 162.57, 172.63, 182.68, 192.74],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    fullAimedShot: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    oz: [88.8, 95.46, 102.12, 111, 117.66, 124.32, 133.2, 142.08, 150.96, 159.84, 168.72, 177.6, 188.7, 199.8, 210.9],\r\n    dmg: [115.44, 124.1, 132.76, 144.3, 152.96, 161.62, 173.16, 184.7, 196.25, 207.79, 219.34, 230.88, 245.31, 259.74, 274.17],\r\n  },\r\n  burst: {\r\n    dmg: [208, 223.6, 239.2, 260, 275.6, 291.2, 312, 332.8, 353.6, 374.4, 395.2, 416, 442, 468, 494],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    fullAimedShot: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto], stats, \"charged\", \"electro\"),\r\n    fullAimedShotOz: stats => basicDMGFormula(data.charged.fullAimedShot[stats.tlvl.auto] * (152.7 / 100), stats, \"charged\", \"electro\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    oz: stats => basicDMGFormula(data.skill.oz[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] + (stats.constellation >= 2 ? 200 : 0), stats, \"skill\"),\r\n    activeChar: stats => basicDMGFormula(30, stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    addDmg: stats => basicDMGFormula(222, stats, \"burst\"),\r\n    regen: stats => [s => 0.2 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"skill\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(22, stats, \"normal\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [31.73, 34.32, 36.9, 40.59, 43.17, 46.13, 50.18, 54.24, 58.3, 62.73, 67.8, 73.77, 79.74, 85.7, 92.21],\r\n      [35.6, 38.5, 41.4, 45.54, 48.44, 51.75, 56.3, 60.86, 65.41, 70.38, 76.07, 82.77, 89.46, 96.16, 103.46],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [45.49, 49.2, 52.9, 58.19, 61.89, 66.13, 71.94, 77.76, 83.58, 89.93, 97.2, 105.76, 114.31, 122.87, 132.2],\r\n      [48.25, 52.17, 56.1, 61.71, 65.64, 70.13, 76.3, 82.47, 88.64, 95.37, 103.08, 112.16, 121.23, 130.3, 140.19],\r\n      [57.62, 62.31, 67, 73.7, 78.39, 83.75, 91.12, 98.49, 105.86, 113.9, 123.11, 133.95, 144.78, 155.61, 167.43],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimedShot: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    aimShot1: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n    frostflake: [128, 137.6, 147.2, 160, 169.6, 179.2, 192, 204.8, 217.6, 230.4, 243.2, 256, 272, 288, 304],\r\n    frostflakeBloom: [217.6, 233.92, 250.24, 272, 288.32, 304.64, 326.4, 348.16, 369.92, 391.68, 413.44, 435.2, 462.4, 489.6, 516.8]\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    hp: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    dmg: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  },\r\n  burst: {\r\n    dmg: [70.27, 75.54, 80.81, 87.84, 93.11, 98.38, 105.41, 112.44, 119.46, 126.49, 133.52, 140.54, 149.33, 158.11, 166.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    aimShot: stats => basicDMGFormula(data.charged.aimedShot[stats.tlvl.auto], stats, \"charged\"),\r\n    aimShot1: stats => basicDMGFormula(data.charged.aimShot1[stats.tlvl.auto], stats, \"charged\", \"cryo\"),\r\n    frostflake: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.Ganyu?.sheet?.talent?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflake[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflake[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n    frostflakeBloom: stats => {\r\n      if (stats.hitMode === \"avgHit\") {\r\n        const [conditionalNum] = stats.conditionalValues?.character?.Ganyu?.sheet?.talent?.a1 ?? []\r\n        if (conditionalNum) {\r\n          const val = data.charged.frostflakeBloom[stats.tlvl.auto] / 100\r\n          //cryo_charged_hit or cryo_melt_charged_hit\r\n          const statKey = `cryo${stats.reactionMode === \"cryo_melt\" ? \"_melt\" : \"\"}_charged_hit`\r\n          //cryo charged atk hit * (1 + min(20% + critRate, 100) critDmg_)\r\n          return [s => val * s[statKey] * (1 + Math.min(20 + s.critRate_ + s.charged_critRate_, 100) * s.critDMG_ / 10000), [statKey, \"critRate_\", \"critDMG_\", \"charged_critRate_\"]]\r\n        }\r\n      }\r\n      return basicDMGFormula(data.charged.frostflakeBloom[stats.tlvl.auto], stats, \"charged\", \"cryo\")\r\n    },\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    hp: stats => {\r\n      const hp = data.skill.hp[stats.tlvl.skill] / 100\r\n      return [(s) => hp * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [46.89, 50.08, 53.28, 57.54, 60.74, 64.47, 69.26, 74.06, 78.85, 83.65, 88.44, 93.24, 98.04, 102.83, 107.63],\r\n      [48.25, 51.54, 54.83, 59.22, 62.51, 66.35, 71.28, 76.22, 81.15, 86.09, 91.02, 95.96, 100.89, 105.83, 110.76],\r\n      [61.05, 65.21, 69.38, 74.93, 79.09, 83.94, 90.19, 96.43, 102.68, 108.92, 115.16, 121.41, 127.65, 133.89, 140.14],\r\n      [65.64, 70.12, 74.59, 80.56, 85.03, 90.26, 96.97, 103.68, 110.4, 117.11, 123.82, 130.54, 137.25, 143.96, 150.68],\r\n      [33.27, 35.54, 37.81, 40.84, 43.1, 45.75, 49.15, 52.56, 55.96, 59.36, 62.77, 66.17, 69.57, 72.98, 76.38],//5.1\r\n      [35.2, 37.6, 40, 43.2, 45.6, 48.4, 52, 55.6, 59.2, 62.8, 66.4, 70, 73.6, 77.2, 80.8],//5.2\r\n      [85.96, 91.82, 97.68, 105.49, 111.36, 118.19, 126.98, 135.78, 144.57, 153.36, 162.15, 170.94, 179.73, 188.52, 197.31],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [135.96, 145.23, 154.5, 166.86, 176.13, 186.95, 200.85, 214.76, 228.66, 242.57, 256.47, 270.38, 284.28, 298.19, 312.09],\r\n  },\r\n  plunging: {\r\n    dmg: [65.42, 69.88, 74.34, 80.29, 84.75, 89.95, 96.64, 103.33, 110.02, 116.71, 123.4, 130.1, 136.79, 143.48, 150.17],\r\n    low: [130.81, 139.73, 148.65, 160.54, 169.46, 179.86, 193.24, 206.62, 220, 233.38, 246.76, 260.13, 273.51, 286.89, 300.27],\r\n    high: [163.39, 174.53, 185.67, 200.52, 211.66, 224.66, 241.37, 258.08, 274.79, 291.5, 308.21, 324.92, 341.63, 358.34, 375.05],\r\n  },\r\n  skill: {\r\n    atk_inc: [3.84, 4.07, 4.3, 4.6, 4.83, 5.06, 5.36, 5.66, 5.96, 6.26, 6.56, 6.85, 7.15, 7.45, 7.75],\r\n    dmg: [64, 68.8, 73.6, 80, 84.8, 89.6, 96, 102.4, 108.8, 115.2, 121.6, 128, 136, 144, 152],\r\n  },\r\n  burst: {\r\n    dmg: [303.27, 321.43, 339.59, 363.2, 381.36, 399.52, 423.13, 446.74, 470.34, 493.95, 517.56, 541.17, 564.78, 588.38, 611.99],\r\n    low_dmg: [379.09, 401.79, 424.49, 454, 476.7, 499.4, 528.91, 558.42, 587.93, 617.44, 646.95, 676.46, 705.97, 735.48, 764.99],\r\n    regen: [6.26, 6.64, 7.01, 7.5, 7.88, 8.25, 8.74, 9.23, 9.71, 10.2, 10.69, 11.18, 11.66, 12.15, 12.64],\r\n    low_regen: [8.35, 8.85, 9.35, 10, 10.5, 11, 11.65, 12.3, 12.95, 13.6, 14.25, 14.9, 15.55, 16.2, 16.85]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    atk_inc: stats => {\r\n      const val = data.skill.atk_inc[stats.tlvl.skill] / 100\r\n      return [s => Math.min(val * s.finalHP, 4 * s.baseATK), [\"finalHP\", \"baseATK\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmgC2: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const statKey = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => (val * s.finalATK + 0.1 * s.finalHP) * s[statKey], [\"finalATK\", statKey]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    low_dmg: stats => basicDMGFormula(data.burst.low_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    regen: stats => {\r\n      const val = data.burst.regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n    low_regen: stats => {\r\n      const val = data.burst.low_regen[stats.tlvl.burst] / 100\r\n      return [s => val * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [48.33, 52.27, 56.2, 61.82, 65.75, 70.25, 76.43, 82.61, 88.8, 95.54, 103.27, 112.36, 121.44, 130.53, 140.44],\r\n      [45.58, 49.29, 53, 58.3, 62.01, 66.25, 72.08, 77.91, 83.74, 90.1, 97.39, 105.96, 114.53, 123.1, 132.45],\r\n      [60.29, 65.19, 70.1, 77.11, 82.02, 87.63, 95.34, 103.05, 110.76, 119.17, 128.81, 140.14, 151.48, 162.81, 175.18],\r\n      [65.88, 71.24, 76.6, 84.26, 89.62, 95.75, 104.18, 112.6, 121.03, 130.22, 140.75, 153.14, 165.52, 177.91, 191.42],\r\n      [79.21, 85.65, 92.1, 101.31, 107.76, 115.13, 125.26, 135.39, 145.52, 156.57, 169.23, 184.13, 199.02, 213.91, 230.16],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [162.02, 175.21, 188.4, 207.24, 220.43, 235.5, 256.22, 276.95, 297.67, 320.28, 346.19, 376.65, 407.11, 437.58, 470.81],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [292, 313.9, 335.8, 365, 386.9, 408.8, 438, 467.2, 496.4, 525.6, 554.8, 584, 620.5, 657, 693.5],\r\n  },\r\n  burst: {\r\n    skill: [424.8, 456.66, 488.52, 531, 562.86, 594.72, 637.2, 679.68, 722.16, 764.64, 807.12, 849.6, 902.7, 955.8, 1008.9],\r\n    field_dmg: [78.4, 84.28, 90.16, 98, 103.88, 109.76, 117.6, 125.44, 133.28, 141.12, 148.96, 156.8, 166.6, 176.4, 186.2],\r\n    heal_flat: [1540, 1694, 1861, 2041, 2234, 2439, 2657, 2888, 3132, 3389, 3659, 3941, 4236, 4544, 4865],\r\n    heal_atk: [251.2, 270.04, 288.88, 314, 332.84, 351.68, 376.8, 401.92, 427.04, 452.16, 477.28, 502.4, 533.8, 565.2, 596.6],\r\n    regen_flat: [154, 169, 186, 204, 223, 244, 266, 289, 313, 339, 366, 394, 424, 454, 487],\r\n    regen_atk: [25.12, 27, 28.89, 31.4, 33.28, 35.17, 37.68, 40.19, 42.7, 45.22, 47.73, 50.24, 53.38, 56.52, 59.66],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    dmg_hold: stats => {\r\n      const val = data.skill.dmg[stats.tlvl.skill] / 100\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => val * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + 0.4) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    field_dmg: stats => basicDMGFormula(data.burst.field_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    heal: stats => {\r\n      const atk = data.burst.heal_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    regen: stats => {\r\n      const atk = data.burst.regen_atk[stats.tlvl.burst] / 100\r\n      const flat = data.burst.regen_flat[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.98, 48.64, 52.3, 57.53, 61.19, 65.38, 71.13, 76.88, 82.63, 88.91, 96.1, 104.56, 113.02, 121.47, 130.7],//1\r\n      [45.24, 48.92, 52.6, 57.86, 61.54, 65.75, 71.54, 77.32, 83.11, 89.42, 96.65, 105.16, 113.66, 122.17, 131.45],//2\r\n      [25.8, 27.9, 30, 33, 35.1, 37.5, 40.8, 44.1, 47.4, 51, 55.13, 59.98, 64.83, 69.68, 74.97],//3.1\r\n      [30.96, 33.48, 36, 39.6, 42.12, 45, 48.96, 52.92, 56.88, 61.2, 66.15, 71.97, 77.79, 83.61, 89.96],//3.2\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 129.73, 141.14, 152.56, 163.98, 176.43],//4\r\n      [25.37, 27.44, 29.5, 32.45, 34.52, 36.88, 40.12, 43.37, 46.61, 50.15, 54.21, 58.98, 63.75, 68.52, 73.72],//5x3\r\n    ],\r\n  },\r\n  charged: {\r\n    hit1: [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91.88, 99.96, 108.05, 116.13, 124.95],\r\n    hit2: [74.65, 80.72, 86.8, 95.48, 101.56, 108.5, 118.05, 127.6, 137.14, 147.56, 159.5, 173.53, 187.57, 201.6, 216.91]\r\n  },\r\n  plunging: {\r\n    dmg: [81.83, 88.49, 95.16, 104.67, 111.33, 118.94, 129.41, 139.88, 150.35, 161.76, 173.18, 184.6, 196.02, 207.44, 218.86],\r\n    low: [163.63, 176.95, 190.27, 209.3, 222.62, 237.84, 258.77, 279.7, 300.63, 323.46, 346.29, 369.12, 391.96, 414.79, 437.62],\r\n    high: [204.39, 221.02, 237.66, 261.42, 278.06, 297.07, 323.21, 349.36, 375.5, 404.02, 432.54, 461.06, 489.57, 518.09, 546.61]\r\n  },\r\n  skill: {\r\n    press: [192, 206.4, 220.8, 240, 254.4, 268.8, 288, 307.2, 326.4, 345.6, 364.8, 384, 408, 432, 456],\r\n    hold: [260.8, 280.36, 299.92, 326, 345.56, 365.12, 391.2, 417.28, 443.36, 469.44, 495.52, 521.6, 554.2, 586.8, 619.4]\r\n  },\r\n  burst: {\r\n    dmg: [262.4, 282.08, 301.76, 328, 347.68, 367.36, 393.6, 419.84, 446.08, 472.32, 498.56, 524.8, 557.6, 590.4, 623.2],\r\n    dot: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    add: [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5]\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    hold: stats => basicDMGFormula(data.skill.hold[stats.tlvl.skill], stats, \"skill\"),\r\n    pdmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n    plow: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n    phigh: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\", \"anemo\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.burst.add[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(200, stats, \"plunging\", eleKey)])),\r\n  passive2: {\r\n    bonus: stats => [s => s.eleMas * 0.04, ['eleMas']]\r\n  },\r\n  constellation6: {\r\n    bonus: stats => [s => s.eleMas * 0.2, ['eleMas']]\r\n  }\r\n}\r\n\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [53.75, 58.13, 62.5, 68.75, 73.13, 78.13, 85, 91.88, 98.75, 106.25, 114.84, 124.95, 135.06, 145.16, 156.19],\r\n      [51.69, 55.89, 60.1, 66.11, 70.32, 75.13, 81.74, 88.35, 94.96, 102.17, 110.43, 120.15, 129.87, 139.59, 150.19],\r\n      [65.27, 70.59, 75.9, 83.49, 88.8, 94.88, 103.22, 111.57, 119.92, 129.03, 139.47, 151.74, 164.01, 176.29, 189.67],\r\n      [70.86, 76.63, 82.4, 90.64, 96.41, 103, 112.06, 121.13, 130.19, 140.08, 151.41, 164.73, 178.06, 191.38, 205.92],\r\n      [88.24, 95.42, 102.6, 112.86, 120.04, 128.25, 139.54, 150.82, 162.11, 174.42, 188.53, 205.12, 221.71, 238.3, 256.4]\r\n    ]\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.04, 59.52, 64, 70.4, 74.88, 80, 87.04, 94.08, 101.12, 108.8, 117.6, 127.95, 138.3, 148.65, 159.94,],\r\n      [73.1, 79.05, 85, 93.5, 99.45, 106.25, 115.6, 124.95, 134.3, 144.5, 156.19, 169.93, 183.68, 197.42, 212.42],\r\n    ]\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [191.2, 205.54, 219.88, 239, 253.34, 267.68, 286.8, 305.92, 325.04, 344.16, 363.28, 382.4, 406.3, 430.2, 454.1],\r\n  },\r\n  burst: {\r\n    dmg: [77.6, 83.42, 89.24, 97, 102.82, 108.64, 116.4, 124.16, 131.92, 139.68, 147.44, 155.2, 164.9, 174.6, 184.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: stats => [s => 0.15 * s.finalATK * s.heal_multi, [\"finalATK\", \"heal_multi\"]],\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.3 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldCryo: stats => [s => 0.3 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [45.73, 49.45, 53.17, 58.49, 62.21, 66.46, 72.31, 78.16, 84.01, 90.39, 96.77, 103.15, 109.53, 115.91, 122.29],\r\n      [48.68, 52.65, 56.61, 62.27, 66.23, 70.76, 76.99, 83.22, 89.44, 96.24, 103.03, 109.82, 116.62, 123.41, 130.2],\r\n      [62.62, 67.72, 72.82, 80.1, 85.19, 91.02, 99.03, 107.04, 115.05, 123.79, 132.53, 141.26, 150, 158.74, 167.48],\r\n      [22.65, 24.49, 26.33, 28.97, 30.81, 32.92, 35.81, 38.71, 41.61, 44.77, 47.93, 51.09, 54.25, 57.41, 60.57],//×3\r\n      [78.18, 84.55, 90.91, 100, 106.36, 113.64, 123.64, 133.64, 143.64, 154.55, 165.45, 176.36, 187.27, 198.18, 209.09]\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [55.13, 59.61, 64.1, 70.51, 75, 80.13, 87.18, 94.23, 101.28, 108.97, 116.66, 124.35, 132.05, 139.74, 147.43],//×3\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    dmg: [239.2, 257.14, 275.08, 299, 316.94, 334.88, 358.8, 382.72, 406.64, 430.56, 454.48, 478.4, 508.3, 538.2, 568.1]\r\n  },\r\n  burst: {\r\n    cutting: [112.3, 120.72, 129.15, 140.38, 148.8, 157.22, 168.45, 179.68, 190.91, 202.14, 213.37, 224.6, 238.64, 252.68, 266.71],\r\n    bloom: [168.45, 181.08, 193.72, 210.56, 223.2, 235.83, 252.68, 269.52, 286.36, 303.21, 320.05, 336.9, 357.96, 379.01, 400.07],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    cutting: stats => basicDMGFormula(data.burst.cutting[stats.tlvl.burst], stats, \"burst\"),\r\n    bloom: stats => basicDMGFormula(data.burst.bloom[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: stats => basicDMGFormula(data.burst.cutting[stats.tlvl.burst] / 5, stats, \"burst\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { singleToTalentPercent, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nlet a = 0, s = 0, b = 0\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[a++]),//1\r\n      toTalentPercent(skillParam_gen.auto[a++]),//2\r\n      toTalentPercent(skillParam_gen.auto[a++]),//3\r\n      toTalentPercent(skillParam_gen.auto[a++]),//4.1\r\n      toTalentPercent(skillParam_gen.auto[a++]),//4.2\r\n      toTalentPercent(skillParam_gen.auto[a++]),//5\r\n    ],\r\n  },\r\n  charged: {\r\n    hit1: toTalentPercent(skillParam_gen.auto[a++]),\r\n    hit2: toTalentPercent(skillParam_gen.auto[a++]),\r\n    stam: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[a++]),\r\n    low: toTalentPercent(skillParam_gen.auto[a++]),\r\n    high: toTalentPercent(skillParam_gen.auto[a++]),\r\n  },\r\n  skill: {\r\n    stilleto: toTalentPercent(skillParam_gen.skill[s++]),\r\n    slashing: toTalentPercent(skillParam_gen.skill[s++]),\r\n    thunderclasp_slash: toTalentPercent(skillParam_gen.skill[s++]),\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    skill: toTalentPercent(skillParam_gen.burst[b++]),\r\n    consec_slash: toTalentPercent(skillParam_gen.burst[b++]),\r\n    last: toTalentPercent(skillParam_gen.burst[b++]),\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: singleToTalentPercent(skillParam_gen.constellation1[0]),\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atk_: singleToTalentPercent(skillParam_gen.constellation4[1]),\r\n  },\r\n  constellation6: {\r\n    electro_: singleToTalentPercent(skillParam_gen.constellation6[0]),\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    stilleto: stats => basicDMGFormula(data.skill.stilleto[stats.tlvl.skill], stats, \"skill\"),\r\n    slashing: stats => basicDMGFormula(data.skill.slashing[stats.tlvl.skill], stats, \"skill\"),\r\n    thunderclap_slashing: stats => basicDMGFormula(data.skill.thunderclasp_slash[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    skill: stats => basicDMGFormula(data.burst.skill[stats.tlvl.burst], stats, \"burst\"),\r\n    consec_slash: stats => basicDMGFormula(data.burst.consec_slash[stats.tlvl.burst], stats, \"burst\"),\r\n    last: stats => basicDMGFormula(data.burst.last[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(data.constellation1.dmg, stats, \"elemental\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [72.16, 77.57, 82.98, 90.2, 95.61, 101.02, 108.24, 115.46, 122.67, 129.89, 137.39, 147.21, 157.02, 166.83, 176.65],\r\n      [62.4, 67.08, 71.76, 78, 82.68, 87.36, 93.6, 99.84, 106.08, 112.32, 118.81, 127.3, 135.78, 144.27, 152.76],\r\n      [89.92, 96.66, 103.41, 112.4, 119.14, 125.89, 134.88, 143.87, 152.86, 161.86, 171.21, 183.44, 195.67, 207.9, 220.12]\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [157.36, 169.16, 180.96, 196.7, 208.5, 220.3, 236.04, 251.78, 267.51, 283.25, 299.61, 321.01, 342.42, 363.82, 385.22],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    jumpyDmg: [95.2, 102.34, 109.48, 119, 126.14, 133.28, 142.8, 152.32, 161.84, 171.36, 180.88, 190.4, 202.3, 214.2, 226.1],\r\n    mineDmg: [32.8, 35.26, 37.72, 41, 43.46, 45.92, 49.2, 52.48, 55.76, 59.04, 62.32, 65.6, 69.7, 73.8, 77.9],\r\n  },\r\n  burst: {\r\n    dmg: [42.64, 45.84, 49.04, 53.3, 56.5, 59.7, 63.96, 68.22, 72.49, 76.75, 81.02, 85.28, 90.61, 95.94, 101.27],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    jumpyDmg: stats => basicDMGFormula(data.skill.jumpyDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    mineDmg: stats => basicDMGFormula(data.skill.mineDmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * 1.2, stats, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(555, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),//x2\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),\r\n      toTalentPercent(skillParam_gen.auto[3]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[5]),\r\n    full: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[7]),\r\n    low: toTalentPercent(skillParam_gen.auto[8]),\r\n    high: toTalentPercent(skillParam_gen.auto[9]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    atkRatio: toTalentPercent(skillParam_gen.skill[1]),\r\n    duration: skillParam_gen.skill[2][0],\r\n    cd: skillParam_gen.skill[3][0]\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    cluster: toTalentPercent(skillParam_gen.burst[1]),\r\n    cd: skillParam_gen.burst[2][0],\r\n    cost: skillParam_gen.burst[3][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"electro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    atkBonus: stats => {\r\n      const percent = (data.skill.atkRatio[stats.tlvl.skill]) / 100\r\n      return [s => percent * s.baseATK, [\"baseATK\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    cluster: stats => basicDMGFormula(data.burst.cluster[stats.tlvl.burst], stats, \"burst\")\r\n  },\r\n  c2: {\r\n    dmg: stats => basicDMGFormula(0.3 * data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  }\r\n} as const\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [39.6, 42.57, 45.54, 49.5, 52.47, 55.44, 59.4, 63.36, 67.32, 71.28, 75.4, 80.78, 86.17, 91.56, 96.94],\r\n      [35.92, 38.61, 41.31, 44.9, 47.59, 50.29, 53.88, 57.47, 61.06, 64.66, 68.39, 73.28, 78.16, 83.05, 87.93],\r\n      [42.8, 46.01, 49.22, 53.5, 56.71, 59.92, 64.2, 68.48, 72.76, 77.04, 81.49, 87.31, 93.13, 98.95, 104.77],\r\n      [54.96, 59.08, 63.2, 68.7, 72.82, 76.94, 82.44, 87.94, 93.43, 98.93, 104.64, 112.12, 119.59, 127.07, 134.54],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [177.12, 190.4, 203.69, 221.4, 234.68, 247.97, 265.68, 283.39, 301.1, 318.82, 337.24, 361.32, 385.41, 409.5, 433.59],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    stack0: [320, 344, 368, 400, 424, 448, 480, 512, 544, 576, 608, 640, 680, 720, 760],\r\n    stack1: [368, 395.6, 423.2, 460, 487.6, 515.2, 552, 588.8, 625.6, 662.4, 699.2, 736, 782, 828, 874],\r\n    stack2: [424, 455.8, 487.6, 530, 561.8, 593.6, 636, 678.4, 720.8, 763.2, 805.6, 848, 901, 954, 1007],\r\n    stack3: [487.2, 523.74, 560.28, 609, 645.54, 682.08, 730.8, 779.52, 828.24, 876.96, 925.68, 974.4, 1035.3, 1096.2, 1157.1],\r\n\r\n  },\r\n  burst: {\r\n    summon: [9.14, 9.825, 10.51, 11.425, 12.11, 12.795, 13.71, 14.625, 15.5375, 16.4525, 17.365, 18.28, 19.4225, 20.565, 21.7075],//not shown in game nor honey, just dmg/4\r\n    dmg: [36.56, 39.3, 42.04, 45.7, 48.44, 51.18, 54.84, 58.5, 62.15, 65.81, 69.46, 73.12, 77.69, 82.26, 86.83],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n      [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n      [44.8, 48.16, 51.52, 56, 59.36, 62.72, 67.2, 71.68, 76.16, 80.64, 85.12, 89.6, 95.2, 100.8, 106.4],\r\n      [56.16, 60.37, 64.58, 70.2, 74.41, 78.62, 84.24, 89.86, 95.47, 101.09, 106.7, 112.32, 119.34, 126.36, 133.38],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [149.72, 160.95, 172.18, 187.15, 198.38, 209.61, 224.58, 239.55, 254.52, 269.5, 285.07, 305.43, 325.79, 346.15, 366.51],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    dmg: [132.8, 142.76, 152.72, 166, 175.96, 185.92, 199.2, 212.48, 225.76, 239.04, 252.32, 265.6, 282.2, 298.8, 315.4],\r\n    dot: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n  },\r\n  burst: {\r\n    bubble_explosion: [442.4, 475.58, 508.76, 553, 586.18, 619.36, 663.6, 707.84, 752.08, 796.32, 840.56, 884.8, 940.1, 995.4, 1050.7],\r\n    dmg_: [42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 60, 60, 60, 60, 60],\r\n    omen_duration: [4, 4, 4, 4.5, 4.5, 4.5, 5, 5, 5, 5, 5, 5, 5, 5, 5]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    bubble_explosion: stats => basicDMGFormula(data.burst.bubble_explosion[stats.tlvl.burst], stats, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill] / 2, stats, \"skill\"),\r\n  },\r\n  passive2: {\r\n    bonus: stats => [s => s.enerRech_ * 0.2, [\"enerRech_\"]]\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hit: [28, 30.1, 32.2, 35, 37.1, 39.2, 42, 44.8, 47.6, 50.4, 53.31, 57.12, 60.93, 64.74, 68.54]\r\n  },\r\n  charged: {\r\n    dmg: [174.08, 187.14, 200.19, 217.6, 230.66, 243.71, 261.12, 278.53, 295.94, 313.34, 331.45, 355.12, 378.8, 402.47, 426.15],\r\n    jade: [49.6, 53.32, 57.04, 62, 65.72, 69.44, 74.4, 79.36, 84.32, 89.28, 94.44, 101.18, 107.93, 114.68, 121.42],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    inheri_hp: [50.1, 53.1, 56.1, 60, 63, 66, 69.9, 73.8, 77.7, 81.6, 85.5, 89.4, 93.3, 97.2, 101.1],\r\n    dmg: [230.4, 247.68, 264.96, 288, 305.28, 322.56, 345.6, 368.64, 391.68, 414.72, 437.76, 460.8, 489.6, 518.4, 547.2],\r\n  },\r\n  burst: {\r\n    dmg_per_gem: [86.96, 93.48, 100, 108.7, 115.22, 121.74, 130.44, 139.14, 147.83, 156.53, 165.22, 173.92, 184.79, 195.66, 206.53],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    hit: stats => basicDMGFormula(data.normal.hit[stats.tlvl.auto], stats, \"normal\")\r\n  },\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    inheri_hp: stats => {\r\n      const val = data.skill.inheri_hp[stats.tlvl.skill] / 100\r\n      return [s => val * s.finalHP, [\"finalHP\"]]\r\n    },\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg_per_gem: stats => basicDMGFormula(data.burst.dmg_per_gem[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [79.12, 85.56, 92, 101.2, 107.64, 115, 125.12, 135.24, 145.36, 156.4, 167.44, 178.48, 189.52, 200.56, 211.6],\r\n      [73.36, 79.33, 85.3, 93.83, 99.8, 106.63, 116.01, 125.39, 134.77, 145.01, 155.25, 165.48, 175.72, 185.95, 196.19],\r\n      [86.26, 93.28, 100.3, 110.33, 117.35, 125.38, 136.41, 147.44, 158.47, 170.51, 182.55, 194.58, 206.62, 218.65, 230.69],\r\n      [113.43, 122.67, 131.9, 145.09, 154.32, 164.88, 179.38, 193.89, 208.4, 224.23, 240.06, 255.89, 271.71, 287.54, 303.37],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [50.74, 54.87, 59, 64.9, 69.03, 73.75, 80.24, 86.73, 93.22, 100.3, 107.38, 114.46, 121.54, 128.62, 135.7],\r\n    final: [90.47, 97.84, 105.2, 115.72, 123.08, 131.5, 143.07, 154.64, 166.22, 178.84, 191.46, 204.09, 216.71, 229.34, 241.96],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21],\r\n  },\r\n  skill: {\r\n    skill_dmg: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],\r\n    shield_def: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n    shield_flat: [770, 847, 930, 1020, 1116, 1219, 1328, 1443, 1565, 1694, 1828, 1970, 2117, 2271, 2431],\r\n    heal_def: [21.28, 22.88, 24.47, 26.6, 28.2, 29.79, 31.92, 34.05, 36.18, 38.3, 40.43, 42.56, 45.22, 47.88, 50.54],\r\n    heal_flat: [103, 113, 124, 136, 149, 163, 177, 193, 209, 226, 244, 263, 282, 303, 324],\r\n    heal_trigger: [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59, 60, 60, 60, 60],\r\n  },\r\n  burst: {\r\n    burst_dmg: [67.2, 72.24, 77.28, 84, 89.04, 94.08, 100.8, 107.52, 114.24, 120.96, 127.68, 134.4, 142.8, 151.2, 159.6],\r\n    skill_dmg: [92.8, 99.76, 106.72, 116, 122.96, 129.92, 139.2, 148.48, 157.76, 167.04, 176.32, 185.6, 197.2, 208.8, 220.4],\r\n    bonus: [40, 43, 46, 50, 53, 56, 60, 64, 68, 72, 76, 80, 85, 90, 95],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    skill_dmg: stats => {\r\n      const percent = data.skill.skill_dmg[stats.tlvl.skill] / 100, key = getTalentStatKey(\"skill\", stats) + \"_multi\"\r\n      return [s => percent * s[key] * s.finalDEF, [key, \"finalDEF\"]]\r\n    },\r\n    shield: stats => {\r\n      const percent = data.skill.shield_def[stats.tlvl.skill] / 100, flat = data.skill.shield_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100) * 1.5, [\"finalDEF\", \"shield_\"]]\r\n    },\r\n    heal: stats => {\r\n      const percent = data.skill.heal_def[stats.tlvl.skill] / 100, flat = data.skill.heal_flat[stats.tlvl.skill]\r\n      return [s => (percent * s.finalDEF + flat) * s.heal_multi, [\"finalDEF\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    burst_dmg: stats => basicDMGFormula(data.burst.burst_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    skill_dmg: stats => basicDMGFormula(data.burst.skill_dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    bonus: stats => {\r\n      const val = (data.burst.bonus[stats.tlvl.burst] + (stats.constellation >= 6 ? 50 : 0)) / 100\r\n      return [s => val * s.finalDEF, [\"finalDEF\"]]\r\n    }\r\n  },\r\n  constellation4: {\r\n    dmg: stats => basicDMGFormula(400, stats, \"elemental\"),\r\n  },\r\n  passive1: {\r\n    hp: stats => [s => 4 * s.finalDEF * (1 + s.shield_ / 100) * 1.5, [\"finalDEF\", \"shield_\"]],\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [37.75, 40.83, 43.9, 48.29, 51.36, 54.88, 59.7, 64.53, 69.36, 74.63, 79.9, 85.17, 90.43, 95.7, 100.97],//1\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//2\r\n      [24.17, 26.13, 28.1, 30.91, 32.88, 35.13, 38.22, 41.31, 44.4, 47.77, 51.14, 54.51, 57.89, 61.26, 64.63],//3 x2\r\n      [24.68, 26.69, 28.7, 31.57, 33.58, 35.88, 39.03, 42.19, 45.35, 48.79, 52.23, 55.68, 59.12, 62.57, 66.01],//4 x2\r\n      [63.04, 68.17, 73.3, 80.63, 85.76, 91.63, 99.69, 107.75, 115.81, 124.61, 133.41, 142.2, 151, 159.79, 168.59],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [64.33, 69.56, 74.8, 82.28, 87.52, 93.5, 101.73, 109.96, 118.18, 127.16, 136.14, 145.11, 154.09, 163.06, 172.0],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n\r\n  skill: {\r\n    hit: [96, 103.2, 110.4, 120, 127.2, 134.4, 144, 153.6, 163.2, 172.8, 182.4, 192, 204, 216, 228],\r\n    herald: [36, 38.7, 41.4, 45, 47.7, 50.4, 54, 57.6, 61.2, 64.8, 68.4, 72, 76.5, 81, 85.5],\r\n    hitregen: {\r\n      base: [67, 74, 81, 89, 98, 107, 116, 126, 137, 148, 160, 172, 185, 199, 213],\r\n      atk: [10.56, 11.35, 12.14, 13.2, 13.99, 14.78, 15.84, 16.9, 17.95, 19.01, 20.06, 21.12, 22.44, 23.76, 25.08],\r\n    },\r\n    continuousregen: {\r\n      base: [451, 496, 544, 597, 653, 713, 777, 845, 916, 991, 1070, 1153, 1239, 1329, 1423],\r\n      atk: [69.6, 74.82, 80.04, 87, 92.22, 97.44, 104.4, 111.36, 118.32, 125.28, 132.24, 139.2, 147.9, 156.6, 165.3],\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: [284.8, 306.16, 327.52, 356, 377.36, 398.72, 427.2, 455.68, 484.16, 512.64, 541.12, 569.6, 605.2, 640.8, 676.4],\r\n    healing: {\r\n      base: [577, 635, 698, 765, 837, 914, 996, 1083, 1174, 1270, 1371, 1477, 1588, 1703, 1824],\r\n      atk: [90, 96.75, 103.5, 112.5, 119.25, 126, 135, 144, 153, 162, 171, 180, 191.25, 202.5, 213.75],\r\n    }\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * (i === 2 || i === 3 ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    hit: stats => basicDMGFormula(data.skill.hit[stats.tlvl.skill], stats, \"skill\"),\r\n    herald: stats => basicDMGFormula(data.skill.herald[stats.tlvl.skill], stats, \"skill\"),\r\n    hitregen: stats => {\r\n      const base = data.skill.hitregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.hitregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    continuousregen: stats => {\r\n      const base = data.skill.continuousregen.base[stats.tlvl.skill];\r\n      const atk = data.skill.continuousregen.atk[stats.tlvl.skill] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    healing: stats => {\r\n      const base = data.burst.healing.base[stats.tlvl.burst];\r\n      const atk = data.burst.healing.atk[stats.tlvl.burst] / 100;\r\n      return [s => (atk * s.finalATK + base) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  },\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { IConditionalValue } from \"../../../Types/IConditional\"\r\nimport { BasicStats } from \"../../../Types/stats\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const energyCosts = [40, 50, 60, 70, 80, 90] as const\r\nexport const resolveStacks = [10, 20, 30, 40, 50, 60] as const\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),\r\n      toTalentPercent(skillParam_gen.auto[3]),//x2\r\n      toTalentPercent(skillParam_gen.auto[5]),\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[6]),\r\n    stam: skillParam_gen.auto[7][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[8]),\r\n    low: toTalentPercent(skillParam_gen.auto[9]),\r\n    high: toTalentPercent(skillParam_gen.auto[10]),\r\n  },\r\n  skill: {\r\n    skillDMG: toTalentPercent(skillParam_gen.skill[0]),\r\n    coorDMG: toTalentPercent(skillParam_gen.skill[1]),\r\n    duration: skillParam_gen.skill[2][0],\r\n    eleBurConv: toTalentPercent(skillParam_gen.skill[3]),\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    resolve: toTalentPercent(skillParam_gen.burst[1]),\r\n    resolve_: toTalentPercent(skillParam_gen.burst[2]),\r\n    resGain: toTalentPercent(skillParam_gen.burst[3]),\r\n    hit1: toTalentPercent(skillParam_gen.burst[4]),\r\n    hit2: toTalentPercent(skillParam_gen.burst[5]),\r\n    hit3: toTalentPercent(skillParam_gen.burst[6]),\r\n    hit41: toTalentPercent(skillParam_gen.burst[7]),\r\n    hit42: toTalentPercent(skillParam_gen.burst[8]),\r\n    hit5: toTalentPercent(skillParam_gen.burst[9]),\r\n    charged1: toTalentPercent(skillParam_gen.burst[10]),\r\n    charged2: toTalentPercent(skillParam_gen.burst[11]),\r\n    stam: skillParam_gen.burst[12][0],\r\n    plunge: toTalentPercent(skillParam_gen.burst[13]),\r\n    plungeLow: toTalentPercent(skillParam_gen.burst[14]),\r\n    plungeHigh: toTalentPercent(skillParam_gen.burst[15]),\r\n    enerGen: skillParam_gen.burst[16],\r\n    duration: skillParam_gen.burst[17][0],\r\n    cd: skillParam_gen.burst[18][0],\r\n    enerCost: skillParam_gen.burst[19][0],\r\n  }\r\n} as const\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    skillDMG: stats => basicDMGFormula(data.skill.skillDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    coorDMG: stats => basicDMGFormula(data.skill.coorDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    eleBurConv: stats => {\r\n      const val = data.skill.eleBurConv[stats.tlvl.skill]\r\n      const enerCost = data.burst.enerCost\r\n      return [s => val * enerCost, []]\r\n    },\r\n    ...Object.fromEntries(energyCosts.map(c => [c, stats => {\r\n      const val = data.skill.eleBurConv[stats.tlvl.skill]\r\n      return [s => val * c, []]\r\n    }]))\r\n  },\r\n  burst: {\r\n    dmg: stats => burstDMG(data.burst.dmg[stats.tlvl.burst], stats, true),\r\n    hit1: stats => burstDMG(data.burst.hit1[stats.tlvl.burst], stats),\r\n    hit2: stats => burstDMG(data.burst.hit2[stats.tlvl.burst], stats),\r\n    hit3: stats => burstDMG(data.burst.hit3[stats.tlvl.burst], stats),\r\n    hit41: stats => burstDMG(data.burst.hit41[stats.tlvl.burst], stats),\r\n    hit42: stats => burstDMG(data.burst.hit42[stats.tlvl.burst], stats),\r\n    hit5: stats => burstDMG(data.burst.hit5[stats.tlvl.burst], stats),\r\n    charged1: stats => burstDMG(data.burst.charged1[stats.tlvl.burst], stats),\r\n    charged2: stats => burstDMG(data.burst.charged2[stats.tlvl.burst], stats),\r\n    plunge: stats => burstDMG(data.burst.plunge[stats.tlvl.burst], stats),\r\n    plungeLow: stats => burstDMG(data.burst.plungeLow[stats.tlvl.burst], stats),\r\n    plungeHigh: stats => burstDMG(data.burst.plungeHigh[stats.tlvl.burst], stats),\r\n  },\r\n  a4: {\r\n    eleDMG: stats => {\r\n      return [s => (s.enerRech_ - 100) * 0.4, [\"enerRech_\"]]\r\n    }\r\n  }\r\n} as const\r\n\r\nfunction burstDMG(percent: number, stats: BasicStats, intial = false): FormulaItem {\r\n  let resolveStack = 0\r\n  const value = stats.conditionalValues?.character?.RaidenShogun?.sheet?.talent?.res as IConditionalValue | undefined\r\n  if (value) {\r\n    const [num, condEleKey] = value\r\n    if (num && condEleKey) resolveStack = parseInt(condEleKey)\r\n  }\r\n  const resolve = resolveStack ? ((intial ? data.burst.resolve[stats.tlvl.burst] : data.burst.resolve_[stats.tlvl.burst]) * resolveStack) / 100 : 0\r\n  const multi = percent / 100 + resolve\r\n\r\n  if (stats.constellation < 2) {\r\n    const statKey = getTalentStatKey(\"burst\", stats)\r\n    return [s => multi * s[statKey], [statKey]]\r\n  }\r\n  const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"burst_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n  return [s => {\r\n    const enemyLevelMulti = (100 + s.characterLevel) / ((100 + s.characterLevel) + (100 + s.enemyLevel) * (1 - Math.min(s.enemyDEFRed_ + 60, 90) / 100))\r\n    return multi * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * s.electro_burst_hit_base_multi * enemyLevelMulti * s.electro_enemyRes_multi\r\n  }, [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"electro_burst_hit_base_multi\", \"characterLevel\", \"enemyLevel\", \"enemyDEFRed_\", \"electro_enemyRes_multi\"]]\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [95.92, 102.46, 109, 117.72, 124.26, 131.89, 141.7, 151.51, 161.32, 171.13, 180.94, 190.75, 200.56, 210.37, 220.18],\r\n      [82.63, 88.27, 93.9, 101.41, 107.05, 113.62, 122.07, 130.52, 138.97, 147.42, 155.87, 164.33, 172.78, 181.23, 189.68],\r\n      [103.31, 110.36, 117.4, 126.79, 133.84, 142.05, 152.62, 163.19, 173.75, 184.32, 194.88, 205.45, 216.02, 226.58, 237.15],\r\n      [136.05, 145.32, 154.6, 166.97, 176.24, 187.07, 200.98, 214.89, 228.81, 242.72, 256.64, 270.55, 284.46, 298.38, 312.29],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.54, 67.63, 72.72, 79.99, 85.08, 90.9, 98.9, 106.9, 114.9, 123.62, 132.35, 141.08, 149.8, 158.53, 167.26],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45]\r\n  },\r\n  plunging: {\r\n    dmg: [82.05, 88.72, 95.4, 104.94, 111.62, 119.25, 129.75, 140.24, 150.74, 162.19, 173.63, 185.08, 196.53, 207.98, 219.43],\r\n    low: [164.06, 177.41, 190.77, 209.84, 223.2, 238.46, 259.44, 280.43, 301.41, 324.3, 347.19, 370.09, 392.98, 415.87, 438.76],\r\n    high: [204.92, 221.6, 238.28, 262.1, 278.78, 297.85, 324.06, 350.27, 376.48, 405.07, 433.66, 462.26, 490.85, 519.44, 548.04]\r\n  },\r\n  skill: {\r\n    press: [199.2, 214.14, 229.08, 249, 263.94, 278.88, 298.8, 318.72, 338.64, 358.56, 378.48, 398.4, 423.3, 448.2, 473.1],\r\n    hold: [295.2, 317.34, 339.48, 369, 391.14, 413.28, 442.8, 472.32, 501.84, 531.36, 560.88, 590.4, 627.3, 664.2, 701.1],\r\n  },\r\n  burst: {\r\n    summon: [160, 172, 184, 200, 212, 224, 240, 256, 272, 288, 304, 320, 340, 360, 380],\r\n    dmg: [24, 25.8, 27.6, 30, 31.8, 33.6, 36, 38.4, 40.8, 43.2, 45.6, 48, 51, 54, 57],\r\n    atkspd: [26, 28, 30, 32, 34, 36, 37, 38, 39, 40, 40, 40, 40, 40, 40],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    press: stats => basicDMGFormula(data.skill.press[stats.tlvl.skill], stats, \"skill\"),\r\n    hold: stats => basicDMGFormula(data.skill.hold[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    summon: stats => basicDMGFormula(data.burst.summon[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(data.burst.dmg[stats.tlvl.burst] * percentArr[stats.tlvl.auto] / 100, stats, \"burst\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`c${i}`, stats => {\r\n      const normVal = percentArr[stats.tlvl.auto] /100\r\n      const normStatKey = getTalentStatKey(\"normal\", stats)\r\n\r\n      const burstVal = data.burst.dmg[stats.tlvl.burst] * percentArr[stats.tlvl.auto] / 10000\r\n      const burstStatKey = getTalentStatKey(\"burst\", stats)\r\n      return [s => normVal * s[normStatKey] + burstVal * s[burstStatKey], [normStatKey, burstStatKey]]\r\n    }])),\r\n  },\r\n  constellation6: {\r\n    dmg: stats => basicDMGFormula(100, stats, \"elemental\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [52.46, 56.73, 61, 67.1, 71.37, 76.25, 82.96, 89.67, 96.38, 103.7, 111.02, 118.34, 125.66, 132.98, 140.3],//1\r\n      [51.6, 55.8, 60, 66, 70.2, 75, 81.6, 88.2, 94.8, 102, 109.2, 116.4, 123.6, 130.8, 138],//2\r\n      [31.82, 34.41, 37, 40.7, 43.29, 46.25, 50.32, 54.39, 58.46, 62.9, 67.34, 71.78, 76.22, 80.66, 85.1],//3 x2\r\n      [69.66, 75.33, 81, 89.1, 94.77, 101.25, 110.16, 119.07, 127.98, 137.7, 147.42, 157.14, 166.86, 176.58, 186.3],//4\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//5.1\r\n      [43, 46.5, 50, 55, 58.5, 62.5, 68, 73.5, 79, 85, 91, 97, 103, 109, 115]//5.2\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [136.74, 147.87, 159, 174.9, 186.03, 198.75, 216.24, 233.73, 251.22, 270.3, 289.38, 308.46, 327.54, 346.62, 365.7],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hit1: [58.4, 62.78, 67.16, 73, 77.38, 81.76, 87.6, 93.44, 99.28, 105.12, 110.96, 116.8, 124.1, 131.4, 138.7],\r\n    hit2: [136, 146.2, 156.4, 170, 180.2, 190.4, 204, 217.6, 231.2, 244.8, 258.4, 272, 289, 306, 323]\r\n  },\r\n  burst: {\r\n    hit1: [104, 111.8, 119.6, 130, 137.8, 145.6, 156, 166.4, 176.8, 187.2, 197.6, 208, 221, 234, 247],\r\n    hit2: [152, 163.4, 174.8, 190, 201.4, 212.8, 228, 243.2, 258.4, 273.6, 288.8, 304, 323, 342, 361],\r\n    dot: [132, 141.9, 151.8, 165, 174.9, 184.8, 198, 211.2, 224.4, 237.6, 250.8, 264, 280.5, 297, 313.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((arr[stats.tlvl.auto]), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { IFormulaSheet } from \"../../../Types/character\"\r\nimport { IConditionalValue } from \"../../../Types/IConditional\"\r\nimport { toTalentInt, toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: toTalentPercent(skillParam_gen.auto[5]),\r\n    final: toTalentPercent(skillParam_gen.auto[6]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[9]),\r\n    low: toTalentPercent(skillParam_gen.auto[10]),\r\n    high: toTalentPercent(skillParam_gen.auto[11]),\r\n  },\r\n  skill: {\r\n    dmg: toTalentPercent(skillParam_gen.skill[0]),\r\n    ele_dmg: toTalentPercent(skillParam_gen.skill[1]),\r\n    kick_press: toTalentPercent(skillParam_gen.skill[2]),\r\n    kick_hold: toTalentPercent(skillParam_gen.skill[3]),\r\n    ele_kick: toTalentPercent(skillParam_gen.skill[4]),\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    heal: toTalentInt(skillParam_gen.burst[1]),\r\n    heal_: toTalentPercent(skillParam_gen.burst[2]),\r\n    muji_dmg: toTalentPercent(skillParam_gen.burst[3]),\r\n    muji_heal: toTalentInt(skillParam_gen.burst[4]),\r\n    muji_heal_: toTalentPercent(skillParam_gen.burst[5]),\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    kick_press: stats => {\r\n      const skillPercent = data.skill.kick_press[stats.tlvl.skill]\r\n      if (stats.constellation < 2) return basicDMGFormula(skillPercent, stats, \"skill\")\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + 0.033) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    },\r\n    kick_hold: stats => {\r\n      const skillPercent = data.skill.kick_hold[stats.tlvl.skill]\r\n      const basic = () => basicDMGFormula(skillPercent, stats, \"skill\")\r\n      if (stats.constellation < 2) return basic()\r\n      const value = stats.conditionalValues?.character?.Sayu?.sheet?.talent?.c2 as IConditionalValue | undefined\r\n      const [num] = value ?? [0]\r\n      if (!num) return basic()\r\n\r\n      const multi = num * 0.033\r\n      const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n      return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s.anemo_skill_hit_base_multi + multi) * s.enemyLevel_multi * s.anemo_enemyRes_multi,\r\n      [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), \"anemo_skill_hit_base_multi\", \"enemyLevel_multi\", \"anemo_enemyRes_multi\"]]\r\n    },\r\n    ...Object.fromEntries([\r\n      ...absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.skill.ele_dmg[stats.tlvl.skill], stats, \"skill\", eleKey)]),\r\n      ...absorbableEle.map(eleKey => [`${eleKey}_kick`, stats => {\r\n        const skillPercent = data.skill.ele_kick[stats.tlvl.skill]\r\n        const basic = () => basicDMGFormula(data.skill.ele_kick[stats.tlvl.skill], stats, \"skill\", eleKey)\r\n        if (stats.constellation < 2) return basic()\r\n        const value = stats.conditionalValues?.character?.Sayu?.sheet?.talent?.c2 as IConditionalValue | undefined\r\n        const [num] = value ?? [0]\r\n        if (!num) return basic()\r\n\r\n        const multi = num * 0.033\r\n        const hitModeMultiKey = stats.hitMode === \"avgHit\" ? \"skill_avgHit_base_multi\" : stats.hitMode === \"critHit\" ? \"critHit_base_multi\" : \"\"\r\n        return [s => skillPercent / 100 * s.finalATK * (hitModeMultiKey ? s[hitModeMultiKey] : 1) * (s[`${eleKey}_skill_hit_base_multi`] + multi) * s.enemyLevel_multi * s[`${eleKey}_enemyRes_multi`],\r\n        [\"finalATK\", ...(hitModeMultiKey ? [hitModeMultiKey] : []), `${eleKey}_skill_hit_base_multi`, \"enemyLevel_multi\", `${eleKey}_enemyRes_multi`]]\r\n      }])\r\n    ])\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    heal: stats => {\r\n      const atk = data.burst.heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.heal[stats.tlvl.burst]\r\n      return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n    muji_dmg: stats => {\r\n      if (stats.constellation < 6)\r\n        return basicDMGFormula(data.burst.muji_dmg[stats.tlvl.burst], stats, \"burst\")\r\n      else {\r\n        const val = data.burst.muji_dmg[stats.tlvl.burst] / 100\r\n        const statKey = getTalentStatKey(\"burst\", stats)\r\n        return [s => (val + Math.min(4, 0.002 * s.eleMas)) * s[statKey], [statKey, \"eleMas\"]]\r\n      }\r\n    },\r\n    muji_heal: stats => {\r\n      const atk = data.burst.muji_heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.muji_heal[stats.tlvl.burst]\r\n      if (stats.constellation < 6) return [s => (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n      else return [s => (atk * s.finalATK + flat + Math.min(6000, 3 * s.eleMas)) * s.heal_multi, [\"finalATK\", \"heal_multi\", \"eleMas\"]]\r\n    },\r\n  },\r\n  passive1: {\r\n    heal: stats => [s => 1.2 * s.eleMas * s.heal_multi + 300, [\"eleMas\", \"heal_multi\"]],\r\n  },\r\n  passive2: {\r\n    heal: stats => {\r\n      const atk = data.burst.muji_heal_[stats.tlvl.burst] / 100\r\n      const flat = data.burst.muji_heal[stats.tlvl.burst]\r\n      return [s => 0.2 * (atk * s.finalATK + flat) * s.heal_multi, [\"finalATK\", \"heal_multi\"]]\r\n    },\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\";\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\nimport { absorbableEle } from \"../dataUtil\";\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [33.46, 35.97, 38.48, 41.83, 44.34, 46.85, 50.2, 53.54, 56.89, 60.24, 63.58, 66.93, 71.11, 75.29, 79.48], // 1\r\n      [30.62, 32.91, 35.21, 38.27, 40.57, 42.86, 45.92, 48.99, 52.05, 55.11, 58.17, 61.23, 65.06, 68.89, 72.71], // 2\r\n      [38.45, 41.33, 44.22, 48.06, 50.94, 53.83, 57.67, 61.52, 65.36, 69.21, 73.05, 76.9, 81.7, 86.51, 91.31], // 3\r\n      [47.92, 51.51, 55.11, 59.9, 63.49, 67.08, 71.88, 76.67, 81.46, 86.25, 91.04, 95.84, 101.82, 107.81, 113.8], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [120.16, 129.17, 138.18, 150.2, 159.21, 168.22, 180.24, 192.26, 204.27, 216.29, 228.3, 240.32, 255.34, 270.36, 285.38],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [211.2, 227.04, 242.88, 264, 279.84, 295.68, 316.8, 337.92, 359.04, 380.16, 401.28, 422.4, 448.8, 475.2, 501.6],\r\n  },\r\n  burst: {\r\n    dot: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n    dmg_: [44, 47.3, 50.6, 55, 58.3, 61.6, 66, 70.4, 74.8, 79.2, 83.6, 88, 93.5, 99, 104.5],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey =>\r\n      [eleKey, stats => basicDMGFormula(data.burst.dmg_[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive2: {\r\n    em: stats => [s => s.eleMas * 0.2, ['eleMas']]\r\n  }\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [41.28, 44.64, 48, 52.8, 56.16, 60, 65.28, 70.56, 75.84, 81.6, 87.36, 93.12, 98.88, 104.64, 110.4],//1\r\n      [46.27, 50.03, 53.8, 59.18, 62.95, 67.25, 73.17, 79.09, 85, 91.46, 97.92, 104.37, 110.83, 117.28, 123.74],//2\r\n      [55.38, 59.89, 64.4, 70.84, 75.35, 80.5, 87.58, 94.67, 101.75, 109.48, 117.21, 124.94, 132.66, 140.39, 148.12],//3\r\n      [57.02, 61.66, 66.3, 72.93, 77.57, 82.88, 90.17, 97.46, 104.75, 112.71, 120.67, 128.62, 136.58, 144.53, 152.49],//4\r\n      [60.89, 65.84, 70.8, 77.88, 82.84, 88.5, 96.29, 104.08, 111.86, 120.36, 128.86, 137.35, 145.85, 154.34, 162.84],//5\r\n      [72.76, 78.68, 84.6, 93.06, 98.98, 105.75, 115.06, 124.36, 133.67, 143.82, 153.97, 164.12, 174.28, 184.43, 194.58],//6\r\n    ],\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 92.82, 98.94, 105.06, 111.18, 117.3],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 235.6, 248, 263.5, 279, 294.5],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    hitArr: [\r\n      [38.87, 42.04, 45.2, 49.72, 52.88, 56.5, 61.47, 66.44, 71.42, 76.84, 82.26, 87.69, 93.11, 98.54, 103.96],//1\r\n      [41.62, 45.01, 48.4, 53.24, 56.63, 60.5, 65.82, 71.15, 76.47, 82.28, 88.09, 93.9, 99.7, 105.51, 111.32],//2\r\n      [56.33, 60.92, 65.5, 72.05, 76.64, 81.88, 89.08, 96.29, 103.49, 111.35, 119.21, 127.07, 134.93, 142.79, 150.65],//3\r\n      [59.94, 64.82, 69.7, 76.67, 81.55, 87.13, 94.79, 102.46, 110.13, 118.49, 126.85, 135.22, 143.58, 151.95, 160.31],//4\r\n      [55.3, 59.8, 64.3, 70.73, 75.23, 80.38, 87.45, 94.52, 101.59, 109.31, 117.03, 124.74, 132.46, 140.17, 147.89],//5\r\n      [35.43, 38.32, 41.2, 45.32, 48.2, 51.5, 56.03, 60.56, 65.1, 70.04, 74.98, 79.93, 84.87, 89.82, 94.76],//6.1 (1st hit)\r\n      [37.67, 40.73, 43.8, 48.18, 51.25, 54.75, 59.57, 64.39, 69.2, 74.46, 79.72, 84.97, 90.23, 95.48, 100.74],//6.2 (2nd hit)\r\n    ],\r\n    skillDmg: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    charged1: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//1st hit\r\n    charged2: [71.98, 77.84, 83.7, 92.07, 97.93, 104.62, 113.83, 123.04, 132.25, 142.29, 152.33, 162.38, 172.42, 182.47, 192.51],//2nd hit\r\n  },\r\n  burst: {\r\n    melee: [464, 498.8, 533.6, 580, 614.8, 649.6, 696, 742.4, 788.8, 835.2, 881.6, 928, 986, 1044, 1102],\r\n    ranged: [378.4, 406.78, 435.16, 473, 501.38, 529.76, 567.6, 605.44, 643.28, 681.12, 718.96, 756.8, 804.1, 851.4, 898.7],\r\n  },\r\n  riptide: {\r\n    flash: [12.4, 13.33, 14.26, 15.5, 16.43, 17.36, 18.6, 19.84, 21.08, 22.32, 23.56, 24.8, 26.35, 27.9, 29.45],//x3, fully charged\r\n    burst: [62, 66.65, 71.3, 77.5, 82.15, 86.8, 93, 99.2, 105.4, 111.6, 117.8, 124, 131.75, 139.5, 147.25],//death\r\n    slash: [60.2, 65.1, 70, 77, 81.9, 87.5, 95.2, 102.9, 110.6, 119, 127.4, 135.8, 144.2, 152.6, 161],//melee\r\n    blast: [120, 129, 138, 150, 159, 168, 180, 192, 204, 216, 228, 240, 255, 270, 285],//burst\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    flash: stats => basicDMGFormula(data.riptide.flash[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n    burst: stats => basicDMGFormula(data.riptide.burst[stats.tlvl.auto], stats, \"normal\", \"hydro\"),\r\n  },\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"hydro\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(data.skill.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.skill], stats, \"normal\", \"hydro\")])),\r\n    skillDmg: stats => basicDMGFormula(data.skill.skillDmg[stats.tlvl.skill], stats, \"skill\"),\r\n    charged1: stats => basicDMGFormula(data.skill.charged1[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    charged2: stats => basicDMGFormula(data.skill.charged2[stats.tlvl.skill], stats, \"charged\", \"hydro\"),\r\n    slash: stats => basicDMGFormula(data.riptide.slash[stats.tlvl.skill], stats, \"skill\", \"hydro\"),\r\n  },\r\n  burst: {\r\n    melee: stats => basicDMGFormula(data.burst.melee[stats.tlvl.burst], stats, \"burst\"),\r\n    ranged: stats => basicDMGFormula(data.burst.ranged[stats.tlvl.burst], stats, \"burst\"),\r\n    blast: stats => basicDMGFormula(data.riptide.blast[stats.tlvl.burst], stats, \"burst\", \"hydro\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../../dataUtil\"\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    initial_dmg: [12, 12.9, 13.8, 15, 15.9, 16.8, 18, 19.2, 20.4, 21.6, 22.8, 24, 25.5, 27, 28.5],\r\n    initial_max: [16.8, 18.06, 19.32, 21, 22.26, 23.52, 25.2, 26.88, 28.56, 30.24, 31.92, 33.6, 35.7, 37.8, 39.9],\r\n    storm_dmg: [176, 189.2, 202.4, 220, 233.2, 246.4, 264, 281.6, 299.2, 316.8, 334.4, 352, 374, 396, 418],\r\n    storm_max: [192, 206.4, 220.8, 240, 254.4, 268.8, 288, 307.2, 326.4, 345.6, 364.8, 384, 408, 432, 456],\r\n  },\r\n  burst: {\r\n    dmg: [80.8, 86.86, 92.92, 101, 107.06, 113.12, 121.2, 129.28, 137.36, 145.44, 153.52, 161.6, 171.7, 181.8, 191.9],\r\n    dmg_: [24.8, 26.66, 28.52, 31, 32.86, 34.72, 37.2, 39.68, 42.16, 44.64, 47.12, 49.6, 52.7, 55.8, 58.9],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(eleKey =>\r\n      [eleKey, stats => basicDMGFormula(data.burst.dmg_[stats.tlvl.burst], stats, \"burst\", eleKey)]))\r\n  },\r\n  passive2: {\r\n    heal: stats => [s => 0.02 * s.finalHP * s.heal_multi, [\"finalHP\", \"heal_multi\"]],\r\n  },\r\n  passive1: {\r\n    windAuto: stats => basicDMGFormula(60, stats, \"normal\", \"anemo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [248, 266.6, 285.2, 310, 328.6, 347.2, 372, 396.8, 421.6, 446.4, 471.2, 496, 527, 558, 589],\r\n  },\r\n  burst: {\r\n    dmg: [148, 159.1, 170.2, 185, 196.1, 207.2, 222, 236.8, 251.6, 266.4, 281.2, 296, 314.5, 333, 351.5],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) => [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    exp: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),//not optimizationTarget, dont need to precompute\r\n  passive2: {\r\n    geoAuto: stats => basicDMGFormula(60, stats, \"normal\", \"geo\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [44.46, 48.08, 51.7, 56.87, 60.49, 64.63, 70.31, 76, 81.69, 87.89, 94.09, 100.3, 106.5, 112.71, 118.91],\r\n      [43.43, 46.97, 50.5, 55.55, 59.09, 63.13, 68.68, 74.23, 79.79, 85.85, 91.91, 97.97, 104.03, 110.09, 116.15],\r\n      [52.98, 57.29, 61.6, 67.76, 72.07, 77, 83.78, 90.55, 97.33, 104.72, 112.11, 119.5, 126.9, 134.29, 141.68],\r\n      [58.31, 63.05, 67.8, 74.58, 79.33, 84.75, 92.21, 99.67, 107.12, 115.26, 123.4, 131.53, 139.67, 147.8, 155.94],\r\n      [70.78, 76.54, 82.3, 90.53, 96.29, 102.88, 111.93, 120.98, 130.03, 139.91, 149.79, 159.66, 169.54, 179.41, 189.29],\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [55.9, 60.45, 65, 71.5, 76.05, 81.25, 88.4, 95.55, 102.7, 110.5, 118.3, 126.1, 133.9, 141.7, 149.5],\r\n      [60.72, 65.66, 70.6, 77.66, 82.6, 88.25, 96.02, 103.78, 111.55, 120.02, 128.49, 136.96, 145.44, 153.91, 162.38],\r\n      [72.24, 78.12, 84, 92.4, 98.28, 105, 114.24, 123.48, 132.72, 142.8, 152.88, 162.96, 173.04, 183.12, 193.2],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    dmg: [78.66, 84.56, 90.46, 98.33, 104.23, 110.13, 118, 125.86, 133.73, 141.6, 149.46, 157.33, 167.16, 176.99, 186.83],\r\n    enerRegen: [3, 3, 3, 3.5, 3.5, 3.5, 4, 4, 4, 4, 4, 4, 4, 4, 4],\r\n  },\r\n  burst: {\r\n    dmg: [114.4, 122.98, 131.56, 143, 151.58, 160.16, 171.6, 183.04, 194.48, 205.92, 217.36, 228.8, 243.1, 257.4, 271.7],\r\n    thunder: [32.8, 35.26, 37.72, 41, 43.46, 45.92, 49.2, 52.48, 55.76, 59.04, 62.32, 65.6, 69.7, 73.8, 77.9],\r\n    enerRegen: [0.8, 0.8, 0.8, 0.9, 0.9, 0.9, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  }\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([key, arr]) =>\r\n    [key, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    enerRechInc: stats => { //TODO: new modifiers system formula\r\n      if (stats.ascension < 4) return [s => 20, []]\r\n      return [s => 20 + s.enerRech_ / 10, [\"enerRech_\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    thunder: stats => basicDMGFormula(data.burst.thunder[stats.tlvl.burst], stats, \"burst\"),\r\n    //TODO: this needs testing\r\n    thunder3: stats => basicDMGFormula(data.burst.thunder[stats.tlvl.burst] + 100, stats, \"burst\")\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { absorbableEle } from \"../dataUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [20.38, 22.04, 23.7, 26.07, 27.73, 29.63, 32.23, 34.84, 37.45, 40.29, 43.55, 47.38, 51.21, 55.05, 59.23],//1\r\n      [44.38, 47.99, 51.6, 56.76, 60.37, 64.5, 70.18, 75.85, 81.53, 87.72, 94.82, 103.16, 111.5, 119.85, 128.95],//2\r\n      [52.37, 56.64, 60.9, 66.99, 71.25, 76.13, 82.82, 89.52, 96.22, 103.53, 111.9, 121.75, 131.6, 141.45, 152.19],//3\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//4\r\n      [50.65, 54.78, 58.9, 64.79, 68.91, 73.63, 80.1, 86.58, 93.06, 100.13, 108.23, 117.75, 127.28, 136.8, 147.19],//5\r\n      [70.95, 76.73, 82.5, 90.75, 96.53, 103.13, 112.2, 121.28, 130.35, 140.25, 151.59, 164.93, 178.27, 191.61, 206.17],//6\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: [43.86, 47.43, 51, 56.1, 59.67, 63.75, 69.36, 74.97, 80.58, 86.7, 93.71, 101.96, 110.21, 118.45, 127.45],\r\n    full: [124, 133.3, 142.6, 155, 164.3, 173.6, 186, 198.4, 210.8, 223.2, 236.1, 252.96, 269.82, 286.69, 303.55],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59],\r\n  },\r\n  skill: {\r\n    press: [276, 296.7, 317.4, 345, 365.7, 386.4, 414, 441.6, 469.2, 496.8, 524.4, 552, 586.5, 621, 655.5],\r\n    hold: [380, 408.5, 437, 475, 503.5, 532, 570, 608, 646, 684, 722, 760, 807.5, 855, 902.5],\r\n  },\r\n  burst: {\r\n    hit: [37.6, 40.42, 43.24, 47, 49.82, 52.64, 56.4, 60.16, 63.92, 67.68, 71.44, 75.2, 79.9, 84.6, 89.3],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto], stats, \"charged\"),\r\n    full: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto], stats, \"charged\", \"anemo\"),\r\n    hit_bonus: stats => basicDMGFormula(data.charged.hit[stats.tlvl.auto] * 0.33, stats, \"charged\"),\r\n    full_bonus: stats => basicDMGFormula(data.charged.full[stats.tlvl.auto] * 0.33, stats, \"charged\", \"anemo\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: Object.fromEntries([\r\n    [\"hit\", stats => basicDMGFormula(data.burst.hit[stats.tlvl.burst], stats, \"burst\")],\r\n    ...absorbableEle.map(eleKey => [eleKey, stats => basicDMGFormula(data.burst.hit[stats.tlvl.burst] / 2, stats, \"burst\", eleKey)]),\r\n    ...absorbableEle.flatMap(eleKey => [\r\n      [`${eleKey}_tot_7`, stats => totBurst(stats, eleKey, 7)],\r\n      [`${eleKey}_tot_14`, stats => totBurst(stats, eleKey, 14)],\r\n    ])\r\n  ]),\r\n}\r\nfunction totBurst(stats, absorptionEle, swirlTicks) {\r\n  const ultTicks = 20\r\n  const absorptionTicks = 15\r\n  const burstStatKey = `anemo_burst_${stats.hitMode}`\r\n  const absorptionStatKey = `${absorptionEle}_burst_${stats.hitMode}`\r\n  const swirlStatKey = `${absorptionEle}_swirl_hit`\r\n  const burstScaling = data.burst.hit[stats.tlvl.burst] / 100\r\n  return [s => ultTicks * burstScaling * s[burstStatKey] + absorptionTicks * 0.5 * burstScaling * s[absorptionStatKey] + swirlTicks * s[swirlStatKey], [burstStatKey, absorptionStatKey, swirlStatKey]]\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [27.54, 29.42, 31.3, 33.8, 35.68, 37.87, 40.69, 43.51, 46.32, 49.14, 51.96, 54.78, 57.59, 60.41, 63.23],//1 hits twice\r\n      [56.94, 60.82, 64.7, 69.88, 73.76, 78.29, 84.11, 89.93, 95.76, 101.58, 107.4, 113.23, 119.05, 124.87, 130.69],//2\r\n      [68.55, 73.23, 77.9, 84.13, 88.81, 94.26, 101.27, 108.28, 115.29, 122.3, 129.31, 136.33, 143.34, 150.35, 157.36],//3\r\n      [37.66, 40.23, 42.8, 46.22, 48.79, 51.79, 55.64, 59.49, 63.34, 67.2, 71.05, 74.9, 78.75, 82.6, 86.46],//4 hits twice\r\n      [71.54, 76.42, 81.3, 87.8, 92.68, 98.37, 105.69, 113.01, 120.32, 127.64, 134.96, 142.28, 149.59, 156.91, 164.23],\r\n      [95.83, 102.37, 108.9, 117.61, 124.15, 131.77, 141.57, 151.37, 161.17, 170.97, 180.77, 190.58, 200.38, 210.18, 219.98],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [121.09, 129.34, 137.6, 148.61, 156.86, 166.5, 178.88, 191.26, 203.65, 216.03, 228.42, 240.8, 253.18, 265.57, 277.95],\r\n  },\r\n  plunging: {\r\n    dmg: [81.83, 88.49, 95.16, 104.67, 111.33, 118.94, 129.41, 139.88, 150.35, 161.76, 173.18, 184.6, 196.02, 207.44, 218.86],\r\n    low: [163.63, 176.95, 190.27, 209.3, 222.62, 237.84, 258.77, 279.7, 300.63, 323.46, 346.29, 369.12, 391.96, 414.79, 437.62],\r\n    high: [204.39, 221.02, 237.66, 261.42, 278.06, 297.07, 323.21, 349.36, 375.5, 404.02, 432.54, 461.06, 489.57, 518.09, 546.61],\r\n  },\r\n  skill: {\r\n    hit: [252.8, 271.76, 290.72, 316, 334.96, 353.92, 379.2, 404.48, 429.76, 455.04, 480.32, 505.6, 537.2, 568.8, 600.4],\r\n  },\r\n  burst: {\r\n    atk_bonus: [58.45, 61.95, 65.45, 70, 73.5, 77, 81.55, 86.1, 90.65, 95.2, 99.75, 104.3, 108.85, 113.4, 117.95],\r\n    drain: [3, 3, 3, 2.5, 2.5, 2.5, 2, 2, 2, 2, 2, 2, 2, 2, 2],\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto] * ((i === 0 || i === 3) ? 2 : 1), stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(Object.entries(data.skill).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.skill], stats, \"skill\")])),\r\n  burst: {}\r\n}\r\n\r\nexport default formula\r\n","import { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [42.05, 45.48, 48.9, 53.79, 57.21, 61.13, 66.5, 71.88, 77.26, 83.13, 89.85, 97.76, 105.67, 113.58, 122.2],//1\r\n      [42.14, 45.57, 49, 53.9, 57.33, 61.25, 66.64, 72.03, 77.42, 83.3, 90.04, 97.96, 105.88, 113.81, 122.45],//2\r\n      [26.06, 28.18, 30.3, 33.33, 35.45, 37.87, 41.21, 44.54, 47.87, 51.51, 55.68, 60.58, 65.48, 70.37, 75.72],//3 x2\r\n      [14.1, 15.25, 16.4, 18.04, 19.19, 20.5, 22.3, 24.11, 25.91, 27.88, 30.14, 32.79, 35.44, 38.09, 40.98],//4 x4\r\n      [71.04, 76.82, 82.6, 90.86, 96.64, 103.25, 112.34, 121.42, 130.51, 140.42, 151.78, 165.13, 178.49, 191.85, 206.42],//5\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: [121.69, 131.6, 141.5, 155.65, 165.56, 176.88, 192.44, 208.01, 223.57, 240.55, 260.01, 282.89, 305.77, 328.65, 353.61],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04],\r\n  },\r\n  skill: {\r\n    dmg: [111.28, 119.63, 127.97, 139.1, 147.45, 155.79, 166.92, 178.05, 189.18, 200.3, 211.43, 222.56, 236.47, 250.38, 264.29],\r\n  },\r\n  burst: {\r\n    hit1: [72, 77.4, 82.8, 90, 95.4, 100.8, 108, 115.2, 122.4, 129.6, 136.8, 144, 153, 162, 171],\r\n    hit2: [88, 94.6, 101.2, 110, 116.6, 123.2, 132, 140.8, 149.6, 158.4, 167.2, 176, 187, 198, 209],\r\n    hit3: [109.6, 117.82, 126.04, 137, 145.22, 153.44, 164.4, 175.36, 186.32, 197.28, 208.24, 219.2, 232.9, 246.6, 260.3],\r\n    dmg: [112, 120.4, 128.8, 140, 148.4, 156.8, 168, 179.2, 190.4, 201.6, 212.8, 224, 238, 252, 266],\r\n  }\r\n}\r\nconst formula = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: stats => basicDMGFormula(data.burst.hit1[stats.tlvl.burst], stats, \"burst\"),\r\n    hit2: stats => basicDMGFormula(data.burst.hit2[stats.tlvl.burst], stats, \"burst\"),\r\n    hit3: stats => basicDMGFormula(data.burst.hit3[stats.tlvl.burst], stats, \"burst\"),\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: stats => basicDMGFormula(75, stats, \"elemental\"),\r\n  }\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n      toTalentPercent(skillParam_gen.auto[5]),//x2\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: toTalentPercent(skillParam_gen.auto[7]),\r\n    hit2: toTalentPercent(skillParam_gen.auto[8]),\r\n    stam: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[10]),\r\n    low: toTalentPercent(skillParam_gen.auto[11]),\r\n    high: toTalentPercent(skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: toTalentPercent(skillParam_gen.skill[0]),\r\n    hit2: toTalentPercent(skillParam_gen.skill[1]),\r\n    dmgRed: toTalentPercent(skillParam_gen.skill[2]),\r\n    duration: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    duration: skillParam_gen.burst[1][0],\r\n    cd: skillParam_gen.burst[2][0],\r\n    cost: skillParam_gen.burst[3][0],\r\n  },\r\n} as const\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) =>\r\n    [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    hit1: stats => basicDMGFormula(data.charged.hit1[stats.tlvl.auto], stats, \"charged\"),\r\n    hit2: stats => basicDMGFormula(data.charged.hit2[stats.tlvl.auto], stats, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries([\r\n    ...[\"hit1\", \"hit2\"].map(name =>\r\n      [name, stats => basicDMGFormula(data.skill[name][stats.tlvl.skill], stats, \"skill\")]),\r\n    ...[\"hit1\", \"hit2\"].map(name =>\r\n      [`${name}RainCutter`, stats => basicDMGFormula(1.5 * data.skill[name][stats.tlvl.skill], stats, \"skill\")]),\r\n    [\"dmgRed\", stats => {\r\n      const flat = data.skill.dmgRed[stats.tlvl.skill]\r\n      return [s => (flat + Math.min(24, 0.2 * s.hydro_dmg_)), [\"hydro_dmg_\"]]\r\n    }],\r\n  ]),\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n} as const\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}","import { basicDMGFormula } from \"../../../Util/FormulaUtil\";\r\nimport { getTalentStatKey } from \"../../../Build/Build\";\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\";\r\n\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [76.54, 82.77, 89, 97.9, 104.13, 111.25, 121.04, 130.83, 140.62, 151.3, 161.98, 172.66, 183.34, 194.02, 204.7],//1\r\n      [73.96, 79.98, 86, 94.6, 100.62, 107.5, 116.96, 126.42, 135.88, 146.2, 156.52, 166.84, 177.16, 187.48, 197.8],//2\r\n      [95.46, 103.23, 111, 122.1, 129.87, 138.75, 150.96, 163.17, 175.38, 188.7, 202.02, 215.34, 228.66, 241.98, 255.3],//3\r\n      [115.84, 125.27, 134.7, 148.17, 157.6, 168.38, 183.19, 198.01, 212.83, 228.99, 245.15, 261.32, 277.48, 293.65, 309.81],//4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinning: [62.55, 67.64, 72.73, 80, 85.09, 90.91, 98.91, 106.91, 114.91, 123.64, 132.36, 141.09, 149.82, 158.55, 167.27],\r\n    final: [113.09, 122.3, 131.5, 144.65, 153.86, 164.38, 178.84, 193.31, 207.77, 223.55, 239.33, 255.11, 270.89, 286.67, 302.45],\r\n  },\r\n  plunging: {\r\n    dmg: [74.59, 80.66, 86.73, 95.4, 101.47, 108.41, 117.95, 127.49, 137.03, 147.44, 157.85, 168.26, 178.66, 189.07, 199.48],\r\n    low: [149.14, 161.28, 173.42, 190.77, 202.91, 216.78, 235.86, 254.93, 274.01, 294.82, 315.63, 336.44, 357.25, 378.06, 398.87],\r\n    high: [186.29, 201.45, 216.62, 238.28, 253.44, 270.77, 294.6, 318.42, 342.25, 368.25, 394.24, 420.23, 446.23, 472.22, 498.21],\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n    def1: [104.04, 111.84, 119.65, 130.05, 137.85, 145.66, 156.06, 166.46, 176.87, 187.27, 197.68, 208.08, 221.09, 234.09, 247.1],\r\n    flat1: [501, 551, 605, 663, 726, 793, 864, 939, 1018, 1101, 1189, 1281, 1377, 1477, 1581],\r\n    def2: [122.4, 131.58, 140.76, 153, 162.18, 171.36, 183.6, 195.84, 208.08, 220.32, 232.56, 244.8, 260.1, 275.4, 290.7],\r\n    flat2: [589, 648, 712, 780, 854, 932, 1016, 1104, 1197, 1296, 1399, 1507, 1620, 1737, 1860],\r\n    def3: [144, 154.8, 165.6, 180, 190.8, 201.6, 216, 230.4, 244.8, 259.2, 273.6, 288, 306, 324, 342],\r\n    flat3: [693, 762, 837, 918, 1005, 1097, 1195, 1299, 1409, 1524, 1646, 1773, 1905, 2044, 2188],\r\n    dot: [33.6, 36.12, 38.64, 42, 44.52, 47.04, 50.4, 53.76, 57.12, 60.48, 63.84, 67.2, 71.4, 75.6, 79.8],\r\n  },\r\n  burst: {\r\n    dmg: [340.8, 366.36, 391.92, 426, 451.56, 477.12, 511.2, 545.28, 579.36, 613.44, 647.52, 681.6, 724.2, 766.8, 809.4],\r\n    dot: [40, 43, 46, 50, 53, 56, 60, 64, 68, 72, 76, 80, 85, 90, 95],\r\n  }\r\n}\r\nfunction nyanDMG(percent, defMulti, stats, skillKey = \"charged\"): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => val * (s.finalATK + defMulti * s.finalDEF) * s[statKey], [\"finalATK\", \"finalDEF\", statKey]]\r\n}\r\n\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats => basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: {\r\n    spinning: stats => basicDMGFormula(data.charged.spinning[stats.tlvl.auto], stats, \"charged\"),\r\n    spinningDEF: stats => nyanDMG(data.charged.spinning[stats.tlvl.auto], 0.5, stats),\r\n    final: stats => basicDMGFormula(data.charged.final[stats.tlvl.auto], stats, \"charged\"),\r\n    finalDEF: stats => nyanDMG(data.charged.final[stats.tlvl.auto], 0.5, stats),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\"),\r\n    ...Object.fromEntries([...Array(3)].map((_, i) => i + 1).flatMap(i => [\r\n      [`shield${i}`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100), [\"finalDEF\", \"shield_\"]]\r\n      }],\r\n      [`shield${i}Pyro`, stats => {\r\n        const percent = data.skill[`def${i}`][stats.tlvl.skill] / 100\r\n        const flat = data.skill[`flat${i}`][stats.tlvl.skill]\r\n        return [s => (percent * s.finalDEF + flat) * (1 + s.shield_ / 100) * 2.5, [\"finalDEF\", \"shield_\"]]\r\n      }],\r\n    ])),\r\n    dot: stats => basicDMGFormula(data.skill.dot[stats.tlvl.skill], stats, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: stats => {\r\n      const val = data.burst.dmg[stats.tlvl.burst] / 100\r\n      const statKey = stats.constellation >= 2 ? `physical_burst_critHit` : `physical_burst_${stats.hitMode}`\r\n      return [s => val * s[statKey], [statKey]]\r\n    },\r\n    dot: stats => basicDMGFormula(data.burst.dot[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n}\r\nexport default formula\r\n","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      [58.34, 62.72, 67.09, 72.93, 77.3, 81.68, 87.51, 93.35, 99.18, 105.01, 110.85, 116.68, 123.98, 131.27, 138.56],\r\n      [52.13, 56.04, 59.94, 65.16, 69.07, 72.98, 78.19, 83.4, 88.61, 93.83, 99.04, 104.25, 110.77, 117.28, 123.8],\r\n      [76.01, 81.71, 87.41, 95.02, 100.72, 106.42, 114.02, 121.62, 129.22, 136.82, 144.42, 152.03, 161.53, 171.03, 180.53]\r\n    ],\r\n  },\r\n  charged: {\r\n    hitArr: [\r\n      [98.23, 104.11, 109.99, 117.64, 123.52, 129.4, 137.05, 144.7, 152.34, 159.99, 167.64, 175.28, 182.93, 190.58, 198.22],\r\n      [115.56, 122.48, 129.4, 138.4, 145.32, 152.24, 161.24, 170.23, 179.23, 188.22, 197.22, 206.22, 215.21, 224.21, 233.2],\r\n      [132.9, 140.86, 148.81, 159.16, 167.12, 175.08, 185.42, 195.77, 206.11, 216.46, 226.8, 237.15, 247.49, 257.84, 268.18],\r\n      [150.23, 159.23, 168.23, 179.92, 188.92, 197.91, 209.61, 221.3, 233, 244.69, 256.39, 268.08, 279.78, 291.47, 303.17],\r\n      [167.57, 177.6, 187.64, 200.68, 210.71, 220.75, 233.79, 246.84, 259.88, 272.92, 285.97, 299.01, 312.06, 325.1, 338.15],\r\n    ],\r\n  },\r\n  plunging: {\r\n    dmg: [56.83, 61.45, 66.08, 72.69, 77.31, 82.6, 89.87, 97.14, 104.41, 112.34, 120.27, 128.2, 136.12, 144.05, 151.98],\r\n    low: [113.63, 122.88, 132.13, 145.35, 154.59, 165.17, 179.7, 194.23, 208.77, 224.62, 240.48, 256.34, 272.19, 288.05, 303.9],\r\n    high: [141.93, 153.49, 165.04, 181.54, 193.1, 206.3, 224.45, 242.61, 260.76, 280.57, 300.37, 320.18, 339.98, 359.79, 379.59]\r\n  },\r\n  skill: {\r\n    dmg: [169.6, 182.32, 195.04, 212, 224.72, 237.44, 254.4, 271.36, 288.32, 305.28, 322.24, 339.2, 360.4, 381.6, 402.8],\r\n  },\r\n  burst: {\r\n    dmg: [182.4, 196.08, 209.76, 228, 241.68, 255.36, 273.6, 291.84, 310.08, 328.32, 346.56, 364.8, 387.6, 410.4, 433.2],\r\n    dmg_: [33.4, 35.4, 37.4, 40, 42, 44, 46.6, 49.2, 51.8, 54.4, 57, 59.6, 62.2, 64.8, 67.4]\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(data.charged.hitArr.map((percentArr, i) => [i, stats =>\r\n    basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"charged\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: {\r\n    dmg: stats => basicDMGFormula(data.skill.dmg[stats.tlvl.skill], stats, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: stats => basicDMGFormula(80, stats, \"charged\"),\r\n  },\r\n  constellation4: {\r\n    shield: stats => [s => 0.45 * s.finalHP * (1 + s.shield_ / 100), [\"finalHP\", \"shield_\"]],\r\n    shieldCryo: stats => [s => 0.45 * s.finalHP * (1 + s.shield_ / 100) * 2.5, [\"finalHP\", \"shield_\"]],\r\n  },\r\n}\r\nexport default formula","import { IFormulaSheet } from \"../../../Types/character\"\r\nimport { toTalentPercent } from \"../../../Util/DataminedUtil\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\nimport skillParam_gen_pre from './skillParam_gen.json'\r\nconst skillParam_gen = skillParam_gen_pre as any\r\nexport const data = {\r\n  normal: {\r\n    hitArr: [\r\n      toTalentPercent(skillParam_gen.auto[0]),//x2\r\n      toTalentPercent(skillParam_gen.auto[1]),\r\n      toTalentPercent(skillParam_gen.auto[2]),\r\n      toTalentPercent(skillParam_gen.auto[3]),//x2\r\n      toTalentPercent(skillParam_gen.auto[4]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: toTalentPercent(skillParam_gen.auto[5]),\r\n    full: toTalentPercent(skillParam_gen.auto[6]),\r\n    kindling: toTalentPercent(skillParam_gen.auto[7]),\r\n  },\r\n  plunging: {\r\n    dmg: toTalentPercent(skillParam_gen.auto[8]),\r\n    low: toTalentPercent(skillParam_gen.auto[9]),\r\n    high: toTalentPercent(skillParam_gen.auto[10]),\r\n  },\r\n  skill: {\r\n    dmg_: toTalentPercent(skillParam_gen.skill[3]),\r\n  },\r\n  burst: {\r\n    dmg: toTalentPercent(skillParam_gen.burst[0]),\r\n    exp: toTalentPercent(skillParam_gen.burst[1]),\r\n  }\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"normal\")])),\r\n  charged: Object.fromEntries(Object.entries(data.charged).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"charged\", name === \"hit\" ? undefined : \"pyro\")])),\r\n  plunging: Object.fromEntries(Object.entries(data.plunging).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.auto], stats, \"plunging\")])),\r\n  skill: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula((data.skill.dmg_[stats.tlvl.skill] / 100) * arr[stats.tlvl.auto], stats, \"normal\", \"pyro\")])),\r\n  burst: Object.fromEntries(Object.entries(data.burst).map(([name, arr]) =>\r\n    [name, stats => basicDMGFormula(arr[stats.tlvl.burst], stats, \"burst\")])),\r\n  c6: Object.fromEntries(data.normal.hitArr.map((arr, i) =>\r\n    [i, stats => basicDMGFormula(0.6 * (data.skill.dmg_[stats.tlvl.skill] / 100) * arr[stats.tlvl.auto], stats, \"normal\", \"pyro\")])),\r\n}\r\nexport default formula","import { getTalentStatKey } from \"../../../Build/Build\"\r\nimport { FormulaItem, IFormulaSheet } from \"../../../Types/character\"\r\nimport { basicDMGFormula } from \"../../../Util/FormulaUtil\"\r\n\r\nconst data = {\r\n  normal: {\r\n    hitArr: [\r\n      [30.77, 33.27, 35.78, 39.36, 41.86, 44.72, 48.66, 52.59, 56.53, 60.82, 65.74, 71.53, 77.31, 83.1, 89.41],//1\r\n      [31.15, 33.69, 36.22, 39.85, 42.38, 45.28, 49.26, 53.25, 57.23, 61.58, 66.56, 72.42, 78.27, 84.13, 90.52],//2\r\n      [38.58, 41.72, 44.86, 49.34, 52.48, 56.07, 61, 65.94, 70.87, 76.26, 82.42, 89.68, 96.93, 104.18, 112.1],//3\r\n      [42.94, 46.43, 49.93, 54.92, 58.42, 62.41, 67.9, 73.4, 78.89, 84.88, 91.74, 99.82, 107.89, 115.97, 124.77],//4\r\n      [10.75, 11.63, 12.5, 13.75, 14.63, 15.63, 17, 18.38, 19.75, 21.25, 22.97, 24.99, 27.01, 29.03, 31.24],//5 ×4\r\n      [54.5, 58.93, 63.37, 69.7, 74.14, 79.21, 86.18, 93.15, 100.12, 107.73, 116.44, 126.69, 136.93, 147.18, 158.36]\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: [111.03, 120.06, 129.1, 142.01, 151.05, 161.38, 175.58, 189.78, 203.98, 219.47, 237.22, 258.1, 278.97, 299.85, 322.62],\r\n  },\r\n  plunging: {\r\n    dmg: [63.93, 69.14, 74.34, 81.77, 86.98, 92.93, 101.1, 109.28, 117.46, 126.38, 135.3, 144.22, 153.14, 162.06, 170.98],\r\n    low: [127.84, 138.24, 148.65, 163.51, 173.92, 185.81, 202.16, 218.51, 234.86, 252.7, 270.54, 288.38, 306.22, 324.05, 341.89],\r\n    high: [159.68, 172.67, 185.67, 204.24, 217.23, 232.09, 252.51, 272.93, 293.36, 315.64, 337.92, 360.2, 382.48, 404.76, 427.04]\r\n  },\r\n  skill: {\r\n    steeleDMG: [16, 17.2, 18.4, 20, 21.2, 22.4, 24, 25.6, 27.2, 28.8, 30.4, 32, 34, 36, 38],\r\n    resonanceDMG: [32, 34.4, 36.8, 40, 42.4, 44.8, 48, 51.2, 54.4, 57.6, 60.8, 64, 68, 72, 76],\r\n    holdDMG: [80, 86, 92, 100, 106, 112, 120, 128, 136, 144, 152, 160, 170, 180, 190],\r\n    shieldBase: [1232, 1356, 1489, 1633, 1787, 1951, 2126, 2311, 2506, 2712, 2927, 3153, 3389, 3636, 3893],\r\n    shieldMaxHP: [12.8, 13.76, 14.72, 16, 16.96, 17.92, 19.2, 20.48, 21.76, 23.04, 24.32, 25.6, 27.2, 28.8, 30.4]\r\n  },\r\n  burst: {\r\n    dmg: [401.08, 444.44, 487.8, 542, 590.78, 639.56, 704.6, 769.64, 834.68, 899.72, 964.76, 1029.8, 1084, 1138.2, 1192.4],\r\n    petriDur: [3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4, 4, 4, 4, 4]\r\n  }\r\n}\r\nfunction zliDMG(percent, hpMulti, stats, skillKey): FormulaItem {\r\n  const val = percent / 100\r\n  const statKey = getTalentStatKey(skillKey, stats) + \"_multi\"\r\n  return [s => (val * s.finalATK + hpMulti * s.finalHP) * s[statKey], [\"finalATK\", \"finalHP\", statKey]]\r\n}\r\nconst formula: IFormulaSheet = {\r\n  normal: {\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [i, stats =>\r\n      basicDMGFormula(percentArr[stats.tlvl.auto], stats, \"normal\")])),\r\n    ...Object.fromEntries(data.normal.hitArr.map((percentArr, i) => [`${i}HP`, stats =>\r\n      zliDMG(percentArr[stats.tlvl.auto], 0.0139, stats, \"normal\")])),\r\n  },\r\n  charged: {\r\n    dmg: stats => basicDMGFormula(data.charged.dmg[stats.tlvl.auto], stats, \"charged\"),\r\n    dmgHP: stats => zliDMG(data.charged.dmg[stats.tlvl.auto], 0.0139, stats, \"charged\")\r\n  },\r\n  plunging: {\r\n    dmg: stats => basicDMGFormula(data.plunging.dmg[stats.tlvl.auto], stats, \"plunging\"),\r\n    dmgHP: stats => zliDMG(data.plunging.dmg[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n    low: stats => basicDMGFormula(data.plunging.low[stats.tlvl.auto], stats, \"plunging\"),\r\n    lowHP: stats => zliDMG(data.plunging.low[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n    high: stats => basicDMGFormula(data.plunging.high[stats.tlvl.auto], stats, \"plunging\"),\r\n    highHP: stats => zliDMG(data.plunging.high[stats.tlvl.auto], 0.0139, stats, \"plunging\"),\r\n  },\r\n  skill: {\r\n    steeleDMG: stats => basicDMGFormula(data.skill.steeleDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    steeleDMGHP: stats => zliDMG(data.skill.steeleDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    resonanceDMG: stats => basicDMGFormula(data.skill.resonanceDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    resonanceDMGHP: stats => zliDMG(data.skill.resonanceDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    holdDMG: stats => basicDMGFormula(data.skill.holdDMG[stats.tlvl.skill], stats, \"skill\"),\r\n    holdDMGHP: stats => zliDMG(data.skill.holdDMG[stats.tlvl.skill], 0.019, stats, \"skill\"),\r\n    shield: stats => {\r\n      const base = data.skill.shieldBase[stats.tlvl.skill]\r\n      const hpMulti = data.skill.shieldMaxHP[stats.tlvl.skill] / 100\r\n      return [s => (hpMulti * s.finalHP + base) * (1 + s.shield_ / 100) * 1.5, [\"finalHP\", \"shield_\"]]\r\n    }\r\n  },\r\n  burst: {\r\n    dmg: stats => basicDMGFormula(data.burst.dmg[stats.tlvl.burst], stats, \"burst\"),\r\n    dmgHP: stats => zliDMG(data.burst.dmg[stats.tlvl.burst], 0.33, stats, \"burst\"),\r\n  }\r\n}\r\n\r\nexport default formula\r\nexport {\r\n  data\r\n}"],"sourceRoot":""}