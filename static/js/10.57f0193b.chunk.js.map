{"version":3,"sources":["Build/Build.ts","Character/Character.ts","Assets/Element_Anemo.png","Assets/Assets.ts","Assets/Element_Cryo.png","Assets/Element_Dendro.png","Assets/Element_Electro.png","Assets/Element_Geo.png","Assets/Element_Hydro.png","Assets/Element_Pyro.png","Assets/Weapon-class-bow-icon.png","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","Weapon/Weapon.ts","Formula.ts","Components/InfoComponent.tsx","Data/WeaponData.ts","StatDependency.ts","Data/CharacterData.ts","Character/CharacterCard.tsx","Util/TimeUtil.ts","../node_modules/react-bootstrap/esm/ProgressBar.js","Build/BuildWorker.ts","Build/BuildDisplay.tsx"],"names":["calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","getTalentStatKey","skillKey","stats","overwriteElement","hitMode","infusionAura","infusionSelf","reactionMode","characterEle","weaponType","ElementalData","includes","startsWith","eleKey","getTalentStatKeyVariant","Character","this","Error","characterKey","character","CharacterDatabase","get","values","equippedArtifacts","forEach","artid","ArtifactDatabase","moveToNewLocation","remove","characterSheet","weaponSheet","subkey","split","getTalentOfKey","name","getElementalName","elementalKey","defVal","getlevelKeys","LevelsData","getlevelTemplateName","levelKey","getLevelString","levelOverride","getStatValueWithOverride","getLevel","getIndexFromlevelkey","indexOf","level","getAscension","asend","getTalentFieldValue","field","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","specializeStat","value","Weapon","getWeaponMainStatValWithOverride","weapon","characterStatBase","baseStat","equipArtifacts","artIds","artIdsOnCharacter","allSlotKeys","artNotOnChar","location","artOnChar","notCharLoc","id","equipArtifactOnSlot","equipArtifactBuild","calculateBuild","artifactSheets","mainStatAssumptionLevel","fromEntries","art","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","mainStatKey","mainStatValue","numStars","Math","max","min","substats","substat","stat","Conditional","parseConditionalValues","conditionalValues","conditional","conditionalValue","setNumKey","parseInt","condStats","resolve","val","dependencies","GetDependencies","modifiers","PreprocessFormulas","formula","mergeStats","modifier","mkey","multiplier","undefined","elementKey","talentLevelKeys","constellation","refineIndex","ascension","statKeys","weaponTypeKey","tlvl","weapon_key","weapon_refineIndex","allElements","overrides","hasOwnProperty","specializedStatVal","specialStatKey","getTalentStatsAll","s","weaponSubKey","getWeaponSubstatKey","getWeaponSubstatValWithOverride","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","talentKey","formulas","formKey","weaponFormulas","Formula","Assets","elements","anemo","cryo","dendro","electro","geo","hydro","pyro","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","getLevelName","LevelNameData","getLevelIndex","WeaponLevelKeys","getWeaponMainStatVal","baseStats","main","getWeaponSubstatVal","sub","substatKey","getWeaponTypeName","WeaponTypeData","getWeaponTypeKeys","weaponObj","overrideMainVal","overrideSubVal","formulaImport","then","imp","default","crawlObject","f","objPathValue","InfoComponent","pageKey","text","modalTitle","children","useState","loadFromLocalStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","onClick","icon","faTimes","Body","fallback","className","animation","Footer","faQuestionCircle","GetFormulaDependency","dependency","Proxy","target","prop","receiver","add","formulaKeyDependency","Formulas","StatData","InsertDependencies","k","critRate_","critDMG_","enerRech_","stamina","CharacterSpecializedStatKey","CharacterCard","onEdit","onDelete","cardClassName","header","footer","useForceUpdate","forceUpdate","useEffect","registerCharListener","unregisterCharListener","usePromise","getAll","CharacterSheet","WeaponSheet","useMemo","weaponName","weaponMainVal","weaponSubVal","weaponLevelName","weaponPassiveName","passiveName","faEdit","faTrashAlt","src","thumbImg","star","thumbnail","stars","colored","Stat","getStatName","getStatUnit","setEffects","arr","artifactSetName","highestNum","unit","statVal","StatIconEle","toFixed","fixedUnit","as","Link","to","pathname","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","getPercentage","now","percentage","round","renderProgressBar","_ref","ref","_classNames","label","srOnly","striped","animated","style","bsPrefix","props","_objectWithoutPropertiesLoose","React","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","wrapperProps","child","cloneElement","displayName","defaultProps","Worker_fn","Worker","InfoDisplay","lazy","CharacterDisplayCard","warningBuildNumber","maxBuildsToShowList","artifactsSlotsToSelectMainStats","buildSettingsReducer","state","action","type","mainStatKeys","BuildDisplay","propCharacterKey","setcharacterKey","useReducer","statFilters","optimizationTarget","useLockedArts","useEquippedArts","ascending","buildSettings","buildSettingsDispatch","builds","setbuilds","maxBuildsToShow","setmaxBuildsToShow","modalBuild","setmodalBuild","showArtCondModal","setshowArtCondModal","showCharacterModal","setshowCharacterModal","generatingBuilds","setgeneratingBuilds","generationProgress","setgenerationProgress","generationDuration","setgenerationDuration","generationSkipped","setgenerationSkipped","charDirty","setCharDirty","artsDirty","setArtsDirty","isMounted","useRef","worker","ReactGA","pageview","registerListener","unregisterListener","current","terminate","selectCharacter","useCallback","cKey","localStorage","statsDisplayKeys","update","sectionKey","section","JSON","stringify","totBuildNumber","artifactDatabase","getArtifactDatabase","lock","splitArtifactsBySlot","filter","generateBuilds","turbo","artifactSetEffects","setEffectsObjs","splitArtifacts","artArr","mainStatVal","minFilters","maxFilters","data","onmessage","e","progress","timing","skipped","category","variable","toString","obj","postMessage","dropdownitemsForStar","setsWithMaxRarity","setobj","some","setsNumArr","artsAccountedOther","cur","ind","every","Dropdown","Item","characterName","characterDropDown","DropdownButton","title","disabled","Divider","CharacterSelection","onSelect","sortByText","getStatVariant","getStatNamePretty","artsAccounted","artifactCondCount","count","v","characterDispatch","hasMinFilters","hasMaxFilters","disabledTurbo","Container","BuildModal","build","ArtConditionalModal","Row","Col","Card","lg","HitModeCard","Boolean","StatFilterCard","setStatFilters","sFs","Button","Badge","setNum","ButtonGroup","ItemText","setNKey","setNkey","SetEffectDisplay","newBuild","equippedBuild","editable","faCheckSquare","faSquare","AssumeFullLevelToggle","setmainStatAssumptionLevel","getStatNameWithPercent","slotMainStats","BuildAlert","OverlayTrigger","overlay","Tooltip","drop","Toggle","Menu","align","minWidth","fields","getDisplayHeading","md","overflow","textOverflow","TargetSelectorDropdownItem","faSortAmountDownAlt","faSortAmountUp","ListGroup","ArtifactDisplayItem","talentField","Modal","Suspense","tabName","setCharacterKey","onClose","closeArtCondModal","artSetKeyList","namesByMaxRarities","flatMap","faUndo","sheet","slotIcons","rarity","xl","Image","StatFilterItem","close","setFilter","isFloat","inputProps","allowEmpty","float","minInputProps","placeholder","onChange","maxInputProps","InputGroup","Prepend","sKey","CustomFormControl","Append","faTrash","setHitmode","setReactionMode","setInfusionAura","remainingKeys","sheets","sort","slotarr1","slotarr","artifactSlotIcon","StatDisplayComponent","cardbg","totalBuildNumberString","toLocaleString","totalUnskipped","generationProgressString","generationSkippedString","totalUnskippedString","generationSkippedText","progPercent","Alert","levels","0","4","8","12","16","20"],"mappings":"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","file":"static/js/10.57f0193b.chunk.js","sourcesContent":["import ElementalData from \"../Data/ElementalData\"\r\nimport { StatKey, StatDict, IArtifact, SubstatKey } from \"../Types/artifact\"\r\nimport { ArtifactSetEffects, PrunedArtifactSetEffects, ArtifactsBySlot, SetFilter } from \"../Types/Build\"\r\nimport { ArtifactSetKey, ElementKey } from \"../Types/consts\"\r\n\r\n/**\r\n * Remove artifacts that can never be used in optimized builds\r\n * @param {artifact[]} artifacts - List of artifacts of the same slot\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - The list of the set effects\r\n * @param {Set.<statKey>} significantStats - A set of stats that pruning needs to take into consideration\r\n * @param {bool} ascending - Whether the sorting is ascending or descending\r\n * @param {Set.<setKey>} alwaysAccepted - The list of artifact sets that are always included\r\n */\r\nexport function pruneArtifacts(artifacts: IArtifact[], artifactSetEffects: ArtifactSetEffects, significantStats: Set<StatKey>, ascending: boolean = false, alwaysAccepted: Set<ArtifactSetKey> = new Set()): IArtifact[] {\r\n  function shouldKeepFirst(first: StatDict, second: StatDict, preferFirst: boolean) {\r\n    let firstBetter = Object.entries(first).some(([k, v]) => v! > (second[k] ?? 0))\r\n    let secondBetter = Object.entries(second).some(([k, v]) => v! > (first[k] ?? 0))\r\n    if (ascending) [firstBetter, secondBetter] = [secondBetter, firstBetter]\r\n    // Keep if first is strictly better, uncomparable, or equal + prefer first\r\n    return firstBetter || (!secondBetter && preferFirst)\r\n  }\r\n\r\n  // Prune unused set effects. Sets with no relevant effects are regrouped to \"other\"\r\n  const prunedSetEffects: PrunedArtifactSetEffects = { \"other\": {} }\r\n  for (const set in artifactSetEffects)\r\n    for (const num in artifactSetEffects[set]) {\r\n      const effects = Object.entries(artifactSetEffects[set]![num]).filter(([key]) => significantStats.has(key as StatKey))\r\n      if (effects.length > 0) {\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = Object.fromEntries(effects)\r\n      }\r\n    }\r\n\r\n  // array of artifacts, artifact stats, and set (may be \"other\")\r\n  let tmp: { artifact: IArtifact, stats: Dict<StatKey, number>, set: ArtifactSetKey | \"other\" }[] = artifacts.map(artifact => {\r\n    let stats = {}, set: ArtifactSetKey | \"other\" = (artifact.setKey in prunedSetEffects) ? artifact.setKey : \"other\"\r\n    if (significantStats.has(artifact.mainStatKey as any))\r\n      stats[artifact.mainStatKey] = artifact.mainStatVal!\r\n    for (const { key, value } of artifact.substats)\r\n      if (significantStats.has(key as SubstatKey))\r\n        stats[key] = (stats[key] ?? 0) + value\r\n    for (const key in stats)\r\n      if (key.endsWith(\"enemyRes_\"))\r\n        stats[key] = -stats[key]\r\n    return { artifact, stats, set }\r\n  })\r\n\r\n  // Compare artifacts' base stats from the same set\r\n  tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) =>\r\n    tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) =>\r\n      candidateSet !== otherSet || shouldKeepFirst(candidateStats, otherStats, candidate.id! <= other.id!)\r\n    ))\r\n\r\n  if (!ascending) {\r\n    // Cross-check with different sets\r\n    tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) => {\r\n      // Possible \"additional stats\" if a build equips `candidate` on an empty slot.\r\n      let possibleStats = [...Object.values(prunedSetEffects[candidateSet]!), {}].map(c => {\r\n        const current: Dict<string, number> = { ...candidateStats }\r\n        Object.entries(c).forEach(([key, value]: any) => current[key] = (current[key] ?? 0) + (value ?? 0))\r\n        return current\r\n      })\r\n      return tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) => {\r\n        if (candidateSet === otherSet) return true // Already checked same-set\r\n\r\n        // Remove possibilities that shouldn't be kept\r\n        possibleStats = possibleStats.filter(current =>\r\n          shouldKeepFirst(current, otherStats, candidate.id! <= other.id!))\r\n        return possibleStats.length !== 0\r\n      })\r\n    })\r\n  }\r\n  // Reinstate `alwaysAccepted`\r\n  return [\r\n    ...artifacts.filter(artifact => alwaysAccepted.has(artifact.setKey)),\r\n    ...tmp.map(tmp => tmp.artifact).filter(artifact => !alwaysAccepted.has(artifact.setKey)),\r\n  ]\r\n}\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet: { [setKey in ArtifactSetKey]?: IArtifact[] } = {}\r\n    for (const artifact of (artifactsBySlot[slotKey] as any)) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey]!.push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet['null']) artifactsBySet['null'].push(artifact)\r\n        else artifactsBySet['null'] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu: ArtifactsBySlot = {}, result: ArtifactsBySlot[] = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1]!.length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats, artifactsBySlot: ArtifactsBySlot, artifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount = {}, accu = {}\r\n  function slotPerm(index, stats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    let slotKey = slotKeys[index]\r\n    for (const artifact of (artifactsBySlot[slotKey] as any)) {\r\n      let newStats = { ...stats }\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey, art: IArtifact, setCount, accu, stats, artifactSetEffects) {\r\n  let setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal!\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  let setEffect = artifactSetEffects[setKey]?.[setCount[setKey]]\r\n  setEffect && Object.entries(setEffect).forEach(([statKey, val]: any) => {\r\n    if (statKey in stats) stats[statKey] += val\r\n  })\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The calcualted stats\r\n  * @param {*} overwriteElement - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey, stats, overwriteElement?: ElementKey | \"physical\") {\r\n  const { hitMode = \"\", infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n    return `${overwriteElement || characterEle}_${skillKey}_${hitMode}`\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey, stats, overwriteElement: ElementKey | \"physical\" | undefined | \"\" = \"\") {\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return skillKey//elemental DMG\r\n  const { infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) {\r\n      if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n      else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n    }\r\n    return overwriteElement || characterEle\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) {\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n  }\r\n  return eleKey\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { characterStatBase, LevelsData } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport ArtifactDatabase from \"../Database/ArtifactDatabase\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport Formula from \"../Formula\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { ICharacter } from \"../Types/character\";\r\nimport { allElements, allSlotKeys, CharacterKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport Weapon from \"../Weapon/Weapon\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey, defVal = \"\") => (ElementalData?.[elementalKey]?.name || defVal)\r\n\r\n  //LEVEL\r\n  static getlevelKeys = (): string[] => Object.keys(LevelsData)\r\n  static getlevelTemplateName = (levelKey, defVal = \"\") => (LevelsData?.[levelKey]?.name || defVal)\r\n  static getLevelString = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet) => {\r\n    const levelOverride = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n    return Character.getLevel(character.levelKey) === levelOverride ? Character.getlevelTemplateName(character.levelKey) : `Lvl. ${levelOverride}`\r\n  }\r\n  static getIndexFromlevelkey = (levelKey) => Character.getlevelKeys().indexOf(levelKey);\r\n  static getLevel = (levelKey, defVal = 1) => (LevelsData?.[levelKey]?.level || defVal)\r\n  static getAscension = (levelKey, defVal = 0) => (LevelsData?.[levelKey]?.asend || defVal)\r\n\r\n  static getTalentFieldValue = (field, key, stats = {}, defVal = \"\") => {\r\n    if (!field?.[key]) return defVal\r\n    return evalIfFunc(field?.[key], stats)\r\n  }\r\n\r\n  static hasOverride = (character, statKey) => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\") || false\r\n    else if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\") || false\r\n    else if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\") || false\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string, defVal = 0) => {\r\n    const { levelKey } = character\r\n    if (statKey === \"specializedStatKey\") return characetSheet.specializeStat.key\r\n    if (statKey === \"specializedStatVal\") return characetSheet.specializeStat.value[Character.getIndexFromlevelkey(levelKey)]\r\n    if (statKey === \"weaponATK\") return Weapon.getWeaponMainStatValWithOverride(character?.weapon, weaponSheet)\r\n    if (statKey === \"characterLevel\" || statKey === \"enemyLevel\") return Character.getLevel(levelKey)\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    if (statKey in characetSheet.baseStat) return characetSheet.baseStat[statKey][Character.getIndexFromlevelkey(levelKey)]\r\n    return defVal\r\n  }\r\n  static getStatValueWithOverride = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string, defVal = 0) => {\r\n    if (Character.hasOverride(character, statKey)) return character?.baseStatOverrides?.[statKey] ?? defVal\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey, defVal)\r\n  }\r\n\r\n  //equipment, with consideration on swapping equipped.\r\n  static equipArtifacts = (characterKey: CharacterKey | \"\", artIds: StrictDict<SlotKey, string>) => {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return;\r\n    const artIdsOnCharacter = character.equippedArtifacts;\r\n\r\n    //swap, by slot\r\n    allSlotKeys.forEach(slotKey => {\r\n      const artNotOnChar = ArtifactDatabase.get(artIds[slotKey])\r\n      if (artNotOnChar?.location === characterKey) return; //it is already equipped\r\n      const artOnChar = ArtifactDatabase.get(artIdsOnCharacter?.[slotKey])\r\n      const notCharLoc = (artNotOnChar?.location ?? \"\")\r\n      //move current art to other char\r\n      if (artOnChar) ArtifactDatabase.moveToNewLocation(artOnChar.id, notCharLoc)\r\n      //move current art to other char\r\n      if (notCharLoc) CharacterDatabase.equipArtifactOnSlot(notCharLoc, slotKey, artOnChar?.id ?? \"\")\r\n      //move other art to current char\r\n      if (artNotOnChar) ArtifactDatabase.moveToNewLocation(artNotOnChar.id, characterKey)\r\n    })\r\n    //move other art to current char\r\n    CharacterDatabase.equipArtifactBuild(characterKey, artIds);\r\n  }\r\n  static remove(characterKey) {\r\n    const character = CharacterDatabase.get(characterKey)\r\n    if (!character) return\r\n    Object.values(character.equippedArtifacts).forEach(artid =>\r\n      ArtifactDatabase.moveToNewLocation(artid, \"\"))\r\n    CharacterDatabase.remove(characterKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    let artifacts\r\n    if (character.artifacts) //from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, ArtifactDatabase.get(artid)]))\r\n    const initialStats = Character.createInitialStats(character, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats, artifacts, artifactSheets) => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    let artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach((art: any) => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.numStars, Math.max(Math.min(stats.mainStatAssumptionLevel, art.numStars * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    artifactSetEffectsStats.forEach(stat => stats[stat.key] = (stats[stat.key] || 0) + stat.value)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey]) => {\r\n      const { setNumKey } = conditional\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      Object.entries(condStats).forEach(([statKey, val]) => stats[statKey] = (stats[statKey] || 0) + val)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats?.modifiers)\r\n    PreprocessFormulas(dependencies, stats).formula(stats)\r\n    return stats\r\n  }\r\n  static mergeStats = (initialStats, stats) => stats && Object.entries(stats).forEach(([key, val]: any) => {\r\n    if (key === \"modifiers\") {\r\n      initialStats.modifiers = initialStats.modifiers ?? {}\r\n      for (const [statKey, modifier] of (Object.entries(val) as any)) {\r\n        initialStats.modifiers[statKey] = initialStats.modifiers[statKey] ?? {}\r\n        for (const [mkey, multiplier] of (Object.entries(modifier) as any))\r\n          initialStats.modifiers[statKey][mkey] = (initialStats.modifiers[statKey][mkey] ?? 0) + multiplier\r\n      }\r\n    } else {\r\n      if (initialStats[key] === undefined) initialStats[key] = val\r\n      else if (typeof initialStats[key] === \"number\") initialStats[key] += val\r\n    }\r\n  })\r\n\r\n  static createInitialStats = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { characterKey, elementKey, levelKey, hitMode, infusionAura, reactionMode, talentLevelKeys, constellation, equippedArtifacts, conditionalValues = {}, weapon = { key: \"\", refineIndex: 0 } } = character\r\n    const ascension = Character.getAscension(levelKey)\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"characterHP\", \"characterATK\", \"characterDEF\", \"weaponATK\", \"characterLevel\", \"enemyLevel\", \"physical_enemyRes_\", \"physical_enemyImmunity\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    const { key: weapon_key, refineIndex: weapon_refineIndex } = weapon\r\n    initialStats.weapon = { key: weapon_key, refineIndex: weapon_refineIndex }\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (statKey === \"specializedStatKey\" || statKey === \"specializedStatVal\") return\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    let specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")\r\n    let specialStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n    Character.mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => Character.mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponSubKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n    if (weaponSubKey) Character.mergeStats(initialStats, { [weaponSubKey]: Weapon.getWeaponSubstatValWithOverride(character?.weapon, weaponSheet) })\r\n    Character.mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      Character.mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, characterSheet: CharacterSheet) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    talentSheet && Object.entries(talentSheet.formula).forEach(([talentKey, formulas]: any) => {\r\n      Object.values(formulas as any).forEach((formula: any) => {\r\n        if (!formula.field.canShow(stats)) return\r\n        if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n        const formKey = `talentKey_${talentKey}`\r\n        if (!charFormulas[formKey]) charFormulas[formKey] = []\r\n        charFormulas[formKey].push(formula.keys)\r\n      })\r\n    })\r\n\r\n    const weaponFormulas = Formula.formulas.weapon[stats.weapon.key]\r\n\r\n    if (weaponFormulas) {\r\n      Object.values(weaponFormulas as any).forEach((formula: any) => {\r\n        if (!formula.field.canShow(stats)) return\r\n        const formKey = `weapon_${stats.weapon.key}`\r\n        if (!charFormulas[formKey]) charFormulas[formKey] = []\r\n        charFormulas[formKey].push(formula.keys)\r\n      })\r\n    }\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n  static getDisplayHeading(key: string, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, eleKey: ElementKey = \"anemo\") {\r\n    if (key === \"basicKeys\") return \"Basic Stats\"\r\n    else if (key === \"genericAvgHit\") return \"Generic Optimization Values\"\r\n    else if (key === \"transReactions\") return \"Transformation Reaction\"\r\n    else if (key.startsWith(\"talentKey_\")) {\r\n      const subkey = key.split(\"talentKey_\")[1]\r\n      return (characterSheet?.getTalentOfKey(subkey, eleKey)?.name ?? subkey)\r\n    } else if (key.startsWith(\"weapon_\")) {\r\n      const subkey = key.split(\"weapon_\")[1]\r\n      return (weaponSheet?.name ?? subkey)\r\n    }\r\n    return \"\"\r\n  }\r\n}","export default __webpack_public_path__ + \"static/media/Element_Anemo.f809fde3.png\";","import anemo from './Element_Anemo.png'\r\nimport cryo from './Element_Cryo.png'\r\nimport dendro from './Element_Dendro.png'\r\nimport electro from './Element_Electro.png'\r\nimport geo from './Element_Geo.png'\r\nimport hydro from './Element_Hydro.png'\r\nimport pyro from './Element_Pyro.png'\r\n\r\nimport bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nlet Assets = {\r\n  elements: { anemo, cryo, dendro, electro, geo, hydro, pyro },\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Element_Cryo.019d72f9.png\";","export default __webpack_public_path__ + \"static/media/Element_Dendro.8ee0f26d.png\";","export default __webpack_public_path__ + \"static/media/Element_Electro.342332ac.png\";","export default __webpack_public_path__ + \"static/media/Element_Geo.b7e865c6.png\";","export default __webpack_public_path__ + \"static/media/Element_Hydro.f2f8bd8a.png\";","export default __webpack_public_path__ + \"static/media/Element_Pyro.f65c2e38.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import { LevelNameData, WeaponLevelKeys, WeaponTypeData } from '../Data/WeaponData';\r\nimport WeaponSheet from './WeaponSheet';\r\nexport default class Weapon {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Weapon) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getLevelName = (levelKey, defVal = \"\") => (LevelNameData[levelKey] || defVal)\r\n  static getLevelIndex = (levelKey): number => WeaponLevelKeys.indexOf(levelKey)\r\n\r\n  //base Stat\r\n  static getWeaponMainStatVal = (weaponSheet: WeaponSheet, levelKey, defVal = 0) => (weaponSheet.baseStats.main[Weapon.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubstatVal = (weaponSheet: WeaponSheet, levelKey, defVal = 0) => (weaponSheet.baseStats.sub?.[Weapon.getLevelIndex(levelKey)] || defVal)\r\n  static getWeaponSubstatKey = (weaponSheet: WeaponSheet, defVal = \"\") => (weaponSheet.baseStats?.substatKey || defVal)\r\n\r\n  static getWeaponTypeName = (weaponType, defVal = \"\") => (WeaponTypeData[weaponType] || defVal)\r\n  static getWeaponTypeKeys = (): string[] => Object.keys(WeaponTypeData)\r\n\r\n  static getWeaponMainStatValWithOverride = (weaponObj: any, weaponSheet: WeaponSheet, defVal = 0) =>\r\n    weaponObj?.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weaponObj?.levelKey, defVal);\r\n  static getWeaponSubstatValWithOverride = (weaponObj: any, weaponSheet: WeaponSheet, defVal = 0) =>\r\n    weaponObj?.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weaponObj?.levelKey, defVal);\r\n}","import ICalculatedStats from './Types/ICalculatedStats';\r\nimport { crawlObject, objPathValue } from './Util/Util';\r\n\r\nexport const formulaImport = import('./Data/formula').then(imp => {\r\n  Formula.formulas = imp.default\r\n  crawlObject(imp.default, [], f => typeof f === \"function\", (formula, keys) => formula.keys = keys)\r\n})\r\n\r\nexport default class Formula {\r\n  constructor() { if (this instanceof Formula) throw Error('A static class cannot be instantiated.'); }\r\n  static formulas: any = {}\r\n  static get = (keys: string[]): Promise<((stats: ICalculatedStats) => any[]) | object | undefined> => formulaImport.then(() => objPathValue(Formula.formulas, keys))\r\n}\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","const WeaponLevelKeys = [\"L1\", \"L5\", \"L10\", \"L15\", \"L20\", \"L20A\", \"L25\", \"L30\", \"L35\", \"L40\", \"L40A\", \"L45\", \"L50\", \"L50A\", \"L55\", \"L60\", \"L60A\", \"L65\", \"L70\", \"L70A\", \"L75\", \"L80\", \"L80A\", \"L85\", \"L90\",]\r\nconst LevelNameData = { \"L1\": \"Lvl. 1\", \"L5\": \"Lvl. 5\", \"L10\": \"Lvl. 10\", \"L15\": \"Lvl. 15\", \"L20\": \"Lvl. 20\", \"L20A\": \"Lvl. 20/40\", \"L25\": \"Lvl. 25\", \"L30\": \"Lvl. 30\", \"L35\": \"Lvl. 35\", \"L40\": \"Lvl. 40\", \"L40A\": \"Lvl. 40/50\", \"L45\": \"Lvl. 45\", \"L50\": \"Lvl. 50\", \"L50A\": \"Lvl. 50/60\", \"L55\": \"Lvl. 55\", \"L60\": \"Lvl. 60\", \"L60A\": \"Lvl. 60/70\", \"L65\": \"Lvl. 65\", \"L70\": \"Lvl. 70\", \"L70A\": \"Lvl. 70/80\", \"L75\": \"Lvl. 75\", \"L80\": \"Lvl. 80\", \"L80A\": \"Lvl. 80/90\", \"L85\": \"Lvl. 85\", \"L90\": \"Lvl. 90\", }\r\nconst WeaponTypeData = {\r\n  sword: \"Sword\",\r\n  claymore: \"Claymore\",\r\n  catalyst: \"Catalyst\",\r\n  bow: \"Bow\",\r\n  polearm: \"Polearm\"\r\n}\r\n\r\nexport {\r\n  WeaponLevelKeys,\r\n  LevelNameData,\r\n  WeaponTypeData\r\n}","import { Formulas, StatData } from \"./StatData\"\r\n\r\n//generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula) {\r\n  const dependency = new Set()\r\n  formula(\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }),\r\n    new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.keys(Formulas).map(key => [key, GetFormulaDependency(Formulas[key])])\r\n))\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]: any) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]: any) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(modifiers = {}, keys = Object.keys(StatData)) {\r\n  let dependencies = new Set()\r\n  keys.forEach(key => InsertDependencies(key, modifiers, dependencies))\r\n  return [...dependencies]\r\n}\r\nfunction InsertDependencies(key, modifiers, dependencies) {\r\n  if (dependencies.has(key)) return\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  Object.keys(modifiers[key] ?? {}).forEach(k => InsertDependencies(k, modifiers, dependencies))\r\n  dependencies.add(key)\r\n}\r\n\r\n//if the optimizationTarget is in the form of {dmg:0.6}, it can be reduced to \"dmg\" for the purpose to build generation.\r\nconst reduceOptimizationTarget = (optimizationTarget) =>\r\n  (typeof optimizationTarget === \"object\" && Object.keys(optimizationTarget).length === 1 && typeof optimizationTarget[Object.keys(optimizationTarget)[0] as any] === \"number\") ? Object.keys(optimizationTarget)[0] : optimizationTarget\r\n\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n  reduceOptimizationTarget,\r\n}\r\n","// import characters from\r\nconst LevelsData = {\r\n  \"L1\": {\r\n    name: \"Lv. 1\",\r\n    level: 1,\r\n    asend: 0\r\n  },\r\n  \"L20\": {\r\n    name: \"Lv. 20\",\r\n    level: 20,\r\n    asend: 0\r\n  },\r\n  \"L20A\": {\r\n    name: \"Lv. 20/40\",\r\n    level: 20,\r\n    asend: 1\r\n\r\n  },\r\n  \"L40\": {\r\n    name: \"Lv. 40\",\r\n    level: 40,\r\n    asend: 1\r\n  },\r\n  \"L40A\": {\r\n    name: \"Lv. 40/50\",\r\n    level: 40,\r\n    asend: 2\r\n  },\r\n\r\n  \"L50\": {\r\n    name: \"Lv. 50\",\r\n    level: 50,\r\n    asend: 2\r\n  },\r\n  \"L50A\": {\r\n    name: \"Lv. 50/60\",\r\n    level: 50,\r\n    asend: 3\r\n  },\r\n  \"L60\": {\r\n    name: \"Lv. 60\",\r\n    level: 60,\r\n    asend: 3\r\n  },\r\n  \"L60A\": {\r\n    name: \"Lv. 60/70\",\r\n    level: 60,\r\n    asend: 4\r\n  },\r\n  \"L70\": {\r\n    name: \"Lv. 70\",\r\n    level: 70,\r\n    asend: 4\r\n  },\r\n  \"L70A\": {\r\n    name: \"Lv. 70/80\",\r\n    level: 70,\r\n    asend: 5\r\n  },\r\n\r\n  \"L80\": {\r\n    name: \"Lv. 80\",\r\n    level: 80,\r\n    asend: 5\r\n  },\r\n  \"L80A\": {\r\n    name: \"Lv. 80/90\",\r\n    level: 80,\r\n    asend: 6\r\n  },\r\n  \"L90\": {\r\n    name: \"Lv. 90\",\r\n    level: 90,\r\n    asend: 6\r\n  }\r\n\r\n}\r\nconst characterStatBase = {\r\n  critRate_: 5,\r\n  critDMG_: 50,\r\n  enerRech_: 100,\r\n  stamina: 100\r\n}\r\nconst CharacterSpecializedStatKey = [\"hp_\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"heal_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\"]\r\n\r\nexport {\r\n  LevelsData,\r\n  characterStatBase,\r\n  CharacterSpecializedStatKey\r\n}","import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { StatIconEle } from '../Components/StatIcon';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport Stat from '../Stat';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterSheet from './CharacterSheet';\r\ntype CharacterCardProps = { characterKey: CharacterKey | \"\", onEdit?: (any) => void, onDelete?: (any) => void, cardClassName: string, header?: JSX.Element, bg?: string, footer?: boolean }\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer = false }: CharacterCardProps) {\r\n  const [, forceUpdate] = useForceUpdate()\r\n  useEffect(() => {\r\n    characterKey && CharacterDatabase.registerCharListener(characterKey, forceUpdate)\r\n    return () => { characterKey && CharacterDatabase.unregisterCharListener(characterKey, forceUpdate) }\r\n  }, [characterKey, forceUpdate])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n  const character = CharacterDatabase.get(characterKey)\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheet = usePromise(character && WeaponSheet.get(character.weapon.key))\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets])\r\n  if (!character || !characterSheet || !weaponSheet || !stats) return null;\r\n\r\n  const { weapon, constellation } = character\r\n  const name = characterSheet.name\r\n  const elementKey = stats.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponName = weaponSheet?.name\r\n  const weaponMainVal = Weapon.getWeaponMainStatValWithOverride(weapon, weaponSheet)\r\n  const weaponSubKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponSubVal = Weapon.getWeaponSubstatValWithOverride(weapon, weaponSheet)\r\n  const weaponLevelName = Weapon.getLevelName(weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text={\"lightfont\" as any}>\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => onEdit(characterKey)}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete(characterKey)}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={() => onEdit?.(characterKey)} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h3 className=\"mb-0\">{Character.getLevelString(character, characterSheet, weaponSheet)} {`C${constellation}`}</h3>\r\n          <h5 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h5>\r\n          <h2 className=\"mb-0\"><Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h2>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && `(${weapon.refineIndex + 1})`} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = artifactSheets?.[key].name ?? \"\"\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = stats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIconEle(statKey)} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Button as={Link} to={{\r\n        pathname: \"/build\",\r\n        characterKey\r\n      } as any}>Generate Builds</Button>\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nexport function msToUnits(ms) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, [\"isChild\"]);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.1953c51d.worker.js\");\n}\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Modal, OverlayTrigger, ProgressBar, Row, Tooltip } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../Artifact/Component/SetEffectDisplay';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../Character/CharacterDisplay/DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from '../Character/CharacterDisplay/StatDisplayComponent';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport Formula from '../Formula';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { ArtifactsBySlot, BuildSetting } from '../Types/Build';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey, CharacterKey, SetNum, SlotKey } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { IFieldDisplay } from '../Types/IFieldDisplay';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { crawlObject, deepClone, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport { calculateTotalBuildNumber } from './Build';\r\nimport SlotNameWithIcon, { artifactSlotIcon } from '../Artifact/Component/SlotNameWIthIcon';\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCard = lazy(() => import('../Character/CharacterDisplayCard'))\r\n\r\nconst warningBuildNumber = 10000000\r\nconst maxBuildsToShowList = [50, 25, 10, 5]\r\nconst maxBuildsToShowDefault = 25\r\nconst autoBuildGenLimit = 100\r\nconst artifactsSlotsToSelectMainStats: SlotKey[] = [\"sands\", \"goblet\", \"circlet\"]\r\nconst initialBuildSettings = (): BuildSetting => ({\r\n  setFilters: [{ key: \"\", num: 0 }, { key: \"\", num: 0 }, { key: \"\", num: 0 }],\r\n  statFilters: {},\r\n  mainStatKeys: [\"\", \"\", \"\"],\r\n  optimizationTarget: \"finalATK\",//TODO need to validate\r\n  mainStatAssumptionLevel: 0,\r\n  useLockedArts: false,\r\n  useEquippedArts: false,\r\n  ascending: false,\r\n})\r\n\r\nfunction buildSettingsReducer(state: BuildSetting, action): BuildSetting {\r\n  switch (action.type) {\r\n    case 'mainStatKey': {\r\n      const { index, mainStatKey } = action\r\n      state.mainStatKeys[index] = mainStatKey\r\n      return { ...state, mainStatKeys: [...state.mainStatKeys] }//do this because this is a dependency, so needs to be a \"new\" array\r\n    }\r\n    case `setFilter`: {\r\n      const { index, key, num = 0 } = action\r\n      state.setFilters[index] = { key, num }\r\n      return { ...state, setFilters: [...state.setFilters] }//do this because this is a dependency, so needs to be a \"new\" array\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\n\r\nexport default function BuildDisplay({ location: { characterKey: propCharacterKey } }) {\r\n  const [characterKey, setcharacterKey] = useState(\"\" as CharacterKey | \"\")\r\n  const [buildSettings, buildSettingsDispatch] = useReducer(buildSettingsReducer, initialBuildSettings())\r\n  const { setFilters, statFilters, mainStatKeys, optimizationTarget, mainStatAssumptionLevel, useLockedArts, useEquippedArts, ascending, } = buildSettings\r\n\r\n  const [builds, setbuilds] = useState([] as any[])\r\n  const [maxBuildsToShow, setmaxBuildsToShow] = useState(maxBuildsToShowDefault)\r\n\r\n  const [modalBuild, setmodalBuild] = useState(null)//the newBuild that is being displayed in the character modal\r\n  const [showArtCondModal, setshowArtCondModal] = useState(false)\r\n  const [showCharacterModal, setshowCharacterModal] = useState(false)\r\n\r\n  const [generatingBuilds, setgeneratingBuilds] = useState(false)\r\n  const [generationProgress, setgenerationProgress] = useState(0)\r\n  const [generationDuration, setgenerationDuration] = useState(0)//in ms\r\n  const [generationSkipped, setgenerationSkipped] = useState(0)\r\n\r\n  const [charDirty, setCharDirty] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const [artsDirty, setArtsDirty] = useForceUpdate()\r\n\r\n  const isMounted = useRef(false)\r\n\r\n  const worker = useRef(null as Worker | null)\r\n\r\n  useEffect(() => ReactGA.pageview('/build'), [])\r\n\r\n  useEffect(() => {\r\n    CharacterDatabase.registerCharListener(characterKey, setCharDirty)\r\n    return () => { characterKey && CharacterDatabase.unregisterCharListener(characterKey, setCharDirty) }\r\n  }, [characterKey, setCharDirty])\r\n\r\n  //register changes in artifact database\r\n  useEffect(() => {\r\n    ArtifactDatabase.registerListener(setArtsDirty)\r\n    return () => { ArtifactDatabase.unregisterListener(setArtsDirty) }\r\n  }, [setArtsDirty])\r\n\r\n  //register changes in character in db\r\n  useEffect(() => {\r\n    if (!characterKey) return\r\n    CharacterDatabase.registerCharListener(characterKey, setCharDirty)\r\n    return () => CharacterDatabase.unregisterCharListener(characterKey, setCharDirty)\r\n  }, [characterKey, setCharDirty])\r\n\r\n  //terminate worker when component unmounts\r\n  useEffect(() => () => worker.current?.terminate(), [])\r\n\r\n  //select a new character Key\r\n  const selectCharacter = useCallback((cKey = \"\") => {\r\n    if (characterKey === cKey) return\r\n    setcharacterKey(cKey)\r\n    buildSettingsDispatch({ ...initialBuildSettings(), ...(CharacterDatabase.get(cKey)?.buildSettings ?? {}) })\r\n    setbuilds([])\r\n    setCharDirty()\r\n  }, [setCharDirty, setcharacterKey, buildSettingsDispatch, characterKey])\r\n\r\n  //load saved stat from DB. will cause infinite loop if add 'selectCharacter' to dependency array\r\n  useEffect(() => {//startup load from localStorage\r\n    if (!(\"BuildsDisplay.state\" in localStorage)) return\r\n    const { characterKey = \"\", maxBuildsToShow = maxBuildsToShowDefault } = loadFromLocalStorage(\"BuildsDisplay.state\") ?? {}\r\n    if (characterKey && CharacterDatabase.get(characterKey)) selectCharacter(characterKey)\r\n    setmaxBuildsToShow(maxBuildsToShow)\r\n  }, [])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => propCharacterKey && selectCharacter(propCharacterKey), [propCharacterKey, selectCharacter])//update when props update\r\n  const character = useMemo(() => charDirty && CharacterDatabase.get(characterKey), [characterKey, charDirty])\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheet = usePromise(character && WeaponSheet.get(character.weapon.key))\r\n  const initialStats = useMemo(() => charDirty && character && characterSheet && weaponSheet && Character.createInitialStats(character, characterSheet, weaponSheet), [character, charDirty, characterSheet, weaponSheet])\r\n  const statsDisplayKeys = useMemo(() => charDirty && characterSheet && initialStats && Character.getDisplayStatKeys(initialStats, characterSheet), [initialStats, charDirty, characterSheet])\r\n\r\n  //save build settings to character when buildSettings change, will cause infinite loop if add 'character' to dependency array\r\n  useEffect(() => {\r\n    if (!character) return\r\n    character.buildSettings = buildSettings\r\n    CharacterDatabase.update(character)\r\n  }, [buildSettings]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  //save to BuildsDisplay.state on change\r\n  useEffect(() => {\r\n    if (isMounted.current) saveToLocalStorage(\"BuildsDisplay.state\", { characterKey, maxBuildsToShow })\r\n    else isMounted.current = true\r\n  }, [characterKey, maxBuildsToShow])\r\n\r\n  //validate optimizationTarget \r\n  useEffect(() => {\r\n    if (!statsDisplayKeys) return\r\n    if (!Array.isArray(optimizationTarget)) return\r\n    for (const sectionKey in statsDisplayKeys) {\r\n      const section = statsDisplayKeys[sectionKey]\r\n      for (const keys of section)\r\n        if (JSON.stringify(keys) === JSON.stringify(optimizationTarget)) return\r\n    }\r\n    buildSettingsDispatch({ optimizationTarget: initialBuildSettings().optimizationTarget })\r\n  }, [optimizationTarget, statsDisplayKeys])\r\n\r\n  const { split, totBuildNumber } = useMemo(() => {\r\n    if (!characterKey) // Make sure we have all slotKeys\r\n      return { split: Object.fromEntries(allSlotKeys.map(slotKey => [slotKey, []])) as ArtifactsBySlot, totBuildNumber: 0 }\r\n    const artifactDatabase = deepClone(ArtifactDatabase.getArtifactDatabase())\r\n    Object.entries(artifactDatabase).forEach(([key, art]) => {\r\n      //if its equipped on the selected character, bypass the check\r\n      if (art.location === characterKey) return\r\n\r\n      if (art.lock && !useLockedArts) delete artifactDatabase[key]\r\n      else if (art.location && !useEquippedArts) delete artifactDatabase[key]\r\n    })\r\n    const split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    artifactsSlotsToSelectMainStats.forEach((slotKey, index) =>\r\n      mainStatKeys[index] && (split[slotKey] = split[slotKey]?.filter((art) => art.mainStatKey === mainStatKeys[index])))\r\n    const totBuildNumber = calculateTotalBuildNumber(split, setFilters)\r\n    return artsDirty && { split, totBuildNumber }\r\n  }, [characterKey, useLockedArts, useEquippedArts, mainStatKeys, setFilters, artsDirty])\r\n\r\n  const generateBuilds = useCallback((turbo = false) => {\r\n    if (!initialStats || !artifactSheets) return\r\n    if (typeof turbo !== \"boolean\") turbo = false\r\n    setbuilds([])\r\n    setgeneratingBuilds(true)\r\n    setgenerationDuration(0)\r\n    setgenerationProgress(0)\r\n    setgenerationSkipped(0)\r\n    //get the formula for this target\r\n\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    const artifactSetEffects = Artifact.setEffectsObjs(artifactSheets, initialStats)\r\n    const splitArtifacts = deepClone(split) as ArtifactsBySlot\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr!.forEach(art => {\r\n        art.mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.numStars, Math.max(Math.min(mainStatAssumptionLevel, art.numStars * 4), art.level)) ?? 0;\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    const minFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { min }]) => [statKey, min]).filter(([, min]) => typeof min === \"number\"))\r\n    const maxFilters = Object.fromEntries(Object.entries(statFilters).map(([statKey, { max }]) => [statKey, max]).filter(([, max]) => typeof max === \"number\"))\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    const data = {\r\n      splitArtifacts, initialStats, artifactSetEffects,\r\n      setFilters, minFilters, maxFilters, maxBuildsToShow, optimizationTarget, ascending, turbo\r\n    };\r\n    worker.current?.terminate()\r\n    worker.current = new Worker()\r\n    worker.current.onmessage = (e) => {\r\n      if (typeof e.data.progress === \"number\") {\r\n        const { progress, timing = 0, skipped = 0 } = e.data\r\n        setgenerationProgress(progress)\r\n        setgenerationDuration(timing)\r\n        setgenerationSkipped(skipped)\r\n        return\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: totBuildNumber.toString()\r\n      })\r\n      const builds = e.data.builds.map(obj =>\r\n        Character.calculateBuildwithArtifact(initialStats, obj.artifacts, artifactSheets))\r\n      setbuilds(builds)\r\n      setgeneratingBuilds(false)\r\n      worker.current?.terminate()\r\n      worker.current = null\r\n    };\r\n    worker.current.postMessage(data)\r\n  }, [artifactSheets, split, totBuildNumber, mainStatAssumptionLevel, ascending, initialStats, maxBuildsToShow, optimizationTarget, setFilters, statFilters])\r\n\r\n  //try to generate build when build numbers are low\r\n  useEffect(() => {\r\n    if (totBuildNumber && totBuildNumber <= autoBuildGenLimit) generateBuilds()\r\n    else setbuilds([])\r\n  }, [characterKey, split, totBuildNumber, buildSettings, generateBuilds])\r\n\r\n  const dropdownitemsForStar = useCallback((star, index) => artifactSheets && ArtifactSheet.setsWithMaxRarity(artifactSheets, star).map(([setKey, setobj]) => {\r\n    if (setFilters.some(filter => filter.key === setKey)) return false;\r\n    const setsNumArr = Object.keys(artifactSheets?.[setKey]?.setEffects ?? {})\r\n    const artsAccountedOther = setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n    if (setsNumArr.every((num: any) => parseInt(num) + artsAccountedOther > 5)) return false;\r\n    return (<Dropdown.Item key={setKey} onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: setKey, num: parseInt(setsNumArr[0] as any) ?? 0 })} >\r\n      {setobj.name}\r\n    </Dropdown.Item>)\r\n  }), [setFilters, buildSettingsDispatch, artifactSheets])\r\n\r\n  const characterName = characterSheet?.name ?? \"Character Name\"\r\n  const characterDropDown = useMemo(() => <DropdownButton title={characterName} disabled={generatingBuilds}>\r\n    <Dropdown.Item onClick={() => selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n    <Dropdown.Divider />\r\n    <CharacterSelectionDropdownList onSelect={cKey => selectCharacter(cKey)} />\r\n  </DropdownButton>, [characterName, generatingBuilds, selectCharacter])\r\n\r\n  const formula = usePromise(Array.isArray(optimizationTarget) ? Formula.get(optimizationTarget) : undefined)\r\n  const sortByText = useMemo(() => {\r\n    if (Array.isArray(optimizationTarget) && formula) {\r\n      let [type, , talentKey] = (formula as any).keys as string[]\r\n      const field = (formula as any).field as IFieldDisplay\r\n      const variant = Character.getTalentFieldValue(field, \"variant\", initialStats)\r\n      const text = Character.getTalentFieldValue(field, \"text\", initialStats)\r\n      if (type === \"character\") {\r\n        if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n        return <b>{characterSheet?.getTalentOfKey(talentKey, initialStats?.characterEle)?.name}: <span className={`text-${variant}`}>{text}</span></b>\r\n      } else if (type === \"weapon\") {\r\n        return <b>{weaponSheet?.name}: <span className={`text-${variant}`}>{text}</span></b>\r\n      }\r\n    } else return <b>Basic Stat: <span className={`text-${Stat.getStatVariant(optimizationTarget)}`}>{Stat.getStatNamePretty(optimizationTarget)}</span></b>\r\n    // return <Badge variant=\"danger\">INVALID</Badge>\r\n  }, [optimizationTarget, formula, initialStats, characterSheet, weaponSheet])\r\n\r\n\r\n  const artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n  const artifactCondCount = useMemo(() => {\r\n    let count = 0;\r\n    crawlObject(initialStats?.conditionalValues?.artifact, [], v => Array.isArray(v), () => count++)\r\n    return count\r\n  }, [initialStats?.conditionalValues])\r\n  //rudimentary dispatcher, definitely not the same API as the real characterDispatch.\r\n  const characterDispatch = useCallback(val => CharacterDatabase.update({ ...character, ...val }), [character])\r\n\r\n  const hasMinFilters = Object.entries(statFilters).some(([statKey, { min }]) => typeof min === \"number\")\r\n  const hasMaxFilters = Object.entries(statFilters).some(([statKey, { max }]) => typeof max === \"number\")\r\n  const disabledTurbo = ascending ? hasMinFilters : hasMaxFilters\r\n\r\n  return <Container className=\"mt-2\">\r\n    <InfoComponent\r\n      pageKey=\"buildPage\"\r\n      modalTitle=\"Character Management Page Guide\"\r\n      text={[\"For self-infused attacks, like Noelle's Sweeping Time, enable the skill in the talent page.\",\r\n        \"You can compare the difference between equipped artifacts and generated builds.\",\r\n        \"TURBO mode can process millions of builds in seconds.\",\r\n        \"The more complex the formula, the longer the generation time.\",]}\r\n    ><InfoDisplay /></InfoComponent>\r\n    <BuildModal {...{ build: modalBuild, showCharacterModal, characterKey, selectCharacter, setmodalBuild, setshowCharacterModal }} />\r\n    {!!initialStats && <ArtConditionalModal {...{ showArtCondModal, setshowArtCondModal, initialStats, characterDispatch, artifactCondCount }} />}\r\n    <Row className=\"mt-2 mb-2\">\r\n      <Col>\r\n        {/* Build Generator Editor */}\r\n        <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n          <Card.Header>Build Generator</Card.Header>\r\n          <Card.Body>\r\n            <Row >\r\n              <Col xs={12} lg={6}>\r\n                {/* character selection */}\r\n                {characterKey ?\r\n                  <CharacterCard header={characterDropDown} characterKey={characterKey} bg={\"lightcontent\"} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => setshowCharacterModal(true) : undefined} /> :\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                    <Card.Header>\r\n                      {characterDropDown}\r\n                    </Card.Header>\r\n                  </Card>}\r\n                {/* Hit mode options */}\r\n                {characterSheet && character && initialStats && <HitModeCard build={initialStats} characterSheet={characterSheet} className=\"mb-2\" character={character} />}\r\n                {/* Final Stat Filter */}\r\n                {Boolean(statsDisplayKeys) && <StatFilterCard className=\"mb-2\" statFilters={statFilters} statKeys={statsDisplayKeys?.basicKeys as any} setStatFilters={sFs => buildSettingsDispatch({ statFilters: sFs })} />}\r\n              </Col>\r\n              <Col xs={12} lg={6}><Row>\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}><Card.Body>\r\n                    <Button className=\"w-100\" onClick={() => setshowArtCondModal(true)} disabled={generatingBuilds}>\r\n                      <span>Default Artifact Set Effects {Boolean(artifactCondCount) && <Badge variant=\"success\">{artifactCondCount} Selected</Badge>}</span>\r\n                    </Button>\r\n                  </Card.Body></Card>\r\n                </Col>\r\n                {/* Artifact set picker */}\r\n                {setFilters.map(({ key: setKey, num: setNum }: { key: ArtifactSetKey, num: number }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n                  <Card className=\"h-100\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                    <Card.Header>\r\n                      <ButtonGroup>\r\n                        {/* Artifact set */}\r\n                        <DropdownButton as={ButtonGroup} title={artifactSheets?.[setKey]?.name ?? \"Artifact Set Filter\"} disabled={generatingBuilds}>\r\n                          <Dropdown.Item onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: \"\" })}>Unselect Artifact</Dropdown.Item>\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(5, index)}\r\n                          <Dropdown.Divider />\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(4, index)}\r\n                          <Dropdown.Divider />\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(3, index)}\r\n                        </DropdownButton>\r\n                        {/* set number */}\r\n                        <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                          disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                        >\r\n                          {!!initialStats && Object.keys(artifactSheets?.[setKey]?.setEffects ?? {}).map((num: any) => {\r\n                            let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                            return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                              (<Dropdown.Item key={num} onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: setFilters[index].key, num: parseInt(num) })} >\r\n                                {`${num}-set`}\r\n                              </Dropdown.Item>)\r\n                          })}\r\n                        </DropdownButton>\r\n                      </ButtonGroup>\r\n                    </Card.Header>\r\n                    {setKey ? <Card.Body><Row className=\"mb-n2\">\r\n                      {!!initialStats && Object.keys(artifactSheets?.[setKey].setEffects ?? {}).map(setNKey => parseInt(setNKey) as SetNum).filter(setNkey => setNkey <= setNum).map(setNumKey =>\r\n                        <SetEffectDisplay newBuild={undefined} key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild: initialStats, characterDispatch, editable: true }} />)}\r\n                    </Row></Card.Body> : null}\r\n                  </Card>\r\n                </Col>)}\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}><Card.Body className=\"mb-n2\">\r\n                    <Button className=\"w-100 mb-2\" onClick={() => buildSettingsDispatch({ useEquippedArts: !useEquippedArts })} disabled={generatingBuilds}>\r\n                      <span><FontAwesomeIcon icon={useEquippedArts ? faCheckSquare : faSquare} /> Use Equipped Artifacts</span>\r\n                    </Button>\r\n                    <Button className=\"w-100 mb-2\" onClick={() => buildSettingsDispatch({ useLockedArts: !useLockedArts })} disabled={generatingBuilds}>\r\n                      <span><FontAwesomeIcon icon={useLockedArts ? faCheckSquare : faSquare} /> Use Locked Artifacts</span>\r\n                    </Button>\r\n                  </Card.Body></Card>\r\n                </Col>\r\n                {/* main stat selector */}\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                    <Card.Header>\r\n                      <Row>\r\n                        <Col>Artifact Main Stat</Col>\r\n                        <Col xs=\"auto\"><AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={v => buildSettingsDispatch({ mainStatAssumptionLevel: v })} /></Col>\r\n                      </Row>\r\n                    </Card.Header>\r\n                    <Card.Body className=\"mb-n2\">\r\n                      {artifactsSlotsToSelectMainStats.map((slotKey, index) =>\r\n                      (<div className=\"text-inline mb-1 d-flex justify-content-between\" key={slotKey}>\r\n                        <h6 className=\"d-inline mb-0\"><SlotNameWithIcon slotKey={slotKey} /></h6>\r\n                        <DropdownButton disabled={generatingBuilds} size=\"sm\"\r\n                          title={mainStatKeys[index] ? Stat.getStatNameWithPercent(mainStatKeys[index]) : \"Select a mainstat\"}\r\n                          className=\"d-inline\">\r\n                          <Dropdown.Item onClick={() => buildSettingsDispatch({ type: \"mainStatKey\", index, mainStatKey: \"\" })} >No MainStat</Dropdown.Item>\r\n                          {Artifact.slotMainStats(slotKey).map(mainStatKey =>\r\n                            <Dropdown.Item onClick={() => buildSettingsDispatch({ type: \"mainStatKey\", index, mainStatKey })} key={mainStatKey}>\r\n                              {Stat.getStatNameWithPercent(mainStatKey)}\r\n                            </Dropdown.Item>)}\r\n                        </DropdownButton>\r\n                      </div>))}\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row></Col>\r\n            </Row>\r\n            <Row className=\"mb-2\">\r\n              <Col>{!!characterKey && <BuildAlert {...{ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }} />}</Col>\r\n            </Row>\r\n            <Row className=\"d-flex justify-content-between\">\r\n              <Col xs=\"auto\" >\r\n                <ButtonGroup>\r\n                  <Button\r\n                    className=\"h-100\"\r\n                    disabled={!characterKey || generatingBuilds}\r\n                    variant={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                    onClick={generateBuilds}\r\n                  ><span>Generate Builds</span></Button>\r\n                  {totBuildNumber > warningBuildNumber && <OverlayTrigger\r\n                    overlay={<Tooltip id=\"turbo-tooltip\">\r\n                      <div>Dramatically speeds up build time.</div>\r\n                      <div>Yields only 1 build.</div>\r\n                      {Boolean(disabledTurbo) && <div className=\"mt-2\">Does not work with <b>{Boolean(ascending) ? 'min' : 'max'}imum</b> stat filter when sorting by <b>{Boolean(ascending) ? 'as' : 'des'}cending</b></div>}\r\n                    </Tooltip>}\r\n                  ><span >\r\n                      <Button variant=\"success\" disabled={disabledTurbo} className={`rounded-0 ${disabledTurbo ? \"cursor-pointer\" : \"\"}`} onClick={() => generateBuilds(true)}><strong>TURBO</strong></Button>\r\n                    </span></OverlayTrigger>}\r\n                  <Button\r\n                    className=\"h-100\"\r\n                    disabled={!generatingBuilds}\r\n                    variant=\"danger\"\r\n                    onClick={() => {\r\n                      if (!worker.current) return;\r\n                      worker.current.terminate();\r\n                      worker.current = null\r\n                      setgeneratingBuilds(false)\r\n                      setbuilds([])\r\n                      setgenerationDuration(0)\r\n                      setgenerationProgress(0)\r\n                      setgenerationSkipped(0)\r\n                    }}\r\n                  ><span>Cancel</span></Button>\r\n                </ButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                {/* Dropdown to select sorting value */}\r\n                {<ButtonGroup>\r\n                  <Dropdown as={ButtonGroup} drop=\"up\">\r\n                    <Dropdown.Toggle disabled={generatingBuilds} variant=\"light\" >\r\n                      <span>Optimization Target: {sortByText}</span>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu align=\"right\" style={{ minWidth: \"40rem\" }} >\r\n                      <Row>\r\n                        {!!statsDisplayKeys && Object.entries(statsDisplayKeys).map(([sectionKey, fields]: [string, any]) => {\r\n                          const header = (characterSheet && weaponSheet) ? Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, initialStats?.characterEle) : sectionKey\r\n                          return <Col xs={12} md={6} key={sectionKey}>\r\n                            <Dropdown.Header style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}><b>{header}</b></Dropdown.Header>\r\n                            {fields.map((target, i) => {\r\n                              if (Array.isArray(target))\r\n                                return <TargetSelectorDropdownItem key={i} {...{ target, buildSettingsDispatch, initialStats }} />\r\n                              else if (typeof target === \"string\")\r\n                                return <Dropdown.Item key={i} onClick={() => buildSettingsDispatch({ optimizationTarget: target })}>{Stat.getStatNamePretty(target)}</Dropdown.Item>\r\n                              return null\r\n                            })}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                  <Button onClick={() => buildSettingsDispatch({ ascending: !buildSettings.ascending })} disabled={generatingBuilds} variant={ascending ? \"danger\" : \"primary\"}>\r\n                    <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n                    <span>{ascending ? \"Ascending\" : \"Descending\"}</span>\r\n                  </Button>\r\n                </ButtonGroup >}\r\n              </Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-2\">\r\n      <Col>\r\n        <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>{characterKey ? <span>Showing <b>{builds.length}</b> Builds generated for {characterName}</span> : <span>Select a character to generate builds.</span>}</Col>\r\n              <Col xs=\"auto\">\r\n                <DropdownButton title={<span>Max builds to show: <b>{maxBuildsToShow}</b></span>} size=\"sm\">\r\n                  {maxBuildsToShowList.map(v => <Dropdown.Item key={v} onClick={() => setmaxBuildsToShow(v)}>{v}</Dropdown.Item>)}\r\n                </DropdownButton>\r\n              </Col>\r\n            </Row>\r\n          </Card.Header>\r\n          {/* Build List */}\r\n          <ListGroup>\r\n            {builds.map((build, index) =>\r\n              index < maxBuildsToShow && characterSheet && weaponSheet && <ArtifactDisplayItem characterSheet={characterSheet} weaponSheet={weaponSheet} build={build} characterKey={characterKey} index={index} key={index} statsDisplayKeys={statsDisplayKeys} onClick={() => setmodalBuild(build as any)} />\r\n            )}\r\n          </ListGroup>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </Container >\r\n}\r\n\r\nfunction TargetSelectorDropdownItem({ target, buildSettingsDispatch, initialStats }) {\r\n  const formula = usePromise(Formula.get(target))\r\n  if (!formula) return null\r\n  const talentField = (formula as any).field as IFieldDisplay\r\n  return <Dropdown.Item onClick={() => buildSettingsDispatch({ optimizationTarget: target })} style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n    <span className={`text-${Character.getTalentFieldValue(talentField, \"variant\", initialStats)}`}>{Character.getTalentFieldValue(talentField, \"text\", initialStats)}</span>\r\n  </Dropdown.Item>\r\n}\r\n\r\nfunction BuildModal({ build, showCharacterModal, characterKey, selectCharacter, setmodalBuild, setshowCharacterModal }) {\r\n  const closeModal = useCallback(() => {\r\n    setmodalBuild(null)\r\n    setshowCharacterModal(false)\r\n  }, [setmodalBuild, setshowCharacterModal])\r\n  return <Modal show={Boolean(showCharacterModal || build)} onHide={closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n    <React.Suspense fallback={<span>Loading...</span>}>\r\n      <CharacterDisplayCard\r\n        character={undefined}\r\n        tabName={undefined}\r\n        characterKey={characterKey}\r\n        setCharacterKey={cKey => selectCharacter(cKey)}\r\n        newBuild={build}\r\n        onClose={closeModal}\r\n        editable={showCharacterModal}\r\n        footer={<Button variant=\"danger\" onClick={closeModal}>Close</Button>} />\r\n    </React.Suspense>\r\n  </Modal>\r\n}\r\n\r\nfunction ArtConditionalModal({ showArtCondModal, setshowArtCondModal, initialStats, characterDispatch, artifactCondCount }) {\r\n  const closeArtCondModal = useCallback(() => setshowArtCondModal(false), [setshowArtCondModal])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n  if (!artifactSheets) return null\r\n  const artSetKeyList = ArtifactSheet.namesByMaxRarities(artifactSheets).flatMap(([, items]) => items.map(([key]) => [key, artifactSheets[key]] as const))\r\n  return <Modal show={showArtCondModal} onHide={closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <h5>Default Artifact Set Effects  {Boolean(artifactCondCount) && <Badge variant=\"success\">{artifactCondCount} Selected</Badge>}</h5>\r\n          </Col>\r\n          <Col xs=\"auto\" >\r\n            <Button onClick={() => {\r\n              if (initialStats.conditionalValues.artifact) initialStats.conditionalValues.artifact = {}\r\n              characterDispatch({ conditionalValues: initialStats.conditionalValues })\r\n            }}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={closeArtCondModal}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {artSetKeyList.map(([setKey, sheet]) => {\r\n            let icon = Object.values(sheet.slotIcons)[0]\r\n            let numStars = [...sheet.rarity][0]\r\n            return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                <Card.Header >\r\n                  <Row>\r\n                    <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                      <Image src={icon} className={`thumb-mid grad-${numStars}star m-1`} thumbnail />\r\n                    </Col>\r\n                    <Col >\r\n                      <h6><b>{artifactSheets?.[setKey].name ?? \"\"}</b></h6>\r\n                      <span><Stars stars={numStars} /></span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Header>\r\n                <Card.Body><Row className=\"mb-n2\">\r\n                  {Boolean(setKey) && Object.keys(sheet.setEffects).map(key => parseInt(key) as SetNum).map(setNumKey =>\r\n                    <SetEffectDisplay newBuild={undefined} key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild: initialStats, editable: true, characterDispatch, }} />)}\r\n                </Row></Card.Body>\r\n              </Card>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={closeArtCondModal}>\r\n          <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nfunction StatFilterItem({ statKey, statKeys = [], min, max, close, setFilter }: {\r\n  statKey?, statKeys, min, max, close, setFilter\r\n}) {\r\n  const isFloat = Stat.getStatUnit(statKey) === \"%\"\r\n  const inputProps = {\r\n    disabled: !statKey,\r\n    allowEmpty: true,\r\n    float: isFloat,\r\n  }\r\n  const minInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MIN\",\r\n    value: min,\r\n    onChange: (s) => setFilter(statKey, s, max)\r\n  }\r\n  const maxInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MAX\",\r\n    value: max,\r\n    onChange: (s) => setFilter(statKey, min, s)\r\n  }\r\n  return <InputGroup className=\"mb-2\">\r\n    <DropdownButton\r\n      as={InputGroup.Prepend}\r\n      title={Stat.getStatNamePretty(statKey, \"New Stat\")}\r\n      id=\"input-group-dropdown-1\"\r\n    >\r\n      {statKeys.map(sKey => <Dropdown.Item key={sKey} onClick={() => { close?.(); setFilter(sKey, min, max) }}>{Stat.getStatNamePretty(sKey)}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <CustomFormControl {...minInputProps} />\r\n    <CustomFormControl {...maxInputProps} />\r\n    {Boolean(close) && <InputGroup.Append>\r\n      <Button variant=\"danger\" onClick={close}><FontAwesomeIcon icon={faTrash} /></Button>\r\n    </InputGroup.Append>}\r\n  </InputGroup>\r\n}\r\n\r\nfunction HitModeCard({ characterSheet, character, build, className }: { characterSheet: CharacterSheet, character: ICharacter, build: ICalculatedStats, className: string }) {\r\n  const setHitmode = useCallback(({ hitMode }) => CharacterDatabase.update({ ...character, hitMode }), [character])\r\n  const setReactionMode = useCallback(({ reactionMode }) => CharacterDatabase.update({ ...character, reactionMode }), [character])\r\n  const setInfusionAura = useCallback(({ infusionAura }) => CharacterDatabase.update({ ...character, infusionAura }), [character])\r\n  if (!character) return null\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>Hit Mode Options</Col>\r\n        <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={setInfusionAura} /></Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"mb-n2\">\r\n      <HitModeToggle hitMode={character.hitMode} characterDispatch={setHitmode} className=\"w-100 mb-2\" />\r\n      <ReactionToggle build={build} character={character} characterDispatch={setReactionMode} className=\"w-100 mb-2\" />\r\n    </Card.Body>\r\n  </Card >\r\n}\r\n\r\nfunction StatFilterCard({ statKeys = [], statFilters = {}, setStatFilters, className }) {\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = (sKey, min, max) => setStatFilters({ ...statFilters, [sKey]: { min, max } })\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <Card.Header>Final Stat Filter</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-n2\">\r\n        {(Object.entries(statFilters) as [string, { min, max }][]).map(([statKey, { min, max }]) => {\r\n          return <Col xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} min={min} max={max} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Col>\r\n        })}\r\n        <Col xs={12}>\r\n          <StatFilterItem min={undefined} max={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} />\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype ArtifactDisplayItemProps = { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, index: number, characterKey: string, build: ICalculatedStats, statsDisplayKeys: any, onClick: () => void }\r\n//for displaying each artifact build\r\nfunction ArtifactDisplayItem({ characterSheet, weaponSheet, index, characterKey, build, statsDisplayKeys, onClick }: ArtifactDisplayItemProps) {\r\n  const sheets = usePromise(ArtifactSheet.getAll())\r\n  const character = CharacterDatabase.get(characterKey)\r\n  if (!character) return null\r\n  return (<div>\r\n    <ListGroup.Item\r\n      variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n      onClick={onClick}\r\n    >\r\n      <h5>{(Object.entries(build.setToSlots) as [ArtifactSetKey, SlotKey[]][]).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n        <Badge key={key} variant=\"primary\" className=\"mr-2\">\r\n          {slotarr.map(slotKey => artifactSlotIcon(slotKey))} {sheets?.[key].name ?? \"\"}\r\n        </Badge>\r\n      )}</h5>\r\n      <StatDisplayComponent editable={false} {...{ characterSheet, weaponSheet, character, newBuild: build, statsDisplayKeys, cardbg: (index % 2 ? \"lightcontent\" : \"darkcontent\") }} />\r\n    </ListGroup.Item>\r\n  </div>)\r\n}\r\n\r\nfunction BuildAlert({ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }) {\r\n  const totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n  const totalUnskipped = totBuildNumber - generationSkipped\r\n  const generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n  const generationSkippedString = generationSkipped?.toLocaleString() ?? generationSkipped\r\n  const totalUnskippedString = totalUnskipped?.toLocaleString() ?? totalUnskipped\r\n  const generationSkippedText = Boolean(generationSkipped) && <span>(<b>{generationSkippedString}</b> skipped)</span>\r\n  if (generatingBuilds) {\r\n    let progPercent = generationProgress * 100 / (totalUnskipped)\r\n    return <Alert variant=\"success\">\r\n      <span>Generating and testing <b className=\"text-monospace\">{generationProgressString}/{totalUnskippedString}</b> build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span><br />\r\n      <h6>Time elapsed: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n      <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n    </Alert>\r\n  } else if (!generatingBuilds && generationProgress) {//done\r\n    return <Alert variant=\"success\">\r\n      <span>Generated and tested <b className=\"text-monospace\">{totalUnskippedString}</b> Build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span>\r\n      <h6>Total duration: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n      <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n    </Alert>\r\n  } else {\r\n    return totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/unlock more Artifacts.</span></Alert>\r\n      : (totBuildNumber > warningBuildNumber ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite a while to generate...</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n  }\r\n}\r\n\r\nconst levels = {\r\n  0: <span>No level assumption</span>,\r\n  4: <span>Assume at least level 4</span>,\r\n  8: <span>Assume at least level 8</span>,\r\n  12: <span>Assume at least level 12</span>,\r\n  16: <span>Assume at least level 16</span>,\r\n  20: <span>Assume at least level 20</span>\r\n}\r\nfunction AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel }) {\r\n  return <OverlayTrigger overlay={<Tooltip id=\"assume-level-tooltip\">Change Main Stat value to be at least a specific level. Does not change substats.</Tooltip>}  >\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant={mainStatAssumptionLevel ? \"orange\" : \"primary\"}>{levels[mainStatAssumptionLevel]}</Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {Object.entries(levels).map(([key, text]) => <Dropdown.Item key={key} onClick={() => setmainStatAssumptionLevel(parseInt(key))}>{text}</Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  </OverlayTrigger>\r\n}\r\n"],"sourceRoot":""}