{"version":3,"sources":["Components/StarDisplay.tsx","Character/Character.ts","StatDependency.ts","Assets/Weapon-class-bow-icon.png","Assets/Assets.ts","Assets/Weapon-class-catalyst-icon.png","Assets/Weapon-class-claymore-icon.png","Assets/Weapon-class-polearm-icon.png","Assets/Weapon-class-sword-icon.png","Assets/Item_Fragile_Resin.png","Assets/Item_Condensed_Resin.png","Assets/Item_Wanderer's_Advice.png","Assets/Item_Hero's_Wit.png","Assets/Item_Adventurer's_Experience.png","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","Components/InfoComponent.tsx","Character/CharacterCard.tsx"],"names":["StarIcon","icon","faStar","Stars","stars","colored","className","Array","keys","map","_","i","Character","this","Error","getElementalName","elementalKey","ElementalData","name","getLevelString","character","level","ascensionMaxLevel","ascension","getTalentFieldValue","field","key","stats","defVal","evalIfFunc","hasOverride","statKey","baseStatOverrides","getBaseStatValue","characetSheet","weaponSheet","includes","characterStatBase","getStatValueWithOverride","characterSheet","calculateBuild","artifactSheets","artifacts","mainStatAssumptionLevel","Object","fromEntries","art","equippedArtifacts","entries","artid","database","_getArt","initialStats","createInitialStats","calculateBuildwithArtifact","setToSlots","Artifact","artifactSetEffectsStats","ArtifactSheet","setEffectsStats","deepClone","values","forEach","mainStatKey","mainStatValue","numStars","Math","max","min","substats","substat","value","mergeStats","Conditional","parseConditionalValues","artifact","conditionalValues","conditional","conditionalValue","setKey","setNumKey","parseInt","length","condStats","resolve","val","id","dependencies","GetDependencies","modifiers","PreprocessFormulas","preprocessedStats","formula","characterKey","elementKey","hitMode","infusionAura","reactionMode","talentLevelKeys","constellation","weapon","statKeys","characterHP","getBase","characterDEF","characterATK","characterLevel","characterEle","weaponType","weaponTypeKey","tlvl","allElements","eleKey","overrides","hasOwnProperty","specialStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","getTalentStatsAll","s","weaponATK","getMainStatValue","weaponSubKey","getSubStatKey","getSubStatValue","weaponCond","otherCond","canShow","getDisplayStatKeys","basicKeys","isAutoElemental","push","transReactions","ElementToReactionKeys","charFormulas","talentSheet","getTalent","addFormula","fields","parseSection","section","sheets","talentKey","sections","formKey","document","num","artifactSheet","setEffects","setNum","GetFormulaDependency","dependency","Set","Proxy","get","target","prop","receiver","add","toString","formulaKeyDependency","freeze","Formulas","baseStat","StatData","found","InsertDependencies","flatMap","dep","has","k","path","Formula","getCurrent","getStage","Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","_objectWithoutProperties","source","excluded","sourceKeys","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","InfoComponent","pageKey","text","modalTitle","children","useState","dbStorage","showInfoModal","setshowInfoModal","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","set","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","onClick","faTimes","Body","fallback","animation","Footer","ns","key18","faQuestionCircle","CharacterCard","onEdit","onDelete","cardClassName","header","footer","undefined","databaseCharacter","updateDatabaseCharacter","useEffect","followChar","usePromise","getAll","CharacterSheet","WeaponSheet","useMemo","weaponName","weaponMainVal","toFixed","Stat","fixedUnit","weaponSubVal","weaponLevelName","weaponPassiveName","passiveName","faEdit","faTrashAlt","src","thumbImg","star","thumbnail","auto","skill","burst","StatIcon","refineIndex","getStatName","getStatUnit","arr","artifactSetName","highestNum","unit","statVal","as","Link","to","pathname","faCalculator","faLink"],"mappings":"kMAIMA,EAAW,kBAAM,cAAC,IAAD,CAAiBC,KAAMC,OACxCC,EAAQ,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,eAAV,gBAAsE,sBAAMC,UAAWD,EAAU,aAAe,GAA1C,SACjFD,EAAQ,YAAIG,MAAMH,GAAOI,QAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAU,cAACX,EAAD,GAAeW,MAAS,S,mNCYrDC,EAEnB,aAAgB,GAAD,oBAAKC,gBAAgBD,EAAW,MAAME,MAAM,2CAFxCF,EAIZG,iBAAmB,SAACC,GAAD,OACxBC,IAAcD,GAAcE,MALXN,EAMZO,eAAiB,SAACC,GAAD,gBACnBA,EAAUC,MADS,YACAC,IAAkBF,EAAUG,aAPjCX,EASZY,oBAAsB,SAACC,EAAsBC,GAA4D,IAAlCC,EAAiC,uDAAzB,GAAIC,EAAqB,uDAAZ,GACjG,OAAKH,EAAMC,GACJG,YAAWJ,EAAMC,GAAaC,GADbC,GAVPhB,EAcZkB,YAAc,SAACV,EAAuBW,GAC3C,MAAgB,YAAZA,EACKnB,EAAUkB,YAAYV,EAAW,OAASR,EAAUkB,YAAYV,EAAW,QAAUR,EAAUkB,YAAYV,EAAW,eAC/G,aAAZW,EACKnB,EAAUkB,YAAYV,EAAW,QAAUR,EAAUkB,YAAYV,EAAW,SAAWR,EAAUkB,YAAYV,EAAW,gBACjH,aAAZW,EACKnB,EAAUkB,YAAYV,EAAW,QAAUR,EAAUkB,YAAYV,EAAW,SAAWR,EAAUkB,YAAYV,EAAW,mBACjH,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWY,oBAAqBD,KAAWX,EAAUY,mBArB3CpB,EAwBZqB,iBAAmB,SAACb,EAAuBc,EAA+BC,EAA0BJ,GACzG,MAAgB,eAAZA,EAAiCX,EAAUC,MAC3CU,EAAQK,SAAS,aAAqB,GACtCL,KAAWM,IAA0BA,IAAkBN,GACpD,GA5BUnB,EA8BZ0B,yBAA2B,SAAClB,EAAuBmB,EAAgCJ,EAA0BJ,GAAqB,IAAD,IACtI,OAAInB,EAAUkB,YAAYV,EAAWW,GAAU,oBAAOX,EAAUY,yBAAjB,aAAO,EAA8BD,UAArC,QAAiD,EACpFnB,EAAUqB,iBAAiBb,EAAWmB,EAAgBJ,EAAaJ,IAhC9DnB,EAmCZ4B,eAAiB,SAACpB,EAAuBmB,EAAgCJ,EAA0BM,GAA8G,IAClNC,EAD+JC,EAAkD,uDAAxB,EAEzLvB,EAAUsB,UACZA,EAAYE,OAAOC,YAAYzB,EAAUsB,UAAUjC,KAAI,SAACqC,EAAKnC,GAAN,MAAY,CAACA,EAAGmC,OAChE1B,EAAU2B,oBACjBL,EAAYE,OAAOC,YAAYD,OAAOI,QAAQ5B,EAAU2B,mBAAmBtC,KAAI,mCAAEiB,EAAF,KAAOuB,EAAP,WAAkB,CAACvB,EAAKwB,IAASC,QAAQF,SAC1H,IAAMG,EAAexC,EAAUyC,mBAAmBjC,EAAWmB,EAAgBJ,GAE7E,OADAiB,EAAaT,wBAA0BA,EAChC/B,EAAU0C,2BAA2BF,EAAcV,EAAWD,IA3CpD7B,EA8CZ0C,2BAA6B,SAACF,EAAgCV,EAAqCD,GAAiF,IAAD,EAClLc,EAAaC,IAASD,WAAWb,GACjCe,EAA0BC,IAAcC,gBAAgBlB,EAAgBW,EAAcG,GAExF5B,EAAQiC,YAAUR,GAEtBR,OAAOiB,OAAOnB,GAAWoB,SAAQ,SAAAhB,GAC1BA,IAELnB,EAAMmB,EAAIiB,cAAgBpC,EAAMmB,EAAIiB,cAAgB,GAAKP,IAASQ,cAAclB,EAAIiB,YAAajB,EAAImB,SAAUC,KAAKC,IAAID,KAAKE,IAAIzC,EAAMgB,wBAAwC,EAAfG,EAAImB,UAAenB,EAAIzB,QAEvLyB,EAAIuB,SAASP,SAAQ,SAACQ,GAAD,OACnBA,GAAWA,EAAQ5C,MAAQC,EAAM2C,EAAQ5C,MAAQC,EAAM2C,EAAQ5C,MAAQ,GAAK4C,EAAQC,cAGxFC,YAAW7C,EAAO8B,GAElBgB,IAAYC,uBAAuB,CAAEC,SAAQ,OAAEhD,QAAF,IAAEA,GAAF,UAAEA,EAAOiD,yBAAT,aAAE,EAA0BD,WAAY,SAACE,EAAaC,EAAd,GAA2D,IAAD,uBAAvBC,EAAuB,KAAfC,EAAe,KAC7I,KAAIC,SAASD,IAAT,iBAAuBzB,QAAvB,IAAuBA,GAAvB,UAAuBA,EAAawB,UAApC,aAAuB,EAAsBG,cAA7C,QAAuD,IAA3D,CAD6I,IAE9HC,EAAcV,IAAYW,QAAQP,EAAalD,EAAOmD,GAA7DnD,MACR6C,YAAW7C,EAAOwD,OAGpBxD,EAAMoB,kBAAoBH,OAAOC,YAAYD,OAAOI,QAAQN,GAAWjC,KAAI,mCAAEiB,EAAF,KAAO2D,EAAP,WAAqB,CAAC3D,EAAD,OAAM2D,QAAN,IAAMA,OAAN,EAAMA,EAAKC,QAC3G3D,EAAM4B,WAAaA,EACnB,IAAIgC,EAAeC,YAAgB7D,EAAD,OAAQA,QAAR,IAAQA,OAAR,EAAQA,EAAO8D,WAzBuI,EA0BnIC,YAAmBH,EAAc5D,GAAhEgE,EA1BkK,EA0BhLvC,aAER,OADAwC,EA3BwL,EA0B/IA,SACjCD,GACD,2BAAKhE,GAAUgE,IA1EL/E,EA6EZyC,mBAAqB,SAACjC,EAAuBmB,EAAgCJ,GAAgD,IAAD,QACjIf,EAAYwC,YAAUxC,GACdyE,EAFyH,EAEzHA,aAAcC,EAF2G,EAE3GA,WAAYzE,EAF+F,EAE/FA,MAAOE,EAFwF,EAExFA,UAAWwE,EAF6E,EAE7EA,QAASC,EAFoE,EAEpEA,aAAcC,EAFsD,EAEtDA,aAAcC,EAFwC,EAExCA,gBAAiBC,EAFuB,EAEvBA,cAAepD,EAFQ,EAERA,kBAFQ,IAEW6B,yBAFX,MAE+B,GAF/B,EAEmCwB,EAFnC,EAEmCA,OAG9JC,EAAQ,CAAI,cAAJ,mBAAqBzD,OAAOpC,KAAK6B,OACzCe,EAAeR,OAAOC,YAAYwD,EAAS5F,KAAI,SAAAiB,GAAG,MAAI,CAACA,EAAKd,EAAU0B,yBAAyBlB,EAAWmB,EAAgBJ,EAAaT,QAC7I0B,EAAakD,YAAc/D,EAAegE,QAAQ,KAAMlF,EAAOE,GAC/D6B,EAAaoD,aAAejE,EAAegE,QAAQ,MAAOlF,EAAOE,GACjE6B,EAAaqD,aAAelE,EAAegE,QAAQ,MAAOlF,EAAOE,GACjE6B,EAAasD,eAAiBrF,EAC9B+B,EAAauD,aAAb,oBAA4BpE,EAAeuD,kBAA3C,QAAyDA,SAAzD,QAAuE,QACvE1C,EAAayC,aAAeA,EAC5BzC,EAAa2C,QAAUA,EACvB3C,EAAa4C,aAAeA,EAC5B5C,EAAa6C,aAAeA,EAC5B7C,EAAawB,kBAAoBA,EACjCxB,EAAawD,WAAarE,EAAesE,cACzCzD,EAAa0D,KAAOZ,EACpB9C,EAAa+C,cAAgBA,EAC7B/C,EAAa7B,UAAYA,EACzB6B,EAAagD,OAASxC,YAAUwC,GAChChD,EAAaL,kBAAoBA,EAGjC,CAAC,YAAD,mBAAgBgE,MAAajD,SAAQ,SAAAkD,GACnC,IAAIjF,EAAO,UAAMiF,EAAN,cACX5D,EAAarB,GAAWnB,EAAU0B,yBAAyBlB,EAAWmB,EAAgBJ,EAAaJ,GACnGA,EAAO,UAAMiF,EAAN,kBACP5D,EAAarB,GAAWnB,EAAU0B,yBAAyBlB,EAAWmB,EAAgBJ,EAAaJ,MAIrG,IAAIkF,GAAqB,QAAT,EAAA7F,SAAA,eAAWY,oBAAqB,GAChDY,OAAOI,QAAQiE,GAAWnD,SAAQ,YAA0B,IAAD,mBAAvB/B,EAAuB,KAAdsD,EAAc,KACpDjC,EAAa8D,eAAenF,KAAUqB,EAAarB,GAAWsD,MAIrE,IAAM8B,EAAiB5E,EAAe6E,mBAAmB7F,GACzD,GAAI4F,EAAgB,CAClB,IAAME,EAAqB9E,EAAe+E,sBAAsB/F,GAChEiD,YAAWpB,EAAD,eAAkB+D,EAAiBE,IAO/C,IAAK,IAAM3F,KAHXa,EAAegF,kBAAkBnE,EAAkCA,EAAauD,cAAc7C,SAAQ,SAAA0D,GAAC,OAAIhD,YAAWpB,EAAcoE,MAGlHpE,EAAa0D,KAA/B,OACE1D,EAAa0D,KAAKpF,IAAlB,UAA0B0B,EAAa,GAAD,OAAI1B,EAAJ,iBAAtC,QAAyD,EAG3D,IAAM+F,EAAYtF,EAAYuF,iBAAiBtB,EAAO/E,MAAO+E,EAAO7E,WACpE6B,EAAaqE,UAAYA,EACzB,IAAME,EAAexF,EAAYyF,gBAC7BD,GAAcnD,YAAWpB,EAAD,eAAkBuE,EAAexF,EAAY0F,gBAAgBzB,EAAO/E,MAAO+E,EAAO7E,aAC9GiD,YAAWpB,EAAcjB,EAAYR,MAAMyB,IAI0BwB,EAA7DD,SA7DyH,IA6DzFmD,EAA6BlD,EAArCwB,OAAuB2B,EA7D0E,YA6D5DnD,EA7D4D,uBAsEjI,OANAH,IAAYC,uBAAZ,2BAAwC0B,EAAO1E,KAAO,CAAE0E,OAAO,eAAIA,EAAO1E,IAAZ,OAAkBoG,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAa1B,EAAO1E,QAAaqG,IAAa,SAAClD,EAAaC,EAAkBtE,GAC5J,IAAgB,cAAZA,EAAK,IAAkC,YAAZA,EAAK,IAAoBA,EAAK,KAAOsF,IAC/DrB,IAAYuD,QAAQnD,EAAazB,GAAtC,CAFqK,IAGtJ+B,EAAcV,IAAYW,QAAQP,EAAazB,EAAc0B,GAApEnD,MACR6C,YAAWpB,EAAc+B,OAEpB/B,GAnJUxC,EAsJZqH,mBAAqB,SAACtG,EAAD,GAAwM,IAA5KY,EAA2K,EAA3KA,eAAgBJ,EAA2J,EAA3JA,YAAaM,EAA8I,EAA9IA,eAC7EuE,EAASrF,EAAMgF,aACfuB,EAAY,CAAC,UAAW,WAAY,WAAY,SAAU,YAAa,WAAY,QAAS,YAAhF,UAAgGlB,EAAhG,UACMzE,EAAe4F,iBACjBD,EAAUE,KAAK,iBAGrC,IAAMC,EAAiBzE,YAAU0E,IAAsBtB,IACjDH,EAAgBtE,EAAesE,cAChCwB,EAAejG,SAAS,kBAAsC,aAAlByE,GAA8BwB,EAAeD,KAAK,iBACnG,IAAMG,EAAe,GACfC,EAAcjG,EAAekG,UAAUzB,GACvC0B,EAAa,SAACC,EAAQjH,GAAT,OAAiBiH,EAAO7E,SAAQ,SAAArC,GAAU,IAAD,EACrDA,EAAMmE,UAAW,OAACnE,QAAD,IAACA,GAAD,UAACA,EAAOuG,eAAR,aAAC,OAAAvG,EAAiBE,MACnC4G,EAAa7G,KAAM6G,EAAa7G,GAAO,IAC5C6G,EAAa7G,GAAK0G,KAAM3G,EAAMmE,QAAgBpF,WAE1CoI,EAAe,SAACC,EAASnH,GAE7B,GAAImH,EAAQhE,aAAeJ,IAAYuD,QAAQa,EAAQhE,YAAalD,GAAQ,CAAC,IACnEgH,EAA8ClE,IAAYW,QAAQyD,EAAQhE,YAAalD,EAAO,MAA9FgH,OACRA,GAAUD,EAAWC,EAAQjH,GAG3BmH,EAAQF,QAAQD,EAAWG,EAAQF,OAAQjH,IAEjD8G,GAAe5F,OAAOI,QAAQwF,EAAYM,QAAQhF,SAAQ,YAAgC,IAAD,mBAA7BiF,EAA6B,KAAhBC,EAAgB,KAAhBA,SACrD,WAAdD,GAAwC,YAAdA,GAAyC,aAAdA,IAA0BA,EAAY,QAC/FC,EAASlF,SAAQ,SAAA+E,GAAO,OAAID,EAAaC,EAAD,oBAAuBE,UAGjE,IAAME,EAAO,iBAAatH,EAAMyE,OAAO1E,KAYvC,OAXAS,EAAY+G,UAAY/G,EAAY+G,SAASzI,KAAI,SAAAoI,GAAO,OAAID,EAAaC,EAASI,MAElFtH,EAAM4B,YAAcX,OAAOI,QAAQrB,EAAM4B,YAAY9C,KAAI,yCAAqB,CAArB,UAAoCyE,WAASpB,SAAQ,YAAoB,IAAD,mBAAjBiB,EAAiB,KAAToE,EAAS,KACzHC,EAAgB3G,EAAesC,GAChCqE,GACLxG,OAAOI,QAAQoG,EAAcC,YAAYvF,SAAQ,YAA6B,IAAD,mBAA1BwF,EAA0B,KAAhBJ,EAAgB,KAAhBA,SACvDC,EAAMlE,SAASqE,IACnBJ,GAAYA,EAASzI,KAAI,SAAAoI,GAAO,OAAID,EAAaC,EAAD,mBAAsB9D,EAAtB,YAAgCuE,aAI7E,yBAAEpB,aAAcK,GAAvB,IAAqCF,qB,sGC7MzC,SAASkB,EAAqB3D,GAC5B,IAAM4D,EAA0B,IAAIC,IAEpC,OADA7D,EAAQ,IAAI8D,MAAM,GAAI,CAAEC,IAAK,SAACC,EAAQC,EAAMC,GAAeN,EAAWO,IAAIF,EAAKG,gBACxE,YAAIR,GAEb,IAAMS,EAAuBrH,OAAOsH,OAAOtH,OAAOC,YAChDD,OAAOI,QAAQmH,KAAU1J,KAAI,yCAAkB,CAAlB,KAAwB8I,EAAxB,YAkB/B,SAAS/D,EAAgB4E,GAA4F,IAAvE3E,EAAsE,uDAAhD,GAAIjF,EAA4C,uDAArCoC,OAAOpC,KAAK6J,KACnFC,EAAQ,IAAIb,IACZlE,EAAe,CAAC,IAAIkE,IAAe,IAAIA,KAE7C,OADAjJ,EAAKsD,SAAQ,SAAApC,GAAG,OAAI6I,EAAmBH,EAAU1I,EAAK+D,EAAWF,EAAc+E,MACxE/E,EAAaiF,SAAQ,SAAAC,GAAG,mBAAQA,MAEzC,SAASF,EAAmBH,EAAqB1I,EAAa+D,EAAqBF,EAA6B+E,GAAqB,IAAD,IAC9HA,EAAMI,IAAIhJ,KACd4I,EAAMP,IAAIrI,GAEV,UAAAuI,EAAqBvI,UAArB,SAA2BoC,SAAQ,SAAA6G,GAAC,OAAIJ,EAAmBH,EAAUO,EAAGlF,EAAWF,EAAc+E,OACjG,UAAC7E,EAAU/D,UAAX,QAAmB,IAAIoC,SAAQ,SAAA8G,GAAI,OAAIC,IAAQC,WAAWF,EAAMR,GAAU,GAAGtG,SAAQ,SAAA6G,GAAC,OACpFJ,EAAmBH,EAAUO,EAAGlF,EAAWF,EAAc+E,SAC3D/E,EAAawF,YAASrJ,IAAMqI,IAAIrI,M,iCC3CnB,ICcTsJ,EAAS,CACbC,YAAa,CAAEC,IDfF,IAA0B,kDCenBC,SCfP,IAA0B,uDDeTC,SEfjB,IAA0B,uDFeCC,QGf3B,IAA0B,sDHeUC,MIfpC,IAA0B,qDJgBvCC,MAAO,CACLC,QKjBW,IAA0B,+CLkBrCC,UMlBW,IAA0B,kDNoBvCC,UAAW,CACTC,OOrBW,IAA0B,mDPsBrCC,IQtBW,IAA0B,4CRuBrCC,WSvBW,IAA0B,2DT0B1Bb,O,iCUzBA,SAASc,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIrK,EAAKf,EADLiJ,ECHS,SAAuCmC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIrK,EAAKf,EAFLiJ,EAAS,GACTqC,EAAarJ,OAAOpC,KAAKuL,GAG7B,IAAKpL,EAAI,EAAGA,EAAIsL,EAAW/G,OAAQvE,IACjCe,EAAMuK,EAAWtL,GACbqL,EAASE,QAAQxK,IAAQ,IAC7BkI,EAAOlI,GAAOqK,EAAOrK,IAGvB,OAAOkI,EDTM,CAA6BmC,EAAQC,GAGlD,GAAIpJ,OAAOuJ,sBAAuB,CAChC,IAAIC,EAAmBxJ,OAAOuJ,sBAAsBJ,GAEpD,IAAKpL,EAAI,EAAGA,EAAIyL,EAAiBlH,OAAQvE,IACvCe,EAAM0K,EAAiBzL,GACnBqL,EAASE,QAAQxK,IAAQ,GACxBkB,OAAOyJ,UAAUC,qBAAqBC,KAAKR,EAAQrK,KACxDkI,EAAOlI,GAAOqK,EAAOrK,IAIzB,OAAOkI,E,2NETM,SAAS4C,EAAT,GAAwL,IAAD,QAA9JC,eAA8J,MAApJ,GAAoJ,MAAhJC,YAAgJ,MAAzI,GAAyI,MAArIC,kBAAqI,MAAxH,GAAwH,EAApHC,EAAoH,EAApHA,SAAoH,EAC1JC,mBAAQ,oBAACC,IAAUnD,IAAI,oBAAf,aAAC,EAA6B8C,UAA9B,UADkJ,mBAC7LM,EAD6L,KAC9KC,EAD8K,OAE7KH,mBAAStM,MAAM0M,QAAQP,GAAQQ,YAA0BR,GAAQA,GAAjFS,EAF6L,oBAG9LC,EAAa,WAAO,IAAD,EACjBC,EAAS,UAAGP,IAAUnD,IAAI,oBAAjB,QAAiC,GAChD0D,EAAUZ,IAAW,EACrBK,IAAUQ,IAAI,YAAaD,GAC3BL,GAAiB,IAEnB,OAAO,qCACL,cAAC,IAAD,CAAOO,KAAMR,EAAeS,OAAQ,kBAAMJ,KAAcK,KAAK,KAAKC,QAAQ,UAAUC,iBAAiB,iBAArG,SACE,eAAC,IAAD,CAAMC,GAAG,cAAclB,KAAM,YAA7B,UACE,cAAC,IAAKmB,OAAN,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAKC,MAAN,UAAanB,MAEf,cAAC,IAAD,CAAKoB,GAAG,OAAR,SACE,cAAC,IAAD,CAAQL,QAAQ,SAASM,QAAS,kBAAMZ,KAAxC,SACE,cAAC,IAAD,CAAiBnN,KAAMgO,eAI/B,cAAC,IAAKC,KAAN,UACE,cAAC,WAAD,CAAUC,SAAU,qBAAI7N,UAAU,cAAd,wBAAuC,cAAC,IAAD,CAAS8N,UAAU,SAASV,QAAQ,eAA/F,SACGd,MAGL,cAAC,IAAKyB,OAAN,UACE,cAAC,IAAD,CAAQX,QAAQ,SAASM,QAAS,kBAAMZ,KAAxC,SACE,kDAKR,cAAC,IAAD,CAAMQ,GAAG,eAAelB,KAAM,YAAoBpM,UAAU,OAA5D,SACE,cAAC,IAAK4N,KAAN,CAAW5N,UAAU,iBAArB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UAAK,gCAAQ6M,MACb,cAAC,IAAD,CAAKY,GAAG,OAAR,SACE,eAAC,IAAD,CAAQN,KAAK,KAAKC,QAAQ,OAAOpN,UAAU,WAAW0N,QAAS,kBAAMhB,GAAiB,IAAtF,UAA6F,cAAC,IAAD,CAAcsB,GAAG,KAAKC,MAAM,SAAzH,IAAmI,cAAC,IAAD,CAAiBtO,KAAMuO,uB,uQC1BvJ,SAASC,EAAT,GAAqI,IAAD,EAA3G5I,EAA2G,EAA3GA,aAAc6I,EAA6F,EAA7FA,OAAQC,EAAqF,EAArFA,SAAqF,IAA3EC,qBAA2E,MAA3D,GAA2D,MAAvDhB,UAAuD,MAAlD,GAAkD,EAA9CiB,EAA8C,EAA9CA,OAA8C,IAAtCC,cAAsC,WAC5FjC,wBAASkC,GADmF,mBAC1IC,EAD0I,KACvHC,EADuH,KAEjJC,qBAAU,kBACRrJ,EAAe3C,IAASiM,WAAWtJ,EAAcoJ,QAA2BF,IAC5E,CAAClJ,EAAcoJ,IAEjB,IAAMxM,EAAiB2M,YAAW1L,IAAc2L,SAAU,IACpDjO,EAAY4N,EACZzM,EAAiB6M,YAAWE,IAAe3F,IAAI9D,GAAe,CAACA,IAC/D1D,EAAciN,YAAWhO,GAAamO,IAAY5F,IAAIvI,EAAUgF,OAAO1E,KAAM,CAACN,IAC9EO,EAAQ6N,mBAAQ,kBAAMpO,GAAamB,GAAkBJ,GAAeM,GAAkB7B,IAAU4B,eAAepB,EAAWmB,EAAgBJ,EAAaM,KAAiB,CAACrB,EAAWmB,EAAgBJ,EAAaM,IACvN,IAAKrB,IAAcmB,IAAmBJ,IAAgBR,EAAO,OAAO,KAX6E,IAazIyE,EAA0BhF,EAA1BgF,OAAQD,EAAkB/E,EAAlB+E,cACR9E,EAAqB+E,EAArB/E,MAAOE,EAAc6E,EAAd7E,UACPuF,EAASnF,EAATmF,KACF5F,EAAOqB,EAAerB,KACtB4E,EAAanE,EAAMgF,aACnBE,EAAgBtE,EAAesE,cAC/B4I,EAAU,OAAGtN,QAAH,IAAGA,OAAH,EAAGA,EAAajB,KAC1BwO,EAAgBvN,EAAYuF,iBAAiBrG,EAAOE,GAAWoO,QAAQC,IAAKC,UAAU,QACtFlI,GAAexF,EAAYyF,gBAC3BkI,GAAe3N,EAAY0F,gBAAgBxG,EAAOE,GAAWoO,QAAQC,IAAKC,UAAUlI,KACpFoI,GAAkBR,IAAYpO,eAAeiF,GAC7C4J,GAAiB,OAAG7N,QAAH,IAAGA,OAAH,EAAGA,EAAa8N,YAGvC,OAAQ,eAAC,IAAD,CAAM3P,UAAWsO,EAAehB,GAAIA,GAAU,cAAelB,KAAM,YAAnE,UACN,cAAC,IAAKmB,OAAN,CAAavN,UAAU,OAAvB,SACE,eAAC,IAAD,CAAKA,UAAU,aAAf,UACE,cAAC,IAAD,UACGuO,GAAkB,6BAAI,4BAAI3N,QAE7B,cAAC,IAAD,CAAK6M,GAAI,OAAT,SACE,uBAAMzN,UAAU,6BAAhB,UACGoO,GAAU,cAAC,IAAD,CAAQhB,QAAQ,UAAUD,KAAK,KAAKnN,UAAU,OACvD0N,QAAS,kBAAMU,EAAO7I,IADb,SAET,cAAC,IAAD,CAAiB5F,KAAMiQ,QAExBvB,GAAY,cAAC,IAAD,CAAQjB,QAAQ,SAASD,KAAK,KACzCO,QAAS,kBAAMW,EAAS9I,IADb,SAEX,cAAC,IAAD,CAAiB5F,KAAMkQ,kBAMjC,eAAC,IAAKjC,KAAN,CAAWF,QAAS,yBAAMU,QAAN,IAAMA,OAAN,EAAMA,EAAS7I,IAAevF,UAAWoO,EAAS,iBAAmB,GAAzF,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKX,GAAG,OAAOzN,UAAU,OAAzB,SACE,cAAC,IAAD,CAAO8P,IAAK7N,EAAe8N,SAAU/P,UAAS,yBAAoBiC,EAAe+N,KAAnC,YAAmDC,WAAS,MAE5G,eAAC,IAAD,WACE,qBAAIjQ,UAAU,OAAd,iBAA0BM,IAAUO,eAAeC,GAAnD,eAAoE+E,MACpE,qBAAI7F,UAAU,OAAd,UACE,cAAC,IAAD,CAAOoN,QAAQ,YAAf,SAA2B,wBAAQpN,UAAU,OAAlB,SAA0BwG,EAAK0J,KAAO,MADnE,IAEE,cAAC,IAAD,CAAO9C,QAAQ,YAAf,SAA2B,wBAAQpN,UAAU,OAAlB,SAA0BwG,EAAK2J,MAAQ,MAFpE,IAGE,cAAC,IAAD,CAAO/C,QAAQ,YAAf,SAA2B,wBAAQpN,UAAU,OAAlB,SAA0BwG,EAAK4J,MAAQ,SAEpE,oBAAIpQ,UAAU,OAAd,SAAqB,cAAC,IAAD,CAAOF,MAAOmC,EAAe+N,KAAMjQ,SAAO,MAC/D,qBAAIC,UAAU,OAAd,UAAsBqQ,IAAS7K,GAA/B,IAA4C,cAAC,IAAD,CAAOsK,IAAG,UAAEpF,IAAOC,mBAAT,aAAE,EAAqBpE,GAAgBvG,UAAU,yBAG3G,cAAC,IAAD,CAAKA,UAAU,OAAf,SACE,eAAC,IAAD,WACE,qBAAIA,UAAU,OAAd,UAAsBmP,EAAYO,IAAqB,cAAC,IAAD,CAAOtC,QAAQ,OAAOpN,UAAU,OAAhC,SAAwC8F,EAAOwK,YAAc,IAApH,IAAiIb,MACjI,yCAAYL,EAAZ,KAA6BM,IAAqB,iCAAOJ,IAAKiB,YAAYlJ,IAAxB,KAAyCmI,GAAcF,IAAKkB,YAAYnJ,eAG9H,cAAC,IAAD,UACE,cAAC,IAAD,UACGlF,GAAkBG,OAAOI,QAAQU,IAAc2F,WAAW5G,EAAgBd,EAAM4B,aAAa9C,KAAI,YAAiB,IAAD,qBAAdiB,EAAc,KAATqP,EAAS,KAC5GC,EAAe,iBAAGvO,QAAH,IAAGA,OAAH,EAAGA,EAAiBf,GAAKR,YAAzB,QAAiC,GAChD+P,EAAa/M,KAAKC,IAAL,MAAAD,KAAI,YAAQ6M,IAC7B,OAAO,6BAAc,eAAC,IAAD,CAAOrD,QAAQ,YAAf,UAA4BsD,EAA5B,IAA6C,cAAC,IAAD,CAAOtD,QAAQ,UAAf,SAA0BuD,QAA5EvP,UAItB,cAAC,IAAD,UArDa,CAAC,UAAW,WAAY,WAAY,SAAU,YAAa,WAAY,aAsDxEjB,KAAI,SAAAsB,GACZ,IAAImP,EAAOtB,IAAKkB,YAAY/O,GACxBoP,EAAUxP,EAAMI,GACpB,OAAO,eAAC,IAAD,CAAKgM,GAAI,GAAT,UACL,qBAAIzN,UAAU,WAAd,UAA0BqQ,IAAS5O,GAAnC,IAA8C6N,IAAKiB,YAAY9O,MAC/D,sBAAMzB,UAAS,cAAf,UACU,OAAP6Q,QAAO,IAAPA,OAAA,EAAAA,EAASxB,QAAQC,IAAKC,UAAU9N,KAAYmP,MAHxBnP,WAS9B+M,GAAU,cAAC,IAAKT,OAAN,UACT,eAAC,IAAD,WACE,cAAC,IAAD,UAAK,eAAC,IAAD,CAAQ+C,GAAIC,IAAMC,GAAI,CACzBC,SAAU,SACV1L,gBAFG,UAGK,cAAC,IAAD,CAAiB5F,KAAMuR,MAH5B,wBAKL,cAAC,IAAD,UACE,eAAC,IAAD,CAAQ9D,QAAQ,OAAO0D,GAAIC,IAAMC,GAAI,CAAEC,SAAU,QAAS1L,gBAA1D,UAAiF,cAAC,IAAD,CAAiB5F,KAAMwR,MAAxG","file":"static/js/4.6a3150ed.chunk.js","sourcesContent":["import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) => <span className={colored ? \"text-5star\" : \"\"}>\r\n  {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n</span>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import Artifact from \"../Artifact/Artifact\";\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\";\r\nimport Conditional from \"../Conditional/Conditional\";\r\nimport { ascensionMaxLevel, characterStatBase } from \"../Data/CharacterData\";\r\nimport ElementalData from \"../Data/ElementalData\";\r\nimport { database } from \"../Database/Database\";\r\nimport { ElementToReactionKeys, PreprocessFormulas } from \"../StatData\";\r\nimport { GetDependencies } from \"../StatDependency\";\r\nimport { IArtifact } from \"../Types/artifact\";\r\nimport { ICharacter } from \"../Types/character\";\r\nimport { allElements, ArtifactSetKey, ElementKey, SlotKey } from \"../Types/consts\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\nimport { deepClone, evalIfFunc } from \"../Util/Util\";\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\nimport { mergeStats } from \"../Util/StatUtil\";\r\n\r\nexport default class Character {\r\n  //do not instantiate.\r\n  constructor() { if (this instanceof Character) throw Error('A static class cannot be instantiated.'); }\r\n\r\n  static getElementalName = (elementalKey: ElementKey | \"physical\"): string =>\r\n    ElementalData[elementalKey].name\r\n  static getLevelString = (character: ICharacter): string =>\r\n    `${character.level}/${ascensionMaxLevel[character.ascension]}`\r\n\r\n  static getTalentFieldValue = (field: IFieldDisplay, key: keyof IFieldDisplay, stats = {}, defVal = \"\"): any => {\r\n    if (!field[key]) return defVal\r\n    return evalIfFunc(field[key] as any, stats!)\r\n  }\r\n\r\n  static hasOverride = (character: ICharacter, statKey): boolean => {\r\n    if (statKey === \"finalHP\")\r\n      return Character.hasOverride(character, \"hp\") || Character.hasOverride(character, \"hp_\") || Character.hasOverride(character, \"characterHP\")\r\n    if (statKey === \"finalDEF\")\r\n      return Character.hasOverride(character, \"def\") || Character.hasOverride(character, \"def_\") || Character.hasOverride(character, \"characterDEF\")\r\n    if (statKey === \"finalATK\")\r\n      return Character.hasOverride(character, \"atk\") || Character.hasOverride(character, \"atk_\") || Character.hasOverride(character, \"characterATK\")\r\n    return character?.baseStatOverrides ? (statKey in character.baseStatOverrides) : false;\r\n  }\r\n\r\n  static getBaseStatValue = (character: ICharacter, characetSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string): number => {\r\n    if (statKey === \"enemyLevel\") return character.level\r\n    if (statKey.includes(\"enemyRes_\")) return 10\r\n    if (statKey in characterStatBase) return characterStatBase[statKey]\r\n    return 0\r\n  }\r\n  static getStatValueWithOverride = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, statKey: string) => {\r\n    if (Character.hasOverride(character, statKey)) return character.baseStatOverrides?.[statKey] ?? 0\r\n    else return Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)\r\n  }\r\n\r\n  static calculateBuild = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>, mainStatAssumptionLevel = 0): ICalculatedStats => {\r\n    let artifacts\r\n    if (character.artifacts) // from flex\r\n      artifacts = Object.fromEntries(character.artifacts.map((art, i) => [i, art]))\r\n    else if (character.equippedArtifacts)\r\n      artifacts = Object.fromEntries(Object.entries(character.equippedArtifacts).map(([key, artid]) => [key, database._getArt(artid)]))\r\n    const initialStats = Character.createInitialStats(character, characterSheet, weaponSheet)\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    return Character.calculateBuildwithArtifact(initialStats, artifacts, artifactSheets)\r\n  }\r\n\r\n  static calculateBuildwithArtifact = (initialStats: ICalculatedStats, artifacts: Dict<SlotKey, IArtifact>, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>): ICalculatedStats => {\r\n    const setToSlots = Artifact.setToSlots(artifacts)\r\n    const artifactSetEffectsStats = ArtifactSheet.setEffectsStats(artifactSheets, initialStats, setToSlots)\r\n\r\n    let stats = deepClone(initialStats)\r\n    //add artifact and artifactsets\r\n    Object.values(artifacts).forEach(art => {\r\n      if (!art) return\r\n      //main stats\r\n      stats[art.mainStatKey] = (stats[art.mainStatKey] || 0) + Artifact.mainStatValue(art.mainStatKey, art.numStars, Math.max(Math.min(stats.mainStatAssumptionLevel, art.numStars * 4), art.level))\r\n      //substats\r\n      art.substats.forEach((substat) =>\r\n        substat && substat.key && (stats[substat.key] = (stats[substat.key] || 0) + substat.value))\r\n    })\r\n    //setEffects\r\n    mergeStats(stats, artifactSetEffectsStats)\r\n    //setEffects conditionals\r\n    Conditional.parseConditionalValues({ artifact: stats?.conditionalValues?.artifact }, (conditional, conditionalValue, [, setKey, setNumKey]) => {\r\n      if (parseInt(setNumKey) > (setToSlots?.[setKey]?.length ?? 0)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, stats, conditionalValue)\r\n      mergeStats(stats, condStats)\r\n    })\r\n\r\n    stats.equippedArtifacts = Object.fromEntries(Object.entries(artifacts).map(([key, val]: any) => [key, val?.id]))\r\n    stats.setToSlots = setToSlots\r\n    let dependencies = GetDependencies(stats, stats?.modifiers)\r\n    const { initialStats: preprocessedStats, formula } = PreprocessFormulas(dependencies, stats)\r\n    formula(preprocessedStats)\r\n    return { ...stats, ...preprocessedStats }\r\n  }\r\n\r\n  static createInitialStats = (character: ICharacter, characterSheet: CharacterSheet, weaponSheet: WeaponSheet): ICalculatedStats => {\r\n    character = deepClone(character)\r\n    const { characterKey, elementKey, level, ascension, hitMode, infusionAura, reactionMode, talentLevelKeys, constellation, equippedArtifacts, conditionalValues = {}, weapon } = character\r\n\r\n    //generate the initalStats obj with data from Character & overrides\r\n    const statKeys = [\"enemyLevel\", ...Object.keys(characterStatBase)]\r\n    const initialStats = Object.fromEntries(statKeys.map(key => [key, Character.getStatValueWithOverride(character, characterSheet, weaponSheet, key)])) as ICalculatedStats\r\n    initialStats.characterHP = characterSheet.getBase(\"hp\", level, ascension)\r\n    initialStats.characterDEF = characterSheet.getBase(\"def\", level, ascension)\r\n    initialStats.characterATK = characterSheet.getBase(\"atk\", level, ascension)\r\n    initialStats.characterLevel = level\r\n    initialStats.characterEle = characterSheet.elementKey ?? elementKey ?? \"anemo\";\r\n    initialStats.characterKey = characterKey\r\n    initialStats.hitMode = hitMode;\r\n    initialStats.infusionAura = infusionAura\r\n    initialStats.reactionMode = reactionMode;\r\n    initialStats.conditionalValues = conditionalValues\r\n    initialStats.weaponType = characterSheet.weaponTypeKey\r\n    initialStats.tlvl = talentLevelKeys;\r\n    initialStats.constellation = constellation\r\n    initialStats.ascension = ascension\r\n    initialStats.weapon = deepClone(weapon)\r\n    initialStats.equippedArtifacts = equippedArtifacts;\r\n\r\n    //enemy stuff\r\n    [\"physical\", ...allElements].forEach(eleKey => {\r\n      let statKey = `${eleKey}_enemyRes_`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n      statKey = `${eleKey}_enemyImmunity`\r\n      initialStats[statKey] = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey);\r\n    })\r\n\r\n    //all the rest of the overrides\r\n    let overrides = character?.baseStatOverrides || {}\r\n    Object.entries(overrides).forEach(([statKey, val]: any) => {\r\n      if (!initialStats.hasOwnProperty(statKey)) initialStats[statKey] = val\r\n    })\r\n\r\n    //add specialized stat\r\n    const specialStatKey = characterSheet.getSpecializedStat(ascension)\r\n    if (specialStatKey) {\r\n      const specializedStatVal = characterSheet.getSpecializedStatVal(ascension)\r\n      mergeStats(initialStats, { [specialStatKey]: specializedStatVal })\r\n    }\r\n\r\n    //add stats from all talents\r\n    characterSheet.getTalentStatsAll(initialStats as ICalculatedStats, initialStats.characterEle).forEach(s => mergeStats(initialStats, s))\r\n\r\n    //add levelBoosts, from Talent stats.\r\n    for (const key in initialStats.tlvl)\r\n      initialStats.tlvl[key] += initialStats[`${key}Boost`] ?? 0\r\n\r\n    //add stats from weapons\r\n    const weaponATK = weaponSheet.getMainStatValue(weapon.level, weapon.ascension)\r\n    initialStats.weaponATK = weaponATK\r\n    const weaponSubKey = weaponSheet.getSubStatKey()\r\n    if (weaponSubKey) mergeStats(initialStats, { [weaponSubKey]: weaponSheet.getSubStatValue(weapon.level, weapon.ascension) })\r\n    mergeStats(initialStats, weaponSheet.stats(initialStats as ICalculatedStats))\r\n\r\n\r\n    //Handle conditionals, without artifact, since the pipeline for that comes later.\r\n    const { artifact: artifactCond, weapon: weaponCond, ...otherCond } = conditionalValues\r\n\r\n    //handle conditionals. only the conditional applicable to the equipped weapon is parsed.\r\n    Conditional.parseConditionalValues({ ...weapon.key && { weapon: { [weapon.key]: weaponCond?.[weapon.key] } }, ...otherCond }, (conditional, conditionalValue, keys) => {\r\n      if (keys[0] === \"character\" && keys[3] === \"talents\" && keys[4] !== elementKey) return //fix for traveler, make sure conditionals match element.\r\n      if (!Conditional.canShow(conditional, initialStats)) return\r\n      const { stats: condStats } = Conditional.resolve(conditional, initialStats, conditionalValue)\r\n      mergeStats(initialStats, condStats)\r\n    })\r\n    return initialStats as ICalculatedStats\r\n  }\r\n  //TODO: this needs weaponSheet/artifactsheets as a parameter.\r\n  static getDisplayStatKeys = (stats: ICalculatedStats, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }) => {\r\n    const eleKey = stats.characterEle\r\n    const basicKeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\", `${eleKey}_dmg_`]\r\n    const isAutoElemental = characterSheet.isAutoElemental\r\n    if (!isAutoElemental) basicKeys.push(\"physical_dmg_\")\r\n\r\n    //show elemental interactions\r\n    const transReactions = deepClone(ElementToReactionKeys[eleKey])\r\n    const weaponTypeKey = characterSheet.weaponTypeKey\r\n    if (!transReactions.includes(\"shattered_hit\") && weaponTypeKey === \"claymore\") transReactions.push(\"shattered_hit\")\r\n    const charFormulas = {}\r\n    const talentSheet = characterSheet.getTalent(eleKey)\r\n    const addFormula = (fields, key) => fields.forEach(field => {\r\n      if (!field.formula || !field?.canShow?.(stats)) return\r\n      if (!charFormulas[key]) charFormulas[key] = []\r\n      charFormulas[key].push((field.formula as any).keys)\r\n    })\r\n    const parseSection = (section, key) => {\r\n      //conditional\r\n      if (section.conditional && Conditional.canShow(section.conditional, stats)) {\r\n        const { fields }: { fields?: Array<IFieldDisplay> } = Conditional.resolve(section.conditional, stats, null)\r\n        fields && addFormula(fields, key)\r\n      }\r\n      //fields\r\n      if (section.fields) addFormula(section.fields, key)\r\n    }\r\n    talentSheet && Object.entries(talentSheet.sheets).forEach(([talentKey, { sections }]) => {\r\n      if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n      sections.forEach(section => parseSection(section, `talentKey_${talentKey}`))\r\n    })\r\n\r\n    const formKey = `weapon_${stats.weapon.key}`\r\n    weaponSheet.document && weaponSheet.document.map(section => parseSection(section, formKey))\r\n\r\n    stats.setToSlots && Object.entries(stats.setToSlots).map(([setKey, slots]) => [setKey, slots.length]).forEach(([setKey, num]) => {\r\n      const artifactSheet = artifactSheets[setKey] as ArtifactSheet\r\n      if (!artifactSheet) return\r\n      Object.entries(artifactSheet.setEffects).forEach(([setNum, { document }]) => {\r\n        if (num < parseInt(setNum)) return\r\n        document && document.map(section => parseSection(section, `artifact_${setKey}_${setNum}`))\r\n      })\r\n    })\r\n\r\n    return { basicKeys, ...charFormulas, transReactions }\r\n  }\r\n}","import Formula from \"./Formula\"\r\nimport { Formulas, getStage, StatData } from \"./StatData\"\r\nimport { IBaseStat } from \"./Types/character\"\r\nimport { Modifier } from \"./Types/stats\"\r\n\r\n// Generate a statKey dependency, to reduce build generation calculation on a single stat.\r\nfunction GetFormulaDependency(formula: (s) => number) {\r\n  const dependency: Set<string> = new Set()\r\n  formula(new Proxy({}, { get: (target, prop, receiver) => { dependency.add(prop.toString()) } }))\r\n  return [...dependency]\r\n}\r\nconst formulaKeyDependency = Object.freeze(Object.fromEntries(\r\n  Object.entries(Formulas).map(([key, value]) => [key, GetFormulaDependency(value)])\r\n)) as Dict<string, string[]>\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n  let statKeys = Object.keys(StatData)\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    dependencies.forEach(key =>\r\n      !statKeys.includes(key as any) &&\r\n      console.error(`Formula ${formulaKey} depends key ${key} that does not Exist in StatData.`))\r\n  )\r\n  Object.entries(formulaKeyDependency).forEach(([formulaKey, dependencies]) =>\r\n    StatData[formulaKey]?.const && dependencies.forEach(key =>\r\n      !StatData[key as any]?.const &&\r\n      console.error(`Constant formula ${formulaKey} depends on dynamic key ${key}.`)\r\n    )\r\n  )\r\n}\r\n\r\nfunction GetDependencies(baseStat: IBaseStat, modifiers: Modifier = {}, keys = Object.keys(StatData)): Dependencies {\r\n  const found = new Set<string>()\r\n  const dependencies = [new Set<string>(), new Set<string>()]\r\n  keys.forEach(key => InsertDependencies(baseStat, key, modifiers, dependencies, found))\r\n  return dependencies.flatMap(dep => [...dep])\r\n}\r\nfunction InsertDependencies(baseStat: IBaseStat, key: string, modifiers: Modifier, dependencies: Set<string>[], found: Set<string>) {\r\n  if (found.has(key)) return\r\n  found.add(key)\r\n\r\n  formulaKeyDependency[key]?.forEach(k => InsertDependencies(baseStat, k, modifiers, dependencies, found));\r\n  (modifiers[key] ?? []).forEach(path => Formula.getCurrent(path, baseStat)[1].forEach(k =>\r\n    InsertDependencies(baseStat, k, modifiers, dependencies, found)))\r\n  dependencies[getStage(key)].add(key)\r\n}\r\n\r\ntype Dependencies = string[]\r\n\r\nexport {\r\n  GetFormulaDependency,\r\n  GetDependencies,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Weapon-class-bow-icon.b8e7b5ca.png\";","import bow from './Weapon-class-bow-icon.png'\r\nimport catalyst from './Weapon-class-catalyst-icon.png'\r\nimport claymore from './Weapon-class-claymore-icon.png'\r\nimport polearm from './Weapon-class-polearm-icon.png'\r\nimport sword from './Weapon-class-sword-icon.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","export default __webpack_public_path__ + \"static/media/Weapon-class-catalyst-icon.2cbef800.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-claymore-icon.17418b20.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-polearm-icon.a4e7fffc.png\";","export default __webpack_public_path__ + \"static/media/Weapon-class-sword-icon.4470b487.png\";","export default __webpack_public_path__ + \"static/media/Item_Fragile_Resin.f9ec8223.png\";","export default __webpack_public_path__ + \"static/media/Item_Condensed_Resin.1cecf64a.png\";","export default __webpack_public_path__ + \"static/media/Item_Wanderer's_Advice.58c62cf7.png\";","export default __webpack_public_path__ + \"static/media/Item_Hero's_Wit.a79e36d0.png\";","export default __webpack_public_path__ + \"static/media/Item_Adventurer's_Experience.92b5d195.png\";","import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { dbStorage } from \"../Database/DBStorage\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport { TransWrapper } from \"./Translate\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    dbStorage.set(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><TransWrapper ns=\"ui\" key18=\"info\" /> <FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","import { faCalculator, faEdit, faLink, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useMemo, useState } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { ICharacter } from '../Types/character';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterSheet from './CharacterSheet';\r\ntype CharacterCardProps = { characterKey: CharacterKey | \"\", onEdit?: (any) => void, onDelete?: (any) => void, cardClassName: string, header?: JSX.Element, bg?: string, footer?: boolean }\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer = false }: CharacterCardProps) {\r\n  const [databaseCharacter, updateDatabaseCharacter] = useState(undefined as ICharacter | undefined)\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, updateDatabaseCharacter) : undefined,\r\n    [characterKey, updateDatabaseCharacter])\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const character = databaseCharacter\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weaponSheet = usePromise(character && WeaponSheet.get(character.weapon.key), [character])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets])\r\n  if (!character || !characterSheet || !weaponSheet || !stats) return null;\r\n\r\n  const { weapon, constellation } = character\r\n  const { level, ascension } = weapon\r\n  const { tlvl } = stats\r\n  const name = characterSheet.name\r\n  const elementKey = stats.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponName = weaponSheet?.name\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponLevelName = WeaponSheet.getLevelString(weapon)\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text={\"lightfont\" as any}>\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => onEdit(characterKey)}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete(characterKey)}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={() => onEdit?.(characterKey)} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">Lv. {Character.getLevelString(character)} {`C${constellation}`}</h5>\r\n          <h6 className=\"mb-0\">\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.auto + 1}</strong></Badge>{` `}\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.skill + 1}</strong></Badge>{` `}\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.burst + 1}</strong></Badge>\r\n          </h6>\r\n          <h6 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h6>\r\n          <h3 className=\"mb-0\">{StatIcon[elementKey]} <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && <Badge variant=\"info\" className=\"ml-1\">{weapon.refineIndex + 1}</Badge>} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = artifactSheets?.[key].name ?? \"\"\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = stats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIcon[statKey]} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Row>\r\n        <Col><Button as={Link} to={{\r\n          pathname: \"/build\",\r\n          characterKey\r\n        } as any}><FontAwesomeIcon icon={faCalculator} /> Generate Builds</Button>\r\n        </Col>\r\n        <Col>\r\n          <Button variant=\"info\" as={Link} to={{ pathname: \"/flex\", characterKey } as any}><FontAwesomeIcon icon={faLink} /> Share Character</Button>\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Footer>}\r\n  </Card>)\r\n}"],"sourceRoot":""}