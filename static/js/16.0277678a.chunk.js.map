{"version":3,"sources":["Character/CharacterDisplay/Components/FieldDisplay.tsx","Components/CustomFormControl.tsx","Conditional/ConditionalSelector.tsx","Character/CharacterDisplay/Components/ConditionalDisplay.tsx","Components/CharacterSelection.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Artifact/ArtifactCard.tsx","Util/UIUtil.ts","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Components/WIPComponent.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["FieldDisplay","field","index","equippedBuild","newBuild","className","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","value","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","parseInt","toFixed","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","icon","faQuestionCircle","style","cursor","unit","Item","variant","CustomFormControl","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","useEffect","aria-label","type","e","target","onBlur","onKeyDown","key","ConditionalSelector","conditional","conditionalValue","setConditional","name","conditionalNum","conditionalStateKey","states","text","maxStack","badge","Badge","Dropdown","Toggle","size","whiteSpace","Menu","onClick","Object","entries","map","i","stateKey","condial","Fragment","Array","keys","v","stack","Button","faCheckSquare","faSquare","ConditionalDisplay","characterDispatch","editable","fieldClassName","Conditional","resolve","undefined","conditionalStats","fields","conditionalFields","displayFields","statsToFields","condV","layeredAssignment","conditionalValues","deletePropPath","objClearEmpties","Card","bg","Header","ListGroup","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","DisplayStatDiff","label","val","oldVal","oldText","diffText","xs","StatDisplay","weaponSheet","character","statKey","isArray","Formula","build","invalid","getStatValueWithOverride","Stat","getStatUnit","fixedUnit","StatIconEle","getStatName","labelVariant","hasOverride","StatInput","prependEle","defaultValue","onValueChange","percent","restProps","Prepend","Text","Append","Boolean","pointerEvents","faUndo","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","art","location","maximumEfficiency","substatsValidation","slotKey","numStars","level","mainStatKey","substats","lock","currentEfficiency","mainStatLevel","Math","max","min","mainStatVal","mainStatValue","artifactValid","locationName","border","md","src","slotIcons","thumbnail","slotNames","slotNameWithIcon","Body","Title","stars","stat","numRolls","rolls","length","efficiency","effOpacity","statName","valueString","opacity","valid","Footer","Divider","update","faLock","faLockOpen","faEdit","faTrashAlt","round","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equipArtifacts","equippedArtifacts","unequipArts","fromEntries","allSlotKeys","sKey","StatDisplayComponent","statsDisplayKeys","Alert","Row","Col","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","CharacterOverviewPane","constellation","editLevel","setEditLevel","elementKey","weaponTypeKey","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","InputGroup","clamp","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","constellationName","getTalent","img","roundedCircle","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","WeaponStatsEditorCardWeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","DropdownButton","reverse","arr","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","editing","SetEditing","showDescription","setShowDescription","substatKey","Weapon","getWeaponSubstatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubstatVal","weaponPassiveName","passiveName","weaponBonusStats","conditionals","faQuoteLeft","getLevelName","LevelNameData","refineIndex","faGavel","passiveDescription","atk","description","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","getStatNameRaw","xl","CharacterTalentPane","props","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","crystalize_hit","geo","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","Subtitle","document","section","talentText","evalIfFunc","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","hasTalentPage","DamageOptionsAndCalculation","CharSelectDropdown","ButtonGroup","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","WIPComponent","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionValues","JSON","stringify","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","eleKey","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/16.0277678a.chunk.js","sourcesContent":["import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../../Character\";\r\nimport { compareAgainstEquippedContext } from \"../../CharacterDisplayCard\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const canShow = useMemo(() => field.canShow(stats), [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name\r\n  if (conditional.states) {//complex conditional\r\n    const state = conditional.states[conditionalStateKey] ?? {}\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(state.maxStack > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack > 1) {\r\n    //stacking conditional\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {[...Array(conditional.maxStack).keys()].map(v => v + 1).map(stack =>\r\n          <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n            {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n          </Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else if (conditional.maxStack === 1) {//single boolean conditional\r\n    return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n      <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n    </Button>\r\n  }\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../../../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../../../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../../../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: any,//TODO: type\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild as ICalculatedStats\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [stats.conditionalValues, conditional.keys, characterDispatch])\r\n\r\n  if (!canShow) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined)\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey, invalid as any)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterATK\") + Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { IArtifact, Substat } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number }\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj //dont allow edit for flex artifacts\r\n  const art = artifactObj || ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art.location))\r\n  if (!art) return null\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n\r\n  const { slotKey, numStars, level, mainStatKey, substats, lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = art.maximumEfficiency !== undefined\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div>{Artifact.slotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit)}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{valueString(efficiency, \"eff\")}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.update(art);\r\n                  }}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","export function valueString(value, unit) {\r\n  switch (unit) {\r\n    case \"%\": return Math.round(value * 10) / 10\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return Math.round(value)\r\n  }\r\n}","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => characterSheet.getDisplayStatKeys(stats), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    }), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    Character.equipArtifacts(characterKey, newBuild?.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild?.equippedArtifacts, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])))\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats.equippedArtifacts[slotKey]) && <Col {...artLayoutSize} key={stats.equippedArtifacts[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats.equippedArtifacts[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats.equippedArtifacts[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport { allElements } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport StatInput from \"../StatInput\"\r\nimport ConditionalDisplay from \"./Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"./Components/FieldDisplay\"\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { characterKey, constellation }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const elementKey = characterSheet.elementKey\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={characterSheet.star} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl placeholder={undefined} onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90), characterSheet, weaponSheet })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey), characterSheet, weaponSheet })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip id=\"artifact-override-level\">Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{characterSheet.constellationName}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={characterSheet.getTalent(`constellation${i + 1}`)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats = {} }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\n\r\nfunction WeaponStatsEditorCardWeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  if (!weaponSheets) return null\r\n\r\n  return <DropdownButton title={weaponSheet.name}>\r\n    {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n      <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n      {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === star).map(([key, weaponObj]: any) =>\r\n        <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n          {weaponObj.name}\r\n        </Dropdown.Item>\r\n      )}\r\n      {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n    </React.Fragment>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const substatKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key]\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <WeaponStatsEditorCardWeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {substatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><span className=\"mr-2\">{StatIconEle(substatKey)}</span>{Stat.getStatName(substatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(substatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{weaponSheet.name} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <p><Stars stars={weaponSheet.rarity} /></p>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <p>{weaponPassiveName && weaponSheet.passiveDescription(build)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{weaponSheet.description}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key, characterSheet, weaponSheet })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value, characterSheet, weaponSheet })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatKey\"), characterSheet, weaponSheet })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatVal\"), characterSheet, weaponSheet })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined\r\n                  }\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport { evalIfFunc } from \"../../Util/Util\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport ConditionalDisplay from './Components/ConditionalDisplay';\r\nimport FieldDisplay from './Components/FieldDisplay';\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalent(\"sprint\") && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = characterSheet.elementKey\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n}\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ stats }) {\r\n  const sKey = \"crystalize_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { constellation, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={characterSheet.getTalent(talentKey)?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{characterSheet.getTalent(talentKey)?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {characterSheet.getTalent(talentKey)?.document?.map((section, i) => {\r\n        if (!section.canShow!(build)) return null\r\n        const talentText = evalIfFunc(section.text, build)\r\n        let fields = section.fields ?? []\r\n        return <div className=\"my-2\" key={\"section\" + i}>\r\n          <div {...{ xs: 12 }}>\r\n            <div className=\"mb-2\">{talentText}</div>\r\n            {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n              {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n            </ListGroup>}\r\n          </div>\r\n          {Boolean(section.conditional) && <ConditionalDisplay fieldClassName={undefined} {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n        </div>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: {},\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey, {} as any) }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: string,\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey, {} as any) }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  useEffect(() => {\r\n    if (weaponSheets && characterSheet && !character.weapon.key) {\r\n      character.weapon.key = Object.keys(WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey))[0] ?? \"\"\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets, character.weapon])\r\n\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key))\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    (newBuild as any).hitMode = character.hitMode;\r\n    (newBuild as any).reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet?.hasTalentPage && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} levelKey={levelKey} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifact</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {process.env.NODE_ENV !== \"development\" && characterSheet.hasTalentPage ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled><h5 className=\"mb-0\">Talents</h5> <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  levelKey: string\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, editable, levelKey, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>{editable ? <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle as={Button}>\r\n        {HeaderIconDisplay}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu as={CustomMenu}>\r\n        {allCharacterKeys.map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    <DropdownButton as={ButtonGroup} disabled={!characterSheet} title={\r\n      <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n    }>\r\n      <Dropdown.ItemText>\r\n        <span>Select Base Stat Template</span>\r\n      </Dropdown.ItemText>\r\n      {Character.getlevelKeys().map(lvlKey =>\r\n        <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n          <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n  </ButtonGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character, characterSheet, weaponSheet)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)}>\r\n    <span >\r\n      <Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail />\r\n      <h6 className=\"d-inline ml-2\">{characterSheet.name} </h6>\r\n    </span>\r\n  </Dropdown.Item>\r\n}","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip id=\"wip\">Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Character/CharacterDisplay/Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Character/CharacterDisplay/Components/FieldDisplay\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey))\r\n\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([talentKey, sectionValues]: any) => {\r\n    let header = \"\"\r\n    if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n    else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n    else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n    else header = characterSheet.getTalent(talentKey)?.name ?? talentKey\r\n    return <Col key={talentKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ characterSheet, character: { characterKey, reactionMode = \"none\", infusionAura }, characterDispatch, className }: ReactionToggleProps) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = characterSheet.elementKey\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, build }: { characterSheet: CharacterSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => characterSheet.getDisplayStatKeys(build), [build, characterSheet])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([talentKey, fields]) => {\r\n      let header = \"\"\r\n      if (talentKey === \"basicKeys\") header = \"Basic Stats\"\r\n      else if (talentKey === \"genericAvgHit\") header = \"Generic Optimization Values\"\r\n      else if (talentKey === \"transReactions\") header = \"Transformation Reaction\"\r\n      else header = characterSheet.getTalent(talentKey)?.name ?? talentKey\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={talentKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys))\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle characterSheet={characterSheet} character={character as any} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={undefined}\r\n                      disabled={undefined}\r\n                      percent={undefined}\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}