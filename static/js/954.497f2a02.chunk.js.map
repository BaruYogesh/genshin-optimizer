{"version":3,"file":"static/js/954.497f2a02.chunk.js","mappings":"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","sources":["Assets/Assets.ts","Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/CloseButton.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/Image/ImgIcon.tsx","Components/ModalWrapper.tsx","Components/SolidToggleButtonGroup.tsx","Components/SqBadge.tsx","Components/StarDisplay.tsx","Components/StatIcon.tsx","Data/Characters/CharacterSheet.tsx","Formula/uiData.tsx","Formula/api.tsx","Formula/index.ts","Formula/internal.ts","Formula/optimization.ts","Formula/utils.ts","ReactHooks/useForceUpdate.tsx","ReactHooks/usePromise.tsx"],"sourcesContent":["import bow from './icon_bow.png'\r\nimport catalyst from './icon_catalyst.png'\r\nimport claymore from './icon_claymore.png'\r\nimport polearm from './icon_polearm.png'\r\nimport sword from './icon_sword.png'\r\n\r\nimport fragile from './Item_Fragile_Resin.png'\r\nimport condensed from './Item_Condensed_Resin.png'\r\n\r\n//EXP BOOKS\r\nimport advice from './Item_Wanderer\\'s_Advice.png'\r\nimport wit from './Item_Hero\\'s_Wit.png'\r\nimport experience from './Item_Adventurer\\'s_Experience.png'\r\n\r\nconst Assets = {\r\n  weaponTypes: { bow, catalyst, claymore, polearm, sword },\r\n  resin: {\r\n    fragile,\r\n    condensed\r\n  },\r\n  exp_books: {\r\n    advice,\r\n    wit,\r\n    experience,\r\n  }\r\n};\r\nexport default Assets;","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { Close } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\ntype CloseButtonProps = ButtonProps & {\r\n  large?: boolean\r\n}\r\nexport default function CloseButton({ large = false, ...props }: CloseButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  if (large)\r\n    return <Button color=\"error\" startIcon={<Close />} {...props} >{t`close`}</Button>\r\n  return <Button color=\"error\" sx={{ p: 1, minWidth: 0 }} {...props} >\r\n    <Close />\r\n  </Button>\r\n}","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\"\r\ninterface ImgIconProps {\r\n  size?: number;\r\n}\r\nconst ImgIcon = styled(\"img\", {\r\n  name: 'ImgIcon',\r\n  slot: 'Root',\r\n})<ImgIconProps>(({ size = 1 }) => ({\r\n  display: \"inline-block\",\r\n  width: \"auto\",\r\n  height: `${size * 1.2}em`,\r\n  verticalAlign: \"text-bottom\"\r\n}))\r\n\r\nexport default ImgIcon","import { CardContent, Container, ContainerProps, Modal, ModalProps, Skeleton, styled } from \"@mui/material\"\r\nimport { Suspense } from \"react\"\r\nimport CardLight from \"./Card/CardLight\"\r\n\r\nconst ScrollModal = styled(Modal)(({ theme }) => ({\r\n  overflow: \"scroll\",\r\n  paddingTop: theme.spacing(2),\r\n  paddingBottom: theme.spacing(2),\r\n\r\n}))\r\nconst ModalContainer = styled(Container)(({ theme }) => ({\r\n  padding: 0,\r\n  minHeight: \"100%\",\r\n  display: \"flex\", flexDirection: \"column\", justifyContent: \"center\",\r\n  pointerEvents: \"none\",\r\n  \"& > *\": {\r\n    pointerEvents: \"auto\"\r\n  }\r\n}))\r\n\r\ntype ModalWrapperProps = ModalProps & {\r\n  containerProps?: ContainerProps\r\n}\r\nexport default function ModalWrapper({ children, containerProps, ...props }: ModalWrapperProps) {\r\n  return <ScrollModal {...props}>\r\n    <ModalContainer {...containerProps}>\r\n      <Suspense fallback={<CardLight><CardContent><Skeleton variant=\"rectangular\" width=\"100%\" height={300} /></CardContent></CardLight>}>\r\n        {children}\r\n      </Suspense>\r\n    </ModalContainer>\r\n  </ScrollModal>\r\n}","import { ButtonProps, styled, ToggleButtonGroup, ToggleButtonGroupProps } from \"@mui/material\";\r\n\r\nexport type SolidToggleButtonGroupProps = SolidToggleButtonGroupPropsPartial & ToggleButtonGroupProps\r\ntype SolidToggleButtonGroupPropsPartial = {\r\n  baseColor?: ButtonProps[\"color\"];\r\n  selectedColor?: ButtonProps[\"color\"];\r\n}\r\n\r\nconst SolidToggleButtonGroup = styled(ToggleButtonGroup, {\r\n  shouldForwardProp: (prop) => prop !== \"baseColor\" && prop !== \"selectedColor\"\r\n})<SolidToggleButtonGroupPropsPartial>(({ theme, baseColor = \"primary\", selectedColor = \"success\" }) => ({\r\n  '& .MuiToggleButtonGroup-grouped': {\r\n    '&': {\r\n      backgroundColor: theme.palette[baseColor].main,\r\n      color: theme.palette[baseColor].contrastText,\r\n    },\r\n    '&:hover': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected': {\r\n      backgroundColor: theme.palette[selectedColor].main,\r\n      color: theme.palette[selectedColor].contrastText,\r\n    },\r\n    '&.Mui-selected:hover': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n    '&.Mui-disabled': {\r\n      backgroundColor: theme.palette[baseColor].dark,\r\n    },\r\n    '&.Mui-selected.Mui-disabled': {\r\n      backgroundColor: theme.palette[selectedColor].dark,\r\n    },\r\n  },\r\n}));\r\n\r\nexport default SolidToggleButtonGroup","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","import { faStar } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Typography } from '@mui/material'\r\nimport { Rarity } from '../Types/consts'\r\n\r\nconst StarIcon = () => <FontAwesomeIcon icon={faStar} />\r\nconst Stars = ({ stars, colored = false }: { stars: Rarity, colored?: boolean }) =>\r\n  <Typography color={colored ? \"warning.main\" : undefined} component=\"span\">\r\n    {stars ? [...Array(stars).keys()].map((_, i) => <StarIcon key={i} />) : null}\r\n  </Typography>\r\n\r\nexport {\r\n  StarIcon,\r\n  Stars\r\n}\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { objectKeyMap } from '../Util/Util'\r\nimport ColorText from './ColoredText'\r\nimport { faAnemo, faAtk, faCdReduction, faCritDmg, faCritRate, faCryo, faDef, faDendro, faElectro, faElementalMastery, faEnergyRecharge, faGeo, faHealingAdd, faHealingBonus, faHp, faHydro, faMaxStamina, faPhysicalDmgBonus, faPyro, faShieldStrength } from './faIcons'\r\n\r\nexport const uncoloredEleIcons = {\r\n  anemo: <FontAwesomeIcon icon={faAnemo as any} />,\r\n  geo: <FontAwesomeIcon icon={faGeo as any} />,\r\n  electro: <FontAwesomeIcon icon={faElectro as any} />,\r\n  hydro: <FontAwesomeIcon icon={faHydro as any} />,\r\n  pyro: <FontAwesomeIcon icon={faPyro as any} />,\r\n  cryo: <FontAwesomeIcon icon={faCryo as any} />,\r\n  dendro: <FontAwesomeIcon icon={faDendro as any} />,\r\n  physical: <FontAwesomeIcon icon={faPhysicalDmgBonus as any} />,\r\n} as const\r\nconst coloredEleIcon = objectKeyMap(Object.keys(uncoloredEleIcons), key => <ColorText color={key} >{uncoloredEleIcons[key]}</ColorText>)\r\n\r\nconst StatIcon = {\r\n  hp_: <FontAwesomeIcon icon={faHp as any} />,\r\n  hp: <FontAwesomeIcon icon={faHp as any} />,\r\n\r\n  atk_: <FontAwesomeIcon icon={faAtk as any} />,\r\n  atk: <FontAwesomeIcon icon={faAtk as any} />,\r\n\r\n  def_: <FontAwesomeIcon icon={faDef as any} />,\r\n  def: <FontAwesomeIcon icon={faDef as any} />,\r\n\r\n  eleMas: <FontAwesomeIcon icon={faElementalMastery as any} />,\r\n  critRate_: <FontAwesomeIcon icon={faCritRate as any} />,\r\n  critDMG_: <FontAwesomeIcon icon={faCritDmg as any} />,\r\n  enerRech_: <FontAwesomeIcon icon={faEnergyRecharge as any} />,\r\n  incHeal_: <FontAwesomeIcon icon={faHealingAdd as any} />,\r\n  heal_: <FontAwesomeIcon icon={faHealingBonus as any} />,\r\n\r\n  cdRed_: <FontAwesomeIcon icon={faCdReduction as any} />,\r\n\r\n  shield_: <FontAwesomeIcon icon={faShieldStrength as any} />,\r\n  stamina: <FontAwesomeIcon icon={faMaxStamina as any} />,\r\n\r\n  ...coloredEleIcon,\r\n  ...Object.fromEntries(Object.keys(coloredEleIcon).flatMap(ele => [\r\n    [`${ele}_dmg_`, coloredEleIcon[ele]],\r\n    [`${ele}_res_`, coloredEleIcon[ele]],\r\n    [`${ele}_critDMG_`, coloredEleIcon[ele]],\r\n    [`${ele}_dmgInc`, coloredEleIcon[ele]],\r\n    [`${ele}_enemyRes_`, coloredEleIcon[ele]]\r\n  ]))\r\n}\r\n\r\nexport default StatIcon\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { ascensionMaxLevel } from \"../LevelData\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { TalentSheet, TalentSheetElement, TalentSheetElementKey } from \"../../Types/character\";\r\nimport { CharacterKey, ElementKey, Rarity, WeaponTypeKey } from \"../../Types/consts\";\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport IConditional from \"../../Types/IConditional\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\";\r\n\r\nconst characterSheets = import('.').then(imp => imp.default)\r\n\r\ninterface ICharacterSheetBase {\r\n  name: Displayable\r\n  cardImg: string\r\n  thumbImg: string\r\n  thumbImgSide: string\r\n  barImg?: string\r\n  bannerImg?: string\r\n  rarity: Rarity\r\n  weaponTypeKey: WeaponTypeKey\r\n  gender: string\r\n  constellationName: Displayable\r\n  title: Displayable\r\n}\r\ninterface ICharacterSheetTalent extends ICharacterSheetBase {\r\n  elementKey: ElementKey\r\n  talent: TalentSheet\r\n}\r\ninterface ICharacterSheetTalents extends ICharacterSheetBase {\r\n  talents: Dict<ElementKey, TalentSheet>\r\n}\r\nexport type ICharacterSheet = ICharacterSheetTalent | ICharacterSheetTalents\r\n\r\nexport default class CharacterSheet {\r\n  sheet: ICharacterSheet;\r\n  private data: Data | Partial<Record<ElementKey, Data>>;\r\n  constructor(charSheet: ICharacterSheet, data: Data | Partial<Record<ElementKey, Data>>) {\r\n    this.sheet = charSheet\r\n    this.data = data\r\n  }\r\n  static get = (charKey: CharacterKey | \"\"): Promise<CharacterSheet> | undefined => charKey ? characterSheets.then(c => c[charKey]) : undefined\r\n  static get getAll() { return characterSheets }\r\n  get name() { return this.sheet.name }\r\n  get icon() { return <ImgIcon src={this.thumbImgSide} sx={{ height: \"2em\", marginTop: \"-2em\", marginLeft: \"-0.5em\" }} /> }\r\n  get nameWIthIcon() { return <span>{this.icon} {this.name}</span> }\r\n  get cardImg() { return this.sheet.cardImg }\r\n  get thumbImg() { return this.sheet.thumbImg }\r\n  get thumbImgSide() { return this.sheet.thumbImgSide }\r\n  get bannerImg() { return this.sheet.bannerImg }\r\n  get rarity() { return this.sheet.rarity }\r\n  get elementKey() { return \"elementKey\" in this.sheet ? this.sheet.elementKey : undefined }\r\n  get weaponTypeKey() { return this.sheet.weaponTypeKey }\r\n  get constellationName() { return this.sheet.constellationName }\r\n\r\n  isMelee = () => {\r\n    const weaponTypeKey = this.sheet.weaponTypeKey\r\n    return weaponTypeKey === \"sword\" || weaponTypeKey === \"polearm\" || weaponTypeKey === \"claymore\"\r\n  }\r\n  get isTraveler() {\r\n    return \"talents\" in this.sheet\r\n  }\r\n  getData = (ele: ElementKey = \"anemo\"): Data => {\r\n    if (\"charKey\" in this.data)\r\n      return this.data\r\n    return this.data[ele]!\r\n  }\r\n  getTalent = (eleKey: ElementKey = \"anemo\"): TalentSheet | undefined => {\r\n    if (\"talent\" in this.sheet) return this.sheet.talent\r\n    else return this.sheet.talents[eleKey]\r\n  }\r\n  getTalentOfKey = (talentKey: TalentSheetElementKey, eleKey: ElementKey = \"anemo\") => this.getTalent(eleKey)?.sheets[talentKey]\r\n\r\n  static getLevelString = (level: number, ascension: number): string =>\r\n    `${level}/${ascensionMaxLevel[ascension]}`\r\n}\r\n/*\r\nTODO: refactor stage 1 this function to be\r\ntalentTemplate(talentKey, tr, img, docsection:DocumentSection[]): TalentSheetElement\r\n*/\r\nexport const talentTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional, additionalSections?: DocumentSection[]): TalentSheetElement => ({\r\n  name: tr(`${talentKey}.name`),\r\n  img,\r\n  sections: [\r\n    {\r\n      ...sectionTemplate(talentKey, tr, img, fields, conditional, undefined, false, false),\r\n      text: talentKey !== \"auto\" ? tr(`${talentKey}.description`) : undefined\r\n    },\r\n    ...(additionalSections || [])],\r\n})\r\n\r\n/*\r\nTODO: refactor stage 1 this function to be\r\nsectionTemplate(docSection:DocumentSection): DocumentSection\r\n*/\r\nexport const sectionTemplate = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string, fields?: IFieldDisplay[], conditional?: IConditional, fieldsCanShow?: (data: UIData) => boolean, teamBuff?: boolean, showFieldsHeaderDesc?: boolean): DocumentSection => ({\r\n  fieldsHeader: showFieldsHeaderDesc ? conditionalHeader(talentKey, tr, img) : undefined,\r\n  fieldsDescription: showFieldsHeaderDesc ? tr(`${talentKey}.description`) : undefined,\r\n  fields,\r\n  canShow: fieldsCanShow,\r\n  teamBuff,\r\n  conditional: conditional\r\n    ? {\r\n      ...conditional,\r\n      header: conditional.header ? conditional.header : conditionalHeader(talentKey, tr, img),\r\n      description: conditional.description ? conditional.description : tr(`${talentKey}.description`)\r\n    }\r\n    : undefined,\r\n})\r\n\r\n/*\r\nTODO: refactor stage 2: merge the above stage 1 functions by creating a templategenerator function:\r\ncharTemplates(cKey:CharacterKey, assets:Partial<Record<TalentSheetElementKey,string>>):{\r\n  tr: (key:string) => Displayable\r\n  trm: (key:string, value?:object) => Displayable\r\n  talentTemplate: (talentKey, docsection:DocumentSection[]) => TalentSheetElement\r\n  sectionTemplate: (Partial<DocumentSection>) => DocumentSection\r\n  conditionalTemplate:(talentKey,conditional:Partial<Iconditional>) => Iconditional\r\n}\r\n*/\r\n\r\nconst talentStrMap: Record<TalentSheetElementKey, string> = {\r\n  auto: \"Auto\",\r\n  skill: \"Skill\",\r\n  burst: \"Burst\",\r\n  passive: \"Passive\",\r\n  passive1: \"Ascension 1\",\r\n  passive2: \"Ascension 4\",\r\n  passive3: \"Passive\",\r\n  sprint: \"Sprint\",\r\n  constellation1: \"C1\",\r\n  constellation2: \"C2\",\r\n  constellation3: \"C3\",\r\n  constellation4: \"C4\",\r\n  constellation5: \"C5\",\r\n  constellation6: \"C6\"\r\n}\r\nexport const conditionalHeader = (talentKey: TalentSheetElementKey, tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(`${talentKey}.name`),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">{talentStrMap[talentKey]}</SqBadge>,\r\n  }\r\n}\r\n\r\nexport const normalSrc = (weaponKey: WeaponTypeKey) => Assets.weaponTypes[weaponKey]\r\n","import { uiInput } from \".\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport KeyMap, { KeyMapPrefix, Unit, valueString } from \"../KeyMap\"\r\nimport { assertUnreachable, crawlObject, layeredAssignment, objPathValue } from \"../Util/Util\"\r\nimport { allOperations } from \"./optimization\"\r\nimport { ComputeNode, Data, DataNode, DisplaySub, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode, ThresholdNode, UIInput, Variant } from \"./type\"\r\n\r\nconst shouldWrap = true\r\nexport interface NodeDisplay<V = number> {\r\n  /** Leave this here to make sure one can use `crawlObject` on hierarchy of `NodeDisplay` */\r\n  operation: true\r\n  prefix?: KeyMapPrefix\r\n  key?: string\r\n  value: V\r\n  /** Whether the node fails the conditional test (`threshold_add`, `match`, etc.) or consists solely of empty nodes */\r\n  isEmpty: boolean\r\n  unit: Unit\r\n  variant?: Variant\r\n  formula?: Displayable\r\n  formulas: Displayable[]\r\n}\r\n\r\nexport class UIData {\r\n  origin: UIData\r\n  children = new Map<Data, UIData>()\r\n\r\n  data: Data[]\r\n  nodes = new Map<NumNode | StrNode, ContextNodeDisplay<number | string | undefined>>()\r\n  processed = new Map<NumNode | StrNode, NodeDisplay<number | string | undefined>>()\r\n\r\n  display: any = undefined\r\n  teamBuff: any = undefined\r\n\r\n  constructor(data: Data, parent: UIData | undefined) {\r\n    if (data === undefined) {\r\n      // Secret *origin* initializer\r\n      this.data = []\r\n      this.origin = this\r\n    } else {\r\n      if (!parent)\r\n        parent = new UIData(undefined as any, undefined)\r\n\r\n      this.data = [data, ...parent.data]\r\n      this.origin = parent.origin\r\n    }\r\n  }\r\n\r\n  getDisplay(): {\r\n    [key: string]: DisplaySub<NodeDisplay>\r\n  } {\r\n    if (!this.display) this.display = this.getAll([\"display\"])\r\n    return this.display\r\n  }\r\n  getTeamBuff(): UIInput<NodeDisplay, NodeDisplay<string>> {\r\n    if (!this.teamBuff) {\r\n      const calculated = this.getAll([\"teamBuff\"]), result = {} as any\r\n      // Convert `input` to `uiInput`\r\n      crawlObject(uiInput, [], (x: any) => x.operation, (x: ReadNode<number> | ReadNode<string>, path: string[]) => {\r\n        const node = objPathValue(calculated, x.path) as NumNode | undefined\r\n        if (node) layeredAssignment(result, path, node)\r\n      })\r\n      this.teamBuff = result\r\n    }\r\n    return this.teamBuff\r\n  }\r\n  getAll(prefix: string[]): any {\r\n    const result = {}\r\n    for (const data of this.data) {\r\n      crawlObject(objPathValue(data, prefix) ?? {}, [], (x: any) => x.operation,\r\n        (x: NumNode, key: string[]) => layeredAssignment(result, key, this.get(x)))\r\n    }\r\n    return result\r\n  }\r\n  get(node: NumNode): NodeDisplay\r\n  get(node: StrNode): NodeDisplay<string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined>\r\n  get(node: NumNode | StrNode): NodeDisplay<number | string | undefined> {\r\n    if (node === undefined) {\r\n      console.trace(\"Please report this bug with this trace\")\r\n      return { operation: true, value: undefined, isEmpty: true, unit: \"\", formulas: [] }\r\n    }\r\n    const old = this.processed.get(node)\r\n    if (old) return old\r\n\r\n    const result = computeNodeDisplay(this.computeNode(node))\r\n    this.processed.set(node, result)\r\n    return result\r\n  }\r\n  private computeNode(node: NumNode): ContextNodeDisplay\r\n  private computeNode(node: StrNode): ContextNodeDisplay<string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined>\r\n  private computeNode(node: NumNode | StrNode): ContextNodeDisplay<number | string | undefined> {\r\n    const old = this.nodes.get(node)\r\n    if (old) return old\r\n\r\n    const { operation, info } = node\r\n    let result: ContextNodeDisplay<number | string | undefined>\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        result = this._compute(node); break\r\n      case \"threshold\": result = this._threshold(node); break\r\n      case \"const\": result = this._constant(node.value); break\r\n      case \"subscript\": result = this._subscript(node); break\r\n      case \"read\": result = this._read(node); break\r\n      case \"data\": result = this._data(node); break\r\n      case \"match\": result = this._match(node); break\r\n      case \"lookup\": result = this._lookup(node); break\r\n      case \"prio\": result = this._prio(node.operands); break\r\n      case \"small\": result = this._small(node.operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    if (info) {\r\n      const { key, prefix, source, variant, asConst, fixed } = info\r\n      let { pivot } = info\r\n      result = { ...result }\r\n\r\n      // Pivot all keyed nodes for debugging\r\n      // if (key) pivot = true\r\n\r\n      if (key) result.key = key\r\n      if (prefix) result.prefix = prefix\r\n      if (source) result.source = source\r\n      if (variant) result.variant = variant\r\n      if (pivot) result.pivot = pivot\r\n      if (fixed) result.fixed = fixed\r\n\r\n      if (asConst) {\r\n        delete result.formula\r\n        delete result.assignment\r\n        result.dependencies = new Set()\r\n      }\r\n      if (result.pivot || !result.formula)\r\n        result.mayNeedWrapping = false\r\n    }\r\n    createDisplay(result)\r\n\r\n    this.nodes.set(node, result)\r\n    return result\r\n  }\r\n\r\n  private prereadAll(path: readonly string[]): (NumNode | StrNode)[] {\r\n    return this.data.map(x => objPathValue(x, path) as NumNode | StrNode).filter(x => x)\r\n  }\r\n  private readAll(path: readonly string[]): ContextNodeDisplay<number | string | undefined>[] {\r\n    return this.prereadAll(path).map(x => this.computeNode(x))\r\n  }\r\n  private readFirst(path: readonly string[]): ContextNodeDisplay<number | string | undefined> | undefined {\r\n    const data = this.data.map(x => objPathValue(x, path) as NumNode | StrNode).find(x => x)\r\n    return data && this.computeNode(data)\r\n  }\r\n\r\n  private _prio(nodes: readonly StrNode[]): ContextNodeDisplay<string | undefined> {\r\n    const first = nodes.find(node => this.computeNode(node).value !== undefined)\r\n    return first ? this.computeNode(first) : illformedStr\r\n  }\r\n  private _small(nodes: readonly StrNode[]): ContextNodeDisplay<string | undefined> {\r\n    let smallest: ContextNodeDisplay<string | undefined> | undefined = undefined\r\n    for (const node of nodes) {\r\n      const candidate = this.computeNode(node)\r\n      if (smallest?.value === undefined || (candidate.value && candidate.value < smallest.value))\r\n        smallest = candidate\r\n    }\r\n    return smallest ?? illformedStr\r\n  }\r\n  private _read(node: ReadNode<number | string | undefined>): ContextNodeDisplay<number | string | undefined> {\r\n    const { path } = node\r\n    const result = (node.accu === undefined)\r\n      ? this.readFirst(path) ?? (node.type === \"string\" ? illformedStr : illformed)\r\n      : node.accu === \"small\"\r\n        ? this._small(this.prereadAll(path) as StrNode[])\r\n        : this._accumulate(node.accu, this.readAll(path) as ContextNodeDisplay[])\r\n    return result\r\n  }\r\n  private _lookup(node: LookupNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const key = this.computeNode(node.operands[0]).value\r\n    const selected = node.table[key!] ?? node.operands[1]\r\n    if (!selected)\r\n      throw new Error(`Lookup Fail with key ${key}`)\r\n    return this.computeNode(selected)\r\n  }\r\n  private _match(node: MatchNode<StrNode | NumNode, StrNode | NumNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [v1Node, v2Node, matchNode, unmatchNode] = node.operands\r\n    const v1 = this.computeNode(v1Node), v2 = this.computeNode(v2Node)\r\n    const matching = v1.value === v2.value\r\n    let result = this.computeNode(matching ? matchNode : unmatchNode)\r\n    return ((matching && node.emptyOn === \"match\") || (!matching && node.emptyOn === \"unmatch\"))\r\n      ? makeEmpty(result.value) : result\r\n  }\r\n  private _threshold(node: ThresholdNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    const [valueNode, thresholdNode, pass, fail] = node.operands\r\n    const value = this.computeNode(valueNode), threshold = this.computeNode(thresholdNode)\r\n    const result = value.value >= threshold.value ? this.computeNode(pass) : this.computeNode(fail)\r\n    return (value.value >= threshold.value)\r\n      ? (node.emptyOn === \"ge\" ? makeEmpty(result.value) : result)\r\n      : (node.emptyOn === \"l\" ? makeEmpty(result.value) : result)\r\n  }\r\n  private _data(node: DataNode<NumNode | StrNode>): ContextNodeDisplay<number | string | undefined> {\r\n    let child = this.children.get(node.data)\r\n    if (!child) {\r\n      child = new UIData(node.data, node.reset ? this.origin : this)\r\n      this.children.set(node.data, child)\r\n    }\r\n    return child.computeNode(node.operands[0])\r\n  }\r\n  private _compute(node: ComputeNode): ContextNodeDisplay {\r\n    const { operation, operands } = node\r\n    return this._accumulate(operation, operands.map(x => this.computeNode(x)))\r\n  }\r\n  private _subscript(node: SubscriptNode<number>): ContextNodeDisplay {\r\n    const operand = this.computeNode(node.operands[0])\r\n    const value = node.list[operand.value] ?? NaN\r\n    return this._constant(value)\r\n  }\r\n  private _constant<V>(value: V): ContextNodeDisplay<V> {\r\n    return {\r\n      value, pivot: false,\r\n      empty: false,\r\n      mayNeedWrapping: false,\r\n      dependencies: new Set(),\r\n    }\r\n  }\r\n  private _accumulate(operation: ComputeNode[\"operation\"], operands: ContextNodeDisplay[]): ContextNodeDisplay {\r\n    let variant: Variant | undefined\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n      case \"res\": case \"sum_frac\":\r\n        variant = mergeVariants(operands); break\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\": case \"min\": case \"max\":\r\n        const identity = allOperations[operation]([])\r\n        if (process.env.NODE_ENV !== \"development\")\r\n          operands = operands.filter(operand => operand.value !== identity)\r\n        if (!operands.length)\r\n          return variant ? { ...this._constant(identity), variant } : this._constant(identity)\r\n    }\r\n\r\n    let formula: { display: Displayable, dependencies: Displayable[] }\r\n    let mayNeedWrapping = false\r\n    switch (operation) {\r\n      case \"max\": formula = fStr`Max( ${{ operands }} )`; break\r\n      case \"min\": formula = fStr`Min( ${{ operands }} )`; break\r\n      case \"add\": formula = fStr`${{ operands, separator: ' + ' }}`; break\r\n      case \"mul\": formula = fStr`${{ operands, separator: ' * ', shouldWrap }}`; break\r\n      case \"sum_frac\": formula = fStr`${{ operands: [operands[0]], shouldWrap }} / ( ${{ operands, separator: ' + ' }} )`; break\r\n      case \"res\": {\r\n        const base = operands[0].value\r\n        if (base < 0) {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }} / 2`\r\n          mayNeedWrapping = true\r\n        }\r\n        else if (base >= 0.75) formula = fStr`100% / ( ${{ operands, shouldWrap }} * 4 + 100% )`\r\n        else {\r\n          formula = fStr`100% - ${{ operands, shouldWrap }}`\r\n          mayNeedWrapping = true\r\n        }\r\n        break\r\n      }\r\n      default: assertUnreachable(operation)\r\n    }\r\n    switch (operation) {\r\n      case \"add\": case \"mul\":\r\n        if (operands.length <= 1) mayNeedWrapping = operands[0]?.mayNeedWrapping ?? true\r\n        else if (operation === \"add\") mayNeedWrapping = true\r\n    }\r\n\r\n    const value = allOperations[operation](operands.map(x => x.value))\r\n    const dependencies = new Set([...operands.flatMap(x =>\r\n      x.pivot && x.assignment\r\n        ? [x.assignment, ...x.dependencies]\r\n        : [...x.dependencies])])\r\n    const result: ContextNodeDisplay = {\r\n      formula: formula.display,\r\n      empty: operands.every(x => x.empty),\r\n      value, mayNeedWrapping,\r\n      pivot: false, dependencies,\r\n    }\r\n    if (variant) result.variant = variant\r\n    return result\r\n  }\r\n}\r\ntype ContextNodeDisplayList = { operands: ContextNodeDisplay[], separator?: string, shouldWrap?: boolean }\r\nfunction fStr(strings: TemplateStringsArray, ...list: ContextNodeDisplayList[]): { display: Displayable, dependencies: Displayable[] } {\r\n  const dependencies = new Set<Displayable>()\r\n  const predisplay: Displayable[] = []\r\n\r\n  strings.forEach((string, i) => {\r\n    predisplay.push(string)\r\n\r\n    const key = list[i]\r\n    if (key) {\r\n      const { operands, shouldWrap, separator = \", \" } = key\r\n      operands.forEach((item, i, array) => {\r\n        let itemFormula: Displayable\r\n        if (!item.pivot && item.formula) itemFormula = item.formula\r\n        else itemFormula = createFormulaComponent(item)\r\n\r\n        if (shouldWrap && item.mayNeedWrapping) {\r\n          predisplay.push(\"( \")\r\n          predisplay.push(itemFormula)\r\n          predisplay.push(\" )\")\r\n        } else {\r\n          predisplay.push(itemFormula)\r\n        }\r\n        if (i + 1 < array.length) predisplay.push(separator)\r\n        item.dependencies.forEach(x => dependencies.add(x))\r\n      })\r\n    }\r\n  })\r\n  return { display: mergeFormulaComponents(predisplay), dependencies: [...dependencies] }\r\n}\r\nfunction mergeVariants<V>(operands: ContextNodeDisplay<V>[]): ContextNodeDisplay<V>[\"variant\"] {\r\n  const unique = new Set(operands.map(x => x.variant))\r\n  if (unique.size > 1) unique.delete(undefined)\r\n  if (unique.size > 1) unique.delete(\"physical\")\r\n  // Prefer reactions\r\n  if (unique.has(\"melt\")) return \"melt\"\r\n  if (unique.has(\"vaporize\")) return \"vaporize\"\r\n  return unique.values().next().value\r\n}\r\nfunction computeNodeDisplay<V>(node: ContextNodeDisplay<V>): NodeDisplay<V> {\r\n  const { key, prefix, dependencies, value, variant, formula, assignment, empty } = node\r\n  return {\r\n    operation: true,\r\n    key, value, variant, prefix,\r\n    isEmpty: empty,\r\n    unit: KeyMap.unit(key),\r\n    formula, formulas: [...(assignment ? [assignment] : []), ...dependencies]\r\n  }\r\n}\r\n\r\n//* Comment/uncomment this line to toggle between string formulas and JSX formulas\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant, fixed } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = <ColorText color=\"info\">{valueString(value, KeyMap.unit(key), fixed)}</ColorText>\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? <>{KeyMap.getPrefixStr(prefix)} </> : <></>\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? <ColorText color=\"secondary\"> ({source})</ColorText> : null\r\n    node.name = <><ColorText color={variant}>{prefixDisplay}{KeyMap.get(key!)}</ColorText>{sourceDisplay}</>\r\n\r\n    if (formula)\r\n      node.assignment = <div id=\"formula\">{node.name} {node.valueDisplay} = {formula}</div>\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  //TODO: change formula size in the formula display element instead\r\n  return name ? <><span style={{ fontSize: \"85%\" }}>{name}</span> {valueDisplay}</> : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return <>{components.map((x, i) => <span key={i}>{x}</span>)}</>\r\n}\r\n/*/\r\nfunction createDisplay(node: ContextNodeDisplay<number | string | undefined>) {\r\n  const { key, value, formula, prefix, source, variant, fixed } = node\r\n  if (typeof value !== \"number\") return\r\n  node.valueDisplay = valueString(value, KeyMap.unit(key), fixed)\r\n  if (key && key !== '_') {\r\n    const prefixDisplay = (prefix && !source) ? `${KeyMap.getPrefixStr(prefix)} ` : \"\"\r\n    // TODO: Convert `source` key to actual name\r\n    const sourceDisplay = source ? ` ${source}` : \"\"\r\n    node.name = `${prefixDisplay}${KeyMap.getNoUnit(key!)}${sourceDisplay}`\r\n\r\n    if (formula)\r\n      node.assignment = `${node.name} ${node.valueDisplay} = ${formula}`\r\n  }\r\n}\r\nfunction createFormulaComponent(node: ContextNodeDisplay): Displayable {\r\n  const { name, valueDisplay } = node\r\n  return name ? `${name} ${valueDisplay}` : valueDisplay!\r\n}\r\nfunction mergeFormulaComponents(components: Displayable[]): Displayable {\r\n  return (components as string[]).join(\"\")\r\n}\r\n//*/\r\n\r\ninterface ContextNodeDisplay<V = number> {\r\n  key?: Info[\"key\"]\r\n  prefix?: Info[\"prefix\"]\r\n  source?: Info[\"source\"]\r\n  variant?: Info[\"variant\"]\r\n  fixed?: Info[\"fixed\"]\r\n\r\n  pivot: boolean\r\n  empty: boolean\r\n\r\n  value: V\r\n\r\n  dependencies: Set<Displayable>\r\n\r\n  mayNeedWrapping: boolean\r\n\r\n  // Don't set these manually outside of `UIData.computeNode`\r\n  name?: Displayable\r\n  valueDisplay?: Displayable\r\n  formula?: Displayable\r\n  assignment?: Displayable\r\n}\r\n\r\nconst illformed: ContextNodeDisplay = {\r\n  value: NaN, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nconst illformedStr: ContextNodeDisplay<string | undefined> = {\r\n  value: undefined, pivot: true,\r\n  empty: false,\r\n  dependencies: new Set(),\r\n  mayNeedWrapping: false\r\n}\r\nfunction makeEmpty(emptyValue: number): ContextNodeDisplay<number>\r\nfunction makeEmpty(emptyValue: string | undefined): ContextNodeDisplay<string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined>\r\nfunction makeEmpty(emptyValue: number | string | undefined): ContextNodeDisplay<number | string | undefined> {\r\n  return {\r\n    value: emptyValue, pivot: false, empty: true, dependencies: new Set(), mayNeedWrapping: false\r\n  }\r\n}\r\n","import Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { ICachedArtifact, MainStatKey, SubstatKey } from \"../Types/artifact\";\r\nimport { ICachedCharacter } from \"../Types/character\";\r\nimport { allElementsWithPhy, ArtifactSetKey, CharacterKey } from \"../Types/consts\";\r\nimport { ICachedWeapon } from \"../Types/weapon\";\r\nimport { crawlObject, deepClone, layeredAssignment, objectKeyMap, objPathValue } from \"../Util/Util\";\r\nimport { input } from \"./index\";\r\nimport { Data, DisplaySub, Info, Input, NumNode, ReadNode, StrNode } from \"./type\";\r\nimport { NodeDisplay, UIData } from \"./uiData\";\r\nimport { constant, customRead, percent, resetData, setReadNodeKeys } from \"./utils\";\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nfunction inferInfoMut(data: Data, source?: Info[\"source\"]): Data {\r\n  crawlObject(data, [], (x: any) => x.operation, (x: NumNode, path: string[]) => {\r\n    if (path[0] === \"teamBuff\") path = path.slice(1)\r\n    const reference = objPathValue(input, path) as ReadNode<number> | undefined\r\n    if (reference)\r\n      x.info = { ...reference.info, prefix: undefined, source }\r\n    else if (path[0] !== \"tally\")\r\n      console.error(`Detect ${source} buff into non-existant key path ${path}`)\r\n  })\r\n\r\n  return data\r\n}\r\nfunction dataObjForArtifact(art: ICachedArtifact, mainStatAssumptionLevel: number = 0): Data {\r\n  const mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level))\r\n  const stats: [ArtifactSetKey | MainStatKey | SubstatKey, number][] = []\r\n  stats.push([art.mainStatKey, mainStatVal])\r\n  art.substats.forEach(({ key, accurateValue }) => key && stats.push([key, accurateValue]))\r\n  return {\r\n    art: {\r\n      ...Object.fromEntries(stats.map(([key, value]) =>\r\n        key.endsWith(\"_\") ? [key, percent(value / 100)] : [key, constant(value)])),\r\n      [art.slotKey]: {\r\n        id: constant(art.id), set: constant(art.setKey)\r\n      },\r\n    },\r\n    artSet: {\r\n      [art.setKey]: constant(1),\r\n    },\r\n  }\r\n}\r\nfunction dataObjForCharacter(char: ICachedCharacter): Data {\r\n  const result: Data = {\r\n    lvl: constant(char.level),\r\n    constellation: constant(char.constellation),\r\n    asc: constant(char.ascension),\r\n    infusion: {\r\n      team: char.infusionAura ? constant(char.infusionAura) : undefined,\r\n    },\r\n    premod: {\r\n      auto: constant(char.talent.auto),\r\n      skill: constant(char.talent.skill),\r\n      burst: constant(char.talent.burst),\r\n    },\r\n    enemy: {\r\n      ...objectKeyMap(allElementsWithPhy.map(ele => `${ele}_res_`), ele =>\r\n        percent((char.enemyOverride[`${ele.slice(0, -5)}_enemyRes_`] ?? 10) / 100)),\r\n      level: constant(char.enemyOverride.enemyLevel ?? char.level),\r\n    },\r\n    hit: {\r\n      hitMode: constant(char.hitMode),\r\n      reaction: constant(char.reactionMode),\r\n    },\r\n    customBonus: {},\r\n  }\r\n\r\n  for (const [key, value] of Object.entries(char.bonusStats))\r\n    result.customBonus![key] = key.endsWith('_') ? percent(value / 100) : constant(value)\r\n\r\n  if (char.enemyOverride.enemyDefRed_)\r\n    result.premod!.enemyDefRed_ = percent(char.enemyOverride.enemyDefRed_ / 100)\r\n  if (char.enemyOverride.enemyDefIgn_)\r\n    result.enemy!.defIgn = percent(char.enemyOverride.enemyDefIgn_ / 100)\r\n\r\n  crawlObject(char.conditional, [\"conditional\"], (x: any) => typeof x === \"string\", (x: string, keys: string[]) =>\r\n    layeredAssignment(result, keys, constant(x)))\r\n  return result\r\n}\r\nfunction dataObjForWeapon(weapon: ICachedWeapon): Data {\r\n  return {\r\n    weapon: {\r\n      lvl: constant(weapon.level),\r\n      asc: constant(weapon.ascension),\r\n      refinement: constant(weapon.refinement),\r\n      refineIndex: constant(weapon.refinement - 1)\r\n    },\r\n  }\r\n}\r\n/** These read nodes are very context-specific, and cannot be used anywhere else outside of `uiDataForTeam` */\r\nconst teamBuff = setReadNodeKeys(deepClone(input), [\"teamBuff\"]); // Use ONLY by dataObjForTeam\r\nfunction uiDataForTeam(teamData: Dict<CharacterKey, Data[]>, activeCharKey?: CharacterKey): Dict<CharacterKey, { target: UIData, buffs: Dict<CharacterKey, UIData> }> {\r\n  // May the goddess of wisdom bless any and all souls courageous\r\n  // enough to attempt for the understanding of this abomination.\r\n\r\n  const mergedData = Object.entries(teamData).map(([key, data]) => [key, { ...mergeData(data) }] as [CharacterKey, Data])\r\n  const result = Object.fromEntries(mergedData.map(([key]) =>\r\n    [key, { targetRef: {} as Data, buffs: [] as Data[], calcs: {} as Dict<CharacterKey, Data> }]))\r\n\r\n  const customReadNodes = {}\r\n  function getReadNode(path: readonly string[]): ReadNode<number> {\r\n    const base = (path[0] === \"teamBuff\")\r\n      ? objPathValue(teamBuff, path.slice(1))\r\n      : objPathValue(input, path)\r\n    if (base) return base\r\n    const custom = objPathValue(customReadNodes, path)\r\n    if (custom) return custom\r\n    const newNode = customRead(path)\r\n    if (path[0] === \"teamBuff\" && path[1] === \"tally\") newNode.accu = \"add\"\r\n    layeredAssignment(customReadNodes, path, newNode)\r\n    return newNode\r\n  }\r\n\r\n  Object.values(result).forEach(({ targetRef, buffs, calcs }) =>\r\n    mergedData.forEach(([sourceKey, source]) => {\r\n      const sourceBuff = source.teamBuff\r\n      // Create new copy of `calc` as we're mutating it later\r\n      const buff: Data = {}, calc: Data = deepClone({ teamBuff: sourceBuff })\r\n      buffs.push(buff)\r\n      calcs[sourceKey] = calc\r\n\r\n      // This construction creates a `Data` representing buff\r\n      // from `source` applying to `target`. It has 3 data:\r\n      // - `target` contains the reference for the final\r\n      //   data. It is not populated at this stage,\r\n      // - `calc` contains the calculation of the buffs,\r\n      // - `buff` contains read nodes that point to the\r\n      //   calculation in `calc`.\r\n\r\n      crawlObject(sourceBuff, [], (x: any) => x.operation, (x: NumNode | StrNode, path: string[]) => {\r\n        const info: Info = { ...objPathValue(input, path), source: sourceKey, prefix: undefined, asConst }\r\n        layeredAssignment(buff, path, resetData(getReadNode([\"teamBuff\", ...path]), calc, info))\r\n\r\n        crawlObject(x, [], (x: any) => x?.operation === \"read\", (x: ReadNode<number | string>) => {\r\n          if (x.path[0] === \"targetBuff\") return // Ignore teamBuff access\r\n\r\n          let readNode: ReadNode<number | string> | undefined, data: Data\r\n          if (x.path[0] === \"target\") { // Link the node to target data\r\n            readNode = getReadNode(x.path.slice(1))\r\n            data = targetRef\r\n          } else { // Link the node to source data\r\n            readNode = x\r\n            data = result[sourceKey].targetRef\r\n          }\r\n          layeredAssignment(calc, x.path, resetData(readNode, data))\r\n        })\r\n      })\r\n    })\r\n  )\r\n  mergedData.forEach(([targetKey, data]) => {\r\n    delete data.teamBuff\r\n    const { targetRef, buffs } = result[targetKey]\r\n    const buff = mergeData(buffs)\r\n    crawlObject(buff ?? {}, [], (x => x.operation), (x: NumNode, path: string[]) => {\r\n      // CAUTION\r\n      // This is safe only because `buff` is created using only `resetData`\r\n      // and `mergeData`. So every node here is created from either of the\r\n      // two functions, so the mutation wont't affect existing nodes.\r\n      x.info = { ...(objPathValue(teamBuff, path) as ReadNode<number> | undefined)?.info, prefix: \"teamBuff\", pivot }\r\n    })\r\n    Object.assign(targetRef, mergeData([data, buff, { teamBuff: buff, activeCharKey: constant(activeCharKey) }]))\r\n    targetRef[\"target\"] = targetRef\r\n  })\r\n  const origin = new UIData(undefined as any, undefined)\r\n  return Object.fromEntries(Object.entries(result).map(([key, value]) =>\r\n    [key, {\r\n      target: new UIData(value.targetRef, origin),\r\n      buffs: Object.fromEntries(Object.entries(value.calcs).map(([key, value]) =>\r\n        [key, new UIData(value, origin)]))\r\n    }]))\r\n}\r\nfunction mergeData(data: Data[]): Data {\r\n  function internal(data: any[], path: string[]): any {\r\n    if (data.length <= 1) return data[0]\r\n    if (data[0].operation) {\r\n      if (path[0] === \"teamBuff\") path = path.slice(1)\r\n      let { accu, type } = (objPathValue(input, path) as ReadNode<number> | ReadNode<string> | undefined) ?? {}\r\n      if (path[0] === \"tally\") accu = \"add\"\r\n      else if (accu === undefined) {\r\n        const errMsg = `Multiple entries when merging \\`unique\\` for key ${path}`\r\n        if (process.env.NODE_ENV === \"development\")\r\n          throw new Error(errMsg)\r\n        else\r\n          console.error(errMsg)\r\n\r\n        accu = type === \"number\" ? \"max\" : \"small\"\r\n      }\r\n      const result: NumNode | StrNode = { operation: accu, operands: data }\r\n      return result\r\n    } else {\r\n      return Object.fromEntries([...new Set(data.flatMap(x => Object.keys(x) as string[]))]\r\n        .map(key => [key, internal(data.map(x => x[key]).filter(x => x), [...path, key])]))\r\n    }\r\n  }\r\n  return data.length ? internal(data, []) : {}\r\n}\r\n\r\nfunction computeUIData(data: Data[]): UIData {\r\n  return new UIData(mergeData(data), undefined)\r\n}\r\ntype ComparedNodeDisplay<V = number> = NodeDisplay<V> & { diff: V }\r\nfunction compareTeamBuffUIData(uiData1: UIData, uiData2: UIData): Input<ComparedNodeDisplay, ComparedNodeDisplay<string>> {\r\n  return compareInternal(uiData1.getTeamBuff(), uiData2.getTeamBuff())\r\n}\r\nfunction compareDisplayUIData(uiData1: UIData, uiData2: UIData): { [key: string]: DisplaySub<ComparedNodeDisplay> } {\r\n  return compareInternal(uiData1.getDisplay(), uiData2.getDisplay())\r\n}\r\nfunction compareInternal(data1: any | undefined, data2: any | undefined): any {\r\n  if (data1?.operation || data2?.operation) {\r\n    const d1 = data1 as NodeDisplay | undefined\r\n    const d2 = data2 as NodeDisplay | undefined\r\n\r\n    if ((d1 && !d1.operation) || (d2 && !d2.operation))\r\n      throw new Error(\"Unmatched structure when comparing UIData\")\r\n\r\n    const result: ComparedNodeDisplay = {\r\n      operation: true,\r\n      value: 0,\r\n      isEmpty: true,\r\n      unit: d2?.unit!,\r\n      formulas: [],\r\n      ...d1,\r\n      diff: (d2?.value ?? 0) - (d1?.value ?? 0)\r\n    }\r\n    if (typeof d1?.value === \"string\" || typeof d2?.value === \"string\") {\r\n      // In case `string` got involved, just use the other value\r\n      result.value = d1?.value ?? \"\" as any\r\n      result.diff = d2?.value ?? \"\" as any\r\n    }\r\n    return result\r\n  }\r\n\r\n  if (data1 || data2) {\r\n    const keys = new Set([...Object.keys(data1 ?? {}), ...Object.keys(data2 ?? {})])\r\n    return Object.fromEntries([...keys].map(key => [key, compareInternal(data1?.[key], data2?.[key])]))\r\n  }\r\n}\r\n\r\nexport type { NodeDisplay, UIData };\r\nexport {\r\n  dataObjForArtifact, dataObjForCharacter, dataObjForWeapon,\r\n  mergeData, computeUIData, inferInfoMut,\r\n  uiDataForTeam, compareTeamBuffUIData, compareDisplayUIData\r\n};\r\n","import { allEleEnemyResKeys } from \"../KeyMap\"\r\nimport { allArtifactSets, allElementsWithPhy, allRegions, allSlotKeys } from \"../Types/consts\"\r\nimport { crawlObject, deepClone, objectKeyMap, objectKeyValueMap } from \"../Util/Util\"\r\nimport { Data, Info, NumNode, ReadNode, StrNode } from \"./type\"\r\nimport { constant, equalStr, frac, infoMut, lookup, max, min, naught, percent, prod, read, res, setReadNodeKeys, stringRead, sum, unit } from \"./utils\"\r\n\r\nconst asConst = true as const, pivot = true as const\r\n\r\nconst allElements = allElementsWithPhy\r\nconst allTalents = [\"auto\", \"skill\", \"burst\"] as const\r\nconst allMoves = [\"normal\", \"charged\", \"plunging\", \"skill\", \"burst\", \"elemental\"] as const\r\nconst allArtModStats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"heal_\"] as const\r\nconst allTransformative = [\"overloaded\", \"shattered\", \"electrocharged\", \"superconduct\", \"swirl\"] as const\r\nconst allAmplifying = [\"vaporize\", \"melt\"] as const\r\nconst allMisc = [\r\n  \"stamina\", \"staminaDec_\", \"staminaSprintDec_\", \"staminaGlidingDec_\", \"staminaChargedDec_\",\r\n  \"incHeal_\", \"shield_\", \"cdRed_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\", \"dmgRed_\"\r\n] as const\r\n\r\nconst allModStats = [\r\n  ...allArtModStats,\r\n  ...([\"all\", \"burning\", ...allTransformative, ...allAmplifying, ...allMoves] as const).map(x => `${x}_dmg_` as const),\r\n]\r\nconst allNonModStats = [\r\n  ...allElements.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_res_` as const]),\r\n  ...allMoves.flatMap(x => [\r\n    `${x}_dmgInc` as const,\r\n    `${x}_critDMG_` as const,\r\n    `${x}_critRate_` as const]),\r\n  \"all_dmgInc\" as const,\r\n  ...allEleEnemyResKeys,\r\n  \"enemyDefRed_\" as const,\r\n  ...allMisc,\r\n]\r\n\r\nconst talent = objectKeyMap(allTalents, _ => read())\r\nconst allModStatNodes = objectKeyMap(allModStats, key => read(undefined, { key }))\r\nconst allNonModStatNodes = objectKeyMap(allNonModStats, key => read(undefined, { key }))\r\n\r\nfor (const ele of allElements) {\r\n  allNonModStatNodes[`${ele}_res_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_enemyRes_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_critDMG_`].info!.variant = ele\r\n  allNonModStatNodes[`${ele}_dmgInc`].info!.variant = ele\r\n  allModStatNodes[`${ele}_dmg_`].info!.variant = ele\r\n}\r\nfor (const reaction of [...allTransformative, ...allAmplifying]) {\r\n  allModStatNodes[`${reaction}_dmg_`].info!.variant = reaction\r\n}\r\n\r\nfunction withDefaultInfo<T>(info: Info, value: T): T {\r\n  value = deepClone(value)\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => x.info = { ...info, ...x.info, })\r\n  return value\r\n}\r\nfunction markAccu<T>(accu: ReadNode<number>[\"accu\"], value: T): void {\r\n  crawlObject(value, [], (x: any) => x.operation, (x: NumNode | StrNode) => {\r\n    if (x.operation === \"read\" && x.type === \"number\") x.accu = accu\r\n  })\r\n}\r\n\r\n/** All read nodes */\r\nconst input = setReadNodeKeys(deepClone({\r\n  activeCharKey: stringRead(),\r\n  charKey: stringRead(), charEle: stringRead(), weaponType: stringRead(),\r\n  lvl: read(undefined, { key: \"level\", prefix: \"char\" }), constellation: read(), asc: read(), special: read(),\r\n\r\n  infusion: {\r\n    overridableSelf: stringRead(\"small\"),\r\n    nonOverridableSelf: stringRead(\"small\"),\r\n    team: stringRead(\"small\"),\r\n  },\r\n\r\n  base: objectKeyMap(['atk', 'hp', 'def'], key => read(\"add\", { key })),\r\n  customBonus: withDefaultInfo({ prefix: \"custom\", pivot }, {\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n  }),\r\n  bonus: { ...talent },\r\n  premod: { ...talent, ...allModStatNodes, ...allNonModStatNodes },\r\n  total: withDefaultInfo({ prefix: \"total\", pivot }, {\r\n    ...talent, ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, read()]),\r\n    ...allModStatNodes, ...allNonModStatNodes,\r\n    /** Total Crit Rate capped to [0%, 100%] */\r\n    cappedCritRate: read(undefined, { key: \"critRate_\" }),\r\n  }),\r\n\r\n  art: withDefaultInfo({ prefix: \"art\", asConst }, {\r\n    ...objectKeyMap(allArtModStats, key => allModStatNodes[key]),\r\n    ...objectKeyMap(allSlotKeys, _ => ({ id: stringRead(), set: stringRead() })),\r\n  }),\r\n  artSet: objectKeyMap(allArtifactSets, set => read(\"add\", { key: set })),\r\n\r\n  weapon: withDefaultInfo({ prefix: \"weapon\", asConst }, {\r\n    key: stringRead(), type: stringRead(),\r\n\r\n    lvl: read(), asc: read(), refinement: read(), refineIndex: read(),\r\n    main: read(), sub: read(), sub2: read(),\r\n  }),\r\n\r\n  enemy: {\r\n    def: read(\"add\", { key: \"enemyDef_multi\", pivot }),\r\n    ...objectKeyMap(allElements.map(ele => `${ele}_resMulti` as const), _ => read()),\r\n\r\n    level: read(undefined, { key: \"enemyLevel\" }),\r\n    ...objectKeyValueMap(allElements, ele => [`${ele}_res_`, read(undefined)]),\r\n    defRed: read(undefined),\r\n    defIgn: read(\"add\", { key: \"enemyDefIgn_\", pivot }),\r\n  },\r\n\r\n  hit: {\r\n    ele: stringRead(), reaction: stringRead(), move: stringRead(), hitMode: stringRead(),\r\n    base: read(\"add\", { key: \"base\" }),\r\n\r\n    dmgBonus: read(\"add\", { key: \"dmg_\", pivot }),\r\n    dmgInc: read(\"add\", { key: \"dmgInc\", pivot }),\r\n    dmg: read(),\r\n  },\r\n}))\r\n\r\nconst { base, bonus, customBonus, premod, total, art, hit, enemy } = input\r\n\r\n// Adjust `info` for printing\r\nmarkAccu('add', {\r\n  bonus, customBonus, premod, art,\r\n  total: objectKeyMap(allModStats, stat => total[stat]),\r\n})\r\nbonus.auto.info = { key: \"autoBoost\" }\r\nbonus.skill.info = { key: \"skillBoost\" }\r\nbonus.burst.info = { key: \"burstBoost\" }\r\nbase.atk.info = { key: \"atk\", prefix: \"base\", pivot }\r\ndelete total.critRate_.info!.pivot\r\ntotal.critRate_.info!.prefix = \"uncapped\"\r\n\r\n// Nodes that are not used anywhere else but `common` below\r\n\r\n/** Base Amplifying Bonus */\r\nconst baseAmpBonus = sum(unit, prod(25 / 9, frac(total.eleMas, 1400)))\r\n/** Effective reaction, taking into account the hit's element */\r\nexport const effectiveReaction = lookup(hit.ele, {\r\n  pyro: lookup(hit.reaction, { pyro_vaporize: constant(\"vaporize\"), pyro_melt: constant(\"melt\") }, undefined),\r\n  hydro: equalStr(hit.reaction, \"hydro_vaporize\", \"vaporize\"),\r\n  cryo: equalStr(hit.reaction, \"cryo_melt\", \"melt\"),\r\n}, undefined)\r\n\r\nconst common: Data = {\r\n  premod: {\r\n    ...objectKeyMap(allTalents, talent => bonus[talent]),\r\n    ...objectKeyMap(allNonModStats, key => customBonus[key]),\r\n    ...objectKeyMap(allModStats, key => {\r\n      const operands: NumNode[] = []\r\n      switch (key) {\r\n        case \"atk\": case \"def\": case \"hp\":\r\n          operands.push(prod(base[key], sum(unit, premod[`${key}_`])))\r\n          break\r\n        case \"critRate_\":\r\n          operands.push(percent(0.05, { key, prefix: \"default\" }),\r\n            lookup(hit.move, objectKeyMap(allMoves, move => premod[`${move}_critRate_`]), 0))\r\n          break\r\n        case \"critDMG_\":\r\n          operands.push(percent(0.5, { key, prefix: \"default\" }),\r\n            lookup(hit.ele, objectKeyMap(allElements, ele => premod[`${ele}_critDMG_`]), 0),\r\n            lookup(hit.move, objectKeyMap(allMoves, ele => premod[`${ele}_critDMG_`]), 0))\r\n          break\r\n        case \"enerRech_\":\r\n          operands.push(percent(1, { key, prefix: \"default\" }))\r\n          break\r\n      }\r\n      return sum(...[...operands, art[key], customBonus[key]].filter(x => x))\r\n    }),\r\n  },\r\n  total: {\r\n    ...objectKeyMap(allTalents, talent => premod[talent]),\r\n    ...objectKeyMap(allModStats, key => premod[key]),\r\n    ...objectKeyMap(allNonModStats, key => premod[key]),\r\n    ...objectKeyValueMap(allTalents, talent => [`${talent}Index`, sum(total[talent], -1)]),\r\n    stamina: sum(constant(100, { key: \"stamina\", prefix: \"default\" }), customBonus.stamina),\r\n\r\n    cappedCritRate: max(min(total.critRate_, unit), naught),\r\n  },\r\n\r\n  hit: {\r\n    dmgBonus: sum(\r\n      total.all_dmg_,\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmg_`]), naught),\r\n      lookup(hit.ele, objectKeyMap(allElements, ele => total[`${ele}_dmg_`]), naught)\r\n    ),\r\n    dmgInc: sum(\r\n      total.all_dmgInc,\r\n      lookup(hit.ele, objectKeyMap(allElements, element => total[`${element}_dmgInc`]), NaN),\r\n      lookup(hit.move, objectKeyMap(allMoves, move => total[`${move}_dmgInc`]), NaN)\r\n    ),\r\n    dmg: prod(\r\n      sum(hit.base, hit.dmgInc),\r\n      sum(unit, hit.dmgBonus),\r\n      lookup(hit.hitMode, {\r\n        hit: unit,\r\n        critHit: sum(unit, total.critDMG_),\r\n        avgHit: sum(unit, prod(total.cappedCritRate, total.critDMG_)),\r\n      }, NaN),\r\n      enemy.def,\r\n      lookup(hit.ele,\r\n        objectKeyMap(allElements, ele => enemy[`${ele}_resMulti` as const]), NaN),\r\n      lookup(effectiveReaction, {\r\n        melt: lookup(hit.ele, {\r\n          pyro: prod(2, sum(baseAmpBonus, total.melt_dmg_)),\r\n          cryo: prod(1.5, sum(baseAmpBonus, total.melt_dmg_)),\r\n        }, 1, { key: \"melt_dmg_\" }),\r\n        vaporize: lookup(hit.ele, {\r\n          hydro: prod(2, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n          pyro: prod(1.5, sum(baseAmpBonus, total.vaporize_dmg_)),\r\n        }, 1, { key: \"vaporize_dmg_\" }),\r\n      }, 1),\r\n    ),\r\n  },\r\n\r\n  enemy: {\r\n    // TODO: shred cap of 90%\r\n    def: frac(sum(input.lvl, 100), prod(sum(enemy.level, 100), sum(unit, prod(-1, enemy.defRed)), sum(unit, prod(-1, enemy.defIgn)))),\r\n    defRed: total.enemyDefRed_,\r\n    ...objectKeyValueMap(allElements, ele =>\r\n      [`${ele}_resMulti`, res(infoMut(sum(enemy[`${ele}_res_`], total[`${ele}_enemyRes_`]), { key: `${ele}_res_`, variant: ele }))]),\r\n  },\r\n}\r\n\r\nconst target = setReadNodeKeys(deepClone(input), [\"target\"])\r\nconst tally = setReadNodeKeys(objectKeyMap([...allElements, ...allRegions], _ => read(\"add\")), [\"tally\"])\r\n\r\n/**\r\n * List of `input` nodes, rearranged to conform to the needs of the\r\n * UI code. This is a separate list so that the evolution of the UIs\r\n * does not rely on the structure of `input`. So the UI code can rearrange\r\n * nodes as it sees fit without requiring updates to data sheets, which\r\n * pertains ~90% of all `input`-related code, and so are very sensitive\r\n * to any changes to `input`. For zero overhead, use the nodes directly\r\n * from `input` instead of a copy.\r\n */\r\nconst uiInput = input\r\n\r\nexport {\r\n  input, uiInput, common, customBonus,\r\n\r\n  target, tally,\r\n}\r\n","import { AnyNode, NumNode, StrNode } from \"./type\"\r\nimport { constant } from \"./utils\"\r\n\r\nexport function forEachNodes(formulas: (NumNode | StrNode)[], topDown: (formula: (NumNode | StrNode)) => void, bottomUp: (formula: (NumNode | StrNode)) => void): void {\r\n  const visiting = new Set<(NumNode | StrNode)>(), visited = new Set<(NumNode | StrNode)>()\r\n\r\n  function traverse(formula: (NumNode | StrNode)) {\r\n    if (visited.has(formula)) return\r\n\r\n    if (visiting.has(formula)) {\r\n      console.error(\"Found cyclical dependency during formula traversal\")\r\n      return\r\n    }\r\n    visiting.add(formula)\r\n\r\n    topDown(formula)\r\n\r\n    formula.operands.forEach(traverse)\r\n\r\n    bottomUp(formula)\r\n\r\n    visiting.delete(formula)\r\n    visited.add(formula)\r\n  }\r\n\r\n  formulas.forEach(traverse)\r\n}\r\n\r\nexport function mapFormulas(formulas: NumNode[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): NumNode[]\r\nexport function mapFormulas(formulas: (NumNode | StrNode)[], topDownMap: (formula: (NumNode | StrNode)) => (NumNode | StrNode), bottomUpMap: (current: (NumNode | StrNode), orig: (NumNode | StrNode)) => (NumNode | StrNode)): (NumNode | StrNode)[] {\r\n  const visiting = new Set<(NumNode | StrNode)>()\r\n  const topDownMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n  const bottomUpMapped = new Map<(NumNode | StrNode), (NumNode | StrNode)>()\r\n\r\n  function check(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    let topDown = topDownMapped.get(formula)\r\n    if (topDown) return topDown\r\n    topDown = topDownMap(formula)\r\n\r\n    let bottomUp = bottomUpMapped.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n    visiting.add(topDown)\r\n\r\n    bottomUp = bottomUpMap(traverse(topDown), formula)\r\n\r\n    visiting.delete(topDown)\r\n\r\n    topDownMapped.set(formula, bottomUp)\r\n    bottomUpMapped.set(topDown, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: (NumNode | StrNode)): (NumNode | StrNode) {\r\n    const operands = formula.operands.map(check)\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands } as any\r\n  }\r\n\r\n  const result = formulas.map(check)\r\n  return arrayEqual(result, formulas) ? formulas : result\r\n}\r\n\r\nexport function mapContextualFormulas(formulas: NumNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): NumNode[]\r\nexport function mapContextualFormulas(formulas: AnyNode[], baseContextId: number, topDownMap: (formula: AnyNode, contextId: ContextID) => [AnyNode, ContextID], bottomUpMap: (formula: AnyNode, orig: AnyNode, contextId: ContextID, origContextId: ContextID) => AnyNode): AnyNode[] {\r\n  const visiting = new Set<AnyNode>()\r\n  const topDownByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n  const bottomUpByContext = new Map<ContextID, Map<AnyNode, AnyNode>>()\r\n\r\n  function check(formula: AnyNode, parentContextId: ContextID): AnyNode {\r\n    let topDownMapping = topDownByContext.get(parentContextId)\r\n    if (!topDownMapping) {\r\n      topDownMapping = new Map()\r\n      topDownByContext.set(parentContextId, topDownMapping)\r\n    }\r\n\r\n    let topDown = topDownMapping.get(formula)\r\n    if (topDown) return topDown\r\n    let topDownContextId: number\r\n    [topDown, topDownContextId] = topDownMap(formula, parentContextId)\r\n\r\n    if (visiting.has(topDown)) {\r\n      console.error(\"Found cyclical dependency during formula mapping\")\r\n      return constant(NaN)\r\n    }\r\n\r\n    let bottomUpMapping = bottomUpByContext.get(topDownContextId)\r\n    if (!bottomUpMapping) {\r\n      bottomUpMapping = new Map()\r\n      bottomUpByContext.set(topDownContextId, bottomUpMapping)\r\n    }\r\n\r\n    let bottomUp = bottomUpMapping.get(topDown)\r\n    if (bottomUp) return bottomUp\r\n\r\n    visiting.add(topDown)\r\n    bottomUp = bottomUpMap(traverse(topDown, topDownContextId), formula, topDownContextId, parentContextId)\r\n    visiting.delete(topDown)\r\n\r\n    bottomUpMapping.set(topDown, bottomUp)\r\n    topDownMapping.set(formula, bottomUp)\r\n    return bottomUp\r\n  }\r\n\r\n  function traverse(formula: AnyNode, contextId: ContextID): AnyNode {\r\n    const operands = formula.operands.map(f => check(f, contextId))\r\n    return arrayEqual(operands, formula.operands) ? formula : { ...formula, operands }\r\n  }\r\n\r\n  const result = formulas.map(f => check(f, baseContextId))\r\n  return arrayEqual(formulas, result) ? formulas : result\r\n}\r\n\r\ntype ContextID = number\r\n\r\nfunction arrayEqual<T>(a: readonly T[] | undefined, b: readonly T[] | undefined): boolean {\r\n  if (a === undefined) return b === undefined\r\n  if (b === undefined) return false\r\n\r\n  return a.length === b.length && a.every((value, i) => value === b[i])\r\n}\r\n","import { assertUnreachable, objPathValue } from \"../Util/Util\"\r\nimport { forEachNodes, mapFormulas } from \"./internal\"\r\nimport { constant } from \"./utils\"\r\nimport { CommutativeMonoidOperation, ComputeNode, ConstantNode, Data, NumNode, Operation, ReadNode, StrNode, StrPrioNode } from \"./type\"\r\n\r\nconst allCommutativeMonoidOperations: StrictDict<CommutativeMonoidOperation, (_: number[]) => number> = {\r\n  min: (x: number[]): number => Math.min(...x),\r\n  max: (x: number[]): number => Math.max(...x),\r\n  add: (x: number[]): number => x.reduce((a, b) => a + b, 0),\r\n  mul: (x: number[]): number => x.reduce((a, b) => a * b, 1),\r\n}\r\nexport const allOperations: StrictDict<Operation | \"threshold\", (_: number[]) => number> = {\r\n  ...allCommutativeMonoidOperations,\r\n  res: ([res]: number[]): number => {\r\n    if (res < 0) return 1 - res / 2\r\n    else if (res >= 0.75) return 1 / (res * 4 + 1)\r\n    return 1 - res\r\n  },\r\n  sum_frac: (x: number[]): number => x[0] / x.reduce((a, b) => a + b),\r\n  threshold: ([value, threshold, pass, fail]: number[]): number => value >= threshold ? pass : fail,\r\n}\r\n\r\nconst commutativeMonoidOperationSet = new Set(Object.keys(allCommutativeMonoidOperations) as (NumNode[\"operation\"])[])\r\n\r\nexport function optimize(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  formulas = constantFold(formulas, topLevelData, shouldFold)\r\n  formulas = flatten(formulas)\r\n  formulas = deduplicate(formulas)\r\n  return formulas\r\n}\r\nexport function precompute(formulas: NumNode[], binding: (readNode: ReadNode<number>) => string): (values: Dict<string, number>) => number[] {\r\n  // TODO: Use min-cut to minimize the size of interim array\r\n  type Reference = string | number | { ins: Reference[] }\r\n\r\n  const uniqueReadStrings = new Set<string>()\r\n  const uniqueNumbers = new Set<number>()\r\n  const mapping = new Map<NumNode, Reference>()\r\n\r\n  forEachNodes(formulas, _ => { }, f => {\r\n    const { operation } = f\r\n    switch (operation) {\r\n      case \"read\":\r\n        if (f.type !== \"number\" || (f.accu && f.accu !== \"add\"))\r\n          throw new Error(`Unsupported ${operation} node in precompute`)\r\n        const name = binding(f)\r\n        uniqueReadStrings.add(name)\r\n        mapping.set(f, name)\r\n        break\r\n      case \"add\": case \"min\": case \"max\": case \"mul\":\r\n      case \"threshold\": case \"res\": case \"sum_frac\":\r\n        mapping.set(f, { ins: f.operands.map(op => mapping.get(op)!) })\r\n        break\r\n      case \"const\":\r\n        if (typeof f.value !== \"number\")\r\n          throw new Error(\"Found string constant while precomputing\")\r\n        const value = f.value\r\n        uniqueNumbers.add(value)\r\n        mapping.set(f as ConstantNode<number>, value)\r\n        break\r\n      case \"match\": case \"lookup\": case \"subscript\":\r\n      case \"prio\": case \"small\":\r\n      case \"data\": throw new Error(`Unsupported ${operation} node in precompute`)\r\n      default: assertUnreachable(operation)\r\n    }\r\n  })\r\n\r\n  /**\r\n   * [ Outputs , Input , Constants, Deduplicated Compute ]\r\n   *\r\n   * Note that only Compute nodes are deduplicated. Outputs are arranged\r\n   * in the same order as formulas even when they are duplicated. Inputs\r\n   * are arranged in the same order as the read strings, even when they\r\n   * overlap with outputs. If an output is a constant or a compute node,\r\n   * only put the data in the output region.\r\n   */\r\n  const locations = new Map<NumNode | number | string, number>()\r\n\r\n  const readStrings = [...uniqueReadStrings], readOffset = formulas.length\r\n  const constValues = [...uniqueNumbers]\r\n  const computations: { out: number, ins: number[], op: (_: number[]) => number, buff: number[] }[] = []\r\n\r\n  formulas.forEach((f, i) => {\r\n    locations.set(f, i)\r\n    if (f.operation === \"const\") locations.set(f.value, i)\r\n  })\r\n  // After this line, if some outputs are also read node, `locations`\r\n  // will point to the one in the read node portion instead.\r\n  readStrings.forEach((str, i) => locations.set(str, i + formulas.length))\r\n  let offset = formulas.length + readStrings.length\r\n  constValues.forEach(value => locations.has(value) || locations.set(value, offset++))\r\n\r\n  // `locations` is stable from this point on. We now only append new values.\r\n  // There is no change to existing values.\r\n  //\r\n  // DO NOT read from `location` prior to this line.\r\n  mapping.forEach((ref, node) => {\r\n    if (typeof ref !== \"object\") {\r\n      locations.set(node, locations.get(ref)!)\r\n      return\r\n    }\r\n    if (!locations.has(node)) locations.set(node, offset++)\r\n    computations.push({\r\n      out: locations.get(node)!,\r\n      ins: node.operands.map(op => locations.get(op)!),\r\n      op: allOperations[node.operation],\r\n      buff: Array(node.operands.length).fill(0),\r\n    })\r\n  })\r\n\r\n  const buffer = Array(offset).fill(0)\r\n  buffer.forEach((_, i, array) => array[i] = NaN)\r\n  uniqueNumbers.forEach(number => buffer[locations.get(number)!] = number)\r\n\r\n  // Copy target for when some outputs are duplicated\r\n  const copyList = formulas.map((node, i) => {\r\n    const src = locations.get(node)!\r\n    return src !== i ? [src, i] : undefined!\r\n  }).filter(x => x)\r\n  const copyFormula = copyList.length ? () => {\r\n    copyList.forEach(([src, dst]) => buffer[dst] = buffer[src])\r\n  } : undefined\r\n\r\n  return values => {\r\n    readStrings.forEach((id, i) => buffer[readOffset + i] = values[id] ?? 0)\r\n    computations.forEach(({ out, ins, op, buff }) => {\r\n      ins.forEach((i, j) => buff[j] = buffer[i])\r\n      buffer[out] = op(buff)\r\n    })\r\n    copyFormula?.()\r\n    return buffer\r\n  }\r\n}\r\n\r\nfunction flatten(formulas: NumNode[]): NumNode[] {\r\n  return mapFormulas(formulas, f => f, _formula => {\r\n    let result = _formula\r\n    if (commutativeMonoidOperationSet.has(_formula.operation as any)) {\r\n      const formula = _formula as ComputeNode\r\n      const { operation } = formula\r\n\r\n      let flattened = false\r\n      const operands = formula.operands.flatMap(dep =>\r\n        (dep.operation === operation) ? (flattened = true, dep.operands) : [dep])\r\n      result = flattened ? { ...formula, operands } : formula\r\n    }\r\n\r\n    return result\r\n  })\r\n}\r\nfunction deduplicate(formulas: NumNode[]): NumNode[] {\r\n  function elementCounts<T>(array: readonly T[]): Map<T, number> {\r\n    const result = new Map<T, number>()\r\n    for (const value of array) result.set(value, (result.get(value) ?? 0) + 1)\r\n    return result\r\n  }\r\n  function arrayFromCounts<T>(counts: Map<T, number>): T[] {\r\n    return [...counts].flatMap(([dep, count]) => Array(count).fill(dep))\r\n  }\r\n\r\n  const wrap = {\r\n    common: {\r\n      counts: new Map<NumNode, number>(),\r\n      formulas: new Set<NumNode>(),\r\n      operation: \"add\" as Operation\r\n    }\r\n  }\r\n\r\n  while (true) {\r\n    let next: typeof wrap.common | undefined\r\n\r\n    const factored: ComputeNode = { operation: wrap.common.operation, operands: arrayFromCounts(wrap.common.counts) }\r\n\r\n    let candidatesByOperation = new Map<Operation, [ComputeNode, Map<NumNode, number>][]>()\r\n    for (const operation of Object.keys(allCommutativeMonoidOperations))\r\n      candidatesByOperation.set(operation, [])\r\n\r\n    formulas = mapFormulas(formulas, _formula => {\r\n      if (wrap.common.formulas.has(_formula as NumNode)) {\r\n        const formula = _formula as ComputeNode\r\n        const remainingCounts = new Map(wrap.common.counts)\r\n        const operands = formula.operands.filter(dep => {\r\n          const count = remainingCounts.get(dep)\r\n          if (count) {\r\n            remainingCounts.set(dep, count - 1)\r\n            return false\r\n          }\r\n          return true\r\n        })\r\n\r\n        if (!operands.length)\r\n          return factored\r\n        operands.push(factored)\r\n        return { ...formula, operands }\r\n      }\r\n      return _formula\r\n    }, _formula => {\r\n      if (!commutativeMonoidOperationSet.has(_formula.operation as any)) return _formula\r\n      const formula = _formula as ComputeNode\r\n\r\n      if (next) {\r\n        if (next.operation === formula.operation) {\r\n          const currentCounts = elementCounts(formula.operands), commonCounts = new Map<NumNode, number>()\r\n          const nextCounts = next.counts\r\n          let total = 0\r\n\r\n          for (const [dependency, currentCount] of currentCounts.entries()) {\r\n            const commonCount = Math.min(currentCount, nextCounts.get(dependency) ?? 0)\r\n            if (commonCount) {\r\n              commonCounts.set(dependency, commonCount)\r\n              total += commonCount\r\n            } else commonCounts.delete(dependency)\r\n          }\r\n          if (total > 1) {\r\n            next.counts = commonCounts\r\n            next.formulas.add(formula)\r\n          }\r\n        }\r\n      } else {\r\n        const candidates = candidatesByOperation.get(formula.operation)!\r\n        const counts = elementCounts(formula.operands)\r\n\r\n        for (const [candidate, candidateCounts] of candidates) {\r\n          let total = 0\r\n\r\n          const commonCounts = new Map<NumNode, number>()\r\n          for (const [dependency, candidateCount] of candidateCounts.entries()) {\r\n            const count = Math.min(candidateCount, counts.get(dependency) ?? 0)\r\n            if (count) {\r\n              commonCounts.set(dependency, count)\r\n              total += count\r\n            }\r\n          }\r\n          if (total > 1) {\r\n            next = {\r\n              counts: commonCounts,\r\n              formulas: new Set([formula, candidate]),\r\n              operation: formula.operation\r\n            }\r\n            candidatesByOperation.clear()\r\n            break\r\n          }\r\n        }\r\n        if (!next) candidates.push([formula, counts])\r\n      }\r\n\r\n      return formula\r\n    })\r\n\r\n    if (next) wrap.common = next\r\n    else break\r\n  }\r\n\r\n  return formulas\r\n}\r\n\r\n/**\r\n * Replace nodes with known values with appropriate constants,\r\n * avoiding removal of any nodes that pass `isFixed` predicate\r\n */\r\nexport function constantFold(formulas: NumNode[], topLevelData: Data, shouldFold = (_formula: ReadNode<number | string | undefined>) => false): NumNode[] {\r\n  type Context = { data: Data[], processed: Map<NumNode | StrNode, NumNode | StrNode> }\r\n  const origin: Context = { data: [], processed: new Map() }\r\n  const nextContextMap = new Map([[origin, new Map<Data, Context>()]])\r\n\r\n  function fold(formula: StrNode, context: Context): StrNode\r\n  function fold(formula: NumNode, context: Context): NumNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode\r\n  function fold(formula: NumNode | StrNode, context: Context): NumNode | StrNode {\r\n    const old = context.processed.get(formula)\r\n    if (old) return old\r\n\r\n    const { operation } = formula\r\n    let result: NumNode | StrNode\r\n    switch (operation) {\r\n      case \"const\": return formula\r\n      case \"add\": case \"mul\": case \"max\": case \"min\":\r\n        const f = allOperations[operation]\r\n        const numericOperands: number[] = []\r\n        const formulaOperands: NumNode[] = formula.operands.filter(formula => {\r\n          const folded = fold(formula, context)\r\n          return (folded.operation === \"const\")\r\n            ? (numericOperands.push(folded.value), false)\r\n            : true\r\n        }).map(x => fold(x, context))\r\n        const numericValue = f(numericOperands)\r\n\r\n        // Fold degenerate cases. This may incorrectly compute NaN\r\n        // results, which shouldn't appear under expected usage.\r\n        // - zero\r\n        //   - 0 * ... = 0\r\n        // - infinity\r\n        //   - max(infinity, ...) = infinity\r\n        //   - infinity + ... = infinity\r\n        // - (-infinity)\r\n        //   - min(-infinity, ...) - infinity\r\n        //   - (-infinity) + ... = -infinity\r\n        // - NaN\r\n        //   - operation(NaN, ...) = NaN\r\n        if (!isFinite(numericValue)) {\r\n          if ((operation !== \"mul\") &&\r\n            (operation !== \"max\" || numericValue > 0) &&\r\n            (operation !== \"min\" || numericValue < 0)) {\r\n            result = constant(numericValue)\r\n            break\r\n          }\r\n        } else if (operation === \"mul\" && numericValue === 0) {\r\n          result = constant(numericValue)\r\n          break\r\n        }\r\n\r\n        if (numericValue !== f([])) // Skip vacuous values\r\n          formulaOperands.push(constant(numericValue))\r\n        if (formulaOperands.length <= 1) result = formulaOperands[0] ?? constant(f([]))\r\n        else result = { operation, operands: formulaOperands }\r\n        break\r\n      case \"res\": case \"sum_frac\": {\r\n        const operands = formula.operands.map(x => fold(x, context))\r\n        const f = allOperations[operation]\r\n        if (operands.every(x => x.operation === \"const\"))\r\n          result = constant(f(operands.map(x => (x as ConstantNode<number>).value)))\r\n        else result = { ...formula, operands }\r\n        break\r\n      }\r\n      case \"lookup\": {\r\n        const index = fold(formula.operands[0], context)\r\n        if (index.operation === \"const\") {\r\n          const selected = formula.table[index.value!] ?? formula.operands[1]\r\n          if (selected) {\r\n            result = fold(selected, context)\r\n            break\r\n          }\r\n        }\r\n        throw new Error(`Unsupported ${operation} node while folding`)\r\n      }\r\n      case \"prio\": {\r\n        const first = formula.operands.find(op => {\r\n          const folded = fold(op, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          return folded.value !== undefined\r\n        })\r\n        result = first ? fold(first, context) : constant(undefined)\r\n        break\r\n      }\r\n      case \"small\": {\r\n        let smallest = undefined as ConstantNode<string | undefined> | undefined\r\n        for (const operand of formula.operands) {\r\n          const folded = fold(operand, context)\r\n          if (folded.operation !== \"const\")\r\n            throw new Error(`Unsupported ${operation} node while folding`)\r\n          if (smallest?.value === undefined || (folded.value !== undefined && folded.value < smallest.value))\r\n            smallest = folded\r\n        }\r\n        result = smallest ?? constant(undefined)\r\n        break\r\n      }\r\n      case \"match\": {\r\n        const [v1, v2, match, unmatch] = formula.operands.map((x: NumNode | StrNode) => fold(x, context))\r\n        if (v1.operation !== \"const\" || v2.operation !== \"const\")\r\n          throw new Error(`Unsupported ${operation} node while folding`)\r\n        result = (v1.value === v2.value) ? match : unmatch\r\n        break\r\n      }\r\n      case \"threshold\": {\r\n        const [value, threshold, pass, fail] = formula.operands.map(x => fold(x, context))\r\n        if (value.operation === \"const\" && threshold.operation === \"const\")\r\n          result = value.value >= threshold.value ? pass : fail\r\n        else\r\n          result = { ...formula, operands: [value, threshold, pass, fail] }\r\n        break\r\n      }\r\n      case \"subscript\": {\r\n        const [index] = formula.operands.map(x => fold(x, context))\r\n        result = (index.operation === \"const\")\r\n          ? constant(formula.list[index.value])\r\n          : { ...formula, operands: [index] }\r\n        break\r\n      }\r\n      case \"read\": {\r\n        const operands = context.data\r\n          .map(x => objPathValue(x, formula.path) as (NumNode | StrNode))\r\n          .filter(x => x)\r\n\r\n        if (operands.length === 0) {\r\n          if (shouldFold(formula)) {\r\n            const { accu } = formula\r\n            if (accu === undefined || accu === \"small\")\r\n              result = formula.type === \"string\" ? constant(undefined) : constant(NaN)\r\n            else result = constant(allOperations[accu]([]))\r\n          } else result = formula\r\n        } else if (formula.accu === undefined || operands.length === 1)\r\n          result = fold(operands[operands.length - 1], context)\r\n        else\r\n          result = fold({ operation: formula.accu, operands } as ComputeNode | StrPrioNode, context)\r\n        break\r\n      }\r\n      case \"data\":\r\n        if (formula.reset) context = origin\r\n        const map = nextContextMap.get(context)!\r\n        let nextContext = map.get(formula.data)\r\n        if (!nextContext) {\r\n          nextContext = { data: [...context.data, formula.data], processed: new Map() }\r\n          nextContextMap.set(nextContext, new Map())\r\n          map.set(formula.data, nextContext)\r\n        }\r\n        result = fold(formula.operands[0], nextContext)\r\n        break\r\n      default: assertUnreachable(operation)\r\n    }\r\n\r\n    context.processed.set(formula, result)\r\n    return result\r\n  }\r\n\r\n  const context = { data: [topLevelData], processed: new Map() }\r\n  nextContextMap.set(context, new Map())\r\n  nextContextMap.get(origin)!.set(topLevelData, context)\r\n  return formulas.map(x => fold(x, context))\r\n}\r\n\r\nexport const testing = {\r\n  constantFold, flatten, deduplicate\r\n}\r\n","\r\nimport { objectKeyMap } from \"../Util/Util\"\r\nimport type { AnyNode, Data, DataNode, Info, LookupNode, MatchNode, NumNode, ReadNode, StrNode, SubscriptNode } from \"./type\"\r\n\r\ntype Num = number | NumNode\r\ntype Str = string | undefined | StrNode\r\ntype Any = Num | Str\r\n\r\nexport const todo: NumNode = constant(NaN, { key: \"TODO\" })\r\nexport const unit = percent(1), naught = percent(0)\r\n\r\nexport function constant(value: number, info?: Info): NumNode\r\nexport function constant(value: string | undefined, info?: Info): StrNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode\r\nexport function constant(value: number | string | undefined, info?: Info): AnyNode {\r\n  return { operation: \"const\", operands: [], value, info }\r\n}\r\n/** `value` in percentage. The value is written as non-percentage, e.g., `percent(1)` for 100% */\r\nexport function percent(value: number, info?: Info): NumNode {\r\n  if (value >= Number.MAX_VALUE / 100) value = Infinity\r\n  if (value <= -Number.MAX_VALUE / 100) value = -Infinity\r\n  return constant(value, { key: \"_\", ...info })\r\n}\r\n/** Inject `info` to the node in-place */\r\nexport function infoMut(node: NumNode, info: Info): NumNode\r\nexport function infoMut(node: StrNode, info: Info): StrNode\r\nexport function infoMut(node: NumNode | StrNode, info: Info): NumNode | StrNode {\r\n  if (info) node.info = { ...node.info, ...info }\r\n  return node\r\n}\r\n\r\n/** `table[string] ?? defaultNode` */\r\nexport function lookup(index: StrNode, table: Dict<string, NumNode>, defaultV: Num | \"none\", info?: Info): NumNode\r\nexport function lookup(index: StrNode, table: Dict<string, StrNode>, defaultV: Str | \"none\", info?: Info): StrNode\r\nexport function lookup(index: StrNode, table: Dict<string, AnyNode>, defaultV: Any | \"none\", info?: Info): LookupNode<any> {\r\n  const operands = defaultV !== \"none\" ? [intoV(index), intoV(defaultV)] as const : [intoV(index)] as const\r\n  return { operation: \"lookup\", operands, table, info }\r\n}\r\n\r\n/** min( x1, x2, ... ) */\r\nexport function min(...values: Num[]): NumNode {\r\n  return { operation: \"min\", operands: intoOps(values) }\r\n}\r\n/** max( x1, x2, ... ) */\r\nexport function max(...values: Num[]): NumNode {\r\n  return { operation: \"max\", operands: intoOps(values) }\r\n}\r\n/** x1 + x2 + ... */\r\nexport function sum(...values: Num[]): NumNode {\r\n  return { operation: \"add\", operands: intoOps(values) }\r\n}\r\n/** x1 * x2 * ... */\r\nexport function prod(...values: Num[]): NumNode {\r\n  return { operation: \"mul\", operands: intoOps(values) }\r\n}\r\n/** x / (x + c) */\r\nexport function frac(x: Num, c: Num): NumNode {\r\n  return { operation: \"sum_frac\", operands: intoOps([x, c]) }\r\n}\r\nexport function res(base: Num): NumNode {\r\n  return { operation: \"res\", operands: intoOps([base]) }\r\n}\r\n\r\n/** v1 == v2 ? pass : 0 */\r\nexport function equal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function equal(v1: Num | Str, v2: Num | Str, pass: Num, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(0)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 == v2 ? pass : `undefined` */\r\nexport function equalStr(v1: Num, v2: Num, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Str, v2: Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function equalStr(v1: Num | Str, v2: Num | Str, pass: Str, info?: Info): MatchNode<StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)], info, emptyOn: \"unmatch\" }\r\n}\r\n/** v1 != v2 ? pass : 0 */\r\nexport function unequal(v1: Num, v2: Num, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Str, v2: Str, pass: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function unequal(v1: Num | Str, v2: Num | Str, pass: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(0), intoV(pass)], info, emptyOn: \"match\" }\r\n}\r\n/** v1 >= v2 ? pass : 0 */\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function greaterEq(v1: Num, v2: Num, pass: Num, info?: Info): NumNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(0)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 >= v2 ? pass : `undefined` */\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): StrNode\r\nexport function greaterEqStr(v1: Num, v2: Num, pass: Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(pass), intoV(undefined)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"l\" }\r\n}\r\n/** v1 < v2 ? pass : 0 */\r\nexport function lessThan(v1: Num, v2: Num, pass: Num, info?: Info): NumNode\r\nexport function lessThan(v1: Num, v2: Num, pass: Num | Str, info?: Info): NumNode | StrNode {\r\n  const operands = [intoV(v1), intoV(v2), intoV(0), intoV(pass)] as any\r\n  return { operation: \"threshold\", operands, info, emptyOn: \"ge\" }\r\n}\r\n\r\nexport function setReadNodeKeys<T extends NodeList>(nodeList: T, prefix: string[] = []): T {\r\n  if (nodeList.operation) {\r\n    if (nodeList.operation !== \"read\")\r\n      throw new Error(`Found ${(nodeList as any).operation} node while making reader`)\r\n    return { ...nodeList, path: prefix }\r\n  } else {\r\n    return objectKeyMap(Object.keys(nodeList), key =>\r\n      setReadNodeKeys(nodeList[key], [...prefix, key])) as any\r\n  }\r\n}\r\nexport function data(base: NumNode, data: Data): DataNode<NumNode>\r\nexport function data(base: StrNode, data: Data): DataNode<StrNode>\r\nexport function data(base: NumNode | StrNode, data: Data): DataNode<NumNode> | DataNode<StrNode>\r\nexport function data(base: AnyNode, data: Data): DataNode<AnyNode> {\r\n  return { operation: \"data\", operands: [base], data }\r\n}\r\nexport function resetData(base: NumNode, data: Data, info?: Info): NumNode\r\nexport function resetData(base: StrNode, data: Data, info?: Info): StrNode\r\nexport function resetData(base: NumNode | StrNode, data: Data, info?: Info): DataNode<NumNode | StrNode>\r\nexport function resetData(base: AnyNode, data: Data, info?: Info): DataNode<any> {\r\n  return { operation: \"data\", operands: [base], data, reset: true, info }\r\n}\r\n\r\n\r\nexport function customRead(path: readonly string[], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path, info, type: \"number\" }\r\n}\r\nexport function customStringRead(path: readonly string[]): ReadNode<string> {\r\n  return { operation: \"read\", operands: [], path, type: \"string\" }\r\n}\r\nexport function read(accu?: ReadNode<number>[\"accu\"], info?: Info): ReadNode<number> {\r\n  return { operation: \"read\", operands: [], path: [], accu, info, type: \"number\" }\r\n}\r\n/**\r\n * CAUTION: Use `prio` accumulation sparingly. WR don't assume the reading order, so the result may be unstable\r\n */\r\nexport function stringRead(accu?: ReadNode<string | undefined>[\"accu\"]): ReadNode<string | undefined> {\r\n  return { operation: \"read\", operands: [], path: [], accu, type: \"string\" }\r\n}\r\nexport function stringPrio(...operands: Str[]): StrNode {\r\n  return { operation: \"prio\", operands: intoOps(operands) }\r\n}\r\n/** list[index] */\r\nexport function subscript<V>(index: NumNode, list: V[], info?: Info): SubscriptNode<V> {\r\n  return { operation: \"subscript\", operands: [index], list, info }\r\n}\r\n\r\nfunction intoOps(values: Num[]): NumNode[]\r\nfunction intoOps(values: Str[]): StrNode[]\r\nfunction intoOps(values: Any[]): AnyNode[]\r\nfunction intoOps(values: Any[]): AnyNode[] {\r\n  return values.map(value => typeof value === \"object\" ? value : constant(value))\r\n}\r\nfunction intoV(value: Num): NumNode\r\nfunction intoV(value: Str): StrNode\r\nfunction intoV(value: Num | Str): NumNode | StrNode\r\nfunction intoV(value: Any): AnyNode {\r\n  return (typeof value !== \"object\") ? constant(value) : value\r\n}\r\n\r\ntype _NodeList = {\r\n  [key: string]: NodeList\r\n} & {\r\n  operation?: never\r\n}\r\ntype NodeList = _NodeList | ReadNode<number> | ReadNode<string>\r\n\r\n/**\r\n * `v1` === `v2` ? `match` : `unmatch`\r\n * @deprecated Use `equal`, `unequal`, or `equalStr` instead\r\n */\r\nexport function matchFull(v1: Num, v2: Num, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, NumNode>\r\nexport function matchFull(v1: Num, v2: Num, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, NumNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Num, unmatch: Num, info?: Info): MatchNode<NumNode, StrNode>\r\nexport function matchFull(v1: Str, v2: Str, match: Str, unmatch: Str, info?: Info): MatchNode<StrNode, StrNode>\r\nexport function matchFull(v1: Num | Str, v2: Num | Str, match: Num | Str, unmatch: Num | Str, info?: Info): MatchNode<NumNode | StrNode, NumNode | StrNode> {\r\n  return { operation: \"match\", operands: [intoV(v1), intoV(v2), intoV(match), intoV(unmatch)], info }\r\n}\r\n","import { useCallback, useState } from \"react\"\r\n\r\nexport default function useForceUpdate(): [object, () => void] {\r\n  const [stateDirty, update] = useState({})\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return [stateDirty, forceUpdateHook]\r\n}","import { useEffect, useState } from \"react\";\r\n/**\r\n *\r\n * @param promise\r\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\r\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\r\n * @returns\r\n */\r\nexport default function usePromise<T>(promise: Promise<T> | undefined, dependencies: any[], useOld = true): T | undefined {\r\n  const [res, setRes] = useState<T | undefined>(undefined);\r\n  useEffect(() => {\r\n    let pending = true\r\n    promise?.then(res => pending && setRes(() => res), console.error) ?? setRes(undefined)\r\n    return () => {\r\n      pending = false\r\n      !useOld && setRes(undefined)\r\n    }\r\n  }, dependencies)// eslint-disable-line react-hooks/exhaustive-deps\r\n  return res\r\n}\r\n"],"names":["Assets","weaponTypes","bow","catalyst","claymore","polearm","sword","resin","fragile","condensed","exp_books","advice","wit","experience","CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","CloseButton","large","props","t","useTranslation","color","startIcon","sx","p","minWidth","DropdownButton","title","children","id","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","ImgIcon","name","slot","size","display","verticalAlign","ScrollModal","Modal","overflow","paddingTop","spacing","paddingBottom","ModalContainer","Container","padding","minHeight","flexDirection","justifyContent","pointerEvents","ModalWrapper","containerProps","variant","SolidToggleButtonGroup","ToggleButtonGroup","shouldForwardProp","prop","baseColor","selectedColor","contrastText","dark","SqBadge","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","borderRadius","StarIcon","icon","faStar","Stars","stars","colored","component","Array","keys","map","_","i","uncoloredEleIcons","anemo","faAnemo","geo","faGeo","electro","faElectro","hydro","faHydro","pyro","faPyro","cryo","faCryo","dendro","faDendro","physical","faPhysicalDmgBonus","coloredEleIcon","objectKeyMap","Object","key","StatIcon","hp_","faHp","hp","atk_","faAtk","atk","def_","faDef","def","eleMas","faElementalMastery","critRate_","faCritRate","critDMG_","faCritDmg","enerRech_","faEnergyRecharge","incHeal_","faHealingAdd","heal_","faHealingBonus","cdRed_","faCdReduction","shield_","faShieldStrength","stamina","faMaxStamina","fromEntries","flatMap","ele","characterSheets","then","imp","default","CharacterSheet","charSheet","data","sheet","isMelee","weaponTypeKey","getData","getTalent","eleKey","talent","talents","getTalentOfKey","talentKey","sheets","this","src","thumbImgSide","marginTop","marginLeft","cardImg","thumbImg","bannerImg","rarity","elementKey","constellationName","get","charKey","c","getLevelString","level","ascension","ascensionMaxLevel","talentTemplate","tr","img","fields","conditional","additionalSections","sections","sectionTemplate","text","fieldsCanShow","teamBuff","showFieldsHeaderDesc","fieldsHeader","conditionalHeader","fieldsDescription","canShow","header","description","talentStrMap","auto","skill","burst","passive","passive1","passive2","passive3","sprint","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","m","action","normalSrc","weaponKey","shouldWrap","UIData","parent","origin","Map","nodes","processed","getAll","calculated","result","crawlObject","uiInput","x","operation","path","node","objPathValue","layeredAssignment","prefix","console","trace","value","isEmpty","unit","formulas","old","dependencies","formula","assignment","empty","KeyMap","computeNodeDisplay","computeNode","set","info","_compute","_threshold","_constant","_subscript","_read","_data","_match","_lookup","_prio","operands","_small","assertUnreachable","source","asConst","fixed","pivot","Set","mayNeedWrapping","valueDisplay","valueString","prefixDisplay","sourceDisplay","createDisplay","filter","prereadAll","find","first","illformedStr","smallest","candidate","accu","readFirst","type","illformed","_accumulate","readAll","selected","table","Error","v1Node","v2Node","matchNode","unmatchNode","v1","v2","matching","emptyOn","makeEmpty","valueNode","thresholdNode","pass","fail","threshold","child","reset","operand","list","NaN","unique","delete","has","values","next","mergeVariants","identity","allOperations","length","fStr","separator","base","every","strings","predisplay","forEach","string","push","item","array","itemFormula","createFormulaComponent","add","mergeFormulaComponents","style","components","emptyValue","inferInfoMut","slice","reference","input","error","dataObjForArtifact","art","mainStatAssumptionLevel","mainStatVal","Artifact","mainStatKey","Math","max","min","stats","substats","accurateValue","endsWith","percent","constant","slotKey","setKey","artSet","dataObjForCharacter","char","lvl","constellation","asc","infusion","team","infusionAura","premod","enemy","allElementsWithPhy","enemyOverride","enemyLevel","hit","hitMode","reaction","reactionMode","customBonus","entries","bonusStats","enemyDefRed_","enemyDefIgn_","defIgn","dataObjForWeapon","weapon","refinement","refineIndex","setReadNodeKeys","deepClone","uiDataForTeam","teamData","activeCharKey","mergedData","mergeData","targetRef","buffs","calcs","customReadNodes","getReadNode","custom","newNode","customRead","sourceKey","sourceBuff","buff","calc","resetData","readNode","targetKey","assign","target","internal","errMsg","computeUIData","allElements","allTalents","allMoves","allArtModStats","allTransformative","allAmplifying","allModStats","allNonModStats","allEleEnemyResKeys","read","allModStatNodes","allNonModStatNodes","withDefaultInfo","stringRead","charEle","weaponType","special","overridableSelf","nonOverridableSelf","bonus","total","objectKeyValueMap","cappedCritRate","allSlotKeys","allArtifactSets","sub","sub2","defRed","move","dmgBonus","dmgInc","dmg","stat","baseAmpBonus","sum","prod","frac","effectiveReaction","lookup","pyro_vaporize","pyro_melt","equalStr","common","naught","all_dmg_","all_dmgInc","element","critHit","avgHit","melt","melt_dmg_","vaporize","vaporize_dmg_","res","infoMut","tally","allRegions","forEachNodes","topDown","bottomUp","visiting","visited","traverse","mapFormulas","topDownMap","bottomUpMap","topDownMapped","bottomUpMapped","check","arrayEqual","a","b","allCommutativeMonoidOperations","reduce","mul","sum_frac","commutativeMonoidOperationSet","optimize","topLevelData","shouldFold","_formula","deduplicate","flatten","constantFold","f","flattened","dep","elementCounts","wrap","counts","factored","count","fill","candidatesByOperation","remainingCounts","currentCounts","commonCounts","nextCounts","dependency","currentCount","commonCount","candidates","candidateCounts","candidateCount","clear","nextContextMap","fold","context","numericOperands","formulaOperands","folded","numericValue","isFinite","index","op","match","unmatch","nextContext","Number","MAX_VALUE","Infinity","defaultV","intoV","intoOps","equal","unequal","greaterEq","greaterEqStr","lessThan","nodeList","customStringRead","stringPrio","subscript","matchFull","useForceUpdate","stateDirty","update","usePromise","promise","useOld","setRes","useEffect","pending"],"sourceRoot":""}