{"version":3,"sources":["Components/CustomFormControl.tsx","Types/artifact.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Util/UIUtil.ts","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Components/DocumentDisplay.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","type","e","target","onBlur","onKeyDown","key","allMainStatKeys","allSubstats","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","valueString","unit","Math","round","toFixed","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","faQuestionCircle","style","cursor","variant","allSubstatFilter","Set","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","substats","rolls","substatsValidation","numStars","level","mainStatKey","lock","mainStatLevel","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maximumEfficiency","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","slotNames","Body","Title","stars","getStatName","stat","i","numRolls","length","efficiency","effOpacity","statName","opacity","has","valid","Footer","Toggle","size","Menu","Divider","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","weaponSheet","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","DocumentDisplay","sections","build","section","talentText","evalIfFunc","fields","ListGroup","conditional","ConditionalDisplay","CharacterOverviewPane","constellation","ascension","tlvl","elementKey","characterEle","weaponTypeKey","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","getLevelString","tKey","getTalentOfKey","img","roundedCircle","Badge","position","bottom","right","constellationName","Array","keys","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","statsToFields","WeaponStatsEditorCardWeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","DropdownButton","reverse","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","editing","SetEditing","showDescription","setShowDescription","conditionalValues","substatKey","Weapon","getWeaponSubstatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","levelKey","weaponDisplaySubVal","overrideSubVal","getWeaponSubstatVal","weaponPassiveName","passiveName","weaponBonusStats","conditionals","Conditional","document","faQuoteLeft","faSave","getLevelName","LevelNameData","refineIndex","StatInput","prependEle","faGavel","percent","onValueChange","defaultValue","StatIconEle","passiveDescription","atk","stateKey","fieldClassName","description","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","getStatValueWithOverride","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","statKey","getStatNamePretty","getBaseStatValue","InputGroup","getStatNameWithPercent","as","Prepend","characterSpecializedStatKeys","Append","Text","hasOverride","faUndo","StatDisplay","fixedUnit","getStatNameRaw","xl","CharacterTalentPane","props","skillDisplayProps","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","OverlayTrigger","Tooltip","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","talentSheet","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","buildSettings","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","update","possibleWeapons","weaponKey","ws1","ws2","talents","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","DamageOptionsAndCalculation","CharSelectDropdown","ButtonGroup","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","Content","Pane","levelSelector","HeaderIconDisplay","thumbImg","setLevel","clamp","ascensionMaxLevel","findIndex","ascenML","ambiguousLevel","setAscension","lowerAscension","allCharacterKeys","CharDropdownItem","ElementalData","eleKey","lv","lvlstr","DropdownItem","ConditionalSelector","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","maxStack","badge","whiteSpace","condial","v","stack","faCheckSquare","faSquare","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionKey","sectionValues","getDisplayHeading","JSON","stringify","DisplayStatDiff","label","val","oldVal","oldText","diffText","isArray","Formula","invalid","labelVariant","restProps","pointerEvents","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.ea252604.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: any,\r\n  onChange: (any) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","import { ArtifactSetKey, CharacterKey, Rarity, SetNum, SlotKey } from \"./consts\";\r\nimport ICalculatedStats from \"./ICalculatedStats\";\r\nimport IConditional, { IConditionalComplex, IConditionals } from \"./IConditional\";\r\n\r\nexport type IArtifactSheets = StrictDict<ArtifactSetKey, IArtifactSheet>\r\n\r\nexport interface IArtifactSheet {\r\n  name: string,\r\n  rarity: readonly Rarity[],\r\n  pieces: Dict<SlotKey, string>,\r\n  icons: Dict<SlotKey, string>,\r\n  conditionals?: IConditionals,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  text: (Displayable | ((stats: ICalculatedStats) => Displayable)),\r\n  stats?: StatDict | ((arg0: ICalculatedStats) => (StatDict | false))\r\n  conditional?: (IConditional | IConditionalComplex),\r\n  conditionals?: IConditionals,\r\n}\r\n\r\nexport type StatArr = { key: StatKey, value: number }[]\r\nexport type StatDict = Dict<StatKey, number>\r\n\r\nexport interface IArtifact {\r\n  id?: string,\r\n  setKey: ArtifactSetKey,\r\n  numStars: Rarity,\r\n  level: number,\r\n  slotKey: SlotKey,\r\n  mainStatKey: MainStatKey,\r\n  mainStatVal?: number,\r\n  substats: Substat[],\r\n  location: CharacterKey | \"\",\r\n\r\n  lock: boolean,\r\n}\r\n\r\nexport interface Substat {\r\n  key: SubstatKey | \"\",\r\n  value: number,\r\n\r\n  rolls?: number[],\r\n  efficiency?: number,\r\n}\r\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | SpecializedStatKey\r\n\r\ntype ElementalRESStatKey = \"physical_res_\" | \"anemo_res_\" | \"geo_res_\" | \"electro_res_\" | \"hydro_res_\" | \"pyro_res_\" | \"cryo_res_\"\r\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystalize_dmg_\"\r\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\r\n\r\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\",] as const\r\n\r\n// TODO: Check if these actually applies\r\ntype SpecializedStatKey = \"charged_critRate_\" | \"powShield_\" | \"incHeal_\"\r\n\r\nexport type MainStatKey = typeof allMainStatKeys[number]\r\nexport type CompressMainStatKey = \"hp\" | \"hp_\" | \"atk\" | \"atk_\" | \"def_\" | \"eleMas\" | \"enerRech_\" | \"critRate_\" | \"critDMG_\" | \"physical_dmg_\" | \"ele_dmg_\" | \"heal_\"\r\nexport type SubstatKey = typeof allSubstats[number]\r\n","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }: { field: IFieldDisplay, index: number, equippedBuild?: ICalculatedStats, newBuild?: ICalculatedStats, className?: string }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => stats ? field?.canShow?.(stats) : false, [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maximumEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, characterSheet), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && Character.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  if (!stats) return null\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div>{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Badge, Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Row } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport { allElements, characterSpecializedStatKeys } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport { IConditionals } from \"../../Types/IConditional\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport StatInput from \"../StatInput\"\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { constellation, level, ascension }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n          <h6><Stars stars={characterSheet.star} colored /></h6>\r\n          <h5>Level: {Character.getLevelString(character)}</h5>\r\n          <Row className=\"px-2 mb-2\">\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Col xs={4} className=\"p-1\" key={tKey}>\r\n                <Image src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} className=\"w-100 h-auto\" roundedCircle />\r\n                <h5 className=\"mb-0\"><Badge variant=\"info\" style={{ position: \"absolute\", bottom: \"0\", right: \"0\" }}><strong>{tlvl[tKey] + 1}</strong></Badge></h5>\r\n              </Col>)}\r\n          </Row>\r\n          <div className=\"text-center\"><h6>{characterSheet.constellationName}</h6></div>\r\n          <Row className=\"px-2\">\r\n            {[...Array(6).keys()].map(i =>\r\n              <Col xs={4} className=\"p-1\" key={i}>\r\n                <Image src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                  roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\n\r\nfunction WeaponStatsEditorCardWeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  if (!weaponSheets) return null\r\n\r\n  return <DropdownButton title={weaponSheet.name}>\r\n    {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n      <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n      {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === star).map(([key, weaponObj]: any) =>\r\n        <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n          {weaponObj.name}\r\n        </Dropdown.Item>\r\n      )}\r\n      {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n    </React.Fragment>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const substatKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key] as IConditionals\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <WeaponStatsEditorCardWeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).reverse().map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {substatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><span className=\"mr-2\">{StatIconEle(substatKey)}</span>{Stat.getStatName(substatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(substatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{weaponSheet.name} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {/* TODO: remove conditionals display here in lieu of document once sheets are converted*/}\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n\r\n            {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{weaponSheet.description}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {characterSpecializedStatKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key, characterSheet, weaponSheet })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value, characterSheet, weaponSheet })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatKey\"), characterSheet, weaponSheet })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatVal\"), characterSheet, weaponSheet })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined\r\n                  }\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { ascension, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { elementKey, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={talentSheet?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{talentSheet?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, ButtonGroup, Dropdown, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { ascensionMaxLevel } from '../Data/CharacterData';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  level: 1,\r\n  ascension: 0,\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])),\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n  buildSettings: {}//use to reset when changing to a new character, so it would not copy from old character.\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: string,\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key), [character.weapon.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  //callback for when switching to a new character, and need to initiate a weapon.\r\n  useEffect(() => {\r\n    if (!character.weapon.key && weaponSheets && characterSheet) {\r\n      const possibleWeapons = WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey)\r\n      //sort the weapons to get the lowest rarity weapon.\r\n      const [weaponKey] = Object.entries(possibleWeapons).sort(([k1, ws1], [k2, ws2]) => ws1.rarity - ws2.rarity)[0]\r\n      character.weapon.key = weaponKey\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {//check for default value for traveler\r\n    if (characterSheet && \"talents\" in characterSheet.sheet && !character.elementKey)\r\n      characterDispatch({ elementKey: Object.keys(characterSheet.sheet.talents)[0] })\r\n  }, [character.elementKey, characterSheet])\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n\r\nconst levelSelector = [\r\n  [90, 6],\r\n  [80, 6],\r\n  [80, 5],\r\n  [70, 5],\r\n  [70, 4],\r\n  [60, 4],\r\n  [60, 3],\r\n  [50, 3],\r\n  [50, 2],\r\n  [40, 2],\r\n  [40, 1],\r\n  [20, 1],\r\n  [20, 0],\r\n  [1, 0]\r\n] as const\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, character: { elementKey = \"anemo\", level = 1, ascension = 0 }, editable, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{editable ? <InputGroup >\r\n    <ButtonGroup as={InputGroup.Prepend}>\r\n      <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button}>\r\n          {HeaderIconDisplay}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu as={CustomMenu}>\r\n          {[...new Set(allCharacterKeys)].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button} className={`text-${elementKey}`}>\r\n          <strong>{ElementalData[elementKey].name}</strong>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu >\r\n          {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n            <Dropdown.Item key={eleKey} className={`text-${eleKey}`} onClick={() => characterDispatch({ elementKey: eleKey })}><strong>{ElementalData[eleKey].name}</strong></Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>}\r\n    </ButtonGroup>\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n\r\n    <InputGroup.Append>\r\n      <CustomFormControl placeholder={undefined} className=\"h-100\" onChange={setLevel} value={level} min={1} max={90} />\r\n    </InputGroup.Append>\r\n    <InputGroup.Append>\r\n      <Button disabled={!ambiguousLevel} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n    </InputGroup.Append>\r\n    <ButtonGroup as={InputGroup.Append}>\r\n      <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button}>Select Level</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {levelSelector.map(([lv, as]) => {\r\n            const sameLevel = lv === ascensionMaxLevel[as]\r\n            const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n            return <DropdownItem key={`${lv}/${as}`} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</DropdownItem>\r\n          })}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </ButtonGroup>\r\n  </InputGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey, invalid as any)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterATK\") + Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = \"none\", infusionAura }, build, characterDispatch, className }: ReactionToggleProps) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, weaponSheet, build }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => Character.getDisplayStatKeys(build, characterSheet), [build, characterSheet])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={undefined}\r\n                      disabled={undefined}\r\n                      percent={undefined}\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}