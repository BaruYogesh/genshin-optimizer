{"version":3,"sources":["Components/CustomFormControl.tsx","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Components/InfoComponent.tsx","Util/UIUtil.ts","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Types/artifact.ts","Artifact/imgs/scan_art_main.png","Artifact/imgs/snippet.png","Util/BorrowManager.ts","Artifact/UploadDisplay.tsx","Artifact/ArtifactEditor.tsx","Artifact/ArtifactDisplay.tsx"],"names":["CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","className","type","e","target","onBlur","onKeyDown","key","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","InfoComponent","pageKey","text","modalTitle","children","loadFromLocalStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","saveToLocalStorage","show","onHide","size","variant","contentClassName","bg","Header","Title","xs","faTimes","Body","fallback","animation","Footer","faQuestionCircle","valueString","unit","Math","round","toFixed","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","maximumEfficiency","substatsValidation","id","numStars","level","mainStatKey","substats","lock","currentEfficiency","mainStatLevel","max","min","mainStatVal","mainStatValue","Stat","getStatUnit","artifactValid","locationName","border","md","src","slotIcons","thumbnail","slotNames","stars","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","style","opacity","valid","Toggle","Menu","Divider","placement","overlay","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","allMainStatKeys","allSubstats","BorrowManager","init","deinit","data","this","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","error","load","loadLanguage","initialize","addWorker","Promise","any","_language","then","terminate","UploadDisplay","setState","setReset","artifactInEditor","modalShow","setModalShow","useReducer","queueReducer","processed","outstanding","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","imageURL","processingResult","remaining","image","artifact","texts","fileName","numProcessing","processingCurrent","slice","forEach","processEntry","removeCurrent","uploadFiles","files","file","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","img","alt","Row","ExplainationModal","hide","Col","Button","ReactGA","modalview","Card","process","lg","ProgressBar","animated","now","Form","File","label","accept","custom","multiple","Boolean","Label","Modal","Snippet","href","rel","scan_art_main","queue","message","entry","fileToURL","getAll","sheets","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","uploadDisplayReset","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","canvas","document","createElement","context","getContext","width","height","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","rarityRates","Object","fromEntries","allArtifactRarities","rarity","score","reduce","count","set","includes","substat","getSubstatRolls","allSlotKeys","slotMainStats","mainStatScore","has","relevantMainStatValues","filter","numStarsString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","entries","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","v","index","ambiguousText","slotName","getStatNameRaw","find","results","allArtifactSets","hammingDistance","replace","f","pixels","d","lastRowNum","rowsWithNumber","y","star","onStar","x","colorCloseEnough","clamp","color1","color2","threshold","intCloseEnough","abs","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","ArtifactEditor","artifactIdToEdit","cancelEdit","artifactReducer","artifactDispatch","artifactSheets","databaseArtifact","deepClone","reset","update","newValue","newSheet","pick","prefer","keys","setSubstat","useMemo","editorArt","isDup","artifacts","getArtifactDatabase","candidate","candidateSubstat","some","dupArtifacts","dupId","checkDuplicate","errMsgs","Trans","i18nKey","InputGroup","Dropdown","as","Prepend","namesByMaxRarities","sets","Fragment","ItemText","DropdownButton","Append","title","Text","l","sKey","FormControl","readOnly","getStatNameWithPercent","mainStatK","OverlayTrigger","Popover","Content","cursor","SubstatInput","Alert","saveArtifact","isInvalid","confirm","accurateValue","rollNum","rollData","allowedRolls","rollLabel","rollInfo","numUpgrades","high","getSubstatRollData","rollOffset","rollBadge","Badge","rollArr","val","indexOf","ButtonGroup","action","artToSave","InfoDisplay","React","lazy","sortKeys","initialFilter","filterArtSetKey","filterStars","filterLevelLow","filterLevelHigh","filterSlotKey","filterMainStatKey","filterSubstats","filterLocation","filterLocked","ascending","sortType","maxNumArtifactsToDisplay","filterReducer","filterInit","initial","ArtifactDisplay","props","filters","filterDispatch","artToEditId","setartToEditId","pageIdex","setpageIdex","scrollRef","useRef","invScrollRef","dbDirty","forceUpdate","deleteArtifact","equipArtifactOnSlot","removeArtifactById","editArtifact","current","scrollIntoView","behavior","cancelEditArtifact","pageview","registerListener","unregisterListener","locationDisplay","lockedDisplay","artifactDB","filterKey","sortNum","numUnequip","numUnlock","numLock","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","locationCharacterSheet","showingValue","Container","returnObjects","ref","faUndo","ToggleButtonGroup","selected","ToggleButton","faCheckSquare","faSquare","faSortAmountDownAlt","faSortAmountUp","statKey","CharacterSelection","cid","substatKey","getSubstatKeys","unequipArtifact","faUserSlash","faTrash"],"mappings":"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","file":"static/js/15.121e26d0.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { getRandomElementFromArray, loadFromLocalStorage, saveToLocalStorage } from \"../Util/Util\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(loadFromLocalStorage(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = loadFromLocalStorage(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    saveToLocalStorage(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { IArtifact, Substat } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number }\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0 }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const artifactValid = art.maximumEfficiency !== undefined\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{valueString(efficiency, \"eff\")}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { ArtifactSetKey, CharacterKey, Rarity, SetNum, SlotKey } from \"./consts\";\r\nimport ICalculatedStats from \"./ICalculatedStats\";\r\nimport IConditional, { IConditionalComplex, IConditionals } from \"./IConditional\";\r\n\r\nexport type IArtifactSheets = StrictDict<ArtifactSetKey, IArtifactSheet>\r\n\r\nexport interface IArtifactSheet {\r\n  name: string,\r\n  rarity: readonly Rarity[],\r\n  pieces: Dict<SlotKey, string>,\r\n  icons: Dict<SlotKey, string>,\r\n  conditionals?: IConditionals,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  text: (Displayable | ((stats: ICalculatedStats) => Displayable)),\r\n  stats?: StatDict | ((arg0: ICalculatedStats) => (StatDict | false))\r\n  conditional?: (IConditional | IConditionalComplex),\r\n  conditionals?: IConditionals,\r\n}\r\n\r\nexport type StatArr = { key: StatKey, value: number }[]\r\nexport type StatDict = Dict<StatKey, number>\r\n\r\nexport interface IArtifact {\r\n  id?: string,\r\n  setKey: ArtifactSetKey,\r\n  numStars: Rarity,\r\n  level: number,\r\n  slotKey: SlotKey,\r\n  mainStatKey: MainStatKey,\r\n  mainStatVal?: number,\r\n  substats: Substat[],\r\n  location: CharacterKey | \"\",\r\n\r\n  currentEfficiency?: number,\r\n  maximumEfficiency?: number,\r\n  lock: boolean,\r\n}\r\n\r\nexport interface Substat {\r\n  key: SubstatKey | \"\",\r\n  value: number,\r\n\r\n  rolls?: number[],\r\n  efficiency?: number,\r\n  accurateValue?: number,\r\n}\r\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | SpecializedStatKey\r\n\r\ntype ElementalRESStatKey = \"physical_res_\" | \"anemo_res_\" | \"geo_res_\" | \"electro_res_\" | \"hydro_res_\" | \"pyro_res_\" | \"cryo_res_\"\r\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystalize_dmg_\"\r\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\r\n\r\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"def\"] as const\r\n\r\n// TODO: Check if these actually applies\r\ntype SpecializedStatKey = \"charged_critRate_\" | \"powShield_\" | \"incHeal_\"\r\n\r\nexport type MainStatKey = typeof allMainStatKeys[number]\r\nexport type CompressMainStatKey = \"hp\" | \"hp_\" | \"atk\" | \"atk_\" | \"def_\" | \"eleMas\" | \"enerRech_\" | \"critRate_\" | \"critDMG_\" | \"physical_dmg_\" | \"ele_dmg_\" | \"heal_\"\r\nexport type SubstatKey = typeof allSubstats[number]\r\n","export default __webpack_public_path__ + \"static/media/scan_art_main.ab1cfe61.png\";","export default __webpack_public_path__ + \"static/media/snippet.d223e797.png\";","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useCallback, useEffect, useReducer, useState } from 'react';\r\nimport { Button, Card, Col, Form, Modal, ProgressBar, Row } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nimport Stat from '../Stat';\r\nimport { clamp, hammingDistance } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport { allMainStatKeys, allSubstats, IArtifact, MainStatKey, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { BorrowManager } from '../Util/BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst maxProcessingCount = 3, maxProcessedCount = 16, workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport default function UploadDisplay({ setState, setReset, artifactInEditor }) {\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL)\r\n  const processingResult = usePromise(firstOutstanding?.result)\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact, texts } = firstProcessed ?? {}\r\n  const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifactInEditor && artifact)\r\n      setState(artifact)\r\n  }, [artifactInEditor, artifact, setState])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const removeCurrent = useCallback(() => dispatchQueue({ type: \"pop\" }), [dispatchQueue])\r\n  const uploadFiles = useCallback((files: FileList) =>\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) }), [dispatchQueue])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = e => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    setReset?.(removeCurrent);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [setReset, removeCurrent, uploadFiles])\r\n\r\n  const img = image && <img src={image} className=\"w-100 h-auto\" alt=\"Screenshot to parse for artifact values\" />\r\n  return (<Row>\r\n    <ExplainationModal {...{ modalShow, hide: () => setModalShow(false) }} />\r\n    <Col xs={12} className=\"mb-2\">\r\n      <Row>\r\n        <Col>\r\n          <h6 className=\"mb-0\">Parse Artifact by Uploading Image</h6>\r\n        </Col>\r\n        <Col xs=\"auto\"><Button variant=\"info\" size=\"sm\" onClick={() => {\r\n          setModalShow(true)\r\n          ReactGA.modalview('/artifact/how-to-upload')\r\n        }}>Show Me How!</Button></Col>\r\n      </Row>\r\n    </Col>\r\n    {remaining > 0 && <Col xs={12}>\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Row>\r\n          <Col className=\"p-1 ml-2\">Screenshots in file-queue: <b>{remaining}</b>{process.env.NODE_ENV === \"development\" &&\r\n            ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`}</Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" variant=\"danger\" onClick={clearQueue}>Clear file-queue</Button></Col>\r\n        </Row>\r\n      </Card>\r\n    </Col>}\r\n    <Col xs={8} lg={image ? 4 : 0}>{img}</Col>\r\n    <Col xs={12} lg={image ? 8 : 12}>\r\n      {!firstProcessed && firstOutstanding &&\r\n        <div className=\"mb-2\">\r\n          <h6 className=\"mb-0\">Scanning current artifact</h6>\r\n          <ProgressBar animated now={100} />\r\n        </div>}\r\n      <Form.File\r\n        type=\"file\"\r\n        className=\"mb-0\"\r\n        label={fileName}\r\n        onChange={e => {\r\n          uploadFiles(e.target.files)\r\n          e.target.value = null // reset the value so the same file can be uploaded again...\r\n        }}\r\n        accept=\"image/*\"\r\n        custom\r\n        multiple\r\n      />\r\n      {texts && <div className=\"mb-2\">\r\n        <div>{texts.slotKey}</div>\r\n        <div>{texts.mainStatKey}</div>\r\n        <div>{texts.mainStatVal}</div>\r\n        <div>{texts.numStars}</div>\r\n        <div>{texts.level}</div>\r\n        <div>{texts.substats}</div>\r\n        <div>{texts.setKey}</div>\r\n      </div>}\r\n      {Boolean(!image) && <Form.Label className=\"mb-0\">Please Select an Image, or paste a screenshot here (Ctrl+V)</Form.Label>}\r\n    </Col>\r\n  </Row >)\r\n}\r\nfunction ExplainationModal({ modalShow, hide }) {\r\n  return <Modal show={modalShow} onHide={hide} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><Card.Title>How do Upload Screenshots for parsing</Card.Title></Col>\r\n          <Col xs=\"auto\">\r\n            <Button variant=\"danger\" onClick={hide} >\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <h5 className=\"text-warning\">NOTE: Artifact Scanning currently only work for ENGLISH artifacts.</h5>\r\n        <Row>\r\n          <Col xs={8} md={4}>\r\n            <img alt=\"snippet of the screen to take\" src={Snippet} className=\"w-100 h-auto\" />\r\n          </Col>\r\n          <Col xs={12} md={8}>\r\n            <p>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</p>\r\n            <h5>Where to snip the screenshot.</h5>\r\n            <p>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></p>\r\n            <h6>Single artifact</h6>\r\n            <p>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</p>\r\n            <h6>Multiple artifacts</h6>\r\n            <p>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</p>\r\n            <h5>What to include in the screenshot.</h5>\r\n            <p>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </p>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <h5>Adding Screenshot to Genshin Optimizer</h5>\r\n            <p>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</p>\r\n            <p className=\"mb-0\">You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</p>\r\n            <p>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</p>\r\n            <p>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.\r\n        </p>\r\n          </Col>\r\n          <Col xs={12}>\r\n            <h5>Finishing the Artifact</h5>\r\n            <p>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</p>\r\n            <img alt=\"main screen after importing stats\" src={scan_art_main} className=\"w-75 h-auto\" />\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={hide}>\r\n          <span>Close</span>\r\n        </Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nconst queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nfunction processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll()\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: Substat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof IArtifact, Displayable>] {\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    setKey: \"Adventurer\", numStars: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates: Dict<Rarity, number> = Object.fromEntries(allArtifactRarities.map(rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return [rarity, score]\r\n  }))\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || Stat.getStatUnit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [numStarsString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const numStars = parseInt(numStarsString) as Rarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(numStars))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(numStars, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, numStars, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof IArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), numStars: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof IArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.numStars, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.numStars!.add(other.numStars as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <span className=\"text-danger\">{text(value)}</span></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <span className=\"text-danger\">{text(value)}</span> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><span className=\"text-warning\">{text(value)}</span></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <span className=\"text-success\">{text(value)}</span></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <span className=\"text-warning\">{text(value)}</span></>\r\n  }\r\n\r\n  function addText(key: keyof IArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"numStars\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{Stat.getStatNameRaw(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{Stat.getStatNameRaw(value.key)}+{value.value}{Stat.getStatUnit(value.key) === \"%\" ? \"%\" : \"\"}</>)}</div>)\r\n  }</>\r\n\r\n  const unit = Stat.getStatUnit(result.mainStatKey)\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", (value) => <>{valueString(value, unit)}{unit === \"%\" ? \"%\" : \"\"}</>)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].name.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(Stat.getStatNameRaw(key).toLowerCase()))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), Stat.getStatNameRaw(key).replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): Substat[] {\r\n  const matches: Substat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = Stat.getStatNameRaw(key)\r\n      const regex = Stat.getStatUnit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n\r\ntype ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof IArtifact, Displayable>\r\n}\r\ntype OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Dropdown, DropdownButton, FormControl, InputGroup, OverlayTrigger, Popover, Row } from 'react-bootstrap';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactSets, Rarity, SlotKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport { clamp, deepClone, getRandomElementFromArray, getRandomIntInclusive } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\nimport UploadDisplay from './UploadDisplay';\r\n\r\nlet uploadDisplayReset\r\nexport default function ArtifactEditor({ artifactIdToEdit, cancelEdit }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const [artifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const artifactInEditor = artifact !== undefined\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n\r\n  useEffect(() => {\r\n    if (artifactIdToEdit && artifactIdToEdit !== artifact?.id) {\r\n      const databaseArtifact = ArtifactDatabase.get(artifactIdToEdit)\r\n      if (databaseArtifact)\r\n        artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, artifact?.id])\r\n\r\n  const getUpdloadDisplayReset = reset => uploadDisplayReset = reset\r\n\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    uploadDisplayReset?.()\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.numStars = pick(artifact?.numStars, newSheet.rarity, Math.max(...newSheet.rarity) as Rarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, Object.keys(newSheet.slotNames))\r\n    }\r\n    if (newValue.numStars)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.numStars ?? artifact!.numStars))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: Substat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { dupId, isDup } = useMemo(() => checkDuplicate(artifact), [artifact])\r\n  const { numStars = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const errMsgs = artifact ? Artifact.substatsValidation(artifact) : []\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header><Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans></Card.Header>\r\n    <Card.Body>\r\n      <Row>\r\n        {/* Left column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* set & rarity */}\r\n          <InputGroup className=\"w-100 d-flex mb-2\">\r\n            {/* Artifact Set */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={artifact ? \"success\" : \"primary\"}>\r\n                {sheet?.name ?? t`editor.set.artifactSet`}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([rarity, sets], i) =>\r\n                  <React.Fragment key={rarity}>\r\n                    {i > 0 && <Dropdown.Divider />}\r\n                    <Dropdown.ItemText><Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={rarity} /></Trans></Dropdown.ItemText>\r\n                    {sets.map(([setKey, name]) =>\r\n                      <Dropdown.Item key={setKey} onClick={() => update({ setKey })}>\r\n                        {name}\r\n                      </Dropdown.Item >)}\r\n                  </React.Fragment>)}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n            {/* rarity dropdown */}\r\n            <DropdownButton as={InputGroup.Append} title={artifact ? <Stars stars={numStars} /> : t`editor.rarity`} disabled={!sheet} variant={artifact ? \"success\" : \"primary\"}>\r\n              {([5, 4, 3] as Rarity[]).map((numStars, index) => <Dropdown.Item key={index} disabled={!sheet?.rarity.includes(numStars)} onClick={() => update({ numStars })}>\r\n                {<Stars stars={numStars} />}\r\n              </Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </InputGroup>\r\n\r\n          {/* level */}\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>{t`editor.level`}</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <CustomFormControl value={level} disabled={!sheet} placeholder={`0~${numStars * 4}`} onChange={l => update({ level: l })} />\r\n            <InputGroup.Append>\r\n              <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n              {numStars ? [...Array(numStars + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n              <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (numStars * 4)}>+</Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n\r\n          {/* slot */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<SlotNameWithIcon slotKey={slotKey} />}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              {Object.keys(sheet?.slotNames ?? {}).map((sKey: SlotKey) =>\r\n                <Dropdown.Item key={sKey as any} onClick={() => update({ slotKey: sKey })} ><SlotNameWithIcon slotKey={sKey} /></Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={sheet?.slotNames[artifact!.slotKey] ?? t`editor.unknownPieceName` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* main stat */}\r\n          <InputGroup className=\"mb-2\">\r\n            <DropdownButton\r\n              title={<b>{artifact ? Stat.getStatNameWithPercent(artifact.mainStatKey) : t`mainStat`}</b>}\r\n              disabled={!sheet}\r\n              variant={artifact ? \"success\" : \"primary\"}\r\n              as={InputGroup.Prepend}\r\n            >\r\n              <Dropdown.ItemText>{t`editor.mainSelect`}</Dropdown.ItemText>\r\n              {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                <Dropdown.Item key={mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                  {Stat.getStatNameWithPercent(mainStatK)}\r\n                </Dropdown.Item>)}\r\n            </DropdownButton>\r\n            <FormControl\r\n              value={artifact ? `${Artifact.mainStatValue(artifact.mainStatKey, numStars, level)}${Stat.getStatUnit(artifact.mainStatKey)}` : t`mainStat` as any}\r\n              disabled\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          {/* Current Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.curSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (artifact?.currentEfficiency ?? 0)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"current-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.curSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.curSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n          {/* Maximum Substat Efficiency */}\r\n          <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n            <Card.Body className=\"py-1 px-2\">\r\n              <Row>\r\n                <Col className=\"text-center\">{t`editor.maxSubEff`}</Col>\r\n                <Col xs=\"auto\">\r\n                  <PercentBadge valid={!errMsgs.length} value={errMsgs.length ? \"ERR\" : (artifact?.maximumEfficiency ?? 0)} />\r\n                  <OverlayTrigger\r\n                    placement=\"bottom\"\r\n                    overlay={<Popover id=\"max-efficiency\">\r\n                      <Popover.Title as=\"h5\">{t`editor.maxSubEff`}</Popover.Title>\r\n                      <Popover.Content><Trans t={t} i18nKey=\"editor.maxSubEffDesc\" /></Popover.Content>\r\n                    </Popover>}\r\n                  >\r\n                    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n                  </OverlayTrigger>\r\n                </Col>\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Right column */}\r\n        <Col xs={12} lg={6}>\r\n          {/* substat selections */}\r\n          {[0, 1, 2, 3].map((index) => <SubstatInput key={index} className=\"mb-2\" {...{ index, artifact, setSubstat }} />)}\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-n2\">\r\n        {/* Image OCR */}\r\n        <Col xs={12} className=\"mb-2\">\r\n          {/* TODO: artifactDispatch not overwrite */}\r\n          <UploadDisplay setState={state => artifactDispatch({ type: \"overwrite\", artifact: state })} setReset={getUpdloadDisplayReset} artifactInEditor={artifactInEditor} />\r\n        </Col>\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {(dupId || artifact?.id) && <Col xs={12} className=\"mb-2\">\r\n          <Row className=\"d-flex justify-content-around mb-n2\">\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{t`editor.preview`}</h6>\r\n              <div><ArtifactCard artifactObj={artifact} /></div>\r\n            </Col>\r\n            <Col lg={4} md={6} className=\"mb-2\">\r\n              <h6 className=\"text-center\">{dupId ? (isDup ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</h6>\r\n              <div><ArtifactCard artifactId={dupId || artifact?.id} /></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>}\r\n        {/* Error alert */}\r\n        {Boolean(errMsgs.length) && <Col xs={12} className=\"mb-2\">\r\n          <Alert variant=\"danger\" className=\"py-2 px-3 mb-0 \">{errMsgs.map((e, i) => <div key={i}>{e}</div>)}</Alert>\r\n        </Col>}\r\n      </Row></Card.Body>\r\n    <Card.Footer>\r\n      <Button className=\"mr-2\" onClick={() => { saveArtifact(artifact!, artifact!.id); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant={dupId ? \"warning\" : \"primary\"}>\r\n        {artifact?.id ? t`editor.btnSave` : t`editor.btnAdd`}\r\n      </Button>\r\n      <Button className=\"mr-2\" disabled={!artifactInEditor} onClick={() => { canClearArtifact() && reset() }} variant=\"success\">{t`editor.btnClear`}</Button>\r\n      {process.env.NODE_ENV === \"development\" && <Button variant=\"info\" onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n      {Boolean(dupId) && <Button className=\"float-right\" onClick={() => { saveArtifact(artifact!, dupId); reset() }} disabled={ArtifactDatabase.isInvalid(artifact) || errMsgs.length} variant=\"success\">{t`editor.btnUpdate`}</Button>}\r\n    </Card.Footer>\r\n  </Card >\r\n}\r\n\r\nfunction SubstatInput({ index, artifact, setSubstat, className }: { index: number, artifact: IArtifact | undefined, setSubstat: (index: number, substat: Substat) => void, className }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", substats = [] } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = Stat.getStatUnit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: number[] = [], allowedRolls = 0, rollLabel: Displayable | null = null\r\n\r\n  if (artifact) {\r\n    //account for the rolls it will to fill all 4 substates, +1 for its base roll\r\n    const numStars = artifact.numStars\r\n    const { numUpgrades, high } = Artifact.rollInfo(numStars)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = Artifact.getSubstatRollData(key, numStars)\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  if (!error) {\r\n    const rollBadge = <Badge variant={rollNum === 0 ? \"secondary\" : `${rollNum}roll`} className=\"text-darkcontent\">\r\n      {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n    </Badge>\r\n    const rollArr = rolls.map((val, i) =>\r\n      <span key={i} className={`mr-2 text-${rollOffset + rollData.indexOf(val)}roll`}>{valueString(val, unit)}</span>)\r\n\r\n    rollLabel = <Row>\r\n      <Col>{rollBadge} {rollArr}</Col>\r\n      <Col xs=\"auto\"><Trans t={t} i18nKey=\"editor.substat.eff\">Efficiency: <PercentBadge valid={true} value={efficiency ? efficiency : t`editor.substat.noStat` as string} /></Trans></Col>\r\n    </Row>\r\n  }\r\n\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <InputGroup>\r\n      <DropdownButton\r\n        title={key ? Stat.getStatNameWithPercent(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n        disabled={!artifact}\r\n        variant={key ? \"success\" : \"primary\"}\r\n        as={InputGroup.Prepend}\r\n      >\r\n        {Boolean(key) && <Dropdown.Item key={key} onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</Dropdown.Item>}\r\n        {allSubstats\r\n          .filter(key => mainStatKey !== key && substats.every(other => other.key !== key))\r\n          .map(key =>\r\n            <Dropdown.Item key={key} onClick={() => setSubstat(index, { key, value: 0 })} >\r\n              {Stat.getStatNameWithPercent(key)}\r\n            </Dropdown.Item>\r\n          )}\r\n      </DropdownButton>\r\n      <CustomFormControl\r\n        float={unit === \"%\"}\r\n        placeholder={t`editor.substat.selectSub`}\r\n        value={key ? value : \"\"}\r\n        onChange={value => setSubstat(index, { key, value })}\r\n        disabled={!key}\r\n        allowEmpty\r\n      />\r\n      {<ButtonGroup size=\"sm\" as={InputGroup.Append}>\r\n        {rollData.map((v, i) => {\r\n          const newValue = valueString(accurateValue + v, unit)\r\n          return <Button key={i} variant={`${rollOffset + i}roll`} className=\"py-0 text-darkcontent\" disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>}\r\n    </InputGroup>\r\n    <div className=\"p-1\">{error && <Badge variant=\"danger\">{t`ui:error`}</Badge>} {error || rollLabel}</div>\r\n  </Card >\r\n}\r\n\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: Substat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\nexport function artifactReducer(state: IArtifact | undefined, action: Message): IArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      state!.substats[index] = substat\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nfunction checkDuplicate(editorArt: IArtifact | undefined): { dupId?: string, isDup: boolean } {\r\n  if (!editorArt) return { isDup: false }\r\n  const { id, setKey, numStars, level, slotKey, mainStatKey, substats } = editorArt\r\n  if (id) return { isDup: false }\r\n\r\n  //check for a \"upgrade\" or duplicate\r\n  const artifacts = Object.values(ArtifactDatabase.getArtifactDatabase()).filter(candidate =>\r\n    setKey === candidate.setKey &&\r\n    numStars === candidate.numStars &&\r\n    slotKey === candidate.slotKey &&\r\n    mainStatKey === candidate.mainStatKey &&\r\n    level >= candidate.level &&\r\n    candidate.substats.every(candidateSubstat =>\r\n      !candidateSubstat.key || substats.some(substat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value >= candidateSubstat.value\r\n      )))\r\n  if (!artifacts.length) return { isDup: false }\r\n\r\n  const dupArtifacts = artifacts.filter(candidate =>\r\n    level === candidate.level &&\r\n    substats.every(substat =>\r\n      !substat.key || candidate.substats.some(candidateSubstat =>\r\n        substat.key === candidateSubstat.key &&\r\n        substat.value === candidateSubstat.value\r\n      )))\r\n\r\n  const dupId = dupArtifacts[0]?.id! ?? artifacts[0].id!\r\n  return { dupId, isDup: dupArtifacts.length > 0 }\r\n}\r\n\r\nasync function randomizeArtifact(): Promise<IArtifact> {\r\n  const set = getRandomElementFromArray(allArtifactSets)\r\n  const sheet = await ArtifactSheet.get(set)!\r\n  const rarity = getRandomElementFromArray(sheet.rarity)\r\n  const slot = getRandomElementFromArray(Object.keys(sheet.slotNames))\r\n  const mainStatKey = getRandomElementFromArray(Artifact.slotMainStats(slot))\r\n  const level = getRandomIntInclusive(0, rarity * 4)\r\n  const substats: Substat[] = [0, 1, 2, 3].map(i => ({ key: \"\", value: 0 }))\r\n\r\n  const { low, high } = Artifact.rollInfo(rarity)\r\n  const totRolls = Math.floor(level / 4) + getRandomIntInclusive(low, high)\r\n  const numOfInitialSubstats = Math.min(totRolls, 4)\r\n  const numUpgradesOrUnlocks = totRolls - numOfInitialSubstats\r\n\r\n  const RollStat = (substat: SubstatKey): number =>\r\n    getRandomElementFromArray(Artifact.getSubstatRollData(substat, rarity))\r\n\r\n  let remainingSubstats = allSubstats.filter(key => mainStatKey !== key)\r\n  for (const substat of substats.slice(0, numOfInitialSubstats)) {\r\n    substat.key = getRandomElementFromArray(remainingSubstats)\r\n    substat.value = RollStat(substat.key)\r\n    remainingSubstats = remainingSubstats.filter(key => key !== substat.key)\r\n  }\r\n  for (let i = 0; i < numUpgradesOrUnlocks; i++) {\r\n    let substat = getRandomElementFromArray(substats)\r\n    substat.value += RollStat(substat.key as any)\r\n  }\r\n  for (const substat of substats)\r\n    if (substat.key)\r\n      substat.value = parseFloat(valueString(substat.value, Stat.getStatUnit(substat.key)))\r\n\r\n  return {\r\n    setKey: set, numStars: rarity, slotKey: slot, mainStatKey, level, substats, location: \"\", lock: false\r\n  }\r\n}\r\n\r\nconst saveArtifact = (artifact: IArtifact, id: string | undefined) => {\r\n  const artToSave = deepClone(artifact)\r\n  if (id) {\r\n    const art = ArtifactDatabase.get(id)\r\n    if (art) {\r\n      artToSave.id = art.id\r\n      artToSave.location = art.location\r\n    }\r\n  }\r\n  ArtifactDatabase.update(artToSave)\r\n}\r\n","import { faCheckSquare, faLock, faLockOpen, faSortAmountDownAlt, faSortAmountUp, faSquare, faTrash, faUndo, faUserSlash } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Button, ButtonGroup, Card, Dropdown, InputGroup, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport Stat from '../Stat';\r\nimport { allMainStatKeys } from '../Types/artifact';\r\nimport { allArtifactRarities, allSlotKeys } from '../Types/consts';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { clamp, loadFromLocalStorage, saveToLocalStorage } from '../Util/Util';\r\nimport Artifact from './Artifact';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nconst sortKeys = [\"quality\", \"level\", \"efficiency\", \"mefficiency\"]\r\n\r\nconst initialFilter = () => ({\r\n  filterArtSetKey: \"\",\r\n  filterStars: [3, 4, 5],\r\n  filterLevelLow: 0,\r\n  filterLevelHigh: 20,\r\n  filterSlotKey: \"\",\r\n  filterMainStatKey: \"\",\r\n  filterSubstats: [\"\", \"\", \"\", \"\"],\r\n  filterLocation: \"\",\r\n  filterLocked: \"\",\r\n  ascending: false,\r\n  sortType: sortKeys[0],\r\n  maxNumArtifactsToDisplay: 50\r\n})\r\nfunction filterReducer(state, action) {\r\n  if (action.type === \"reset\") return initialFilter()\r\n  return { ...state, ...action }\r\n}\r\nfunction filterInit(initial = initialFilter()) {\r\n  return { ...initial, ...(loadFromLocalStorage(\"ArtifactDisplay.state\") ?? {}) }\r\n}\r\nexport default function ArtifactDisplay(props) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const [filters, filterDispatch] = useReducer(filterReducer, initialFilter(), filterInit)\r\n  const [artToEditId, setartToEditId] = useState(props?.location?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const scrollRef = useRef(null)\r\n  const invScrollRef = useRef(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n  const deleteArtifact = useCallback(\r\n    id => {\r\n      const art = ArtifactDatabase.get(id);\r\n      if (art && art.location)\r\n        CharacterDatabase.equipArtifactOnSlot(art.location, art.slotKey, \"\");\r\n      ArtifactDatabase.removeArtifactById(id)\r\n    }, [])\r\n  const editArtifact = useCallback(\r\n    id => {\r\n      setartToEditId(id);\r\n      (scrollRef?.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(null), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    ArtifactDatabase.registerListener(forceUpdate)\r\n    return () => ArtifactDatabase.unregisterListener(forceUpdate)\r\n  }, [forceUpdate])\r\n\r\n  useEffect(() => {\r\n    saveToLocalStorage(\"ArtifactDisplay.state\", filters)\r\n  }, [filters])\r\n\r\n  const { artifacts, totalArtNum, numUnequip, numUnlock, numLock } = useMemo(() => {\r\n    const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n    const artifactDB = ArtifactDatabase.getArtifactDatabase() || {}\r\n    const artifacts = Object.values(artifactDB).filter(art => {\r\n      if (filterLocked) {\r\n        if (filterLocked === \"locked\" && !art.lock) return false\r\n        if (filterLocked === \"unlocked\" && art.lock) return false\r\n      }\r\n      if (filterLocation === \"Inventory\") {\r\n        if (art.location) return false;\r\n      } else if (filterLocation === \"Equipped\") {\r\n        if (!art.location) return false;\r\n      } else if (filterLocation && filterLocation !== art.location) return false;\r\n\r\n      if (filterArtSetKey && filterArtSetKey !== art.setKey) return false;\r\n      if (filterSlotKey && filterSlotKey !== art.slotKey) return false\r\n      if (filterMainStatKey && filterMainStatKey !== art.mainStatKey) return false\r\n      if (art.level < filterLevelLow || art.level > filterLevelHigh) return false;\r\n      if (!filterStars.includes(art.numStars)) return false;\r\n      for (const filterKey of filterSubstats)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }).sort((a, b) => {\r\n      let sortNum = 0\r\n      switch (sortType) {\r\n        case \"quality\":\r\n          sortNum = a.numStars - b.numStars\r\n          if (sortNum === 0)\r\n            sortNum = a.level - b.level\r\n          break;\r\n        case \"level\":\r\n          sortNum = a.level - b.level\r\n          if (sortNum === 0)\r\n            sortNum = a.numStars - b.numStars\r\n          break;\r\n        case \"efficiency\":\r\n          sortNum = a.currentEfficiency! - b.currentEfficiency!\r\n          break;\r\n        case \"mefficiency\":\r\n          sortNum = a.maximumEfficiency! - b.maximumEfficiency!\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n      return sortNum * (ascending ? 1 : -1)\r\n    })\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 1 : 0), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n\r\n    return { artifacts, totalArtNum: Object.keys(artifactDB)?.length || 0, numUnequip, numUnlock, numLock, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [filters, dbDirty])\r\n\r\n  const { filterArtSetKey, filterSlotKey, filterMainStatKey, filterStars, filterLevelLow, filterLevelHigh, filterSubstats = initialFilter().filterSubstats, maxNumArtifactsToDisplay, filterLocation = \"\", filterLocked = \"\", sortType = sortKeys[0], ascending = false } = filters\r\n\r\n  const { artifactsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifacts.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifacts.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifacts, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(filterLocation))\r\n  let locationDisplay\r\n  if (!filterLocation) locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.any\") })\r\n  else if (filterLocation === \"Inventory\") locationDisplay = t(\"locationDisplay\", { value: t(\"filterLocation.inventory\") })\r\n  else if (filterLocation === \"Equipped\") locationDisplay = t(\"filterLocation.currentlyEquipped\")\r\n  else locationDisplay = <b>{locationCharacterSheet?.name}</b>\r\n\r\n  let lockedDisplay\r\n  if (filterLocked === \"locked\") lockedDisplay = <span><FontAwesomeIcon icon={faLock} /> {t`lock.locked`}</span>\r\n  else if (filterLocked === \"unlocked\") lockedDisplay = <span><FontAwesomeIcon icon={faLockOpen} /> {t`lock.unlocked`}</span>\r\n  else lockedDisplay = t(\"lockDisplay\", { value: t(\"lock.any\") })\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifacts.map(art => Artifact.unequipArtifact(art.id))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${artifacts.length} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.removeArtifactById(art.id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numLock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, true))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numUnlock} artifacts?`) &&\r\n    artifacts.map(art => ArtifactDatabase.setLocked(art.id, false))\r\n\r\n\r\n  const showingValue = artifacts.length !== totalArtNum ? `${artifacts.length}/${totalArtNum}` : `${totalArtNum}`\r\n\r\n  return <Container className=\"mt-2\" >\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n    <div className=\"mb-2\" ref={scrollRef}>\r\n      <ArtifactEditor\r\n        artifactIdToEdit={artToEditId}\r\n        cancelEdit={cancelEditArtifact}\r\n      />\r\n    </div>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" ref={invScrollRef}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col><span><Trans i18nKey=\"artifactFilter\" >Artifact Filter</Trans></span></Col>\r\n          <Col xs=\"auto\"><Button size=\"sm\" className=\"ml-2\" variant=\"danger\" onClick={() => filterDispatch({ type: \"reset\" })} ><FontAwesomeIcon icon={faUndo} className=\"fa-fw\" /> Reset Filters</Button></Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row className=\"mb-n2\">\r\n          {/* Left half */}\r\n          <Col xs={12} lg={6}>\r\n            {/* Artifact set filter */}\r\n            <Dropdown as={InputGroup.Prepend} className=\"flex-grow-1 mb-2\">\r\n              <Dropdown.Toggle className=\"w-100\" variant={filterArtSetKey ? \"success\" : \"primary\"}>\r\n                {artifactSheets?.[filterArtSetKey]?.name ?? t('editor.set.artifactSet')}\r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu>\r\n                <Dropdown.Item onClick={() => filterDispatch({ filterArtSetKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                {artifactSheets && ArtifactSheet.namesByMaxRarities(artifactSheets).map(([star, sets]) =>\r\n                  <React.Fragment key={star}>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.ItemText>Max Rarity <Stars stars={star} /></Dropdown.ItemText>\r\n                    {sets.map(([key, name]) =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterArtSetKey: key })}>\r\n                        {name}\r\n                      </Dropdown.Item>)}\r\n                  </React.Fragment>\r\n                )}\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            {/* Artifact stars filter */}\r\n            <ToggleButtonGroup className=\"w-100 d-flex mb-2\" type=\"checkbox\" as={InputGroup.Append} onChange={(e) => filterDispatch({ filterStars: e })} value={filterStars}>\r\n              {allArtifactRarities.map(star => {\r\n                let selected = filterStars.includes(star)\r\n                return <ToggleButton key={star} value={star} variant={selected ? \"success\" : \"primary\"}><FontAwesomeIcon icon={selected ? faCheckSquare : faSquare} /> <Stars stars={star} /></ToggleButton>\r\n              })}\r\n            </ToggleButtonGroup>\r\n\r\n            {/* Artiface level filter */}\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"filterLevelFormat\">\r\n                      Level <span className={`text-${filterLevelLow > 0 ? \"success\" : \"\"}`}>Low</span>/<span className={`text-${filterLevelHigh < 20 ? \"success\" : \"\"}`}>High</span> (Inclusive)\r\n                    </Trans>\r\n                  </span>\r\n                </InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <CustomFormControl\r\n                value={filterLevelLow}\r\n                placeholder={t('ui:game.minLevel')}\r\n                onChange={val => filterDispatch({ filterLevelLow: clamp(val, 0, filterLevelHigh) })}\r\n              />\r\n              <CustomFormControl\r\n                value={filterLevelHigh}\r\n                placeholder={t('ui:game.maxLevel')}\r\n                onChange={val => filterDispatch({ filterLevelHigh: clamp(val, filterLevelLow, 20) })}\r\n              />\r\n            </InputGroup>\r\n\r\n            {/* Sort */}\r\n            <ButtonGroup className=\"w-100 d-flex flex-row mb-2\">\r\n              <Dropdown as={ButtonGroup} className=\"flex-grow-1\">\r\n                <Dropdown.Toggle >\r\n                  <span>\r\n                    <Trans t={t} i18nKey=\"ui:sortByFormat\" value={t(`sortMap.${sortType}`) as any}>Sort By: {{ value: t(`sortMap.${sortType}`) }}</Trans>\r\n                  </span>\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {sortKeys.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => filterDispatch({ sortType: key })}>{t(`sortMap.${key}`) as any}</Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <Button onClick={() => filterDispatch({ ascending: !ascending })} className=\"flex-shrink-1\">\r\n                <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" /><span> {ascending ? <Trans t={t} i18nKey=\"ui:ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"ui:descending\" >Descending</Trans>}</span>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col>\r\n          {/* Right half */}\r\n          <Col xs={12} lg={6}>\r\n            <Row>\r\n              {/* Left */}\r\n              <Col>\r\n                {/* Artifact Slot */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterSlotKey ? \"success\" : \"primary\"}>\r\n                    {filterSlotKey ? <SlotNameWithIcon slotKey={filterSlotKey} /> : t('slot')}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterSlotKey: \"\" })} ><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allSlotKeys.map(key =>\r\n                      <Dropdown.Item key={key} onClick={() => filterDispatch({ filterSlotKey: key })} ><SlotNameWithIcon slotKey={key} /></Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n                {/* Main Stat filter */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\">\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterMainStatKey ? \"success\" : \"primary\"}>\r\n                    {Stat.getStatNameWithPercent(filterMainStatKey, t(`mainStat`))}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterMainStatKey: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    {allMainStatKeys.map(statKey => <Dropdown.Item key={statKey} onClick={() => filterDispatch({ filterMainStatKey: statKey })} >\r\n                      {Stat.getStatNameWithPercent(statKey)}\r\n                    </Dropdown.Item>)}\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* location */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocation ? \"success\" : \"primary\"} >\r\n                    {locationDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"\" })}><Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Inventory\" })}><Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocation: \"Equipped\" })}><Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans></Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <CharacterSelectionDropdownList onSelect={cid => filterDispatch({ filterLocation: cid })} />\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n\r\n                {/* locked state */}\r\n                <Dropdown className=\"flex-grow-1 mb-2\" >\r\n                  <Dropdown.Toggle className=\"w-100\" variant={filterLocked ? \"success\" : \"primary\"} >\r\n                    {lockedDisplay}\r\n                  </Dropdown.Toggle>\r\n                  <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"\" })}><Trans t={t} i18nKey=\"lock.any\" >Any</Trans></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"locked\" })}><span><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"lock.locked\" >Locked</Trans></span></Dropdown.Item>\r\n                    <Dropdown.Item onClick={() => filterDispatch({ filterLocked: \"unlocked\" })}><span><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"lock.unlocked\" >Unlocked</Trans></span></Dropdown.Item>\r\n                  </Dropdown.Menu>\r\n                </Dropdown>\r\n              </Col>\r\n              {/* Right */}\r\n              <Col>\r\n                {/* substat filter */}\r\n                {filterSubstats.map((substatKey, index) =>\r\n                  <Dropdown className=\"mb-2\" key={index}>\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" className=\"w-100\" variant={substatKey ? \"success\" : \"primary\"}>\r\n                      {substatKey ? Stat.getStatNameWithPercent(substatKey) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                      <Dropdown.Item\r\n                        onClick={() => {\r\n                          filterSubstats[index] = \"\"\r\n                          filterDispatch({ filterSubstats })\r\n                        }}\r\n                      ><Trans t={t} i18nKey=\"editor.substat.noSubstat\" >No Substat</Trans></Dropdown.Item>\r\n                      {Artifact.getSubstatKeys().filter(key => !filterSubstats.includes(key)).map(key =>\r\n                        <Dropdown.Item key={key}\r\n                          onClick={() => {\r\n                            filterSubstats[index] = key\r\n                            filterDispatch({ filterSubstats })\r\n                          }}\r\n                        >{Stat.getStatNameWithPercent(key)}</Dropdown.Item>\r\n                      )}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                )}\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row className=\"mb-2\">\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnequip} onClick={unequipArtifacts}><FontAwesomeIcon icon={faUserSlash} /> <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!artifacts.length} onClick={deleteArtifacts}><FontAwesomeIcon icon={faTrash} /> <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numLock} onClick={lockArtifacts}><FontAwesomeIcon icon={faLock} /> <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans></Button></Col>\r\n          <Col xs={6} lg={3} className=\"mb-2\"><Button className=\"w-100\" variant=\"danger\" disabled={!numUnlock} onClick={unlockArtifacts}><FontAwesomeIcon icon={faLockOpen} /> <Trans t={t} i18nKey=\"button.unlockArtifacts\" >Unlock Artifacts</Trans></Button></Col>\r\n          <Col xs={12} className=\"mt-n2\"><small><Trans t={t} i18nKey=\"buttonHint\">Note: the above buttons only applies to <b>filtered artifacts</b></Trans></small></Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {numPages > 1 && <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => setpageIdex(i)} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>}\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n    <Row>\r\n      {artifactsToShow.map((art, i) =>\r\n        <Col key={i} lg={4} md={6} className=\"mb-2\">\r\n          <ArtifactCard\r\n            artifactId={art.id}\r\n            onDelete={() => deleteArtifact(art.id)}\r\n            onEdit={() => editArtifact(art.id)}\r\n          />\r\n        </Col>\r\n      )}\r\n    </Row>\r\n    {numPages > 1 && <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup size=\"sm\">\r\n              {[...Array(numPages).keys()].map(i => <Button key={i} className=\"px-3\" variant={currentPageIndex === i ? \"success\" : \"primary\"} onClick={() => {\r\n                setpageIdex(i);\r\n                (invScrollRef.current as any)?.scrollIntoView({ behavior: \"smooth\" })\r\n              }} >\r\n                {i === 0 ? \"Page \" : \"\"}{i + 1}\r\n              </Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\"><Trans t={t} i18nKey=\"showingNum\" count={artifactsToShow.length} value={showingValue} >Showing <b>{{ count: artifactsToShow.length }}</b> out of {{ value: showingValue }} Artifacts</Trans></Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>}\r\n  </Container >\r\n}"],"sourceRoot":""}