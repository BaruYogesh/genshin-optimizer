{"version":3,"file":"static/js/611.1340dd19.chunk.js","mappings":"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","sources":["Components/Artifact/ArtifactLevelSlider.tsx","Components/Artifact/ArtifactSetDropdown.tsx","Components/BootstrapTooltip.tsx","Components/InfoComponent.tsx","Components/SortByButton.tsx","Components/StatFilterCard.tsx","DataContext.tsx","Data/Artifacts/ArtifactSheet.tsx","GlobalSettings.tsx","Components/Artifact/ArtifactRarityDropdown.tsx","Components/Artifact/ArtifactSlotDropdown.tsx","Components/CustomNumberTextField.tsx","PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","PageArtifact/BorrowManager.ts","PageArtifact/ScanningUtil.tsx","PageArtifact/ArtifactEditor.tsx","Components/Artifact/ArtifactMainStatMultipleSelectChip.tsx","Components/Artifact/ArtifactSetMultipleSelectChip.tsx","Components/Artifact/ArtifactSubStatMultipleSelectChip.tsx","PageArtifact/ArtifactFilter.tsx","PageArtifact/ArtifactSort.ts","PageArtifact/ProbabilityFilter.tsx","PageArtifact/ArtifactDisplay.tsx","ReactHooks/useDBState.tsx","Util/SortByFilters.ts"],"sourcesContent":["import { Card, Slider } from \"@mui/material\"\r\nimport { useCallback, useEffect, useState } from \"react\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport CustomNumberInput from \"../CustomNumberInput\"\r\n\r\nexport default function ArtifactLevelSlider({ levelLow, levelHigh, setLow, setHigh, setBoth, dark = false, disabled = false }: {\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  setLow: (low: number) => void,\r\n  setHigh: (high: number) => void,\r\n  setBoth: (low: number, high: number) => void,\r\n  dark?: boolean,\r\n  disabled?: boolean,\r\n}) {\r\n  const [sliderLow, setsliderLow] = useState(levelLow)\r\n  const [sliderHigh, setsliderHigh] = useState(levelHigh)\r\n  const setSlider = useCallback(\r\n    (e, [l, h]) => {\r\n      setsliderLow(l)\r\n      setsliderHigh(h)\r\n    },\r\n    [setsliderLow, setsliderHigh])\r\n  useEffect(() => setsliderLow(levelLow), [setsliderLow, levelLow])\r\n\r\n  useEffect(() => setsliderHigh(levelHigh), [setsliderHigh, levelHigh])\r\n  return <Card sx={{ width: \"100%\", display: \"flex\", alignItems: \"center\", bgcolor: dark ? \"contentDark.main\" : \"contentLight.main\" }}>\r\n    <CustomNumberInput\r\n      value={sliderLow}\r\n      onChange={val => setLow(clamp(val, 0, levelHigh))}\r\n      sx={{ pl: 2, width: 100, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      startAdornment={\"Level: \"}\r\n      disabled={disabled}\r\n    />\r\n    <Slider sx={{ width: 100, flexGrow: 1, mx: 2 }}\r\n      getAriaLabel={() => 'Arifact Level Range'}\r\n      value={[sliderLow, sliderHigh]}\r\n      onChange={setSlider}\r\n      onChangeCommitted={(e, value) => setBoth(value[0], value[1])}\r\n      valueLabelDisplay=\"auto\"\r\n      min={0} max={20} step={1} marks\r\n      disabled={disabled}\r\n    />\r\n    <CustomNumberInput\r\n      value={sliderHigh}\r\n      onChange={val => setHigh(clamp(val, levelLow, 20))}\r\n      sx={{ px: 1, width: 50, }}\r\n      inputProps={{ sx: { textAlign: \"center\" } }}\r\n      disabled={disabled}\r\n    />\r\n  </Card>\r\n}\r\n","import { Replay } from \"@mui/icons-material\";\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem, Typography } from \"@mui/material\";\r\nimport React, { useMemo } from \"react\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport { ArtifactSheet } from \"../../Data/Artifacts/ArtifactSheet\";\r\nimport usePromise from \"../../ReactHooks/usePromise\";\r\nimport { ArtifactRarity, ArtifactSetKey, Rarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport ImgIcon from \"../Image/ImgIcon\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = Omit<ButtonProps, \"onChange\"> & {\r\n  selectedSetKey?: ArtifactSetKey | \"\"\r\n  onChange: (setKey: ArtifactSetKey | \"\") => void\r\n  hasUnselect?: boolean\r\n  artifactSetsByRarity?: { [rarity in ArtifactRarity]: ArtifactSetKey[] }\r\n}\r\nexport default function ArtifactSetDropdown({ selectedSetKey = \"\", onChange, artifactSetsByRarity, hasUnselect = false, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const sheet = artifactSheets?.[selectedSetKey]\r\n  const displaySets = useMemo(() => {\r\n    if (artifactSetsByRarity) return artifactSetsByRarity\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets, artifactSetsByRarity])\r\n  return <DropdownButton\r\n    {...props}\r\n    title={sheet?.name ?? t`editor.set.artifactSet`}\r\n    startIcon={sheet?.defIconSrc && <ImgIcon src={sheet?.defIconSrc} />}\r\n    color={sheet ? \"success\" : \"primary\"}\r\n  >\r\n    {hasUnselect && <MenuItem onClick={() => onChange(\"\")} selected={selectedSetKey === \"\"} disabled={selectedSetKey === \"\"}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem >}\r\n    {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n      ...(((i > 0) || hasUnselect) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n      ...(sets.length ? [<MenuItem key={`${star}header`} >\r\n        <Typography>\r\n          <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n        </Typography>\r\n      </MenuItem>] : []),\r\n      ...sets.map(setKey => <MenuItem key={setKey} onClick={() => onChange(setKey)} selected={selectedSetKey === setKey} disabled={selectedSetKey === setKey}>\r\n        <ListItemIcon>\r\n          <ImgIcon src={artifactSheets?.[setKey]?.defIconSrc} sx={{ fontSize: \"1.5em\" }} />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {artifactSheets?.[setKey]?.name}\r\n        </ListItemText>\r\n      </MenuItem >)\r\n    ])}\r\n  </DropdownButton>\r\n}\r\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst BootstrapTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} arrow classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.arrow}`]: {\r\n    color: theme.palette.common.black,\r\n  },\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.common.black,\r\n  },\r\n}));\r\nexport default BootstrapTooltip","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Button, CardContent, Divider, Grid, Skeleton, Typography } from \"@mui/material\"\r\nimport { Suspense, useCallback, useState } from \"react\"\r\nimport useDBState from \"../ReactHooks/useDBState\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport CardDark from \"./Card/CardDark\"\r\nimport CloseButton from \"./CloseButton\"\r\nimport ModalWrapper from \"./ModalWrapper\"\r\nimport { Translate } from \"./Translate\"\r\nexport function initialInfoShownState() {\r\n  return {\r\n    artifactPage: true,\r\n    buildPage: true,\r\n    characterPage: true,\r\n  }\r\n}\r\ntype StateInfoShown = ReturnType<typeof initialInfoShownState>\r\ntype InfoShownPageKey = keyof StateInfoShown\r\n\r\nexport default function InfoComponent({ pageKey, text = \"\", modalTitle = \"\", children }: { pageKey: InfoShownPageKey, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [stateInfoShown, setStateInfoShown] = useDBState(\"InfoShown\", initialInfoShownState)\r\n  const showInfoModal = stateInfoShown[pageKey]\r\n  const setshowInfoModal = useCallback((value: boolean) => setStateInfoShown({ [pageKey]: value }), [setStateInfoShown, pageKey])\r\n\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => setshowInfoModal(false)\r\n\r\n  return <CardDark >\r\n    <Grid container>\r\n      <Grid item flexGrow={1}>\r\n        <Typography variant=\"caption\" pl={1} >\r\n          {displayText}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <Button size=\"small\" color=\"info\" variant=\"contained\" onClick={() => setshowInfoModal(true)} startIcon={<FontAwesomeIcon icon={faQuestionCircle} />}>\r\n          <Translate ns=\"ui\" key18=\"info\" />\r\n        </Button>\r\n      </Grid>\r\n    </Grid>\r\n    <ModalWrapper containerProps={{ maxWidth: \"xl\" }} open={showInfoModal} onClose={() => closeModal()} >\r\n      <CardDark >\r\n        <CardContent sx={{ py: 1 }}>\r\n          <Grid container>\r\n            <Grid item flexGrow={1}>\r\n              <Typography variant=\"h6\">{modalTitle}</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <CloseButton onClick={closeModal} />\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent>\r\n          <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}>\r\n            {children}\r\n          </Suspense>\r\n        </CardContent>\r\n        <Divider />\r\n        <CardContent sx={{ py: 1 }}>\r\n          <CloseButton large onClick={closeModal} />\r\n        </CardContent>\r\n      </CardDark>\r\n    </ModalWrapper >\r\n  </CardDark>\r\n}\r\n","import { faSortAmountDownAlt, faSortAmountUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, ButtonGroup, ButtonGroupProps, MenuItem } from \"@mui/material\";\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\nimport DropdownButton from \"./DropdownMenu/DropdownButton\";\r\n\r\ntype SortByButtonProps = ButtonGroupProps & {\r\n  sortKeys: string[]\r\n  value: string\r\n  onChange: (value: string) => void\r\n  ascending: boolean\r\n  onChangeAsc: (value: boolean) => void\r\n}\r\n// Assumes that all the sortKeys has corresponding translations in ui.json sortMap\r\nexport default function SortByButton({ sortKeys, value, onChange, ascending, onChangeAsc, ...props }: SortByButtonProps) {\r\n  const { t } = useTranslation(\"ui\")\r\n  return <ButtonGroup {...props} >\r\n    <DropdownButton title={<Trans t={t} i18nKey=\"sortByFormat\" value={t(`sortMap.${value}`) as any}>Sort By: {{ value: t(`sortMap.${value}`) }}</Trans>}>\r\n      {sortKeys.map(key =>\r\n        <MenuItem key={key} selected={value === key} disabled={value === key} onClick={() => onChange(key)}>{t(`sortMap.${key}`) as any}</MenuItem>)}\r\n    </DropdownButton>\r\n    <Button onClick={() => onChangeAsc(!ascending)} startIcon={<FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />}>\r\n      {ascending ? <Trans t={t} i18nKey=\"ascending\" >Ascending</Trans> : <Trans t={t} i18nKey=\"descending\" >Descending</Trans>}\r\n    </Button>\r\n  </ButtonGroup>\r\n}","import { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, ButtonGroup, CardContent, Divider, Grid, MenuItem, Typography } from '@mui/material';\r\nimport React, { useCallback, useContext } from 'react';\r\nimport CardLight from './Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from './CustomNumberInput';\r\nimport DropdownButton from './DropdownMenu/DropdownButton';\r\nimport { DataContext } from '../DataContext';\r\nimport { uiInput as input } from '../Formula';\r\nimport KeyMap, { StatKey } from '../KeyMap';\r\nimport { ElementKey } from '../Types/consts';\r\nexport default function StatFilterCard({ statFilters = {}, setStatFilters, disabled = false }:\r\n  { statFilters: Dict<StatKey, number>, setStatFilters: (object: Dict<StatKey, number>) => void, disabled?: boolean }) {\r\n  const { data } = useContext(DataContext)\r\n  const statKeys: StatKey[] = [\"atk\", \"hp\", \"def\", \"eleMas\", \"critRate_\", \"critDMG_\", \"heal_\", \"enerRech_\"]\r\n  if (data.get(input.weaponType).value !== \"catalyst\") statKeys.push(\"physical_dmg_\")\r\n  const charEle = data.get(input.charEle).value as ElementKey\r\n  statKeys.push(`${charEle}_dmg_`)\r\n\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],)\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>Minimum Final Stat Filter</Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        {Object.entries(statFilters).map(([statKey, min]) => {\r\n          return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Grid>\r\n        })}\r\n        <Grid item xs={12}>\r\n          <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nexport function StatFilterItem({ statKey, statKeys = [], value = 0, close, setFilter, disabled = false }: {\r\n  statKey?: string, statKeys: string[], value?: number, close?: () => void, setFilter: (statKey: string, value?: number) => void, disabled?: boolean\r\n}) {\r\n  const isFloat = KeyMap.unit(statKey) === \"%\"\r\n  const onChange = useCallback(s => statKey && setFilter(statKey, s), [setFilter, statKey])\r\n  return <ButtonGroup sx={{ width: \"100%\" }}>\r\n    <DropdownButton\r\n      title={statKey ? KeyMap.get(statKey) : \"New Stat\"}\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <MenuItem key={sKey} onClick={() => { close?.(); setFilter(sKey, value) }}>{KeyMap.get(sKey)}</MenuItem>)}\r\n    </DropdownButton>\r\n    <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }}>\r\n      <CustomNumberInput\r\n        disabled={!statKey}\r\n        float={isFloat}\r\n        value={value}\r\n        placeholder=\"Min Value\"\r\n        onChange={onChange}\r\n        sx={{ px: 2 }}\r\n      />\r\n    </CustomNumberInputButtonGroupWrapper>\r\n    {!!close && <Button color=\"error\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrashAlt} /></Button>}\r\n  </ButtonGroup>\r\n}\r\n","import { createContext } from \"react\"\r\nimport CharacterSheet from \"./Data/Characters/CharacterSheet\"\r\nimport { UIData } from \"./Formula/uiData\"\r\nimport { ICachedCharacter } from \"./Types/character\"\r\nimport { CharacterKey } from \"./Types/consts\"\r\nimport { ICachedWeapon } from \"./Types/weapon\"\r\nimport WeaponSheet from \"./Data/Weapons/WeaponSheet\"\r\nimport { characterReducerAction } from \"./ReactHooks/useCharacterReducer\";\r\nexport type TeamData = Partial<Record<CharacterKey, {\r\n  target: UIData\r\n  buffs: Dict<CharacterKey, UIData>\r\n  character: ICachedCharacter\r\n  weapon: ICachedWeapon\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet,\r\n}>>\r\nexport type dataContextObj = {\r\n  character: ICachedCharacter\r\n  characterSheet: CharacterSheet\r\n  data: UIData\r\n  oldData?: UIData\r\n  mainStatAssumptionLevel: number\r\n  teamData: TeamData\r\n  characterDispatch: (action: characterReducerAction) => void\r\n}\r\n\r\n// If using this context without a Provider, then stuff will crash...\r\n// In theory, none of the components that uses this context should work without a provider...\r\nexport const DataContext = createContext({} as dataContextObj)\r\n","import ImgIcon from \"../../Components/Image/ImgIcon\";\r\nimport { Translate } from \"../../Components/Translate\";\r\nimport { mergeData } from \"../../Formula/api\";\r\nimport { Data } from \"../../Formula/type\";\r\nimport { allSlotKeys, ArtifactRarity, ArtifactSetKey, SetNum, SlotKey } from \"../../Types/consts\";\r\nimport { DocumentSection } from \"../../Types/sheet\";\r\nimport { UIData } from \"../../Formula/uiData\"\r\nimport { input } from \"../../Formula\"\r\nimport SqBadge from \"../../Components/SqBadge\";\r\nimport IConditional from \"../../Types/IConditional\";\r\n\r\n// TODO: remove typecasting once all sheets populated\r\nconst artifactSheets = import(\".\").then(imp => imp.default)\r\n\r\nexport interface IArtifactSheet {\r\n  name: string, // only to stored the English name for OCR, otherwise, should come from localization pipeline\r\n  rarity: readonly ArtifactRarity[],\r\n  icons: Dict<SlotKey, string>,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  document?: DocumentSection[],\r\n}\r\n\r\n\r\nconst tr = (setKey: string, strKey: string) => <Translate ns={`artifact_${setKey}_gen`} key18={strKey} />\r\nconst allData = artifactSheets.then(as => mergeData(Object.values(as).map(s => s.data)))\r\nexport class ArtifactSheet {\r\n  readonly sheet: IArtifactSheet\r\n  readonly key: ArtifactSetKey\r\n  readonly data: Data\r\n  constructor(setKey: ArtifactSetKey, sheet: IArtifactSheet, data: Data) {\r\n    this.sheet = sheet\r\n    this.key = setKey\r\n    this.data = data\r\n  }\r\n\r\n  get name() { return tr(this.key, \"setName\") }\r\n  get defIconSrc() {\r\n    const slotKey = this.slots[0]\r\n    if (!this.slotIcons[slotKey]) return undefined\r\n    return this.slotIcons[slotKey]\r\n  }\r\n  get defIcon() { return <ImgIcon src={this.defIconSrc} sx={{ fontSize: \"1.5em\" }} /> }\r\n  /**\r\n   * @deprecated use src directly\r\n   */\r\n  get nameWithIcon() {\r\n    const slotKey = this.slots[0]\r\n    return <span><ImgIcon src={this.slotIcons[slotKey]} /> {tr(this.key, \"setName\")}</span>\r\n  }\r\n\r\n  //This is only for OCR, because we only scan in english right now.\r\n  get nameRaw(): string { return this.sheet.name }\r\n  get rarity(): readonly ArtifactRarity[] { return this.sheet.rarity }\r\n  get slots(): SlotKey[] {\r\n    switch (this.key) {\r\n      case \"PrayersForDestiny\":\r\n      case \"PrayersForIllumination\":\r\n      case \"PrayersForWisdom\":\r\n      case \"PrayersToSpringtime\": return [\"circlet\"]\r\n      default: return [...allSlotKeys]\r\n    }\r\n  }\r\n  get slotIcons(): Dict<SlotKey, string> { return this.sheet.icons }\r\n  get setEffects(): Dict<SetNum, SetEffectEntry> { return this.sheet.setEffects }\r\n  getSlotName = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.name`)\r\n  getSlotDesc = (slotKey: SlotKey) => tr(this.key, `pieces.${slotKey}.desc`)\r\n  setEffectDesc = (setNum: SetNum): Displayable => tr(this.key, `setEffects.${setNum}`)\r\n  setEffectDocument = (setNum: SetNum) => this.sheet.setEffects[setNum]?.document\r\n\r\n  static get(set: ArtifactSetKey | undefined): Promise<ArtifactSheet> | undefined { return set ? artifactSheets.then(a => a[set]) : undefined }\r\n  static get getAll() { return artifactSheets }\r\n  static get getAllData() { return allData }\r\n  static setKeysByRarities(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>): Dict<ArtifactRarity, ArtifactSetKey[]> {\r\n    const grouped: Dict<ArtifactRarity, ArtifactSetKey[]> = {}\r\n    Object.entries(sheets).forEach(([key, sheet]) => {\r\n      const rarity = Math.max(...sheet.rarity) as ArtifactRarity\r\n      if (grouped[rarity]) grouped[rarity]!.push(key)\r\n      else grouped[rarity] = [key]\r\n    })\r\n    return grouped\r\n  }\r\n\r\n  static setEffects(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, data: UIData) {\r\n    const artifactSetEffect: Partial<Record<ArtifactSetKey, SetNum[]>> = {}\r\n    Object.entries(sheets).forEach(([setKey, sheet]) => {\r\n      const setNums = (Object.keys(sheet.setEffects).map(k => parseInt(k)) as SetNum[]).filter(sn => sheet.hasEnough(sn, data))\r\n      if (setNums.length) artifactSetEffect[setKey] = setNums\r\n    })\r\n    return artifactSetEffect\r\n  }\r\n  hasEnough = (setNum: SetNum, data: UIData) => (data.get(input.artSet[this.key]).value ?? 0) >= setNum\r\n}\r\nexport const conditionalHeader = (tr: (string) => Displayable, img: string): IConditional[\"header\"] => {\r\n  return {\r\n    title: tr(\"setName\"),\r\n    icon: <ImgIcon size={2} sx={{ m: -1 }} src={img} />,\r\n    action: <SqBadge color=\"success\">4-set</SqBadge>\r\n  }\r\n}\r\n","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import { ButtonProps, MenuItem } from \"@mui/material\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { ArtifactRarity } from \"../../Types/consts\";\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\";\r\nimport { Stars } from \"../StarDisplay\";\r\n\r\ntype props = ButtonProps & {\r\n  rarity?: ArtifactRarity\r\n  onChange: (rarity: ArtifactRarity) => void\r\n  filter: (ArtifactRarity) => boolean\r\n}\r\n\r\nexport default function ArtifactRarityDropdown({ rarity, onChange, filter, ...props }: props) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  return <DropdownButton\r\n    {...props}\r\n    title={rarity ? <Stars stars={rarity} /> : t`editor.rarity`}\r\n    color={rarity ? \"success\" : \"primary\"}\r\n  >\r\n    {([5, 4, 3] as ArtifactRarity[]).map(rarity =>\r\n      <MenuItem key={rarity} disabled={!filter(rarity)} onClick={() => onChange(rarity)}>\r\n        <Stars stars={rarity} />\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { Replay } from \"@mui/icons-material\"\r\nimport { ButtonProps, Divider, ListItemIcon, ListItemText, MenuItem } from \"@mui/material\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { allSlotKeys, SlotKey } from \"../../Types/consts\"\r\nimport DropdownButton from \"../DropdownMenu/DropdownButton\"\r\nimport { artifactSlotIcon } from \"./SlotNameWIthIcon\"\r\n\r\ntype ArtifactSlotDropdownProps = ButtonProps & {\r\n  slotKey?: SlotKey | \"\"\r\n  onChange: (slotKey: SlotKey | \"\") => void\r\n  hasUnselect?: boolean\r\n}\r\n\r\nexport default function ArtifactSlotDropdown({ slotKey = \"\", onChange, hasUnselect = false, ...props }: ArtifactSlotDropdownProps) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  return <DropdownButton\r\n    title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\r\n    color={slotKey ? \"success\" : \"primary\"}\r\n    startIcon={slotKey ? artifactSlotIcon(slotKey) : undefined}\r\n    {...props}\r\n  >\r\n    {hasUnselect && <MenuItem selected={slotKey === \"\"} disabled={slotKey === \"\"} onClick={() => onChange(\"\")} >\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        {t`ui:unselect`}\r\n      </ListItemText>\r\n    </MenuItem>}\r\n    {hasUnselect && <Divider />}\r\n    {allSlotKeys.map(key =>\r\n      <MenuItem key={key} selected={slotKey === key} disabled={slotKey === key} onClick={() => onChange(key)} >\r\n        <ListItemIcon>\r\n          {artifactSlotIcon(key)}\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          {t(`artifact:slotName:${key}`)}\r\n        </ListItemText>\r\n      </MenuItem>)}\r\n  </DropdownButton>\r\n}\r\n","import { TextField, TextFieldProps } from '@mui/material'\r\nimport { useCallback, useEffect, useState } from 'react'\r\ntype props = TextFieldProps & {\r\n  value?: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  allowEmpty?: boolean,\r\n}\r\nexport default function CustomNumberTextField({ value, onChange, disabled = false, float = false, ...props }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <TextField\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    type=\"number\"\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    {...props}\r\n  />\r\n}","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Box, Grid, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans } from 'react-i18next';\r\nimport BootstrapTooltip from '../../../Components/BootstrapTooltip';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport PercentBadge from '../../PercentBadge';\r\n\r\nexport default function SubstatEfficiencyDisplayCard({ efficiency, max = false, t, valid }) {\r\n  const eff = max ? \"maxSubEff\" : \"curSubEff\"\r\n  return <CardLight sx={{ py: 1, px: 2 }}>\r\n    <Grid container spacing={1}>\r\n      <Grid item>{t(`editor.${eff}`)}</Grid>\r\n      <Grid item flexGrow={1}>\r\n        <BootstrapTooltip placement=\"top\" title={<span>\r\n          <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\r\n          <Typography><Trans t={t} i18nKey={`editor.${eff}Desc`} /></Typography>\r\n        </span>}>\r\n          <span><Box component={FontAwesomeIcon} icon={faQuestionCircle} sx={{ cursor: \"help\" }} /></span>\r\n        </BootstrapTooltip>\r\n      </Grid>\r\n      <Grid item xs=\"auto\">\r\n        <PercentBadge valid={valid} max={900} value={valid ? efficiency : \"ERR\"} />\r\n      </Grid>\r\n    </Grid>\r\n  </CardLight>\r\n}\r\n","import { Box, Button, ButtonGroup, Grid, ListItemIcon, ListItemText, MenuItem, Typography } from '@mui/material';\r\nimport React from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport CardLight from '../../../Components/Card/CardLight';\r\nimport CustomNumberInput, { CustomNumberInputButtonGroupWrapper } from '../../../Components/CustomNumberInput';\r\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton';\r\nimport SqBadge from '../../../Components/SqBadge';\r\nimport StatIcon from '../../../Components/StatIcon';\r\nimport TextButton from '../../../Components/TextButton';\r\nimport Artifact from '../../../Data/Artifacts/Artifact';\r\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json';\r\nimport KeyMap, { cacheValueString } from '../../../KeyMap';\r\nimport { allSubstats, ICachedArtifact, ISubstat } from '../../../Types/artifact';\r\nimport { clamp } from '../../../Util/Util';\r\nimport PercentBadge from '../../PercentBadge';\r\nexport default function SubstatInput({ index, artifact, setSubstat }: { index: number, artifact: ICachedArtifact | undefined, setSubstat: (index: number, substat: ISubstat) => void, }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const { mainStatKey = \"\", rarity = 5 } = artifact ?? {}\r\n  const { key = \"\", value = 0, rolls = [], efficiency = 0 } = artifact?.substats[index] ?? {}\r\n\r\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\r\n  const unit = KeyMap.unit(key), rollNum = rolls.length\r\n\r\n  let error: string = \"\", rollData: readonly number[] = [], allowedRolls = 0\r\n\r\n  if (artifact) {\r\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\r\n    const rarity = artifact.rarity\r\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\r\n    const maxRollNum = numUpgrades + high - 3;\r\n    allowedRolls = maxRollNum - rollNum\r\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\r\n  }\r\n  const rollOffset = 7 - rollData.length\r\n\r\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\r\n  if (allowedRolls < 0) error = error || t(\"editor.substat.error.noOverRoll\", { value: allowedRolls + rollNum })\r\n\r\n  return <CardLight>\r\n    <Box sx={{ display: \"flex\" }}>\r\n      <ButtonGroup size=\"small\" sx={{ width: \"100%\", display: \"flex\" }}>\r\n        <DropdownButton\r\n          startIcon={key ? StatIcon[key] : undefined}\r\n          title={key ? KeyMap.getArtStr(key) : t('editor.substat.substatFormat', { value: index + 1 })}\r\n          disabled={!artifact}\r\n          color={key ? \"success\" : \"primary\"}\r\n          sx={{ whiteSpace: \"nowrap\" }}>\r\n          {key && <MenuItem onClick={() => setSubstat(index, { key: \"\", value: 0 })}>{t`editor.substat.noSubstat`}</MenuItem>}\r\n          {allSubstats.filter(key => mainStatKey !== key)\r\n            .map(k => <MenuItem key={k} selected={key === k} disabled={key === k} onClick={() => setSubstat(index, { key: k, value: 0 })} >\r\n              <ListItemIcon>{StatIcon[k]}</ListItemIcon>\r\n              <ListItemText>{KeyMap.getArtStr(k)}</ListItemText>\r\n            </MenuItem>)}\r\n        </DropdownButton>\r\n        <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 30, flexGrow: 1 }} >\r\n          <CustomNumberInput\r\n            float={unit === \"%\"}\r\n            placeholder={t`editor.substat.selectSub`}\r\n            value={key ? value : undefined}\r\n            onChange={value => setSubstat(index, { key, value: value ?? 0 })}\r\n            disabled={!key}\r\n            error={!!error}\r\n            sx={{\r\n              px: 1,\r\n            }}\r\n            inputProps={{\r\n              sx: { textAlign: \"right\" }\r\n            }}\r\n          />\r\n        </CustomNumberInputButtonGroupWrapper>\r\n        {!!rollData.length && <TextButton>{t`editor.substat.nextRolls`}</TextButton>}\r\n        {rollData.map((v, i) => {\r\n          let newValue = cacheValueString(accurateValue + v, unit)\r\n          newValue = artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ?? newValue\r\n          return <Button key={i} color={`roll${clamp(rollOffset + i, 1, 6)}` as any} disabled={(value && !rollNum) || allowedRolls <= 0} onClick={() => setSubstat(index, { key, value: parseFloat(newValue) })}>{newValue}</Button>\r\n        })}\r\n      </ButtonGroup>\r\n    </Box>\r\n    <Box sx={{ p: 1, }}>\r\n      {error ? <SqBadge color=\"error\">{t`ui:error`}</SqBadge> : <Grid container>\r\n        <Grid item>\r\n          <SqBadge color={rollNum === 0 ? \"secondary\" : `roll${clamp(rollNum, 1, 6)}`}>\r\n            {rollNum ? t(\"editor.substat.RollCount\", { count: rollNum }) : t`editor.substat.noRoll`}\r\n          </SqBadge>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          {!!rolls.length && [...rolls].sort().map((val, i) =>\r\n            <Typography component=\"span\" key={`${i}.${val}`} color={`roll${clamp(rollOffset + rollData.indexOf(val), 1, 6)}.main`} sx={{ ml: 1 }} >{cacheValueString(val, unit)}</Typography>)}\r\n        </Grid>\r\n        <Grid item xs=\"auto\" flexShrink={1}>\r\n          <Typography>\r\n            <Trans t={t} i18nKey=\"editor.substat.eff\" color=\"text.secondary\">\r\n              Efficiency: <PercentBadge valid={true} max={rollNum * 100} value={efficiency ? efficiency : t`editor.substat.noStat` as string} />\r\n            </Trans>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>}\r\n\r\n    </Box>\r\n  </CardLight >\r\n}\r\n","import { Alert, Box, CardContent, Divider, Grid, Typography } from '@mui/material';\r\nimport CardDark from '../../../Components/Card/CardDark';\r\nimport CloseButton from '../../../Components/CloseButton';\r\nimport ModalWrapper from '../../../Components/ModalWrapper';\r\nimport scan_art_main from \"./imgs/scan_art_main.png\";\r\nimport Snippet from \"./imgs/snippet.png\";\r\nexport default function UploadExplainationModal({ modalShow, hide }: { modalShow: boolean, hide: () => void }) {\r\n  return <ModalWrapper open={modalShow} onClose={hide} >\r\n    <CardDark>\r\n      <CardContent sx={{ py: 1 }}>\r\n        <Grid container>\r\n          <Grid item flexGrow={1}>\r\n            <Typography variant=\"subtitle1\">How do Upload Screenshots for parsing</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CloseButton onClick={hide} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent>\r\n        <Alert variant=\"outlined\" severity=\"warning\">\r\n          NOTE: Artifact Scanning currently only work for <strong>ENGLISH</strong> artifacts.\r\n        </Alert>\r\n        <Grid container spacing={1} mt={1}>\r\n          <Grid item xs={8} md={4}>\r\n            <Box component=\"img\" alt=\"snippet of the screen to take\" src={Snippet} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n          <Grid item xs={12} md={8}>\r\n            <Typography gutterBottom>Using screenshots can dramatically decrease the amount of time you manually input in stats on the Genshin Optimizer.</Typography>\r\n            <Typography variant=\"h5\">Where to snip the screenshot.</Typography>\r\n            <Typography gutterBottom>In game, Open your bag, and navigate to the artifacts tab. Select the artifact you want to scan with Genshin Optimizer. <b>Only artifact from this screen can be scanned.</b></Typography>\r\n            <Typography variant=\"h6\">Single artifact</Typography>\r\n            <Typography gutterBottom>To take a screenshot, in Windows, the shortcut is <strong>Shift + WindowsKey + S</strong>. Once you selected the region, the image is automatically included in your clipboard.</Typography>\r\n            <Typography variant=\"h6\">Multiple artifacts</Typography>\r\n            <Typography gutterBottom>To take advantage of batch uploads, you can use a tool like <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">PicPick</a> to create a macro to easily to screenshot a region to screenshot multiple artifacts at once.</Typography>\r\n            <Typography variant=\"h5\">What to include in the screenshot.</Typography>\r\n            <Typography>As shown in the Image, starting from the top with the artifact name, all the way to the set name(the text in green). </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} md={7}>\r\n            <Typography variant=\"h5\">Adding Screenshot to Genshin Optimizer</Typography>\r\n            <Typography>At this point, you should have the artifact snippet either saved to your harddrive, or in your clipboard.</Typography>\r\n            <Typography gutterBottom>You can click on the box next to \"Browse\" to browse the files in your harddrive for multiple screenshots.</Typography>\r\n            <Typography>For single screenshots from the snippets, just press <strong>Ctrl + V</strong> to paste from your clipboard.</Typography>\r\n            <Typography gutterBottom>You should be able to see a Preview of your artifact snippet, and after waiting a few seconds, the artifact set and the substats will be filled in in the <b>Artifact Editor</b>.</Typography>\r\n            <Typography variant=\"h5\">Finishing the Artifact</Typography>\r\n            <Typography>Unfortunately, computer vision is not 100%. There will always be cases where something is not scanned properly. You should always double check the scanned artifact values! Once the artifact has been filled, Click on <strong>Add Artifact</strong> to finish editing the artifact.</Typography>\r\n          </Grid>\r\n          <Grid item xs={8} md={5}>\r\n            <Box component=\"img\" alt=\"main screen after importing stats\" src={scan_art_main} width=\"100%\" height=\"auto\" />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n      <Divider />\r\n      <CardContent sx={{ py: 1 }}>\r\n        <CloseButton large onClick={hide} />\r\n      </CardContent>\r\n    </CardDark>\r\n  </ModalWrapper>\r\n}","export class BorrowManager<T> {\r\n  data: Dict<string, { value: T, refCount: number }> = {}\r\n  init: (key: string) => T\r\n  deinit: (key: string, value: T) => void\r\n\r\n  constructor(init: (key: string) => T, deinit: (key: string, value: T) => void) {\r\n    this.init = init\r\n    this.deinit = deinit\r\n  }\r\n\r\n  /**\r\n   * Borrow the object corresponding to `key`, creating the object as necessary.\r\n   * The borrowing ends when `callback`'s promise is fulfilled.\r\n   * When the last borrowing ends, `deinit` the object.\r\n   *\r\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\r\n   */\r\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\r\n    if (!this.data[key]) {\r\n      this.data[key] = { value: this.init(key), refCount: 0 }\r\n    }\r\n\r\n    const box = this.data[key]!\r\n    box.refCount += 1\r\n    const result = await callback(box.value)\r\n    box.refCount -= 1\r\n    if (!box.refCount) {\r\n      // Last user. Cleaning up\r\n      delete this.data[key]\r\n      this.deinit(key, box.value)\r\n    }\r\n    return result\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { createScheduler, createWorker, RecognizeResult, Scheduler } from 'tesseract.js';\r\nimport ColorText from '../Components/ColoredText';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport { allMainStatKeys, allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey, SubstatKey } from '../Types/artifact';\r\nimport { allArtifactRarities, allArtifactSets, allSlotKeys, ArtifactRarity, ArtifactSetKey, Rarity, SlotKey } from '../Types/consts';\r\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util';\r\nimport { BorrowManager } from './BorrowManager';\r\n\r\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\r\nconst workerCount = 2\r\n\r\nconst schedulers = new BorrowManager(async (language): Promise<Scheduler> => {\r\n  const scheduler = createScheduler()\r\n  const promises = Array(workerCount).fill(0).map(async _ => {\r\n    const worker = createWorker({\r\n      errorHandler: console.error\r\n    })\r\n\r\n    await worker.load()\r\n    await worker.loadLanguage(language)\r\n    await worker.initialize(language)\r\n    scheduler.addWorker(worker)\r\n  })\r\n\r\n  await Promise.any(promises)\r\n  return scheduler\r\n}, (_language, value) => {\r\n  value.then(value => value.terminate())\r\n})\r\n\r\nexport type ProcessedEntry = {\r\n  fileName: string, imageURL: string, artifact: IArtifact, texts: Dict<keyof ICachedArtifact, Displayable>\r\n}\r\nexport type OutstandingEntry = {\r\n  file: File, fileName: string, imageURL?: Promise<string>, result?: Promise<{ file: File, result: ProcessedEntry }>\r\n}\r\ntype Queue = { processed: ProcessedEntry[], outstanding: OutstandingEntry[] }\r\ntype UploadMessage = { type: \"upload\", files: OutstandingEntry[] }\r\ntype ProcessingMessage = { type: \"processing\" }\r\ntype ProcessedMessage = { type: \"processed\", file: File, result: ProcessedEntry }\r\ntype PopMessage = { type: \"pop\" }\r\ntype ClearMessage = { type: \"clear\" }\r\ntype Color = [number, number, number] // RGB\r\nexport const queueReducer = (queue: Queue, message: UploadMessage | ProcessingMessage | ProcessedMessage | PopMessage | ClearMessage): Queue => {\r\n  switch (message.type) {\r\n    case \"upload\": return { processed: queue.processed, outstanding: [...queue.outstanding, ...message.files] }\r\n    case \"processing\": // Processing `outstanding` head. Refresh\r\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\r\n    case \"processed\":\r\n      if (queue.outstanding[0].file === message.file)\r\n        return { processed: [...queue.processed, message.result], outstanding: queue.outstanding.slice(1) }\r\n      return queue // Not in the list, ignored\r\n    case \"pop\": return { processed: queue.processed.slice(1), outstanding: queue.outstanding }\r\n    case \"clear\": return { processed: [], outstanding: [] }\r\n  }\r\n}\r\n\r\nexport function processEntry(entry: OutstandingEntry) {\r\n  if (entry.result) return\r\n\r\n  const { file, fileName } = entry\r\n  entry.imageURL = fileToURL(file)\r\n  entry.result = entry.imageURL.then(async imageURL => {\r\n    const sheets = await ArtifactSheet.getAll\r\n    const ocrResult = await ocr(imageURL)\r\n\r\n    const [artifact, texts] = findBestArtifact(\r\n      sheets, ocrResult.rarities,\r\n      parseSetKeys(ocrResult.artifactSetTexts, sheets),\r\n      parseSlotKeys(ocrResult.whiteTexts),\r\n      parseSubstats(ocrResult.substatTexts),\r\n      parseMainStatKeys(ocrResult.whiteTexts),\r\n      parseMainStatValues(ocrResult.whiteTexts)\r\n    )\r\n\r\n    return { file, result: { fileName, imageURL, artifact, texts } }\r\n  })\r\n}\r\n\r\nconst fileToURL = (file: File): Promise<string> => new Promise(resolve => {\r\n  const reader = new FileReader()\r\n  reader.onloadend = ({ target }) =>\r\n    resolve(target!.result as string)\r\n  reader.readAsDataURL(file)\r\n})\r\nconst urlToImageData = (urlFile: string): Promise<ImageData> => new Promise(resolve => {\r\n  const img = new Image()\r\n  img.onload = ({ target }) =>\r\n    resolve(imageToImageData(target as HTMLImageElement))\r\n  img.src = urlFile\r\n})\r\nfunction imageToImageData(image: HTMLImageElement): ImageData {\r\n  const canvas = document.createElement('canvas'), context = canvas.getContext('2d')!\r\n  canvas.width = image.width\r\n  canvas.height = image.height\r\n  context.drawImage(image, 0, 0, image.width, image.height)\r\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\r\n}\r\nfunction imageDataToCanvas(imageData: ImageData) {\r\n  // create off-screen canvas element\r\n  const canvas = document.createElement('canvas')\r\n  canvas.width = imageData.width\r\n  canvas.height = imageData.height\r\n\r\n  // update canvas with new data\r\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\r\n  return canvas // produces a PNG file\r\n}\r\n\r\nasync function ocr(imageURL: string): Promise<{ artifactSetTexts: string[], substatTexts: string[], whiteTexts: string[], rarities: Set<Rarity> }> {\r\n  const imageData = await urlToImageData(imageURL)\r\n\r\n  const width = imageData.width, halfHeight = Math.floor(imageData.height / 2)\r\n  const bottomOpts = { rectangle: { top: halfHeight, left: 0, width, height: halfHeight } }\r\n\r\n  const awaits = [\r\n    textsFromImage(bandPass(imageData, [140, 140, 140], [255, 255, 255], { mode: \"bw\", region: \"top\" })), // slotkey, mainStatValue, level\r\n    textsFromImage(bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: \"bot\" }), bottomOpts), // substats\r\n    textsFromImage(bandPass(imageData, [30, 160, 30], [200, 255, 200], { mode: \"bw\", region: \"bot\" }), bottomOpts), // artifact set, look for greenish texts\r\n  ]\r\n\r\n  const rarities = parseRarities(imageData.data, imageData.width, imageData.height)\r\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\r\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\r\n}\r\nasync function textsFromImage(imageData: ImageData, options: object | undefined = undefined): Promise<string[]> {\r\n  const canvas = imageDataToCanvas(imageData)\r\n  const rec = await schedulers.borrow(\"eng\", async (scheduler) =>\r\n    await (await scheduler).addJob(\"recognize\", canvas, options) as RecognizeResult)\r\n  return rec.data.lines.map(line => line.text)\r\n}\r\n\r\nexport function findBestArtifact(sheets: StrictDict<ArtifactSetKey, ArtifactSheet>, rarities: Set<number>, textSetKeys: Set<ArtifactSetKey>, slotKeys: Set<SlotKey>, substats: ISubstat[], mainStatKeys: Set<MainStatKey>, mainStatValues: { mainStatValue: number, unit?: string }[]): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\r\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\r\n  // TODO: restore\r\n  const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"EmblemOfSeveredFate\"])]\r\n\r\n  let bestScore = -1, bestArtifacts: IArtifact[] = [{\r\n    // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    // TODO: restore\r\n    setKey: \"EmblemOfSeveredFate\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\r\n    location: \"\", lock: false, exclude: false,\r\n  }]\r\n\r\n  // Rate each rarity\r\n  const rarityRates = objectKeyMap(allArtifactRarities, rarity => {\r\n    let score = 0\r\n    if (textSetKeys.size) {\r\n      const count = [...textSetKeys].reduce((count, set) => count + (sheets[set].rarity.includes(rarity) ? 1 : 0), 0)\r\n      score += count / textSetKeys.size\r\n    }\r\n    if (substats.length) {\r\n      const count = substats.reduce((count, substat) =>\r\n        count + (Artifact.getSubstatRolls(substat.key as SubstatKey, substat.value, rarity).length ? 1 : 0), 0)\r\n      score += count / substats.length * 2\r\n    }\r\n    return score\r\n  })\r\n\r\n  // Test all *probable* combinations\r\n  for (const slotKey of allSlotKeys) {\r\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\r\n      const mainStatScore = (slotKeys.has(slotKey) ? 1 : 0) + (mainStatKeys.has(mainStatKey) ? 1 : 0)\r\n      const relevantMainStatValues = mainStatValues\r\n        .filter(value => value.unit !== \"%\" || KeyMap.unit(mainStatKey) === \"%\") // Ignore \"%\" text if key isn't \"%\"\r\n        .map(value => value.mainStatValue)\r\n\r\n      for (const [rarityString, rarityIndividualScore] of Object.entries(rarityRates)) {\r\n        const rarity = parseInt(rarityString) as ArtifactRarity\r\n        const setKeys = relevantSetKey.filter(setKey => sheets[setKey].rarity.includes(rarity))\r\n        const rarityScore = mainStatScore + rarityIndividualScore\r\n\r\n        if (rarityScore + 2 < bestScore) continue // Early bail out\r\n\r\n        for (const minimumMainStatValue of relevantMainStatValues) {\r\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\r\n          const level = Math.max(0, values.findIndex(level => level >= minimumMainStatValue))\r\n          const mainStatVal = values[level]\r\n          const mainStatValScore = rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\r\n\r\n          for (const setKey of setKeys) {\r\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n            if (score >= bestScore) {\r\n              if (score > bestScore) bestArtifacts = []\r\n              bestScore = score\r\n              bestArtifacts.push({\r\n                setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false,\r\n              })\r\n            }\r\n          }\r\n        }\r\n        if (rarityScore >= bestScore) {\r\n          const level = 0\r\n          for (const setKey of setKeys) {\r\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\r\n\r\n            if (score > bestScore) bestArtifacts = []\r\n            bestScore = score\r\n            bestArtifacts.push({\r\n              setKey, rarity, level, slotKey, mainStatKey, substats: [], location: \"\", lock: false, exclude: false\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\r\n  const chosen = {\r\n    setKey: new Set(), rarity: new Set(), level: new Set(), slotKey: new Set(), mainStatKey: new Set(), mainStatVal: new Set(),\r\n  } as Dict<keyof ICachedArtifact, Set<string>>\r\n\r\n  const result = bestArtifacts[0], resultMainStatVal = Artifact.mainStatValue(result.mainStatKey, result.rarity, result.level)!\r\n  result.substats = substats.filter((substat, i) =>\r\n    substat.key !== result.mainStatKey &&\r\n    substats.slice(0, i).every(other => other.key !== substat.key))\r\n  for (let i = result.substats.length; i < 4; i++)\r\n    result.substats.push({ key: \"\", value: 0 })\r\n\r\n  for (const other of bestArtifacts) {\r\n    chosen.setKey!.add(other.setKey)\r\n    chosen.rarity!.add(other.rarity as any)\r\n    chosen.level!.add(other.level as any)\r\n    chosen.slotKey!.add(other.slotKey)\r\n    chosen.mainStatKey!.add(other.mainStatKey)\r\n  }\r\n\r\n  function unknownText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Unknown {name} : Set to <ColorText color=\"error\">{text(value)}</ColorText></>\r\n  }\r\n  function ambiguousText<T>(value: T, available: T[], name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> : May also be {\r\n      available.filter(v => v !== value).map((value, index) => <><b>{index > 0 ? \"/\" : \"\"}</b><ColorText color=\"warning\">{text(value)}</ColorText></>)}</>\r\n  }\r\n  function detectedText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Detected {name} <ColorText color=\"success\">{text(value)}</ColorText></>\r\n  }\r\n  function inferredText<T>(value: T, name: Displayable, text: (arg: T) => Displayable) {\r\n    return <>Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText></>\r\n  }\r\n\r\n  function addText(key: keyof ICachedArtifact, available: Set<any>, name: Displayable, text: (value) => Displayable) {\r\n    const recommended = new Set([...chosen[key]!].filter(value => available.has(value)))\r\n    if (recommended.size > 1)\r\n      texts[key] = ambiguousText(result[key], [...available], name, text)\r\n    else if (recommended.size === 1)\r\n      texts[key] = detectedText(result[key], name, text)\r\n    else if (chosen[key]!.size > 1)\r\n      texts[key] = unknownText(result[key], name, text)\r\n    else\r\n      texts[key] = inferredText(result[key], name, text)\r\n  }\r\n\r\n  addText(\"setKey\", textSetKeys, \"Set\", (value) => sheets[value].name)\r\n  addText(\"rarity\", rarities, \"Rarity\", (value) => <>{value} {value !== 1 ? \"Stars\" : \"Star\"}</>)\r\n  addText(\"slotKey\", slotKeys, \"Slot\", (value) => <>{Artifact.slotName(value)}</>)\r\n  addText(\"mainStatKey\", mainStatKeys, \"Main Stat\", (value) => <>{KeyMap.getStr(value)}</>)\r\n  texts.substats = <>{result.substats.filter(substat => substat.key !== \"\").map((substat, i) =>\r\n    <div key={i}>{detectedText(substat, \"Sub Stat\", (value) => <>{KeyMap.getStr(value.key)}+{cacheValueString(value.value, KeyMap.unit(value.key))}{KeyMap.unit(value.key)}</>)}</div>)\r\n  }</>\r\n\r\n  const valueStrFunc = (value) => <>{cacheValueString(value, KeyMap.unit(result.mainStatKey))}{KeyMap.unit(result.mainStatKey)}</>\r\n  if (mainStatValues.find(value => value.mainStatValue === resultMainStatVal)) {\r\n    if (mainStatKeys.has(result.mainStatKey)) {\r\n      texts.level = detectedText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = detectedText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    } else {\r\n      texts.level = inferredText(result.level, \"Level\", (value) => \"+\" + value)\r\n      texts.mainStatVal = inferredText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n    }\r\n  } else {\r\n    texts.level = unknownText(result.level, \"Level\", (value) => \"+\" + value)\r\n    texts.mainStatVal = unknownText(resultMainStatVal, \"Main Stat value\", valueStrFunc)\r\n  }\r\n\r\n  return [result, texts]\r\n}\r\n\r\nfunction parseSetKeys(texts: string[], sheets): Set<ArtifactSetKey> {\r\n  const results = new Set<ArtifactSetKey>([])\r\n  for (const text of texts)\r\n    for (const key of allArtifactSets)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), sheets[key].nameRaw.replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseRarities(pixels: Uint8ClampedArray, width: number, height: number): Set<Rarity> {\r\n  let d = pixels, lastRowNum = 0, rowsWithNumber = 0;\r\n  const results = new Set<Rarity>([])\r\n  for (let y = 0; y < height; y++) {\r\n    let star = 0, onStar = false;\r\n    for (let x = 0; x < width; x++) {\r\n      let i = (y * width + x) * 4\r\n      let r = d[i], g = d[i + 1], b = d[i + 2];\r\n      if (colorCloseEnough({ r, g, b }, starColor)) {\r\n        if (!onStar) {\r\n          onStar = true\r\n          star++\r\n        }\r\n      } else {\r\n        onStar = false\r\n      }\r\n    }\r\n\r\n    if (lastRowNum !== star) {\r\n      lastRowNum = star\r\n      rowsWithNumber = 1;\r\n    } else if (lastRowNum) {\r\n      rowsWithNumber++\r\n      if (rowsWithNumber >= 10) results.add(clamp(lastRowNum, 3, 5) as Rarity)\r\n    }\r\n  }\r\n  return results\r\n}\r\nfunction colorCloseEnough(color1, color2, threshold = 5) {\r\n  const intCloseEnough = (a, b) => (Math.abs(a - b) <= threshold)\r\n  return intCloseEnough(color1.r, color2.r) &&\r\n    intCloseEnough(color1.g, color2.g) &&\r\n    intCloseEnough(color1.b, color2.b)\r\n}\r\nfunction parseSlotKeys(texts: string[]): Set<SlotKey> {\r\n  const results = new Set<SlotKey>()\r\n  for (const text of texts)\r\n    for (const key of allSlotKeys)\r\n      if (hammingDistance(text.replace(/\\W/g, ''), Artifact.slotName(key).replace(/\\W/g, '')) <= 2)\r\n        results.add(key)\r\n  return results\r\n}\r\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\r\n  const results = new Set<MainStatKey>([])\r\n  for (const text of texts)\r\n    for (const key of allMainStatKeys) {\r\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? \"\"))\r\n        results.add(key)\r\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\r\n      if (key.includes(\"_bonu\") && hammingDistance(text.replace(/\\W/g, ''), (KeyMap.getStr(key) ?? \"\").replace(/\\W/g, '')) <= 1)\r\n        results.add(key)\r\n    }\r\n  return results\r\n}\r\nfunction parseMainStatValues(texts: string[]): { mainStatValue: number, unit?: string }[] {\r\n  const results: { mainStatValue: number, unit?: string }[] = []\r\n  for (const text of texts) {\r\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\r\n    let match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")), unit: \"%\" })\r\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\r\n    match = regex.exec(text)\r\n    if (match) results.push({ mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, \"\")) })\r\n  }\r\n  return results\r\n}\r\nfunction parseSubstats(texts: string[]): ISubstat[] {\r\n  const matches: ISubstat[] = []\r\n  for (let text of texts) {\r\n    text = text.replace(/^[\\W]+/, \"\").replace(/\\n/, \"\")\r\n    //parse substats\r\n    allSubstats.forEach(key => {\r\n      const name = KeyMap.getStr(key)\r\n      const regex = KeyMap.unit(key) === \"%\" ?\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%\", \"im\") :\r\n        new RegExp(name + \"\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)\", \"im\")\r\n      const match = regex.exec(text)\r\n      if (match)\r\n        matches.push({ key, value: parseFloat(match[1].replace(/,/g, \".\").replace(/\\.{2,}/g, \".\")) })\r\n    })\r\n  }\r\n  return matches.slice(0, 4)\r\n}\r\n\r\nfunction bandPass(pixelData: ImageData, color1: Color, color2: Color, options: { region?: \"top\" | \"bot\" | \"all\", mode?: \"bw\" | \"color\" | \"invert\" }) {\r\n  const { region = \"all\", mode = \"color\" } = options\r\n  const d = Uint8ClampedArray.from(pixelData.data)\r\n  const top = region === \"top\", bot = region === \"bot\", all = region === \"all\"\r\n  const bw = mode === \"bw\", invert = mode === \"invert\"\r\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\r\n  for (let i = 0; i < d.length; i += 4) {\r\n    const r = d[i], g = d[i + 1], b = d[i + 2];\r\n    if ((all || (top && i < halfInd) || (bot && i > halfInd)) &&\r\n      r >= color1[0] && r <= color2[0] &&\r\n      g >= color1[1] && g <= color2[1] &&\r\n      b >= color1[2] && b <= color2[2]) {\r\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\r\n      else if (invert) {\r\n        d[i] = 255 - r\r\n        d[i + 1] = 255 - g\r\n        d[i + 2] = 255 - b\r\n      } // else orignal color\r\n    } else {\r\n      d[i] = d[i + 1] = d[i + 2] = 255\r\n    }\r\n  }\r\n  return new ImageData(d, pixelData.width, pixelData.height)\r\n}\r\n","import { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Add, PhotoCamera, Replay, Shuffle, Update } from '@mui/icons-material';\r\nimport { Alert, Box, Button, ButtonGroup, CardContent, CardHeader, CircularProgress, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, styled, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useReducer, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown';\r\nimport ArtifactSetDropdown from '../Components/Artifact/ArtifactSetDropdown';\r\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport CardLight from '../Components/Card/CardLight';\r\nimport CloseButton from '../Components/CloseButton';\r\nimport CustomNumberTextField from '../Components/CustomNumberTextField';\r\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton';\r\nimport ImgIcon from '../Components/Image/ImgIcon';\r\nimport ModalWrapper from '../Components/ModalWrapper';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport Artifact from '../Data/Artifacts/Artifact';\r\nimport { ArtifactSheet } from '../Data/Artifacts/ArtifactSheet';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { parseArtifact, validateArtifact } from '../Database/validation';\r\nimport KeyMap, { cacheValueString } from '../KeyMap';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport usePromise from '../ReactHooks/usePromise';\r\nimport { allSubstats, IArtifact, ICachedArtifact, ISubstat, MainStatKey } from '../Types/artifact';\r\nimport { ArtifactRarity, ArtifactSetKey, SlotKey } from '../Types/consts';\r\nimport { randomizeArtifact } from '../Util/ArtifactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard';\r\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput';\r\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal';\r\nimport { OutstandingEntry, ProcessedEntry, processEntry, queueReducer } from './ScanningUtil';\r\n\r\nconst maxProcessingCount = 3, maxProcessedCount = 16\r\nconst allSubstatFilter = new Set(allSubstats)\r\ntype ResetMessage = { type: \"reset\" }\r\ntype SubstatMessage = { type: \"substat\", index: number, substat: ISubstat }\r\ntype OverwriteMessage = { type: \"overwrite\", artifact: IArtifact }\r\ntype UpdateMessage = { type: \"update\", artifact: Partial<IArtifact> }\r\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\r\ninterface IEditorArtifact {\r\n  setKey: ArtifactSetKey,\r\n  slotKey: SlotKey,\r\n  level: number,\r\n  rarity: ArtifactRarity,\r\n  mainStatKey: MainStatKey,\r\n  substats: ISubstat[],\r\n}\r\nfunction artifactReducer(state: IEditorArtifact | undefined, action: Message): IEditorArtifact | undefined {\r\n  switch (action.type) {\r\n    case \"reset\": return\r\n    case \"substat\": {\r\n      const { index, substat } = action\r\n      const oldIndex = substat.key ? state!.substats.findIndex(current => current.key === substat.key) : -1\r\n      if (oldIndex === -1 || oldIndex === index)\r\n        state!.substats[index] = substat\r\n      else  // Already in used, swap the items instead\r\n        [state!.substats[index], state!.substats[oldIndex]] =\r\n          [state!.substats[oldIndex], state!.substats[index]]\r\n      return { ...state! }\r\n    }\r\n    case \"overwrite\": return action.artifact\r\n    case \"update\": return { ...state!, ...action.artifact }\r\n  }\r\n}\r\n\r\nconst InputInvis = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function ArtifactEditor({ artifactIdToEdit = \"\", cancelEdit }: { artifactIdToEdit?: string, cancelEdit: () => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n\r\n  const { database } = useContext(DatabaseContext)\r\n\r\n  const [show, setShow] = useState(false)\r\n\r\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(setDirtyDatabase), [database, setDirtyDatabase])\r\n\r\n  const [editorArtifact, artifactDispatch] = useReducer(artifactReducer, undefined)\r\n  const artifact = useMemo(() => editorArtifact && parseArtifact(editorArtifact), [editorArtifact])\r\n\r\n  const [modalShow, setModalShow] = useState(false)\r\n\r\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, { processed: [], outstanding: [] })\r\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\r\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\r\n\r\n  const processingImageURL = usePromise(firstOutstanding?.imageURL, [firstOutstanding?.imageURL])\r\n  const processingResult = usePromise(firstOutstanding?.result, [firstOutstanding?.result])\r\n\r\n  const remaining = processed.length + outstanding.length\r\n\r\n  const image = firstProcessed?.imageURL ?? processingImageURL\r\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\r\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\r\n\r\n  useEffect(() => {\r\n    if (!artifact && artifactProcessed)\r\n      artifactDispatch({ type: \"overwrite\", artifact: artifactProcessed })\r\n  }, [artifact, artifactProcessed, artifactDispatch])\r\n\r\n  useEffect(() => {\r\n    const numProcessing = Math.min(maxProcessedCount - processed.length, maxProcessingCount, outstanding.length)\r\n    const processingCurrent = numProcessing && !outstanding[0].result\r\n    outstanding.slice(0, numProcessing).forEach(processEntry)\r\n    if (processingCurrent)\r\n      dispatchQueue({ type: \"processing\" })\r\n  }, [processed.length, outstanding])\r\n\r\n  useEffect(() => {\r\n    if (processingResult)\r\n      dispatchQueue({ type: \"processed\", ...processingResult })\r\n  }, [processingResult, dispatchQueue])\r\n\r\n  const uploadFiles = useCallback((files: FileList) => {\r\n    setShow(true)\r\n    dispatchQueue({ type: \"upload\", files: [...files].map(file => ({ file, fileName: file.name })) })\r\n  }, [dispatchQueue, setShow])\r\n  const clearQueue = useCallback(() => dispatchQueue({ type: \"clear\" }), [dispatchQueue])\r\n\r\n  useEffect(() => {\r\n    const pasteFunc = (e: any) => uploadFiles(e.clipboardData.files)\r\n    window.addEventListener('paste', pasteFunc);\r\n    return () =>\r\n      window.removeEventListener('paste', pasteFunc)\r\n  }, [uploadFiles])\r\n\r\n  const onUpload = useCallback(\r\n    e => {\r\n      uploadFiles(e.target.files)\r\n      e.target.value = null // reset the value so the same file can be uploaded again...\r\n    },\r\n    [uploadFiles],\r\n  )\r\n\r\n  const { old, oldType }: { old: ICachedArtifact | undefined, oldType: \"edit\" | \"duplicate\" | \"upgrade\" | \"\" } = useMemo(() => {\r\n    const databaseArtifact = dirtyDatabase && artifactIdToEdit && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) return { old: databaseArtifact, oldType: \"edit\" }\r\n    if (artifact === undefined) return { old: undefined, oldType: \"\" }\r\n    const { duplicated, upgraded } = dirtyDatabase && database.findDuplicates(artifact)\r\n    return { old: duplicated[0] ?? upgraded[0], oldType: duplicated.length !== 0 ? \"duplicate\" : \"upgrade\" }\r\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const { artifact: cachedArtifact, errors } = useMemo(() => {\r\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\r\n    const validated = validateArtifact(artifact, artifactIdToEdit)\r\n    if (old) {\r\n      validated.artifact.location = old.location\r\n      validated.artifact.exclude = old.exclude\r\n    }\r\n    return validated\r\n  }, [artifact, artifactIdToEdit, old])\r\n\r\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\r\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\r\n  useEffect(() => {\r\n    if (artifactIdToEdit === \"new\") {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"reset\" })\r\n    }\r\n    const databaseArtifact = artifactIdToEdit && dirtyDatabase && database._getArt(artifactIdToEdit)\r\n    if (databaseArtifact) {\r\n      setShow(true)\r\n      artifactDispatch({ type: \"overwrite\", artifact: deepClone(databaseArtifact) })\r\n    }\r\n  }, [artifactIdToEdit, database, dirtyDatabase])\r\n\r\n  const sheet = artifact ? artifactSheets?.[artifact.setKey] : undefined\r\n  const reset = useCallback(() => {\r\n    cancelEdit?.();\r\n    dispatchQueue({ type: \"pop\" })\r\n    artifactDispatch({ type: \"reset\" })\r\n  }, [cancelEdit, artifactDispatch])\r\n  const update = useCallback((newValue: Partial<IArtifact>) => {\r\n    const newSheet = newValue.setKey ? artifactSheets![newValue.setKey] : sheet!\r\n\r\n    function pick<T>(value: T | undefined, available: readonly T[], prefer?: T): T {\r\n      return (value && available.includes(value)) ? value : (prefer ?? available[0])\r\n    }\r\n\r\n    if (newValue.setKey) {\r\n      newValue.rarity = pick(artifact?.rarity, newSheet.rarity, Math.max(...newSheet.rarity) as ArtifactRarity)\r\n      newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\r\n    }\r\n    if (newValue.rarity)\r\n      newValue.level = artifact?.level ?? 0\r\n    if (newValue.level)\r\n      newValue.level = clamp(newValue.level, 0, 4 * (newValue.rarity ?? artifact!.rarity))\r\n    if (newValue.slotKey)\r\n      newValue.mainStatKey = pick(artifact?.mainStatKey, Artifact.slotMainStats(newValue.slotKey))\r\n\r\n    if (newValue.mainStatKey) {\r\n      newValue.substats = [0, 1, 2, 3].map(i =>\r\n        (artifact && artifact.substats[i].key !== newValue.mainStatKey) ? artifact!.substats[i] : { key: \"\", value: 0 })\r\n    }\r\n    artifactDispatch({ type: \"update\", artifact: newValue })\r\n  }, [artifact, artifactSheets, sheet, artifactDispatch])\r\n  const setSubstat = useCallback((index: number, substat: ISubstat) => {\r\n    artifactDispatch({ type: \"substat\", index, substat })\r\n  }, [artifactDispatch])\r\n  const isValid = !errors.length\r\n  const canClearArtifact = (): boolean => window.confirm(t`editor.clearPrompt` as string)\r\n  const { rarity = 5, level = 0, slotKey = \"flower\" } = artifact ?? {}\r\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cachedArtifact ? Artifact.getArtifactEfficiency(cachedArtifact, allSubstatFilter) : {}\r\n  const preventClosing = processed.length || outstanding.length\r\n  const onClose = useCallback(\r\n    (e) => {\r\n      if (preventClosing) e.preventDefault()\r\n      setShow(false)\r\n      cancelEdit()\r\n    }, [preventClosing, setShow, cancelEdit])\r\n  return <ModalWrapper open={show} onClose={onClose} >\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: show ? \"100%\" : 64 }} />}><CardDark >\r\n      <UploadExplainationModal modalShow={modalShow} hide={() => setModalShow(false)} />\r\n      <CardHeader\r\n        title={<Trans t={t} i18nKey=\"editor.title\" >Artifact Editor</Trans>}\r\n        action={<CloseButton disabled={!!preventClosing} onClick={onClose} />}\r\n      />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <Grid container spacing={1} sx={{ mb: 1 }}>\r\n          {/* Left column */}\r\n          <Grid item xs={12} md={6} lg={6} sx={{\r\n            // select all excluding last\r\n            \"> div:nth-last-of-type(n+2)\": { mb: 1 }\r\n          }}>\r\n            {/* set & rarity */}\r\n            <ButtonGroup sx={{ display: \"flex\", mb: 1 }}>\r\n              {/* Artifact Set */}\r\n              <ArtifactSetDropdown selectedSetKey={artifact?.setKey} onChange={setKey => update({ setKey: setKey as ArtifactSetKey })} sx={{ flexGrow: 1 }} />\r\n              {/* rarity dropdown */}\r\n              <ArtifactRarityDropdown rarity={artifact ? rarity : undefined} onChange={r => update({ rarity: r })} filter={r => !!sheet?.rarity?.includes?.(r)} disabled={!sheet} />\r\n            </ButtonGroup>\r\n\r\n            {/* level */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <CustomNumberTextField id=\"filled-basic\" label=\"Level\" variant=\"filled\" sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }} margin=\"dense\" size=\"small\"\r\n                value={level} disabled={!sheet} placeholder={`0~${rarity * 4}`} onChange={l => update({ level: l })}\r\n              />\r\n              <ButtonGroup >\r\n                <Button onClick={() => update({ level: level - 1 })} disabled={!sheet || level === 0}>-</Button>\r\n                {rarity ? [...Array(rarity + 1).keys()].map(i => 4 * i).map(i => <Button key={i} onClick={() => update({ level: i })} disabled={!sheet || level === i}>{i}</Button>) : null}\r\n                <Button onClick={() => update({ level: level + 1 })} disabled={!sheet || level === (rarity * 4)}>+</Button>\r\n              </ButtonGroup>\r\n            </Box>\r\n\r\n            {/* slot */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <ArtifactSlotDropdown disabled={!sheet} slotKey={slotKey} onChange={slotKey => update({ slotKey })} />\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Suspense fallback={<Skeleton width=\"60%\" />}>\r\n                  <Typography color=\"text.secondary\">\r\n                    {sheet?.getSlotName(artifact!.slotKey) ? <span><ImgIcon src={sheet.slotIcons[artifact!.slotKey]} /> {sheet?.getSlotName(artifact!.slotKey)}</span> : t`editor.unknownPieceName`}\r\n                  </Typography>\r\n                </Suspense>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* main stat */}\r\n            <Box component=\"div\" display=\"flex\">\r\n              <DropdownButton startIcon={artifact?.mainStatKey ? StatIcon[artifact.mainStatKey] : undefined}\r\n                title={<b>{artifact ? KeyMap.getArtStr(artifact.mainStatKey) : t`mainStat`}</b>} disabled={!sheet} color={artifact ? \"success\" : \"primary\"} >\r\n                {Artifact.slotMainStats(slotKey).map(mainStatK =>\r\n                  <MenuItem key={mainStatK} selected={artifact?.mainStatKey === mainStatK} disabled={artifact?.mainStatKey === mainStatK} onClick={() => update({ mainStatKey: mainStatK })} >\r\n                    <ListItemIcon>{StatIcon[mainStatK]}</ListItemIcon>\r\n                    <ListItemText>{KeyMap.getArtStr(mainStatK)}</ListItemText>\r\n                  </MenuItem>)}\r\n              </DropdownButton>\r\n              <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\r\n                <Typography color=\"text.secondary\">\r\n                  {artifact ? `${cacheValueString(Artifact.mainStatValue(artifact.mainStatKey, rarity, level), KeyMap.unit(artifact.mainStatKey))}${KeyMap.unit(artifact.mainStatKey)}` : t`mainStat`}\r\n                </Typography>\r\n              </CardLight>\r\n            </Box>\r\n\r\n            {/* Current/Max Substats Efficiency */}\r\n            <SubstatEfficiencyDisplayCard valid={isValid} efficiency={currentEfficiency} t={t} />\r\n            {currentEfficiency !== maxEfficiency && <SubstatEfficiencyDisplayCard max valid={isValid} efficiency={maxEfficiency} t={t} />}\r\n\r\n            {/* Image OCR */}\r\n            <CardLight>\r\n              <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 1 }}>\r\n                {/* TODO: artifactDispatch not overwrite */}\r\n                <Suspense fallback={<Skeleton width=\"100%\" height=\"100\" />}>\r\n                  <Grid container spacing={1} alignItems=\"center\">\r\n                    <Grid item flexGrow={1}>\r\n                      <label htmlFor=\"contained-button-file\">\r\n                        <InputInvis accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={onUpload} />\r\n                        <Button component=\"span\" startIcon={<PhotoCamera />}>\r\n                          Upload Screenshot (or Ctrl-V)\r\n                        </Button>\r\n                      </label>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button color=\"info\" sx={{ px: 2, minWidth: 0 }} onClick={() => {\r\n                        setModalShow(true)\r\n                        ReactGA.modalview('/artifact/how-to-upload')\r\n                      }}><Typography><FontAwesomeIcon icon={faQuestionCircle} /></Typography></Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {image && <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box component=\"img\" src={image} width=\"100%\" maxWidth={350} height=\"auto\" alt=\"Screenshot to parse for artifact values\" />\r\n                  </Box>}\r\n                  {remaining > 0 && <CardDark sx={{ pl: 2 }} ><Grid container spacing={1} alignItems=\"center\" >\r\n                    {!firstProcessed && firstOutstanding && <Grid item>\r\n                      <CircularProgress size=\"1em\" />\r\n                    </Grid>}\r\n                    <Grid item flexGrow={1}>\r\n                      <Typography>\r\n                        <span>\r\n                          Screenshots in file-queue: <b>{remaining}</b>\r\n                          {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\r\n                        </span>\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Button size=\"small\" color=\"error\" onClick={clearQueue}>Clear file-queue</Button>\r\n                    </Grid>\r\n                  </Grid></CardDark>}\r\n                </Suspense>\r\n              </CardContent>\r\n            </CardLight>\r\n          </Grid>\r\n\r\n          {/* Right column */}\r\n          <Grid item xs={12} md={6} lg={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* substat selections */}\r\n            {[0, 1, 2, 3].map((index) => <SubstatInput key={index} index={index} artifact={cachedArtifact} setSubstat={setSubstat} />)}\r\n            {texts && <CardLight><CardContent>\r\n              <div>{texts.slotKey}</div>\r\n              <div>{texts.mainStatKey}</div>\r\n              <div>{texts.mainStatVal}</div>\r\n              <div>{texts.rarity}</div>\r\n              <div>{texts.level}</div>\r\n              <div>{texts.substats}</div>\r\n              <div>{texts.setKey}</div>\r\n            </CardContent></CardLight>}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Duplicate/Updated/Edit UI */}\r\n        {old && <Grid container sx={{ justifyContent: \"space-around\", mb: 1 }} spacing={1} >\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{t`editor.preview`}</Typography>\r\n            <ArtifactCard artifactObj={cachedArtifact} />\r\n          </CardLight></Grid>\r\n          <Grid item lg={4} md={6} ><CardLight>\r\n            <Typography sx={{ textAlign: \"center\" }} py={1} variant=\"h6\" color=\"text.secondary\" >{oldType !== \"edit\" ? (oldType === \"duplicate\" ? t`editor.dupArt` : t`editor.upArt`) : t`editor.beforeEdit`}</Typography>\r\n            <ArtifactCard artifactObj={old} />\r\n          </CardLight></Grid>\r\n        </Grid>}\r\n\r\n        {/* Error alert */}\r\n        {!isValid && <Alert variant=\"filled\" severity=\"error\" sx={{ mb: 1 }}>{errors.map((e, i) => <div key={i}>{e}</div>)}</Alert>}\r\n\r\n        {/* Buttons */}\r\n        <Grid container spacing={2}>\r\n          <Grid item>\r\n            {oldType === \"edit\" ?\r\n              <Button startIcon={<Add />} onClick={() => { database.updateArt(editorArtifact!, old!.id); reset() }} disabled={!editorArtifact || !isValid} color=\"primary\">\r\n                {t`editor.btnSave`}\r\n              </Button> :\r\n              <Button startIcon={<Add />} onClick={() => { database.createArt(artifact!); reset() }} disabled={!artifact || !isValid} color={oldType === \"duplicate\" ? \"warning\" : \"primary\"}>\r\n                {t`editor.btnAdd`}\r\n              </Button>}\r\n          </Grid>\r\n          <Grid item flexGrow={1}>\r\n            <Button startIcon={<Replay />} disabled={!artifact} onClick={() => { canClearArtifact() && reset() }} color=\"error\">{t`editor.btnClear`}</Button>\r\n          </Grid>\r\n          <Grid item>\r\n            {process.env.NODE_ENV === \"development\" && <Button color=\"info\" startIcon={<Shuffle />} onClick={async () => artifactDispatch({ type: \"overwrite\", artifact: await randomizeArtifact() })}>{t`editor.btnRandom`}</Button>}\r\n          </Grid>\r\n          {old && oldType !== \"edit\" && <Grid item>\r\n            <Button startIcon={<Update />} onClick={() => { database.updateArt(editorArtifact!, old.id); reset() }} disabled={!editorArtifact || !isValid} color=\"success\">{t`editor.btnUpdate`}</Button>\r\n          </Grid>}\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark ></Suspense>\r\n  </ModalWrapper>\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allMainStatKeys, MainStatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactMainStatMultipleSelectChip({ mainStatKeys, setMainStatKeys }:\r\n  { mainStatKeys: MainStatKey[], setMainStatKeys: (keys: MainStatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof mainStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setMainStatKeys((typeof value === 'string' ? value.split(',') : value) as MainStatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"main-stat-multiple-chip-label\">Main Stats</InputLabel>\r\n        <Select\r\n          labelId=\"main-stat-multiple-chip-label\"\r\n          id=\"main-stat-multiple-chip\"\r\n          multiple\r\n          value={mainStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"main-stat-select-multiple-chip\" label=\"Main Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.getArtStr(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allMainStatKeys.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, mainStatKeys, theme) }}>\r\n              {KeyMap.getArtStr(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { Divider, ListItemIcon, ListItemText, Typography } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport { useMemo } from 'react';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { ArtifactSheet } from '../../Data/Artifacts/ArtifactSheet';\r\nimport usePromise from '../../ReactHooks/usePromise';\r\nimport { ArtifactSetKey, Rarity } from '../../Types/consts';\r\nimport { Stars } from '../StarDisplay';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSetMultipleSelectChip({ artSetKeys, setArtSetKeys }:\r\n  { artSetKeys: ArtifactSetKey[], setArtSetKeys: (keys: ArtifactSetKey[]) => void }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll, [])\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof artSetKeys>) => {\r\n    const { target: { value }, } = event\r\n    setArtSetKeys((typeof value === 'string' ? value.split(',') : value) as ArtifactSetKey[]);// On autofill we get a stringified value.\r\n  };\r\n  const displaySets = useMemo(() => {\r\n    if (!artifactSheets) return {}\r\n    return ArtifactSheet.setKeysByRarities(artifactSheets)\r\n  }, [artifactSheets])\r\n  if (!artifactSheets) return null\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"artifact-set-multiple-chip-label\">Artifact Sets</InputLabel>\r\n        <Select\r\n          labelId=\"artifact-set-multiple-chip-label\"\r\n          id=\"artifact-set-multiple-chip\"\r\n          multiple\r\n          value={artSetKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"artifact-set-select-multiple-chip\" label=\"Artifact Sets\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={artifactSheets[value]?.defIcon} label={artifactSheets[value].name} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {!!Object.keys(displaySets).length && Object.entries(displaySets).reverse().flatMap(([star, sets], i) => [\r\n            ...((i > 0) && sets.length ? [<Divider key={`${star}divi`} />] : []),\r\n            ...(sets.length ? [<MenuItem key={`${star}header`} style={{ pointerEvents: 'none' }} >\r\n              <Typography>\r\n                <Trans t={t} i18nKey=\"editor.set.maxRarity\">Max Rarity <Stars stars={parseInt(star) as Rarity} /></Trans>\r\n              </Typography>\r\n            </MenuItem>] : []),\r\n            ...sets.map(setKey => <MenuItem key={setKey} value={setKey}>\r\n              <ListItemIcon>{artifactSheets[setKey]?.defIcon}</ListItemIcon>\r\n              <ListItemText primaryTypographyProps={{ style: getStyles(setKey, artSetKeys, theme) }}>\r\n                {artifactSheets[setKey]?.name}\r\n              </ListItemText>\r\n            </MenuItem >)\r\n          ])}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { ListItemIcon, ListItemText } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Chip from '@mui/material/Chip';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport OutlinedInput from '@mui/material/OutlinedInput';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport { Theme, useTheme } from '@mui/material/styles';\r\nimport KeyMap from '../../KeyMap';\r\nimport { allSubstats, SubstatKey } from '../../Types/artifact';\r\nimport StatIcon from '../StatIcon';\r\n\r\n\r\nfunction getStyles(name: string, personName: readonly string[], theme: Theme) {\r\n  return {\r\n    fontWeight: personName.includes(name)\r\n      ? theme.typography.fontWeightMedium\r\n      : theme.typography.fontWeightRegular,\r\n  };\r\n}\r\n\r\nexport default function ArtifactSubStatMultipleSelectChip({ subStatKeys, setSubStatKeys }:\r\n  { subStatKeys: SubstatKey[], setSubStatKeys: (keys: SubstatKey[]) => void }) {\r\n  const theme = useTheme();\r\n\r\n  const handleChange = (event: SelectChangeEvent<typeof subStatKeys>) => {\r\n    const { target: { value }, } = event\r\n    setSubStatKeys((typeof value === 'string' ? value.split(',') : value) as SubstatKey[]);// On autofill we get a stringified value.\r\n  };\r\n  return (\r\n    <div>\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"sub-stat-multiple-chip-label\">Sub Stats</InputLabel>\r\n        <Select\r\n          labelId=\"sub-stat-multiple-chip-label\"\r\n          id=\"sub-stat-multiple-chip\"\r\n          multiple\r\n          value={subStatKeys}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput id=\"sub-stat-select-multiple-chip\" label=\"Sub Stats\" />}\r\n          renderValue={(selected) => (\r\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\r\n              {selected.map((value) =>\r\n                <Chip key={value} icon={StatIcon[value]} label={KeyMap.getArtStr(value)} />\r\n              )}\r\n            </Box>\r\n          )}\r\n        >\r\n          {allSubstats.map(statKey => <MenuItem key={statKey} value={statKey}>\r\n            <ListItemIcon>{StatIcon[statKey]}</ListItemIcon>\r\n            <ListItemText primaryTypographyProps={{ style: getStyles(statKey, subStatKeys, theme) }}>\r\n              {KeyMap.getArtStr(statKey)}\r\n            </ListItemText>\r\n          </MenuItem>)}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\n","import { faBan, faChartLine, faTrash, faUserShield, faUserSlash } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { BusinessCenter, Lock, LockOpen, Replay } from \"@mui/icons-material\"\r\nimport { Button, CardContent, Divider, Grid, ListItemIcon, ListItemText, MenuItem, Skeleton, ToggleButton, Typography } from \"@mui/material\"\r\nimport { Box } from \"@mui/system\"\r\nimport { Suspense, useContext, useMemo } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport ArtifactLevelSlider from \"../Components/Artifact/ArtifactLevelSlider\"\r\nimport ArtifactMainStatMultipleSelectChip from \"../Components/Artifact/ArtifactMainStatMultipleSelectChip\"\r\nimport ArtifactSetMultipleSelectChip from \"../Components/Artifact/ArtifactSetMultipleSelectChip\"\r\nimport ArtifactSubStatMultipleSelectChip from \"../Components/Artifact/ArtifactSubStatMultipleSelectChip\"\r\nimport { artifactSlotIcon } from \"../Components/Artifact/SlotNameWIthIcon\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport { CharacterMenuItemArray } from \"../Components/Character/CharacterDropdownButton\"\r\nimport DropdownButton from \"../Components/DropdownMenu/DropdownButton\"\r\nimport SolidToggleButtonGroup from \"../Components/SolidToggleButtonGroup\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport CharacterSheet from \"../Data/Characters/CharacterSheet\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport usePromise from \"../ReactHooks/usePromise\"\r\nimport { ICachedArtifact } from \"../Types/artifact\"\r\nimport { allArtifactRarities, allSlotKeys, CharacterKey } from \"../Types/consts\"\r\nimport { FilterOption } from \"./ArtifactSort\"\r\n\r\nexport default function ArtifactFilter({ filterOption, filterOptionDispatch, filterDispatch, numShowing, total, }:\r\n  { filterOption: FilterOption, filterOptionDispatch: (any) => void, filterDispatch: (any) => void, numShowing: number, total: number }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { artSetKeys = [], mainStatKeys = [], rarity = [], slotKeys = [], levelLow, levelHigh, substats = [],\r\n    location = \"\", excluded = \"\" } = filterOption\r\n  const locationCharacterSheet = usePromise(CharacterSheet.get(location as CharacterKey), [location])\r\n\r\n  let locationDisplay\r\n  if (!location) locationDisplay = t(\"filterLocation.any\")\r\n  else if (location === \"Inventory\") locationDisplay = <span><BusinessCenter /> {t(\"filterLocation.inventory\")}</span>\r\n  else if (location === \"Equipped\") locationDisplay = <span><FontAwesomeIcon icon={faUserShield} /> {t(\"filterLocation.currentlyEquipped\")}</span>\r\n  else locationDisplay = <b>{locationCharacterSheet?.nameWIthIcon}</b>\r\n\r\n  let excludedDisplay\r\n  if (excluded === \"excluded\") excludedDisplay = <span><FontAwesomeIcon icon={faBan} /> {t`exclusion.excluded`}</span>\r\n  else if (excluded === \"included\") excludedDisplay = <span><FontAwesomeIcon icon={faChartLine} /> {t`exclusion.included`}</span>\r\n  else excludedDisplay = t(\"exclusionDisplay\", { value: t(\"exclusion.any\") })\r\n\r\n  return <Suspense fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={300} />}>\r\n    <CardDark  >\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item >\r\n            <Typography variant=\"h6\"><Trans t={t} i18nKey=\"artifactFilter\">Artifact Filter</Trans></Typography>\r\n          </Grid>\r\n          <Grid item flexGrow={1} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            {numShowing !== total && <Typography>Filtered {numShowing} / {total}</Typography>}\r\n          </Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => filterDispatch({ type: \"reset\" })} startIcon={<Replay />}>\r\n              <Trans t={t} i18nKey=\"ui:reset\" />\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} mt={1}>\r\n          {/* left */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact stars filter */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ rarity: newVal })} value={rarity} size=\"small\">\r\n              {allArtifactRarities.map(star => <ToggleButton key={star} value={star}><Stars stars={star} /></ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artifact Slot */}\r\n            <SolidToggleButtonGroup fullWidth onChange={(e, newVal) => filterOptionDispatch({ slotKeys: newVal })} value={slotKeys} size=\"small\">\r\n              {allSlotKeys.map(slotKey => <ToggleButton key={slotKey} value={slotKey}>{artifactSlotIcon(slotKey)}</ToggleButton>)}\r\n            </SolidToggleButtonGroup>\r\n            {/* Artiface level filter */}\r\n            <ArtifactLevelSlider levelLow={levelLow} levelHigh={levelHigh}\r\n              setLow={levelLow => filterOptionDispatch({ levelLow })}\r\n              setHigh={levelHigh => filterOptionDispatch({ levelHigh })}\r\n              setBoth={(levelLow, levelHigh) => filterOptionDispatch({ levelLow, levelHigh })} />\r\n            <Box display=\"flex\" gap={1}>\r\n              {/* location */}\r\n              <LocationDropdown dropdownProps={{ color: location ? \"success\" : \"primary\" }} title={locationDisplay} onChange={location => filterOptionDispatch({ location })} selectedCharacterKey={location} />\r\n              {/* exclusion state */}\r\n              <DropdownButton fullWidth title={excludedDisplay} color={excluded ? (excluded === \"included\" ? \"success\" : \"error\") : \"primary\"}>\r\n                <MenuItem selected={excluded === \"\"} disabled={excluded === \"\"} onClick={() => filterOptionDispatch({ excluded: \"\" })}><Trans t={t} i18nKey=\"exclusion.any\" >Any</Trans></MenuItem>\r\n                <MenuItem selected={excluded === \"excluded\"} disabled={excluded === \"excluded\"} onClick={() => filterOptionDispatch({ excluded: \"excluded\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faBan} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.excluded\" >Excluded</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n                <MenuItem selected={excluded === \"included\"} disabled={excluded === \"included\"} onClick={() => filterOptionDispatch({ excluded: \"included\" })}>\r\n                  <ListItemIcon>\r\n                    <FontAwesomeIcon icon={faChartLine} />\r\n                  </ListItemIcon>\r\n                  <ListItemText>\r\n                    <Trans t={t} i18nKey=\"exclusion.included\" >Included</Trans>\r\n                  </ListItemText>\r\n                </MenuItem>\r\n              </DropdownButton>\r\n            </Box>\r\n          </Grid>\r\n          {/* right */}\r\n          <Grid item xs={12} md={6} display=\"flex\" flexDirection=\"column\" gap={1}>\r\n            {/* Artifact Set */}\r\n            <ArtifactSetMultipleSelectChip artSetKeys={artSetKeys} setArtSetKeys={artSetKeys => filterOptionDispatch({ artSetKeys })} />\r\n            <ArtifactMainStatMultipleSelectChip mainStatKeys={mainStatKeys} setMainStatKeys={mainStatKeys => filterOptionDispatch({ mainStatKeys })} />\r\n            <ArtifactSubStatMultipleSelectChip subStatKeys={substats} setSubStatKeys={substats => filterOptionDispatch({ substats })} />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </CardDark>\r\n  </Suspense>\r\n}\r\n\r\n\r\nfunction LocationDropdown({ title, onChange, selectedCharacterKey, dropdownProps }) {\r\n  const { database } = useContext(DatabaseContext)\r\n  const characterSheets = usePromise(CharacterSheet.getAll, [])\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n\r\n  return <DropdownButton fullWidth {...dropdownProps} title={title}>\r\n    <MenuItem key=\"unselect\" selected={selectedCharacterKey === \"\"} disabled={selectedCharacterKey === \"\"} onClick={() => onChange(\"\")}>\r\n      <ListItemIcon>\r\n        <Replay />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"ui:unselect\" >Unselect</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"inventory\" selected={selectedCharacterKey === \"Inventory\"} disabled={selectedCharacterKey === \"Inventory\"} onClick={() => onChange(\"Inventory\")}>\r\n      <ListItemIcon>\r\n        <BusinessCenter />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.inventory\" >Inventory</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <MenuItem key=\"equipped\" selected={selectedCharacterKey === \"Equipped\"} disabled={selectedCharacterKey === \"Equipped\"} onClick={() => onChange(\"Equipped\")}>\r\n      <ListItemIcon>\r\n        <FontAwesomeIcon icon={faUserShield} />\r\n      </ListItemIcon>\r\n      <ListItemText>\r\n        <Trans t={t} i18nKey=\"filterLocation.currentlyEquipped\" >Currently Equipped</Trans>\r\n      </ListItemText>\r\n    </MenuItem>\r\n    <Divider />\r\n    {!!characterSheets && CharacterMenuItemArray(characterSheets, database._getCharKeys().sort(), onChange, selectedCharacterKey)}\r\n  </DropdownButton>\r\n}\r\n\r\nexport function ArtifactRedButtons({ artifactIds, filterOption }:\r\n  { artifactIds: string[], filterOption: FilterOption }) {\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { database } = useContext(DatabaseContext)\r\n  const { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock } = useMemo(() => {\r\n    const artifacts = artifactIds.map(id => database._getArt(id)) as ICachedArtifact[]\r\n    const numUnlock = artifacts.reduce((a, art) => a + (art.lock ? 0 : 1), 0)\r\n    const numLock = artifacts.length - numUnlock\r\n    const numDelete = numUnlock\r\n    const numUnequip = artifacts.reduce((a, art) => a + (art.location ? 1 : 0), 0)\r\n    const numExclude = artifacts.reduce((a, art) => a + (art.exclude ? 1 : 0), 0)\r\n    const numInclude = artifacts.length - numExclude\r\n\r\n    return { numDelete, numUnequip, numExclude, numInclude, numUnlock, numLock }\r\n  }, [artifactIds, database])\r\n\r\n  const unequipArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unequip ${numUnequip} artifacts currently equipped on characters?`) &&\r\n    artifactIds.map(id => database.setArtLocation(id, \"\"))\r\n\r\n  const deleteArtifacts = () =>\r\n    window.confirm(`Are you sure you want to delete ${numDelete} artifacts?`) &&\r\n    artifactIds.map(id => !database._getArt(id)?.lock && database.removeArt(id))\r\n\r\n  const excludeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to exclude ${numInclude} artifacts from build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: true }, id))\r\n\r\n  const includeArtifacts = () =>\r\n    window.confirm(`Are you sure you want to include ${numExclude} artifacts in build generations?`) &&\r\n    artifactIds.map(id => database.updateArt({ exclude: false }, id))\r\n\r\n  const lockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to lock ${numUnlock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: true }, id))\r\n\r\n  const unlockArtifacts = () =>\r\n    window.confirm(`Are you sure you want to unlock ${numLock} artifacts?`) &&\r\n    artifactIds.map(id => database.updateArt({ lock: false }, id))\r\n\r\n  return <Grid container spacing={1} alignItems=\"center\">\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnequip} onClick={unequipArtifacts} startIcon={<FontAwesomeIcon icon={faUserSlash} />}>\r\n        <Trans t={t} i18nKey=\"button.unequipArtifacts\" >Unequip Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnequip ? \"success\" : \"secondary\"}>{numUnequip}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numDelete} onClick={deleteArtifacts} startIcon={<FontAwesomeIcon icon={faTrash} />}>\r\n        <Trans t={t} i18nKey=\"button.deleteArtifacts\" >Delete Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numDelete ? \"success\" : \"secondary\"}>{numDelete}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numInclude} onClick={excludeArtifacts} startIcon={<FontAwesomeIcon icon={faBan} />}>\r\n        <Trans t={t} i18nKey=\"button.excludeArtifacts\" >Exclude Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numInclude ? \"success\" : \"secondary\"}>{numInclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numExclude} onClick={includeArtifacts} startIcon={<FontAwesomeIcon icon={faChartLine} />}>\r\n        <Trans t={t} i18nKey=\"button.includeArtifacts\" >Include Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numExclude ? \"success\" : \"secondary\"}>{numExclude}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numLock} onClick={unlockArtifacts} startIcon={<LockOpen />}>\r\n        <Trans t={t} i18nKey=\"button.unlockrtifacts\" >Unlock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numLock ? \"success\" : \"secondary\"}>{numLock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={6} md={3}>\r\n      <Button fullWidth color=\"error\" disabled={!numUnlock} onClick={lockArtifacts} startIcon={<Lock />}>\r\n        <Trans t={t} i18nKey=\"button.lockArtifacts\" >Lock Artifacts</Trans>\r\n        <SqBadge sx={{ ml: 1 }} color={numUnlock ? \"success\" : \"secondary\"}>{numUnlock}</SqBadge>\r\n      </Button>\r\n    </Grid>\r\n    <Grid item xs={12} sm={12} md={6} display=\"flex\" justifyContent=\"space-around\">\r\n      <Typography variant=\"caption\" color=\"text.secondary\"><Trans t={t} i18nKey=\"buttonHint\">Note: the red buttons above only applies to <b>currently filtered artifacts</b></Trans></Typography>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { ICachedArtifact, MainStatKey } from \"../Types/artifact\";\r\nimport { allArtifactRarities, allSlotKeys, ArtifactRarity, ArtifactSetKey, CharacterKey, SlotKey } from \"../Types/consts\";\r\nimport { FilterConfigs, SortConfigs } from \"../Util/SortByFilters\";\r\nimport Artifact from \"../Data/Artifacts/Artifact\";\r\nimport { probability } from \"./RollProbability\";\r\nimport { SubstatKey } from \"../Types/artifact\";\r\nexport const artifactSortKeys = [\"rarity\", \"level\", \"artsetkey\", \"efficiency\", \"mefficiency\", \"probability\"] as const\r\nexport const artifactSortKeysTC = [\"probability\"] as const\r\nexport type ArtifactSortKey = typeof artifactSortKeys[number]\r\nexport type FilterOption = {\r\n  artSetKeys: ArtifactSetKey[],\r\n  rarity: ArtifactRarity[],\r\n  levelLow: number,\r\n  levelHigh: number,\r\n  slotKeys: SlotKey[],\r\n  mainStatKeys: MainStatKey[],\r\n  substats: SubstatKey[]\r\n  location: CharacterKey | \"Inventory\" | \"Equipped\" | \"\"\r\n  excluded: \"excluded\" | \"included\" | \"\",\r\n}\r\n\r\ntype ArtifactSortFilter = {\r\n  filterOption: FilterOption\r\n  ascending: boolean\r\n  sortType: ArtifactSortKey\r\n}\r\nexport const initialArtifactSortFilter = (): ArtifactSortFilter => ({\r\n  filterOption: {\r\n    artSetKeys: [],\r\n    rarity: [...allArtifactRarities],\r\n    levelLow: 0,\r\n    levelHigh: 20,\r\n    slotKeys: [...allSlotKeys],\r\n    mainStatKeys: [],\r\n    substats: [],\r\n    location: \"\",\r\n    excluded: \"\",\r\n  },\r\n  ascending: false,\r\n  sortType: artifactSortKeys[0],\r\n})\r\n\r\nexport function artifactSortConfigs(effFilterSet: Set<SubstatKey>, probabilityFilter): SortConfigs<ArtifactSortKey, ICachedArtifact> {\r\n  return {\r\n    rarity: {\r\n      getValue: art => art.rarity ?? 0,\r\n      tieBreaker: \"level\"\r\n    },\r\n    level: {\r\n      getValue: art => art.level ?? 0,\r\n      tieBreaker: \"artsetkey\"\r\n    },\r\n    artsetkey: {\r\n      getValue: art => art.setKey ?? \"\",\r\n      tieBreaker: \"level\"\r\n    },\r\n    efficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).currentEfficiency\r\n    },\r\n    mefficiency: {\r\n      getValue: art => Artifact.getArtifactEfficiency(art, effFilterSet).maxEfficiency\r\n    },\r\n    probability: {\r\n      getValue: art => {\r\n        if (!Object.keys(probabilityFilter).length) return 0\r\n        const prob = (art as any).probability\r\n        if (prob === undefined) return probability(art, probabilityFilter);\r\n        return prob\r\n      }\r\n    }\r\n  }\r\n}\r\nexport function artifactFilterConfigs(): FilterConfigs<keyof FilterOption, ICachedArtifact> {\r\n  return {\r\n    excluded: (art, filter) => {\r\n      if (filter === \"excluded\" && !art.exclude) return false\r\n      if (filter === \"included\" && art.exclude) return false\r\n      return true\r\n    },\r\n    location: (art, filter) => {\r\n      if (!filter) return true\r\n      if (filter === \"Inventory\" && !art.location) return true\r\n      if (filter === \"Equipped\" && art.location) return true\r\n      if (filter === art.location) return true\r\n      return false\r\n    },\r\n    artSetKeys: (art, filter) => filter.length ? filter.includes(art.setKey) : true,\r\n    slotKeys: (art, filter) => filter.length ? filter.includes(art.slotKey) : true,\r\n    mainStatKeys: (art, filter) => filter.length ? filter.includes(art.mainStatKey) : true,\r\n    levelLow: (art, filter) => filter <= art.level,\r\n    levelHigh: (art, filter) => filter >= art.level,\r\n    rarity: (art, filter) => filter.includes(art.rarity),\r\n    substats: (art, filter) => {\r\n      for (const filterKey of filter)\r\n        if (filterKey && !art.substats.some(substat => substat.key === filterKey)) return false;\r\n      return true\r\n    }\r\n  }\r\n}\r\n","import { CardContent, Divider, Grid, Typography } from \"@mui/material\"\r\nimport { useCallback } from \"react\"\r\nimport CardDark from \"../Components/Card/CardDark\"\r\nimport CardLight from \"../Components/Card/CardLight\"\r\nimport ColorText from \"../Components/ColoredText\"\r\nimport SqBadge from \"../Components/SqBadge\"\r\nimport { StatFilterItem } from \"../Components/StatFilterCard\"\r\nimport { allSubstats, SubstatKey } from \"../Types/artifact\"\r\n\r\nexport default function ProbabilityFilter({ probabilityFilter: statFilters = {}, setProbabilityFilter: setStatFilters, disabled = false }: {\r\n  probabilityFilter: Dict<SubstatKey, number>,\r\n  setProbabilityFilter: (object: Dict<SubstatKey, number>) => void,\r\n  disabled?: boolean\r\n}) {\r\n  const remainingKeys = allSubstats.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = useCallback((sKey, min) => setStatFilters({ ...statFilters, [sKey]: min }), [statFilters, setStatFilters],\r\n  )\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"h6\">\r\n        Roll Probability Calculator <SqBadge color=\"success\">TC Feature</SqBadge>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12} md={6}>\r\n          <CardLight>\r\n            <CardContent>\r\n              <Typography>\r\n                This UI only pops up when \"Sort by\" <strong>Probability</strong>.\r\n                In conjunction with the Artifact Filters above, this UI allows you to set a criteria for substats values, and it will sort the artifacts by those with the highest probability to roll into those criteria values.\r\n                <ColorText color=\"warning\"> Artifacts that already reach the criteria(100%) or are at 0% are hidden.</ColorText>\r\n              </Typography>\r\n\r\n            </CardContent>\r\n          </CardLight>\r\n        </Grid>\r\n        <Grid item xs={12} md={6} container spacing={1}>\r\n          {Object.entries(statFilters).map(([statKey, min]) => {\r\n            return <Grid item xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} value={min} close={() => {\r\n              delete statFilters[statKey]\r\n              setStatFilters({ ...statFilters })\r\n            }} /></Grid>\r\n          })}\r\n          <Grid item xs={12}>\r\n            <StatFilterItem value={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark >\r\n}\r\n","import { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Replay } from '@mui/icons-material';\r\nimport { Alert, Box, Button, CardContent, Grid, Link, Pagination, Skeleton, ToggleButton, Typography } from '@mui/material';\r\nimport React, { Suspense, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { Trans, useTranslation } from 'react-i18next';\r\nimport { Link as RouterLink, useLocation } from 'react-router-dom';\r\nimport CardDark from '../Components/Card/CardDark';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport SolidToggleButtonGroup from '../Components/SolidToggleButtonGroup';\r\nimport SortByButton from '../Components/SortByButton';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { initGlobalSettings } from '../GlobalSettings';\r\nimport KeyMap from '../KeyMap';\r\nimport useDBState from '../ReactHooks/useDBState';\r\nimport useForceUpdate from '../ReactHooks/useForceUpdate';\r\nimport { allSubstats, SubstatKey } from '../Types/artifact';\r\nimport { ArtifactDisplayLocationState } from '../Types/LocationState';\r\nimport { filterFunction, sortFunction } from '../Util/SortByFilters';\r\nimport { clamp } from '../Util/Util';\r\nimport ArtifactCard from './ArtifactCard';\r\nimport ArtifactEditor from './ArtifactEditor';\r\nimport ArtifactFilter, { ArtifactRedButtons } from './ArtifactFilter';\r\nimport { artifactFilterConfigs, artifactSortConfigs, artifactSortKeys, artifactSortKeysTC, initialArtifactSortFilter } from './ArtifactSort';\r\nimport ProbabilityFilter from './ProbabilityFilter';\r\nimport { probability } from './RollProbability';\r\n\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\nfunction initialState() {\r\n  return {\r\n    ...initialArtifactSortFilter(),\r\n    maxNumArtifactsToDisplay: 50,\r\n    effFilter: [...allSubstats] as SubstatKey[],\r\n    probabilityFilter: {} as Dict<SubstatKey, number>,\r\n  }\r\n}\r\nexport default function ArtifactDisplay() {\r\n  const [{ tcMode }] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n  const { t } = useTranslation([\"artifact\", \"ui\"]);\r\n  const { state: locationState } = useLocation<ArtifactDisplayLocationState | undefined>()\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useDBState(\"ArtifactDisplay\", initialState)\r\n  const stateDispatch = useCallback(\r\n    action => {\r\n      if (action.type === \"reset\") setState(initialArtifactSortFilter())\r\n      else setState(action)\r\n    },\r\n    [setState],\r\n  )\r\n\r\n  const { effFilter, filterOption, ascending, probabilityFilter, maxNumArtifactsToDisplay } = state\r\n  let { sortType } = state\r\n  const showProbability = tcMode && sortType === \"probability\"\r\n  //force the sortType back to a normal value after exiting TC mode\r\n  if (sortType === \"probability\" && !tcMode) stateDispatch({ sortType: artifactSortKeys[0] })\r\n\r\n  const [artToEditId, setartToEditId] = useState(locationState?.artToEditId)\r\n  const [pageIdex, setpageIdex] = useState(0)\r\n  const invScrollRef = useRef<HTMLDivElement>(null)\r\n  const [dbDirty, forceUpdate] = useForceUpdate()\r\n  const effFilterSet = useMemo(() => new Set(effFilter), [effFilter]) as Set<SubstatKey>\r\n  const deleteArtifact = useCallback((id: string) => database.removeArt(id), [database])\r\n  const editArtifact = useCallback(id => setartToEditId(id), [])\r\n  const cancelEditArtifact = useCallback(() => setartToEditId(undefined), [])\r\n\r\n  useEffect(() => {\r\n    ReactGA.pageview('/artifact')\r\n    return database.followAnyArt(forceUpdate)\r\n  }, [database, forceUpdate])\r\n\r\n  const filterOptionDispatch = useCallback((action) => {\r\n    stateDispatch({\r\n      filterOption: {\r\n        ...filterOption,\r\n        ...action\r\n      }\r\n    })\r\n  }, [stateDispatch, filterOption])\r\n\r\n  const setProbabilityFilter = useCallback(probabilityFilter => stateDispatch({ probabilityFilter }), [stateDispatch],)\r\n\r\n  const noArtifact = useMemo(() => !database._getArts().length, [database])\r\n  const sortConfigs = useMemo(() => artifactSortConfigs(effFilterSet, probabilityFilter), [effFilterSet, probabilityFilter])\r\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\r\n  const { artifactIds, totalArtNum } = useMemo(() => {\r\n    const { sortType = artifactSortKeys[0], ascending = false, filterOption } = state\r\n    let allArtifacts = database._getArts()\r\n    const filterFunc = filterFunction(filterOption, filterConfigs)\r\n    const sortFunc = sortFunction(sortType, ascending, sortConfigs)\r\n    //in probability mode, filter out the artifacts that already reach criteria\r\n    if (showProbability) {\r\n      allArtifacts.forEach(art => (art as any).probability = probability(art, probabilityFilter))\r\n      allArtifacts = allArtifacts.filter(art => (art as any).probability && (art as any).probability !== 1)\r\n    }\r\n    const artifactIds = allArtifacts.filter(filterFunc).sort(sortFunc).map(art => art.id)\r\n    return { artifactIds, totalArtNum: allArtifacts.length, ...dbDirty }//use dbDirty to shoo away warnings!\r\n  }, [state, dbDirty, database, sortConfigs, filterConfigs, probabilityFilter, showProbability])\r\n\r\n\r\n  const { artifactsToShow: artifactIdsToShow, numPages, currentPageIndex } = useMemo(() => {\r\n    const numPages = Math.ceil(artifactIds.length / maxNumArtifactsToDisplay)\r\n    const currentPageIndex = clamp(pageIdex, 0, numPages - 1)\r\n    return { artifactsToShow: artifactIds.slice(currentPageIndex * maxNumArtifactsToDisplay, (currentPageIndex + 1) * maxNumArtifactsToDisplay), numPages, currentPageIndex }\r\n  }, [artifactIds, pageIdex, maxNumArtifactsToDisplay])\r\n\r\n  //for pagination\r\n  const totalShowing = artifactIds.length !== totalArtNum ? `${artifactIds.length}/${totalArtNum}` : `${totalArtNum}`\r\n  const setPage = useCallback(\r\n    (e, value) => {\r\n      invScrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n      setpageIdex(value - 1);\r\n    },\r\n    [setpageIdex, invScrollRef],\r\n  )\r\n\r\n  return <Box display=\"flex\" flexDirection=\"column\" gap={1} my={1}>\r\n    <InfoComponent\r\n      pageKey=\"artifactPage\"\r\n      modalTitle={t`info.title`}\r\n      text={t(\"tipsOfTheDay\", { returnObjects: true }) as string[]}\r\n    >\r\n      <InfoDisplay />\r\n    </InfoComponent>\r\n\r\n    {noArtifact && <Alert severity=\"info\" variant=\"filled\">Looks like you haven't added any artifacts yet. If you want, there are <Link color=\"warning.main\" component={RouterLink} to=\"/scanner\">automatic scanners</Link> that can speed up the import process!</Alert>}\r\n\r\n    <ArtifactEditor\r\n      artifactIdToEdit={artToEditId}\r\n      cancelEdit={cancelEditArtifact}\r\n    />\r\n    <ArtifactFilter filterOption={filterOption} filterOptionDispatch={filterOptionDispatch} filterDispatch={stateDispatch}\r\n      numShowing={artifactIds.length} total={totalArtNum} />\r\n    {showProbability && <ProbabilityFilter probabilityFilter={probabilityFilter} setProbabilityFilter={setProbabilityFilter} />}\r\n    <CardDark ref={invScrollRef}>\r\n      <CardContent>\r\n        <Grid container sx={{ mb: 1 }}>\r\n          <Grid item flexGrow={1}><span><Trans t={t} i18nKey=\"efficiencyFilter.title\">Substats to use in efficiency calculation</Trans></span></Grid>\r\n          <Grid item>\r\n            <Button size=\"small\" color=\"error\" onClick={() => stateDispatch({ effFilter: [...allSubstats] })} startIcon={<Replay />}><Trans t={t} i18nKey=\"ui:reset\" /></Button>\r\n          </Grid>\r\n        </Grid>\r\n        <EfficiencyFilter selectedKeys={effFilter} onChange={n => stateDispatch({ effFilter: n })} />\r\n      </CardContent>\r\n    </CardDark>\r\n    <CardDark ><CardContent>\r\n      <Grid container alignItems=\"center\" sx={{ pb: 2 }}>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <SortByButton fullWidth sortKeys={[...artifactSortKeys.filter(key => (artifactSortKeysTC as unknown as string[]).includes(key) ? tcMode : true)]}\r\n            value={sortType} onChange={sortType => stateDispatch({ sortType })}\r\n            ascending={ascending} onChangeAsc={ascending => stateDispatch({ ascending })}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <ArtifactRedButtons artifactIds={artifactIds} filterOption={filterOption} />\r\n    </CardContent></CardDark>\r\n\r\n    <Suspense fallback={<Skeleton variant=\"rectangular\" sx={{ width: \"100%\", height: \"100%\", minHeight: 5000 }} />}>\r\n      <Grid container spacing={1} >\r\n        <Grid item xs={12} sm={6} md={4} lg={4} xl={3}>\r\n          <CardDark sx={{ height: \"100%\", width: \"100%\", minHeight: 300, display: \"flex\", flexDirection: \"column\" }}>\r\n            <CardContent>\r\n              <Typography sx={{ textAlign: \"center\" }}>Add New Artifact</Typography>\r\n            </CardContent>\r\n            <Box sx={{\r\n              flexGrow: 1,\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\"\r\n            }}\r\n            >\r\n              <Button onClick={() => editArtifact(\"new\")} sx={{\r\n                borderRadius: \"1em\"\r\n              }}>\r\n                <Typography variant=\"h1\"><FontAwesomeIcon icon={faPlus} className=\"fa-fw\" /></Typography>\r\n              </Button>\r\n            </Box>\r\n          </CardDark>\r\n        </Grid>\r\n        {artifactIdsToShow.map(artId =>\r\n          <Grid item key={artId} xs={12} sm={6} md={4} lg={4} xl={3} >\r\n            <ArtifactCard\r\n              artifactId={artId}\r\n              effFilter={effFilterSet}\r\n              onDelete={deleteArtifact}\r\n              onEdit={editArtifact}\r\n              probabilityFilter={showProbability ? probabilityFilter : undefined}\r\n            />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Suspense>\r\n    {numPages > 1 && <CardDark ><CardContent>\r\n      <Grid container>\r\n        <Grid item flexGrow={1}>\r\n          <Pagination count={numPages} page={currentPageIndex + 1} onChange={setPage} />\r\n        </Grid>\r\n        <Grid item>\r\n          <ShowingArt count={numPages} page={currentPageIndex + 1} onChange={setPage} numShowing={artifactIdsToShow.length} total={totalShowing} t={t} />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent></CardDark>}\r\n  </Box >\r\n}\r\n\r\nfunction ShowingArt({ count, page, onChange, numShowing, total, t }) {\r\n  return <Typography color=\"text.secondary\">\r\n    <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total} >\r\n      Showing <b>{{ count: numShowing }}</b> out of {{ value: total }} Artifacts\r\n    </Trans>\r\n  </Typography>\r\n}\r\n\r\nfunction EfficiencyFilter({ selectedKeys, onChange }) {\r\n  const keys1 = allSubstats.slice(0, 6)\r\n  const keys2 = allSubstats.slice(6)\r\n  const selKeys1 = selectedKeys.filter(k => keys1.includes(k))\r\n  const selKeys2 = selectedKeys.filter(k => keys2.includes(k))\r\n  return <Grid container spacing={1}>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys1} onChange={(e, arr) => onChange([...selKeys2, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys1.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\r\n            {StatIcon[key]}\r\n            {KeyMap.getArtStr(key)}\r\n          </Box>\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n    <Grid item xs={12} md={6}>\r\n      <SolidToggleButtonGroup fullWidth value={selKeys2} onChange={(e, arr) => onChange([...selKeys1, ...arr])} sx={{ height: \"100%\" }}>\r\n        {keys2.map(key => <ToggleButton size=\"small\" key={key} value={key}>\r\n          <Box display=\"flex\" gap={1} alignItems=\"center\">\r\n            {StatIcon[key]}\r\n            {KeyMap.getArtStr(key)}\r\n          </Box>\r\n        </ToggleButton>)}\r\n      </SolidToggleButtonGroup>\r\n    </Grid>\r\n  </Grid>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","type SortConfig<T> = {\r\n  getValue: (id: T) => number | string\r\n  tieBreaker?: string\r\n}\r\nexport type SortConfigs<Keys extends string, T> = Record<Keys, SortConfig<T>>\r\n\r\nexport function sortFunction<Keys extends string, T>(sortby: string, ascending: boolean, configs: SortConfigs<Keys, T>) {\r\n  function Sort(a: T, b: T, ascending: boolean, config: SortConfig<T>) {\r\n    const aV = config.getValue(a)\r\n    const bV = config.getValue(b)\r\n    let diff = 0\r\n    if (typeof aV === \"string\" && typeof bV === \"string\")\r\n      diff = aV.localeCompare(bV)\r\n    else\r\n      diff = ((bV as number) - (aV as number))\r\n    return (ascending ? -1 : 1) * diff\r\n  }\r\n  return (a: T, b: T) => {\r\n    if (!configs[sortby]) return 0\r\n    const filterOption = configs[sortby]\r\n    let diff = Sort(a, b, ascending, filterOption)\r\n    if (!diff && filterOption.tieBreaker && configs[filterOption.tieBreaker])\r\n      diff = Sort(a, b, ascending, configs[filterOption.tieBreaker])\r\n    return diff\r\n  }\r\n}\r\n\r\ntype FilterConfig<T> = (obj: T, filter: any) => boolean\r\nexport type FilterConfigs<Keys extends string, T> = Record<Keys, FilterConfig<T>>\r\nexport function filterFunction<Keys extends string, T>(filterOptions: Record<Keys, any>, filterConfigs: FilterConfigs<Keys, T>) {\r\n  return (obj: T) => Object.entries(filterOptions).every(([optionKey, optionVal]) => filterConfigs[optionKey as any] && filterConfigs[optionKey as any](obj, optionVal))\r\n}\r\n"],"names":["ArtifactLevelSlider","levelLow","levelHigh","setLow","setHigh","setBoth","dark","disabled","useState","sliderLow","setsliderLow","sliderHigh","setsliderHigh","setSlider","useCallback","e","l","h","useEffect","sx","width","display","alignItems","bgcolor","value","onChange","val","clamp","pl","inputProps","textAlign","startAdornment","flexGrow","mx","getAriaLabel","onChangeCommitted","valueLabelDisplay","min","max","step","marks","px","ArtifactSetDropdown","selectedSetKey","artifactSetsByRarity","hasUnselect","props","t","useTranslation","artifactSheets","usePromise","ArtifactSheet","sheet","displaySets","useMemo","title","name","startIcon","defIconSrc","src","color","onClick","selected","i18nKey","Object","keys","length","entries","reverse","flatMap","i","star","sets","stars","parseInt","map","setKey","fontSize","BootstrapTooltip","styled","className","arrow","classes","popper","theme","tooltipClasses","palette","common","black","backgroundColor","initialInfoShownState","artifactPage","buildPage","characterPage","InfoComponent","pageKey","text","modalTitle","children","useDBState","stateInfoShown","setStateInfoShown","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","container","item","variant","xs","size","icon","faQuestionCircle","ns","key18","containerProps","maxWidth","open","onClose","py","Suspense","fallback","height","large","SortByButton","sortKeys","ascending","onChangeAsc","key","faSortAmountDownAlt","faSortAmountUp","StatFilterCard","statFilters","setStatFilters","data","useContext","DataContext","statKeys","get","input","push","charEle","remainingKeys","filter","some","k","setFilter","sKey","spacing","statKey","StatFilterItem","close","undefined","isFloat","KeyMap","s","flexBasis","float","placeholder","faTrashAlt","createContext","then","imp","default","tr","strKey","allData","as","mergeData","values","getSlotName","slotKey","getSlotDesc","setEffectDesc","setNum","setEffectDocument","setEffects","document","hasEnough","this","slots","slotIcons","rarity","allSlotKeys","icons","set","a","sheets","grouped","forEach","Math","artifactSetEffect","setNums","sn","conditionalHeader","img","m","action","initGlobalSettings","tcMode","ArtifactRarityDropdown","DropdownButton","MenuItem","ArtifactSlotDropdown","artifactSlotIcon","ListItemIcon","Replay","ListItemText","Divider","CustomNumberTextField","state","setState","sendChange","parseFunc","parseFloat","toString","TextField","type","target","onBlur","onKeyDown","SubstatEfficiencyDisplayCard","efficiency","valid","eff","CardLight","Grid","placement","Typography","Trans","Box","component","FontAwesomeIcon","cursor","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","substats","rolls","accurateValue","reduce","b","unit","rollNum","error","rollData","allowedRolls","Artifact","numUpgrades","high","rollOffset","ButtonGroup","StatIcon","whiteSpace","allSubstats","CustomNumberInput","TextButton","v","newValue","cacheValueString","artifactSubstatRollCorrection","Button","p","SqBadge","count","sort","indexOf","ml","flexShrink","UploadExplainationModal","modalShow","hide","ModalWrapper","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","Snippet","gutterBottom","href","rel","scan_art_main","BorrowManager","init","deinit","callback","refCount","box","result","starColor","r","g","schedulers","language","scheduler","createScheduler","promises","fill","_","worker","createWorker","errorHandler","console","load","loadLanguage","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocr","ocrResult","findBestArtifact","rarities","parseSetKeys","artifactSetTexts","parseSlotKeys","whiteTexts","parseSubstats","substatTexts","parseMainStatKeys","parseMainStatValues","texts","resolve","reader","FileReader","onloadend","readAsDataURL","urlToImageData","urlFile","Image","onload","image","canvas","createElement","context","getContext","drawImage","getImageData","imageToImageData","imageDataToCanvas","imageData","putImageData","halfHeight","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","parseRarities","all","options","borrow","addJob","rec","lines","line","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","Set","bestScore","bestArtifacts","level","location","lock","exclude","rarityRates","objectKeyMap","allArtifactRarities","score","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","setKeys","rarityScore","minimumMainStatValue","findIndex","mainStatVal","mainStatValScore","chosen","resultMainStatVal","every","other","add","unknownText","detectedText","inferredText","addText","available","recommended","ambiguousText","valueStrFunc","find","results","allArtifactSets","hammingDistance","replace","nameRaw","f","pixels","d","lastRowNum","rowsWithNumber","y","onStar","x","colorCloseEnough","color1","color2","threshold","intCloseEnough","abs","allMainStatKeys","toLowerCase","regex","match","exec","matches","RegExp","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","oldIndex","current","InputInvis","ArtifactEditor","artifactIdToEdit","cancelEdit","database","DatabaseContext","show","setShow","useForceUpdate","dirtyDatabase","setDirtyDatabase","followAnyArt","useReducer","editorArtifact","artifactDispatch","parseArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","numProcessing","processingCurrent","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","databaseArtifact","_getArt","old","oldType","findDuplicates","duplicated","upgraded","errors","validated","validateArtifact","cachedArtifact","deepClone","reset","update","newSheet","pick","prefer","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","Skeleton","CardHeader","pt","mb","lg","id","label","mr","my","margin","ImgIcon","mainStatK","flexDirection","gap","htmlFor","accept","multiple","PhotoCamera","minWidth","ReactGA","justifyContent","CircularProgress","ArtifactCard","artifactObj","Add","updateArt","createArt","confirm","process","Update","getStyles","personName","fontWeight","typography","fontWeightMedium","fontWeightRegular","ArtifactMainStatMultipleSelectChip","setMainStatKeys","useTheme","FormControl","fullWidth","InputLabel","Select","labelId","event","split","OutlinedInput","renderValue","flexWrap","Chip","primaryTypographyProps","style","ArtifactSetMultipleSelectChip","artSetKeys","setArtSetKeys","defIcon","pointerEvents","ArtifactSubStatMultipleSelectChip","subStatKeys","setSubStatKeys","ArtifactFilter","locationDisplay","excludedDisplay","filterOption","filterOptionDispatch","filterDispatch","numShowing","total","excluded","locationCharacterSheet","CharacterSheet","BusinessCenter","faUserShield","nameWIthIcon","faBan","faChartLine","SolidToggleButtonGroup","newVal","ToggleButton","LocationDropdown","dropdownProps","selectedCharacterKey","characterSheets","CharacterMenuItemArray","_getCharKeys","ArtifactRedButtons","artifactIds","artifacts","numUnlock","art","numLock","numDelete","numUnequip","numExclude","numInclude","sm","setArtLocation","faUserSlash","removeArt","faTrash","LockOpen","Lock","artifactSortKeys","artifactSortKeysTC","initialArtifactSortFilter","sortType","ProbabilityFilter","probabilityFilter","setProbabilityFilter","InfoDisplay","React","initialState","maxNumArtifactsToDisplay","effFilter","ArtifactDisplay","locationState","useLocation","stateDispatch","showProbability","artToEditId","setartToEditId","pageIdex","setpageIdex","invScrollRef","useRef","dbDirty","forceUpdate","effFilterSet","deleteArtifact","editArtifact","cancelEditArtifact","noArtifact","_getArts","sortConfigs","getValue","tieBreaker","artsetkey","mefficiency","probability","prob","artifactSortConfigs","filterConfigs","filterKey","allArtifacts","filterFunc","filterFunction","sortFunc","sortFunction","totalArtNum","numPages","ceil","currentPageIndex","artifactsToShow","artifactIdsToShow","totalShowing","setPage","scrollIntoView","behavior","returnObjects","Link","RouterLink","to","ref","EfficiencyFilter","selectedKeys","n","pb","Pagination","page","ShowingArt","xl","minHeight","borderRadius","faPlus","artId","artifactId","onDelete","onEdit","keys1","keys2","selKeys1","selKeys2","arr","_getState","followState","updateState","sortby","configs","Sort","config","aV","bV","localeCompare","diff","filterOptions","obj","optionKey","optionVal"],"sourceRoot":""}