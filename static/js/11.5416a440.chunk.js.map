{"version":3,"sources":["Build/Build.ts","Components/EquipmentDropdown.tsx","Character/CharacterUtil.tsx","Weapon/WeaponCard.tsx","Weapon/WeaponSelection.tsx","Components/InfoComponent.tsx","Character/CharacterCard.tsx","Util/TimeUtil.ts","../node_modules/react-bootstrap/esm/ProgressBar.js","Build/BuildWorker.ts","Build/BuildDisplay.tsx"],"names":["calculateTotalBuildNumber","artifactsBySlot","setFilters","setKeys","Set","map","i","key","filteredArtifactsBySlot","slotKeys","Object","keys","slotKey","artifactsBySet","artifact","has","setKey","push","freeze","setCount","accu","result","slotPerm","index","length","num","artifactSetPermutations","reduce","entries","artifacts","getTalentStatKey","skillKey","stats","overwriteElement","hitMode","infusionAura","infusionSelf","reactionMode","characterEle","weaponType","ElementalData","includes","startsWith","eleKey","getTalentStatKeyVariant","EquipmentDropdown","location","onEquip","weaponTypeKey","disableUnequip","editable","t","useTranslation","characterSheet","usePromise","CharacterSheet","get","locationName","name","nameWIthIcon","icon","faBriefcase","Toggle","className","Menu","Item","onClick","Divider","onSelect","getFormulaTargetsDisplayHeading","weaponSheet","artifactSheets","subkey","split","getTalentOfKey","variant","initialCharacter","level","ascension","equippedArtifacts","fromEntries","allSlotKeys","sKey","equippedWeapon","conditionalValues","baseStatOverrides","buildSettings","initialBuildSettings","talent","auto","skill","burst","constellation","WeaponCard","weaponId","onEdit","onDelete","cardClassName","bg","footer","database","useContext","DatabaseContext","useState","undefined","databaseWeapon","updateDatabaseWeapon","useEffect","followWeapon","weapon","WeaponSheet","refine","id","weaponMainVal","getMainStatValue","toFixed","Stat","fixedUnit","weaponSubKey","getSubStatKey","weaponSubVal","getSubStatValue","weaponLevelName","getLevelString","statMap","passiveName","text","Header","src","Assets","weaponTypes","Body","xs","img","rarity","thumbnail","stars","colored","statKey","statVal","unit","getStatUnit","StatIcon","getStatName","process","Footer","charKey","setWeaponLocation","size","faEdit","disabled","faTrashAlt","filterReducer","oldFilter","newFilter","WeaponSelectionModal","show","onHide","filter","weaponSheets","getAll","useReducer","weaponFilter","weaponFilterDispatch","weaponIdList","allWeaponKeys","wKey","sort","a","b","contentClassName","allWeaponTypeKeys","faTimes","weaponKey","lg","md","WeaponSelectionButton","setshow","as","ButtonGroup","InfoComponent","pageKey","modalTitle","children","dbStorage","showInfoModal","setshowInfoModal","Array","isArray","getRandomElementFromArray","displayText","closeModal","infoShown","set","Title","fallback","animation","ns","key18","faQuestionCircle","CharacterCard","characterKey","header","databaseCharacter","updateDatabaseCharacter","followChar","ArtifactSheet","character","_getWeapon","useMemo","Character","calculateBuild","tlvl","elementKey","weaponName","weaponPassiveName","thumbImg","star","setEffects","setToSlots","arr","artifactSetName","highestNum","Math","max","Link","to","pathname","faCalculator","faLink","msToUnits","ms","milliseconds","seconds","floor","minutes","hours","timeString","timeText","strPadLeft","timeStringMs","_excluded","_excluded2","_excluded3","getPercentage","now","min","percentage","round","renderProgressBar","_ref","ref","_classNames","label","srOnly","striped","animated","style","bsPrefix","props","_objectWithoutPropertiesLoose","React","createElement","_extends","role","classNames","width","ProgressBar","forwardRef","_ref2","isChild","useBootstrapPrefix","wrapperProps","child","cloneElement","displayName","defaultProps","Worker_fn","Worker","InfoDisplay","lazy","CharacterDisplayCard","warningBuildNumber","maxBuildsToShowList","artifactsSlotsToSelectMainStats","BuildDisplay","propCharacterKey","setcharacterKey","builds","setbuilds","maxBuildsToShow","setmaxBuildsToShow","modalBuild","setmodalBuild","showArtCondModal","setshowArtCondModal","showCharacterModal","setshowCharacterModal","generatingBuilds","setgeneratingBuilds","generationProgress","setgenerationProgress","generationDuration","setgenerationDuration","generationSkipped","setgenerationSkipped","useForceUpdate","charDirty","setCharDirty","artsDirty","setArtsDirty","isMounted","useRef","worker","initialStats","statsDisplayKeys","setCharacterData","statFilters","mainStatKeys","optimizationTarget","mainStatAssumptionLevel","useExcludedArts","useEquippedArts","ascending","buildSettingsDispatch","useCallback","action","state","type","mainStatKey","k","buildSettingsReducer","updateChar","ReactGA","pageview","selectCharacter","cKey","_getChar","createInitialStats","getDisplayStatKeys","followAnyArt","current","terminate","sectionKey","section","JSON","stringify","totBuildNumber","artifactDatabase","_getArts","art","exclude","Artifact","splitArtifactsBySlot","forEach","generateBuilds","artifactSetEffects","setEffectsObjs","splitArtifacts","deepClone","values","artArr","mainStatVal","mainStatValue","minFilters","maxFilters","data","onmessage","e","progress","timing","skipped","category","variable","value","toString","obj","calculateBuildwithArtifact","postMessage","dropdownitemsForStar","setsWithMaxRarity","setobj","some","setsNumArr","artsAccountedOther","cur","ind","every","parseInt","Dropdown","nameWithIcon","characterName","characterDropDown","DropdownButton","title","CharacterSelection","formula","Formula","sortByText","getStatVariant","getStatNameWithPercent","talentKey","field","getTalentFieldValue","artsAccounted","artifactCondCount","count","crawlObject","v","characterDispatch","val","Container","BuildModal","build","ArtConditionalModal","Row","Col","Card","HitModeCard","Boolean","StatFilterCard","statKeys","basicKeys","setStatFilters","sFs","Button","Badge","setNum","ItemText","setNKey","setNkey","setNumKey","SetEffectDisplay","newBuild","equippedBuild","faCheckSquare","faSquare","AssumeFullLevelToggle","setmainStatAssumptionLevel","numSel","slotMainStats","selected","OverlayTrigger","overlay","Tooltip","drop","align","minWidth","fields","overflow","textOverflow","target","TargetSelectorDropdownItem","faSortAmountDownAlt","faSortAmountUp","BuildAlert","ListGroup","ArtifactDisplayItem","sheets","talentField","Modal","Suspense","tabName","setCharacterKey","onClose","closeArtCondModal","artSetKeyList","setKeysByRarities","reverse","flatMap","faUndo","sheet","slotIcons","rarities","xl","Image","StatFilterItem","close","setFilter","isFloat","inputProps","allowEmpty","float","minInputProps","placeholder","onChange","s","maxInputProps","InputGroup","Prepend","CustomFormControl","Append","faTrash","setHitmode","setReactionMode","setInfusionAura","remainingKeys","currentlyEquipped","slotarr1","slotarr","artifactSlotIcon","StatDisplayComponent","cardbg","totalBuildNumberString","toLocaleString","totalUnskipped","generationProgressString","generationSkippedString","totalUnskippedString","generationSkippedText","progPercent","Alert","levels","0","4","8","12","16","20"],"mappings":"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","file":"static/js/11.5416a440.chunk.js","sourcesContent":["import ElementalData from \"../Data/ElementalData\"\r\nimport { StatKey, ICachedArtifact, SubstatKey } from \"../Types/artifact\"\r\nimport { ArtifactSetEffects, ArtifactsBySlot, SetFilter } from \"../Types/Build\"\r\nimport { ArtifactSetKey, ElementKey, SetNum, SlotKey } from \"../Types/consts\"\r\nimport { BasicStats, BonusStats, ICalculatedStats } from \"../Types/stats\"\r\nimport { mergeStats } from \"../Util/StatUtil\"\r\nimport { deepClone } from \"../Util/Util\"\r\n\r\n/**\r\n * Remove artifacts that can never be used in optimized builds when trying to optimize for top `maxBuildsToShow` builds\r\n * @param {artifact[]} artifacts - List of artifacts of the same slot\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - The list of the set effects\r\n * @param {Set.<statKey>} significantStats - A set of stats that pruning needs to take into consideration\r\n * @param {bool} ascending - Whether the sorting is ascending or descending\r\n * @param {Set.<setKey>} alwaysAccepted - The list of artifact sets that are always included\r\n */\r\nexport function pruneArtifacts(artifacts: ICachedArtifact[], artifactSetEffects: ArtifactSetEffects, significantStats: Set<StatKey>, maxBuildsToShow: number = 1, ascending: boolean = false, alwaysAccepted: Set<ArtifactSetKey> = new Set()): ICachedArtifact[] {\r\n  function shouldKeepFirst(first: Dict<StatKey, number>, second: Dict<StatKey, number>, preferFirst: boolean) {\r\n    let firstBetter = Object.entries(first).some(([k, v]) => !isFinite(v) || v > (second[k] ?? 0))\r\n    let secondBetter = Object.entries(second).some(([k, v]) => !isFinite(v) || v > (first[k] ?? 0))\r\n    if (ascending) [firstBetter, secondBetter] = [secondBetter, firstBetter]\r\n    // Keep if first is strictly better, uncomparable, or equal + prefer first.\r\n    // That is, return false if second is strictly better, or equal + NOT prefer first\r\n    return firstBetter || (!secondBetter && preferFirst)\r\n  }\r\n\r\n  // Prune unused set effects. Sets with no relevant effects are regrouped to \"other\"\r\n  const prunedSetEffects: PrunedArtifactSetEffects = { \"other\": {} }\r\n  Object.entries(artifactSetEffects).forEach(([set, effect]) => {\r\n    Object.entries(effect).forEach(([num, item]) => {\r\n      const effects = Object.entries(item).filter(([key]) => significantStats.has(key as StatKey))\r\n      if (effects.length > 0) {\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = Object.fromEntries(effects)\r\n      }\r\n      const modifiers = item.modifiers\r\n      if (modifiers) {\r\n        // Modifiers are treated as infinite stats\r\n        prunedSetEffects[set] = prunedSetEffects[set] ?? {}\r\n        prunedSetEffects[set]![num] = prunedSetEffects[set]![num] ?? {}\r\n\r\n        Object.keys(modifiers)\r\n          .filter(key => significantStats.has(key as StatKey))\r\n          .forEach(key =>\r\n            prunedSetEffects[set]![num]![key] = Infinity\r\n          )\r\n      }\r\n    })\r\n  })\r\n\r\n  // array of artifacts, artifact stats, and set (may be \"other\")\r\n  let tmp: { artifact: ICachedArtifact, numberOfBetterSameSetArtifacts: number, stats: Dict<StatKey, number>, set: ArtifactSetKey | \"other\" }[] = artifacts.map(artifact => {\r\n    const stats: Dict<StatKey, number> = {}, set: ArtifactSetKey | \"other\" = (artifact.setKey in prunedSetEffects || alwaysAccepted.has(artifact.setKey)) ? artifact.setKey : \"other\"\r\n    if (significantStats.has(artifact.mainStatKey as any))\r\n      stats[artifact.mainStatKey] = artifact.mainStatVal!\r\n    for (const { key, value } of artifact.substats)\r\n      if (key && significantStats.has(key as SubstatKey))\r\n        stats[key] = (stats[key] ?? 0) + value\r\n    for (const key in stats)\r\n      if (key.endsWith(\"enemyRes_\"))\r\n        stats[key as StatKey] = -stats[key as StatKey]!\r\n    return { artifact, numberOfBetterSameSetArtifacts: 0, stats, set }\r\n  })\r\n\r\n  // Compare artifacts' base stats from the same set\r\n  tmp = tmp.filter((first) => {\r\n    const { artifact: candidate, stats: candidateStats, set: candidateSet } = first\r\n    return tmp.every(({ artifact: other, stats: otherStats, set: otherSet }) => {\r\n      if (candidateSet !== otherSet || shouldKeepFirst(candidateStats, otherStats, candidate.id! <= other.id!)) {\r\n        return true\r\n      } else {\r\n        first.numberOfBetterSameSetArtifacts += 1\r\n        return first.numberOfBetterSameSetArtifacts < maxBuildsToShow\r\n      }\r\n    })\r\n  })\r\n\r\n  // Cross-check with different sets\r\n  tmp = tmp.filter(({ artifact: candidate, stats: candidateStats, set: candidateSet }) => {\r\n    if (alwaysAccepted.has(candidate.setKey))\r\n      return true\r\n    // Possible \"additional stats\" if a build equips `candidate` on an empty slot.\r\n    let possibleStats = [...Object.values(prunedSetEffects[candidateSet]!), {}].map(c => {\r\n      const current: BonusStats = { ...candidateStats }\r\n      mergeStats(current, c)\r\n      return { stat: current, numberOfBetterArtifacts: 0 }\r\n    })\r\n    return tmp.every(({ artifact: other, stats: otherStats, set: otherSet, numberOfBetterSameSetArtifacts }) => {\r\n      if (candidateSet === otherSet) return true // Already checked same-set\r\n\r\n      // Remove possibilities that shouldn't be kept\r\n      possibleStats = possibleStats.filter(current => {\r\n        if (shouldKeepFirst(current.stat, otherStats, candidate.id! <= other.id!)) {\r\n          return true\r\n        } else {\r\n          current.numberOfBetterArtifacts += 1\r\n          return current.numberOfBetterArtifacts + numberOfBetterSameSetArtifacts < maxBuildsToShow\r\n        }\r\n      })\r\n      return possibleStats.length !== 0\r\n    })\r\n  })\r\n\r\n  return tmp.map(tmp => tmp.artifact)\r\n}\r\n\r\n/**\r\n * Generate all set of artifacts-by-slots based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n *\r\n */\r\nexport function artifactSetPermutations(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  const setKeys = new Set(setFilters.map(i => i.key)), filteredArtifactsBySlot = {}\r\n  const slotKeys = Object.keys(artifactsBySlot)\r\n\r\n  for (const slotKey of slotKeys) {\r\n    let artifactsBySet: Dict<ArtifactSetKey, ICachedArtifact[]> = {}\r\n    for (const artifact of (artifactsBySlot[slotKey] ?? [])) {\r\n      if (setKeys.has(artifact.setKey)) {\r\n        if (artifactsBySet[artifact.setKey]) artifactsBySet[artifact.setKey]!.push(artifact)\r\n        else artifactsBySet[artifact.setKey] = [artifact]\r\n      } else {\r\n        if (artifactsBySet['null']) artifactsBySet['null'].push(artifact)\r\n        else artifactsBySet['null'] = [artifact]\r\n      }\r\n    }\r\n    filteredArtifactsBySlot[slotKey] = Object.freeze(artifactsBySet)\r\n  }\r\n\r\n  const setCount = {}, accu: ArtifactsBySlot = {}, result: ArtifactsBySlot[] = []\r\n\r\n  function slotPerm(index) {\r\n    if (index >= slotKeys.length) {\r\n      for (const { key, num } of setFilters)\r\n        if ((setCount[key] ?? 0) < num)\r\n          return\r\n      result.push({ ...accu })\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    let artifactsBySet = filteredArtifactsBySlot[slotKey]\r\n    for (const setKey in artifactsBySet) {\r\n      setCount[setKey] = (setCount[setKey] ?? 0) + 1\r\n      accu[slotKey] = artifactsBySet[setKey]\r\n      slotPerm(index + 1)\r\n      setCount[setKey] -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0)\r\n  return result\r\n}\r\n\r\n/**\r\n * Compute number of all artifact permutations based on the filters\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, number>} setFilters - minimum number of artifacts in each set\r\n */\r\nexport function calculateTotalBuildNumber(artifactsBySlot: ArtifactsBySlot, setFilters: SetFilter) {\r\n  return artifactSetPermutations(artifactsBySlot, setFilters).reduce((accu, artifactsBySlot) =>\r\n    accu + Object.entries(artifactsBySlot).reduce((accu, artifacts) => accu * artifacts[1]!.length, 1)\r\n    , 0)\r\n}\r\n\r\n/**\r\n * @callback artifactCallback\r\n * @param {Object.<artifactKey, artifact>} artifacts - the list of artifacts\r\n * @param {stats} stats - the total stats for the artifacts\r\n */\r\n\r\n/**\r\n * Generate all artifact permutations and accumulate the stats\r\n * @param {stats} initialStats - initial stats before any artifact is added\r\n * @param {Object.<slotKey, artifact[]>} artifactsBySlot - list of artifacts, separated by slots\r\n * @param {Object.<setKey, Object.<number, Object.<statKey, statValue>>>} artifactSetEffects - the list of the set effects\r\n * @param {artifactCallback} callback - the functions called with each permutation\r\n */\r\nexport function artifactPermutations(initialStats: ICalculatedStats, artifactsBySlot: ArtifactsBySlot, artifactSetEffects: ArtifactSetEffects, callback) {\r\n  const slotKeys = Object.keys(artifactsBySlot), setCount: Dict<ArtifactSetKey, SetNum> = {}, accu = {}\r\n  function slotPerm(index: number, stats: ICalculatedStats) {\r\n    if (index >= slotKeys.length) {\r\n      callback(accu, stats)\r\n      return\r\n    }\r\n\r\n    const slotKey = slotKeys[index]\r\n    for (const artifact of artifactsBySlot[slotKey] ?? []) {\r\n      const newStats = { ...stats }\r\n\r\n      // Hand-pick costly copying\r\n      if (newStats.modifiers) newStats.modifiers = deepClone(newStats.modifiers)\r\n\r\n      accumulate(slotKey, artifact, setCount, accu, newStats, artifactSetEffects)\r\n      slotPerm(index + 1, newStats)\r\n      setCount[artifact.setKey]! -= 1\r\n    }\r\n  }\r\n\r\n  slotPerm(0, initialStats)\r\n}\r\n\r\nfunction accumulate(slotKey: SlotKey, art: ICachedArtifact, setCount: Dict<ArtifactSetKey, SetNum>, accu: Dict<SlotKey, ICachedArtifact>, stats: ICalculatedStats, artifactSetEffects: ArtifactSetEffects) {\r\n  const setKey = art.setKey\r\n  accu[slotKey] = art\r\n  setCount[setKey] = (setCount[setKey] ?? 0) + 1 as SetNum\r\n\r\n  // Add artifact stats\r\n  if (art.mainStatKey in stats) stats[art.mainStatKey] += art.mainStatVal!\r\n  art.substats.forEach((substat) => {\r\n    if (substat?.key in stats) stats[substat.key] += substat.value\r\n  })\r\n\r\n  // Add set effects\r\n  const setEffect = artifactSetEffects[setKey]?.[setCount[setKey]!]\r\n  setEffect && mergeStats(stats, setEffect) // TODO: This may slow down the computation\r\n}\r\n\r\n/**\r\n  * Create statKey in the form of ${ele}_elemental_${type} for elemental DMG, ${ele}_${src}_${type} for talent DMG.\r\n  * @param {string} skillKey - The DMG src. Can be \"norm\",\"skill\". Use an elemental to specify a elemental hit \"physical\" -> physical_elemental_{type}. Use \"elemental\" here to specify a elemental hit of character's element/reactionMode\r\n  * @param {*} stats - The calculated stats\r\n  * @param {*} overwriteElement - Override the hit to be the character's elemental, that is not part of infusion.\r\n  */\r\nexport function getTalentStatKey(skillKey: string, stats: BasicStats, overwriteElement?: ElementKey | \"physical\") {\r\n  const { hitMode = \"\", infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return `${skillKey}_elemental_${hitMode}`//elemental DMG\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n    return `${overwriteElement || characterEle}_${skillKey}_${hitMode}`\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) return `${reactionMode}_${skillKey}_${hitMode}`\r\n\r\n  return `${eleKey}_${skillKey}_${hitMode}`\r\n}\r\n\r\nexport function getTalentStatKeyVariant(skillKey: string, stats: BasicStats, overwriteElement: ElementKey | \"physical\" | undefined | \"\" = \"\") {\r\n  if ((Object.keys(ElementalData) as any).includes(skillKey)) return skillKey//elemental DMG\r\n  const { infusionAura = \"\", infusionSelf = \"\", reactionMode = null, characterEle = \"anemo\", weaponType = \"sword\" } = stats\r\n  if (!overwriteElement && weaponType === \"catalyst\") overwriteElement = characterEle\r\n\r\n  if (skillKey === \"elemental\" || skillKey === \"burst\" || skillKey === \"skill\" || overwriteElement) {\r\n    if (reactionMode && reactionMode.startsWith(overwriteElement || characterEle)) {\r\n      if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n      else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n    }\r\n    return overwriteElement || characterEle\r\n  }\r\n  //auto attacks\r\n  let eleKey = \"physical\"\r\n  if (infusionSelf) eleKey = infusionSelf\r\n  else if (infusionAura) eleKey = infusionAura\r\n  if (reactionMode && reactionMode.startsWith(eleKey)) {\r\n    if ([\"pyro_vaporize\", \"hydro_vaporize\"].includes(reactionMode)) return \"vaporize\"\r\n    else if ([\"pyro_melt\", \"cryo_melt\"].includes(reactionMode)) return \"melt\"\r\n  }\r\n  return eleKey\r\n}\r\n\r\nexport type PrunedArtifactSetEffects = Dict<ArtifactSetKey | \"other\", Dict<SetNum, Dict<StatKey, number>>>\r\n","import { faBriefcase } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { CharacterKey, WeaponTypeKey } from \"../Types/consts\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\nimport { CharacterSelectionDropdownList } from \"../Character/CharacterSelection\";\r\n\r\nexport default function EquipmentDropdown({ location, onEquip, weaponTypeKey, disableUnequip = false, editable = false }: { location: CharacterKey | \"\", onEquip: (charKey: CharacterKey) => void, weaponTypeKey?: WeaponTypeKey, disableUnequip?: boolean, editable?: boolean }) {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const characterSheet = usePromise(CharacterSheet.get(location), [location])\r\n  const locationName = characterSheet?.name ? characterSheet.nameWIthIcon : <span><FontAwesomeIcon icon={faBriefcase} /> {t`filterLocation.inventory`}</span>\r\n\r\n  return editable ? <Dropdown>\r\n    <Dropdown.Toggle className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {!disableUnequip && <><Dropdown.Item onClick={() => { /* TODO */ }}><FontAwesomeIcon icon={faBriefcase} /> Inventory</Dropdown.Item>\r\n        <Dropdown.Divider /></>}\r\n      <CharacterSelectionDropdownList onSelect={onEquip} weaponTypeKey={weaponTypeKey} />\r\n    </Dropdown.Menu>\r\n  </Dropdown> : locationName\r\n}","import { Badge } from \"react-bootstrap\"\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\"\r\nimport { initialBuildSettings } from \"../Build/BuildSetting\"\r\nimport { ICachedCharacter } from \"../Types/character\"\r\nimport { allSlotKeys, ArtifactSetKey, CharacterKey, ElementKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport CharacterSheet from \"./CharacterSheet\"\r\n\r\nexport function getFormulaTargetsDisplayHeading(key: string, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }, eleKey: ElementKey = \"anemo\") {\r\n  if (key === \"basicKeys\") return \"Basic Stats\"\r\n  else if (key === \"genericAvgHit\") return \"Generic Optimization Values\"\r\n  else if (key === \"transReactions\") return \"Transformation Reaction\"\r\n  else if (key.startsWith(\"talentKey_\")) {\r\n    const subkey = key.split(\"talentKey_\")[1]\r\n    return (characterSheet?.getTalentOfKey(subkey, eleKey)?.name ?? subkey)\r\n  } else if (key.startsWith(\"weapon_\")) {\r\n    const subkey = key.split(\"weapon_\")[1]\r\n    return (weaponSheet?.name ?? subkey)\r\n  } else if (key.startsWith(\"artifact_\")) {\r\n    const [, setKey, num] = key.split('_')\r\n    return <span>{artifactSheets[setKey]?.name} <Badge variant=\"success\">{num}-Set</Badge></span>\r\n  }\r\n  return \"\"\r\n}\r\n\r\nexport function initialCharacter(key: CharacterKey): ICachedCharacter {\r\n  return {\r\n    key, // the game character this is based off\r\n    level: 1,\r\n    ascension: 0,\r\n    hitMode: \"avgHit\",\r\n    reactionMode: null,\r\n    equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as any,\r\n    equippedWeapon: \"\",\r\n    conditionalValues: {},\r\n    baseStatOverrides: {}, // overriding the baseStat\r\n    buildSettings: initialBuildSettings(),\r\n    talent: {\r\n      auto: 1,\r\n      skill: 1,\r\n      burst: 1,\r\n    },\r\n    infusionAura: \"\",\r\n    constellation: 0,\r\n  }\r\n}","import { faEdit, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport { Button, Card, Col, Image, Row } from \"react-bootstrap\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport EquipmentDropdown from \"../Components/EquipmentDropdown\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport StatIcon from \"../Components/StatIcon\"\r\nimport { DatabaseContext } from \"../Database/Database\"\r\nimport Stat from \"../Stat\"\r\nimport { CharacterKey } from \"../Types/consts\"\r\nimport { ICachedWeapon } from \"../Types/weapon\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\n\r\ntype CharacterCardProps = { weaponId: string, onEdit?: (weaponId: string) => void, onClick?: (weaponId: string) => void, onDelete?: (weaponId: string) => void, cardClassName: string, bg?: string, footer?: boolean, editable?: boolean }\r\nexport default function WeaponCard({ weaponId, onEdit, onDelete, onClick, cardClassName = \"\", bg = \"\", footer = false, editable = false }: CharacterCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseWeapon, updateDatabaseWeapon] = useState(undefined as ICachedWeapon | undefined)\r\n  useEffect(() =>\r\n    weaponId ? database.followWeapon(weaponId, updateDatabaseWeapon) : undefined,\r\n    [weaponId, updateDatabaseWeapon, database])\r\n\r\n  const weapon = databaseWeapon\r\n  const weaponSheet = usePromise(weapon?.key && WeaponSheet.get(weapon.key), [weapon?.key])\r\n\r\n  if (!weapon || !weaponSheet) return null;\r\n  const { level, ascension, refine, id } = weapon\r\n  const equipOnChar = (charKey: CharacterKey) => database.setWeaponLocation(weaponId, charKey)\r\n\r\n  const weaponTypeKey = weaponSheet.weaponType\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponLevelName = WeaponSheet.getLevelString(weapon)\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statMap = [[\"weaponATK\", weaponMainVal]]\r\n  weaponPassiveName && statMap.push([weaponSubKey, weaponSubVal])\r\n\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text={\"lightfont\" as any}>\r\n    <Card.Header>\r\n      <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /> <h5 className=\"d-inline\">{weaponSheet.name}</h5>\r\n    </Card.Header>\r\n    <Card.Body onClick={() => onClick?.(weaponId)} className={onClick ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={weaponSheet.img} className={`thumb-big grad-${weaponSheet.rarity}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">Level {weaponLevelName} </h5>\r\n          <h5 >Refinement {refine}</h5>\r\n          <h6 className=\"mb-0\"><Stars stars={weaponSheet.rarity} colored /></h6>\r\n          {/* <h3 className=\"mb-0\"></h3> */}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statMap.map(([statKey, statVal]) => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIcon[statKey]} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n      {process.env.NODE_ENV === \"development\" && <span className=\"text-warning\">{id || `\"\"`} </span>}\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Row>\r\n        <Col >\r\n          <EquipmentDropdown location={weapon?.location} onEquip={equipOnChar} weaponTypeKey={weaponTypeKey} disableUnequip={!!weapon.location} editable={editable} />\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => onEdit(weaponId)}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              disabled={!!weapon.location}\r\n              onClick={() => onDelete(weaponId)}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useReducer, useState } from \"react\"\r\nimport { Button, ButtonGroup, Card, Col, Image, Modal, Row } from \"react-bootstrap\"\r\nimport Assets from \"../Assets/Assets\"\r\nimport { Stars } from \"../Components/StarDisplay\"\r\nimport { allWeaponKeys, allWeaponTypeKeys, WeaponKey } from \"../Types/consts\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"./WeaponSheet\"\r\ntype WeaponSelectionModalProps = {\r\n  show: boolean,\r\n  onHide: () => void,\r\n  onSelect: (wKey: WeaponKey) => void,\r\n  filter?: (sheet: WeaponSheet) => boolean\r\n}\r\n\r\nfunction filterReducer(oldFilter, newFilter) {\r\n  if (newFilter === oldFilter)\r\n    return \"\"\r\n  return newFilter\r\n}\r\n\r\nexport function WeaponSelectionModal({ show, onHide, onSelect, filter = () => true }: WeaponSelectionModalProps) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const [weaponFilter, weaponFilterDispatch] = useReducer(filterReducer, \"\")\r\n\r\n  const weaponIdList = !weaponSheets ? [] : [...new Set(allWeaponKeys)].filter(wKey => filter(weaponSheets[wKey]))\r\n    .filter(wKey => {\r\n      if (weaponFilter && weaponFilter !== weaponSheets?.[wKey]?.weaponType) return false\r\n      return true\r\n    })\r\n    .sort((a, b) => (weaponSheets?.[b]?.rarity ?? 0) - (weaponSheets?.[a]?.rarity ?? 0))\r\n\r\n  if (!weaponSheets) return null\r\n  return <Modal show={show} size=\"xl\" contentClassName=\"bg-transparent\" onHide={onHide}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <ButtonGroup >\r\n              {allWeaponTypeKeys.map(weaponType =>\r\n                <Button key={weaponType} variant={(!weaponFilter || weaponFilter === weaponType) ? \"success\" : \"secondary\"} className=\"py-1 px-2\" onClick={() => weaponFilterDispatch(weaponType)}>\r\n                  <h3 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponType]} className=\"inline-icon\" /></h3></Button>)}\r\n            </ButtonGroup>\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            <Button onClick={onHide} variant=\"danger\"><FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {weaponIdList.map(weaponKey => {\r\n            const weaponSheet = weaponSheets[weaponKey]\r\n            return <Col key={weaponKey} lg={3} md={4} className=\"mb-2\">\r\n              <Button className=\"w-100 h-100 align-top\" variant=\"darkcontent\" onClick={() => { onHide(); onSelect(weaponKey) }}>\r\n                <Row className=\"h-100\">\r\n                  <Col xs=\"auto\" className=\"pr-0\">\r\n                    <Image src={weaponSheet.img} className={`thumb-big grad-${weaponSheet.rarity}star p-0`} thumbnail />\r\n                  </Col>\r\n                  <Col>\r\n                    <h5 className=\"mb-0\"><Image src={Assets.weaponTypes?.[weaponSheet.weaponType]} className=\"inline-icon\" /> {weaponSheet.name}</h5>\r\n                    <h6 className=\"mb-0\"><Stars stars={weaponSheet.rarity} colored /></h6>\r\n                  </Col>\r\n                </Row>\r\n              </Button>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nexport function WeaponSelectionButton({ weaponSheet, onSelect, filter }: { weaponSheet?: WeaponSheet, onSelect: (wKey: WeaponKey) => void, filter?: (sheet: WeaponSheet) => boolean }) {\r\n  const [show, setshow] = useState(false)\r\n  return <>\r\n    <Button as={ButtonGroup} onClick={() => setshow(true)} className=\"text-nowrap\">{weaponSheet?.name ?? \"Select a Weapon\"}</Button>\r\n    <WeaponSelectionModal show={show} onHide={() => setshow(false)} onSelect={onSelect} filter={filter} />\r\n  </>\r\n}","import { faQuestionCircle, faTimes } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { Suspense, useState } from \"react\"\r\nimport { Button, Card, Col, Modal, Row, Spinner } from \"react-bootstrap\"\r\nimport { dbStorage } from \"../Database/DBStorage\"\r\nimport { getRandomElementFromArray } from \"../Util/Util\"\r\nimport { TransWrapper } from \"./Translate\"\r\n\r\nexport default function InfoComponent({ pageKey = \"\", text = \"\", modalTitle = \"\", children }: { pageKey: string, text: Displayable | Displayable[], modalTitle: Displayable, children: JSX.Element }) {\r\n  const [showInfoModal, setshowInfoModal] = useState(dbStorage.get(\"infoShown\")?.[pageKey] ?? true)\r\n  const [displayText,] = useState(Array.isArray(text) ? getRandomElementFromArray(text) : text)\r\n  const closeModal = () => {\r\n    const infoShown = dbStorage.get(\"infoShown\") ?? {}\r\n    infoShown[pageKey] = false\r\n    dbStorage.set(\"infoShown\", infoShown)\r\n    setshowInfoModal(false)\r\n  }\r\n  return <>\r\n    <Modal show={showInfoModal} onHide={() => closeModal()} size=\"xl\" variant=\"success\" contentClassName=\"bg-transparent\">\r\n      <Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <Card.Title>{modalTitle}</Card.Title>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <Button variant=\"danger\" onClick={() => closeModal()} >\r\n                <FontAwesomeIcon icon={faTimes} /></Button>\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Suspense fallback={<h3 className=\"text-center\">Loading... <Spinner animation=\"border\" variant=\"primary\" /></h3>}>\r\n            {children}\r\n          </Suspense>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <Button variant=\"danger\" onClick={() => closeModal()}>\r\n            <span>Close</span>\r\n          </Button>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Modal >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Body className=\"pl-2 py-0 pr-0\">\r\n        <Row>\r\n          <Col><small>{displayText}</small></Col>\r\n          <Col xs=\"auto\">\r\n            <Button size=\"sm\" variant=\"info\" className=\"m-0 py-1\" onClick={() => setshowInfoModal(true)}><TransWrapper ns=\"ui\" key18=\"info\" /> <FontAwesomeIcon icon={faQuestionCircle} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n    </Card>\r\n  </>\r\n}","import { faCalculator, faEdit, faLink, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useContext, useEffect, useMemo, useState } from 'react';\r\nimport { Badge, Image } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { Link } from 'react-router-dom';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport Assets from '../Assets/Assets';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { ICachedCharacter } from '../Types/character';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { ICachedWeapon } from '../Types/weapon';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterSheet from './CharacterSheet';\r\ntype CharacterCardProps = { characterKey: CharacterKey | \"\", onEdit?: (any) => void, onDelete?: (any) => void, cardClassName: string, header?: JSX.Element, bg?: string, footer?: boolean }\r\nexport default function CharacterCard({ characterKey, onEdit, onDelete, cardClassName = \"\", bg = \"\", header, footer = false }: CharacterCardProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const [databaseCharacter, updateDatabaseCharacter] = useState(undefined as ICachedCharacter | undefined)\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, updateDatabaseCharacter) : undefined,\r\n    [characterKey, updateDatabaseCharacter, database])\r\n\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  const character = databaseCharacter\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weapon = character?.equippedWeapon ? database._getWeapon(character.equippedWeapon) : undefined\r\n  const weaponSheet = usePromise(weapon ? WeaponSheet.get(weapon.key) : undefined, [weapon?.key])\r\n  const stats = useMemo(() => character && characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, database, characterSheet, weaponSheet, artifactSheets), [character, characterSheet, weaponSheet, artifactSheets, database])\r\n  if (!character || !weapon || !characterSheet || !weaponSheet || !stats) return null;\r\n\r\n  const { constellation } = character\r\n  const { level, ascension } = weapon\r\n  const { tlvl } = stats\r\n  const name = characterSheet.name\r\n  const elementKey = stats.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponName = weaponSheet?.name\r\n  const weaponMainVal = weaponSheet.getMainStatValue(level, ascension).toFixed(Stat.fixedUnit(\"atk\"))\r\n  const weaponSubKey = weaponSheet.getSubStatKey()\r\n  const weaponSubVal = weaponSheet.getSubStatValue(level, ascension).toFixed(Stat.fixedUnit(weaponSubKey))\r\n  const weaponLevelName = WeaponSheet.getLevelString(weapon as ICachedWeapon)\r\n  const weaponPassiveName = weaponSheet?.passiveName\r\n  const statkeys = [\"finalHP\", \"finalATK\", \"finalDEF\", \"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\",]\r\n\r\n  return (<Card className={cardClassName} bg={bg ? bg : \"darkcontent\"} text={\"lightfont\" as any}>\r\n    <Card.Header className=\"pr-2\">\r\n      <Row className=\"no-gutters\">\r\n        <Col >\r\n          {header ? header : <h5><b>{name}</b></h5>}\r\n        </Col>\r\n        <Col xs={\"auto\"}>\r\n          <span className=\"float-right align-top ml-1\">\r\n            {onEdit && <Button variant=\"primary\" size=\"sm\" className=\"mr-1\"\r\n              onClick={() => onEdit(characterKey)}>\r\n              <FontAwesomeIcon icon={faEdit} />\r\n            </Button>}\r\n            {onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={() => onDelete(characterKey)}>\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </Button>}\r\n          </span>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body onClick={() => onEdit?.(characterKey)} className={onEdit ? \"cursor-pointer\" : \"\"} >\r\n      <Row>\r\n        <Col xs=\"auto\" className=\"pr-0\">\r\n          <Image src={characterSheet.thumbImg} className={`thumb-big grad-${characterSheet.star}star p-0`} thumbnail />\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">Lv. {Character.getLevelString(character)} {`C${constellation}`}</h5>\r\n          <h6 className=\"mb-0\">\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.auto + 1}</strong></Badge>{` `}\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.skill + 1}</strong></Badge>{` `}\r\n            <Badge variant=\"secondary\"><strong className=\"mx-1\">{tlvl.burst + 1}</strong></Badge>\r\n          </h6>\r\n          <h6 className=\"mb-0\"><Stars stars={characterSheet.star} colored /></h6>\r\n          <h3 className=\"mb-0\">{StatIcon[elementKey]} <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"mb-2\">\r\n        <Col>\r\n          <h6 className=\"mb-0\">{weaponName}{weaponPassiveName && <Badge variant=\"info\" className=\"ml-1\">{weapon.refine}</Badge>} {weaponLevelName}</h6>\r\n          <span>ATK: {weaponMainVal}  {weaponPassiveName && <span>{Stat.getStatName(weaponSubKey)}: {weaponSubVal}{Stat.getStatUnit(weaponSubKey)}</span>}</span>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([key, arr]) => {\r\n            let artifactSetName = artifactSheets?.[key].name ?? \"\"\r\n            let highestNum = Math.max(...arr)\r\n            return <h5 key={key}><Badge variant=\"secondary\">{artifactSetName} <Badge variant=\"success\">{highestNum}</Badge></Badge></h5>\r\n          })}\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        {statkeys.map(statKey => {\r\n          let unit = Stat.getStatUnit(statKey)\r\n          let statVal = stats[statKey]\r\n          return <Col xs={12} key={statKey}>\r\n            <h6 className=\"d-inline\">{StatIcon[statKey]} {Stat.getStatName(statKey)}</h6>\r\n            <span className={`float-right`}>\r\n              {statVal?.toFixed(Stat.fixedUnit(statKey)) + unit}\r\n            </span>\r\n          </Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n    {footer && <Card.Footer>\r\n      <Row>\r\n        <Col><Button as={Link} to={{\r\n          pathname: \"/build\",\r\n          characterKey\r\n        } as any}><FontAwesomeIcon icon={faCalculator} /> Generate Builds</Button>\r\n        </Col>\r\n        <Col>\r\n          <Button variant=\"info\" as={Link} to={{ pathname: \"/flex\", characterKey } as any}><FontAwesomeIcon icon={faLink} /> Share Character</Button>\r\n        </Col>\r\n      </Row>\r\n\r\n    </Card.Footer>}\r\n  </Card>)\r\n}","import { strPadLeft } from \"./Util\"\r\n\r\nexport function msToUnits(ms: number) {\r\n  let milliseconds = ms % 1000\r\n  let seconds = Math.floor((ms / 1000) % 60)\r\n  let minutes = Math.floor((ms / (1000 * 60)) % 60)\r\n  let hours = Math.floor((ms / (1000 * 60 * 60)))\r\n  return { hours, minutes, seconds, milliseconds }\r\n}\r\nexport function timeString(ms: number) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)} ${timeText}`;\r\n}\r\nexport function timeStringMs(ms: number) {\r\n  //shows only in terms of hours/minutes. there are better calculations for days using Date functions.\r\n  let { hours, minutes, seconds, milliseconds } = msToUnits(ms)\r\n  let timeText = \"Minutes\"\r\n  if (hours) timeText = \"Hours\"\r\n  return `${hours ? `${hours}:` : \"\"}${strPadLeft(minutes, '0', 2)}:${strPadLeft(seconds, '0', 2)}.${strPadLeft(milliseconds, '0', 3)} ${timeText}`;\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"className\", \"style\", \"variant\", \"bsPrefix\"],\n    _excluded2 = [\"isChild\"],\n    _excluded3 = [\"min\", \"now\", \"max\", \"label\", \"srOnly\", \"striped\", \"animated\", \"bsPrefix\", \"variant\", \"className\", \"children\"];\nimport classNames from 'classnames';\nimport React, { cloneElement } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { map } from './ElementChildren';\nvar ROUND_PRECISION = 1000;\n/**\n * Validate that children, if any, are instances of `<ProgressBar>`.\n */\n\nfunction onlyProgressBar(props, propName, componentName) {\n  var children = props[propName];\n\n  if (!children) {\n    return null;\n  }\n\n  var error = null;\n  React.Children.forEach(children, function (child) {\n    if (error) {\n      return;\n    }\n    /**\n     * Compare types in a way that works with libraries that patch and proxy\n     * components like react-hot-loader.\n     *\n     * see https://github.com/gaearon/react-hot-loader#checking-element-types\n     */\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n\n    var element = /*#__PURE__*/React.createElement(ProgressBar, null);\n    if (child.type === element.type) return;\n    var childType = child.type;\n    var childIdentifier = /*#__PURE__*/React.isValidElement(child) ? childType.displayName || childType.name || childType : child;\n    error = new Error(\"Children of \" + componentName + \" can contain only ProgressBar \" + (\"components. Found \" + childIdentifier + \".\"));\n  });\n  return error;\n}\n\nvar defaultProps = {\n  min: 0,\n  max: 100,\n  animated: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\n\nfunction getPercentage(now, min, max) {\n  var percentage = (now - min) / (max - min) * 100;\n  return Math.round(percentage * ROUND_PRECISION) / ROUND_PRECISION;\n}\n\nfunction renderProgressBar(_ref, ref) {\n  var _classNames;\n\n  var min = _ref.min,\n      now = _ref.now,\n      max = _ref.max,\n      label = _ref.label,\n      srOnly = _ref.srOnly,\n      striped = _ref.striped,\n      animated = _ref.animated,\n      className = _ref.className,\n      style = _ref.style,\n      variant = _ref.variant,\n      bsPrefix = _ref.bsPrefix,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, props, {\n    role: \"progressbar\",\n    className: classNames(className, bsPrefix + \"-bar\", (_classNames = {}, _classNames[\"bg-\" + variant] = variant, _classNames[bsPrefix + \"-bar-animated\"] = animated, _classNames[bsPrefix + \"-bar-striped\"] = animated || striped, _classNames)),\n    style: _extends({\n      width: getPercentage(now, min, max) + \"%\"\n    }, style),\n    \"aria-valuenow\": now,\n    \"aria-valuemin\": min,\n    \"aria-valuemax\": max\n  }), srOnly ? /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, label) : label);\n}\n\nvar ProgressBar = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var isChild = _ref2.isChild,\n      props = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  props.bsPrefix = useBootstrapPrefix(props.bsPrefix, 'progress');\n\n  if (isChild) {\n    return renderProgressBar(props, ref);\n  }\n\n  var min = props.min,\n      now = props.now,\n      max = props.max,\n      label = props.label,\n      srOnly = props.srOnly,\n      striped = props.striped,\n      animated = props.animated,\n      bsPrefix = props.bsPrefix,\n      variant = props.variant,\n      className = props.className,\n      children = props.children,\n      wrapperProps = _objectWithoutPropertiesLoose(props, _excluded3);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref\n  }, wrapperProps, {\n    className: classNames(className, bsPrefix)\n  }), children ? map(children, function (child) {\n    return /*#__PURE__*/cloneElement(child, {\n      isChild: true\n    });\n  }) : renderProgressBar({\n    min: min,\n    now: now,\n    max: max,\n    label: label,\n    srOnly: srOnly,\n    striped: striped,\n    animated: animated,\n    bsPrefix: bsPrefix,\n    variant: variant\n  }, ref));\n});\nProgressBar.displayName = 'ProgressBar';\nProgressBar.defaultProps = defaultProps;\nexport default ProgressBar;","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/BuildWorker.43d32779.worker.js\");\n}\n","import { faCheckSquare, faSortAmountDownAlt, faSortAmountUp, faSquare, faTimes, faTrash, faUndo } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { lazy, useCallback, useContext, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Alert, Badge, Button, ButtonGroup, Card, Col, Container, Dropdown, DropdownButton, Image, InputGroup, ListGroup, Modal, OverlayTrigger, ProgressBar, Row, Tooltip } from 'react-bootstrap';\r\nimport ReactGA from 'react-ga';\r\n// eslint-disable-next-line\r\nimport Worker from \"worker-loader!./BuildWorker\";\r\nimport Artifact from '../Artifact/Artifact';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../Artifact/Component/SetEffectDisplay';\r\nimport SlotNameWithIcon, { artifactSlotIcon } from '../Artifact/Component/SlotNameWIthIcon';\r\nimport Character from '../Character/Character';\r\nimport CharacterCard from '../Character/CharacterCard';\r\nimport { HitModeToggle, InfusionAuraDropdown, ReactionToggle } from '../Character/CharacterDisplay/DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from '../Character/CharacterDisplay/StatDisplayComponent';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { getFormulaTargetsDisplayHeading } from '../Character/CharacterUtil';\r\nimport { CharacterSelectionDropdownList } from '../Character/CharacterSelection';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport InfoComponent from '../Components/InfoComponent';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport StatIcon from '../Components/StatIcon';\r\nimport { DatabaseContext } from '../Database/Database';\r\nimport { dbStorage } from '../Database/DBStorage';\r\nimport Formula from '../Formula';\r\nimport Stat from '../Stat';\r\nimport { StatKey } from '../Types/artifact';\r\nimport { ArtifactsBySlot, Build, BuildSetting } from '../Types/Build';\r\nimport { ICachedCharacter } from '../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey, CharacterKey, SetNum, SlotKey } from '../Types/consts';\r\nimport { IFieldDisplay } from '../Types/IFieldDisplay';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { timeStringMs } from '../Util/TimeUtil';\r\nimport { crawlObject, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport { calculateTotalBuildNumber } from './Build';\r\nimport { initialBuildSettings } from './BuildSetting';\r\nconst InfoDisplay = React.lazy(() => import('./InfoDisplay'));\r\n\r\n//lazy load the character display\r\nconst CharacterDisplayCard = lazy(() => import('../Character/CharacterDisplayCard'))\r\n\r\nconst warningBuildNumber = 10000000\r\nconst maxBuildsToShowList = [1, 2, 3, 4, 5, 8, 10]\r\nconst maxBuildsToShowDefault = 5\r\nconst autoBuildGenLimit = 100\r\nconst artifactsSlotsToSelectMainStats = [\"sands\", \"goblet\", \"circlet\"] as const\r\n\r\nfunction buildSettingsReducer(state: BuildSetting, action): BuildSetting {\r\n  switch (action.type) {\r\n    case 'mainStatKey': {\r\n      const { slotKey, mainStatKey } = action\r\n      const mainStatKeys = { ...state.mainStatKeys }//create a new object to update react dependencies\r\n\r\n      if (state.mainStatKeys[slotKey].includes(mainStatKey))\r\n        mainStatKeys[slotKey] = mainStatKeys[slotKey].filter(k => k !== mainStatKey)\r\n      else\r\n        mainStatKeys[slotKey].push(mainStatKey)\r\n      return { ...state, mainStatKeys }\r\n    }\r\n    case `setFilter`: {\r\n      const { index, key, num = 0 } = action\r\n      state.setFilters[index] = { key, num }\r\n      return { ...state, setFilters: [...state.setFilters] }//do this because this is a dependency, so needs to be a \"new\" array\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\n\r\nexport default function BuildDisplay({ location: { characterKey: propCharacterKey } }) {\r\n  const database = useContext(DatabaseContext)\r\n  const [characterKey, setcharacterKey] = useState(() => {\r\n    const { characterKey = \"\" } = dbStorage.get(\"BuildsDisplay.state\") ?? {}\r\n    //NOTE that propCharacterKey can override the selected character.\r\n    return (propCharacterKey ?? characterKey) as CharacterKey | \"\"\r\n  })\r\n\r\n  const [builds, setbuilds] = useState([] as any[])\r\n  const [maxBuildsToShow, setmaxBuildsToShow] = useState(() => {\r\n    const { maxBuildsToShow = maxBuildsToShowDefault } = dbStorage.get(\"BuildsDisplay.state\") ?? {}\r\n    return maxBuildsToShow\r\n  })\r\n\r\n  const [modalBuild, setmodalBuild] = useState(null) // the newBuild that is being displayed in the character modal\r\n  const [showArtCondModal, setshowArtCondModal] = useState(false)\r\n  const [showCharacterModal, setshowCharacterModal] = useState(false)\r\n\r\n  const [generatingBuilds, setgeneratingBuilds] = useState(false)\r\n  const [generationProgress, setgenerationProgress] = useState(0)\r\n  const [generationDuration, setgenerationDuration] = useState(0)//in ms\r\n  const [generationSkipped, setgenerationSkipped] = useState(0)\r\n\r\n  const [charDirty, setCharDirty] = useForceUpdate()\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  const [artsDirty, setArtsDirty] = useForceUpdate()\r\n\r\n  const isMounted = useRef(false)\r\n\r\n  const worker = useRef(null as Worker | null)\r\n\r\n  type characterDataType = { character?: ICachedCharacter, characterSheet?: CharacterSheet, weaponSheet?: WeaponSheet, initialStats?: ICalculatedStats, statsDisplayKeys?: { basicKeys: any, [key: string]: any } }\r\n  const [{ character, characterSheet, weaponSheet, initialStats, statsDisplayKeys }, setCharacterData] = useState({} as characterDataType)\r\n  const buildSettings = useMemo(() => character?.buildSettings ?? initialBuildSettings(), [character])\r\n  if (buildSettings.setFilters.length === 0) buildSettings.setFilters = initialBuildSettings().setFilters//hotfix for an issue with db. can be removed later.\r\n  const { setFilters, statFilters, mainStatKeys, optimizationTarget, mainStatAssumptionLevel, useExcludedArts, useEquippedArts, ascending, } = buildSettings\r\n\r\n  const buildSettingsDispatch = useCallback((action) => {\r\n    if (!character) return\r\n    character.buildSettings = buildSettingsReducer(buildSettings, action)\r\n    database.updateChar(character)\r\n  }, [character, buildSettings, database])\r\n\r\n  useEffect(() => ReactGA.pageview('/build'), [])\r\n\r\n  //select a new character Key\r\n  const selectCharacter = useCallback((cKey = \"\") => {\r\n    if (characterKey === cKey) return\r\n    setcharacterKey(cKey)\r\n    setbuilds([])\r\n    setCharDirty()\r\n    setCharacterData({})\r\n  }, [setCharDirty, setcharacterKey, characterKey])\r\n\r\n  //load the character data as a whole\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!characterKey || !artifactSheets) return\r\n      const character = database._getChar(characterKey)\r\n      if (!character) return selectCharacter(\"\")// character is prob deleted.\r\n      const characterSheet = await CharacterSheet.get(characterKey)\r\n      const weapon = database._getWeapon(character.equippedWeapon)\r\n      if (!weapon) return\r\n      const weaponSheet = await WeaponSheet.get(weapon.key)\r\n      if (!characterSheet || !weaponSheet) return\r\n      const initialStats = Character.createInitialStats(character, database, characterSheet, weaponSheet)\r\n      //NOTE: since initialStats are used, there are no inclusion of artifact formulas here.\r\n      const statsDisplayKeys = Character.getDisplayStatKeys(initialStats, { characterSheet, weaponSheet, artifactSheets })\r\n      setCharacterData({ character, characterSheet, weaponSheet, initialStats, statsDisplayKeys })\r\n    })()\r\n  }, [charDirty, characterKey, artifactSheets, database, selectCharacter])\r\n\r\n  //register changes in artifact database\r\n  useEffect(() =>\r\n    database.followAnyArt(setArtsDirty),\r\n    [setArtsDirty, database])\r\n\r\n  //register changes in character in db\r\n  useEffect(() =>\r\n    characterKey ? database.followChar(characterKey, setCharDirty) : undefined,\r\n    [characterKey, setCharDirty, database])\r\n\r\n  //terminate worker when component unmounts\r\n  useEffect(() => () => worker.current?.terminate(), [])\r\n\r\n  //save to BuildsDisplay.state on change\r\n  useEffect(() => {\r\n    if (isMounted.current) dbStorage.set(\"BuildsDisplay.state\", { characterKey, maxBuildsToShow })\r\n    else isMounted.current = true\r\n  }, [characterKey, maxBuildsToShow])\r\n\r\n  //validate optimizationTarget \r\n  useEffect(() => {\r\n    if (!statsDisplayKeys) return\r\n    if (!Array.isArray(optimizationTarget)) return\r\n    for (const sectionKey in statsDisplayKeys) {\r\n      const section = statsDisplayKeys[sectionKey]\r\n      for (const keys of section)\r\n        if (JSON.stringify(keys) === JSON.stringify(optimizationTarget)) return\r\n    }\r\n    buildSettingsDispatch({ optimizationTarget: initialBuildSettings().optimizationTarget })\r\n  }, [optimizationTarget, statsDisplayKeys, buildSettingsDispatch])\r\n\r\n  const { split, totBuildNumber } = useMemo(() => {\r\n    if (!characterKey) // Make sure we have all slotKeys\r\n      return { split: Object.fromEntries(allSlotKeys.map(slotKey => [slotKey, []])) as ArtifactsBySlot, totBuildNumber: 0 }\r\n    const artifactDatabase = database._getArts().filter(art => {\r\n      //if its equipped on the selected character, bypass the check\r\n      if (art.location === characterKey) return true\r\n\r\n      if (art.exclude && !useExcludedArts) return false\r\n      if (art.location && !useEquippedArts) return false\r\n      return true\r\n    })\r\n    const split = Artifact.splitArtifactsBySlot(artifactDatabase);\r\n    //filter the split slots on the mainstats selected.\r\n    artifactsSlotsToSelectMainStats.forEach(slotKey =>\r\n      mainStatKeys[slotKey].length && (split[slotKey] = split[slotKey]?.filter((art) => mainStatKeys[slotKey].includes(art.mainStatKey))))\r\n    const totBuildNumber = calculateTotalBuildNumber(split, setFilters)\r\n    return artsDirty && { split, totBuildNumber }\r\n  }, [characterKey, useExcludedArts, useEquippedArts, mainStatKeys, setFilters, artsDirty, database])\r\n\r\n  const generateBuilds = useCallback(() => {\r\n    if (!initialStats || !artifactSheets) return\r\n    setbuilds([])\r\n    setgeneratingBuilds(true)\r\n    setgenerationDuration(0)\r\n    setgenerationProgress(0)\r\n    setgenerationSkipped(0)\r\n    //get the formula for this target\r\n\r\n    initialStats.mainStatAssumptionLevel = mainStatAssumptionLevel\r\n    const artifactSetEffects = Artifact.setEffectsObjs(artifactSheets, initialStats)\r\n    const splitArtifacts = deepClone(split) as ArtifactsBySlot\r\n    //add mainStatVal to each artifact\r\n    Object.values(splitArtifacts).forEach(artArr => {\r\n      artArr!.forEach(art => {\r\n        art.mainStatVal = Artifact.mainStatValue(art.mainStatKey, art.rarity, Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level)) ?? 0;\r\n      })\r\n    })\r\n    //generate the key dependencies for the formula\r\n    const minFilters: Dict<StatKey, number> = Object.fromEntries(Object.entries(statFilters).map(([statKey, { min }]) => [statKey, min]).filter(([, min]) => typeof min === \"number\"))\r\n    const maxFilters: Dict<StatKey, number> = Object.fromEntries(Object.entries(statFilters).map(([statKey, { max }]) => [statKey, max]).filter(([, max]) => typeof max === \"number\"))\r\n    //create an obj with app the artifact set effects to pass to buildworker.\r\n    const data = {\r\n      splitArtifacts, initialStats, artifactSetEffects,\r\n      setFilters, minFilters, maxFilters, maxBuildsToShow, optimizationTarget, ascending\r\n    };\r\n    worker.current?.terminate()\r\n    worker.current = new Worker()\r\n    worker.current.onmessage = (e) => {\r\n      if (typeof e.data.progress === \"number\") {\r\n        const { progress, timing = 0, skipped = 0 } = e.data\r\n        setgenerationProgress(progress)\r\n        setgenerationDuration(timing)\r\n        setgenerationSkipped(skipped)\r\n        return\r\n      }\r\n      ReactGA.timing({\r\n        category: \"Build Generation\",\r\n        variable: \"timing\",\r\n        value: e.data.timing,\r\n        label: totBuildNumber.toString()\r\n      })\r\n      const builds = (e.data.builds as Build[]).map(obj =>\r\n        Character.calculateBuildwithArtifact(initialStats, obj.artifacts, artifactSheets))\r\n      setbuilds(builds)\r\n      setgeneratingBuilds(false)\r\n      worker.current?.terminate()\r\n      worker.current = null\r\n    };\r\n    worker.current.postMessage(data)\r\n  }, [artifactSheets, split, totBuildNumber, mainStatAssumptionLevel, ascending, initialStats, maxBuildsToShow, optimizationTarget, setFilters, statFilters])\r\n\r\n  //try to generate build when build numbers are low\r\n  useEffect(() => {\r\n    if (totBuildNumber && totBuildNumber <= autoBuildGenLimit) generateBuilds()\r\n    else setbuilds([])\r\n  }, [characterKey, split, totBuildNumber, buildSettings, generateBuilds])\r\n\r\n  const dropdownitemsForStar = useCallback((star, index) => artifactSheets && ArtifactSheet.setsWithMaxRarity(artifactSheets, star).map(([setKey, setobj]) => {\r\n    if (setFilters.some(filter => filter.key === setKey)) return false;\r\n    const setsNumArr = Object.keys(artifactSheets?.[setKey]?.setEffects ?? {})\r\n    const artsAccountedOther = setFilters.reduce((accu, cur, ind) => (cur.key && ind !== index) ? accu + cur.num : accu, 0)\r\n    if (setsNumArr.every((num: any) => parseInt(num) + artsAccountedOther > 5)) return false;\r\n    return (<Dropdown.Item key={setKey} onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: setKey, num: parseInt(setsNumArr[0] as any) ?? 0 })} >\r\n      {setobj.nameWithIcon}\r\n    </Dropdown.Item>)\r\n  }), [setFilters, buildSettingsDispatch, artifactSheets])\r\n\r\n  const characterName = characterSheet?.name ?? \"Character Name\"\r\n  const characterDropDown = useMemo(() => <DropdownButton title={characterName} disabled={generatingBuilds}>\r\n    <Dropdown.Item onClick={() => selectCharacter(\"\")}>Unselect Character</Dropdown.Item>\r\n    <Dropdown.Divider />\r\n    <CharacterSelectionDropdownList onSelect={cKey => selectCharacter(cKey)} />\r\n  </DropdownButton>, [characterName, generatingBuilds, selectCharacter])\r\n\r\n  const formula = usePromise(Array.isArray(optimizationTarget) ? Formula.get(optimizationTarget) : undefined, [optimizationTarget])\r\n  const sortByText = useMemo(() => {\r\n    if (Array.isArray(optimizationTarget)) {\r\n      if (!formula) return null\r\n      let [type, , talentKey] = (formula as any).keys as string[]\r\n      const field = (formula as any).field as IFieldDisplay\r\n      const variant = Character.getTalentFieldValue(field, \"variant\", initialStats)\r\n      const text = Character.getTalentFieldValue(field, \"text\", initialStats)\r\n      if (type === \"character\") {\r\n        if (talentKey === \"normal\" || talentKey === \"charged\" || talentKey === \"plunging\") talentKey = \"auto\"\r\n        return <b>{characterSheet?.getTalentOfKey(talentKey, initialStats?.characterEle)?.name}: <span className={`text-${variant}`}>{text}</span></b>\r\n      } else if (type === \"weapon\") {\r\n        return <b>{weaponSheet?.name}: <span className={`text-${variant}`}>{text}</span></b>\r\n      }\r\n    } else return <b>Basic Stat: <span className={`text-${Stat.getStatVariant(optimizationTarget)}`}>{Stat.getStatNameWithPercent(optimizationTarget)}</span></b>\r\n    // return <Badge variant=\"danger\">INVALID</Badge>\r\n  }, [optimizationTarget, formula, initialStats, characterSheet, weaponSheet])\r\n\r\n\r\n  const artsAccounted = setFilters.reduce((accu, cur) => cur.key ? accu + cur.num : accu, 0)\r\n  const artifactCondCount = useMemo(() => {\r\n    let count = 0;\r\n    crawlObject(initialStats?.conditionalValues?.artifact, [], v => Array.isArray(v), () => count++)\r\n    return count\r\n  }, [initialStats?.conditionalValues])\r\n  //rudimentary dispatcher, definitely not the same API as the real characterDispatch.\r\n  const characterDispatch = useCallback(val => database.updateChar({ ...character, ...val }), [character, database])\r\n  return <Container className=\"mt-2\">\r\n    <InfoComponent\r\n      pageKey=\"buildPage\"\r\n      modalTitle=\"Character Management Page Guide\"\r\n      text={[\"For self-infused attacks, like Noelle's Sweeping Time, enable the skill in the talent page.\",\r\n        \"You can compare the difference between equipped artifacts and generated builds.\",\r\n        \"The more complex the formula, the longer the generation time.\",]}\r\n    ><InfoDisplay /></InfoComponent>\r\n    <BuildModal {...{ build: modalBuild, showCharacterModal, characterKey, selectCharacter, setmodalBuild, setshowCharacterModal }} />\r\n    {!!initialStats && <ArtConditionalModal {...{ showArtCondModal, setshowArtCondModal, initialStats, characterDispatch, artifactCondCount }} />}\r\n    <Row className=\"mt-2 mb-2\">\r\n      <Col>\r\n        {/* Build Generator Editor */}\r\n        <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n          <Card.Header>Build Generator</Card.Header>\r\n          <Card.Body>\r\n            <Row >\r\n              <Col xs={12} lg={6}>\r\n                {/* character selection */}\r\n                {characterKey ?\r\n                  <CharacterCard header={characterDropDown} characterKey={characterKey} bg={\"lightcontent\"} cardClassName=\"mb-2\" onEdit={!generatingBuilds ? () => setshowCharacterModal(true) : undefined} /> :\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                    <Card.Header>\r\n                      {characterDropDown}\r\n                    </Card.Header>\r\n                  </Card>}\r\n                {/* Hit mode options */}\r\n                {characterSheet && character && initialStats && <HitModeCard build={initialStats} characterSheet={characterSheet} className=\"mb-2\" character={character} disabled={generatingBuilds} />}\r\n                {/* Final Stat Filter */}\r\n                {Boolean(statsDisplayKeys) && <StatFilterCard className=\"mb-2\" statFilters={statFilters} statKeys={statsDisplayKeys?.basicKeys as any} setStatFilters={sFs => buildSettingsDispatch({ statFilters: sFs })} disabled={generatingBuilds} />}\r\n              </Col>\r\n              <Col xs={12} lg={6}><Row>\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}><Card.Body>\r\n                    <Button className=\"w-100\" onClick={() => setshowArtCondModal(true)} disabled={generatingBuilds}>\r\n                      <span>Default Artifact Set Effects {Boolean(artifactCondCount) && <Badge variant=\"success\">{artifactCondCount} Selected</Badge>}</span>\r\n                    </Button>\r\n                  </Card.Body></Card>\r\n                </Col>\r\n                {/* Artifact set picker */}\r\n                {setFilters.map(({ key: setKey, num: setNum }, index) => <Col className=\"mb-2\" key={index} xs={12}>\r\n                  <Card className=\"h-100\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                    <Card.Header>\r\n                      <ButtonGroup>\r\n                        {/* Artifact set */}\r\n                        <DropdownButton as={ButtonGroup} title={artifactSheets?.[setKey]?.nameWithIcon ?? \"Artifact Set Filter\"} disabled={generatingBuilds}>\r\n                          <Dropdown.Item onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: \"\" })}>Unselect Artifact</Dropdown.Item>\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(5, index)}\r\n                          <Dropdown.Divider />\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(4, index)}\r\n                          <Dropdown.Divider />\r\n                          <Dropdown.ItemText>Max Rarity 🟊🟊🟊</Dropdown.ItemText>\r\n                          {dropdownitemsForStar(3, index)}\r\n                        </DropdownButton>\r\n                        {/* set number */}\r\n                        <DropdownButton as={ButtonGroup} title={`${setNum}-set`}\r\n                          disabled={generatingBuilds || !setKey || artsAccounted >= 5}\r\n                        >\r\n                          {!!initialStats && Object.keys(artifactSheets?.[setKey]?.setEffects ?? {}).map((num: any) => {\r\n                            let artsAccountedOther = setFilters.reduce((accu, cur) => (cur.key && cur.key !== setKey) ? accu + cur.num : accu, 0)\r\n                            return (parseInt(num) + artsAccountedOther <= 5) &&\r\n                              (<Dropdown.Item key={num} onClick={() => buildSettingsDispatch({ type: 'setFilter', index, key: setFilters[index].key, num: parseInt(num) })} >\r\n                                {`${num}-set`}\r\n                              </Dropdown.Item>)\r\n                          })}\r\n                        </DropdownButton>\r\n                      </ButtonGroup>\r\n                    </Card.Header>\r\n                    {setKey ? <Card.Body><Row className=\"mb-n2\">\r\n                      {!!initialStats && Object.keys(artifactSheets?.[setKey].setEffects ?? {}).map(setNKey => parseInt(setNKey) as SetNum).filter(setNkey => setNkey <= setNum).map(setNumKey =>\r\n                        <SetEffectDisplay newBuild={undefined} key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild: initialStats, characterDispatch, editable: true }} />)}\r\n                    </Row></Card.Body> : null}\r\n                  </Card>\r\n                </Col>)}\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}><Card.Body className=\"mb-n2\">\r\n                    <Button className=\"w-100 mb-2\" onClick={() => buildSettingsDispatch({ useEquippedArts: !useEquippedArts })} disabled={generatingBuilds}>\r\n                      <span><FontAwesomeIcon icon={useEquippedArts ? faCheckSquare : faSquare} /> Use Equipped Artifacts</span>\r\n                    </Button>\r\n                    <Button className=\"w-100 mb-2\" onClick={() => buildSettingsDispatch({ useExcludedArts: !useExcludedArts })} disabled={generatingBuilds}>\r\n                      <span><FontAwesomeIcon icon={useExcludedArts ? faCheckSquare : faSquare} /> Use Excluded Artifacts</span>\r\n                    </Button>\r\n                  </Card.Body></Card>\r\n                </Col>\r\n                {/* main stat selector */}\r\n                <Col className=\"mb-2\" xs={12}>\r\n                  <Card bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                    <Card.Header>\r\n                      <Row>\r\n                        <Col>Artifact Main Stat</Col>\r\n                        <Col xs=\"auto\"><AssumeFullLevelToggle mainStatAssumptionLevel={mainStatAssumptionLevel} setmainStatAssumptionLevel={v => buildSettingsDispatch({ mainStatAssumptionLevel: v })} disabled={generatingBuilds} /></Col>\r\n                      </Row>\r\n                    </Card.Header>\r\n                    <Card.Body className=\"mb-n2\">\r\n                      {artifactsSlotsToSelectMainStats.map(slotKey => {\r\n                        const numSel = mainStatKeys[slotKey].length\r\n                        return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\" key={slotKey}>\r\n                          <Card.Header className=\"p-2\"><Row >\r\n                            <Col className=\"ml-2\"><SlotNameWithIcon slotKey={slotKey} /></Col>\r\n                            <Col xs=\"auto\"><Badge variant=\"info\">{numSel ? `${numSel} Selected` : `Any`}</Badge></Col>\r\n                          </Row></Card.Header>\r\n                          <Card.Body className=\"p-0\"><Row className=\"no-gutters\">\r\n                            {Artifact.slotMainStats(slotKey).map((mainStatKey, i) => {\r\n                              const selected = mainStatKeys[slotKey].includes(mainStatKey)\r\n                              return <Col xs={i < 3 ? 4 : 6} key={mainStatKey}>\r\n                                <Button className=\"w-100 rounded-0\" size=\"sm\" variant={selected ? \"success\" : \"secondary\"} disabled={generatingBuilds}\r\n                                  onClick={() => buildSettingsDispatch({ type: \"mainStatKey\", slotKey, mainStatKey })}>\r\n                                  {StatIcon[mainStatKey]} {Stat.getStatNameWithPercent(mainStatKey, \"\", false)}\r\n                                </Button>\r\n                              </Col>\r\n                            })}\r\n                          </Row></Card.Body>\r\n                        </Card>\r\n                      })}\r\n                    </Card.Body>\r\n                  </Card>\r\n                </Col>\r\n              </Row></Col>\r\n            </Row>\r\n            <Row className=\"d-flex justify-content-between mb-2\">\r\n              <Col xs=\"auto\" >\r\n                <ButtonGroup>\r\n                  <Button\r\n                    className=\"h-100\"\r\n                    disabled={!characterKey || generatingBuilds}\r\n                    variant={(characterKey && totBuildNumber <= warningBuildNumber) ? \"success\" : \"warning\"}\r\n                    onClick={generateBuilds}\r\n                  ><span>Generate</span></Button>\r\n                  <Dropdown as={ButtonGroup}>\r\n                    <OverlayTrigger\r\n                      overlay={<Tooltip id=\"max-build-tooltip\">\r\n                        Decreasing the number of generated build will decrease build calculation time for large number of builds.\r\n                      </Tooltip>}\r\n                    >\r\n                      <Dropdown.Toggle disabled={generatingBuilds}><b>{maxBuildsToShow}</b> {maxBuildsToShow === 1 ? \"Build\" : \"Builds\"}</Dropdown.Toggle>\r\n                    </OverlayTrigger>\r\n                    <Dropdown.Menu>\r\n                      {maxBuildsToShowList.map(v => <Dropdown.Item key={v} onClick={() => setmaxBuildsToShow(v)}>{v} {v === 1 ? \"Build\" : \"Builds\"}</Dropdown.Item>)}\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                  <Button\r\n                    className=\"h-100\"\r\n                    disabled={!generatingBuilds}\r\n                    variant=\"danger\"\r\n                    onClick={() => {\r\n                      if (!worker.current) return;\r\n                      worker.current.terminate();\r\n                      worker.current = null\r\n                      setgeneratingBuilds(false)\r\n                      setbuilds([])\r\n                      setgenerationDuration(0)\r\n                      setgenerationProgress(0)\r\n                      setgenerationSkipped(0)\r\n                    }}\r\n                  ><span>Cancel</span></Button>\r\n                </ButtonGroup>\r\n              </Col>\r\n              <Col xs=\"auto\">\r\n                {/* Dropdown to select sorting value */}\r\n                {<ButtonGroup>\r\n                  <Dropdown as={ButtonGroup} drop=\"up\">\r\n                    <Dropdown.Toggle disabled={generatingBuilds} variant=\"light\" >\r\n                      <span>Optimization Target: {sortByText}</span>\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu align=\"right\" style={{ minWidth: \"40rem\" }} >\r\n                      <Row>\r\n                        {!!statsDisplayKeys && Object.entries(statsDisplayKeys).map(([sectionKey, fields]: [string, any]) => {\r\n                          const header = (characterSheet && weaponSheet && artifactSheets) ? getFormulaTargetsDisplayHeading(sectionKey, { characterSheet, weaponSheet, artifactSheets }, initialStats?.characterEle) : sectionKey\r\n                          return <Col xs={12} md={6} key={sectionKey}>\r\n                            <Dropdown.Header style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}><b>{header}</b></Dropdown.Header>\r\n                            {fields.map((target, i) => {\r\n                              if (Array.isArray(target))\r\n                                return <TargetSelectorDropdownItem key={i} {...{ target, buildSettingsDispatch, initialStats }} />\r\n                              else if (typeof target === \"string\")\r\n                                return <Dropdown.Item key={i} onClick={() => buildSettingsDispatch({ optimizationTarget: target })}>{Stat.getStatNameWithPercent(target)}</Dropdown.Item>\r\n                              return null\r\n                            })}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Dropdown.Menu>\r\n                  </Dropdown>\r\n                  <Button onClick={() => buildSettingsDispatch({ ascending: !buildSettings.ascending })} disabled={generatingBuilds} variant={ascending ? \"danger\" : \"primary\"}>\r\n                    <FontAwesomeIcon icon={ascending ? faSortAmountDownAlt : faSortAmountUp} className=\"fa-fw\" />\r\n                    <span>{ascending ? \"Ascending\" : \"Descending\"}</span>\r\n                  </Button>\r\n                </ButtonGroup >}\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"\">\r\n              <Col>{!!characterKey && <BuildAlert {...{ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }} />}</Col>\r\n            </Row>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-2\">\r\n      <Col>\r\n        <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n          <Card.Header>\r\n            <Row>\r\n              <Col>{characterKey ? <span>Showing <b>{builds.length}</b> Builds generated for {characterName}</span> : <span>Select a character to generate builds.</span>}</Col>\r\n            </Row>\r\n          </Card.Header>\r\n          {/* Build List */}\r\n          <ListGroup>\r\n            {builds.map((build, index) =>\r\n              index < maxBuildsToShow && characterSheet && weaponSheet && artifactSheets && <ArtifactDisplayItem sheets={{ characterSheet, weaponSheet, artifactSheets }} build={build} characterKey={characterKey as CharacterKey} index={index} key={index} statsDisplayKeys={statsDisplayKeys} onClick={() => setmodalBuild(build as any)} />\r\n            )}\r\n          </ListGroup>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  </Container >\r\n}\r\n\r\nfunction TargetSelectorDropdownItem({ target, buildSettingsDispatch, initialStats }) {\r\n  const formula = usePromise(Formula.get(target), [target])\r\n  if (!formula) return null\r\n  const talentField = (formula as any).field as IFieldDisplay\r\n  return <Dropdown.Item onClick={() => buildSettingsDispatch({ optimizationTarget: target })} style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n    <span className={`text-${Character.getTalentFieldValue(talentField, \"variant\", initialStats)}`}>{Character.getTalentFieldValue(talentField, \"text\", initialStats)}</span>\r\n  </Dropdown.Item>\r\n}\r\n\r\nfunction BuildModal({ build, showCharacterModal, characterKey, selectCharacter, setmodalBuild, setshowCharacterModal }) {\r\n  const closeModal = useCallback(() => {\r\n    setmodalBuild(null)\r\n    setshowCharacterModal(false)\r\n  }, [setmodalBuild, setshowCharacterModal])\r\n  return <Modal show={Boolean(showCharacterModal || build)} onHide={closeModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n    <React.Suspense fallback={<span>Loading...</span>}>\r\n      <CharacterDisplayCard\r\n        tabName={undefined}\r\n        characterKey={characterKey}\r\n        setCharacterKey={cKey => selectCharacter(cKey)}\r\n        newBuild={build}\r\n        onClose={closeModal}\r\n        editable={showCharacterModal}\r\n        footer={<Button variant=\"danger\" onClick={closeModal}>Close</Button>} />\r\n    </React.Suspense>\r\n  </Modal>\r\n}\r\n\r\nfunction ArtConditionalModal({ showArtCondModal, setshowArtCondModal, initialStats, characterDispatch, artifactCondCount }) {\r\n  const closeArtCondModal = useCallback(() => setshowArtCondModal(false), [setshowArtCondModal])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n  if (!artifactSheets) return null\r\n  const artSetKeyList = Object.entries(ArtifactSheet.setKeysByRarities(artifactSheets)).reverse().flatMap(([, sets]) => sets)\r\n  return <Modal show={showArtCondModal} onHide={closeArtCondModal} size=\"xl\" contentClassName=\"bg-transparent\">\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <h5>Default Artifact Set Effects  {Boolean(artifactCondCount) && <Badge variant=\"success\">{artifactCondCount} Selected</Badge>}</h5>\r\n          </Col>\r\n          <Col xs=\"auto\" >\r\n            <Button onClick={() => {\r\n              if (initialStats.conditionalValues.artifact) initialStats.conditionalValues.artifact = {}\r\n              characterDispatch({ conditionalValues: initialStats.conditionalValues })\r\n            }}><span><FontAwesomeIcon icon={faUndo} /> Reset All</span></Button>\r\n          </Col>\r\n          <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={closeArtCondModal}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <Row>\r\n          {artSetKeyList.map(setKey => {\r\n            const sheet = artifactSheets[setKey]\r\n            let icon = Object.values(sheet.slotIcons)[0]\r\n            const rarities = sheet.rarity\r\n            const rarity = rarities[0]\r\n            return <Col className=\"mb-2\" key={setKey} xs={12} lg={6} xl={4}>\r\n              <Card className=\"h-100\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n                <Card.Header >\r\n                  <Row>\r\n                    <Col xs=\"auto\" className=\"ml-n3 my-n2\">\r\n                      <Image src={icon} className={`thumb-mid grad-${rarity}star m-1`} thumbnail />\r\n                    </Col>\r\n                    <Col >\r\n                      <h6><b>{artifactSheets?.[setKey].name ?? \"\"}</b></h6>\r\n                      <span>{rarities.map((ns, i) => <span key={ns}>{ns}<Stars stars={1} /> {i < (rarities.length - 1) ? \"/ \" : null}</span>)}</span>\r\n                    </Col>\r\n                  </Row>\r\n                </Card.Header>\r\n                <Card.Body><Row className=\"mb-n2\">\r\n                  {Boolean(setKey) && Object.keys(sheet.setEffects).map(key => parseInt(key) as SetNum).map(setNumKey =>\r\n                    <SetEffectDisplay newBuild={undefined} key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild: initialStats, editable: true, characterDispatch, }} />)}\r\n                </Row></Card.Body>\r\n              </Card>\r\n            </Col>\r\n          })}\r\n        </Row>\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        <Button variant=\"danger\" onClick={closeArtCondModal}>\r\n          <FontAwesomeIcon icon={faTimes} /> CLOSE</Button>\r\n      </Card.Footer>\r\n    </Card>\r\n  </Modal>\r\n}\r\n\r\nfunction StatFilterItem({ statKey, statKeys = [], min, max, close, setFilter, disabled }: {\r\n  statKey?, statKeys, min, max, close, setFilter, disabled\r\n}) {\r\n  const isFloat = Stat.getStatUnit(statKey) === \"%\"\r\n  const inputProps = {\r\n    disabled: !statKey,\r\n    allowEmpty: true,\r\n    float: isFloat,\r\n  }\r\n  const minInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MIN\",\r\n    value: min,\r\n    onChange: (s) => setFilter(statKey, s, max)\r\n  }\r\n  const maxInputProps = {\r\n    ...inputProps,\r\n    placeholder: \"MAX\",\r\n    value: max,\r\n    onChange: (s) => setFilter(statKey, min, s)\r\n  }\r\n  return <InputGroup className=\"mb-2\">\r\n    <DropdownButton\r\n      as={InputGroup.Prepend}\r\n      title={Stat.getStatNameWithPercent(statKey, \"New Stat\")}\r\n      id=\"input-group-dropdown-1\"\r\n      disabled={disabled}\r\n    >\r\n      {statKeys.map(sKey => <Dropdown.Item key={sKey} onClick={() => { close?.(); setFilter(sKey, min, max) }}>{Stat.getStatNameWithPercent(sKey)}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <CustomFormControl {...minInputProps} />\r\n    <CustomFormControl {...maxInputProps} />\r\n    {Boolean(close) && <InputGroup.Append>\r\n      <Button variant=\"danger\" onClick={close} disabled={disabled}><FontAwesomeIcon icon={faTrash} /></Button>\r\n    </InputGroup.Append>}\r\n  </InputGroup>\r\n}\r\n\r\nfunction HitModeCard({ characterSheet, character, build, className, disabled }: { characterSheet: CharacterSheet, character: ICachedCharacter, build: ICalculatedStats, className: string, disabled: boolean }) {\r\n  const database = useContext(DatabaseContext)\r\n  const setHitmode = useCallback(({ hitMode }) => database.updateChar({ ...character, hitMode }), [character, database])\r\n  const setReactionMode = useCallback(({ reactionMode }) => database.updateChar({ ...character, reactionMode }), [character, database])\r\n  const setInfusionAura = useCallback(({ infusionAura }) => database.updateChar({ ...character, infusionAura }), [character, database])\r\n  if (!character) return null\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>Hit Mode Options</Col>\r\n        <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={setInfusionAura} disabled={disabled} /></Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"mb-n2\">\r\n      <HitModeToggle hitMode={character.hitMode} characterDispatch={setHitmode} className=\"w-100 mb-2\" disabled={disabled} />\r\n      <ReactionToggle build={build} character={character} characterDispatch={setReactionMode} className=\"w-100 mb-2\" disabled={disabled} />\r\n    </Card.Body>\r\n  </Card >\r\n}\r\n\r\nfunction StatFilterCard({ statKeys = [], statFilters = {}, setStatFilters, className, disabled }) {\r\n  const remainingKeys = statKeys.filter(key => !(Object.keys(statFilters) as any).some(k => k === key))\r\n  const setFilter = (sKey, min, max) => setStatFilters({ ...statFilters, [sKey]: { min, max } })\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className={className}>\r\n    <Card.Header>Final Stat Filter</Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-n2\">\r\n        {(Object.entries(statFilters) as [string, { min, max }][]).map(([statKey, { min, max }]) => {\r\n          return <Col xs={12} key={statKey} ><StatFilterItem statKey={statKey} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} min={min} max={max} close={() => {\r\n            delete statFilters[statKey]\r\n            setStatFilters({ ...statFilters })\r\n          }} /></Col>\r\n        })}\r\n        <Col xs={12}>\r\n          <StatFilterItem min={undefined} max={undefined} close={undefined} statKeys={remainingKeys} setFilter={setFilter} disabled={disabled} />\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype ArtifactDisplayItemProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  index: number,\r\n  characterKey: CharacterKey,\r\n  build: ICalculatedStats,\r\n  statsDisplayKeys: any,\r\n  onClick: () => void\r\n}\r\n//for displaying each artifact build\r\nfunction ArtifactDisplayItem({ sheets, sheets: { artifactSheets }, index, characterKey, build, statsDisplayKeys, onClick }: ArtifactDisplayItemProps) {\r\n  const database = useContext(DatabaseContext)\r\n  const character = database._getChar(characterKey)\r\n  if (!character) return null\r\n  const { equippedArtifacts } = character\r\n  const currentlyEquipped = allSlotKeys.every(slotKey => equippedArtifacts[slotKey] === build.equippedArtifacts?.[slotKey])\r\n  return (<div>\r\n    <ListGroup.Item\r\n      variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"text-white\" action\r\n      onClick={onClick}\r\n    >\r\n      <h5 className=\"mb-2\"><Row>\r\n        <Col xs=\"auto\">\r\n          <Badge variant=\"info\"><strong>{index + 1}{currentlyEquipped ? \" (Equipped)\" : \"\"}</strong></Badge>\r\n        </Col>\r\n        <Col xs=\"auto\">{(Object.entries(build.setToSlots) as [ArtifactSetKey, SlotKey[]][]).sort(([key1, slotarr1], [key2, slotarr2]) => slotarr2.length - slotarr1.length).map(([key, slotarr]) =>\r\n          <Badge key={key} variant={currentlyEquipped ? \"success\" : \"primary\"} className=\"mr-2\">\r\n            {slotarr.map(slotKey => artifactSlotIcon(slotKey))} {artifactSheets?.[key].name ?? \"\"}\r\n          </Badge>\r\n        )}</Col>\r\n      </Row></h5>\r\n      <StatDisplayComponent editable={false} {...{ sheets, character, newBuild: build, statsDisplayKeys, cardbg: (index % 2 ? \"lightcontent\" : \"darkcontent\") }} />\r\n    </ListGroup.Item>\r\n  </div>)\r\n}\r\n\r\nfunction BuildAlert({ totBuildNumber, generatingBuilds, generationSkipped, generationProgress, generationDuration, characterName, maxBuildsToShow }) {\r\n  const totalBuildNumberString = totBuildNumber?.toLocaleString() ?? totBuildNumber\r\n  const totalUnskipped = totBuildNumber - generationSkipped\r\n  const generationProgressString = generationProgress?.toLocaleString() ?? generationProgress\r\n  const generationSkippedString = generationSkipped?.toLocaleString() ?? generationSkipped\r\n  const totalUnskippedString = totalUnskipped?.toLocaleString() ?? totalUnskipped\r\n  const generationSkippedText = Boolean(generationSkipped) && <span>(<b>{generationSkippedString}</b> skipped)</span>\r\n  if (generatingBuilds) {\r\n    let progPercent = generationProgress * 100 / (totalUnskipped)\r\n    return <Alert variant=\"success\">\r\n      <span>Generating and testing <b className=\"text-monospace\">{generationProgressString}/{totalUnskippedString}</b> build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span><br />\r\n      <h6>Time elapsed: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n      <ProgressBar now={progPercent} label={`${progPercent.toFixed(1)}%`} />\r\n    </Alert>\r\n  } else if (!generatingBuilds && generationProgress) {//done\r\n    return <Alert variant=\"success\">\r\n      <span>Generated and tested <b className=\"text-monospace\">{totalUnskippedString}</b> Build configurations against the criteria for <b>{characterName}</b>. {generationSkippedText}</span>\r\n      <h6>Total duration: <strong className=\"text-monospace\">{timeStringMs(generationDuration)}</strong></h6>\r\n      <ProgressBar now={100} variant=\"success\" label=\"100%\" />\r\n    </Alert>\r\n  } else {\r\n    return totBuildNumber === 0 ?\r\n      <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will not generate any builds for <b>{characterName}</b>. Please change your Artifact configurations, or add/include more Artifacts.</span></Alert>\r\n      : (totBuildNumber > warningBuildNumber ?\r\n        <Alert variant=\"warning\" className=\"mb-0\"><span>Current configuration will generate <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>. This might take quite a while to generate...</span></Alert> :\r\n        <Alert variant=\"success\" className=\"mb-0\"><span>Current configuration {totBuildNumber <= maxBuildsToShow ? \"generated\" : \"will generate\"} <b>{totalBuildNumberString}</b> builds for <b>{characterName}</b>.</span></Alert>)\r\n  }\r\n}\r\n\r\nconst levels = {\r\n  0: <span>No level assumption</span>,\r\n  4: <span>Assume at least level 4</span>,\r\n  8: <span>Assume at least level 8</span>,\r\n  12: <span>Assume at least level 12</span>,\r\n  16: <span>Assume at least level 16</span>,\r\n  20: <span>Assume at least level 20</span>\r\n}\r\nfunction AssumeFullLevelToggle({ mainStatAssumptionLevel = 0, setmainStatAssumptionLevel, disabled }) {\r\n  return <OverlayTrigger overlay={<Tooltip id=\"assume-level-tooltip\">Change Main Stat value to be at least a specific level. Does not change substats.</Tooltip>} >\r\n    <Dropdown>\r\n      <Dropdown.Toggle variant={mainStatAssumptionLevel ? \"orange\" : \"primary\"} disabled={disabled}>{levels[mainStatAssumptionLevel]}</Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        {Object.entries(levels).map(([key, text]) => <Dropdown.Item key={key} onClick={() => setmainStatAssumptionLevel(parseInt(key))}>{text}</Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  </OverlayTrigger>\r\n}\r\n"],"sourceRoot":""}