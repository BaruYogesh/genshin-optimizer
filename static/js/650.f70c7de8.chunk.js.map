{"version":3,"file":"static/js/650.f70c7de8.chunk.js","mappings":"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","sources":["Data/Characters/Albedo/assets.tsx","Data/Characters/Albedo/index.tsx","Data/Characters/Aloy/assets.tsx","Data/Characters/Aloy/index.tsx","Data/Characters/Amber/assets.tsx","Data/Characters/Amber/index.tsx","Data/Characters/AratakiItto/assets.tsx","Data/Characters/AratakiItto/index.tsx","Data/Characters/Barbara/assets.tsx","Data/Characters/Barbara/index.tsx","Data/Characters/Beidou/assets.tsx","Data/Characters/Beidou/index.tsx","Data/Characters/Bennett/assets.tsx","Data/Characters/Bennett/index.tsx","Data/Characters/Chongyun/assets.tsx","Data/Characters/Chongyun/index.tsx","Data/Characters/Collei/assets.tsx","Data/Characters/Collei/index.tsx","Data/Characters/Diluc/assets.tsx","Data/Characters/Diluc/index.tsx","Data/Characters/Diona/assets.tsx","Data/Characters/Diona/index.tsx","Data/Characters/Dori/assets.tsx","Data/Characters/Dori/index.tsx","Data/Characters/Eula/assets.tsx","Data/Characters/Eula/index.tsx","Data/Characters/Fischl/assets.tsx","Data/Characters/Fischl/index.tsx","Data/Characters/Ganyu/assets.tsx","Data/Characters/Ganyu/index.tsx","Data/Characters/Gorou/assets.tsx","Data/Characters/Gorou/index.tsx","Data/Characters/HuTao/assets.tsx","Data/Characters/HuTao/index.tsx","Data/Characters/Jean/assets.tsx","Data/Characters/Jean/index.tsx","Data/Characters/KaedeharaKazuha/assets.tsx","Data/Characters/KaedeharaKazuha/index.tsx","Data/Characters/Kaeya/assets.tsx","Data/Characters/Kaeya/index.tsx","Data/Characters/KamisatoAyaka/assets.tsx","Data/Characters/KamisatoAyaka/index.tsx","Data/Characters/KamisatoAyato/assets.tsx","Data/Characters/KamisatoAyato/index.tsx","Data/Characters/Keqing/assets.tsx","Data/Characters/Keqing/index.tsx","Data/Characters/Klee/assets.tsx","Data/Characters/Klee/index.tsx","Data/Characters/KujouSara/assets.tsx","Data/Characters/KujouSara/index.tsx","Data/Characters/KukiShinobu/assets.ts","Data/Characters/KukiShinobu/index.tsx","Data/Characters/Lisa/assets.tsx","Data/Characters/Lisa/index.tsx","Data/Characters/Mona/assets.tsx","Data/Characters/Mona/index.tsx","Data/Characters/Ningguang/assets.tsx","Data/Characters/Ningguang/index.tsx","Data/Characters/Noelle/assets.tsx","Data/Characters/Noelle/index.tsx","Data/Characters/Qiqi/assets.tsx","Data/Characters/Qiqi/index.tsx","Data/Characters/RaidenShogun/assets.tsx","Data/Characters/RaidenShogun/index.tsx","Data/Characters/Razor/assets.tsx","Data/Characters/Razor/index.tsx","Data/Characters/Rosaria/assets.ts","Data/Characters/Rosaria/index.tsx","Data/Characters/SangonomiyaKokomi/assets.tsx","Data/Characters/SangonomiyaKokomi/index.tsx","Data/Characters/Sayu/assets.tsx","Data/Characters/Sayu/index.tsx","Data/Characters/Shenhe/assets.tsx","Data/Characters/Shenhe/index.tsx","Data/Characters/ShikanoinHeizou/assets.tsx","Data/Characters/ShikanoinHeizou/index.tsx","Data/Characters/Sucrose/assets.tsx","Data/Characters/Sucrose/index.tsx","Data/Characters/Tartaglia/assets.tsx","Data/Characters/Tartaglia/index.tsx","Data/Characters/Thoma/assets.tsx","Data/Characters/Thoma/index.tsx","Data/Characters/Tighnari/assets.tsx","Data/Characters/Tighnari/index.tsx","Data/Characters/Traveler/anemo/assets.tsx","Data/Characters/Traveler/anemo/index.tsx","Data/Characters/Traveler/dendro/assets.tsx","Data/Characters/Traveler/dendro/index.tsx","Data/Characters/Traveler/electro/assets.tsx","Data/Characters/Traveler/electro/index.tsx","Data/Characters/Traveler/geo/assets.tsx","Data/Characters/Traveler/geo/index.tsx","Data/Characters/Traveler/index.tsx","Data/Characters/Venti/assets.tsx","Data/Characters/Venti/index.tsx","Data/Characters/Xiangling/assets.tsx","Data/Characters/Xiangling/index.tsx","Data/Characters/Xiao/assets.tsx","Data/Characters/Xiao/index.tsx","Data/Characters/Xingqiu/assets.tsx","Data/Characters/Xingqiu/index.tsx","Data/Characters/Xinyan/assets.tsx","Data/Characters/Xinyan/index.tsx","Data/Characters/YaeMiko/assets.tsx","Data/Characters/YaeMiko/index.tsx","Data/Characters/Yanfei/assets.tsx","Data/Characters/Yanfei/index.tsx","Data/Characters/Yelan/assets.tsx","Data/Characters/Yelan/index.tsx","Data/Characters/Yoimiya/assets.tsx","Data/Characters/Yoimiya/index.tsx","Data/Characters/YunJin/assets.tsx","Data/Characters/YunJin/index.tsx","Data/Characters/Zhongli/assets.tsx","Data/Characters/Zhongli/index.tsx","Data/Characters/index.ts"],"sourcesContent":["import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Albedo_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Albedo\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    blossomDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    blossomCd: 2,\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    blossomDmg: skillParam_gen.burst[b++],\r\n    blossomAmt: 7,\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    blossomDmgInc: 0.25,\r\n    hpThresh: 50,\r\n  },\r\n  passive2: {\r\n    eleMasInc: skillParam_gen.passive2[0][0],\r\n    duration: skillParam_gen.passive2[1][0]\r\n  },\r\n  constellation1: {\r\n    blossomEner: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    blossomDmgInc: 0.30,\r\n    maxStacks: 4,\r\n    stackDuration: 30\r\n  },\r\n  constellation4: {\r\n    plunging_dmg_: 0.3,\r\n  },\r\n  constellation6: {\r\n    bonus_dmg_: 0.17\r\n  }\r\n} as const\r\n\r\nconst [condBurstBlossomPath, condBurstBlossom] = cond(key, \"burstBlossom\")\r\nconst [condBurstUsedPath, condBurstUsed] = cond(key, \"burstUsed\")\r\nconst p2Burst_eleMas = equal(condBurstUsed, \"burstUsed\", greaterEq(input.asc, 4, datamine.passive2.eleMasInc))\r\n\r\nconst [condP1EnemyHpPath, condP1EnemyHp] = cond(key, \"p1EnemyHp\")\r\nconst p1_blossom_dmg_ = equal(condP1EnemyHp, \"belowHp\", greaterEq(input.asc, 1, datamine.passive1.blossomDmgInc))\r\n\r\nconst [condC2StacksPath, condC2Stacks] = cond(key, \"c2Stacks\")\r\nconst c2_burst_dmgInc = greaterEq(input.constellation, 2,\r\n  prod(\r\n    lookup(\r\n      condC2Stacks,\r\n      Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n        [i,\r\n          prod(i, datamine.constellation2.blossomDmgInc)]\r\n      )\r\n      ),\r\n      naught\r\n    ),\r\n    input.total.def\r\n  )\r\n)\r\n\r\nconst [condSkillInFieldPath, condSkillInField] = cond(key, \"skillInField\")\r\nconst c4_plunging_dmg_disp = greaterEq(input.constellation, 4,\r\n  equal(condSkillInField, \"skillInField\", datamine.constellation4.plunging_dmg_)\r\n)\r\nconst c4_plunging_dmg_ = equal(input.activeCharKey, target.charKey, c4_plunging_dmg_disp)\r\n\r\n// Maybe we should just have a single conditional for \"in field AND crystallize shield\"?\r\n// This is technically a nested conditional\r\nconst [condC6CrystallizePath, condC6Crystallize] = cond(key, \"c6Crystallize\")\r\nconst c6_Crystal_all_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condSkillInField, \"skillInField\",\r\n    equal(condC6Crystallize, \"c6Crystallize\", datamine.constellation6.bonus_dmg_)\r\n  )\r\n)\r\nconst c6_Crystal_all_dmg_ = equal(input.activeCharKey, target.charKey, c6_Crystal_all_dmg_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n    blossom: dmgNode(\"def\", datamine.skill.blossomDmg, \"skill\", { total: { skill_dmg_: p1_blossom_dmg_ } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    blossom: equal(\"isoOnField\", condBurstBlossom, dmgNode(\"atk\", datamine.burst.blossomDmg, \"burst\")),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: p2Burst_eleMas,\r\n      plunging_dmg_: c4_plunging_dmg_,\r\n      all_dmg_: c6_Crystal_all_dmg_,\r\n    }\r\n  },\r\n  premod: {\r\n    burst_dmgInc: c2_burst_dmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.blossom, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"blossomCD\"),\r\n          value: datamine.skill.blossomCd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1EnemyHp,\r\n        path: condP1EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.passive1.hpThresh }),\r\n        states: {\r\n          belowHp: {\r\n            fields: [{\r\n              node: infoMut(p1_blossom_dmg_, { key: `char_${key}:blossomDmg_` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"enerPerBlossom\"),\r\n          value: datamine.constellation1.blossomEner,\r\n          fixed: 1,\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condSkillInField,\r\n        path: condSkillInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          skillInField: {\r\n            fields: [{\r\n              node: infoMut(c4_plunging_dmg_disp, { key: \"plunging_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Crystallize,\r\n        path: condC6CrystallizePath,\r\n        name: st(\"protectedByShieldCrystal\"),\r\n        canShow: equal(condSkillInField, \"skillInField\", 1),\r\n        teamBuff: true,\r\n        states: {\r\n          c6Crystallize: {\r\n            fields: [{\r\n              node: infoMut(c6_Crystal_all_dmg_disp, { key: \"all_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstBlossom,\r\n        path: condBurstBlossomPath,\r\n        name: trm(\"isotomaOnField\"),\r\n        states: {\r\n          isoOnField: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.blossom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n              textSuffix: st(\"brHits\", { count: datamine.burst.blossomAmt })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condBurstUsed,\r\n        path: condBurstUsedPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          burstUsed: {\r\n            fields: [{\r\n              node: p2Burst_eleMas\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2Stacks,\r\n        path: condC2StacksPath,\r\n        name: trm(\"c2Stacks\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: c2_burst_dmgInc\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Aloy_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, naught, percent, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Aloy\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1.1\r\n      skillParam_gen.auto[a++], // 1.2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    freezeBombDmg: skillParam_gen.skill[s++],\r\n    chillWaterBomblets: skillParam_gen.skill[s++],\r\n    atkDecrease: skillParam_gen.skill[s++],\r\n    atkDecreaseDuration: skillParam_gen.skill[s++][0],\r\n    coilNormalDmgBonus1: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus2: skillParam_gen.skill[s++],\r\n    coilNormalDmgBonus3: skillParam_gen.skill[s++],\r\n    rushingNormalDmgBonus: skillParam_gen.skill[s++],\r\n    rushingDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atkInc: 0.16,\r\n    teamAtkInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condCoilPath, condCoil] = cond(key, \"coil\")\r\nconst normal_dmg_ = lookup(condCoil, {\r\n  \"coil1\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus1, { key: \"_\" }),\r\n  \"coil2\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus2, { key: \"_\" }),\r\n  \"coil3\": subscript(input.total.skillIndex, datamine.skill.coilNormalDmgBonus3, { key: \"_\" }),\r\n  \"rush\": subscript(input.total.skillIndex, datamine.skill.rushingNormalDmgBonus, { key: \"_\" })\r\n}, naught)\r\nconst atk_ = greaterEq(input.asc, 1, unequal(condCoil, undefined, percent(datamine.passive1.atkInc)))\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst teamAtk_ = greaterEq(input.asc, 1, equal(condA1, \"on\",\r\n  unequal(input.activeCharKey, key, percent(datamine.passive1.teamAtkInc))))\r\n\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst cryo_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4, Object.fromEntries(range(1, 10).map(i => [i, percent(datamine.passive2.cryoDmgBonus * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\", {\r\n      hit: {\r\n        ele: compareEq(\"rush\", condCoil, elementKey, \"physical\")\r\n      }\r\n    })])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    freezeBombDmg: dmgNode(\"atk\", datamine.skill.freezeBombDmg, \"skill\"),\r\n    chillWaterBomblets: dmgNode(\"atk\", datamine.skill.chillWaterBomblets, \"skill\"),\r\n    atkDecrease: subscript(input.total.skillIndex, datamine.skill.atkDecrease)\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  premod: {\r\n    normal_dmg_,\r\n    atk_,\r\n    cryo_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: teamAtk_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i === 0 ? 0 : -1)}` }),\r\n          textSuffix: i === 0 ? \"(1)\" : i === 1 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.freezeBombDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.chillWaterBomblets, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.atkDecrease, { key: `char_${key}_gen:skill.skillParams.2_` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.atkDecreaseDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.7\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condCoil,\r\n        path: condCoilPath,\r\n        name: trm(\"skill.coil\"),\r\n        states: {\r\n          \"coil1\": {\r\n            name: trm(\"skill.coil1\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil2\": {\r\n            name: trm(\"skill.coil2\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"coil3\": {\r\n            name: trm(\"skill.coil3\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }]\r\n          },\r\n          \"rush\": {\r\n            name: trm(\"skill.rush\"),\r\n            fields: [{\r\n              node: normal_dmg_\r\n            }, {\r\n              text: trm(\"normCryoInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.6\"),\r\n              value: datamine.skill.rushingDuration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: atk_\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        teamBuff: true,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: infoMut(teamAtk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        canShow: equal(\"rush\", condCoil, 1),\r\n        name: trm(\"skill.rushState\"),\r\n        states: Object.fromEntries(range(1, 10).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{ node: cryo_dmg_ }]\r\n        }]))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\"),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\"),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Amber_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Amber\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    unknown: skillParam_gen.skill[s++], // what is this??\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerWave: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    rainDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    aoeInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    atkInc: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    secArrowDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    manualDetionationDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    moveSpdInc: skillParam_gen.constellation6[0],\r\n    atkInc: skillParam_gen.constellation6[1],\r\n    duration: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst burst_critRate_ = greaterEq(input.asc, 1, percent(datamine.passive1.critRateInc))\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst atk_ = equal(\"on\", condA4, percent(datamine.passive2.atkInc))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst moveSPD_ = equal(\"on\", condC6, percent(datamine.constellation6.moveSpdInc))\r\nconst teamAtk_ = equal(\"on\", condC6, percent(datamine.constellation6.atkInc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('pyro') } }),\r\n    secondAimed: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.secArrowDmg), dmgNode(\"atk\", datamine.charged.aimed, \"charged\"))),\r\n    secondAimedCharged: greaterEq(input.constellation, 1, prod(dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\",\r\n      { hit: { ele: constant('pyro') } }), percent(datamine.constellation1.secArrowDmg))),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    rainDmg: dmgNode(\"atk\", datamine.burst.rainDmg, \"burst\"),\r\n    dmgPerWave: dmgNode(\"atk\", datamine.burst.dmgPerWave, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    manualDetonationDmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { premod: { skill_dmg_: percent(datamine.constellation2.manualDetionationDmg) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    atk_,\r\n    burst_critRate_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      moveSPD_,\r\n      atk_: teamAtk_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.secondAimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n          textSuffix: trm(\"secondArrow\")\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation2.manualDetonationDmg, { key: `char_${key}:manualDetonationDmg` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 4 ? datamine.skill.cd - datamine.skill.cd * 0.2 : datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmgPerWave, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rainDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6CondName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: teamAtk_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"critRateBonus\"),\r\n          value: datamine.passive1.critRateInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          text: trm(\"aoeRangeBonus\"),\r\n          value: datamine.passive1.aoeInc * 100,\r\n          unit: \"%\"\r\n        }, {\r\n          node: burst_critRate_\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Arataki_Itto_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, min, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"AratakiItto\"\r\nconst elementKey: ElementKey = \"geo\"\r\n\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0],\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3],\r\n    ]\r\n  },\r\n  charged: {\r\n    sSlash: skillParam_gen.auto[4],\r\n    akSlash: skillParam_gen.auto[5],\r\n    akFinal: skillParam_gen.auto[6],\r\n    stam: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  ss: { //Superlative Superstrength\r\n    duration: skillParam_gen.auto[11][0],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    hp: skillParam_gen.skill[1],\r\n    duration: skillParam_gen.skill[2][0],\r\n    ss_cd: skillParam_gen.skill[3][0],\r\n    cd: skillParam_gen.skill[4][0],\r\n  },\r\n  burst: {\r\n    atkSpd: skillParam_gen.burst[0][0],\r\n    defConv: skillParam_gen.burst[1],\r\n    resDec: skillParam_gen.burst[2][0],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0],\r\n  },\r\n  passive1: {\r\n    maxStacks: 3,\r\n    atkSPD_: 0.10\r\n  },\r\n  passive2: {\r\n    def_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    initialStacks: skillParam_gen.constellation1[0],\r\n    timedStacks: skillParam_gen.constellation1[1]\r\n  },\r\n  constellation2: {\r\n    burstCdRed: skillParam_gen.constellation2[0],\r\n    energyRegen: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    atk_: skillParam_gen.constellation4[1],\r\n    duration: skillParam_gen.constellation4[2],\r\n  },\r\n  constellation6: {\r\n    charged_critDMG_: skillParam_gen.constellation6[0],\r\n  }\r\n}\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condP1Path, condP1] = cond(key, \"passive1\")\r\nconst [condC4Path, condC4] = cond(key, \"constellation4\")\r\n\r\nconst nodeSkillHP = prod(subscript(input.total.skillIndex, datamine.skill.hp, { key: 'hp_' }), input.total.hp)\r\nconst nodeBurstAtk = equal(condBurst, \"on\", prod(subscript(input.total.burstIndex, datamine.burst.defConv, { key: 'def_' }), input.total.def))\r\nconst nodeBurstAtkSpd = equal(condBurst, \"on\", datamine.burst.atkSpd, { key: 'atkSPD_' })\r\nconst allNodeBurstRes = Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, equal(condBurst, \"on\", -datamine.burst.resDec)]))\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, prod(percent(datamine.passive2.def_), input.premod.def))\r\nconst nodeP1AtkSpd = greaterEq(input.asc, 4, lookup(condP1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(datamine.passive1.atkSPD_ * i)])), 0, { key: 'atkSPD_' }))\r\nconst nodeC2BurstRed = prod(min(tally.geo, 3), datamine.constellation2.burstCdRed)\r\nconst nodeC2EnergyRegen = prod(min(tally.geo, 3), datamine.constellation2.energyRegen)\r\nconst nodeC4Atk = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.atk_))\r\nconst nodeC4Def = equal(condC4, \"on\", greaterEq(input.constellation, 4, datamine.constellation4.def_))\r\nconst nodeC6CritDMG = greaterEq(input.constellation, 6, datamine.constellation6.charged_critDMG_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    sSlash: dmgNode(\"atk\", datamine.charged.sSlash, \"charged\"),\r\n    akSlash: dmgNode(\"atk\", datamine.charged.akSlash, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n    akFinal: dmgNode(\"atk\", datamine.charged.akFinal, \"charged\", { premod: { charged_dmgInc: nodeA4Bonus } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    hp: nodeSkillHP\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: nodeC4Atk,\r\n      def_: nodeC4Def,\r\n    }\r\n  },\r\n  premod: {\r\n    charged_critDMG_: nodeC6CritDMG,\r\n    atk: nodeBurstAtk,\r\n    atkSPD_: sum(nodeBurstAtkSpd, nodeP1AtkSpd),\r\n    ...allNodeBurstRes\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.akSlash, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.akFinal, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.ss.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.sSlash, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.stam,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1.name\"),\r\n        value: condP1,\r\n        path: condP1Path,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: st(\"stack_one\", { count: i }),\r\n            fields: [{\r\n              node: nodeP1AtkSpd\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(nodeA4Bonus, { key: `char_${key}:a4:dmgInc` })\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: nodeC6CritDMG\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hp, { key: `char_${key}_gen:skill.skillParams.1`, variant: \"heal\" }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              node: nodeBurstAtkSpd,\r\n            },\r\n            ...Object.values(allNodeBurstRes).map(node => ({ node })),\r\n            {\r\n              node: infoMut(nodeBurstAtk, { key: `char_${key}_gen:burst.skillParams.0` })\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.initialGain\"),\r\n          value: datamine.constellation1.initialStacks\r\n        }, {\r\n          text: trm(\"c1.timedGain\"),\r\n          value: datamine.constellation1.timedStacks\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1),\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"burstCDRed\"),\r\n          value: data => data.get(nodeC2BurstRed).value,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: data => data.get(nodeC2EnergyRegen).value,\r\n        }],\r\n        canShow: equal(condBurst, \"on\", 1)\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        name: trm(\"c4.name\"),\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4Atk\r\n            }, {\r\n              node: nodeC4Def\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [{ fields: [{ node: nodeC6CritDMG }] }])\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Barbara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Barbara\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ],\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    cregen_hp_: skillParam_gen.skill[s++],\r\n    cregen_hp: skillParam_gen.skill[s++],\r\n    regen_hp_: skillParam_gen.skill[s++],\r\n    regen_hp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    hp_: skillParam_gen.burst[b++],\r\n    hp: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stam: -skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    ext: skillParam_gen.passive2[0][0],\r\n    maxExt: skillParam_gen.passive2[0][1],\r\n  },\r\n  constellation2: {\r\n    cdDec: 0.15,\r\n    hydro_dmg_: 0.15\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodeA1 = greaterEq(input.asc, 1, equal(condSkill, \"on\", equal(input.activeCharKey, target.charKey, datamine.passive1.stam)))\r\nconst nodeA1Display = greaterEq(input.asc, 1, equal(condSkill, \"on\", datamine.passive1.stam))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(condC2, \"on\", equal(input.activeCharKey, target.charKey, datamine.constellation2.hydro_dmg_)))\r\nconst nodeC2Display = greaterEq(input.constellation, 2, equal(condC2, \"on\", datamine.constellation2.hydro_dmg_))\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    regen: healNodeTalent(\"hp\", datamine.skill.regen_hp_, datamine.skill.regen_hp, \"skill\"),\r\n    cregen: healNodeTalent(\"hp\", datamine.skill.cregen_hp_, datamine.skill.cregen_hp, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    regen: healNodeTalent(\"hp\", datamine.burst.hp_, datamine.burst.hp, \"burst\"),\r\n  }\r\n}\r\n\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1,\r\n      hydro_dmg_: nodeC2,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.regen, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.cregen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: data => data.get(input.constellation).value >= 2 ? `${datamine.skill.cd}s - ${datamine.constellation2.cdDec * 100}%` : `${datamine.skill.cd}s`,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"passive1.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA1Display, { key: \"staminaDec_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        teamBuff: true,\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"constellation2.cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeC2Display, { key: \"hydro_dmg_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Beidou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Beidou\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    dmgBase: skillParam_gen.skill[s++],\r\n    onHitDmgBonus: skillParam_gen.skill[s++], //DMG bonus on hit taken\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    lightningDmg: skillParam_gen.burst[b++],\r\n    damageReduction: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  //pasive 1: 2, //additional targets for lightning arc\r\n  ascension4: {\r\n    normalDmg_: skillParam_gen.passive2[0][0], //Same value for all 3\r\n    chargeDmg_: skillParam_gen.passive2[0][0],\r\n    attackSpeed: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    shieldHp_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroResShred_: -1 * skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\n//Toggable stuff:\r\n// A4: Unleashing <b>Tidecaller</b> with its maximum DMG Bonus\r\n// C6: During the duration of <b>Stormbreaker</b>\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst skillDmgOneHit = datamine.skill.dmgBase.map((dmg, i) => dmg + datamine.skill.onHitDmgBonus[i])\r\nconst skillDmgTwoHits = datamine.skill.dmgBase.map((dmg, i) => dmg + 2 * datamine.skill.onHitDmgBonus[i])\r\n\r\nconst nodeBurstElectroResRed_ = equal(condC6, \"on\", percent(datamine.constellation6.electroResShred_), { key: `char_${key}:baneOfEvil_` })\r\nconst nodeSkillNormalDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.normalDmg_), { key: `char_${key}:a4normalDmg_` })\r\nconst nodeSkillChargeDmg_ = equal(condA4, \"on\", percent(datamine.ascension4.chargeDmg_), { key: `char_${key}:a4chargeDmg_` })\r\nconst nodeSkillAttackSpeed_ = equal(condA4, \"on\", percent(datamine.ascension4.attackSpeed), { key: `char_${key}:a4atkSpeed_` })\r\n\r\nconst skillShieldNode = shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\")\r\nconst c1ShieldNode = shieldNode(\"hp\", percent(datamine.constellation1.shieldHp_), 0)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    shield: skillShieldNode,\r\n    electroShield: shieldElement(\"electro\", skillShieldNode),\r\n    baseDmg: dmgNode(\"atk\", datamine.skill.dmgBase, \"skill\"),\r\n    dmgOneHit: dmgNode(\"atk\", skillDmgOneHit, \"skill\"),\r\n    dmgTwoHits: dmgNode(\"atk\", skillDmgTwoHits, \"skill\"),\r\n  },\r\n  burst: {\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    lightningDmg: dmgNode(\"atk\", datamine.burst.lightningDmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    shield: greaterEq(input.constellation, 1, c1ShieldNode),\r\n    electroShield: greaterEq(input.constellation, 1, shieldElement(\"electro\", c1ShieldNode)),\r\n  },\r\n  constellation4: {\r\n    skillDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, customBonus: {\r\n    normal_dmg_: nodeSkillNormalDmg_,\r\n    charged_dmg_: nodeSkillChargeDmg_,\r\n    atkSPD_: nodeSkillAttackSpeed_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: nodeBurstElectroResRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `sheet:dmgAbsorption.none` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.electroShield, { key: `sheet:dmgAbsorption.electro` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.baseDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgOneHit, { key: `char_${key}:skillOneHit` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgTwoHits, { key: `char_${key}:skillTwoHit` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: false,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"tidecallerMaxDmg\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkillNormalDmg_,\r\n            }, {\r\n              node: nodeSkillChargeDmg_,\r\n            }, {\r\n              node: nodeSkillAttackSpeed_,\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"a4charge\"),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightningDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(subscript(input.total.burstIndex, datamine.burst.damageReduction), { key: `char_${key}:burstDmgRed_` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"duringBurst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeBurstElectroResRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.shield, { key: `sheet:dmgAbsorption.none` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.electroShield, { key: `sheet:dmgAbsorption.electro` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.skillDmg, { key: `char_${key}:c4dmg` }),\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Bennett_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { UIData } from '../../../Formula/uiData'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Bennett\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold1_1: skillParam_gen.skill[s++],\r\n    hold1_2: skillParam_gen.skill[s++],\r\n    hold2_1: skillParam_gen.skill[s++],\r\n    hold2_2: skillParam_gen.skill[s++],\r\n    explosion: skillParam_gen.skill[s++],\r\n    cd_press: skillParam_gen.skill[s++][0],\r\n    cd_hold1: skillParam_gen.skill[s++][0],\r\n    cd_hold2: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    regen_: skillParam_gen.burst[b++],\r\n    regenFlat: skillParam_gen.burst[b++],\r\n    atkBonus: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cd_red: 0.2, // Not in the datamine for some reason\r\n  },\r\n  passive2: {\r\n    cd_red: 0.5, // Not in the datamine for some reason\r\n  },\r\n  constellation1: {\r\n    atk_inc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    hp_thresh: skillParam_gen.constellation2[0],\r\n    er_inc: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    pyro_dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst a1SkillCd = greaterEq(input.asc, 1, datamine.passive1.cd_red)\r\n\r\nconst burstAtkRatio = subscript(input.total.burstIndex, datamine.burst.atkBonus, { key: \"_\" })\r\nconst burstAddlAtk = prod(burstAtkRatio, input.base.atk)\r\nconst c1AtkRatio = greaterEq(input.constellation, 1, datamine.constellation1.atk_inc, { key: `char_${key}:additionalATKRatio_` })\r\nconst c1AddlAtk = greaterEq(input.constellation, 1, prod(c1AtkRatio, input.base.atk))\r\nconst atkIncRatio = sum(burstAtkRatio, c1AtkRatio)\r\nconst activeInAreaAtkDisp = prod(atkIncRatio, input.base.atk)\r\n\r\nconst [condInAreaPath, condInArea] = cond(key, \"activeInArea\")\r\nconst activeInArea = equal(\"activeInArea\", condInArea, equal(input.activeCharKey, target.charKey, 1))\r\nconst activeInAreaAtk = equal(activeInArea, 1, activeInAreaAtkDisp)\r\n\r\nconst activeInAreaA4 = greaterEq(input.asc, 4,\r\n  equal(activeInArea, 1, datamine.passive2.cd_red)\r\n)\r\n\r\nconst c6AndCorrectWep = greaterEq(input.constellation, 6,\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0)))\r\nconst activeInAreaC6PyroDmg = equal(activeInArea, 1,\r\n  greaterEq(input.constellation, 6, datamine.constellation6.pyro_dmg)\r\n)\r\nconst activeInAreaC6Infusion = equalStr(c6AndCorrectWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst underHP = greaterEq(input.constellation, 2,\r\n  equal(\"underHP\", condUnderHP, datamine.constellation2.er_inc))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold1_1: dmgNode(\"atk\", datamine.skill.hold1_1, \"skill\"),\r\n    hold1_2: dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"),\r\n    hold2_1: dmgNode(\"atk\", datamine.skill.hold2_1, \"skill\"),\r\n    hold2_2: dmgNode(\"atk\", datamine.skill.hold2_2, \"skill\"),\r\n    explosion: dmgNode(\"atk\", datamine.skill.explosion, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    regen: healNodeTalent(\"hp\", datamine.burst.regen_, datamine.burst.regenFlat, \"burst\"),\r\n    atkInc: activeInAreaAtk,\r\n  },\r\n  constellation4: {\r\n    dmg: greaterEq(input.constellation, 4, prod(dmgNode(\"atk\", datamine.skill.hold1_2, \"skill\"), datamine.constellation4.dmg))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_: activeInAreaC6PyroDmg,\r\n    },\r\n    total: {\r\n      // Not 100% sure if this should be in premod or total\r\n      atk: activeInAreaAtk,\r\n    },\r\n    infusion: {\r\n      team: activeInAreaC6Infusion,\r\n    },\r\n  },\r\n  premod: {\r\n    enerRech_: underHP,\r\n\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          // Press\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}:skill.pressDMG` }),\r\n        }, {\r\n          text: sgt(\"press.cd\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_press),\r\n        }, {\r\n          // Lvl 1\r\n          node: infoMut(dmgFormulas.skill.hold1_1, { key: `char_${key}:skill.lvl1_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold1_2, { key: `char_${key}:skill.lvl1_2DMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl1CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold1),\r\n        }, {\r\n          // Lvl 2\r\n          node: infoMut(dmgFormulas.skill.hold2_1, { key: `char_${key}:skill.lvl2_1DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold2_2, { key: `char_${key}:skill.lvl2_2DMG` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.explosion, { key: `char_${key}:skill.explDMG` }),\r\n        }, {\r\n          text: trm(\"skill.lvl2CD\"),\r\n          unit: \"s\",\r\n          value: data => calculateSkillCD(data, datamine.skill.cd_hold2),\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(a1SkillCd, { key: \"skillCDRed_\" })\r\n        }],\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condInArea,\r\n        path: condInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: data => data.get(burstAtkRatio).value * 100,\r\n              unit: \"%\",\r\n              fixed: 1\r\n            }, {\r\n              node: infoMut(burstAddlAtk, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(activeInAreaA4, { key: \"skillCDRed_\" })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"additionalATKRatio\"),\r\n          node: c1AtkRatio\r\n        }, {\r\n          node: infoMut(c1AddlAtk, { key: `char_${key}:additionalATK` })\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: constant(datamine.constellation6.pyro_dmg, { key: \"pyro_dmg_\", variant: \"pyro\" })\r\n        }, {\r\n          text: trm(\"c6PyroInfusion\")\r\n        }],\r\n        canShow: equal(condInArea, \"activeInArea\", 1),\r\n        teamBuff: true,\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [\r\n        ct.conditionalTemplate(\"constellation2\", {\r\n          value: condUnderHP,\r\n          path: condUnderHPPath,\r\n          name: st(\"lessPercentHP\", { percent: datamine.constellation2.hp_thresh * 100 }),\r\n          states: {\r\n            underHP: {\r\n              fields: [{\r\n                node: underHP\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.dmg, { key: `char_${key}:c4DMG` })\r\n        }],\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n\r\nfunction calculateSkillCD(data: UIData, skillCD: number): string {\r\n  let cdFactor: number = 1.00;\r\n  let result: string = skillCD + \"s\"\r\n  if (data.get(input.asc).value >= 1) {\r\n    cdFactor = 0.80;\r\n  }\r\n  cdFactor *= (1 - data.get(activeInAreaA4).value);\r\n  if (cdFactor !== 1.00) {\r\n    result += \" - \" + (100 - cdFactor * 100) + \"% = \" + skillCD * cdFactor;\r\n  }\r\n  return result;\r\n}\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Chongyun_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Chongyun\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin_dmg: skillParam_gen.auto[4],\r\n    final_dmg: skillParam_gen.auto[5],\r\n    stamina: skillParam_gen.auto[6][0],\r\n    duration: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    infusionDuration: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    atk_spd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0],\r\n    res: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    cdr: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    energy_regen: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    burst_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst skillDmg = dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spin_dmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.final_dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg,\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, skillDmg),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(percent(datamine.constellation1.dmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4,\r\n  equal(condAsc4, \"hit\",\r\n    -0.10\r\n  )\r\n)\r\nconst activeInArea = equal(\"activeInArea\", condSkill, equal(input.activeCharKey, target.charKey, 1))\r\n\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1, percent(0.08))\r\nconst nodeAsc1 = equal(activeInArea, 1, nodeAsc1Disp)\r\n\r\nconst correctWep =\r\n  lookup(target.weaponType,\r\n    { \"sword\": constant(1), \"claymore\": constant(1), \"polearm\": constant(1) }, constant(0));\r\n\r\nconst activeInAreaInfusion = equalStr(correctWep, 1, equalStr(activeInArea, 1, elementKey))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.burst_dmg_))\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_enemyRes_: nodeAsc4,\r\n      atkSPD_: nodeAsc1\r\n    },\r\n    infusion: {\r\n      team: activeInAreaInfusion,\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          activeInArea: {\r\n            fields: [{\r\n              text: trm(\"infusion\"),\r\n              variant: elementKey\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: (data) => data.get(subscript(input.total.skillIndex, datamine.skill.infusionDuration)).value,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }, {\r\n              node: infoMut(nodeAsc1Disp, { key: \"atkSPD_\" })\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          text: trm(\"blades\"),\r\n          value: data => data.get(input.constellation).value < 6 ? 3 : 4\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2` }),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        name: trm(\"asc4Cond\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeAsc4\r\n            }]\r\n          },\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:constellation1` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Collei_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Collei\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    leapDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[p1++][0],\r\n    sproutDmg: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    maxExtension: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    enerRech_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    sproutDmg: skillParam_gen.constellation2[0],\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    anbarDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst c1_enerRech_ = greaterEq(input.constellation, 1, datamine.constellation1.enerRech_)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst c4AfterBurst_eleMasDisp = greaterEq(input.constellation, 4,\r\n  equal(condAfterBurst, \"on\", datamine.constellation4.eleMas)\r\n)\r\nconst c4AfterBurst_eleMas = unequal(target.charKey, key, c4AfterBurst_eleMasDisp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n    leapDmg: dmgNode(\"atk\", datamine.burst.leapDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(percent(datamine.passive1.sproutDmg), input.total.atk), \"skill\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.anbarDmg), input.total.atk), \"elemental\", { hit: { ele: constant(elementKey) } })) // This is possibly burst damage\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  premod: {\r\n    enerRech_: c1_enerRech_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4AfterBurst_eleMas\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        },],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.leapDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condAfterBurstPath,\r\n        value: condAfterBurst,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.burst\"),\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c4AfterBurst_eleMasDisp, { key: \"eleMas\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:sproutDmg` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:miniAnbarDmg` })\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diluc_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, lookup, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Diluc\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c2i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    firstHit: skillParam_gen.skill[s++],\r\n    secondHit: skillParam_gen.skill[s++],\r\n    thridHit: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    slashDmg: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    stamReduction: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    durationInc: skillParam_gen.passive2[p2++][0],\r\n    pyroInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    dmgInc: skillParam_gen.constellation1[0],\r\n    hpThresh_: 0.5,\r\n  },\r\n  constellation2: {\r\n    atkInc: skillParam_gen.constellation2[c2i++],\r\n    atkSpdInc: skillParam_gen.constellation2[c2i++],\r\n    duration: skillParam_gen.constellation2[c2i++],\r\n    maxStack: skillParam_gen.constellation2[c2i++],\r\n    cd: skillParam_gen.constellation2[c2i++],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n    dmgInc: skillParam_gen.constellation6[c6i++],\r\n    atkSpdInc: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"Burst\")\r\nconst [condC1Path, condC1] = cond(key, \"DilucC1\")\r\nconst [condC2Path, condC2] = cond(key, \"DilucC2\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"pyro\")\r\nconst nodeA4Bonus = greaterEq(input.asc, 4, equal(condBurst, \"on\", datamine.passive2.pyroInc))\r\n\r\nconst nodeC1Bonus = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC2AtkBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkInc * i)])), 0, { key: \"atk_\" }))\r\nconst nodeC2SpdBonus = greaterEq(input.constellation, 2,\r\n  lookup(condC2, Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i => [i, constant(datamine.constellation2.atkSpdInc * i)])), 0, { key: \"atkSPD_\" }))\r\nconst nodeC6DmgBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.dmgInc))\r\nconst nodeC6SpdBonus = equal(condC6, \"on\", greaterEq(input.constellation, 6, datamine.constellation6.atkSpdInc), { key: \"atkSPD_\" })\r\n\r\nconst skillAdditional: Data = {\r\n  premod: { skill_dmg_: constant(datamine.constellation4.dmgInc) },\r\n  hit: { ele: constant(\"pyro\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    firstHit: dmgNode(\"atk\", datamine.skill.firstHit, \"skill\"),\r\n    secondHit: dmgNode(\"atk\", datamine.skill.secondHit, \"skill\"),\r\n    thirdHit: dmgNode(\"atk\", datamine.skill.thridHit, \"skill\"),\r\n  },\r\n  burst: {\r\n    slashDmg: dmgNode(\"atk\", datamine.burst.slashDmg, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\"),\r\n  },\r\n  constellation4: {\r\n    secondHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.secondHit, \"skill\", skillAdditional)),\r\n    thirdHitBoost: greaterEq(input.constellation, 4, dmgNode(\"atk\", datamine.skill.thridHit, \"skill\", skillAdditional)),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_: nodeA4Bonus,\r\n    atk_: nodeC2AtkBonus,\r\n    atkSPD_: sum(nodeC6SpdBonus, nodeC2SpdBonus),\r\n    all_dmg_: nodeC1Bonus,\r\n    normal_dmg_: nodeC6DmgBonus,\r\n  },\r\n  infusion: {\r\n    // CAUTION: Technically, this infusion is overridable,\r\n    // but it should also be higher prio than `team` because\r\n    // it refreshes faster than auras. So we put it here instead.\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.stamina}/s - ${datamine.passive1.stamReduction * 100}%` : `${datamine.charged.stamina}/s`,\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: data => data.get(input.asc).value >= 1 ? `${datamine.charged.duration}s + ${datamine.passive1.duration}` : datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.firstHit, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.secondHit, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thirdHit, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.secondHitBoost, { key: `char_${key}:skillB.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.thirdHitBoost, { key: `char_${key}:skillB.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6DmgBonus,\r\n            }, {\r\n              node: nodeC6SpdBonus\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slashDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.explosionDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.pyro\"),\r\n              variant: \"pyro\",\r\n            }, {\r\n              node: nodeA4Bonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: data => data.get(input.asc).value >= 4 ? `${datamine.burst.duration} + ${datamine.passive2.durationInc}` : datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"enemyGreaterPercentHP\", { percent: datamine.constellation1.hpThresh_ * 100 }),\r\n        canShow: greaterEq(input.constellation, 1, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1Bonus,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"takeDmg\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStack).map(i =>\r\n          [i, {\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: nodeC2AtkBonus\r\n            }, {\r\n              node: nodeC2SpdBonus\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Diona_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Diona\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    icyPawDmg: skillParam_gen.skill[s++],\r\n    shieldHp_: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    cdPress: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    fieldDmg: skillParam_gen.burst[b++],\r\n    healHp_: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    moveSpeed_: skillParam_gen.passive1[p1++][0], //+10% move speed\r\n    stamRed_: skillParam_gen.passive1[p1++][0], //Stamina consumption reduced by 10%\r\n  },\r\n  passive2: {\r\n    atkRed_: skillParam_gen.passive1[p2++][0], //Opponents inside burst -10% attack\r\n    duration: skillParam_gen.passive1[p2++][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    icyPawDmg_: skillParam_gen.constellation2[0], //Icy Paws +15% dmg\r\n    icyPawShield_: skillParam_gen.constellation2[1], //Icy paws +15% shield\r\n    coopShield_: skillParam_gen.constellation2[2], //Coop shield 50% of total shield\r\n    coopShieldDuration_: skillParam_gen.constellation2[3], //Coop shield lasts for 5s\r\n  },\r\n  constellation6: {\r\n    healingBonus_: skillParam_gen.constellation6[0],\r\n    emBonus: skillParam_gen.constellation6[1],\r\n  },\r\n} as const\r\n\r\nconst [condC6Path, condC6] = cond(key, \"Constellation6\")\r\nconst [condA1Path, condA1] = cond(key, \"Ascension1\")\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst nodeC2skillDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawDmg_))\r\n\r\n// Hold shield bonus is a separate multiplier\r\nconst holdSkillShieldStr_ = percent(1.75)\r\n// C2 Shield bonus modifies everything at the very end, it's not a shield strength bonus\r\n// 100% if not C2, 175% if C2 or higher\r\nconst nodeC2shieldStr_ = sum(percent(1), greaterEq(input.constellation, 2, percent(datamine.constellation2.icyPawShield_)))\r\nconst nodeSkillShieldPress = prod(nodeC2shieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\",))\r\nconst nodeSkillShieldHold = prod(nodeC2shieldStr_, holdSkillShieldStr_, shieldNodeTalent(\"hp\", datamine.skill.shieldHp_, datamine.skill.shieldFlat, \"skill\"))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    pressShield: nodeSkillShieldPress,\r\n    pressCryoShield: shieldElement(elementKey, nodeSkillShieldPress),\r\n    holdShield: nodeSkillShieldHold,\r\n    holdCryoShield: shieldElement(elementKey, nodeSkillShieldHold),\r\n    skillDmg: dmgNode(\"atk\", datamine.skill.icyPawDmg, \"skill\", {}),\r\n  },\r\n  burst: {\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n    fieldDmg: dmgNode(\"atk\", datamine.burst.fieldDmg, \"burst\"),\r\n    healDot: healNodeTalent(\"hp\", datamine.burst.healHp_, datamine.burst.healBase, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeA1MoveSpeed = equal(condA1, \"on\", percent(datamine.passive1.moveSpeed_),)\r\nconst nodeA1Stamina = equal(condA1, \"on\", percent(datamine.passive1.stamRed_),)\r\n\r\nconst nodeC6healing_Disp = equal(condC6, \"lower\", percent(datamine.constellation6.healingBonus_),)\r\nconst nodeC6healing_ = equal(input.activeCharKey, target.charKey, nodeC6healing_Disp)\r\nconst nodeC6emDisp = equal(condC6, \"higher\", datamine.constellation6.emBonus,)\r\nconst nodeC6em = equal(input.activeCharKey, target.charKey, nodeC6emDisp)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, premod: {\r\n    skill_dmg_: nodeC2skillDmg_,\r\n  }, teamBuff: {\r\n    premod: {\r\n      staminaDec_: nodeA1Stamina,\r\n      moveSPD_: nodeA1MoveSpeed,\r\n      eleMas: nodeC6em,\r\n      incHeal_: nodeC6healing_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressShield, { key: `sheet:dmgAbsorption.none` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.pressCryoShield, { key: `sheet:dmgAbsorption.cryo` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdShield, { key: `char_${key}:holdShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdCryoShield, { key: `char_${key}:holdCryoShield` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.skillDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"skillDuration\"),\r\n          value: data => datamine.skill.duration[data.get(input.total.skillIndex).value],\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        }, {\r\n          text: tr(`skill.skillParams.3`),\r\n          value: datamine.skill.cdPress,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(`skill.skillParams.4`),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\",\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(`a1shielded`),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1MoveSpeed,\r\n            }, {\r\n              node: nodeA1Stamina,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fieldDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.healDot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        teamBuff: true,\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          lower: {\r\n            name: st(\"lessEqPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6healing_Disp, { key: \"incHeal_\" }),\r\n            }]\r\n          },\r\n          higher: {\r\n            name: st(\"greaterPercentHP\", { percent: 50 }),\r\n            fields: [{\r\n              node: infoMut(nodeC6emDisp, { key: \"eleMas\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2skillDmg_ }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Dori_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, min, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Dori\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2.1\r\n      skillParam_gen.auto[a++], // 2.2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    shotDmg: skillParam_gen.skill[s++],\r\n    roundDmg: skillParam_gen.skill[s++],\r\n    numRounds: 2,\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    connectorDmg: skillParam_gen.burst[b++],\r\n    healMult: skillParam_gen.burst[b++],\r\n    healBase: skillParam_gen.burst[b++],\r\n    energyRegen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n    cd: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[0][0],\r\n    maxEnergyRegen: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation1: {\r\n    addlRounds: 1\r\n  },\r\n  constellation2: {\r\n    toopDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: 50,\r\n    energyThresh: 50,\r\n    incHeal_: skillParam_gen.constellation4[0],\r\n    enerRech_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    infusionDuration: skillParam_gen.constellation6[0],\r\n    heal_: skillParam_gen.constellation6[1],\r\n    cd: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condC4BelowHpPath, condC4BelowHp] = cond(key, \"c4BelowHp\")\r\nconst [condC4BelowEnerPath, condC4BelowEner] = cond(key, \"c4BelowEner\")\r\nconst c4BelowHp_incHeal_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowHp, \"belowHp\", datamine.constellation4.incHeal_)\r\n)\r\nconst c4BelowHp_incHeal_ = equal(input.activeCharKey, target.charKey, c4BelowHp_incHeal_disp)\r\nconst c4BelowEner_enerRech_disp = greaterEq(input.constellation, 4,\r\n  equal(condC4BelowEner, \"belowEner\", datamine.constellation4.enerRech_)\r\n)\r\nconst c4BelowEner_enerRech_ = equal(input.activeCharKey, target.charKey, c4BelowEner_enerRech_disp)\r\n\r\nconst [condC6AfterSkillPath, condC6AfterSkill] = cond(key, \"c6AfterSkill\")\r\nconst c6AfterSkill_infusion = greaterEqStr(input.constellation, 6, equalStr(condC6AfterSkill, \"on\", elementKey))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    shotDmg: dmgNode(\"atk\", datamine.skill.shotDmg, \"skill\"),\r\n    roundDmg: dmgNode(\"atk\", datamine.skill.roundDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    connectorDmg: dmgNode(\"atk\", datamine.burst.connectorDmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.healMult, datamine.burst.healBase, \"burst\")\r\n  },\r\n  passive2: {\r\n    energyRegen: greaterEq(input.asc, 4, min(prod(constant(datamine.passive2.energyRegen), input.total.enerRech_), constant(datamine.passive2.maxEnergyRegen)))\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        subscript(input.total.skillIndex, datamine.skill.shotDmg, { key: \"_\" }),\r\n        percent(datamine.constellation2.toopDmg, { key: `char_${key}:c2MultiplierKey_` }),\r\n        input.total.atk\r\n      ),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  },\r\n  constellation6: {\r\n    heal: greaterEq(input.constellation, 6, equal(condC6AfterSkill, \"on\",\r\n      customHealNode(prod(\r\n        percent(datamine.constellation6.heal_),\r\n        input.total.hp\r\n      ))\r\n    ))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6AfterSkill_infusion // This might end up being non-overridable, though I doubt it\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      incHeal_: c4BelowHp_incHeal_,\r\n      enerRech_: c4BelowEner_enerRech_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i > 1 ? i - 1 : i}` }),\r\n          textSuffix: i >= 1 && i < 3 ? `(${i})` : undefined\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.shotDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.roundDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.energyRegen, { key: \"sheet:energyRegen\"}),\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6AfterSkillPath,\r\n        value: condC6AfterSkill,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: <ColorText color={elementKey}>{st(`infusion.${elementKey}`)}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.infusionDuration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6Heal` ,variant: \"heal\" })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.connectorDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1`, variant: \"heal\" }),\r\n        }, {\r\n          text: st(\"energyRegen\"),\r\n          value: (data) => data.get(subscript(input.total.burstIndex, datamine.burst.energyRegen)).value,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:c2DmgKey` })\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        states: {\r\n          belowHp: {\r\n            path: condC4BelowHpPath,\r\n            value: condC4BelowHp,\r\n            name: trm(\"c4ConnectedBelowHp\"),\r\n            fields: [{\r\n              node: infoMut(c4BelowHp_incHeal_disp, { key: \"incHeal_\" }),\r\n            }]\r\n          },\r\n          belowEner: {\r\n            path: condC4BelowEnerPath,\r\n            value: condC4BelowEner,\r\n            name: trm(\"c4ConnectedBelowEner\"),\r\n            fields: [{\r\n              node: infoMut(c4BelowEner_enerRech_disp, { key: \"enerRech_\" }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Eula_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Eula\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    icewhirl: skillParam_gen.skill[s++],\r\n    physResDec: skillParam_gen.skill[s++],\r\n    cryoResDec: skillParam_gen.skill[s++],\r\n    resDecDuration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0],\r\n    defBonus: skillParam_gen.skill[s++][0],\r\n    unknown: skillParam_gen.skill[s++][0], // combined cooldown?\r\n    physResDecNegative: skillParam_gen.skill[s++],\r\n    cryoResDecNegative: skillParam_gen.skill[s++],\r\n    grimheartDuration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lightfallDmg: skillParam_gen.burst[b++],\r\n    dmgPerStack: skillParam_gen.burst[b++],\r\n    maxStack: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    physInc: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    dmgInc: skillParam_gen.constellation4[0],\r\n  },\r\n} as const\r\n\r\nconst [condGrimheartPath, condGrimheart] = cond(key, \"Grimheart\")\r\nconst [condLightfallSwordPath, condLightfallSword] = cond(key, \"LightfallSword\")\r\nconst [condC4Path, condC4] = cond(key, \"LightfallSwordC4\")\r\nconst [condTidalIllusionPath, condTidalIllusion] = cond(key, \"TidalIllusion\")\r\n\r\nconst def_ = sum(equal(\"stack1\", condGrimheart, percent(datamine.skill.defBonus)), equal(\"stack2\", condGrimheart, percent(2 * datamine.skill.defBonus)))\r\nconst cryo_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.cryoResDecNegative))\r\nconst physical_enemyRes_ = equal(\"consumed\", condGrimheart, subscript(input.total.skillIndex, datamine.skill.physResDecNegative))\r\nconst physical_dmg_ = equal(\"on\", condTidalIllusion, percent(datamine.constellation1.physInc))\r\n\r\nconst lightSwordAdditional: Data = {\r\n  premod: { burst_dmg_: equal(condC4, \"on\", constant(datamine.constellation4.dmgInc)) },\r\n  hit: { ele: constant(\"physical\") }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    icewhirl: dmgNode(\"atk\", datamine.skill.icewhirl, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lightFallSwordNew: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.burstIndex, datamine.burst.lightfallDmg, { key: '_' }),\r\n          prod(\r\n            lookup(condLightfallSword, objectKeyMap(range(1, 30), i => constant(i)), constant(0)),\r\n            subscript(input.total.burstIndex, datamine.burst.dmgPerStack, { key: '_' })\r\n          ),\r\n        ),\r\n        input.total.atk\r\n      ), \"burst\", lightSwordAdditional),\r\n  },\r\n  passive1: {\r\n    shatteredLightfallSword: prod(\r\n      percent(datamine.passive1.percentage),\r\n      dmgNode(\"atk\", datamine.burst.lightfallDmg, \"burst\", lightSwordAdditional))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"cryo\", \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_,\r\n    cryo_enemyRes_,\r\n    physical_enemyRes_,\r\n    physical_dmg_\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"cryo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.8\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.8\"),\r\n          value: `${datamine.skill.pressCd}`,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: `${datamine.skill.holdCd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: 2,\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.icewhirl, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condGrimheart,\r\n        path: condGrimheartPath,\r\n        name: trm(\"skillC.name\"),\r\n        states: {\r\n          \"stack1\": {\r\n            name: st(\"stack\", { count: 1 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"stack2\": {\r\n            name: st(\"stack\", { count: 2 }),\r\n            fields: [{\r\n              node: def_,\r\n            }, {\r\n              text: trm(\"skillC.grimheart.int\")\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.grimheartDuration,\r\n              unit: 's'\r\n            }]\r\n          },\r\n          \"consumed\": {\r\n            name: trm(\"skillC.consumed\"),\r\n            fields: [{\r\n              node: cryo_enemyRes_,\r\n            }, {\r\n              node: physical_enemyRes_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: 7,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lightFallSwordNew, { key: `char_${key}:burstC.dmg` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 7,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condLightfallSword,\r\n        path: condLightfallSwordPath,\r\n        name: trm(\"burstC.name\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 30), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.start5\"),\r\n            }, {\r\n              canShow: data => data.get(input.constellation).value >= 6,\r\n              text: trm(\"burstC.addStacks\"),\r\n            }]\r\n          })),\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c4C.desc\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.shatteredLightfallSword, { key: `char_${key}:passive1` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condTidalIllusion,\r\n        path: condTidalIllusionPath,\r\n        name: trm(\"c1C.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: physical_dmg_,\r\n            }, {\r\n              text: sgt('duration'),\r\n              value: trm('c1C.durationStack')\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Fischl_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, lessThan, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Fischl\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    ozDmg: skillParam_gen.skill[s++],\r\n    summonDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    dmg: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0]\r\n  },\r\n  constellation2: {\r\n    dmg: skillParam_gen.constellation2[0]\r\n  },\r\n  constellation4: {\r\n    dmg: skillParam_gen.constellation4[0],\r\n    regen: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } }),\r\n    aimedChargedOz: greaterEq(input.asc, 1, prod(percent(datamine.passive1.dmg), dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('electro') } })))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ozDmg: dmgNode(\"atk\", datamine.skill.ozDmg, \"skill\"),\r\n    summonDmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.summonDmg, \"skill\")),\r\n    summonDmgC2: greaterEq(input.constellation, 2, customDmgNode(prod(sum(subscript(input.total.skillIndex,\r\n      datamine.skill.summonDmg, { key: \"_\" }), percent(datamine.constellation2.dmg)), input.total.atk), \"skill\",\r\n      { hit: { ele: constant('electro') } })),\r\n    ozActiveCharDmg: greaterEq(input.constellation, 6, customDmgNode(prod(input.total.atk, percent(datamine.constellation6.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    additionalDmg: greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.dmg)), \"burst\", { hit: { ele: constant('electro') } })),\r\n    regen: greaterEq(input.constellation, 4, customHealNode(prod(input.total.hp, percent(datamine.constellation4.regen))))\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, customDmgNode(prod(input.total.atk, percent(datamine.passive2.dmg)), \"skill\", { hit: { ele: constant('electro') } }))\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, percent(datamine.constellation1.dmg)), \"normal\", { hit: { ele: constant('physical') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.asc).value >= 1,\r\n          node: infoMut(dmgFormulas.charged.aimedChargedOz, { key: `char_${key}:a1Name` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.ozDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value < 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          node: infoMut(dmgFormulas.skill.summonDmgC2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 6,\r\n          node: infoMut(dmgFormulas.skill.ozActiveCharDmg, { key: `char_${key}:c6OzDmg` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: (data) => data.get(input.constellation).value >= 6 ? datamine.skill.duration + datamine.constellation6.duration : datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"aoeInc\"),\r\n          value: 50,\r\n          unit: \"%\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.additionalDmg, { key: `char_${key}:c4AoeDmg` }),\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 4,\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `sheet_gen:healing` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:a2Name` })\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1Name` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ganyu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ganyu\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"liyue\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    frostflake: skillParam_gen.auto[a++],\r\n    frostflakeBloom: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    inheritedHp: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    cryoDmgBonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    opCryoRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    enerRegen: skillParam_gen.constellation1[2],\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"A1\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\nconst cryo_enemyRes_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.opCryoRes)))\r\nconst cryo_dmg_disp = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.cryoDmgBonus)))\r\nconst cryo_dmg_ = equal(input.activeCharKey, target.charKey, cryo_dmg_disp)\r\nconst all_dmg_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4, Object.fromEntries(range(1, 5).map(i => [i, percent(0.05 * i)])), naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('cryo') } }),\r\n    frostflake: dmgNode(\"atk\", datamine.charged.frostflake, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n    frostflakeBloom: dmgNode(\"atk\", datamine.charged.frostflakeBloom, \"charged\",\r\n      { premod: { critRate_: greaterEq(input.asc, 1, equal(condA1, \"on\", percent(datamine.passive1.critRateInc))) }, hit: { ele: constant('cryo') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    inheritedHp: prod(subscript(input.total.skillIndex, datamine.skill.inheritedHp), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmg_,\r\n      all_dmg_,\r\n      cryo_enemyRes_,\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflake, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.frostflakeBloom, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"a1.critRateInc\"),\r\n              value: datamine.passive1.critRateInc * 100,\r\n              unit: \"%\"\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.passive1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1.condName\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: cryo_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: `${datamine.constellation1.duration}s`,\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.inheritedHp, { key: `char_${key}_gen:skill.skillParams.0`, variant: \"heal\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 2,\r\n          text: st(\"charges\"),\r\n          value: 2,\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(cryo_dmg_disp, { key: \"cryo_dmg_\", variant: \"cryo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: Object.fromEntries(range(1, 5).map(i => [i, {\r\n          name: st(\"seconds\", { count: (i - 1) * 3 }),\r\n          fields: [{ node: all_dmg_ }, { text: trm(\"c4.lingerDuration\"), value: 3, unit: \"s\" }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Gorou_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Gorou\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    defInc: skillParam_gen.skill[s++],\r\n    geo_dmg_: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg_def: skillParam_gen.burst[b++],\r\n    crystalDmg_def: skillParam_gen.burst[b++],\r\n    crystalHits: 6,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    def_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation4: {\r\n    heal_def_: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    geo_critDMG_: [\r\n      skillParam_gen.constellation6[0],\r\n      skillParam_gen.constellation6[1],\r\n      skillParam_gen.constellation6[2],\r\n      skillParam_gen.constellation6[2],\r\n    ] as number[],\r\n    duration: skillParam_gen.constellation6[3]\r\n  }\r\n} as const\r\n\r\nconst [condInFieldPath, condInField] = cond(key, \"inField\")\r\nconst skill1_defDisp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 1,\r\n    subscript(input.total.skillIndex, datamine.skill.defInc)\r\n  )\r\n)\r\nconst skill1_def = equal(input.activeCharKey, target.charKey, skill1_defDisp)\r\nconst skill3_geo_dmg_Disp = equal(condInField, \"inField\",\r\n  greaterEq(tally[\"geo\"], 3, datamine.skill.geo_dmg_)\r\n)\r\nconst skill3_geo_dmg_ = equal(input.activeCharKey, target.charKey, skill3_geo_dmg_Disp)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_def_ = greaterEq(input.asc, 1, equal(condAfterBurst, \"afterBurst\", datamine.passive1.def_))\r\n\r\nconst p2_skill_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.skill_dmgInc))\r\nconst p2_burst_dmgInc = greaterEq(input.asc, 4, prod(input.total.def, datamine.passive2.burst_dmgInc))\r\n\r\nconst [condAfterSkillBurstPath, condAfterSkillBurst] = cond(key, \"afterSkillBurst\")\r\nconst c6_geo_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condAfterSkillBurst, \"afterSkillBurst\",\r\n    subscript(sum(tally[\"geo\"], -1), datamine.constellation6.geo_critDMG_)\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"def\", datamine.burst.dmg_def, \"burst\"),\r\n    crystalCollapse: dmgNode(\"def\", datamine.burst.crystalDmg_def, \"burst\")\r\n  },\r\n  constellation4: {\r\n    heal: greaterEq(input.constellation, 4, greaterEq(tally[\"geo\"], 2, healNode(\"def\", datamine.constellation4.heal_def_, 0)))\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      def: skill1_def,\r\n      geo_dmg_: skill3_geo_dmg_,\r\n      def_: afterBurst_def_,\r\n      geo_critDMG_: c6_geo_critDMG_,\r\n    }\r\n  },\r\n  premod: {\r\n    skill_dmgInc: p2_skill_dmgInc,\r\n    burst_dmgInc: p2_burst_dmgInc,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInField,\r\n        path: condInFieldPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          inField: {\r\n            fields: [{\r\n              node: infoMut(skill1_defDisp, { key: \"def\" }),\r\n            }, {\r\n              canShow: data => data.get(tally[\"geo\"]).value >= 2,\r\n              text: st(\"incInterRes\")\r\n            }, {\r\n              node: infoMut(skill3_geo_dmg_Disp, { key: \"geo_dmg_\", variant: \"geo\" }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        canShow: greaterEq(tally.geo, 2, 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.heal, { key: \"sheet_gen:healing\" }),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.crystalCollapse, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.crystalHits })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurst_def_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p2_burst_dmgInc\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condAfterSkillBurst,\r\n        path: condAfterSkillBurstPath,\r\n        name: st(\"afterUse.skillOrBurst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterSkillBurst: {\r\n            fields: [{\r\n              node: c6_geo_critDMG_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Hu_Tao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lessThan, min, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"HuTao\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    activationCost: skillParam_gen.skill[s++][0],\r\n    atkInc: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    bloodBlossomDuration: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxAtkInc: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    lowHpDmg: skillParam_gen.burst[b++],\r\n    regen: skillParam_gen.burst[b++],\r\n    lowHpRegen: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    minHp: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    critRateInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    minHp: skillParam_gen.passive2[p2++][0],\r\n    pyroDmgInc: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    bloodBlossomDmgInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    critRateInc: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    minHp: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    elePhysResInc: skillParam_gen.constellation6[2],\r\n    critRateInc: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condAfterlifePath, condAfterlife] = cond(key, \"GuideToAfterlifeVoyage\")\r\nconst atk = equal(\"on\", condAfterlife, min(\r\n  prod(subscript(input.total.skillIndex, datamine.skill.atkInc), input.premod.hp),\r\n  prod(percent(datamine.skill.maxAtkInc), input.base.atk)))\r\nconst infusion = equalStr(\"on\", condAfterlife, elementKey)\r\n\r\nconst [condA1Path, condA1] = cond(key, \"FlutterBy\")\r\nconst critRateTeam_1 = equal(\"on\", condA1, unequal(input.activeCharKey, input.charKey, percent(datamine.passive1.critRateInc), { key: \"critRate_\" }))\r\nconst [condA2Path, condA2] = cond(key, \"SanguineRouge\")\r\nconst pyro_dmg_ = equal(\"on\", condA2, percent(datamine.passive2.pyroDmgInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"GardenOfEternalRest\")\r\nconst critRateTeam_2 = equal(\"on\", condC4, unequal(input.activeCharKey, input.charKey, percent(datamine.constellation4.critRateInc), { key: \"critRate_\" }))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"ButterflysEmbrace\")\r\nconst critRate_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.critRateInc)))\r\nconst ele_res_s = Object.fromEntries(allElementsWithPhy.map(ele => [ele, equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.elePhysResInc)))]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n    dmgC2: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\", { hit: { dmgInc: prod(input.total.hp, datamine.constellation2.bloodBlossomDmgInc) } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    lowHpDmg: dmgNode(\"atk\", datamine.burst.lowHpDmg, \"burst\"),\r\n    regen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.regen, { key: \"_\" }))),\r\n    lowHpRegen: customHealNode(prod(input.total.hp, subscript(input.total.burstIndex, datamine.burst.lowHpRegen, { key: \"_\" }))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    pyro_dmg_,\r\n    ...Object.fromEntries(allElementsWithPhy.map(ele => [`${ele}_res_`, ele_res_s[ele]])),\r\n    critRate_\r\n  },\r\n  total: {\r\n    atk\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: sum(critRateTeam_1, critRateTeam_2)\r\n    }\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmgC2, { key: `char_${key}:constellation2.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.bloodBlossomDuration,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condAfterlife,\r\n        path: condAfterlifePath,\r\n        name: trm(\"paramita.enter\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.0\"),\r\n              value: datamine.skill.activationCost * 100, // Convert to percentage\r\n              unit: '% Current HP'\r\n            }, {\r\n              node: atk,\r\n            }, {\r\n              text: <ColorText color=\"pyro\">Pyro Infusion</ColorText>\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: tr(\"skill.skillParams.5\"),\r\n              value: datamine.skill.cd,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.lowHpRegen, { key: `char_${key}_gen:burst.skillParams.3` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value > 1,\r\n          text: trm(\"constellation2.applyBloodBlossom\"),\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"paramita.end\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_1,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA2,\r\n        path: condA2Path,\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive2.minHp * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"constellation4.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRateTeam_2,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"constellation6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [...allElementsWithPhy.map(ele => ({ node: ele_res_s[ele] })), {\r\n              node: critRate_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: 60,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Jean_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Jean\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    stamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    enterExitDmg: skillParam_gen.burst[b++],\r\n    burstActivationAtkModifier: skillParam_gen.burst[b++],\r\n    burstActionFlatModifier: skillParam_gen.burst[b++],\r\n    burstRegenAtkModifier: skillParam_gen.burst[b++],\r\n    burstRegenFlatModifier: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    chance: skillParam_gen.passive1[p1++][0],\r\n    atkPercentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    energyRegen: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    increaseDmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    moveSpd: skillParam_gen.constellation2[0],\r\n    atkSpd: skillParam_gen.constellation2[1],\r\n    duration: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation4: {\r\n    anemoRes: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    dmgReduction: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst regen = healNodeTalent(\"atk\", datamine.burst.burstActivationAtkModifier, datamine.burst.burstActionFlatModifier, \"burst\")\r\nconst contRegen = healNodeTalent(\"atk\", datamine.burst.burstRegenAtkModifier, datamine.burst.burstRegenFlatModifier, \"burst\")\r\nconst a1Regen = greaterEq(input.asc, 1, customHealNode(prod(percent(datamine.passive1.atkPercentage), input.total.atk)))\r\n\r\nconst [condC1Path, condC1] = cond(key, \"c1\")\r\nconst skill_dmg_ = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.increaseDmg))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst atkSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.atkSpd)))\r\nconst moveSPD_ = equal(condC2, \"on\", greaterEq(input.constellation, 2, percent(datamine.constellation2.moveSpd)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst anemo_enemyRes_ = equal(condC4, \"on\", greaterEq(input.constellation, 4, percent(-Math.abs(datamine.constellation4.anemoRes))))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst dmgRed_disp = equal(condC6, \"on\", greaterEq(input.constellation, 6, percent(datamine.constellation6.dmgReduction)))\r\nconst dmgRed_ = equal(input.activeCharKey, target.charKey, dmgRed_disp)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    enterExitDmg: dmgNode(\"atk\", datamine.burst.enterExitDmg, \"burst\"),\r\n    regen,\r\n    contRegen\r\n  },\r\n  passive1: {\r\n    a1Regen\r\n  },\r\n  constellation2: {\r\n    atkSPD_,\r\n    moveSPD_\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atkSPD_,\r\n      moveSPD_,\r\n      anemo_enemyRes_,\r\n      dmgRed_\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: `${datamine.skill.stamina}`,\r\n          unit: \"/s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }],\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"c1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: trm(\"c1PullSpeed\")\r\n            }, {\r\n              node: skill_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.enterExitDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.regen, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.contRegen, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: 11,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: anemo_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgRed_disp, { key: \"dmgRed_\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.a1Regen, { key: `sheet_gen:healing` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: st(\"energyRegen\"),\r\n          value: datamine.passive2.energyRegen\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atkSPD_\r\n            }, {\r\n              node: moveSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kazuha_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, percent, prod, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, condReadNode, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KaedeharaKazuha\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5x3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    hold: skillParam_gen.skill[s++],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    add: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    asorbAdd: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    elemas_dmg_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    elemas: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst condSwirlPaths = Object.fromEntries(absorbableEle.map(e => [e, [key, `swirl${e}`]]))\r\nconst condSwirls = Object.fromEntries(absorbableEle.map(e => [e, condReadNode(condSwirlPaths[e])]))\r\nconst asc4 = Object.fromEntries(absorbableEle.map(ele =>\r\n  [`${ele}_dmg_`, greaterEq(input.asc, 4,\r\n    equal(ele, condSwirls[ele],\r\n      // Use premod since this is a percentage-based effect\r\n      prod(percent(datamine.passive2.elemas_dmg_, { fixed: 2 }), input.premod.eleMas)\r\n    ))]))\r\n\r\n// 2 C2 conds for the 2 parts of his C2\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2EleMas = greaterEq(input.constellation, 2,\r\n  equal(\"c2\", condC2, datamine.constellation2.elemas))\r\n\r\nconst [condC2PPath, condC2P] = cond(key, \"c2p\")\r\nconst c2PEleMasDisp = greaterEq(input.constellation, 2,\r\n  equal(\"c2p\", condC2P, datamine.constellation2.elemas)\r\n)\r\nconst c2PEleMas = equal(input.activeCharKey, target.charKey, // Apply to active character\r\n  unequal(target.charKey, key, c2PEleMasDisp) // But not to Kazuha\r\n)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6infusion = greaterEqStr(input.constellation, 6,\r\n  equalStr(\"c6\", condC6, \"anemo\"))\r\nconst c6Dmg_ = greaterEq(input.constellation, 6,\r\n  // Not sure if this should be premod or total. I am guessing premod\r\n  equal(\"c6\", condC6, prod(percent(datamine.constellation6.auto_), input.premod.eleMas))\r\n)\r\n// Share `match` and `prod` between the three nodes\r\nconst c6NormDmg_ = { ...c6Dmg_ }\r\nconst c6ChargedDmg_ = { ...c6Dmg_ }\r\nconst c6PlungingDmg_ = { ...c6Dmg_ }\r\n\r\nconst passive = percent(0.2)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n    pdmg: dmgNode(\"atk\", datamine.plunging.dmg, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    plow: dmgNode(\"atk\", datamine.plunging.low, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n    phigh: dmgNode(\"atk\", datamine.plunging.high, \"plunging\", { hit: { ele: constant(\"anemo\") } }),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condBurstAbsorption, key, dmgNode(\"atk\", datamine.burst.add, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n  passive1: Object.fromEntries(absorbableEle.map(key =>\r\n    [key, equal(condSkillAbsorption, key, customDmgNode(prod(input.total.atk, datamine.passive1.asorbAdd), \"plunging\", { hit: { ele: constant(key) } }))])),\r\n  passive2: asc4,\r\n  constellation6: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      staminaSprintDec_: passive,\r\n      eleMas: c2PEleMas,\r\n    },\r\n    total: {\r\n      // Should be in total, since other character abilities should not scale off this\r\n      // if those abilities are percentage-based (e.g. XQ skill dmg red.)\r\n      ...asc4,\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: c6infusion,\r\n  },\r\n  total: {\r\n    normal_dmg_: c6NormDmg_,\r\n    charged_dmg_: c6ChargedDmg_,\r\n    plunging_dmg_: c6PlungingDmg_,\r\n  },\r\n  premod: {\r\n    eleMas: c2EleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 3 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? \"(1)\" : i === 3 ? \"(2)\" : i === 5 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 10% = ${datamine.skill.cd * (1 - 0.10)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cdHold} - 10% = ${datamine.skill.cdHold * (1 - 0.10)}`\r\n            : `${datamine.skill.cdHold}`,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"skill\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pdmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.plow, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.phigh, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(greaterEq(input.constellation, 1, percent(0.1)), { key: \"skillCDRed_\" })\r\n        }, {\r\n          text: trm(\"c1\"),\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Burst absorption\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.2` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 self\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2EleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation2\", { // C2 Party\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        value: condC2P,\r\n        path: condC2PPath,\r\n        teamBuff: true,\r\n        name: st(\"activeCharField\"),\r\n        states: {\r\n          c2p: {\r\n            fields: [{\r\n              node: infoMut(c2PEleMasDisp, { key: \"eleMas\" })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Skill Absorption\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.passive1[eleKey], { key: `sheet_gen:addEleDMG` }),\r\n          }]\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", { // Poetics of Fuubutsu\r\n        teamBuff: true,\r\n        states: Object.fromEntries(absorbableEle.map(ele => [ele, {\r\n          value: condSwirls[ele],\r\n          path: condSwirlPaths[ele],\r\n          name: st(`swirlReaction.${ele}`),\r\n          fields: [{\r\n            node: asc4[`${ele}_dmg_`]\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }]))\r\n        }), ct.conditionalTemplate(\"constellation2\", { // C2 self, in teambuff panel\r\n        value: condC2,\r\n        path: condC2Path,\r\n        // Show C2 self buff if A4 is enabled\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key,\r\n          greaterEq(input.asc, 4,\r\n            sum(...Object.values(condSwirls).map(val => unequal(val, undefined, 1)))\r\n          )\r\n        ),\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2EleMas\r\n            }]\r\n          }\r\n        }\r\n      })\r\n      ]),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{\r\n          node: passive\r\n        }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        // Crimson Momiji\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6.after\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              canShow: data => data.get(c6infusion).value === elementKey,\r\n              text: <ColorText color={elementKey}>{st(\"infusion.anemo\")}</ColorText>\r\n            }, {\r\n              node: c6NormDmg_\r\n            }, {\r\n              node: c6ChargedDmg_\r\n            }, {\r\n              node: c6PlungingDmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kaeya_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNode, shieldElement, shieldNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Kaeya\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst region: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    healAtk_: .15,\r\n  },\r\n  constellation1: {\r\n    critRate_: .15,\r\n  },\r\n  constellation4: {\r\n    shieldHp_: 0.30,\r\n    duration: 20,\r\n    cooldown: 60,\r\n  },\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    heal: healNode(\"atk\", percent(datamine.passive2.healAtk_), 0),\r\n  },\r\n  constellation4: {\r\n    shield: greaterEq(input.constellation, 4, shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0)),\r\n    cryoShield: greaterEq(input.constellation, 4, shieldElement(\"cryo\", shieldNode(\"hp\", percent(datamine.constellation4.shieldHp_), 0))),\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\n//Conditional C1: Oppo affected by Cryo\r\nconst [condC1Path, condC1Cryo] = cond(key, \"CryoC1\")\r\nconst nodeC1NormalCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\nconst nodeC1ChargeCritRate = equal(condC1Cryo, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.critRate_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  }, premod: {\r\n    normal_critRate_: nodeC1NormalCritRate,\r\n    charged_critRate_: nodeC1ChargeCritRate,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"c2burstDuration\"),\r\n        }],\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.heal, { key: `char_${key}:p1heal` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Cryo,\r\n        path: condC1Path,\r\n        name: trm(\"c1cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalCritRate\r\n            }, {\r\n              node: nodeC1ChargeCritRate\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.shield, { key: `sheet:dmgAbsorption.none` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.cryoShield, { key: `sheet:dmgAbsorption.cryo` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.constellation4.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.constellation4.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayaka_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyaka\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1x3\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    cutDmg: skillParam_gen.burst[b++],\r\n    bloomDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n    duration: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    dmg_bonus: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    stamina: skillParam_gen.passive2[p2++][0],\r\n    cryo: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    snowflake: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_red: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    cd: skillParam_gen.constellation6[0],\r\n    charged_bonus: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condAfterSprintPath, condAfterSprint] = cond(key, \"afterSprint\")\r\nconst afterSprintInfusion = equalStr(\"afterSprint\", condAfterSprint, elementKey)\r\n\r\nconst [condAfterSkillA1Path, condAfterSkillA1] = cond(key, \"afterSkillA1\")\r\nconst a1NormDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus))\r\nconst a1ChargedDmg_ = equal(\"afterSkill\", condAfterSkillA1, percent(datamine.passive1.dmg_bonus), { key: \"charged_dmg_\" })\r\n\r\nconst [condAfterApplySprintPath, condAfterApplySprint] = cond(key, \"afterApplySprint\")\r\nconst afterApplySprintCryo = equal(\"afterApplySprint\", condAfterApplySprint, percent(datamine.passive2.cryo))\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condAfterBurst, datamine.constellation4.def_red))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"C6\")\r\nconst c6ChargedDmg_ = greaterEq(input.constellation, 6,\r\n  equal(\"c6\", condC6, datamine.constellation6.charged_bonus), { key: `charged_dmg_` })\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    cutting: dmgNode(\"atk\", datamine.burst.cutDmg, \"burst\"),\r\n    bloom: dmgNode(\"atk\", datamine.burst.bloomDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, customDmgNode(prod(\r\n      subscript(input.total.burstIndex, datamine.burst.cutDmg, { key: \"_\" }),\r\n      percent(datamine.constellation2.snowflake),\r\n      input.total.atk,\r\n    ), \"burst\", { hit: { ele: constant(elementKey) } })),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: afterBurst\r\n    }\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterSprintInfusion,\r\n  },\r\n  premod: {\r\n    normal_dmg_: a1NormDmg_,\r\n    charged_dmg_: sum(a1ChargedDmg_, c6ChargedDmg_),\r\n    cryo_dmg_: afterApplySprintCryo,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 3 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterSkillA1,\r\n        path: condAfterSkillA1Path,\r\n        name: trm(\"afterSkill\"),\r\n        states: {\r\n          afterSkill: {\r\n            fields: [{\r\n              node: a1NormDmg_,\r\n            }, {\r\n              node: a1ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.cutting, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.bloom, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: trm(\"dmgBySnowflake\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: afterBurst\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: \"6s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"sprint\", {\r\n        value: condAfterSprint,\r\n        path: condAfterSprintPath,\r\n        name: trm(\"afterSprint\"),\r\n        states: {\r\n          afterSprint: {\r\n            fields: [{\r\n              canShow: data => data.get(afterSprintInfusion).value === elementKey,\r\n              text: <ColorText color=\"cryo\">{st(\"infusion.cryo\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.sprint.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterApplySprint,\r\n        path: condAfterApplySprintPath,\r\n        name: trm(\"afterSprintCryo\"),\r\n        states: {\r\n          afterApplySprint: {\r\n            fields: [{\r\n              text: trm(\"staminaRestore\"),\r\n              value: datamine.passive2.stamina,\r\n            }, {\r\n              node: afterApplySprintCryo\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:snowflakeDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: trm(\"c6Active\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ChargedDmg_,\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kamisato_Ayato_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KamisatoAyato\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmgArr: [\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n      skillParam_gen.skill[s++],\r\n    ],\r\n    stateDuration: skillParam_gen.skill[s++][0],\r\n    stackHpDmgInc: skillParam_gen.skill[s++],\r\n    maxStacks: 4,\r\n    illusionDmg: skillParam_gen.skill[s++],\r\n    illusionDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    normal_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    stacksGained: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerThres_: skillParam_gen.passive2[0][0],\r\n    cd: skillParam_gen.passive2[1][0],\r\n    energyRestore: skillParam_gen.passive2[2][0]\r\n  },\r\n  constellation1: {\r\n    oppHpThres_: skillParam_gen.constellation1[0],\r\n    shunDmg_: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    extraStacks: skillParam_gen.constellation2[0],\r\n    stackThresh: 3,\r\n    hp_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    atkSPD: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    extraStrikes: 2,\r\n    dmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condInSkillPath, condInSkill] = cond(key, \"inSkill\")\r\n\r\nconst [condSkillStacksPath, condSkillStacks] = cond(key, \"skillStacks\")\r\nconst skillStacks_dmgInc = equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(1, 5).map(stacks => [\r\n    stacks,\r\n    prod(\r\n      stacks,\r\n      subscript(input.total.skillIndex, datamine.skill.stackHpDmgInc, { key: \"_\" }),\r\n      input.total.hp,\r\n    )\r\n  ])), naught)\r\n)\r\n\r\nconst [condBurstInAreaPath, condBurstInArea] = cond(key, \"burstInArea\")\r\nconst burst_normal_dmg_Disp = equal(condBurstInArea, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.normal_dmg_)\r\n)\r\nconst burst_normal_dmg_ = equal(input.activeCharKey, target.charKey, burst_normal_dmg_Disp)\r\n\r\nconst [condC1OppHpPath, condC1OppHp] = cond(key, \"c1OppHp\")\r\nconst c1Shun_dmg_ = greaterEq(input.constellation, 1, equal(condC1OppHp, \"on\", datamine.constellation1.shunDmg_))\r\n\r\n// Not sure what \"Max HP increased by 50%\" means\r\nconst c2_hp_ = greaterEq(input.constellation, 2, equal(condInSkill, \"on\",\r\n  lookup(condSkillStacks, Object.fromEntries(range(datamine.constellation2.stackThresh, 5).map(stacks => [\r\n    stacks,\r\n    percent(datamine.constellation2.hp_)\r\n  ])), naught)\r\n))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\nconst c4_atkSPD_ = greaterEq(input.constellation, 4, equal(condC4AfterBurst, \"on\", datamine.constellation4.atkSPD))\r\n\r\nconst shunAddl: Data = {\r\n  hit: {\r\n    ele: constant(elementKey)\r\n  },\r\n  premod: {\r\n    normal_dmgInc: skillStacks_dmgInc,\r\n    normal_dmg_: c1Shun_dmg_\r\n  }\r\n}\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    ...Object.fromEntries(datamine.skill.dmgArr.map((arr, i) =>\r\n      [`dmg${i}`, equal(condInSkill, \"on\", customDmgNode(prod(\r\n        subscript(input.total.skillIndex, arr, { key: \"_\" }),\r\n        input.total.atk,\r\n      ), \"normal\", shunAddl))])),\r\n    illusionDmg: dmgNode(\"atk\", datamine.skill.illusionDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation6: {\r\n    // Not sure if this benefits from C1 or not\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"normal\", { hit: { ele: constant(elementKey) }, premod: { normal_dmg_: c1Shun_dmg_ } }))\r\n  }\r\n}\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmg_: burst_normal_dmg_,\r\n      atkSPD_: c4_atkSPD_,\r\n    }\r\n  },\r\n  premod: {\r\n    hp_: c2_hp_,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields:\r\n          datamine.normal.hitArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n            textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n          }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.illusionDmg, { key: `char_${key}_gen:skill.skillParams.5` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: datamine.skill.illusionDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condInSkill,\r\n        path: condInSkillPath,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          on: {\r\n            fields: [\r\n              ...datamine.skill.dmgArr.map((_, i) => ({\r\n                node: infoMut(dmgFormulas.skill[`dmg${i}`], { key: `char_${key}_gen:skill.skillParams.${i}` })\r\n              })), {\r\n                text: st(\"incInterRes\"),\r\n              }, {\r\n                text: trm(\"skill.unableToAuto\"),\r\n              }, {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.stateDuration,\r\n                unit: \"s\"\r\n              }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillStacks,\r\n        path: condSkillStacksPath,\r\n        name: trm(\"skill.namisenStacks\"),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: Object.fromEntries(range(1, 5).map(stacks => [\r\n          stacks, {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(skillStacks_dmgInc, { key: `char_${key}:skill.shun_dmgInc` })\r\n            }, {\r\n              text: st(\"maxStacks\"),\r\n              value: data => data.get(input.constellation).value >= 2\r\n                ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n                : datamine.skill.maxStacks\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          text: trm(\"passive1.afterUse\"),\r\n          value: datamine.passive1.stacksGained,\r\n        }, {\r\n          text: trm(\"passive1.afterExplode\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? datamine.skill.maxStacks + datamine.constellation2.extraStacks\r\n            : datamine.skill.maxStacks\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1OppHp,\r\n        path: condC1OppHpPath,\r\n        name: st(\"enemyLessEqPercentHP\", { percent: datamine.constellation1.oppHpThres_ * 100 }),\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c1Shun_dmg_, { key: `char_${key}:c1.shun_dmg_` }),\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2.addlStacks\"),\r\n          value: datamine.constellation2.extraStacks,\r\n        }, {\r\n          canShow: data => data.get(c2_hp_).value !== 0,\r\n          node: c2_hp_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condInSkill, \"on\", 1),\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: `char_${key}:c6.dmg` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.constellation6.extraStrikes })\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstInArea,\r\n        path: condBurstInAreaPath,\r\n        name: st(\"activeCharField\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(burst_normal_dmg_Disp, { key: \"normal_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4_atkSPD_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Keqing_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, greaterEqStr, infoMut, lookup, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Keqing\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    dmg2: skillParam_gen.auto[a++], // 2\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stiletto: skillParam_gen.skill[s++],\r\n    slash: skillParam_gen.skill[s++],\r\n    thunderclap: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    initial: skillParam_gen.burst[b++],\r\n    slash: skillParam_gen.burst[b++],\r\n    final: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    critInc_: skillParam_gen.passive2[p2++][0],\r\n    enerRechInc_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    dmg: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation4: {\r\n    duration: skillParam_gen.constellation4[0],\r\n    atkInc: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    electroInc: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stiletto: dmgNode(\"atk\", datamine.skill.stiletto, \"skill\"),\r\n    slash: dmgNode(\"atk\", datamine.skill.slash, \"skill\"),\r\n    thunderclap: dmgNode(\"atk\", datamine.skill.thunderclap, \"skill\"),\r\n  },\r\n  burst: {\r\n    initial: dmgNode(\"atk\", datamine.burst.initial, \"burst\"),\r\n    slash: dmgNode(\"atk\", datamine.burst.slash, \"burst\"),\r\n    final: dmgNode(\"atk\", datamine.burst.final, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.atk, datamine.constellation1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condAfterRecastPath, condAfterRecast] = cond(key, \"afterRecast\")\r\nconst afterRecastInfusion = equalStr(\"afterRecast\", condAfterRecast,\r\n  greaterEqStr(input.asc, 1, elementKey)\r\n)\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurstCritRate_ = greaterEq(input.asc, 4, equal(\"afterBurst\", condAfterBurst, percent(datamine.passive2.critInc_)))\r\nconst afterBurstEnerRech_ = { ...afterBurstCritRate_ }\r\n\r\nconst [condAfterReactPath, condAfterReact] = cond(key, \"afterReact\")\r\nconst afterReactAtk_ = greaterEq(input.constellation, 4, equal(\"afterReact\", condAfterReact, percent(datamine.constellation4.atkInc)))\r\n\r\nconst [condC6StackPath, condC6Stack] = cond(key, \"c6Stack\")\r\nconst c6Electro_dmg_ = greaterEq(input.constellation, 6,\r\n  prod(\r\n    lookup(condC6Stack, objectKeyMap(range(1, 4), i => constant(i)), constant(0)),\r\n    datamine.constellation6.electroInc\r\n  )\r\n)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  infusion: {\r\n    overridableSelf: afterRecastInfusion,\r\n  },\r\n  premod: {\r\n    critRate_: afterBurstCritRate_,\r\n    enerRech_: afterBurstEnerRech_,\r\n    atk_: afterReactAtk_,\r\n    electro_dmg_: c6Electro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }\r\n          ),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stiletto, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.slash, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.thunderclap, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condAfterRecast,\r\n        path: condAfterRecastPath,\r\n        name: trm(\"recast\"),\r\n        states: {\r\n          afterRecast: {\r\n            fields: [{\r\n              canShow: data => data.get(afterRecastInfusion).value === elementKey,\r\n              text: <ColorText color=\"electro\">{st(\"infusion.electro\")}</ColorText>\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.initial, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.slash, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: st(\"brHits\", { count: 8 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.final, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          afterBurst: {\r\n            fields: [{\r\n              node: afterBurstCritRate_\r\n            }, {\r\n              node: afterBurstEnerRech_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: `char_${key}:c1DMG` })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condAfterReact,\r\n        path: condAfterReactPath,\r\n        name: st(\"elementalReaction.electro\"),\r\n        states: {\r\n          afterReact: {\r\n            fields: [{\r\n              node: afterReactAtk_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Stack,\r\n        path: condC6StackPath,\r\n        name: trm(\"effectTriggers\"),\r\n        states: objectKeyMap(range(1, 4), i => ({\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [{\r\n            node: c6Electro_dmg_\r\n          }]\r\n        }))\r\n      })]),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Klee_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Klee\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    jumptyDumptyDmg1: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg2: skillParam_gen.skill[s++],\r\n    jumptyDumptyDmg3: skillParam_gen.skill[s++],\r\n    mineDmg: skillParam_gen.skill[s++],\r\n    mineDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++], // what is this??\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    charged_dmg_: 0.5\r\n  },\r\n  constellation1: {\r\n    dmg_: 1.2\r\n  },\r\n  constellation2: {\r\n    enemyDefRed_: 0.23\r\n  },\r\n  constellation4: {\r\n    dmg: 5.55\r\n  },\r\n  constellation6: {\r\n    pyro_dmg_: 0.1\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"PoundingSurprise\")\r\nconst charged_dmg_ = equal(\"on\", condA1, greaterEq(input.asc, 1, percent(datamine.passive1.charged_dmg_)))\r\n\r\nconst [condC2Path, condC2] = cond(key, \"ExplosiveFrags\")\r\nconst enemyDefRed_ = equal(\"on\", condC2, greaterEq(input.constellation, 2, percent(datamine.constellation2.enemyDefRed_)))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"BlazingDelight\")\r\nconst pyro_dmg_ = equal(\"on\", condC6, greaterEq(input.constellation, 6, percent(datamine.constellation6.pyro_dmg_)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    jumptyDumptyDmg: dmgNode(\"atk\", datamine.skill.jumptyDumptyDmg1, \"skill\"),\r\n    mineDmg: dmgNode(\"atk\", datamine.skill.mineDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  constellation1: {\r\n    chainedReactionsDmg: greaterEq(input.constellation, 1, prod(percent(datamine.constellation1.dmg_), dmgNode(\"atk\", datamine.burst.dmg, \"burst\")))\r\n  },\r\n  constellation4: {\r\n    sparklyExplosionDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.dmg), input.total.atk), \"elemental\", { hit: { ele: constant('pyro') } }))\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      pyro_dmg_,\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" })\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.jumptyDumptyDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.mineDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.mineDuration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: `${datamine.burst.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: trm(\"a1CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: charged_dmg_\r\n            }, {\r\n              text: trm(\"a1CondName2\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.chainedReactionsDmg, { key: `sheet:dmg` }),\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 10,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.sparklyExplosionDmg, { key: `sheet:dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6CondName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 25,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })])\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kujou_Sara_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"KujouSara\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    fullyAimed: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    atkBonus: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    titanBreakerDmg: skillParam_gen.burst[b++],\r\n    stormClusterDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    er: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation2: {\r\n    crowfeatherDmg: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    atkInc: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condSkillTenguAmbushPath, condSkillTenguAmbush] = cond(key, \"TenguJuuraiAmbush\")\r\nconst atkIncRatio = subscript(input.total.skillIndex, datamine.skill.atkBonus.map(x => x), { key: '_' })\r\nconst skillTenguAmbush_disp = equal(\"TenguJuuraiAmbush\", condSkillTenguAmbush,\r\n  prod(input.base.atk, atkIncRatio)\r\n)\r\nconst skillTenguAmbush_ = equal(input.activeCharKey, target.charKey, skillTenguAmbush_disp)\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6ElectroCritDmg_ = greaterEq(input.constellation, 6, equal(\"c6\", condC6, percent(datamine.constellation6.atkInc)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fullyAimed: dmgNode(\"atk\", datamine.charged.fullyAimed, \"charged\", { hit: { ele: constant('electro') } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    skillTenguAmbush_\r\n  },\r\n  burst: {\r\n    titanbreaker: dmgNode(\"atk\", datamine.burst.titanBreakerDmg, \"burst\"),\r\n    stormcluster: dmgNode(\"atk\", datamine.burst.stormClusterDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.constellation2.crowfeatherDmg))),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_critDMG_: c6ElectroCritDmg_\r\n    },\r\n    total: {\r\n      atk: skillTenguAmbush_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fullyAimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillTenguAmbush,\r\n        path: condSkillTenguAmbushPath,\r\n        name: trm(\"skill.ambush\"),\r\n        teamBuff: true,\r\n        states: {\r\n          TenguJuuraiAmbush: {\r\n            fields: [{\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: data => data.get(atkIncRatio).value * 100,\r\n              unit: \"%\",\r\n            }, {\r\n              node: infoMut(skillTenguAmbush_disp, { key: `sheet:increase.atk` })\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.titanbreaker, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.stormcluster, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: data => data.get(input.total.enerRech_).value * datamine.passive2.energyGen,\r\n          fixed: 2\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6.electroCritDmg\"),\r\n        states: {\r\n          c6: {\r\n            fields: [{\r\n              node: c6ElectroCritDmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Kuki_Shinobu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"KukiShinobu\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++],\r\n    dmg2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    ringHealHP_: skillParam_gen.skill[s++],\r\n    ringHealFlat: skillParam_gen.skill[s++],\r\n    ringDmg: skillParam_gen.skill[s++],\r\n    cost: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    singleDmg: skillParam_gen.burst[b++],\r\n    maxDmgBase: skillParam_gen.burst[b++],\r\n    maxDmgExtend: skillParam_gen.burst[b++],\r\n    durationBase: skillParam_gen.burst[b++][0],\r\n    durationExtend: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    hpThresh_: skillParam_gen.passive1[p1++][0],\r\n    heal_: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    emSkillHeal_: skillParam_gen.passive2[p2++][0],\r\n    emSkillDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    aoeInc: 0.5,\r\n  },\r\n  constellation2: {\r\n    skillDurInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    markDmg: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hpThresh_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    em: skillParam_gen.constellation6[2],\r\n    cd: skillParam_gen.constellation6[3],\r\n  },\r\n} as const\r\n\r\nconst [condUnderHPPath, condUnderHP] = cond(key, \"underHP\")\r\nconst a1Heal_ = greaterEq(input.asc, 1, equal(condUnderHP, \"on\", datamine.passive1.heal_))\r\n\r\nconst a4Skill_healInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillHeal_), input.total.eleMas))\r\nconst a4Skill_dmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.emSkillDmg_), input.total.eleMas))\r\n\r\nconst [condC6TriggerPath, condC6Trigger] = cond(key, \"c6Trigger\")\r\nconst c6eleMas = greaterEq(input.constellation, 6, equal(condC6Trigger, \"on\", datamine.constellation6.em))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.dmg2, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    pressDmg: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    ringHeal: healNodeTalent(\"hp\", datamine.skill.ringHealHP_, datamine.skill.ringHealFlat, \"skill\",\r\n      { premod: { healInc: a4Skill_healInc } }\r\n    ),\r\n    ringDmg: dmgNode(\"atk\", datamine.skill.ringDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    singleDmg: dmgNode(\"hp\", datamine.burst.singleDmg, \"burst\"),\r\n    totalDmg: compareEq(condUnderHP, \"on\",\r\n      dmgNode(\"hp\", datamine.burst.maxDmgExtend, \"burst\"),\r\n      dmgNode(\"hp\", datamine.burst.maxDmgBase, \"burst\")\r\n    )\r\n  },\r\n  constellation4: {\r\n    markDmg: greaterEq(input.constellation, 4, customDmgNode(prod(percent(datamine.constellation4.markDmg), input.total.hp), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    heal_: a1Heal_,\r\n    skill_dmgInc: a4Skill_dmgInc,\r\n    eleMas: c6eleMas,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.pressDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringHeal, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.ringDmg, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cost * 100,\r\n          unit: trm(\"skill.cost\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skillDurInc}s = ${datamine.skill.duration + datamine.constellation2.skillDurInc}`\r\n            : datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(a4Skill_healInc, { key: `char_${key}:a4.heal`, variant: \"heal\" }),\r\n        }, {\r\n          node: a4Skill_dmgInc\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.skillDurInc,\r\n          unit: \"s\",\r\n        }]\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.markDmg, { key: `char_${key}:c4.dmg` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\",\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.singleDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.totalDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: (data) => data.get(condUnderHP).value === \"on\"\r\n            ? `${datamine.burst.durationBase}s + ${datamine.burst.durationExtend - datamine.burst.durationBase}s = ${datamine.burst.durationExtend}`\r\n            : datamine.burst.durationBase,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"durationInc\"),\r\n              value: datamine.burst.durationExtend - datamine.burst.durationBase,\r\n              fixed: 1,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"aoeInc\"),\r\n          value: datamine.constellation1.aoeInc * 100,\r\n          unit: \"%\",\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: st(\"lessEqPercentHP\", { percent: datamine.passive1.hpThresh_ * 100 }),\r\n        value: condUnderHP,\r\n        path: condUnderHPPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1Heal_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Trigger,\r\n        path: condC6TriggerPath,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation6.hpThresh_ * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6eleMas,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation6.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Lisa_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Lisa\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stack0: skillParam_gen.skill[s++],\r\n    stack1: skillParam_gen.skill[s++],\r\n    stack2: skillParam_gen.skill[s++],\r\n    stack3: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    press: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    tick: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    unknown: skillParam_gen.passive1[0][0] // I have no idea what this is\r\n  },\r\n  passive2: {\r\n    defShred: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"LisaA4\")\r\nconst [condC2Path, condC2] = cond(key, \"LisaC2\")\r\n\r\nconst nodeA4DefShred = equal(condA4, \"on\", greaterEq(input.asc, 1, datamine.passive2.defShred))\r\nconst nodeC2DefIncrease = equal(condC2, \"on\", greaterEq(input.constellation, 2, constant(0.25))) // Doesn't exist in skillParam_gen\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    stack0: dmgNode(\"atk\", datamine.skill.stack0, \"skill\"),\r\n    stack1: dmgNode(\"atk\", datamine.skill.stack1, \"skill\"),\r\n    stack2: dmgNode(\"atk\", datamine.skill.stack2, \"skill\"),\r\n    stack3: dmgNode(\"atk\", datamine.skill.stack3, \"skill\"),\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    tick: dmgNode(\"atk\", datamine.burst.tick, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    def_: nodeC2DefIncrease,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_: nodeA4DefShred\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        },\r\n        ...range(0, 3).map(i => ({\r\n          node: infoMut(dmgFormulas.skill[`stack${i}`], { key: `char_${key}_gen:skill.skillParams.${2 + i}` })\r\n        })), {\r\n          text: sgt(\"press.cd\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: 's'\r\n        }, {\r\n          text: sgt(\"hold.cd\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.tick, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: trm(\"a4C\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4DefShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2DefIncrease\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Mona_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\nimport sprint from './sprint.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3, sprint\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Mona\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, sp = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dot: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    bubbleDuration: skillParam_gen.burst[b++][0],\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgBonusNeg: skillParam_gen.burst[b++],\r\n    omenDuration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n  },\r\n  sprint: {\r\n    active_stam: skillParam_gen.sprint[sp++][0],\r\n    drain_stam: skillParam_gen.sprint[sp++][0],\r\n  },\r\n  passive1: {\r\n    torrentDuration: skillParam_gen.passive1[p1++][0],\r\n    phantomDuration: skillParam_gen.passive1[p1++][0],\r\n    percentage: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    unknown: skillParam_gen.passive2[p2++][0], // what is this?\r\n    percentage: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    electroChargeDmgInc: skillParam_gen.constellation1[0],\r\n    vaporizeDmgInc: skillParam_gen.constellation1[1],\r\n    hydroSwirlDmgInc: skillParam_gen.constellation1[2],\r\n    frozenExtension: skillParam_gen.constellation1[3],\r\n    unknown: skillParam_gen.constellation1[4], // what is this?\r\n    duration: skillParam_gen.constellation1[5],\r\n  },\r\n  constellation4: {\r\n    critRateIncNeg: Math.abs(skillParam_gen.constellation4[0]), // why do they even keep this as a negative??\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0], // what is this?\r\n    dmgBonus: skillParam_gen.constellation6[1],\r\n    maxDmgBonus: skillParam_gen.constellation6[2],\r\n    duration: skillParam_gen.constellation6[3],\r\n  }\r\n} as const\r\n\r\nconst hydro_dmg_ = greaterEq(input.asc, 4, prod(input.premod.enerRech_, percent(datamine.passive2.percentage)))\r\n\r\nconst [condOmenPath, condOmen] = cond(key, \"Omen\")\r\nconst all_dmg_ = equal(\"on\", condOmen, subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" }))\r\n\r\nconst [condPoSPath, condPoS] = cond(key, \"ProphecyOfSubmersion\")\r\nconst electrocharged_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.electroChargeDmgInc)))\r\nconst swirl_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.hydroSwirlDmgInc)))\r\nconst vaporize_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condPoS, percent(datamine.constellation1.vaporizeDmgInc)))\r\n\r\nconst [condPoOPath, condPoO] = cond(key, \"ProphecyOfOblivion\")\r\nconst critRate_ = greaterEq(input.constellation, 4, equal(\"on\", condPoO, percent(datamine.constellation4.critRateIncNeg)))\r\n\r\nconst [condRoCPath, condRoC] = cond(key, \"RhetoricsOfCalamitas\")\r\nconst charged_dmg_ = greaterEq(input.constellation, 6, lookup(condRoC, objectKeyMap(range(1, 3), i => percent(i * datamine.constellation6.dmgBonus)), 0))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dot: dmgNode(\"atk\", datamine.skill.dot, \"skill\"),\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive1: {\r\n    dmg: prod(dmgNode(\"atk\", datamine.skill.dmg, \"skill\"), percent(datamine.passive1.percentage))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    charged_dmg_,\r\n    hydro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_,\r\n      electrocharged_dmg_,\r\n      swirl_dmg_,\r\n      vaporize_dmg_,\r\n      critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dot, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: trm(\"bubbleDuration\"),\r\n          value: datamine.burst.bubbleDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condOmen,\r\n        path: condOmenPath,\r\n        teamBuff: true,\r\n        name: trm(\"omen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: all_dmg_,\r\n            }, {\r\n              text: trm(\"omenDuration\"),\r\n              value: (data) => datamine.burst.omenDuration[data.get(input.total.burstIndex).value],\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      sprint: ct.talentTemplate(\"sprint\", [{\r\n        fields: [{\r\n          text: st(\"activationStam\"),\r\n          value: datamine.sprint.active_stam,\r\n        }, {\r\n          text: st(\"stamDrain\"),\r\n          value: datamine.sprint.drain_stam,\r\n          unit: \"/s\",\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: trm(\"phantomDuration\"),\r\n          value: datamine.passive1.phantomDuration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: hydro_dmg_\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condPoS,\r\n        path: condPoSPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: electrocharged_dmg_,\r\n            }, {\r\n              node: swirl_dmg_,\r\n            }, {\r\n              node: vaporize_dmg_,\r\n            }, {\r\n              text: trm(\"frozenDuration\"),\r\n              value: datamine.constellation1.frozenExtension * 100, // Convert to percentage\r\n              unit: \"%\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condPoO,\r\n        path: condPoOPath,\r\n        teamBuff: true,\r\n        name: trm(\"hitOp.affectedByOmen\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: critRate_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        value: condRoC,\r\n        path: condRoCPath,\r\n        name: trm(\"uponSprint\"),\r\n        states: Object.fromEntries(range(1, 3).map(i => [i, {\r\n          name: st(\"stack\", { count: i }),\r\n          fields: [\r\n            { node: charged_dmg_ },\r\n            {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n        }]))\r\n      })])\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Ningguang_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Ningguang\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    jadeDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    screenHpMod: skillParam_gen.skill[s++], // 100% + skillParam_gen.skill[s++] * 100\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    screenHp: skillParam_gen.skill[s++], //screenHp * 100%\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgPerGem: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    geoDmgBonus_: skillParam_gen.passive2[p1++][0],\r\n    duration: skillParam_gen.passive2[p1++][0],\r\n  },\r\n} as const\r\n\r\nconst [condA4Path, condA4] = cond(key, \"Ascension4\") //12% Geo DMG bonus after passing through the Jade Screen\r\nconst [condC4Path, condC4] = cond(key, \"Constellation4\")\r\n\r\nconst nodeA4GeoDmgBonus_ = equal(condA4, \"on\", percent(datamine.passive2.geoDmgBonus_), { key: `char_${key}:a4bonus_` })\r\n\r\nconst nodesC4 = Object.fromEntries(allElements.map(ele => [\r\n  `${ele}_res_`,\r\n  equal(condC4, \"on\", percent(0.10))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    baseDmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n    jadeDmg: dmgNode(\"atk\", datamine.charged.jadeDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    screenHp: prod(subscript(input.total.skillIndex, datamine.skill.screenHp, { key: '_' }), input.total.hp),\r\n    dmg: dmgNode(\"atk\", datamine.skill.skillDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    gemDmg: dmgNode(\"atk\", datamine.burst.dmgPerGem, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  }, teamBuff: {\r\n    premod: {\r\n      geo_dmg_: nodeA4GeoDmgBonus_,\r\n      ...nodesC4,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.normal[0], { key: `char_${key}_gen:auto.skillParams.0` })\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          text: trm(\"aoeGems\"),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.baseDmg, { key: `char_${key}_gen:auto.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.jadeDmg, { key: `char_${key}_gen:auto.skillParams.2` }),\r\n        }, {\r\n          canShow: data => data.get(input.asc).value < 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: datamine.charged.stamina,\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 1,\r\n          text: tr(\"auto.skillParams.3\"),\r\n          value: trm(\"starJadeStaminaCost\"),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.screenHp, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 2,\r\n          text: trm(\"skillReset\"),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: trm(\"a4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA4GeoDmgBonus_\r\n            }, {\r\n              text: trm(\"a4duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        teamBuff: true,\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4toggle\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesC4).map(n => ({ node: n }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.gemDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.enerCost,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: trm(\"c6bonus\"),\r\n          value: 7,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Noelle_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, equalStr, greaterEq, infoMut, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent, shieldElement, shieldNode, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Noelle\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shieldDef: skillParam_gen.skill[s++],\r\n    healDef: skillParam_gen.skill[s++],\r\n    healChance: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    shieldFlat: skillParam_gen.skill[s++],\r\n    healFlat: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    burstDmg: skillParam_gen.burst[b++],\r\n    skillDmg: skillParam_gen.burst[b++],\r\n    defToAtk: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: { // Devotion Shield\r\n    hpThreshold: skillParam_gen.passive1[p1++][0],\r\n    shield: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n    cooldown: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  constellation1: {\r\n    healingChance: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    chargeStamina: skillParam_gen.constellation2[0],\r\n    chargeDmg_: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    skillDmg: skillParam_gen.constellation4[0],\r\n  },\r\n  constellation6: {\r\n    burstAtkBonus: skillParam_gen.constellation6[0],\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"SweepingTime\")\r\nconst nodeBurstInfusion = equalStr(condBurst, \"on\", \"geo\")\r\nconst nodeBurstAtk = equal(\"on\", condBurst, prod(\r\n  input.total.def,\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.defToAtk, { key: \"_\" }),\r\n    greaterEq(input.constellation, 6, percent(datamine.constellation6.burstAtkBonus))\r\n  )\r\n))\r\n\r\nconst nodeSkillHealChanceBase = subscript(input.total.skillIndex, datamine.skill.healChance, { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOn = equal(\"on\", condBurst, percent(datamine.constellation1.healingChance), { key: `char_${key}:skillHeal_` })\r\nconst nodeSkillHealChanceC1BurstOff = unequal(\"on\", condBurst, nodeSkillHealChanceBase)\r\n\r\nconst nodeC2ChargeDMG = greaterEq(input.constellation, 2, percent(datamine.constellation2.chargeDmg_))\r\nconst nodeC2ChargeDec = greaterEq(input.constellation, 2, percent(-datamine.constellation2.chargeStamina))\r\nconst nodeC4dmg = greaterEq(input.constellation, 4, customDmgNode(prod(input.total.atk, percent(datamine.constellation4.skillDmg)), \"elemental\", { hit: { ele: constant(elementKey) } }))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.skillDmg, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"def\", datamine.skill.shieldDef, datamine.skill.shieldFlat, \"skill\")),\r\n    heal: healNodeTalent(\"def\", datamine.skill.healDef, datamine.skill.healFlat, \"skill\"),\r\n  },\r\n  burst: {\r\n    defConv: nodeBurstAtk,\r\n    burstDmg: dmgNode(\"atk\", datamine.burst.burstDmg, \"burst\"),\r\n    skillDmg: dmgNode(\"atk\", datamine.burst.skillDmg, \"burst\"),\r\n  },\r\n  passive1: {\r\n    devotionShield: greaterEq(input.asc, 1, shieldElement(\"geo\", shieldNode(\"def\", percent(datamine.passive1.shield), 0)))\r\n  },\r\n  constellation4: {\r\n    dmg: nodeC4dmg\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: nodeC2ChargeDMG,\r\n    atk: nodeBurstAtk,\r\n    staminaChargedDec_: nodeC2ChargeDec,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: nodeBurstInfusion,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"geo\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, { //Heal trigger chance\r\n          canShow: data => data.get(input.constellation).value === 0,\r\n          node: nodeSkillHealChanceBase,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOff,\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 1,\r\n          node: nodeSkillHealChanceC1BurstOn,\r\n        }, { //Shield Duration\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, { //Cooldown\r\n          canShow: data => data.get(input.asc).value < 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.asc).value >= 4,\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: trm(`p4cd`),\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.burstDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.skillDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value < 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: data => data.get(input.constellation).value >= 6,\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: trm(`c6duration`),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        name: tr(\"burst.name\"),\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"infusion.geo\"),\r\n              variant: \"geo\",\r\n            }, {\r\n              text: trm(\"qlarger\")\r\n            }, {\r\n              node: nodeBurstAtk\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.devotionShield, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.passive1.cooldown,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: nodeC2ChargeDec\r\n        }, {\r\n          node: nodeC2ChargeDMG\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(nodeC4dmg, { key: `char_${key}:c4dmg` })\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Qiqi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Qiqi\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hitRegenPercent: skillParam_gen.skill[s++],\r\n    hitRegenFlat: skillParam_gen.skill[s++],\r\n    contRegenPercent: skillParam_gen.skill[s++],\r\n    contRegenFlat: skillParam_gen.skill[s++],\r\n    tickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    castDmg: skillParam_gen.skill[s++],\r\n  },\r\n  burst: {\r\n    healPercent: skillParam_gen.burst[b++],\r\n    healFlat: skillParam_gen.burst[b++],\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  }\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"QiqiA1\")\r\nconst [condC2Path, condC2] = cond(key, \"QiqiC2\")\r\n\r\n// Values here doesn't exist in skillParam_gen\r\nconst nodeA1HealingBonus = equal(condA1, \"on\", greaterEq(input.asc, 1, 0.2))\r\nconst nodeC2ChargedDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\nconst nodeC2NormalDmgInc = equal(condC2, \"on\", greaterEq(input.constellation, 2, 0.15))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    castDmg: dmgNode(\"atk\", datamine.skill.castDmg, \"skill\"),\r\n    tickDmg: dmgNode(\"atk\", datamine.skill.tickDmg, \"skill\"),\r\n    hitRegen: healNodeTalent(\"atk\", datamine.skill.hitRegenPercent, datamine.skill.hitRegenFlat, \"skill\"),\r\n    contRegen: healNodeTalent(\"atk\", datamine.skill.contRegenPercent, datamine.skill.contRegenFlat, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"atk\", datamine.burst.healPercent, datamine.burst.healFlat, \"burst\")\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_: nodeC2NormalDmgInc,\r\n    charged_dmg_: nodeC2ChargedDmgInc,\r\n    incHeal_: nodeA1HealingBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 3) ? st(\"brHits\", { count: 2 }) : undefined\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: st(\"brHits\", { count: 2 })\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.castDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hitRegen, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.contRegen, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.tickDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        },\r\n        {\r\n          node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1C\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1HealingBonus\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: 8,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: trm(\"c2C\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2NormalDmgInc\r\n            }, {\r\n              node: nodeC2ChargedDmgInc\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Raiden_Shogun_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"RaidenShogun\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    skillDmg: skillParam_gen.skill[s++],\r\n    coorDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    burstDmg_bonus: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    resolveBonus1: skillParam_gen.burst[b++],\r\n    resolveBonus2: skillParam_gen.burst[b++],\r\n    resolveGained: skillParam_gen.burst[b++],\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    hit3: skillParam_gen.burst[b++],\r\n    hit41: skillParam_gen.burst[b++],\r\n    hit42: skillParam_gen.burst[b++],\r\n    hit5: skillParam_gen.burst[b++],\r\n    charged1: skillParam_gen.burst[b++],\r\n    charged2: skillParam_gen.burst[b++],\r\n    stam: skillParam_gen.burst[b++][0],\r\n    plunge: skillParam_gen.burst[b++],\r\n    plungeLow: skillParam_gen.burst[b++],\r\n    plungeHigh: skillParam_gen.burst[b++],\r\n    enerGen: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    er: skillParam_gen.passive2[p2++][0],\r\n    energyGen: skillParam_gen.passive2[p2++][0],\r\n    electroDmg_bonus: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    def_ignore: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    atk_bonus: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n} as const\r\n\r\nconst [condSkillEyePath, condSkillEye] = cond(key, \"skillEye\")\r\nconst skillEye_ = equal(\"skillEye\", condSkillEye,\r\n  prod(constant(datamine.burst.enerCost, { key: \"sheet:energy\" }), subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nfunction skillDmg(atkType: number[]) {\r\n  // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n  return dmgNode('atk', atkType, 'skill', {\r\n    enemy: { defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore) }\r\n  })\r\n}\r\n\r\nconst energyCosts = [40, 50, 60, 70, 80, 90]\r\nconst [condSkillEyeTeamPath, condSkillEyeTeam] = cond(key, \"skillEyeTeam\")\r\nconst skillEyeTeamBurstDmgInc = unequal(input.activeCharKey, input.charKey,\r\n  prod(lookup(condSkillEyeTeam, objectKeyMap(energyCosts, i => constant(i, { key: \"sheet:energy\" })), 0),\r\n    subscript(input.total.skillIndex, datamine.skill.burstDmg_bonus, { fixed: 2, key: '_' })))\r\n\r\nconst resolveStacks = [10, 20, 30, 40, 50, 60]\r\nconst [condResolveStackPath, condResolveStack] = cond(key, \"burstResolve\")\r\n\r\nconst resolveStackNode = lookup(condResolveStack, objectKeyMap(resolveStacks, i => constant(i)), 0, { key: `char_${key}:burst.resolves` })\r\nconst resolveInitialBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus1, { key: `char_${key}:burst.resolveInitial_` }),\r\n  resolveStackNode\r\n)\r\nconst resolveInfusedBonus_ = prod(\r\n  subscript(input.total.burstIndex, datamine.burst.resolveBonus2, { key: `char_${key}:burst.resolveInfused_` }),\r\n  resolveStackNode\r\n)\r\nfunction burstResolve(mvArr: number[], initial = false) {\r\n  const resolveBonus = initial ? resolveInitialBonus_ : resolveInfusedBonus_\r\n\r\n  return customDmgNode(\r\n    prod(\r\n      sum(\r\n        subscript(input.total.burstIndex, mvArr, { key: '_' }),\r\n        resolveBonus\r\n      ),\r\n      input.total.atk\r\n    ),\r\n    'burst',\r\n    {\r\n      hit: {\r\n        ele: constant('electro')\r\n      }, enemy: {\r\n        // if Raiden is above or equal to C2, then account for DEF Ignore else not\r\n        defIgn: greaterEq(input.constellation, 2, datamine.constellation2.def_ignore)\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nconst passive2ElecDmgBonus = greaterEq(input.asc, 4, prod(sum(input.premod.enerRech_, percent(-1)), (datamine.passive2.electroDmg_bonus * 100)))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4AtkBonus_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4\", condC4, unequal(input.activeCharKey, input.charKey, datamine.constellation4.atk_bonus))\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: skillDmg(datamine.skill.skillDmg),\r\n    coorDmg: skillDmg(datamine.skill.coorDmg),\r\n    skillEye_\r\n  },\r\n  burst: {\r\n    dmg: burstResolve(datamine.burst.dmg, true),\r\n    hit1: burstResolve(datamine.burst.hit1),\r\n    hit2: burstResolve(datamine.burst.hit2),\r\n    hit3: burstResolve(datamine.burst.hit3),\r\n    hit41: burstResolve(datamine.burst.hit41),\r\n    hit42: burstResolve(datamine.burst.hit42),\r\n    hit5: burstResolve(datamine.burst.hit5),\r\n    charged1: burstResolve(datamine.burst.charged1),\r\n    charged2: burstResolve(datamine.burst.charged2),\r\n    plunge: burstResolve(datamine.burst.plunge),\r\n    plungeLow: burstResolve(datamine.burst.plungeLow),\r\n    plungeHigh: burstResolve(datamine.burst.plungeHigh),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"electro\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    burst_dmg_: skillEye_,\r\n    electro_dmg_: passive2ElecDmgBonus,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: c4AtkBonus_,\r\n      burst_dmg_: skillEyeTeamBurstDmgInc\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: \"electro\",\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 4 ? 0 : -1)}` }),\r\n          textSuffix: i === 3 ? \"(1)\" : i === 4 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.coorDmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: `${datamine.skill.duration}s`,\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: `${datamine.skill.cd}s`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEye,\r\n        path: condSkillEyePath,\r\n        name: trm(\"skill.eye\"),\r\n        states: {\r\n          skillEye: {\r\n            fields: [{\r\n              node: skillEye_\r\n            }]\r\n          }\r\n        }\r\n      },\r\n      ), ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillEyeTeam,\r\n        path: condSkillEyeTeamPath,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"skill.partyCost\"),\r\n        states: Object.fromEntries(energyCosts.map(c => [c, {\r\n          name: `${c}`,\r\n          fields: [{\r\n            node: skillEyeTeamBurstDmgInc,\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit3, { key: `char_${key}_gen:burst.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit41, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit42, { key: `char_${key}_gen:burst.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit5, { key: `char_${key}_gen:burst.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged1, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.charged2, { key: `char_${key}_gen:burst.skillParams.8` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.9\"),\r\n          value: `${datamine.burst.stam}`,\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plunge, { key: `char_${key}_gen:burst.skillParams.10` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeLow, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.plungeHigh, { key: `char_${key}_gen:burst.skillParams.11` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.12\"),\r\n          value: (data) => `${datamine.burst.enerGen[data.get(input.total.burstIndex).value]}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.13\"),\r\n          value: `${datamine.burst.duration}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.14\"),\r\n          value: `${datamine.burst.cd}s`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.15\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }],\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condResolveStack,\r\n        path: condResolveStackPath,\r\n        name: trm(\"burst.resolves\"),\r\n        states: Object.fromEntries(resolveStacks.map(c => [c, {\r\n          name: st(\"stack\", { count: c }),\r\n          fields: [{\r\n            node: infoMut(resolveInitialBonus_, { key: `char_${key}:burst.resolveInitial_` }),\r\n          }, {\r\n            node: infoMut(resolveInfusedBonus_, { key: `char_${key}:burst.resolveInfused_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"a4.enerRest\"),\r\n          value: (data) => (data.get(input.total.enerRech_).value * 100 - 100) * (datamine.passive2.energyGen * 100),\r\n          unit: \"%\"\r\n        }, {\r\n          node: passive2ElecDmgBonus,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, input.charKey, 1),\r\n        name: trm(\"c4.expires\"),\r\n        states: {\r\n          c4: {\r\n            fields: [{\r\n              node: c4AtkBonus_,\r\n            }, {\r\n              text: tr(\"skill.skillParams.2\"),\r\n              value: `${datamine.constellation4.duration}s`\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Razor_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Razor\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst regionKey: Region = \"mondstadt\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++]\r\n    ]\r\n  },\r\n  charged: {\r\n    spinningDmg: skillParam_gen.auto[a++],\r\n    finalDmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0]\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    erBonus: skillParam_gen.skill[s++][0],\r\n    enerRegen: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    pressCd: skillParam_gen.skill[s++][0],\r\n    holdCd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    companionDmg: skillParam_gen.burst[b++],\r\n    atkSpdBonus: skillParam_gen.burst[b++],\r\n    electroResBonus: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: 0.18\r\n  },\r\n  passive2: {\r\n    enerThreshold: 0.5,\r\n    erInc: 0.3\r\n  },\r\n  passive3: {\r\n    sprintStaminaDec: 0.2\r\n  },\r\n  constellation1: {\r\n    allDmgInc: 0.1,\r\n    duration: 8\r\n  },\r\n  constellation2: {\r\n    hpThreshold: 0.3,\r\n    critRateInc: 0.1\r\n  },\r\n  constellation4: {\r\n    defDec: 0.15,\r\n    duration: 7\r\n  },\r\n  constellation6: {\r\n    dmg: 1,\r\n    electroSigilGenerated: 1,\r\n    cd: 10\r\n  }\r\n} as const\r\n\r\nconst [condElectroSigilPath, condElectroSigil] = cond(key, \"ElectroSigil\")\r\nconst [condTheWolfWithinPath, condTheWolfWithin] = cond(key, \"TheWolfWithin\")\r\nconst [condA4Path, condA4] = cond(key, \"A4\")\r\nconst [condC1Path, condC1] = cond(key, \"C1\")\r\nconst [condC2Path, condC2] = cond(key, \"C2\")\r\nconst [condC4Path, condC4] = cond(key, \"C4\")\r\n\r\nconst enerRechElectroSigil_ = lookup(condElectroSigil, objectKeyMap(range(1, 3), i => prod(i, percent(datamine.skill.erBonus))),\r\n  naught, { key: \"enerRech_\" })\r\nconst electro_res_ = equal(\"on\", condTheWolfWithin, percent(datamine.burst.electroResBonus))\r\nconst atkSPD_ = equal(\"on\", condTheWolfWithin, subscript(input.total.burstIndex, datamine.burst.atkSpdBonus, { key: \"_\" }))\r\nconst enerRechA4_ = greaterEq(input.asc, 4, equal(\"on\", condA4, percent(datamine.passive2.erInc, { key: \"enerRech_\" })))\r\nconst all_dmg_ = greaterEq(input.constellation, 1, equal(\"on\", condC1, percent(datamine.constellation1.allDmgInc)))\r\nconst critRate_ = greaterEq(input.constellation, 2, equal(\"on\", condC2, percent(datamine.constellation2.critRateInc)))\r\nconst enemyDefRed_ = greaterEq(input.constellation, 4, equal(\"on\", condC4, percent(datamine.constellation4.defDec)))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spinningDmg: dmgNode(\"atk\", datamine.charged.spinningDmg, \"charged\"),\r\n    finalDmg: dmgNode(\"atk\", datamine.charged.finalDmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    companionDmg1: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg2: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg3: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    companionDmg4: customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n      subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"),\r\n    // TODO: this is for the additional section to calculate the full burst dmg where the full burst dmg = sum of normal dmg and burst companion dmg\r\n    // However, the final dmg then defaults to Electro text color which is sort of incorrect?\r\n    // Is there a way to disable the electro text color and default it to just normal color instead?\r\n    fullBurstDmg1: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[0]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg2: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[1]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg3: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[2]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\")),\r\n    fullBurstDmg4: sum(customDmgNode(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]), input.total.atk), \"normal\"),\r\n      customDmgNode(prod(prod(subscript(input.total.autoIndex, datamine.normal.hitArr[3]),\r\n        subscript(input.total.burstIndex, datamine.burst.companionDmg)), input.total.atk), \"burst\"))\r\n  },\r\n  constellation6: {\r\n    dmg: greaterEq(input.constellation, 6, customDmgNode(prod(percent(datamine.constellation6.dmg), input.total.atk), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, regionKey, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: sum(enerRechElectroSigil_, enerRechA4_),\r\n    electro_res_,\r\n    atkSPD_,\r\n    all_dmg_,\r\n    critRate_\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      enemyDefRed_\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spinningDmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.finalDmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n          unit: '/s'\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.duration,\r\n          unit: 's'\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.pressCd - (datamine.skill.pressCd * datamine.passive1.cdRed)\r\n            : datamine.skill.pressCd,\r\n          unit: 's'\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.6\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.skill.holdCd - (datamine.skill.holdCd * datamine.passive1.cdRed)\r\n            : datamine.skill.holdCd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", { // Electro Sigil\r\n        value: condElectroSigil,\r\n        path: condElectroSigilPath,\r\n        name: trm(\"electroSigil\"),\r\n        states: {\r\n          ...objectKeyMap(range(1, 3), i => ({\r\n            name: st(\"stack\", { count: i }),\r\n            fields: [{\r\n              node: enerRechElectroSigil_\r\n            }, {\r\n              text: tr(\"skill.skillParams.4\"),\r\n              value: datamine.skill.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: trm(\"electroSigilAbsorbed\"),\r\n              value: datamine.skill.enerRegen * i,\r\n            }]\r\n          })),\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg1, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.0\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg2, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.1\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg3, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.2\")\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.companionDmg4, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          textSuffix: tr(\"auto.skillParams.3\")\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.duration,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.cd,\r\n          unit: 's'\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // The Wolf Within\r\n        value: condTheWolfWithin,\r\n        path: condTheWolfWithinPath,\r\n        name: tr(\"burst.description.3\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: electro_res_\r\n            }, {\r\n              node: atkSPD_\r\n            }, {\r\n              text: st(\"incInterRes\")\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"burst\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg1, { key: `char_${key}:fullBurstDMG.dmg1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg2, { key: `char_${key}:fullBurstDMG.dmg2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg3, { key: `char_${key}:fullBurstDMG.dmg3` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.fullBurstDmg4, { key: `char_${key}:fullBurstDMG.dmg4` })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condA4,\r\n        path: condA4Path,\r\n        name: st(\"lessPercentEnergy\", { percent: datamine.passive2.enerThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enerRechA4_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: trm(\"pickUpElementalOrbParticle\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: all_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.constellation2.hpThreshold * 100 }),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: critRate_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"opHitWithClawAndThunder\"),\r\n        states: {\r\n          \"on\": {\r\n            fields: [{\r\n              node: enemyDefRed_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.dmg, { key: \"sheet:dmg\" })\r\n        }, {\r\n          text: trm(\"electroSigilPerProc\"),\r\n          value: datamine.constellation6.electroSigilGenerated\r\n        }, {\r\n          text: st(\"cooldown\"),\r\n          value: datamine.constellation6.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n};\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Rosaria_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, min, percent, prod, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Rosaria\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0, c1i = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n      skillParam_gen.auto[a++], // 5.1\r\n      skillParam_gen.auto[a++], // 5.2\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    hit1: skillParam_gen.skill[s++],\r\n    hit2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    hit1: skillParam_gen.burst[b++],\r\n    hit2: skillParam_gen.burst[b++],\r\n    dotDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    crInc: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0]\r\n  },\r\n  passive2: {\r\n    crBonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    maxBonus: skillParam_gen.passive2[p2++][0]\r\n  },\r\n  constellation1: {\r\n    atkSpdInc: skillParam_gen.constellation1[c1i++],\r\n    dmgInc: skillParam_gen.constellation1[c1i++],\r\n    duration: skillParam_gen.constellation1[c1i++],\r\n  },\r\n  constellation6: {\r\n    physShred: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++],\r\n  },\r\n} as const\r\n\r\nconst [condA1Path, condA1] = cond(key, \"RosariaA1\")\r\nconst [condA4Path, condA4] = cond(key, \"RosariaA4\")\r\nconst [condC1Path, condC1] = cond(key, \"RosariaC1\")\r\nconst [condC6Path, condC6] = cond(key, \"DilucC6\")\r\n\r\nconst nodeA1CritInc = equal(condA1, \"on\", greaterEq(input.asc, 1, datamine.passive1.crInc))\r\nconst nodeA4CritBonusDisp = equal(condA4, \"on\",\r\n  greaterEq(input.asc, 4, min(\r\n    prod(percent(datamine.passive2.crBonus), input.premod.critRate_),\r\n    percent(datamine.passive2.maxBonus)\r\n  ))\r\n)\r\nconst nodeA4CritBonus = unequal(target.charKey, key, nodeA4CritBonusDisp)\r\n\r\nconst nodeC1AtkSpd = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.atkSpdInc))\r\nconst nodeC1NormalInc = equal(condC1, \"on\", greaterEq(input.constellation, 1, datamine.constellation1.dmgInc))\r\nconst nodeC6PhysShred = equal(condC6, \"on\", greaterEq(input.constellation, 6, -datamine.constellation6.physShred))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([name, arr]) =>\r\n    [name, dmgNode(\"atk\", arr, \"plunging\")])),\r\n  skill: {\r\n    hit1: dmgNode(\"atk\", datamine.skill.hit1, \"skill\"),\r\n    hit2: dmgNode(\"atk\", datamine.skill.hit2, \"skill\"),\r\n  },\r\n  burst: {\r\n    hit1: dmgNode(\"atk\", datamine.burst.hit1, \"burst\"),\r\n    hit2: dmgNode(\"atk\", datamine.burst.hit2, \"burst\"),\r\n    dotDmg: dmgNode(\"atk\", datamine.burst.dotDmg, \"burst\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    critRate_: nodeA1CritInc,\r\n    atkSPD_: nodeC1AtkSpd,\r\n    normal_dmg_: nodeC1NormalInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_enemyRes_: nodeC6PhysShred\r\n    },\r\n    total: {\r\n      critRate_: nodeA4CritBonus\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey: elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i < 5 ? 0 : -1)}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 4 ? \"(1)\" : i === 5 ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.hit1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hit2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.hit1, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.hit2, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6,\r\n        path: condC6Path,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC6PhysShred\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        name: trm(\"a1\"),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        name: st(\"afterUse.burst\"),\r\n        value: condA4,\r\n        path: condA4Path,\r\n        teamBuff: true,\r\n        // Hide for Rosaria\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(nodeA4CritBonusDisp, { key: \"critRate_\", isTeamBuff: true }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // A1 conditional in teambuff, if A4 is active\r\n        path: condA1Path,\r\n        value: condA1,\r\n        name: trm(\"a1\"),\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key, equal(condA4, \"on\", 1)),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeA1CritInc\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1,\r\n        path: condC1Path,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC1NormalInc\r\n            }, {\r\n              node: nodeC1AtkSpd,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sangonomiya_Kokomi_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"SangonomiyaKokomi\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, c6i = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    heal_: skillParam_gen.skill[s++],\r\n    heal: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    heal_: skillParam_gen.burst[b++],\r\n    heal: skillParam_gen.burst[b++],\r\n    nBonus_: skillParam_gen.burst[b++],\r\n    cBonus_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    sBonus_: skillParam_gen.burst[b++],\r\n  },\r\n  p: {\r\n    heal_: 0.25,\r\n    critRate_: -1\r\n  },\r\n  p2: {\r\n    heal_ratio_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    hp_: skillParam_gen.constellation1[0],\r\n  },\r\n  c2: {\r\n    s_heal_: skillParam_gen.constellation2[1],\r\n    nc_heal_: skillParam_gen.constellation2[2],\r\n  },\r\n  c4: {\r\n    atkSPD_: skillParam_gen.constellation4[0],\r\n    energy: skillParam_gen.constellation4[1]\r\n  },\r\n  c6: {\r\n    hp_: skillParam_gen.constellation6[c6i++],\r\n    hydro_: skillParam_gen.constellation6[c6i++],\r\n    duration: skillParam_gen.constellation6[c6i++]\r\n  },\r\n} as const\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\n\r\nconst burstNormalDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.nBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp), { variant: \"invalid\" })\r\nconst burstChargedDmgInc = equal(condBurst, \"on\", prod(\r\n  sum(\r\n    subscript(input.total.burstIndex, datamine.burst.cBonus_, { key: '_' }),\r\n    greaterEq(input.asc, 4, prod(percent(datamine.p2.heal_ratio_), input.premod.heal_)),\r\n  ),\r\n  input.premod.hp), { variant: \"invalid\" })\r\nconst burstSkillDmgInc = equal(condBurst, \"on\", prod(\r\n  subscript(input.total.burstIndex, datamine.burst.sBonus_, { key: '_' }),\r\n  input.premod.hp))\r\n\r\nconst passiveHeal_ = constant(datamine.p.heal_)\r\nconst passiveCritRate_ = constant(datamine.p.critRate_)\r\nconst c2SkillHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.s_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c2BurstHeal = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\",\r\n    prod(percent(datamine.c2.nc_heal_), input.total.hp)\r\n  )\r\n)\r\nconst c4AtkSpd_ = greaterEq(input.constellation, 4, datamine.c4.atkSPD_)\r\nconst c6Hydro_ = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.c6.hydro_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    heal: healNodeTalent(\"hp\", datamine.skill.heal_, datamine.skill.heal, \"skill\",\r\n      { premod: { healInc: c2SkillHeal } }\r\n    )\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"hp\", datamine.burst.dmg, \"burst\"),\r\n    heal: healNodeTalent(\"hp\", datamine.burst.heal_, datamine.burst.heal, \"burst\",\r\n      { premod: { healInc: c2BurstHeal } }\r\n    )\r\n  },\r\n  constellation1: {\r\n    dmg: greaterEq(input.constellation, 1, customDmgNode(prod(input.total.hp, percent(datamine.c1.hp_)), \"elemental\", {\r\n      hit: { ele: constant(elementKey) }\r\n    }))\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    heal_: passiveHeal_,\r\n    critRate_: passiveCritRate_,\r\n    atkSPD_: c4AtkSpd_,\r\n    hydro_dmg_: c6Hydro_,\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: burstNormalDmgInc,\r\n    charged_dmgInc: burstChargedDmgInc,\r\n    skill_dmgInc: burstSkillDmgInc,\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` })\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` })\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.heal, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.6\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.7\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: burstNormalDmgInc,\r\n            }, {\r\n              node: burstChargedDmgInc,\r\n            }, {\r\n              node: burstSkillDmgInc,\r\n            }, {\r\n              node: infoMut(dmgFormulas.burst.heal, { key: `char_${key}_gen:burst.skillParams.4`, variant: \"heal\" }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.5\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive: ct.talentTemplate(\"passive\", [{\r\n        fields: [{\r\n          node: passiveHeal_\r\n        }, {\r\n          node: passiveCritRate_\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.fieldsTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation1.dmg, { key: \"sheet:dmg\" })\r\n        }]\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2Path,\r\n        value: condC2,\r\n        name: trm(\"c2\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(c2SkillHeal, { key: `char_${key}:c2SkillHeal` }),\r\n            }, {\r\n              node: infoMut(c2BurstHeal, { key: `char_${key}:c2BurstHeal` }),\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [{ fields: [{ node: c4AtkSpd_ }] }]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6Path,\r\n        value: condC6,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          on: { fields: [{ node: c6Hydro_ }] }\r\n        }\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sayu_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod, subscript, sum } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, healNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Sayu\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3x2\r\n      skillParam_gen.auto[4], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[5],\r\n    final: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n    duration: skillParam_gen.auto[8][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[9],\r\n    low: skillParam_gen.auto[10],\r\n    high: skillParam_gen.auto[11],\r\n  },\r\n  skill: {\r\n    wheelDmg: skillParam_gen.skill[s++],\r\n    eleWheelDmg: skillParam_gen.skill[s++],\r\n    kickPressDmg: skillParam_gen.skill[s++],\r\n    kickHoldDmg: skillParam_gen.skill[s++],\r\n    eleKickDmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cdMin: skillParam_gen.skill[s++][0],\r\n    cdMax: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    pressBaseHeal: skillParam_gen.burst[b++],\r\n    pressAtkHeal: skillParam_gen.burst[b++],\r\n    darumaDmg: skillParam_gen.burst[b++],\r\n    darumaBaseHeal: skillParam_gen.burst[b++],\r\n    darumaAtkHeal: skillParam_gen.burst[b++],\r\n    darumaHits: 7,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    baseHeal: skillParam_gen.passive1[0][0],\r\n    emHeal: skillParam_gen.passive1[1][0],\r\n    cd: skillParam_gen.passive1[2][0]\r\n  },\r\n  passive2: {\r\n    nearHeal: skillParam_gen.passive2[0][0]\r\n  },\r\n  constellation2: {\r\n    dmgInc: skillParam_gen.constellation2[0],\r\n    maxStacks: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    ener: skillParam_gen.constellation4[0],\r\n    cd: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    darumaDmgInc: skillParam_gen.constellation6[0],\r\n    maxStacks: skillParam_gen.constellation6[1] / skillParam_gen.constellation6[0],\r\n    darumaHealInc: skillParam_gen.constellation6[2]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAbsorptionPath, condSkillAbsorption] = cond(key, \"skillAbsorption\")\r\n\r\nconst [condActiveSwirlPath, condActiveSwirl] = cond(key, \"activeSwirl\")\r\n\r\nconst [condC2SkillStackPath, condC2SkillStack] = cond(key, \"c2SkillStack\")\r\nconst c2_kickPressDmg_ = greaterEq(input.constellation, 2, percent(datamine.constellation2.dmgInc))\r\nconst c2_kickDmg_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2SkillStack,\r\n    Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [\r\n      stack,\r\n      prod(stack, percent(datamine.constellation2.dmgInc))\r\n    ])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c6_daruma_dmg_inc = greaterEq(input.constellation, 6,\r\n  prod(\r\n    min(input.total.eleMas, datamine.constellation6.maxStacks),\r\n    datamine.constellation6.darumaDmgInc,\r\n    input.total.atk\r\n  )\r\n)\r\nconst c6_daruma_heal_inc = greaterEq(input.constellation, 6,\r\n  prod(min(input.total.eleMas, datamine.constellation6.maxStacks), datamine.constellation6.darumaHealInc)\r\n)\r\n// Using customHealNode so I can have healInc\r\nconst darumaHeal = customHealNode(sum(\r\n  prod(\r\n    subscript(input.total.burstIndex, datamine.burst.darumaAtkHeal, { key: \"_\" }),\r\n    input.total.atk,\r\n  ),\r\n  subscript(input.total.burstIndex, datamine.burst.darumaBaseHeal),\r\n  c6_daruma_heal_inc,\r\n))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    wheelDmg: dmgNode(\"atk\", datamine.skill.wheelDmg, \"skill\"),\r\n    kickPressDmg: dmgNode(\"atk\", datamine.skill.kickPressDmg, \"skill\",\r\n      { premod: { skill_dmg_: sum(c2_kickDmg_, c2_kickPressDmg_) } }),\r\n    kickHoldDmg: dmgNode(\"atk\", datamine.skill.kickHoldDmg, \"skill\",\r\n      { premod: { skill_dmg_: c2_kickDmg_ } }),\r\n    eleWheelDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleWheelDmg, \"skill\", { hit: { ele: constant(eleKey) } })\r\n    ])), naught),\r\n    eleKickDmg: lookup(condSkillAbsorption, Object.fromEntries(absorbableEle.map(eleKey => [\r\n      eleKey,\r\n      dmgNode(\"atk\", datamine.skill.eleKickDmg, \"skill\",\r\n        { hit: { ele: constant(eleKey) }, premod: { skill_dmg_: c2_kickDmg_ } })\r\n    ])), naught)\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    pressHeal: healNodeTalent(\"atk\", datamine.burst.pressAtkHeal, datamine.burst.pressBaseHeal, \"burst\"),\r\n    darumaDmg: dmgNode(\"atk\", datamine.burst.darumaDmg, \"burst\",\r\n      { premod: { burst_dmgInc: c6_daruma_dmg_inc } }),\r\n    darumaHeal\r\n  },\r\n  passive1: {\r\n    heal: greaterEq(input.asc, 1, equal(condActiveSwirl, \"activeSwirl\",\r\n      customHealNode(\r\n        sum(datamine.passive1.baseHeal, prod(datamine.passive1.emHeal, input.total.eleMas))\r\n      )\r\n    ))\r\n  },\r\n  passive2: {\r\n    extraHeal: greaterEq(input.asc, 4, prod(darumaHeal, percent(datamine.passive2.nearHeal)))\r\n  }\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, \"anemo\", \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.wheelDmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickPressDmg, { key: `char_${key}_gen:skill.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.kickHoldDmg, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: `${datamine.skill.cdMin}s ~ ${datamine.skill.cdMax}`,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillAbsorption,\r\n        path: condSkillAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.skill.eleWheelDmg, { key: `char_${key}_gen:skill.skillParams.3` })\r\n          }, {\r\n            node: infoMut(dmgFormulas.skill.eleKickDmg, { key: `char_${key}_gen:skill.skillParams.4` })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2_kickPressDmg_, { key: `char_${key}:c2KickPressDmg_` })\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2SkillStack,\r\n        path: condC2SkillStackPath,\r\n        name: trm(\"c2Cond\"),\r\n        states: Object.fromEntries(range(1, datamine.constellation2.maxStacks).map(stack => [stack, {\r\n          name: st(\"seconds\", { count: stack * 0.5 }),\r\n          fields: [{\r\n            node: infoMut(c2_kickDmg_, { key: `char_${key}:c2KickDmg_` })\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pressHeal, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaDmg, { key: `char_${key}_gen:burst.skillParams.2` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.darumaHeal, { key: `char_${key}_gen:burst.skillParams.3` })\r\n        }, {\r\n          text: trm(\"burstHits\"),\r\n          value: datamine.burst.darumaHits,\r\n        }]\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive2.extraHeal, { key: `char_${key}:p2Heal`, variant: \"heal\" })\r\n        }, {\r\n          text: trm(\"p2Aoe\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1Text\")\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(c6_daruma_dmg_inc, { key: `char_${key}:c6DarumaDmgInc`, variant: \"anemo\" })\r\n        }, {\r\n          node: infoMut(c6_daruma_heal_inc, { key: `char_${key}:c6DarumaHealInc`, variant: \"heal\" })\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condActiveSwirl,\r\n        path: condActiveSwirlPath,\r\n        name: trm(\"p1Swirl\"),\r\n        states: {\r\n          activeSwirl: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive1.heal, { key: `sheet_gen:healing` })\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.fieldsTemplate(\"constellation4\", {\r\n        fields: [{\r\n          text: trm(\"c4Ener\"),\r\n          value: datamine.constellation4.ener,\r\n          fixed: 1\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation4.cd,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Shenhe_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Shenhe\"\r\nconst elementKey: ElementKey = \"cryo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[1], // 2\r\n      skillParam_gen.auto[2], // 3\r\n      skillParam_gen.auto[3], // 4x2\r\n      skillParam_gen.auto[5], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[6],\r\n    stamina: skillParam_gen.auto[7][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    hold: skillParam_gen.skill[s++],\r\n    dmgAtk_: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    durationHold: skillParam_gen.skill[s++][0],\r\n    trigger: skillParam_gen.skill[s++][0],\r\n    triggerHold: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    cdHold: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    res_: skillParam_gen.burst[b++],\r\n    dot: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    cryo_dmg_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    press_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationPress: skillParam_gen.passive2[p2++][0],\r\n    hold_dmg_: skillParam_gen.passive2[p2++][0],\r\n    durationHold: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    dmg_: skillParam_gen.constellation4[0],\r\n    maxStacks: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    auto_: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condQuillPath, condQuill] = cond(key, \"quill\")\r\nconst nodeSkill = equal(\"quill\", condQuill,\r\n  prod(input.total.atk, subscript(input.total.skillIndex, datamine.skill.dmgAtk_, { key: '_' })))\r\n\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst enemyRes_ = equal(\"burst\", condBurst,\r\n  subscript(input.total.burstIndex, datamine.burst.res_.map(x => -x), { key: '_' }))\r\n\r\nconst nodeBurstCryo_enemyRes_ = { ...enemyRes_ }\r\nconst nodeBurstPhysical_enemyRes_ = { ...enemyRes_ }\r\n\r\nconst [condAsc1Path, condAsc1] = cond(key, \"asc1\")\r\nconst nodeAsc1Disp = greaterEq(input.asc, 1,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeAsc1 = equal(input.activeCharKey, target.charKey, nodeAsc1Disp)\r\n\r\nconst [condAsc4Path, condAsc4] = cond(key, \"asc4\")\r\nconst nodeAsc4 = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"press\",\r\n    datamine.passive2.press_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Press_skill_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Press_burst_dmg_ = { ...nodeAsc4 }\r\nconst nodeAsc4Hold = greaterEq(input.asc, 1,\r\n  equal(condAsc4, \"hold\",\r\n    datamine.passive2.hold_dmg_\r\n  )\r\n)\r\nconst nodeAsc4Hold_normal_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_charged_dmg_ = { ...nodeAsc4Hold }\r\nconst nodeAsc4Hold_plunging_dmg_ = { ...nodeAsc4Hold }\r\n\r\nconst nodeC2Disp = greaterEq(input.constellation, 2,\r\n  equal(condAsc1, \"field\",\r\n    datamine.passive1.cryo_dmg_\r\n  )\r\n)\r\nconst nodeC2 = equal(input.activeCharKey, target.charKey, nodeC2Disp)\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4Inc = greaterEq(input.constellation, 4,\r\n  lookup(condC4,\r\n    objectKeyMap(range(1, datamine.constellation4.maxStacks), i => percent(i * datamine.constellation4.dmg_)),\r\n    0),\r\n  { key: \"char_Shenhe:c4Bonus_\" })\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    hold: dmgNode(\"atk\", datamine.skill.hold, \"skill\", { hit: { dmgBonus: c4Inc } }),\r\n    quillDmg: nodeSkill\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      cryo_dmgInc: nodeSkill,\r\n      cryo_enemyRes_: nodeBurstCryo_enemyRes_,\r\n      physical_enemyRes_: nodeBurstPhysical_enemyRes_,\r\n      cryo_dmg_: nodeAsc1,\r\n      skill_dmg_: nodeAsc4Press_skill_dmg_,\r\n      burst_dmg_: nodeAsc4Press_burst_dmg_,\r\n      normal_dmg_: nodeAsc4Hold_normal_dmg_,\r\n      charged_dmg_: nodeAsc4Hold_charged_dmg_,\r\n      plunging_dmg_: nodeAsc4Hold_plunging_dmg_,\r\n      cryo_critDMG_: nodeC2\r\n    },\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"pressDuration\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"pressQuota\"),\r\n          value: datamine.skill.trigger,\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          text: trm(\"holdDuration\"),\r\n          value: datamine.skill.durationHold,\r\n          unit: \"s\"\r\n        }, {\r\n          text: trm(\"holdQuota\"),\r\n          value: datamine.skill.triggerHold,\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.cdHold,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condQuill,\r\n        path: condQuillPath,\r\n        name: trm(\"quill\"),\r\n        states: {\r\n          quill: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condAsc4,\r\n        path: condAsc4Path,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.skill\"),\r\n        states: {\r\n          press: {\r\n            name: st(\"press\"),\r\n            fields: [{\r\n              node: nodeAsc4Press_skill_dmg_\r\n            }, {\r\n              node: nodeAsc4Press_burst_dmg_\r\n            }]\r\n          },\r\n          hold: {\r\n            name: st(\"hold\"),\r\n            fields: [{\r\n              node: nodeAsc4Hold_normal_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_charged_dmg_\r\n            }, {\r\n              node: nodeAsc4Hold_plunging_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharges\"),\r\n          value: 1\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: objectKeyMap(range(1, 50).map(i => i.toString()), i => ({\r\n          name: i.toString(),\r\n          fields: [{ node: c4Inc }]\r\n        }))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: tr(\"constellation6.description\")\r\n        }],\r\n        teamBuff: true\r\n      }),\r\n      ]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.duration} + ${datamine.constellation2.durationInc} = ${datamine.burst.duration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.5\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          burst: {\r\n            fields: [{\r\n              node: nodeBurstCryo_enemyRes_\r\n            }, {\r\n              node: nodeBurstPhysical_enemyRes_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n          value: condAsc1,\r\n          path: condAsc1Path,\r\n          teamBuff: true,\r\n          name: st(\"activeCharField\"),\r\n          states: {\r\n            field: {\r\n              fields: [{\r\n                node: infoMut(nodeAsc1Disp, { key: \"cryo_dmg_\", variant: \"cryo\" }) // Jank\r\n              }]\r\n            }\r\n          }\r\n        }), ct.headerTemplate(\"constellation2\", {\r\n          fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation2.durationInc,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(nodeC2Disp, { key: \"cryo_critDMG_\", variant: \"cryo\" })\r\n        }],\r\n        teamBuff: true,\r\n       }),\r\n      ]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './banner.png'\r\nimport burst from './burst.png'\r\nimport card from './characterCard.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './icon.png'\r\nimport thumbSide from './iconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"ShikanoinHeizou\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 4.3\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    declension_dmg_: skillParam_gen.skill[s++],\r\n    conviction_dmg_: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    declension_duration: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    slugger_dmg: skillParam_gen.burst[b++],\r\n    iris_dmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n    eleMas: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  passive3: {\r\n    staminaSprintDec_: 0.25,\r\n  },\r\n  constellation1: {\r\n    duration: skillParam_gen.constellation1[0],\r\n    atkSpd_: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[2],\r\n  },\r\n  constellation4: {\r\n    baseEnergy: skillParam_gen.constellation4[0],\r\n    addlEnergy: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    hsCritRate_: skillParam_gen.constellation6[0],\r\n    hsCritDmg_: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst stacksArr = range(1, 4)\r\nconst [condDeclensionStacksPath, condDeclensionStacks] = cond(key, \"declensionStacks\")\r\nconst declension_dmg_ = lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      subscript(input.total.skillIndex, datamine.skill.declension_dmg_, { key: \"sheet:bonusScaling.skill_\" }),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])), naught, { key: \"sheet:bonusScaling.skill_\" })\r\nconst conviction_dmg_ = equal(condDeclensionStacks, \"4\",\r\n  subscript(input.total.skillIndex, datamine.skill.conviction_dmg_, { key: \"_\" }),\r\n  { key: \"sheet:bonusScaling.skill_\" }\r\n)\r\nconst totalStacks_dmg_ = sum(declension_dmg_, conviction_dmg_)\r\n\r\nconst [condSkillHitPath, condSkillHit] = cond(key, \"skillHit\")\r\nconst a4_eleMasDisp = greaterEq(input.asc, 4,\r\n  equal(condSkillHit, \"on\", datamine.passive2.eleMas)\r\n)\r\nconst a4_eleMas = unequal(target.charKey, key, a4_eleMasDisp)\r\n\r\n// TODO: After non-stacking buffs\r\n// const staminaSprintDec_ = percent(datamine.passive3.staminaSprintDec_)\r\n\r\nconst [condTakeFieldPath, condTakeField] = cond(key, \"takeField\")\r\nconst c1_atkSpd_ = greaterEq(input.constellation, 1, equal(condTakeField, \"on\", percent(datamine.constellation1.atkSpd_)))\r\n\r\nconst c6_skill_critRate_ = greaterEq(input.constellation, 6, lookup(\r\n  condDeclensionStacks,\r\n  Object.fromEntries(stacksArr.map(stacks => [\r\n    stacks,\r\n    prod(\r\n      percent(datamine.constellation6.hsCritRate_),\r\n      constant(stacks, { key: `char_${key}:declensionStacks` })\r\n    )\r\n  ])),\r\n  naught\r\n))\r\nconst c6_skill_critDMG_ = greaterEq(input.constellation, 6,\r\n  equal(condDeclensionStacks, \"4\", percent(datamine.constellation6.hsCritDmg_))\r\n)\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: customDmgNode(\r\n      prod(\r\n        sum(\r\n          subscript(input.total.skillIndex, datamine.skill.dmg, { key: \"_\" }),\r\n          totalStacks_dmg_\r\n        ),\r\n        input.total.atk\r\n      ),\r\n      \"skill\",\r\n      { hit: { ele: constant(\"anemo\") } }\r\n    )\r\n  },\r\n  burst: {\r\n    slugger_dmg: dmgNode(\"atk\", datamine.burst.slugger_dmg, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(ele => [\r\n      `${ele}_iris_dmg`,\r\n      dmgNode(\"atk\", datamine.burst.iris_dmg, \"burst\", { hit: { ele: constant(ele) } })\r\n    ]))\r\n  },\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    atkSPD_: c1_atkSpd_,\r\n    skill_critRate_: c6_skill_critRate_,\r\n    skill_critDMG_: c6_skill_critDMG_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      // TODO: after non-stacking buffs\r\n      // staminaSprintDec_\r\n      eleMas: a4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(\r\n            dmgFormulas.normal[i],\r\n            { key: `char_${key}_gen:auto.skillParams.${i > 2 ? (i < 6 ? 3 : 4) : i}` }\r\n          ),\r\n          textSuffix: (i > 2 && i < 6) ? `(${i - 2})` : undefined,\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        path: condDeclensionStacksPath,\r\n        value: condDeclensionStacks,\r\n        name: trm(\"declensionStacks\"),\r\n        states: Object.fromEntries(stacksArr.map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: infoMut(totalStacks_dmg_, { key: \"sheet:bonusScaling.skill_\" })\r\n            }, {\r\n              canShow: (data) => data.get(condDeclensionStacks).value === \"4\",\r\n              text: st(\"aoeInc\"),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.skill.declension_duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        path: condSkillHitPath,\r\n        value: condSkillHit,\r\n        name: st(\"hitOp.skill\"),\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(a4_eleMasDisp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_skill_critRate_\r\n        }, {\r\n          node: c6_skill_critDMG_\r\n        }]\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.slugger_dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, ...absorbableEle.map(ele => ({\r\n          node: infoMut(dmgFormulas.burst[`${ele}_iris_dmg`], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        })), {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"/* TODO: after non-stacking buffs, [{ fields: [{ node: staminaSprintDec_ }] }]*/),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        path: condTakeFieldPath,\r\n        value: condTakeField,\r\n        name: trm(\"takingField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1_atkSpd_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.constellation1.cd,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Sucrose_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from \"../../../Formula/utils\"\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Sucrose\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dot: skillParam_gen.burst[b++],\r\n    dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condAbsorptionPath, condAbsorption] = cond(key, \"absorption\")\r\n// A1 Swirl Reaction Element\r\nconst [condSwirlReactionPath, condSwirlReaction] = cond(key, \"swirl\")\r\n// Set to \"hit\" if skill hit opponents\r\nconst [condSkillHitOpponentPath, condSkillHitOpponent] = cond(key, \"skillHit\")\r\n\r\n// Conditional Output\r\nconst asc1Disp = greaterEq(input.asc, 1, datamine.passive1.eleMas)\r\nconst asc1 = unequal(target.charKey, key, // Not applying to Sucrose\r\n  equal(target.charEle, condSwirlReaction, asc1Disp)) // And element matches the swirl\r\nconst asc4Disp = equal(\"hit\", condSkillHitOpponent,\r\n  greaterEq(input.asc, 4,\r\n    prod(percent(datamine.passive2.eleMas_), input.premod.eleMas)))\r\nconst asc4 = unequal(target.charKey, key, asc4Disp)\r\nconst c6Base = greaterEq(input.constellation, 6, percent(0.2))\r\n\r\nconst c6Bonus = objectKeyMap(absorbableEle.map(ele => `${ele}_dmg_` as const), key =>\r\n  equal(condAbsorption, key.slice(0, -5), c6Base))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\")\r\n  },\r\n  burst: {\r\n    dot: dmgNode(\"atk\", datamine.burst.dot, \"burst\"),\r\n    ...Object.fromEntries(absorbableEle.map(key =>\r\n      [key, equal(condAbsorption, key, dmgNode(\"atk\", datamine.burst.dmg_, \"burst\", { hit: { ele: constant(key) } }))]))\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    total: { eleMas: asc4 },\r\n    premod: { ...c6Bonus, eleMas: asc1 },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dot, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.duration}s + 2`\r\n            : datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", { // Absorption\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst[eleKey], { key: `char_${key}_gen:burst.skillParams.1` }),\r\n          }]\r\n        }]))\r\n      }), ct.conditionalTemplate(\"constellation6\", { // Absorption teambuff for C6\r\n        teamBuff: true,\r\n        canShow: unequal(target.charKey, input.activeCharKey, 1),\r\n        value: condAbsorption,\r\n        path: condAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n        }]))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: unequal(condAbsorption, undefined, 1),\r\n        fields: Object.values(c6Bonus).map(n => ({ node: n }))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        // Swirl Element\r\n        teamBuff: true,\r\n        value: condSwirlReaction,\r\n        path: condSwirlReactionPath,\r\n        name: st(\"eleSwirled\"),\r\n        // Hide for Sucrose\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(asc1Disp, { key: \"eleMas\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.passive1.duration,\r\n            unit: \"s\",\r\n          }],\r\n        }]))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        // Swirl element\r\n        teamBuff: true,\r\n        value: condSkillHitOpponent,\r\n        path: condSkillHitOpponentPath,\r\n        name: trm(\"asc4\"),\r\n        canShow: unequal(input.activeCharKey, key, 1),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: infoMut(asc4Disp, { key: \"eleMas\" }),\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tartaglia_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, greaterEq, infoMut, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tartaglia\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst region: Region = \"snezhnaya\"\r\nconst [tr] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n  },\r\n  riptide: {\r\n    flashDmg: skillParam_gen.auto[a++],\r\n    burstDmg: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  riptideDuration: skillParam_gen.auto[a++][0],\r\n  skill: {\r\n    stanceDmg: skillParam_gen.skill[s++],\r\n    normal1: skillParam_gen.skill[s++],\r\n    normal2: skillParam_gen.skill[s++],\r\n    normal3: skillParam_gen.skill[s++],\r\n    normal4: skillParam_gen.skill[s++],\r\n    normal5: skillParam_gen.skill[s++],\r\n    normal61: skillParam_gen.skill[s++], // 6.1\r\n    normal62: skillParam_gen.skill[s++], // 6.2\r\n    charged1: skillParam_gen.skill[s++],\r\n    charged2: skillParam_gen.skill[s++],\r\n    riptideSlash: skillParam_gen.skill[s++],\r\n    chargedStamina: skillParam_gen.skill[s++][0],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    preemptiveCd1: skillParam_gen.skill[s++][0],\r\n    preemptiveCd2: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    meleeDmg: skillParam_gen.burst[b++],\r\n    riptideBlastDmg: skillParam_gen.burst[b++],\r\n    rangedDmg: skillParam_gen.burst[b++],\r\n    enerReturned: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    durationExt: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive: {\r\n    auto_boost: 1,\r\n  },\r\n  constellation1: {\r\n    cdRed: 0.2\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", { hit: { ele: constant('hydro') } }),\r\n    flashDmg: dmgNode(\"atk\", datamine.riptide.flashDmg, \"normal\", { hit: { ele: constant('hydro') } }),\r\n    burstDmg: dmgNode(\"atk\", datamine.riptide.burstDmg, \"normal\", { hit: { ele: constant('hydro') } })\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stanceDmg: dmgNode(\"atk\", datamine.skill.stanceDmg, \"skill\"),\r\n    normal1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal1, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal2, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal3: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal3, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal4: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal4, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal5: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal5, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal61: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal61, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    normal62: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.normal62, { key: \"_\" }), input.total.atk), \"normal\", { hit: { ele: constant('hydro') } }),\r\n    charged1: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged1, { key: \"_\" }), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    charged2: customDmgNode(prod(subscript(input.total.skillIndex, datamine.skill.charged2, { key: \"_\" }), input.total.atk), \"charged\", { hit: { ele: constant('hydro') } }),\r\n    riptideSlash: dmgNode(\"atk\", datamine.skill.riptideSlash, \"skill\")\r\n  },\r\n  burst: {\r\n    meleeDmg: dmgNode(\"atk\", datamine.burst.meleeDmg, \"burst\"),\r\n    rangedDmg: dmgNode(\"atk\", datamine.burst.rangedDmg, \"burst\"),\r\n    riptideBlastDmg: dmgNode(\"atk\", datamine.burst.riptideBlastDmg, \"burst\")\r\n  }\r\n}\r\n\r\nconst nodePassive = constant(1)\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  teamBuff: {\r\n    bonus: {\r\n      auto: nodePassive,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.riptide\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.flashDmg, { key: `char_${key}_gen:auto.skillParams.8` }),\r\n          textSuffix: st(\"brHits\", { count: 3 })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.burstDmg, { key: `char_${key}_gen:auto.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.10\"),\r\n          value: (data) => data.get(input.asc).value >= 1\r\n            ? datamine.passive1.durationExt + datamine.riptideDuration\r\n            : datamine.riptideDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stanceDmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal3, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal4, { key: `char_${key}_gen:skill.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal5, { key: `char_${key}_gen:skill.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal61, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.normal62, { key: `char_${key}_gen:skill.skillParams.6` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged1, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.charged2, { key: `char_${key}_gen:skill.skillParams.7` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          node: infoMut(constant(datamine.skill.chargedStamina), { key: `char_${key}_gen:skill.skillParams.8` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.riptideSlash, { key: `char_${key}_gen:skill.skillParams.9` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.10\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.11\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.preemptiveCd1 - (datamine.skill.preemptiveCd1 * datamine.constellation1.cdRed)}\r\n            - ${datamine.skill.preemptiveCd2 - (datamine.skill.preemptiveCd2 * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.preemptiveCd1} - ${datamine.skill.preemptiveCd2}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.12\"),\r\n          value: (data) => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.maxCd - (datamine.skill.maxCd * datamine.constellation1.cdRed)}`\r\n            : `${datamine.skill.maxCd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.meleeDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.rangedDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.riptideBlastDmg, { key: `char_${key}_gen:burst.skillParams.2` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: `${datamine.burst.cd}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: `${datamine.burst.enerCost}`,\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: `${datamine.burst.enerReturned}`,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [ct.headerTemplate(\"passive3\", {\r\n        teamBuff: true,\r\n        fields: [{ node: nodePassive }]\r\n      })]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Thoma_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Thoma\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    hpShield_: skillParam_gen.skill[s++],\r\n    baseShield: skillParam_gen.skill[s++],\r\n    shieldDuration: skillParam_gen.skill[s++][0],\r\n    maxHpShield_: skillParam_gen.skill[s++],\r\n    maxBaseShield: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    collapseDmg: skillParam_gen.burst[b++],\r\n    hpShield_: skillParam_gen.burst[b++],\r\n    baseShield: skillParam_gen.burst[b++],\r\n    shieldDuration: skillParam_gen.burst[b++][0],\r\n    unknown: skillParam_gen.burst[b++][0],\r\n    scorchingDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: skillParam_gen.passive1[2][0],\r\n    cd: skillParam_gen.passive1[3][0]\r\n  },\r\n  passive2: {\r\n    collapse_dmgInc: skillParam_gen.passive2[0][0],\r\n  },\r\n  c2: {\r\n    burstDuration: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    energyRestore: skillParam_gen.constellation4[0],\r\n  },\r\n  c6: {\r\n    auto_dmg: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n  }\r\n} as const\r\n\r\nconst [condP1BarrierStacksPath, condP1BarrierStacks] = cond(key, \"p1BarrierStacks\")\r\n// This should technically only apply to the active character, but I am trying\r\n// to minimize the amount of jank active character fixes.\r\nconst p1_shield_ = greaterEq(input.asc, 1,\r\n  lookup(condP1BarrierStacks, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n    stacks,\r\n    constant(stacks * datamine.passive1.shield_)\r\n  ])), naught)\r\n)\r\n\r\nconst p2Collapse_dmgInc = greaterEq(input.asc, 4, prod(input.total.hp, datamine.passive2.collapse_dmgInc))\r\n\r\nconst [condC4AfterBurstPath, condC4AfterBurst] = cond(key, \"c4AfterBurst\")\r\n\r\nconst [condC6AfterBarrierPath, condC6AfterBarrier] = cond(key, \"c6AfterBarrier\")\r\nconst c6_normal_dmg_ = greaterEq(input.constellation, 6,\r\n  equal(condC6AfterBarrier, \"on\", datamine.c6.auto_dmg)\r\n)\r\nconst c6_charged_dmg_ = { ...c6_normal_dmg_ }\r\nconst c6_plunging_dmg_ = { ...c6_normal_dmg_ }\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    minShield: shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\"),\r\n    minPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.hpShield_, datamine.skill.baseShield, \"skill\")),\r\n    maxShield: shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\"),\r\n    maxPyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.skill.maxHpShield_, datamine.skill.maxBaseShield, \"skill\")),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    collapseDmg: dmgNode(\"atk\", datamine.burst.collapseDmg, \"burst\",\r\n      { premod: { burst_dmgInc: p2Collapse_dmgInc } }\r\n    ),\r\n    shield: shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\"),\r\n    pyroShield: shieldElement(\"pyro\", shieldNodeTalent(\"hp\", datamine.burst.hpShield_, datamine.burst.baseShield, \"burst\")),\r\n  }\r\n}\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: p1_shield_,\r\n      normal_dmg_: c6_normal_dmg_,\r\n      charged_dmg_: c6_charged_dmg_,\r\n      plunging_dmg_: c6_plunging_dmg_,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.5\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minShield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.minPyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxShield, { key: `char_${key}:maxShield` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.maxPyroShield,\r\n            { key: `char_${key}:maxPyroShield`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.skill.shieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.pyroShield,\r\n            { key: `sheet:dmgAbsorption.${elementKey}`, variant: elementKey }\r\n          ),\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.shieldDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.collapseDmg, { key: `char_${key}_gen:burst.skillParams.1` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.burst.scorchingDuration}s + ${datamine.c2.burstDuration}s = ${datamine.burst.scorchingDuration + datamine.c2.burstDuration}`\r\n            : datamine.burst.scorchingDuration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1BarrierStacks,\r\n        path: condP1BarrierStacksPath,\r\n        name: trm(\"a1\"),\r\n        teamBuff: true,\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: p1_shield_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: st(\"triggerCD\"),\r\n              value: datamine.passive1.cd,\r\n              unit: \"s\",\r\n              fixed: 1\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: infoMut(p2Collapse_dmgInc, { key: `char_${key}:a2`, variant: elementKey }),\r\n        }]\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          text: trm(\"c2\"),\r\n          value: datamine.c2.burstDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4AfterBurst,\r\n        path: condC4AfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: st(\"energyRegen\"),\r\n              value: datamine.c4.energyRestore,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6AfterBarrier,\r\n        path: condC6AfterBarrierPath,\r\n        name: trm(\"c6\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_normal_dmg_,\r\n            }, {\r\n              node: c6_charged_dmg_,\r\n            }, {\r\n              node: c6_plunging_dmg_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Tighnari_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { Data } from '../../../Formula/type'\r\nimport { constant, equal, greaterEq, infoMut, lookup, min, naught, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey, Region } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Tighnari\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst region: Region = \"sumeru\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    wreathArrow: skillParam_gen.auto[a++],\r\n    clusterArrow: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++]\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    fieldDuration: skillParam_gen.skill[s++][0],\r\n    penetratorDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    primaryDmg: skillParam_gen.burst[b++],\r\n    secondaryDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    energyCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[p1++][0],\r\n    duration: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    charged_burst_dmg_: skillParam_gen.passive2[p2++][0],\r\n    maxDmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    charged_critRate_: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    dendro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    eleMas: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    unknown: skillParam_gen.constellation6[0],\r\n    dmg: skillParam_gen.constellation6[1],\r\n    chargeTimeRed: 0.9\r\n  }\r\n} as const\r\n\r\nconst [condA1AfterWreathPath, condA1AfterWreath] = cond(key, \"p1AfterWreath\")\r\nconst a1AfterWreath_eleMas = greaterEq(input.asc, 1, equal(condA1AfterWreath, \"on\", datamine.passive1.eleMas))\r\n\r\nconst a4_charged_dmg_ = greaterEq(input.asc, 4, min(\r\n  prod(percent(datamine.passive2.charged_burst_dmg_, { fixed: 2 }), input.total.eleMas),\r\n  percent(datamine.passive2.maxDmg_)\r\n))\r\nconst a4_burst_dmg_ = { ...a4_charged_dmg_ }\r\nconst chargedShaftAddl: Data = {\r\n  hit: { ele: constant(elementKey) },\r\n}\r\n\r\nconst c1_charged_critRate_ = greaterEq(input.constellation, 1, datamine.constellation1.charged_critRate_)\r\n\r\nconst [condC2EnemyFieldPath, condC2EnemyField] = cond(key, \"c2EnemyField\")\r\nconst c2EnemyField_dendro_dmg_ = greaterEq(input.constellation, 2, equal(condC2EnemyField, \"on\", datamine.constellation2.dendro_dmg_))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_eleMas = greaterEq(input.constellation, 4, lookup(condC4, {\r\n  after: constant(datamine.constellation4.eleMas),\r\n  react: constant(datamine.constellation4.eleMas * 2)\r\n}, naught))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", chargedShaftAddl),\r\n    wreath: dmgNode(\"atk\", datamine.charged.wreathArrow, \"charged\", chargedShaftAddl),\r\n    cluster: dmgNode(\"atk\", datamine.charged.clusterArrow, \"charged\", chargedShaftAddl),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    primaryDmg: dmgNode(\"atk\", datamine.burst.primaryDmg, \"burst\"),\r\n    secondaryDmg: dmgNode(\"atk\", datamine.burst.secondaryDmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n  },\r\n  constellation6: {\r\n    cluster: greaterEq(input.constellation, 6, customDmgNode(\r\n      prod(percent(datamine.constellation6.dmg), input.total.atk),\r\n      \"elemental\",\r\n      { hit: { ele: constant(elementKey) } }\r\n    ))\r\n  }\r\n}\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, region, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    eleMas: a1AfterWreath_eleMas,\r\n    charged_dmg_: a4_charged_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n    charged_critRate_: c1_charged_critRate_,\r\n    dendro_dmg_: c2EnemyField_dendro_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: c4_eleMas,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : undefined,\r\n        })),\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.wreath, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.cluster, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        path: condA1AfterWreathPath,\r\n        value: condA1AfterWreath,\r\n        name: trm(\"p1Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: a1AfterWreath_eleMas\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          node: c1_charged_critRate_,\r\n        }]\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6WreathRed\"),\r\n          value: datamine.constellation6.chargeTimeRed,\r\n          unit: \"s\",\r\n          fixed: 1\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation6.cluster, { key: `char_${key}:c6DmgKey` })\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.fieldDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.penetratorDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation2\", {\r\n        path: condC2EnemyFieldPath,\r\n        value: condC2EnemyField,\r\n        name: st(\"opponentsField\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyField_dendro_dmg_\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.primaryDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.secondaryDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.energyCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4Path,\r\n        value: condC4,\r\n        teamBuff: true,\r\n        name: \"\",\r\n        states: {\r\n          after: {\r\n            name: st(\"afterUse.burst\"),\r\n            fields: [{\r\n              node: c4_eleMas,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          },\r\n          react: {\r\n            name: trm(\"c4ReactCond\"),\r\n            fields: [{\r\n              node: c4_eleMas\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: a4_charged_dmg_,\r\n        }, {\r\n          node: a4_burst_dmg_,\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod, unequal } from '../../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { objectKeyValueMap } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport skillAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, skillAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    initial_dmg: skillParam_gen.skill[s++],\r\n    initial_max: skillParam_gen.skill[s++],\r\n    storm_dmg: skillParam_gen.skill[s++],\r\n    storm_max: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n    maxCd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmg: 0.6,\r\n  },\r\n  passive2: {\r\n    heal_: 0.02,\r\n  },\r\n  constellation2: {\r\n    enerRech_: 0.16,\r\n  },\r\n  constellation6: {\r\n    enemyRes_: -0.2\r\n  }\r\n} as const\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, `${elementKey}BurstAbsorption`)\r\nconst nodeC2 = greaterEq(input.constellation, 2, datamine.constellation2.enerRech_)\r\nconst [condC6Path, condC6] = cond(key, `${elementKey}C6Hit`)\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(condC6, \"on\", datamine.constellation6.enemyRes_))\r\nconst nodesC6 = objectKeyValueMap(absorbableEle, ele => [`${ele}_enemyRes_`, greaterEq(input.constellation, 6, equal(condC6, \"on\", equal(condBurstAbsorption, ele, datamine.constellation6.enemyRes_)))])\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    initial_dmg: dmgNode(\"atk\", datamine.skill.initial_dmg, \"skill\"),\r\n    initial_max: dmgNode(\"atk\", datamine.skill.initial_max, \"skill\"),\r\n    storm_dmg: dmgNode(\"atk\", datamine.skill.storm_dmg, \"skill\"),\r\n    storm_max: dmgNode(\"atk\", datamine.skill.storm_max, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    absorb: dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }),\r\n  },\r\n  passive1: {\r\n    dmg: greaterEq(input.asc, 1, customDmgNode(prod(input.total.atk, datamine.passive1.dmg), \"elemental\", { hit: { ele: constant(elementKey) } })),\r\n  },\r\n  passive2: {\r\n    heal: greaterEq(input.asc, 2, customHealNode(prod(percent(datamine.passive2.heal_), input.total.hp))),\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    enerRech_: nodeC2,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      ...nodesC6,\r\n      anemo_enemyRes_: nodeC6,\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.initial_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.initial_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.2` }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.skill.storm_max, { key: `char_${key}_gen:${elementKey}.skill.skillParams.3` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"skill.skillParams.5\"),\r\n        value: datamine.skill.maxCd,\r\n        unit: \"s\"\r\n      }, {\r\n        canShow: data => data.get(input.constellation).value >= 4,\r\n        text: trm(\"c1\"),\r\n        value: 10,\r\n        unit: \"%\"\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"burst.skillParams.2\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.3\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: tr(\"burst.skillParams.4\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"burst\", {\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }),\r\n        }]\r\n      }]))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 anemo\r\n      value: condC6,\r\n      path: condC6Path,\r\n      teamBuff: true,\r\n      name: trm(\"c6\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(nodeC6, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n      canShow: unequal(condBurstAbsorption, undefined, equal(condC6, \"on\", equal(target.charKey, key, 1))),\r\n      fields: absorbableEle.map(eleKey => (\r\n        { node: nodesC6[`${eleKey}_enemyRes_`] }\r\n      ))\r\n    }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n      value: condBurstAbsorption,\r\n      path: condBurstAbsorptionPath,\r\n      name: st(\"eleAbsor\"),\r\n      teamBuff: true,\r\n      canShow: equal(condC6, \"on\", unequal(input.activeCharKey, key, 1)),\r\n      states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n        name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n        fields: [{\r\n          node: nodesC6[`${eleKey}_enemyRes_`]\r\n        }]\r\n      }]))\r\n    })]),\r\n    passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive1.dmg, { key: `char_${key}:${elementKey}.p1` })\r\n      }]\r\n    })]),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.heal, { key: `sheet_gen:healing` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  },\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../../Components/ColoredText'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"dendro\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    lampDmg: skillParam_gen.burst[b++],\r\n    explosionDmg: skillParam_gen.burst[b++],\r\n    unknown1: skillParam_gen.burst[b++],\r\n    unknown2: skillParam_gen.burst[b++],\r\n    lampDuration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    eleMas: skillParam_gen.passive1[0][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    skill_dmgInc: skillParam_gen.passive2[0][0],\r\n    burst_dmgInc: skillParam_gen.passive2[1][0],\r\n  },\r\n  constellation1: {\r\n    energyRegen: 1\r\n  },\r\n  constellation2: {\r\n    durationInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation6: {\r\n    ele_dmg_: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst [condA1StacksPath, condA1Stacks] = cond(key, \"a1Stacks\")\r\nconst a1StacksArr = range(1, datamine.passive1.maxStacks)\r\nconst a1_eleMas_disp = greaterEq(input.asc, 1,\r\n  lookup(condA1Stacks, Object.fromEntries(a1StacksArr.map(stack => [\r\n    stack,\r\n    prod(datamine.passive1.eleMas, stack)\r\n  ])), naught),\r\n  { key: \"eleMas\" }\r\n)\r\nconst a1_eleMas = equal(input.activeCharKey, target.charKey, a1_eleMas_disp)\r\n\r\nconst a4_skill_dmg_ = greaterEq(input.asc, 4,\r\n  prod(percent(datamine.passive2.skill_dmgInc, { fixed: 2 }), input.total.eleMas),\r\n  { key: \"_\" }\r\n)\r\nconst a4_burst_dmg_ = greaterEq(input.asc, 4,\r\n  prod(percent(datamine.passive2.burst_dmgInc), input.total.eleMas),\r\n  { key: \"_\" }\r\n)\r\n\r\nconst [condC6BurstEffectPath, condC6BurstEffect] = cond(key, \"c6BurstEffect\")\r\nconst [condC6BurstElePath, condC6BurstEle] = cond(key, \"c6BurstEle\")\r\nconst c6_dendro_dmg_disp = greaterEq(input.constellation, 6,\r\n  equal(condC6BurstEffect, \"on\", percent(datamine.constellation6.ele_dmg_))\r\n)\r\nconst c6_dendro_dmg_ = equal(input.activeCharKey, target.charKey, c6_dendro_dmg_disp)\r\nconst c6_ele_dmg_disp = Object.fromEntries([\"hydro\", \"pyro\", \"electro\"].map(ele => [\r\n  ele,\r\n  greaterEq(input.constellation, 6,\r\n    equal(condC6BurstEffect, \"on\",\r\n      equal(condC6BurstEle, ele, percent(datamine.constellation6.ele_dmg_))\r\n    )\r\n  )\r\n]))\r\nconst c6_ele_dmg_ = Object.fromEntries(Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n  `${ele}_dmg_`,\r\n  equal(input.activeCharKey, target.charKey, node)\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    lampDmg: dmgNode(\"atk\", datamine.burst.lampDmg, \"burst\"),\r\n    explosionDmg: dmgNode(\"atk\", datamine.burst.explosionDmg, \"burst\")\r\n  }\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: burstC5,\r\n    skill: skillC3,\r\n  },\r\n  premod: {\r\n    skill_dmg_: a4_skill_dmg_,\r\n    burst_dmg_: a4_burst_dmg_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      eleMas: a1_eleMas,\r\n      dendro_dmg_: c6_dendro_dmg_,\r\n      ...c6_ele_dmg_,\r\n    },\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.lampDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.explosionDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: (data) => data.get(input.constellation).value >= 2\r\n          ? `${datamine.burst.lampDuration}s + ${datamine.constellation2.durationInc}s = ${datamine.burst.lampDuration + datamine.constellation2.durationInc}`\r\n          : datamine.burst.lampDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"passive1\", {\r\n      path: condA1StacksPath,\r\n      value: condA1Stacks,\r\n      teamBuff: true,\r\n      name: st(\"stacks\"),\r\n      states: Object.fromEntries(a1StacksArr.map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"stack\", { count: stack }),\r\n          fields: [{\r\n            node: a1_eleMas_disp\r\n          }]\r\n        }\r\n      ])),\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation2.durationInc,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstEffectPath,\r\n      value: condC6BurstEffect,\r\n      teamBuff: true,\r\n      name: st(\"activeCharField\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_dendro_dmg_disp, { key: \"dendro_dmg_\", variant: \"dendro\", isTeamBuff: true }),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      path: condC6BurstElePath,\r\n      value: condC6BurstEle,\r\n      teamBuff: true,\r\n      canShow: equal(condC6BurstEffect, \"on\", 1),\r\n      name: st(\"eleAbsor\"),\r\n      states: Object.fromEntries(Object.entries(c6_ele_dmg_disp).map(([ele, node]) => [\r\n        ele, {\r\n          name: <ColorText color={ele}>{sgt(`element.${ele}`)}</ColorText>,\r\n          fields: [{ node: infoMut(node, { key: `${ele}_dmg_`, variant: ele as ElementKey, isTeamBuff: true }) }],\r\n        }\r\n      ]))\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: a4_skill_dmg_,\r\n      }, {\r\n        node: a4_burst_dmg_,\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { equal, greaterEq, infoMut, percent, prod, subscript, sum } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { cond, sgt } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\nconst trm = (strKey: string) => <Translate ns=\"char_Traveler\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    energyRestore: skillParam_gen.skill[s++],\r\n    amulets: 2,\r\n    amuletDuration: skillParam_gen.skill[s++][0],\r\n    enerRech_: skillParam_gen.skill[s++][0],\r\n    enerRech_duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    thunderDmg: skillParam_gen.burst[b++],\r\n    thunderCd: 0.5,\r\n    energyRestore: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    cdRed: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    enerRech_: skillParam_gen.passive2[0][0],\r\n  },\r\n  constellation1: {\r\n    addlAmulets: 1\r\n  },\r\n  constellation2: {\r\n    duration: skillParam_gen.constellation2[0],\r\n    electro_enemyRes: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation6: {\r\n    numAttacks: skillParam_gen.constellation6[0],\r\n    thunder_dmg_: skillParam_gen.constellation6[0],\r\n    energyRestore: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillAmuletPath, condSkillAmulet] = cond(key, `${elementKey}SkillAmulet`)\r\nconst p2_enerRech_ = greaterEq(input.asc, 4,\r\n  prod(input.premod.enerRech_, percent(datamine.passive2.enerRech_))\r\n)\r\nconst skillAmulet_enerRech_Disp = equal(condSkillAmulet, \"on\",\r\n  sum(\r\n    percent(datamine.skill.enerRech_),\r\n    p2_enerRech_\r\n  )\r\n)\r\nconst skillAmulet_enerRech_ = equal(input.activeCharKey, target.charKey, skillAmulet_enerRech_Disp)\r\n\r\nconst burstEnergyRestore = subscript(input.total.burstIndex, datamine.burst.energyRestore,\r\n  { key: `char_${key}_gen:${elementKey}.burst.skillParmas.2` }\r\n)\r\n\r\nconst [condC2ThunderPath, condC2Thunder] = cond(key, `${elementKey}C2Thunder`)\r\nconst c2Thunder_electro_enemyRes_ = greaterEq(input.constellation, 2,\r\n  equal(condC2Thunder, \"on\", datamine.constellation2.electro_enemyRes)\r\n)\r\n\r\nconst [condC6After2ThunderPath, condC6After2Thunder] = cond(key, `${elementKey}C6After2Thunder`)\r\nconst c6_thunder_dmg_ = greaterEq(input.constellation, 6, equal(condC6After2Thunder, \"on\", datamine.constellation6.thunder_dmg_))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"atk\", datamine.burst.pressDmg, \"burst\"),\r\n    thunderDmg: dmgNode(\"atk\", datamine.burst.thunderDmg, \"burst\",\r\n      { premod: { burst_dmg_: c6_thunder_dmg_ } })\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_enemyRes_: c2Thunder_electro_enemyRes_,\r\n    },\r\n    total: {\r\n      enerRech_: skillAmulet_enerRech_ // In total to avoid loops\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` })\r\n      }, {\r\n        text: trm(\"skill.amuletGenAmt\"),\r\n        value: data => data.get(input.constellation).value >= 1\r\n          ? datamine.skill.amulets + datamine.constellation1.addlAmulets\r\n          : datamine.skill.amulets\r\n      }, {\r\n        text: tr(\"skill.skillParams.4\"),\r\n        value: datamine.skill.amuletDuration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.skill.cd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }]\r\n    }, ct.conditionalTemplate(\"skill\", {\r\n      value: condSkillAmulet,\r\n      path: condSkillAmuletPath,\r\n      name: trm(\"skill.absorb\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: subscript(input.total.skillIndex, datamine.skill.energyRestore,\r\n              { key: `char_${key}_gen:${elementKey}.skill.skillParams.1` }\r\n            )\r\n          }, {\r\n            node: infoMut(skillAmulet_enerRech_Disp, { key: \"enerRech_\" })\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.skill.enerRech_duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: tr(\"passive1.description\")\r\n      }]\r\n    }), ct.headerTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(p2_enerRech_, { key: `char_${key}:${elementKey}.passive2.enerRech_` })\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.pressDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.0` }\r\n        )\r\n      }, {\r\n        node: infoMut(dmgFormulas.burst.thunderDmg,\r\n          { key: `char_${key}_gen:${elementKey}.burst.skillParams.1` }\r\n        )\r\n      }, {\r\n        text: trm(\"burst.thunderCd\"),\r\n        value: datamine.burst.thunderCd,\r\n        unit: \"s\",\r\n        fixed: 1\r\n      }, {\r\n        node: infoMut(burstEnergyRestore, { key: `char_${key}_gen:${elementKey}.burst.skillParams.2` })\r\n      }, {\r\n        text: sgt(\"duration\"),\r\n        value: datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation2\", {\r\n      value: condC2Thunder,\r\n      path: condC2ThunderPath,\r\n      name: trm(\"c2.thunderHit\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: c2Thunder_electro_enemyRes_\r\n          }, {\r\n            text: sgt(\"duration\"),\r\n            value: datamine.constellation2.duration,\r\n            unit: \"s\"\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation6\", {\r\n      value: condC6After2Thunder,\r\n      path: condC6After2ThunderPath,\r\n      name: trm(\"c6.fallingThunder3\"),\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c6_thunder_dmg_,\r\n              { key: `char_${key}:${elementKey}.c6.fallingThunderBonus_`, variant: \"electro\" }\r\n            )\r\n          }, {\r\n            text: tr(\"burst.skillParams.2\"),\r\n            value: datamine.constellation6.energyRestore\r\n          }]\r\n        }\r\n      }\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\"),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { TalentSheetElementKey } from '../../CharacterSheet'\r\nimport burst from './burst.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2\r\n}\r\n\r\nexport default talentAssets\r\n","import { CharacterData } from 'pipeline'\r\nimport { Translate } from '../../../../Components/Translate'\r\nimport { input, target } from '../../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../../Types/consts'\r\nimport { range } from '../../../../Util/Util'\r\nimport { cond, sgt, st } from '../../../SheetUtil'\r\nimport { charTemplates, TalentSheet } from '../../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../../dataUtil'\r\nimport data_gen_src from '../data_gen.json'\r\nimport talentAssets from './assets'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Traveler\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets, elementKey)\r\n\r\nconst tr = (strKey: string) => <Translate ns=\"char_Traveler_gen\" key18={`${elementKey}.${strKey}`} />\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: skillParam_gen.auto[a++],\r\n    hit2: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    numShockwaves: 4,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    skill_cdRed: 2\r\n  },\r\n  passive2: {\r\n    geoDmg: percent(0.6),\r\n  },\r\n  constellation1: {\r\n    critRate_: percent(0.1),\r\n  },\r\n  constellation4: {\r\n    energyRestore: 5,\r\n    maxTriggers: 5\r\n  },\r\n  constellation6: {\r\n    burstDuration: 5,\r\n    skillDuration: 10\r\n  }\r\n} as const\r\n\r\nconst [condC1BurstAreaPath, condC1BurstArea] = cond(key, `${elementKey}C1BurstArea`)\r\nconst c1BurstArea_critRate_Disp = greaterEq(input.constellation, 1,\r\n  equal(condC1BurstArea, \"on\", datamine.constellation1.critRate_)\r\n)\r\nconst c1BurstArea_critRate_ = equal(input.activeCharKey, target.charKey, c1BurstArea_critRate_Disp)\r\n\r\nconst [condC4BurstHitPath, condC4BurstHit] = cond(key, `${elementKey}C4BurstHit`)\r\nconst c4Burst_energyRestore = lookup(condC4BurstHit,\r\n  Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n    stack,\r\n    constant(stack * datamine.constellation4.energyRestore)\r\n  ])),\r\n  naught\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    dmg: customDmgNode(\r\n      prod(input.total.atk, datamine.passive2.geoDmg), \"elemental\", { hit: { ele: constant(\"geo\") } }\r\n    )\r\n  },\r\n  constellation2: {\r\n    dmg: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg, \"skill\")),\r\n  }\r\n} as const\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, undefined, data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      critRate_: c1BurstArea_critRate_\r\n    }\r\n  }\r\n})\r\n\r\nconst talentSheet: TalentSheet = {\r\n  sheets: {\r\n    auto: ct.talentTemplate(\"auto\", [{\r\n      text: tr(\"auto.fields.normal\")\r\n    }, {\r\n      fields: datamine.normal.hitArr.map((_, i) => ({\r\n        node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:${elementKey}.auto.skillParams.${i}` }),\r\n      }))\r\n    }, {\r\n      text: tr(\"auto.fields.charged\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(1)\"\r\n      }, {\r\n        node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:${elementKey}.auto.skillParams.5` }),\r\n        textSuffix: \"(2)\"\r\n      }, {\r\n        text: tr(\"auto.skillParams.6\"),\r\n        value: datamine.charged.stamina,\r\n      }]\r\n    }, {\r\n      text: tr(\"auto.fields.plunging\"),\r\n    }, {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n      }, {\r\n        node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n      }]\r\n    }]),\r\n\r\n    skill: ct.talentTemplate(\"skill\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:${elementKey}.skill.skillParams.0` }),\r\n      }, {\r\n        text: tr(\"skill.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.skill.duration}s + ${datamine.constellation6.skillDuration}s = ${datamine.skill.duration + datamine.constellation6.skillDuration}`\r\n          : datamine.skill.duration,\r\n        unit: \"s\",\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: data => data.get(input.asc).value >= 1\r\n          ? `${datamine.skill.cd}s - ${datamine.passive1.skill_cdRed}s = ${datamine.skill.cd - datamine.passive1.skill_cdRed}`\r\n          : datamine.skill.cd,\r\n        unit: \"s\",\r\n      }]\r\n    }, ct.headerTemplate(\"passive1\", {\r\n      fields: [{\r\n        text: st(\"skillCDRed\"),\r\n        value: datamine.passive1.skill_cdRed,\r\n        unit: \"s\"\r\n      }]\r\n    }), ct.headerTemplate(\"constellation2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:${elementKey}.c2.key` }),\r\n      }]\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.skillDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    burst: ct.talentTemplate(\"burst\", [{\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.burst.dmg,\r\n          { key: `sheet_gen:skillDMG` }\r\n        ),\r\n        textSuffix: st(\"brHits\", { count: datamine.burst.numShockwaves })\r\n      }, {\r\n        text: tr(\"burst.skillParams.1\"),\r\n        value: data => data.get(input.constellation).value >= 6\r\n          ? `${datamine.burst.duration}s + ${datamine.constellation6.burstDuration}s = ${datamine.burst.duration + datamine.constellation6.burstDuration}`\r\n          : datamine.burst.duration,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"cd\"),\r\n        value: datamine.burst.cd,\r\n        unit: \"s\"\r\n      }, {\r\n        text: sgt(\"energyCost\"),\r\n        value: datamine.burst.enerCost,\r\n      }]\r\n    }, ct.conditionalTemplate(\"constellation1\", {\r\n      value: condC1BurstArea,\r\n      path: condC1BurstAreaPath,\r\n      name: st(\"activeCharField\"),\r\n      teamBuff: true,\r\n      states: {\r\n        on: {\r\n          fields: [{\r\n            node: infoMut(c1BurstArea_critRate_Disp, { key: \"critRate_\" }),\r\n          }, {\r\n            text: st(\"incInterRes\"),\r\n          }]\r\n        }\r\n      }\r\n    }), ct.conditionalTemplate(\"constellation4\", {\r\n      value: condC4BurstHit,\r\n      path: condC4BurstHitPath,\r\n      name: st(\"hitOp.burst\"),\r\n      states: Object.fromEntries(range(1, datamine.constellation4.maxTriggers).map(stack => [\r\n        stack,\r\n        {\r\n          name: st(\"hits\", { count: stack }),\r\n          fields: [{\r\n            node: infoMut(c4Burst_energyRestore, { key: \"sheet:energyRegen\" }),\r\n          }]\r\n        }\r\n      ]))\r\n    }), ct.headerTemplate(\"constellation6\", {\r\n      fields: [{\r\n        text: st(\"durationInc\"),\r\n        value: datamine.constellation6.burstDuration,\r\n        unit: \"s\"\r\n      }]\r\n    })]),\r\n\r\n    passive1: ct.talentTemplate(\"passive1\"),\r\n    passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n      fields: [{\r\n        node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:${elementKey}.passive2.key` })\r\n      }]\r\n    })]),\r\n    constellation1: ct.talentTemplate(\"constellation1\"),\r\n    constellation2: ct.talentTemplate(\"constellation2\"),\r\n    constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n    constellation4: ct.talentTemplate(\"constellation4\"),\r\n    constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n    constellation6: ct.talentTemplate(\"constellation6\"),\r\n  }\r\n}\r\nexport default talentSheet\r\n","import { CharacterData } from 'pipeline'\r\nimport { CharacterKey, WeaponTypeKey } from '../../../Types/consts'\r\nimport { trans } from '../../SheetUtil'\r\nimport CharacterSheet, { ICharacterSheet } from '../CharacterSheet'\r\nimport anemo, { data as anemoData } from './anemo'\r\nimport data_gen_src from './data_gen.json'\r\nimport dendro, { data as dendroData } from './dendro'\r\nimport electro, { data as electroData } from './electro'\r\nimport geo, { data as geoData } from './geo'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport card from './Traveler_Female_Card.jpg'\r\nconst data_gen = data_gen_src as CharacterData\r\nconst key: CharacterKey = \"Traveler\"\r\nconst [tr] = trans(\"char\", key)\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  rarity: data_gen.star,\r\n  weaponTypeKey: data_gen.weaponTypeKey as WeaponTypeKey,\r\n  gender: \"F/M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talents: {\r\n    anemo,\r\n    geo,\r\n    electro,\r\n    dendro,\r\n  }\r\n};\r\nexport default new CharacterSheet(sheet, {\r\n  anemo: anemoData,\r\n  geo: geoData,\r\n  electro: electroData,\r\n  dendro: dendroData,\r\n});\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Venti_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input, target } from '../../../Formula'\r\nimport { reactions } from '../../../Formula/reaction'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { absorbableEle, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Venti\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1x2\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x2\r\n      skillParam_gen.auto[a++], // 5\r\n      skillParam_gen.auto[a++], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++], // Aimed\r\n    fully: skillParam_gen.auto[a++], // Fully-charged\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    pressDmg: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDmg: skillParam_gen.skill[s++],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    baseDmg: skillParam_gen.burst[b++],\r\n    baseTicks: 20,\r\n    absorbDmg: skillParam_gen.burst[b++],\r\n    absorbTicks: 15,\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0]\r\n  },\r\n  passive1: {\r\n    duration: skillParam_gen.passive1[0][0]\r\n  },\r\n  // No real p3/constellation datamine values :(\r\n  passive3: {\r\n    stam_: 0.20,\r\n  },\r\n  constellation1: {\r\n    dmgRatio: 0.33,\r\n  },\r\n  constellation2: {\r\n    res_: -0.12,\r\n    duration: 10,\r\n  },\r\n  constellation4: {\r\n    anemo_dmg_: 0.25,\r\n    duration: 10,\r\n  },\r\n  constellation6: {\r\n    res_: -0.20,\r\n    duration: 10, // From KQM\r\n  }\r\n} as const\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst p3_staminaGlidingDec_ = constant(datamine.passive3.stam_)\r\n\r\nconst [condBurstAbsorptionPath, condBurstAbsorption] = cond(key, \"burstAbsorption\")\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst c2Hit_anemo_enemyRes_ = greaterEq(input.constellation, 2,\r\n  lookup(condC2, {\r\n    \"hit\": constant(datamine.constellation2.res_),\r\n    \"launched\": prod(datamine.constellation2.res_, 2)\r\n  },\r\n    naught\r\n  )\r\n)\r\nconst c2Hit_phys_enemyRes__ = { ...c2Hit_anemo_enemyRes_ }\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst c4_anemo_dmg_ = greaterEq(input.constellation, 4, equal(condC4, \"pickup\",\r\n  datamine.constellation4.anemo_dmg_))\r\n\r\nconst [condC6Path, condC6] = cond(key, \"c6\")\r\nconst c6_anemo_enemyRes_ = greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", datamine.constellation6.res_))\r\nconst c6_ele_enemyRes_arr = Object.fromEntries(absorbableEle.map(ele => [\r\n  `${ele}_enemyRes_`,\r\n  greaterEq(input.constellation, 6, equal(condC6, \"takeDmg\", equal(ele, condBurstAbsorption, datamine.constellation6.res_)))\r\n]))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    fully: dmgNode(\"atk\", datamine.charged.fully, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.pressDmg, \"skill\"),\r\n    hold: dmgNode(\"atk\", datamine.skill.holdDmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    base: dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"),\r\n    absorb: unequal(condBurstAbsorption, undefined, dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } })),\r\n    full7: unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 7)\r\n    )),\r\n    full14: unequal(condBurstAbsorption, \"hydro\", unequal(condBurstAbsorption, undefined, sum(\r\n      prod(dmgNode(\"atk\", datamine.burst.baseDmg, \"burst\"), 20),\r\n      prod(dmgNode(\"atk\", datamine.burst.absorbDmg, \"burst\", { hit: { ele: condBurstAbsorption } }), 15),\r\n      prod(lookup(condBurstAbsorption, objectKeyMap(absorbableEle, ele => reactions.anemo[`${ele}Swirl`]), naught), 14)\r\n    )))\r\n  },\r\n  constellation1: {\r\n    aimed: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.aimed, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\"\r\n      )\r\n    ),\r\n    fully: greaterEq(input.constellation, 1,\r\n      customDmgNode(\r\n        prod(\r\n          percent(datamine.constellation1.dmgRatio),\r\n          subscript(input.total.autoIndex, datamine.charged.fully, { key: \"_\" }),\r\n          input.total.atk\r\n        ),\r\n        \"charged\", { hit: { ele: constant(elementKey) } }\r\n      )\r\n    ),\r\n  },\r\n}\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"mondstadt\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    burst: nodeC3,\r\n    skill: nodeC5,\r\n  },\r\n  premod: {\r\n    anemo_dmg_: c4_anemo_dmg_,\r\n    staminaGlidingDec_: p3_staminaGlidingDec_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      anemo_enemyRes_: sum(c2Hit_anemo_enemyRes_, c6_anemo_enemyRes_),\r\n      physical_enemyRes_: c2Hit_phys_enemyRes__,\r\n      ...c6_ele_enemyRes_arr,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 0 || i === 3) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.aimed, { key: `char_${key}:addAimed` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.fully, { key: `char_${key}_gen:auto.skillParams.7` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation1.fully, { key: `char_${key}:addFullAimed` })\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.hold, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"upcurrentDuration\"),\r\n          value: datamine.passive1.duration,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: tr(\"constellation2.name\"),\r\n        states: {\r\n          hit: {\r\n            name: trm(\"c2.hit\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          },\r\n          launched: {\r\n            name: trm(\"c2.launched\"),\r\n            fields: [{\r\n              node: infoMut(c2Hit_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }, {\r\n              node: c2Hit_phys_enemyRes__\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.base, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n          textSuffix: st(\"brHits\", { count: datamine.burst.baseTicks })\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: infoMut(dmgFormulas.burst.absorb, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n            textSuffix: st(\"brHits\", { count: datamine.burst.absorbTicks })\r\n          }]\r\n        }]))\r\n      }), ct.headerTemplate(\"burst\", { // Custom burst formula\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.full7, { key: `char_${key}:fullBurstDMG.dmg7`, variant: \"physical\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.full14, { key: `char_${key}:fullBurstDMG.dmg14`, variant: \"physical\" }),\r\n        }],\r\n        canShow: unequal(condBurstAbsorption, undefined, 1),\r\n      }), {\r\n        text: trm(\"fullBurstDMG.description\"),\r\n      }, ct.headerTemplate(\"passive2\", {\r\n        fields: [{\r\n          text: trm(\"regenEner\"),\r\n        }, {\r\n          text: trm(\"q\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 Anemo\r\n        value: condC6,\r\n        path: condC6Path,\r\n        teamBuff: true,\r\n        name: trm(\"c6\"),\r\n        states: {\r\n          takeDmg: {\r\n            fields: [{\r\n              node: infoMut(c6_anemo_enemyRes_, { key: \"anemo_enemyRes_\", variant: \"anemo\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", { // C6 elemental self-display\r\n        fields: absorbableEle.map(eleKey => (\r\n          { node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`] }\r\n        )),\r\n        canShow: unequal(condBurstAbsorption, undefined,\r\n          equal(condC6, \"takeDmg\",\r\n            equal(target.charKey, key, 1)\r\n          )\r\n        ),\r\n      }), ct.conditionalTemplate(\"constellation6\", { // C6 elemental team-display\r\n        value: condBurstAbsorption,\r\n        path: condBurstAbsorptionPath,\r\n        name: st(\"eleAbsor\"),\r\n        teamBuff: true,\r\n        canShow: equal(condC6, \"takeDmg\", unequal(input.activeCharKey, key, 1)),\r\n        states: Object.fromEntries(absorbableEle.map(eleKey => [eleKey, {\r\n          name: <ColorText color={eleKey}>{sgt(`element.${eleKey}`)}</ColorText>,\r\n          fields: [{\r\n            node: c6_ele_enemyRes_arr[`${eleKey}_enemyRes_`]\r\n          }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\", [{ fields: [{ node: p3_staminaGlidingDec_ }] }]),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [\r\n        ct.conditionalTemplate(\"constellation4\", {\r\n          value: condC4,\r\n          path: condC4Path,\r\n          name: trm(\"c4\"),\r\n          states: {\r\n            pickup: {\r\n              fields: [{\r\n                node: c4_anemo_dmg_,\r\n              }]\r\n            }\r\n          }\r\n        }),\r\n      ]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiangling_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiangling\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3x2\r\n      skillParam_gen.auto[a++], // 4x4\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[a++], // 1\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg1: skillParam_gen.burst[b++],\r\n    dmg2: skillParam_gen.burst[b++],\r\n    dmg3: skillParam_gen.burst[b++],\r\n    dmgNado: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    atk_bonus: skillParam_gen.passive2[p2++][0],\r\n    duration: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation1: {\r\n    pyroRes: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n  },\r\n  constellation2: {\r\n    duration1: skillParam_gen.constellation2[0],\r\n    duration2: skillParam_gen.constellation2[1],\r\n    dmg: skillParam_gen.constellation2[2],\r\n  },\r\n  constellation6: {\r\n    pyroDmg: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\n// A4\r\nconst [condAfterChiliPath, condAfterChili] = cond(key, \"afterChili\")\r\nconst afterChili = greaterEq(input.asc, 4,\r\n  equal(\"afterChili\", condAfterChili, percent(datamine.passive2.atk_bonus)))\r\n\r\n// C1\r\nconst [condAfterGuobaHitPath, condAfterGuobaHit] = cond(key, \"afterGuobaHit\")\r\nconst afterGuobaHit = greaterEq(input.constellation, 1,\r\n  equal(\"afterGuobaHit\", condAfterGuobaHit, percent(-datamine.constellation1.pyroRes)))\r\n\r\n// C6\r\nconst [condDuringPyronadoPath, condDuringPyronado] = cond(key, \"afterPyronado\")\r\nconst duringPyronado = greaterEq(input.constellation, 6,\r\n  equal(\"duringPyronado\", condDuringPyronado, percent(datamine.constellation6.pyroDmg))\r\n)\r\nconst antiC6 = prod(duringPyronado, -1)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n  burst: {\r\n    dmg1: dmgNode(\"atk\", datamine.burst.dmg1, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg2: dmgNode(\"atk\", datamine.burst.dmg2, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.burst.dmg3, \"burst\"),\r\n    dmgNado: dmgNode(\"atk\", datamine.burst.dmgNado, \"burst\", { premod: { pyro_dmg_: antiC6 } }),\r\n  },\r\n  constellation2: {\r\n    dmg: customDmgNode(prod(input.total.atk, percent(datamine.constellation2.dmg)), \"elemental\",\r\n      { hit: { ele: constant(elementKey) } })\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_: afterChili,\r\n      pyro_dmg_: duringPyronado,\r\n      pyro_enemyRes_: afterGuobaHit,\r\n    }\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 2 ? st(\"brHits\", { count: 2 }) : i === 3 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` },)\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation1\", {\r\n        value: condAfterGuobaHit,\r\n        path: condAfterGuobaHitPath,\r\n        name: trm(\"afterGuobaHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterGuobaHit: {\r\n            fields: [{\r\n              node: afterGuobaHit\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg1, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg2, { key: `char_${key}_gen:burst.skillParams.1` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmg3, { key: `char_${key}_gen:burst.skillParams.2` },)\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dmgNado, { key: `char_${key}_gen:burst.skillParams.3` },)\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        value: condDuringPyronado,\r\n        path: condDuringPyronadoPath,\r\n        name: trm(\"duringPyronado\"),\r\n        teamBuff: true,\r\n        states: {\r\n          duringPyronado: {\r\n            fields: [{\r\n              text: trm(\"c6Exception\"),\r\n              canShow: data => data.get(input.constellation).value >= 6\r\n                && data.get(condDuringPyronado).value === \"duringPyronado\"\r\n            }, {\r\n              node: duringPyronado\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: \"s\",\r\n            }],\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        value: condAfterChili,\r\n        path: condAfterChiliPath,\r\n        name: trm(\"afterChili\"),\r\n        teamBuff: true,\r\n        states: {\r\n          afterChili: {\r\n            fields: [{\r\n              node: afterChili,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        fields: [{\r\n          value: datamine.constellation2.dmg,\r\n          node: infoMut(dmgFormulas.constellation2.dmg, { key: `char_${key}:explosionDMG` }),\r\n        }]\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xiao_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport ColorText from '../../../Components/ColoredText'\r\nimport { input } from '../../../Formula'\r\nimport { equal, equalStr, greaterEq, infoMut, lookup, naught, prod, subscript, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xiao\"\r\nconst elementKey: ElementKey = \"anemo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], // 1\r\n      skillParam_gen.auto[2], // 2\r\n      skillParam_gen.auto[3], // 3\r\n      skillParam_gen.auto[4], // 4\r\n      skillParam_gen.auto[6], // 5\r\n      skillParam_gen.auto[7], // 6\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg1: skillParam_gen.auto[8], // 1\r\n    stamina: skillParam_gen.auto[9][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[10],\r\n    low: skillParam_gen.auto[11],\r\n    high: skillParam_gen.auto[12],\r\n  },\r\n  skill: {\r\n    press: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmgBonus: skillParam_gen.burst[b++],\r\n    drain: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    dmgBonus: skillParam_gen.passive1[0][0],\r\n  },\r\n  passive2: {\r\n    duration: skillParam_gen.passive2[0][0],\r\n    skillDmgBonus: skillParam_gen.passive2[1][0],\r\n    maxStacks: skillParam_gen.passive2[2][0],\r\n  },\r\n  passive3: {\r\n    staminaClimbingDec_: 0.20,\r\n  },\r\n  constellation2: {\r\n    enerRech_: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    hpThresh: skillParam_gen.constellation4[0],\r\n    def_: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    duration: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.dmg1, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    press: dmgNode(\"atk\", datamine.skill.press, \"skill\"),\r\n  },\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nconst [condInBurstPath, condInBurst] = cond(key, \"inBurst\")\r\nconst auto_dmg_ = subscript(input.total.burstIndex, datamine.burst.dmgBonus, { key: \"_\" })\r\nconst normal_dmg_ = equal(\"inBurst\", condInBurst, auto_dmg_, { key: \"_\" })\r\nconst charged_dmg_ = { ...normal_dmg_ }\r\nconst plunging_dmg_ = { ...normal_dmg_ }\r\nconst lifeDrain = subscript(input.total.burstIndex, datamine.burst.drain)\r\nconst infusion = equalStr(\"inBurst\", condInBurst, elementKey)\r\n\r\nconst [condA1BurstStackPath, condA1BurstStack] = cond(key, \"a1BurstStack\")\r\nconst a1BurstStackArr = range(0, 4)\r\nconst all_dmg_ = equal(\"inBurst\", condInBurst,\r\n  lookup(condA1BurstStack,\r\n    Object.fromEntries(a1BurstStackArr.map(i => [i, prod(datamine.passive1.dmgBonus, i + 1)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst [condA4SkillStackPath, condA4SkillStack] = cond(key, \"a4SkillStack\")\r\nconst a4SkillStackArr = range(1, datamine.passive2.maxStacks)\r\nconst skill_dmg_ = greaterEq(input.asc, 4,\r\n  lookup(condA4SkillStack,\r\n    Object.fromEntries(a4SkillStackArr.map(i => [i, prod(datamine.passive2.skillDmgBonus, i)])),\r\n    naught\r\n  )\r\n)\r\n\r\nconst c2Inactive = greaterEq(input.constellation, 2,\r\n  unequal(input.activeCharKey, key, 1)\r\n)\r\nconst c2Inactive_enerRech_ = equal(c2Inactive, 1, datamine.constellation2.enerRech_)\r\n\r\nconst [condC4BelowHPPath, condC4BelowHP] = cond(key, \"c4BelowHP\")\r\nconst c4BelowHP_def_ = greaterEq(input.constellation, 4,\r\n  equal(\"c4BelowHP\", condC4BelowHP, datamine.constellation4.def_))\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    normal_dmg_,\r\n    charged_dmg_,\r\n    plunging_dmg_,\r\n    all_dmg_,\r\n    skill_dmg_,\r\n    enerRech_: c2Inactive_enerRech_,\r\n    def_: c4BelowHP_def_,\r\n  },\r\n  infusion: {\r\n    nonOverridableSelf: infusion\r\n  },\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: st(\"charges\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 3 : 2,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", { // A4\r\n        path: condA4SkillStackPath,\r\n        value: condA4SkillStack,\r\n        name: trm(\"skillStack\"),\r\n        states: Object.fromEntries(a4SkillStackArr.map(i => [i, {\r\n          name: st(\"uses\", { count: i }),\r\n          fields: [{ node: skill_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(auto_dmg_, { key: `char_${key}:burst.autoAtkDmgBonus_` }),\r\n        }, {\r\n          node: infoMut(lifeDrain, { key: `char_${key}:burst.lifeDrain_` }),\r\n          textSuffix: trm(\"burst.currentHPPerSec\"),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        path: condInBurstPath,\r\n        value: condInBurst,\r\n        name: trm(\"burst.inBurst\"),\r\n        states: {\r\n          inBurst: {\r\n            fields: [{\r\n              node: normal_dmg_,\r\n            }, {\r\n              node: charged_dmg_,\r\n            }, {\r\n              node: plunging_dmg_,\r\n            }, {\r\n              text: trm(\"burst.incJump\"),\r\n            }, {\r\n              text: trm(\"burst.incAtkAoe\"),\r\n            }, {\r\n              canShow: data => data.get(infusion).value === elementKey,\r\n              text: <ColorText color=\"anemo\">{st(\"infusion.anemo\")}</ColorText>\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", { // A1\r\n        path: condA1BurstStackPath,\r\n        value: condA1BurstStack,\r\n        name: trm(\"burst.stack\"),\r\n        canShow: equal(\"inBurst\", condInBurst, 1),\r\n        states: Object.fromEntries(a1BurstStackArr.map(i => [i, {\r\n          name: st(\"seconds\", { count: i * 3 }),\r\n          fields: [{ node: all_dmg_ }]\r\n        }]))\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.fieldsTemplate(\"constellation2\", {\r\n        canShow: equal(c2Inactive, 1, 1),\r\n        teamBuff: true,\r\n        fields: [{ node: c2Inactive_enerRech_ }],\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4BelowHPPath,\r\n        value: condC4BelowHP,\r\n        name: st(\"lessPercentHP\", { percent: datamine.constellation4.hpThresh * 100 }),\r\n        states: {\r\n          c4BelowHP: {\r\n            fields: [{ node: c4BelowHP_def_ }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xingqiu_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from \"../../../Formula/index\"\r\nimport { constant, equal, greaterEq, infoMut, min, percent, prod, subscript, sum, one } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customHealNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst key: CharacterKey = \"Xingqiu\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet s = 0, b = 0\r\nexport const datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      (skillParam_gen.auto[0]),//1\r\n      (skillParam_gen.auto[1]),//2\r\n      (skillParam_gen.auto[2]),//3\r\n      // (skillParam_gen.auto[3]),\r\n      (skillParam_gen.auto[4]),//4\r\n      (skillParam_gen.auto[5]),//5\r\n      // (skillParam_gen.auto[6]),\r\n    ]\r\n  },\r\n  charged: {\r\n    hit1: (skillParam_gen.auto[7]),\r\n    hit2: (skillParam_gen.auto[8]),\r\n    stamina: skillParam_gen.auto[9][0]\r\n  },\r\n  plunging: {\r\n    dmg: (skillParam_gen.auto[10]),\r\n    low: (skillParam_gen.auto[11]),\r\n    high: (skillParam_gen.auto[12]),\r\n  },\r\n  skill: {\r\n    hit1: (skillParam_gen.skill[s++]),\r\n    hit2: (skillParam_gen.skill[s++]),\r\n    dmgRed_: (skillParam_gen.skill[s++]),\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: (skillParam_gen.burst[b++]),\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    cost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    hydro_dmg_: 0.20\r\n  },\r\n  constellation2: {\r\n    hydro_enemyRes_: -0.15,\r\n    skill_duration: 3\r\n  },\r\n  constellation4: {\r\n    dmg_: 0.50\r\n  },\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4, datamine.passive2.hydro_dmg_)\r\n\r\nconst [condC2Path, condC2] = cond(key, \"c2\")\r\nconst nodeC2 = greaterEq(input.constellation, 2,\r\n  equal(condC2, \"on\", datamine.constellation2.hydro_enemyRes_))\r\n\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"burst\")\r\nconst nodeC4 = greaterEq(input.constellation, 4,\r\n  equal(condBurst, \"on\", datamine.constellation4.dmg_), { key: `char_${key}:c4dmg_` })\r\n\r\nconst nodeSkillDmgRed_ = equal(condSkill, \"on\",\r\n  sum(subscript(input.total.skillIndex, datamine.skill.dmgRed_, { key: \"_\" }), min(percent(0.24), prod(percent(0.2), input.premod.hydro_dmg_))))\r\n\r\nconst nodeA4Heal = customHealNode(greaterEq(input.asc, 1, prod(input.total.hp, percent(0.06))))\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg1: dmgNode(\"atk\", datamine.charged.hit1, \"charged\"),\r\n    dmg2: dmgNode(\"atk\", datamine.charged.hit2, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    // Multiplicative DMG increase requires customDmgNode\r\n    press1: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit1, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    press2: customDmgNode(prod(\r\n      subscript(input.total.skillIndex, datamine.skill.hit2, { key: \"_\" }),\r\n      input.total.atk,\r\n      sum(one, nodeC4)\r\n    ), \"skill\"),\r\n    dmgRed_: nodeSkillDmgRed_,\r\n  },\r\n  passive1: {\r\n    healing: nodeA4Heal\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  }\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      hydro_enemyRes_: nodeC2,\r\n      dmgRed_: infoMut(nodeSkillDmgRed_, { key: \"dmgRed_\" }),\r\n    }\r\n  },\r\n  premod: {\r\n    hydro_dmg_: nodeA4,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: (i === 2 || i === 4) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg1, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.dmg2, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.press1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(1)\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.press2, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n          textSuffix: \"(2)\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: data => data.get(input.constellation).value >= 2\r\n            ? `${datamine.skill.duration}s + ${datamine.constellation2.skill_duration}`\r\n            : `${datamine.skill.duration}`,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.3\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        teamBuff: true,\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        name: trm(\"skillCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: dmgFormulas.skill.dmgRed_,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burstCond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n            }, {\r\n              text: tr(\"burst.skillParams.1\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              node: nodeC4\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.passive1.healing, { key: `sheet_gen:healing` }),\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: nodeA4\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2,\r\n        path: condC2Path,\r\n        teamBuff: true,\r\n        name: trm(\"c2Cond\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC2\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    },\r\n  },\r\n};\r\n\r\nexport default new CharacterSheet(sheet, data);\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Xinyan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Xinyan\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4\r\n    ]\r\n  },\r\n  charged: {\r\n    spin: skillParam_gen.auto[a++],\r\n    final: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    duration: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    shieldArr: [\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n      { defShield_: skillParam_gen.skill[s++], baseShield: skillParam_gen.skill[s++] },\r\n    ],\r\n    lvl3Dmg: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressPhysDmg: skillParam_gen.burst[b++],\r\n    dotPyroDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    duration: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    physical_dmg_: skillParam_gen.passive2[0][0],\r\n  },\r\n  c1: {\r\n    atkSPD_: skillParam_gen.constellation1[0],\r\n    duration: skillParam_gen.constellation1[1],\r\n    cd: skillParam_gen.constellation1[1],\r\n  },\r\n  c2: {\r\n    burstphysical_critRate_: skillParam_gen.constellation2[0],\r\n  },\r\n  c4: {\r\n    physical_enemyRes_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  c6: {\r\n    staminaChargedDec_: -skillParam_gen.constellation6[0],\r\n    charged_atkBonus: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\n\r\nconst [condSkillHitNumPath, condSkillHitNum] = cond(key, \"skillHitNum\")\r\n\r\nconst [condP2ShieldPath, condP2Shield] = cond(key, \"p2Shield\")\r\nconst p2Shield_physical_dmg_Disp = greaterEq(input.asc, 4, equal(condP2Shield, \"on\", datamine.passive2.physical_dmg_))\r\nconst p2Shield_physical_dmg_ = equal(input.activeCharKey, target.charKey, p2Shield_physical_dmg_Disp)\r\n\r\nconst [condC1CritPath, condC1Crit] = cond(key, \"c1Crit\")\r\nconst c1Crit_atkSPD_ = greaterEq(input.constellation, 1, equal(condC1Crit, \"on\", datamine.c1.atkSPD_))\r\n\r\nconst c2BurstPhysical_critRate_ = greaterEq(input.constellation, 2, datamine.c2.burstphysical_critRate_)\r\n\r\nconst [condC4SkillHitPath, condC4SkillHit] = cond(key, \"c4Burst\")\r\nconst c4SkillHit_physical_enemyRes_ = greaterEq(input.constellation, 4, equal(condC4SkillHit, \"on\", datamine.c4.physical_enemyRes_))\r\n\r\nconst c6_staminaChargedDec_ = greaterEq(input.constellation, 6, datamine.c6.staminaChargedDec_)\r\nconst [condC6ChargedPath, condC6Charged] = cond(key, \"c6Charged\")\r\nconst c6_chargedAtkBonus = greaterEq(input.constellation, 6,\r\n  equal(condC6Charged, \"on\",\r\n    prod(input.total.def, percent(datamine.c6.charged_atkBonus))\r\n  )\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    spin: dmgNode(\"atk\", datamine.charged.spin, \"charged\"),\r\n    final: dmgNode(\"atk\", datamine.charged.final, \"charged\")\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\"),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `normShield${i + 1}`,\r\n      shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"),\r\n    ])),\r\n    ...Object.fromEntries(datamine.skill.shieldArr.map((data, i) => [\r\n      `pyroShield${i + 1}`,\r\n      shieldElement(elementKey, shieldNodeTalent(\"def\", data.defShield_, data.baseShield, \"skill\"))\r\n    ])),\r\n    lvl3Dmg: dmgNode(\"atk\", datamine.skill.lvl3Dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressPhysDmg: dmgNode(\"atk\", datamine.burst.pressPhysDmg, \"burst\", {\r\n      hit: { ele: constant(\"physical\") },\r\n      premod: {\r\n        burst_critRate_: c2BurstPhysical_critRate_,\r\n      }\r\n    }),\r\n    dotPyroDmg: dmgNode(\"atk\", datamine.burst.dotPyroDmg, \"burst\"),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      physical_dmg_: p2Shield_physical_dmg_,\r\n      physical_enemyRes_: c4SkillHit_physical_enemyRes_,\r\n    }\r\n  },\r\n  premod: {\r\n    atkSPD_: c1Crit_atkSPD_,\r\n    staminaChargedDec_: c6_staminaChargedDec_,\r\n    atk: c6_chargedAtkBonus\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\")\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.spin, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.final, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: `${datamine.charged.stamina}/s`,\r\n        }],\r\n      }, ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: c6_staminaChargedDec_\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation6\", {\r\n        value: condC6Charged,\r\n        path: condC6ChargedPath,\r\n        name: trm(\"c6.duringCharge\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c6_chargedAtkBonus\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkillHitNum,\r\n        path: condSkillHitNumPath,\r\n        name: trm(\"skill.shieldLevel\"),\r\n        states: Object.fromEntries(range(1, 3).map(lvl => [ // For each level\r\n          lvl, {\r\n            name: trm(`skill.shieldLevels.${lvl}`),\r\n            fields: [\r\n              ...([\"norm\", \"pyro\"] as const).flatMap(type => ([{ // For each type of shield\r\n                node: infoMut(dmgFormulas.skill[`${type}Shield${lvl}`], // Make the node\r\n                  {\r\n                    key: type === \"norm\" // And change the key to match\r\n                      ? `char_${key}_gen:skill.skillParams.${lvl}`\r\n                      : `char_${key}:skill.pyroShield.${lvl}`\r\n                  }\r\n                )\r\n              },\r\n              ])), {\r\n                text: sgt(\"duration\"),\r\n                value: datamine.skill.duration,\r\n                unit: \"s\",\r\n              },\r\n              // Level 3 damage\r\n              ...lvl === 3 ? [{ node: infoMut(dmgFormulas.skill.lvl3Dmg, { key: `char_${key}_gen:skill.skillParams.4` }) }] : [],\r\n            ]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"passive1\", {\r\n        fields: [{\r\n          text: trm(\"p1.desc\"),\r\n        }]\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2Shield,\r\n        path: condP2ShieldPath,\r\n        name: trm(\"p2.activeShield\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(p2Shield_physical_dmg_Disp, { key: \"physical_dmg_\" })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4SkillHit,\r\n        path: condC4SkillHitPath,\r\n        name: trm(\"c4.swingHit\"),\r\n        teamBuff: true,\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c4SkillHit_physical_enemyRes_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c4.duration,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressPhysDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.dotPyroDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(c2BurstPhysical_critRate_, { key: `char_${key}:c2.key_` }),\r\n        }, {\r\n          text: trm(\"c2.shield\"),\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\", [ct.conditionalTemplate(\"constellation1\", {\r\n        value: condC1Crit,\r\n        path: condC1CritPath,\r\n        name: st(\"hitOp.crit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c1Crit_atkSPD_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.c1.duration,\r\n              unit: \"s\",\r\n            }, {\r\n              text: sgt(\"cd\"),\r\n              value: datamine.c1.cd,\r\n              unit: \"s\",\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yae_Miko_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lessThan, percent, prod } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YaeMiko\"\r\nconst elementKey: ElementKey = \"electro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    dmg3: skillParam_gen.skill[s++],\r\n    dmg4: skillParam_gen.skill[s++],\r\n    duration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    tenkoDmg: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    eleMas_dmg_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    ele_dmg_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    defIgn_: skillParam_gen.constellation6[0],\r\n  }\r\n\r\n} as const\r\n\r\nconst nodeAsc4 = greaterEq(input.asc, 4, prod(input.total.eleMas, percent(datamine.passive2.eleMas_dmg_, { fixed: 2 })))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"hit\", condC4, datamine.constellation4.ele_dmg_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, datamine.constellation6.defIgn_)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg1: lessThan(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg1, \"skill\")),\r\n    dmg2: dmgNode(\"atk\", datamine.skill.dmg2, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg3: dmgNode(\"atk\", datamine.skill.dmg3, \"skill\", { enemy: { defIgn: nodeC6 } }),\r\n    dmg4: greaterEq(input.constellation, 2, dmgNode(\"atk\", datamine.skill.dmg4, \"skill\", { enemy: { defIgn: nodeC6 } })),\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    tenkoDmg: dmgNode(\"atk\", datamine.burst.tenkoDmg, \"burst\"),\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nconst data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5\r\n  },\r\n  total: {\r\n    skill_dmg_: nodeAsc4,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      electro_dmg_: nodeC4\r\n    },\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.4\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg3, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg4, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: datamine.skill.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.cd,\r\n        }],\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.tenkoDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [{ fields: [{ node: nodeAsc4 }] }]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        teamBuff: true,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          hit: {\r\n            fields: [{\r\n              node: nodeC4,\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yanfei_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, customShieldNode, dataObjForCharacterSheet, dmgNode, shieldElement } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yanfei\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n    ]\r\n  },\r\n  charged: {\r\n    dmgArr: [\r\n      skillParam_gen.auto[a++], // 0 seals\r\n      skillParam_gen.auto[a++], // 1 seal\r\n      skillParam_gen.auto[a++], // 2 seals\r\n      skillParam_gen.auto[a++], // 3 seals\r\n      skillParam_gen.auto[a++], // 4 seals\r\n    ],\r\n    unknown: {\r\n      arr: [\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n        skillParam_gen.auto[a++][0],\r\n      ]\r\n    },\r\n    stamina: skillParam_gen.auto[a++][0],\r\n    sealStaminaRed_: skillParam_gen.auto[a++][0],\r\n    maxSeals: 3,\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  sealDuration: skillParam_gen.auto[a++][0],\r\n  // There is another unknown here for auto\r\n  skill: {\r\n    dmg: skillParam_gen.skill[0],\r\n    cd: skillParam_gen.skill[1][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    charged_dmg_: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    sealInterval: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    seal_pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n  },\r\n  passive2: {\r\n    dmg: percent(skillParam_gen.passive2[0][0])\r\n  },\r\n  c1: {\r\n    sealStaminaRed_: skillParam_gen.constellation1[0]\r\n  },\r\n  c2: {\r\n    hpThresh: skillParam_gen.constellation2[0],\r\n    charged_critRate_: skillParam_gen.constellation2[1]\r\n  },\r\n  c4: {\r\n    hpShield_: skillParam_gen.constellation4[0],\r\n    duration: 15,\r\n  },\r\n  c6: {\r\n    extraSeals: skillParam_gen.constellation6[0]\r\n  }\r\n} as const\r\n\r\nconst [condAfterBurstPath, condAfterBurst] = cond(key, \"afterBurst\")\r\nconst afterBurst_charged_dmg_ = equal(condAfterBurst, \"on\",\r\n  subscript(input.total.burstIndex, datamine.burst.charged_dmg_)\r\n)\r\n\r\nconst [condP1SealsPath, condP1Seals] = cond(key, \"p1Seals\")\r\nconst p1_pyro_dmg_ = greaterEq(input.asc, 1,\r\n  // TODO: Should be changing number of seals shown based on C6\r\n  lookup(condP1Seals, Object.fromEntries(range(1, 4).map(seals => [\r\n    seals,\r\n    prod(seals, datamine.passive1.seal_pyro_dmg_)\r\n  ])), naught)\r\n)\r\n\r\nconst [condP2ChargedCritPath, condP2ChargedCrit] = cond(key, \"p2ChargedCrit\")\r\n\r\nconst [condC2EnemyHpPath, condC2EnemyHp] = cond(key, \"c2EnemyHp\")\r\nconst c2EnemyHp_critRate_ = greaterEq(input.constellation, 2,\r\n  equal(condC2EnemyHp, \"on\", datamine.c2.charged_critRate_)\r\n)\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: Object.fromEntries(datamine.charged.dmgArr.map((arr, i) =>\r\n    [i, i < 4\r\n      ? dmgNode(\"atk\", arr, \"charged\")\r\n      : greaterEq(input.constellation, 6, dmgNode(\"atk\", arr, \"charged\"))\r\n    ])),\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"atk\", datamine.skill.dmg, \"skill\")\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\")\r\n  },\r\n  passive2: {\r\n    dmg: greaterEq(input.asc, 4, equal(condP2ChargedCrit, \"on\",\r\n      customDmgNode(prod(input.total.atk, datamine.passive2.dmg), \"charged\")\r\n    ))\r\n  },\r\n  constellation4: {\r\n    pyro_shield: greaterEq(input.constellation, 4,\r\n      shieldElement(elementKey, customShieldNode(prod(input.total.hp, datamine.c4.hpShield_)))\r\n    ),\r\n    norm_shield: greaterEq(input.constellation, 4,\r\n      customShieldNode(prod(input.total.hp, datamine.c4.hpShield_))\r\n    ),\r\n  },\r\n} as const\r\n\r\nconst skillC3 = greaterEq(input.constellation, 3, 3)\r\nconst burstC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC3,\r\n    burst: burstC5,\r\n  },\r\n  premod: {\r\n    charged_dmg_: afterBurst_charged_dmg_,\r\n    charged_critRate_: c2EnemyHp_critRate_,\r\n    pyro_dmg_: p1_pyro_dmg_,\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [\r\n          // TODO: Would probably be better as a conditional,\r\n          // but can't make conditional states based on constellation value\r\n          ...datamine.charged.dmgArr.map((_, i) => ({\r\n            node: infoMut(dmgFormulas.charged[i], { key: `char_${key}:charged.${i}` }),\r\n          })), {\r\n            text: tr(\"auto.skillParams.4\"),\r\n            // TODO: Should change this value based on how many seals, but can't do without conditional\r\n            // charged attack. And its a bit execssive.\r\n            value: datamine.charged.stamina,\r\n          }, {\r\n            text: st(\"staminaDec_\"),\r\n            value: datamine.charged.sealStaminaRed_ * 100,\r\n            textSuffix: trm(\"perSeal\"),\r\n            unit: \"%\",\r\n          }, {\r\n            text: trm(\"maxSeals\"),\r\n            value: data => data.get(input.constellation).value >= 6\r\n              ? datamine.charged.maxSeals + datamine.c6.extraSeals\r\n              : datamine.charged.maxSeals,\r\n          }, {\r\n            text: tr(\"auto.skillParams.6\"),\r\n            value: datamine.sealDuration,\r\n            unit: \"s\"\r\n          }],\r\n      }, ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1Seals,\r\n        path: condP1SealsPath,\r\n        name: trm(\"passive1.sealsConsumed\"),\r\n        // TODO: Should be changing number of seals shown based on C6\r\n        states: Object.fromEntries(range(1, 4).map(seals => [\r\n          seals, {\r\n            name: trm(`seals.${seals}`),\r\n            fields: [{\r\n              node: p1_pyro_dmg_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.conditionalTemplate(\"passive2\", {\r\n        value: condP2ChargedCrit,\r\n        path: condP2ChargedCritPath,\r\n        name: trm(\"passive2.chargedCrit\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.passive2.dmg, { key: `char_${key}:passive2.key` })\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: trm(\"c1.sealChargedStam_\"),\r\n          value: datamine.c1.sealStaminaRed_ * -100,\r\n          textSuffix: trm(\"perSeal\"),\r\n          unit: \"%\"\r\n        }, {\r\n          text: st(\"incInterRes\")\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation2\", {\r\n        value: condC2EnemyHp,\r\n        path: condC2EnemyHpPath,\r\n        name: st(\"enemyLessPercentHP\", { percent: datamine.c2.hpThresh * 100 }),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: c2EnemyHp_critRate_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        fields: [{\r\n          text: trm(\"c6.maxSealInc\"),\r\n          value: datamine.c6.extraSeals\r\n        }]\r\n      }), {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\",\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: trm(\"burst.grantMax\")\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\",\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        value: condAfterBurst,\r\n        path: condAfterBurstPath,\r\n        name: st(\"afterUse.burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.sealInterval,\r\n              unit: \"s\"\r\n            }, {\r\n              node: afterBurst_charged_dmg_\r\n            }]\r\n          }\r\n        }\r\n      }), ct.headerTemplate(\"constellation4\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation4.norm_shield, { key: \"sheet_gen:dmgAbsorption\" })\r\n        }, {\r\n          node: infoMut(dmgFormulas.constellation4.pyro_shield, { key: `sheet:dmgAbsorption.${elementKey}` })\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.c4.duration,\r\n          unit: \"s\"\r\n        }]\r\n      })]),\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: skillC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: burstC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  }\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yelan_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally, target } from '../../../Formula'\r\nimport { constant, equal, greaterEq, infoMut, lookup, naught, percent, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Yelan\"\r\nconst elementKey: ElementKey = \"hydro\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3\r\n      skillParam_gen.auto[a++], // 4x3\r\n    ]\r\n  },\r\n  charged: {\r\n    aimed: skillParam_gen.auto[a++],\r\n    aimedCharged: skillParam_gen.auto[a++],\r\n    barb: skillParam_gen.auto[a++],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    dmg: skillParam_gen.skill[s++],\r\n    resetChance: skillParam_gen.skill[s++][0],\r\n    maxDuration: skillParam_gen.skill[s++][0],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    pressDmg: skillParam_gen.burst[b++],\r\n    throwDmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    hp_Arr: [0, ...skillParam_gen.passive1.map(([a]) => a)],\r\n  },\r\n  passive2: {\r\n    baseDmg_: skillParam_gen.passive2[0][0],\r\n    stackDmg_: skillParam_gen.passive2[1][0],\r\n    maxDmg_: skillParam_gen.passive2[2][0],\r\n    maxStacks: 14,\r\n  },\r\n  constellation1: {\r\n    addlCharge: skillParam_gen.constellation1[0],\r\n  },\r\n  constellation2: {\r\n    arrowDmg_: skillParam_gen.constellation2[0],\r\n    cd: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation4: {\r\n    bonusHp_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n    maxHp_: skillParam_gen.constellation4[2],\r\n    maxStacks: 4,\r\n  },\r\n  constellation6: {\r\n    charges: skillParam_gen.constellation6[0],\r\n    duration: skillParam_gen.constellation6[1],\r\n    dmg_: skillParam_gen.constellation6[2],\r\n  }\r\n}\r\n\r\nconst a1_hp_ = greaterEq(input.asc, 1, subscript(tally.ele, datamine.passive1.hp_Arr))\r\n\r\nconst [condA4StacksPath, condA4Stacks] = cond(key, \"a4Stacks\")\r\nconst a4Stacks = range(0, datamine.passive2.maxStacks)\r\nconst a4Dmg_Disp = greaterEq(input.asc, 4,\r\n  lookup(condA4Stacks, Object.fromEntries(a4Stacks.map(stacks => [\r\n    stacks,\r\n    sum(percent(datamine.passive2.baseDmg_), prod(stacks, percent(datamine.passive2.stackDmg_)))\r\n  ])),\r\n    naught)\r\n)\r\nconst a4Dmg = equal(target.charKey, input.activeCharKey, a4Dmg_Disp)\r\n\r\nconst [condC4StacksPath, condC4Stacks] = cond(key, \"c4Stacks\")\r\nconst c4Stacks = range(1, datamine.constellation4.maxStacks)\r\nconst c4Hp_ = greaterEq(input.constellation, 4,\r\n  lookup(condC4Stacks, Object.fromEntries(c4Stacks.map(stacks => [\r\n    stacks,\r\n    prod(stacks, percent(datamine.constellation4.bonusHp_))\r\n  ])),\r\n    naught)\r\n)\r\n\r\nconst [condC6ActivePath, condC6Active] = cond(key, \"c6Active\")\r\nconst c6Active = greaterEq(input.constellation, 6, equal(condC6Active, \"on\", 1))\r\n\r\nconst hitEle = { hit: { ele: constant(elementKey) } }\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, unequal(c6Active, 1, dmgNode(\"atk\", arr, \"normal\"))])),\r\n  charged: {\r\n    aimed: dmgNode(\"atk\", datamine.charged.aimed, \"charged\"),\r\n    aimedCharged: dmgNode(\"atk\", datamine.charged.aimedCharged, \"charged\", hitEle),\r\n    barb: dmgNode(\"hp\", datamine.charged.barb, \"charged\", hitEle),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"hp\", datamine.skill.dmg, \"skill\"),\r\n  },\r\n  burst: {\r\n    pressDmg: dmgNode(\"hp\", datamine.burst.pressDmg, \"burst\"),\r\n    throwDmg: dmgNode(\"hp\", datamine.burst.throwDmg, \"burst\"),\r\n  },\r\n  constellation2: {\r\n    arrowDmg: greaterEq(input.constellation, 2, customDmgNode(\r\n      prod(\r\n        percent(datamine.constellation2.arrowDmg_),\r\n        input.total.hp\r\n      ),\r\n      \"burst\",\r\n      hitEle\r\n    ))\r\n  },\r\n  constellation6: {\r\n    barbDmg: equal(c6Active, 1, customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, datamine.charged.barb, { key: \"_\" }),\r\n        percent(datamine.constellation6.dmg_),\r\n        input.total.hp\r\n      ),\r\n      \"charged\",\r\n      hitEle\r\n    )),\r\n  },\r\n}\r\n\r\nconst burstC3 = greaterEq(input.constellation, 3, 3)\r\nconst skillC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: skillC5,\r\n    burst: burstC3,\r\n  },\r\n  premod: {\r\n    hp_: a1_hp_,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      all_dmg_: a4Dmg,\r\n      hp_: c4Hp_,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        canShow: unequal(c6Active, 1, 1),\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 3 ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, ct.conditionalTemplate(\"constellation6\", {\r\n        path: condC6ActivePath,\r\n        value: condC6Active,\r\n        name: trm(\"c6.condName\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: infoMut(dmgFormulas.constellation6.barbDmg, { key: `char_${key}:c6.dmg` }),\r\n            }, {\r\n              text: st(\"charges\"),\r\n              value: datamine.constellation6.charges,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation6.duration\r\n            }]\r\n          }\r\n        }\r\n      }), {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.aimed, { key: `char_${key}_gen:auto.skillParams.4` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.aimedCharged, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.breakthrough`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.barb, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.1\"),\r\n          value: datamine.skill.maxDuration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.skill.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          canShow: (data) => data.get(input.constellation).value >= 1,\r\n          text: st(\"charges\"),\r\n          value: 2\r\n        }]\r\n      }, ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"addlCharge\"),\r\n          value: datamine.constellation1.addlCharge,\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        path: condC4StacksPath,\r\n        value: condC4Stacks,\r\n        teamBuff: true,\r\n        name: trm(\"c4.condName\"),\r\n        states: Object.fromEntries(c4Stacks.map(stacks => [\r\n          stacks,\r\n          {\r\n            name: st(\"stack\", { count: stacks }),\r\n            fields: [{\r\n              node: c4Hp_,\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        ]))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.pressDmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.throwDmg, { key: `char_${key}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: sgt(\"duration\"),\r\n          value: datamine.burst.duration,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: sgt(\"energyCost\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"passive2\", {\r\n        path: condA4StacksPath,\r\n        value: condA4Stacks,\r\n        teamBuff: true,\r\n        name: st(\"afterUse.burst\"),\r\n        states: Object.fromEntries(a4Stacks.map(stack => [\r\n          stack,\r\n          {\r\n            name: st(\"seconds\", { count: stack }),\r\n            fields: [{\r\n              node: infoMut(a4Dmg_Disp, { key: \"all_dmg_\" }),\r\n            }]\r\n          }\r\n        ]))\r\n      }), ct.headerTemplate(\"constellation2\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation2.arrowDmg, { key: `char_${key}:c2.dmg` })\r\n        }, {\r\n          text: sgt(\"cd\"),\r\n          value: datamine.constellation2.cd,\r\n          unit: \"s\",\r\n          fixed: 1,\r\n        }]\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.fieldsTemplate(\"passive1\", {\r\n        fields: [{\r\n          node: a1_hp_\r\n        }]\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\"),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: burstC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: skillC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yoimiya_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { compareEq, constant, equal, greaterEq, infoMut, lookup, one, percent, prod, subscript, sum, unequal } from \"../../../Formula/utils\"\r\nimport { CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { INodeFieldDisplay } from '../../../Types/fieldDisplay'\r\nimport { range } from '../../../Util/Util'\r\nimport { cond, sgt, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customDmgNode, dataObjForCharacterSheet, dmgNode } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst characterKey: CharacterKey = \"Yoimiya\"\r\nconst elementKey: ElementKey = \"pyro\"\r\nconst data_gen = data_gen_src as CharacterData\r\nconst [tr, trm] = trans(\"char\", characterKey)\r\nconst ct = charTemplates(characterKey, data_gen.weaponTypeKey, talentAssets)\r\n\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[0], //x2\r\n      skillParam_gen.auto[1],\r\n      skillParam_gen.auto[2],\r\n      skillParam_gen.auto[3], //x2\r\n      skillParam_gen.auto[4],\r\n    ]\r\n  },\r\n  charged: {\r\n    hit: skillParam_gen.auto[5],\r\n    full: skillParam_gen.auto[6],\r\n    kindling: skillParam_gen.auto[7],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[8],\r\n    low: skillParam_gen.auto[9],\r\n    high: skillParam_gen.auto[10],\r\n  },\r\n  skill: {\r\n    dmg_: skillParam_gen.skill[3],\r\n    duration: skillParam_gen.skill[1][0],\r\n    cd: skillParam_gen.skill[2][0]\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[0],\r\n    exp: skillParam_gen.burst[1],\r\n    duration: skillParam_gen.burst[3][0],\r\n    cd: skillParam_gen.burst[4][0],\r\n    cost: skillParam_gen.burst[5][0]\r\n  },\r\n  passive1: {\r\n    pyro_dmg_: skillParam_gen.passive1[0][0],\r\n    duration: skillParam_gen.passive1[1][0],\r\n    maxStacks: 10,\r\n  },\r\n  passive2: {\r\n    fixed_atk_: skillParam_gen.passive2[0][0],\r\n    var_atk_: skillParam_gen.passive2[1][0],\r\n    duration: skillParam_gen.passive2[2][0],\r\n  },\r\n  constellation1: {\r\n    burst_durationInc: skillParam_gen.constellation1[0],\r\n    atk_: skillParam_gen.constellation1[1],\r\n    duration: skillParam_gen.constellation1[2]\r\n  },\r\n  constellation2: {\r\n    pyro_dmg_: skillParam_gen.constellation2[0],\r\n    duration: skillParam_gen.constellation2[1],\r\n  },\r\n  constellation3: {},\r\n  constellation4: {\r\n    cdRed: skillParam_gen.constellation4[0]\r\n  },\r\n  constellation5: {},\r\n  constellation6: {\r\n    chance: skillParam_gen.constellation6[0],\r\n    dmg_: skillParam_gen.constellation6[1],\r\n  },\r\n}\r\n\r\nconst [condSkillPath, condSkill] = cond(characterKey, \"skill\")\r\nconst [condBurstPath, condBurst] = cond(characterKey, \"burst\")\r\nconst [condA1Path, condA1] = cond(characterKey, \"a1\")\r\nconst [condC1Path, condC1] = cond(characterKey, \"c1\")\r\nconst [condC2Path, condC2] = cond(characterKey, \"c2\")\r\nconst const3TalentInc = greaterEq(input.constellation, 3, 3)\r\nconst const5TalentInc = greaterEq(input.constellation, 5, 3)\r\nconst normal_dmgMult = compareEq(condSkill, \"skill\", subscript(input.total.skillIndex, datamine.skill.dmg_, { key: `char_${characterKey}:normMult_` }), one)\r\nconst a1Stacks = lookup(condA1, Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i => [i, constant(i)])), 0)\r\nconst pyro_dmg_ = greaterEq(input.asc, 1, equal(condSkill, \"skill\", infoMut(prod(percent(datamine.passive1.pyro_dmg_), a1Stacks), { key: 'pyro_dmg_', variant: elementKey })))\r\nconst atk_ = greaterEq(input.asc, 4, equal(condBurst, \"on\", unequal(input.activeCharKey, characterKey,\r\n  sum(percent(datamine.passive2.fixed_atk_), prod(percent(datamine.passive2.var_atk_), a1Stacks)))))\r\nconst c1atk_ = equal(condC1, 'c1', percent(datamine.constellation1.atk_))\r\nconst c2pyro_dmg_ = equal(condC2, 'c2', percent(datamine.constellation2.pyro_dmg_), { key: 'pyro_dmg_', variant: elementKey })\r\n\r\nconst normalEntries = datamine.normal.hitArr.map((arr, i) => [\r\n  i,\r\n  customDmgNode(\r\n    prod(subscript(input.total.autoIndex, arr, { key: \"_\" }), input.total.atk, normal_dmgMult),\r\n    \"normal\", {\r\n    hit: {\r\n      ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n    }\r\n  })\r\n])\r\n\r\n// This might just need to be a single dmgNode of her kindling arrow, with proper scaling applied.\r\nconst kindlingEntries = datamine.normal.hitArr.map((arr, i) => [i, greaterEq(input.constellation, 6,\r\n  equal(condSkill, \"skill\",\r\n    customDmgNode(\r\n      prod(\r\n        subscript(input.total.autoIndex, arr, { key: \"_\" }),\r\n        constant(datamine.constellation6.dmg_, { key: `char_${characterKey}:c6Key_` }),\r\n        input.total.atk,\r\n        normal_dmgMult\r\n      ),\r\n      \"normal\", {\r\n      hit: {\r\n        ele: compareEq(condSkill, \"skill\", elementKey, \"physical\")\r\n      }\r\n    })\r\n  )\r\n)])\r\n\r\nexport const dmgFormulas = {\r\n  normal: Object.fromEntries(normalEntries),\r\n  charged: {\r\n    hit: dmgNode(\"atk\", datamine.charged.hit, \"charged\"),\r\n    full: dmgNode(\"atk\", datamine.charged.full, \"charged\", { hit: { ele: constant(elementKey) } }),\r\n    kindling: unequal(condSkill, \"skill\", dmgNode(\"atk\", datamine.charged.kindling, \"charged\", { hit: { ele: constant(elementKey) } }))\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {},\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n    exp: dmgNode(\"atk\", datamine.burst.exp, \"burst\", { hit: { ele: constant(elementKey) } }),\r\n  },\r\n  constellation6: Object.fromEntries(kindlingEntries)\r\n}\r\n\r\nexport const dataObj = dataObjForCharacterSheet(characterKey, elementKey, \"inazuma\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: const3TalentInc,\r\n    burst: const5TalentInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      atk_,\r\n    }\r\n  },\r\n  premod: {\r\n    atk_: c1atk_,\r\n    pyro_dmg_: sum(pyro_dmg_, c2pyro_dmg_),\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.hit, { key: `char_${characterKey}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.full, { key: `char_${characterKey}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.charged.kindling, { key: `char_${characterKey}_gen:auto.skillParams.7` }),\r\n        }],\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          text: tr(\"skill.skillParams.2\"),\r\n          value: datamine.skill.cd,\r\n          unit: 's'\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        name: st(\"afterUse.skill\"),\r\n        path: condSkillPath,\r\n        value: condSkill,\r\n        states: {\r\n          skill: {\r\n            fields: [{\r\n              node: normal_dmgMult\r\n            }, {\r\n              text: trm(\"normPyroInfus\"),\r\n            }, {\r\n              text: tr(\"skill.skillParams.1\"),\r\n              value: datamine.skill.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional for self display\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      }), ct.headerTemplate(\"constellation6\", {\r\n        canShow: equal(condSkill, \"skill\", 1),\r\n        fields: datamine.normal.hitArr.map((_, i): INodeFieldDisplay => ({\r\n          node: infoMut(dmgFormulas.constellation6[i], { key: `char_${characterKey}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: ([0, 3].includes(i)) ? st(\"brHits\", { count: 2 }) : \"\"\r\n        }))\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${characterKey}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.burst.exp, { key: `char_${characterKey}_gen:burst.skillParams.1` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: uiData => datamine.burst.duration + (uiData.get(input.constellation).value >= 1 ? datamine.constellation1.burst_durationInc : 0),\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: 60,\r\n        }]\r\n      }, ct.headerTemplate(\"constellation1\", {\r\n        fields: [{\r\n          text: st(\"durationInc\"),\r\n          value: datamine.constellation1.burst_durationInc,\r\n          unit: \"s\"\r\n        }]\r\n      }), ct.conditionalTemplate(\"constellation1\", {\r\n        name: trm(\"c1\"),\r\n        value: condC1,\r\n        path: condC1Path,\r\n        states: {\r\n          c1: {\r\n            fields: [{\r\n              node: constant(datamine.constellation1.atk_, { key: \"atk_\" })\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation1.duration,\r\n              unit: 's'\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.conditionalTemplate(\"passive2\", {\r\n        teamBuff: true,\r\n        // Hide for Yoimiya\r\n        canShow: unequal(input.activeCharKey, characterKey, 1),\r\n        path: condBurstPath,\r\n        value: condBurst,\r\n        name: tr(\"burst.name\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: atk_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"passive1\", {\r\n        // Conditional from P1 for team buff display when P2 is activated\r\n        canShow: unequal(input.activeCharKey, characterKey,\r\n          equal(condBurst, \"on\", greaterEq(input.asc, 4, 1))\r\n        ),\r\n        teamBuff: true,\r\n        value: condA1,\r\n        path: condA1Path,\r\n        name: tr(\"passive1.name\"),\r\n        states: Object.fromEntries(range(1, datamine.passive1.maxStacks).map(i =>\r\n          [i, {\r\n            name: `${i} stack`,\r\n            fields: [{\r\n              node: pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.passive1.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }]\r\n        ))\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [ct.conditionalTemplate(\"constellation2\", {\r\n        name: trm(\"c2\"),\r\n        value: condC2,\r\n        path: condC2Path,\r\n        states: {\r\n          c2: {\r\n            fields: [{\r\n              node: c2pyro_dmg_\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation2.duration,\r\n              unit: \"s\"\r\n            }]\r\n          }\r\n        }\r\n      })]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: const3TalentInc }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: const5TalentInc }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\")\r\n    },\r\n  },\r\n}\r\n\r\nexport default new CharacterSheet(sheet, dataObj)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Yun_Jin_Card.jpg'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input, tally } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, prod, subscript, sum, unequal } from '../../../Formula/utils'\r\nimport { allElements, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { cond, sgt, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\n\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"YunJin\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++], // 1\r\n      skillParam_gen.auto[a++], // 2\r\n      skillParam_gen.auto[a++], // 3.1\r\n      skillParam_gen.auto[a++], // 3.2\r\n      skillParam_gen.auto[a++], // 4.1\r\n      skillParam_gen.auto[a++], // 4.2\r\n      skillParam_gen.auto[a++], // 5\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    shield_: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    dmg: skillParam_gen.skill[s++],\r\n    dmg1: skillParam_gen.skill[s++],\r\n    dmg2: skillParam_gen.skill[s++],\r\n    cd: skillParam_gen.skill[s++][0],\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    dmgInc: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++][0],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n    triggerNum: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive2: {\r\n    dmgInc: skillParam_gen.passive2.map(a => a[0]),\r\n  },\r\n  constellation2: {\r\n    normalInc: skillParam_gen.constellation2[0],\r\n  },\r\n  constellation4: {\r\n    def_: skillParam_gen.constellation4[0],\r\n    duration: skillParam_gen.constellation4[1],\r\n  },\r\n  constellation6: {\r\n    atkSpd: skillParam_gen.constellation6[0],\r\n  }\r\n} as const\r\n\r\nconst nodeA4 = greaterEq(input.asc, 4,\r\n  subscript(sum(...allElements.map(ele => greaterEq(tally[ele], 1, 1))), [0, ...datamine.passive2.dmgInc], { key: '_' }))\r\n\r\nconst [condBurstPath, condBurst] = cond(key, \"skill\")\r\nconst nodeSkill = equal(\"on\", condBurst, sum(\r\n  prod(input.premod.def, sum(subscript(input.total.burstIndex, datamine.burst.dmgInc, { key: '_' }), nodeA4))))\r\n\r\nconst nodeC2 = greaterEq(input.constellation, 2, equal(\"on\", condBurst, datamine.constellation2.normalInc))\r\n\r\nconst [condC4Path, condC4] = cond(key, \"c4\")\r\nconst nodeC4 = greaterEq(input.constellation, 4, equal(\"on\", condC4, datamine.constellation4.def_))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6, equal(\"on\", condBurst, datamine.constellation6.atkSpd))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    dmg: dmgNode(\"def\", datamine.skill.dmg, \"skill\"),\r\n    dmg1: dmgNode(\"def\", datamine.skill.dmg1, \"skill\"),\r\n    dmg2: dmgNode(\"def\", datamine.skill.dmg2, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n    dmgInc: nodeSkill\r\n  },\r\n}\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC5,\r\n    burst: nodeC3,\r\n  },\r\n  premod: {\r\n    def_: nodeC4,\r\n    atkSPD_: nodeC6,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      normal_dmgInc: nodeSkill,\r\n      normal_dmg_: nodeC2,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"F\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i + (i > 2 ? -1 : 0) + (i > 4 ? -1 : 0)}` }),\r\n          textSuffix: (i === 2 || i === 4) ? \"(1)\" : (i === 3 || i === 5) ? \"(2)\" : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.5` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.6\"),\r\n          value: datamine.charged.stamina,\r\n        }],\r\n      }, {\r\n        text: tr(\"auto.fields.plunging\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }],\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.dmg, { key: `char_${key}_gen:skill.skillParams.0` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg1, { key: `char_${key}_gen:skill.skillParams.1` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.dmg2, { key: `char_${key}_gen:skill.skillParams.2` }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `char_${key}_gen:skill.skillParams.3` }),\r\n        }, {\r\n          text: tr(\"skill.skillParams.4\"),\r\n          value: data => data.get(input.constellation).value >= 1\r\n            ? `${datamine.skill.cd} - 18% = ${(datamine.skill.cd * (1 - 0.18)).toFixed(2)}`\r\n            : `${datamine.skill.cd}`,\r\n          unit: \"s\"\r\n        }]\r\n      }]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` }),\r\n        }, {\r\n          text: tr(\"burst.skillParams.4\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.5\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }, ct.conditionalTemplate(\"burst\", {\r\n        teamBuff: true,\r\n        value: condBurst,\r\n        path: condBurstPath,\r\n        name: trm(\"burst\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeSkill\r\n            }, {\r\n              node: nodeC2\r\n            }, {\r\n              node: nodeC6\r\n            }, {\r\n              text: tr(\"burst.skillParams.2\"),\r\n              value: datamine.burst.duration,\r\n              unit: \"s\"\r\n            }, {\r\n              text: tr(\"burst.skillParams.3\"),\r\n              value: datamine.burst.triggerNum,\r\n            }]\r\n          }\r\n        }\r\n      }), ct.conditionalTemplate(\"constellation4\", {\r\n        // C4 conditional in teambuff panel if burst is enabled\r\n        teamBuff: true,\r\n        canShow: unequal(input.activeCharKey, key, equal(condBurst, \"on\", 1)),\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })\r\n    ]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\"),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{ node: infoMut(nodeA4, { key: `char_${key}:a4Inc_` }) }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\", [{ fields: [{ node: nodeC2 }] }]),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\", [ct.conditionalTemplate(\"constellation4\", {\r\n        value: condC4,\r\n        path: condC4Path,\r\n        name: trm(\"c4\"),\r\n        states: {\r\n          on: {\r\n            fields: [{\r\n              node: nodeC4\r\n            }, {\r\n              text: sgt(\"duration\"),\r\n              value: datamine.constellation4.duration,\r\n              unit: \"s\"\r\n            },]\r\n          }\r\n        }\r\n      })]),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\"),\r\n    }\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { TalentSheetElementKey } from '../CharacterSheet'\r\nimport banner from './Banner.png'\r\nimport burst from './burst.png'\r\nimport card from './Character_Zhongli_Card.png'\r\nimport constellation1 from './constellation1.png'\r\nimport constellation2 from './constellation2.png'\r\nimport constellation3 from './constellation3.png'\r\nimport constellation4 from './constellation4.png'\r\nimport constellation5 from './constellation5.png'\r\nimport constellation6 from './constellation6.png'\r\nimport thumb from './Icon.png'\r\nimport thumbSide from './IconSide.png'\r\nimport passive1 from './passive1.png'\r\nimport passive2 from './passive2.png'\r\nimport passive3 from './passive3.png'\r\nimport skill from './skill.png'\r\n\r\nconst talentAssets: Partial<Record<TalentSheetElementKey, string>> = {\r\n  constellation1, constellation2, constellation3, constellation4, constellation5, constellation6, skill, burst, passive1, passive2, passive3\r\n}\r\n\r\nexport { card, thumb, thumbSide, banner, talentAssets }\r\n","import { CharacterData } from 'pipeline'\r\nimport { input } from '../../../Formula'\r\nimport { equal, greaterEq, infoMut, lookup, naught, percent, prod } from '../../../Formula/utils'\r\nimport { allElementsWithPhy, CharacterKey, ElementKey } from '../../../Types/consts'\r\nimport { objectKeyMap, objectKeyValueMap, range } from '../../../Util/Util'\r\nimport { cond, st, trans } from '../../SheetUtil'\r\nimport CharacterSheet, { charTemplates, ICharacterSheet } from '../CharacterSheet'\r\nimport { customHealNode, dataObjForCharacterSheet, dmgNode, shieldElement, shieldNodeTalent } from '../dataUtil'\r\nimport { banner, card, talentAssets, thumb, thumbSide } from './assets'\r\nimport data_gen_src from './data_gen.json'\r\nimport skillParam_gen from './skillParam_gen.json'\r\nconst data_gen = data_gen_src as CharacterData\r\n\r\nconst key: CharacterKey = \"Zhongli\"\r\nconst elementKey: ElementKey = \"geo\"\r\nconst [tr, trm] = trans(\"char\", key)\r\nconst ct = charTemplates(key, data_gen.weaponTypeKey, talentAssets)\r\n\r\nlet a = 0, s = 0, b = 0, p1 = 0, p2 = 0\r\nconst datamine = {\r\n  normal: {\r\n    hitArr: [\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n      skillParam_gen.auto[a++],\r\n    ]\r\n  },\r\n  charged: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    stamina: skillParam_gen.auto[a++][0],\r\n  },\r\n  plunging: {\r\n    dmg: skillParam_gen.auto[a++],\r\n    low: skillParam_gen.auto[a++],\r\n    high: skillParam_gen.auto[a++],\r\n  },\r\n  skill: {\r\n    stele: skillParam_gen.skill[s++],\r\n    resonance: skillParam_gen.skill[s++],\r\n    pressCD: skillParam_gen.skill[s++][0],\r\n    holdDMG: skillParam_gen.skill[s++],\r\n    shield: skillParam_gen.skill[s++],\r\n    shield_: skillParam_gen.skill[s++],\r\n    shileDuration: skillParam_gen.skill[s++][0],\r\n    holdCD: skillParam_gen.skill[s++][0],\r\n    enemyRes_: -0.2,\r\n  },\r\n  burst: {\r\n    dmg: skillParam_gen.burst[b++],\r\n    duration: skillParam_gen.burst[b++],\r\n    cd: skillParam_gen.burst[b++][0],\r\n    enerCost: skillParam_gen.burst[b++][0],\r\n  },\r\n  passive1: {\r\n    shield_: skillParam_gen.passive1[p1++][0],\r\n  },\r\n  passive2: {\r\n    auto_: skillParam_gen.passive2[p2++][0],\r\n    skill_: skillParam_gen.passive2[p2++][0],\r\n    burst_: skillParam_gen.passive2[p2++][0],\r\n  },\r\n  constellation4: {\r\n    durationInc: skillParam_gen.constellation4[1]\r\n  },\r\n  constellation6: {\r\n    hp_: skillParam_gen.constellation6[1]\r\n  }\r\n} as const\r\nconst [condSkillPath, condSkill] = cond(key, \"skill\")\r\nconst nodesSkill = objectKeyValueMap(allElementsWithPhy, k => [`${k}_enemyRes_`,\r\nequal(\"on\", condSkill, percent(datamine.skill.enemyRes_))])\r\n\r\nconst [condP1Path, condP1] = cond(key, \"p1\")\r\nconst nodeP1 = greaterEq(\r\n  input.asc, 1,\r\n  lookup(condP1, objectKeyMap(range(1, 5), i => percent(datamine.passive1.shield_ * i)), naught)\r\n)\r\n\r\nconst p4AutoDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.auto_), input.premod.hp))\r\nconst p4normalDmgInc = { ...p4AutoDmgInc }\r\nconst p4ChargedDmgInc = { ...p4AutoDmgInc }\r\nconst p4PlungingDmgInc = { ...p4AutoDmgInc }\r\nconst p4SKillDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.skill_), input.premod.hp))\r\nconst p4BurstDmgInc = greaterEq(input.asc, 4, prod(percent(datamine.passive2.burst_), input.premod.hp))\r\n\r\nconst nodeC6 = greaterEq(input.constellation, 6,\r\n  customHealNode(prod(\r\n    percent(datamine.constellation6.hp_),\r\n    input.total.hp\r\n  )))\r\n\r\nconst dmgFormulas = {\r\n  normal: Object.fromEntries(datamine.normal.hitArr.map((arr, i) =>\r\n    [i, dmgNode(\"atk\", arr, \"normal\")])),\r\n  charged: {\r\n    dmg: dmgNode(\"atk\", datamine.charged.dmg, \"charged\"),\r\n  },\r\n  plunging: Object.fromEntries(Object.entries(datamine.plunging).map(([key, value]) =>\r\n    [key, dmgNode(\"atk\", value, \"plunging\")])),\r\n  skill: {\r\n    stele: dmgNode(\"atk\", datamine.skill.stele, \"skill\"),\r\n    resonance: dmgNode(\"atk\", datamine.skill.resonance, \"skill\"),\r\n    holdDMG: dmgNode(\"atk\", datamine.skill.holdDMG, \"skill\"),\r\n    shield: shieldElement(\"geo\", shieldNodeTalent(\"hp\", datamine.skill.shield_, datamine.skill.shield, \"skill\"))\r\n  },\r\n  burst: {\r\n    dmg: dmgNode(\"atk\", datamine.burst.dmg, \"burst\"),\r\n  },\r\n  passive2: {\r\n    p4normalDmgInc,\r\n    p4ChargedDmgInc,\r\n    p4PlungingDmgInc,\r\n    p4SKillDmgInc,\r\n    p4BurstDmgInc,\r\n  },\r\n  constellation6: {\r\n    heal: nodeC6\r\n  }\r\n}\r\n\r\nconst nodeC3 = greaterEq(input.constellation, 3, 3)\r\nconst nodeC5 = greaterEq(input.constellation, 5, 3)\r\n\r\nexport const data = dataObjForCharacterSheet(key, elementKey, \"liyue\", data_gen, dmgFormulas, {\r\n  bonus: {\r\n    skill: nodeC3,\r\n    burst: nodeC5,\r\n  },\r\n  premod: {\r\n    // TODO: below should be for `total`\r\n    normal_dmgInc: p4normalDmgInc,\r\n    charged_dmgInc: p4ChargedDmgInc,\r\n    plunging_dmgInc: p4PlungingDmgInc,\r\n    skill_dmgInc: p4SKillDmgInc,\r\n    burst_dmgInc: p4BurstDmgInc,\r\n  },\r\n  teamBuff: {\r\n    premod: {\r\n      shield_: nodeP1,\r\n      ...nodesSkill,\r\n    }\r\n  }\r\n})\r\n\r\nconst sheet: ICharacterSheet = {\r\n  name: tr(\"name\"),\r\n  cardImg: card,\r\n  thumbImg: thumb,\r\n  thumbImgSide: thumbSide,\r\n  bannerImg: banner,\r\n  rarity: data_gen.star,\r\n  elementKey,\r\n  weaponTypeKey: data_gen.weaponTypeKey,\r\n  gender: \"M\",\r\n  constellationName: tr(\"constellationName\"),\r\n  title: tr(\"title\"),\r\n  talent: {\r\n    sheets: {\r\n      auto: ct.talentTemplate(\"auto\", [{\r\n        text: tr(\"auto.fields.normal\"),\r\n      }, {\r\n        fields: datamine.normal.hitArr.map((_, i) => ({\r\n          node: infoMut(dmgFormulas.normal[i], { key: `char_${key}_gen:auto.skillParams.${i}` }),\r\n          textSuffix: i === 4 ? st(\"brHits\", { count: 4 }) : \"\"\r\n        }))\r\n      }, {\r\n        text: tr(\"auto.fields.charged\"),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.charged.dmg, { key: `char_${key}_gen:auto.skillParams.6` }),\r\n        }, {\r\n          text: tr(\"auto.skillParams.7\"),\r\n          value: datamine.charged.stamina,\r\n        }]\r\n      }, {\r\n        text: tr(`auto.fields.plunging`),\r\n      }, {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.plunging.dmg, { key: \"sheet_gen:plunging.dmg\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.low, { key: \"sheet_gen:plunging.low\" }),\r\n        }, {\r\n          node: infoMut(dmgFormulas.plunging.high, { key: \"sheet_gen:plunging.high\" }),\r\n        }]\r\n      }]),\r\n\r\n      skill: ct.talentTemplate(\"skill\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.skill.stele, { key: `char_${key}:skill.stele` })\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.resonance, { key: `char_${key}:skill.resonance` })\r\n        }, {\r\n          text: trm(\"skill.maxStele\"),\r\n          value: data => data.get(input.constellation).value >= 1 ? 2 : 1\r\n        }, {\r\n          text: st(\"pressCD\"),\r\n          value: datamine.skill.pressCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.holdDMG, { key: `char_${key}_gen:skill.skillParams.2` })\r\n        }, {\r\n          text: st(\"holdCD\"),\r\n          value: datamine.skill.holdCD,\r\n          unit: \"s\"\r\n        }, {\r\n          node: infoMut(dmgFormulas.skill.shield, { key: `sheet_gen:dmgAbsorption` })\r\n        }, {\r\n          text: tr(\"skill.skillParams.5\"),\r\n          value: datamine.skill.shileDuration,\r\n          unit: \"s\"\r\n        }]\r\n      }, ct.conditionalTemplate(\"skill\", {\r\n        value: condSkill,\r\n        path: condSkillPath,\r\n        teamBuff: true,\r\n        name: trm(\"skill.nearShield\"),\r\n        states: {\r\n          on: {\r\n            fields: Object.values(nodesSkill).map(node => ({ node }))\r\n          }\r\n        }\r\n      })]),\r\n\r\n      burst: ct.talentTemplate(\"burst\", [{\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.burst.dmg, { key: `char_${key}_gen:burst.skillParams.0` })\r\n        }, {\r\n          text: tr(\"burst.skillParams.1\"),\r\n          value: data =>\r\n            data.get(input.constellation).value < 4 ?\r\n              datamine.burst.duration[data.get(input.total.burstIndex).value] :\r\n              `${datamine.burst.duration[data.get(input.total.burstIndex).value]}s +${datamine.constellation4.durationInc}`,\r\n          fixed: 1,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.2\"),\r\n          value: datamine.burst.cd,\r\n          unit: \"s\"\r\n        }, {\r\n          text: tr(\"burst.skillParams.3\"),\r\n          value: datamine.burst.enerCost,\r\n        }]\r\n      }]),\r\n\r\n      passive1: ct.talentTemplate(\"passive1\", [ct.conditionalTemplate(\"passive1\", {\r\n        value: condP1,\r\n        path: condP1Path,\r\n        teamBuff: true,\r\n        name: trm(\"p1cond\"),\r\n        states: objectKeyMap(range(1, 5), i => ({ name: st(\"stack\", { count: i }), fields: [{ node: nodeP1 }] }))\r\n      })]),\r\n      passive2: ct.talentTemplate(\"passive2\", [ct.fieldsTemplate(\"passive2\", {\r\n        fields: [{\r\n          node: p4normalDmgInc\r\n        }, {\r\n          node: p4ChargedDmgInc\r\n        }, {\r\n          node: p4PlungingDmgInc\r\n        }, {\r\n          node: p4SKillDmgInc\r\n        }, {\r\n          node: p4BurstDmgInc\r\n        }]\r\n      })]),\r\n      passive3: ct.talentTemplate(\"passive3\"),\r\n      constellation1: ct.talentTemplate(\"constellation1\"),\r\n      constellation2: ct.talentTemplate(\"constellation2\"),\r\n      constellation3: ct.talentTemplate(\"constellation3\", [{ fields: [{ node: nodeC3 }] }]),\r\n      constellation4: ct.talentTemplate(\"constellation4\"),\r\n      constellation5: ct.talentTemplate(\"constellation5\", [{ fields: [{ node: nodeC5 }] }]),\r\n      constellation6: ct.talentTemplate(\"constellation6\", [ct.fieldsTemplate(\"constellation6\", {\r\n        fields: [{\r\n          node: infoMut(dmgFormulas.constellation6.heal, { key: `char_${key}:c6heal` })\r\n        }]\r\n      })]),\r\n    },\r\n  },\r\n}\r\nexport default new CharacterSheet(sheet, data)\r\n","import { CharacterKey } from '../../Types/consts'\r\nimport CharacterSheet from './CharacterSheet'\r\n\r\nimport Albedo from './Albedo'\r\nimport Aloy from './Aloy'\r\nimport Amber from './Amber'\r\nimport AratakiItto from './AratakiItto'\r\nimport Barbara from './Barbara'\r\nimport Beidou from './Beidou'\r\nimport Bennett from './Bennett'\r\nimport Chongyun from './Chongyun'\r\nimport Collei from './Collei'\r\nimport Diluc from './Diluc'\r\nimport Diona from './Diona'\r\nimport Dori from './Dori'\r\nimport Eula from './Eula'\r\nimport Fischl from './Fischl'\r\nimport Ganyu from './Ganyu'\r\nimport Gorou from './Gorou'\r\nimport HuTao from './HuTao'\r\nimport Jean from './Jean'\r\nimport KaedeharaKazuha from './KaedeharaKazuha'\r\nimport Kaeya from './Kaeya'\r\nimport KamisatoAyaka from './KamisatoAyaka'\r\nimport KamisatoAyato from './KamisatoAyato'\r\nimport Keqing from './Keqing'\r\nimport Klee from './Klee'\r\nimport KujouSara from './KujouSara'\r\nimport KukiShinobu from './KukiShinobu'\r\nimport Lisa from './Lisa'\r\nimport Mona from './Mona'\r\nimport Ningguang from './Ningguang'\r\nimport Noelle from './Noelle'\r\nimport Qiqi from './Qiqi'\r\nimport RaidenShogun from './RaidenShogun'\r\nimport Razor from './Razor'\r\nimport Rosaria from './Rosaria'\r\nimport SangonomiyaKokomi from './SangonomiyaKokomi'\r\nimport Sayu from './Sayu'\r\nimport Shenhe from \"./Shenhe\"\r\nimport ShikanoinHeizou from \"./ShikanoinHeizou\"\r\nimport Sucrose from \"./Sucrose\"\r\nimport Tartaglia from './Tartaglia'\r\nimport Thoma from './Thoma'\r\nimport Tighnari from './Tighnari'\r\nimport Traveler from './Traveler'\r\nimport Venti from './Venti'\r\nimport Xiangling from './Xiangling'\r\nimport Xiao from './Xiao'\r\nimport Xingqiu from './Xingqiu'\r\nimport Xinyan from './Xinyan'\r\nimport YaeMiko from './YaeMiko'\r\nimport Yanfei from './Yanfei'\r\nimport Yelan from './Yelan'\r\nimport Yoimiya from './Yoimiya'\r\nimport YunJin from './YunJin'\r\nimport Zhongli from './Zhongli'\r\n\r\nconst characters: Record<CharacterKey, CharacterSheet> = {\r\n  Albedo,\r\n  Aloy,\r\n  Amber,\r\n  AratakiItto,\r\n  Barbara,\r\n  Beidou,\r\n  Bennett,\r\n  Chongyun,\r\n  Collei,\r\n  Diluc,\r\n  Diona,\r\n  Dori,\r\n  Eula,\r\n  Fischl,\r\n  Ganyu,\r\n  Gorou,\r\n  HuTao,\r\n  Jean,\r\n  KaedeharaKazuha,\r\n  Kaeya,\r\n  KamisatoAyaka,\r\n  KamisatoAyato,\r\n  Keqing,\r\n  Klee,\r\n  KujouSara,\r\n  KukiShinobu,\r\n  Lisa,\r\n  Mona,\r\n  Ningguang,\r\n  Noelle,\r\n  Qiqi,\r\n  RaidenShogun,\r\n  Razor,\r\n  Rosaria,\r\n  SangonomiyaKokomi,\r\n  Sayu,\r\n  Shenhe,\r\n  ShikanoinHeizou,\r\n  Sucrose,\r\n  Tartaglia,\r\n  Thoma,\r\n  Tighnari,\r\n  Traveler,\r\n  Venti,\r\n  Xiangling,\r\n  Xiao,\r\n  Xingqiu,\r\n  Xinyan,\r\n  YaeMiko,\r\n  Yanfei,\r\n  Yelan,\r\n  Yoimiya,\r\n  YunJin,\r\n  Zhongli\r\n} as const\r\nexport default characters\r\n"],"names":["talentAssets","constellation1","constellation2","constellation3","constellation4","constellation5","constellation6","skill","burst","passive1","passive2","passive3","data_gen","data_gen_src","key","trans","tr","trm","ct","charTemplates","weaponTypeKey","a","s","b","datamine","normal","hitArr","skillParam_gen","charged","dmg1","dmg2","stamina","plunging","dmg","low","high","skillDmg","blossomDmg","duration","cd","blossomCd","burstDmg","blossomAmt","enerCost","blossomDmgInc","hpThresh","eleMasInc","blossomEner","maxStacks","stackDuration","plunging_dmg_","bonus_dmg_","cond","condBurstBlossomPath","condBurstBlossom","condBurstUsedPath","condBurstUsed","p2Burst_eleMas","equal","greaterEq","input","condP1EnemyHpPath","condP1EnemyHp","p1_blossom_dmg_","condC2StacksPath","condC2Stacks","c2_burst_dmgInc","prod","lookup","Object","fromEntries","range","map","i","naught","condSkillInFieldPath","condSkillInField","c4_plunging_dmg_disp","c4_plunging_dmg_","target","condC6CrystallizePath","condC6Crystallize","c6_Crystal_all_dmg_disp","c6_Crystal_all_dmg_","dmgFormulas","arr","dmgNode","entries","value","blossom","total","skill_dmg_","skillC3","burstC5","data","dataObjForCharacterSheet","bonus","teamBuff","premod","eleMas","all_dmg_","burst_dmgInc","sheet","name","cardImg","card","thumbImg","thumb","thumbImgSide","thumbSide","bannerImg","banner","rarity","star","elementKey","gender","constellationName","title","talent","sheets","auto","talentTemplate","text","fields","_","node","infoMut","textSuffix","unit","sgt","conditionalTemplate","path","st","percent","states","belowHp","headerTemplate","fixed","skillInField","canShow","c6Crystallize","isoOnField","count","burstUsed","CharacterSheet","p1","p2","aimed","aimedCharged","freezeBombDmg","chillWaterBomblets","atkDecrease","atkDecreaseDuration","coilNormalDmgBonus1","coilNormalDmgBonus2","coilNormalDmgBonus3","rushingNormalDmgBonus","rushingDuration","atkInc","teamAtkInc","cryoDmgBonus","condCoilPath","condCoil","normal_dmg_","subscript","atk_","unequal","undefined","condA1Path","condA1","teamAtk_","condA4Path","condA4","cryo_dmg_","hit","ele","compareEq","constant","fieldsTemplate","inheritedHp","unknown","dmgPerWave","rainDmg","critRateInc","aoeInc","secArrowDmg","manualDetionationDmg","moveSpdInc","burst_critRate_","condC6Path","condC6","moveSPD_","secondAimed","secondAimedCharged","manualDetonationDmg","nodeC3","nodeC5","variant","get","on","sSlash","akSlash","akFinal","stam","ss","hp","ss_cd","atkSpd","defConv","resDec","cost","atkSPD_","def_","initialStacks","timedStacks","burstCdRed","energyRegen","charged_critDMG_","condBurstPath","condBurst","condP1Path","condP1","condC4Path","condC4","nodeSkillHP","nodeBurstAtk","nodeBurstAtkSpd","allNodeBurstRes","allElementsWithPhy","nodeBurstInfusion","equalStr","nodeA4Bonus","nodeP1AtkSpd","nodeC2BurstRed","min","tally","nodeC2EnergyRegen","nodeC4Atk","nodeC4Def","nodeC6CritDMG","charged_dmgInc","atk","sum","infusion","nonOverridableSelf","values","cregen_hp_","cregen_hp","regen_hp_","regen_hp","hp_","ext","maxExt","cdDec","hydro_dmg_","condSkillPath","condSkill","nodeA1","nodeA1Display","condC2Path","condC2","nodeC2","nodeC2Display","regen","healNodeTalent","cregen","staminaDec_","spinningDmg","finalDmg","shieldHp_","shieldFlat","dmgBase","onHitDmgBonus","lightningDmg","damageReduction","energyCost","ascension4","normalDmg_","chargeDmg_","attackSpeed","electroResShred_","skillDmgOneHit","skillDmgTwoHits","nodeBurstElectroResRed_","nodeSkillNormalDmg_","nodeSkillChargeDmg_","nodeSkillAttackSpeed_","skillShieldNode","shieldNodeTalent","c1ShieldNode","shieldNode","shield","electroShield","shieldElement","baseDmg","dmgOneHit","dmgTwoHits","customDmgNode","customBonus","charged_dmg_","electro_enemyRes_","press","hold1_1","hold1_2","hold2_1","hold2_2","explosion","cd_press","cd_hold1","cd_hold2","regen_","regenFlat","atkBonus","cd_red","atk_inc","hp_thresh","er_inc","pyro_dmg","a1SkillCd","burstAtkRatio","burstAddlAtk","c1AtkRatio","c1AddlAtk","atkIncRatio","activeInAreaAtkDisp","condInAreaPath","condInArea","activeInArea","activeInAreaAtk","activeInAreaA4","c6AndCorrectWep","activeInAreaC6PyroDmg","activeInAreaC6Infusion","condUnderHPPath","condUnderHP","underHP","pyro_dmg_","team","enerRech_","calculateSkillCD","skillCD","cdFactor","result","spin_dmg","final_dmg","infusionDuration","fieldDuration","atk_spd","res","cdr","energy_regen","burst_dmg_","condAsc4Path","condAsc4","nodeAsc4","nodeAsc1Disp","nodeAsc1","correctWep","activeInAreaInfusion","nodeC6","cryo_enemyRes_","explosionDmg","leapDmg","sproutDmg","durationInc","maxExtension","anbarDmg","c1_enerRech_","condAfterBurstPath","condAfterBurst","c4AfterBurst_eleMasDisp","c4AfterBurst_eleMas","c2i","c6i","firstHit","secondHit","thridHit","slashDmg","dotDmg","stamReduction","pyroInc","dmgInc","hpThresh_","atkSpdInc","maxStack","condC1Path","condC1","nodeC1Bonus","nodeC2AtkBonus","nodeC2SpdBonus","nodeC6DmgBonus","nodeC6SpdBonus","skillAdditional","thirdHit","secondHitBoost","thirdHitBoost","icyPawDmg","cdPress","cdHold","fieldDmg","healHp_","healBase","moveSpeed_","stamRed_","atkRed_","icyPawDmg_","icyPawShield_","coopShield_","coopShieldDuration_","healingBonus_","emBonus","nodeC2skillDmg_","holdSkillShieldStr_","nodeC2shieldStr_","nodeSkillShieldPress","nodeSkillShieldHold","pressShield","pressCryoShield","holdShield","holdCryoShield","healDot","nodeA1MoveSpeed","nodeA1Stamina","nodeC6healing_Disp","nodeC6healing_","nodeC6emDisp","nodeC6em","incHeal_","lower","higher","shotDmg","roundDmg","numRounds","connectorDmg","healMult","cdRed","maxEnergyRegen","addlRounds","toopDmg","energyThresh","heal_","condC4BelowHpPath","condC4BelowHp","condC4BelowEnerPath","condC4BelowEner","c4BelowHp_incHeal_disp","c4BelowHp_incHeal_","c4BelowEner_enerRech_disp","c4BelowEner_enerRech_","condC6AfterSkillPath","condC6AfterSkill","c6AfterSkill_infusion","greaterEqStr","heal","customHealNode","burstC3","skillC5","overridableSelf","color","belowEner","hold","icewhirl","physResDec","cryoResDec","resDecDuration","pressCd","holdCd","defBonus","physResDecNegative","cryoResDecNegative","grimheartDuration","lightfallDmg","dmgPerStack","percentage","physInc","condGrimheartPath","condGrimheart","condLightfallSwordPath","condLightfallSword","condTidalIllusionPath","condTidalIllusion","physical_enemyRes_","physical_dmg_","lightSwordAdditional","lightFallSwordNew","objectKeyMap","shatteredLightfallSword","ozDmg","summonDmg","aimedChargedOz","lessThan","summonDmgC2","ozActiveCharDmg","additionalDmg","frostflake","frostflakeBloom","opCryoRes","enerRegen","cryo_dmg_disp","critRate_","fully","defInc","geo_dmg_","dmg_def","crystalDmg_def","crystalHits","skill_dmgInc","heal_def_","geo_critDMG_","condInFieldPath","condInField","skill1_defDisp","skill1_def","skill3_geo_dmg_Disp","skill3_geo_dmg_","afterBurst_def_","p2_skill_dmgInc","p2_burst_dmgInc","condAfterSkillBurstPath","condAfterSkillBurst","c6_geo_critDMG_","crystalCollapse","healNode","def","inField","afterBurst","afterSkillBurst","activationCost","bloodBlossomDuration","maxAtkInc","lowHpDmg","lowHpRegen","minHp","pyroDmgInc","bloodBlossomDmgInc","elePhysResInc","condAfterlifePath","condAfterlife","critRateTeam_1","condA2Path","condA2","critRateTeam_2","ele_res_s","dmgC2","enterExitDmg","burstActivationAtkModifier","burstActionFlatModifier","burstRegenAtkModifier","burstRegenFlatModifier","chance","atkPercentage","increaseDmg","moveSpd","anemoRes","dmgReduction","contRegen","a1Regen","anemo_enemyRes_","Math","abs","dmgRed_disp","dmgRed_","dot","add","asorbAdd","elemas_dmg_","elemas","auto_","condBurstAbsorptionPath","condBurstAbsorption","condSkillAbsorptionPath","condSkillAbsorption","condSwirlPaths","absorbableEle","e","condSwirls","condReadNode","asc4","c2EleMas","condC2PPath","condC2P","c2PEleMasDisp","c2PEleMas","c6infusion","c6Dmg_","c6NormDmg_","c6ChargedDmg_","c6PlungingDmg_","passive","pdmg","plow","phigh","staminaSprintDec_","eleKey","c2","c2p","val","c6","healAtk_","cooldown","cryoShield","condC1Cryo","nodeC1NormalCritRate","nodeC1ChargeCritRate","normal_critRate_","charged_critRate_","sprint","sp","cutDmg","bloomDmg","active_stam","drain_stam","dmg_bonus","cryo","snowflake","def_red","charged_bonus","condAfterSprintPath","condAfterSprint","afterSprintInfusion","condAfterSkillA1Path","condAfterSkillA1","a1NormDmg_","a1ChargedDmg_","condAfterApplySprintPath","condAfterApplySprint","afterApplySprintCryo","cutting","bloom","enemyDefRed_","afterSkill","c4","afterSprint","afterApplySprint","dmgArr","stateDuration","stackHpDmgInc","illusionDmg","illusionDuration","stacksGained","enerThres_","energyRestore","oppHpThres_","shunDmg_","extraStacks","stackThresh","atkSPD","extraStrikes","condInSkillPath","condInSkill","condSkillStacksPath","condSkillStacks","skillStacks_dmgInc","stacks","condBurstInAreaPath","condBurstInArea","burst_normal_dmg_Disp","burst_normal_dmg_","condC1OppHpPath","condC1OppHp","c1Shun_dmg_","c2_hp_","condC4AfterBurstPath","condC4AfterBurst","c4_atkSPD_","shunAddl","normal_dmgInc","stiletto","slash","thunderclap","initial","final","critInc_","enerRechInc_","electroInc","condAfterRecastPath","condAfterRecast","afterRecastInfusion","afterBurstCritRate_","afterBurstEnerRech_","condAfterReactPath","condAfterReact","afterReactAtk_","condC6StackPath","condC6Stack","c6Electro_dmg_","electro_dmg_","afterRecast","afterReact","jumptyDumptyDmg1","jumptyDumptyDmg2","jumptyDumptyDmg3","mineDmg","mineDuration","dmg_","jumptyDumptyDmg","chainedReactionsDmg","sparklyExplosionDmg","fullyAimed","titanBreakerDmg","stormClusterDmg","energyGen","er","crowfeatherDmg","condSkillTenguAmbushPath","condSkillTenguAmbush","x","skillTenguAmbush_disp","skillTenguAmbush_","c6ElectroCritDmg_","titanbreaker","stormcluster","electro_critDMG_","TenguJuuraiAmbush","pressDmg","ringHealHP_","ringHealFlat","ringDmg","singleDmg","maxDmgBase","maxDmgExtend","durationBase","durationExtend","emSkillHeal_","emSkillDmg_","skillDurInc","markDmg","em","a1Heal_","a4Skill_healInc","a4Skill_dmgInc","condC6TriggerPath","condC6Trigger","c6eleMas","ringHeal","healInc","totalDmg","stack0","stack1","stack2","stack3","holdCD","pressCD","tick","defShred","nodeA4DefShred","nodeC2DefIncrease","bubbleDuration","dmgBonusNeg","omenDuration","dmgBonus","torrentDuration","phantomDuration","electroChargeDmgInc","vaporizeDmgInc","hydroSwirlDmgInc","frozenExtension","critRateIncNeg","maxDmgBonus","condOmenPath","condOmen","condPoSPath","condPoS","electrocharged_dmg_","swirl_dmg_","vaporize_dmg_","condPoOPath","condPoO","condRoCPath","condRoC","jadeDmg","screenHpMod","screenHp","dmgPerGem","geoDmgBonus_","nodeA4GeoDmgBonus_","nodesC4","allElements","gemDmg","n","shieldDef","healDef","healChance","shieldDuration","healFlat","defToAtk","hpThreshold","healingChance","chargeStamina","burstAtkBonus","nodeSkillHealChanceBase","nodeSkillHealChanceC1BurstOn","nodeSkillHealChanceC1BurstOff","nodeC2ChargeDMG","nodeC2ChargeDec","nodeC4dmg","devotionShield","staminaChargedDec_","hitRegenPercent","hitRegenFlat","contRegenPercent","contRegenFlat","tickDmg","castDmg","healPercent","nodeA1HealingBonus","nodeC2ChargedDmgInc","nodeC2NormalDmgInc","hitRegen","coorDmg","burstDmg_bonus","resolveBonus1","resolveBonus2","resolveGained","hit1","hit2","hit3","hit41","hit42","hit5","charged1","charged2","plunge","plungeLow","plungeHigh","enerGen","electroDmg_bonus","def_ignore","atk_bonus","condSkillEyePath","condSkillEye","skillEye_","atkType","enemy","defIgn","energyCosts","condSkillEyeTeamPath","condSkillEyeTeam","skillEyeTeamBurstDmgInc","resolveStacks","condResolveStackPath","condResolveStack","resolveStackNode","resolveInitialBonus_","resolveInfusedBonus_","burstResolve","mvArr","resolveBonus","passive2ElecDmgBonus","c4AtkBonus_","skillEye","c","erBonus","companionDmg","atkSpdBonus","electroResBonus","enerThreshold","erInc","sprintStaminaDec","allDmgInc","defDec","electroSigilGenerated","condElectroSigilPath","condElectroSigil","condTheWolfWithinPath","condTheWolfWithin","enerRechElectroSigil_","electro_res_","enerRechA4_","companionDmg1","companionDmg2","companionDmg3","companionDmg4","fullBurstDmg1","fullBurstDmg2","fullBurstDmg3","fullBurstDmg4","c1i","crInc","crBonus","maxBonus","physShred","nodeA1CritInc","nodeA4CritBonusDisp","nodeA4CritBonus","nodeC1AtkSpd","nodeC1NormalInc","nodeC6PhysShred","isTeamBuff","nBonus_","cBonus_","sBonus_","p","heal_ratio_","c1","s_heal_","nc_heal_","energy","hydro_","burstNormalDmgInc","burstChargedDmgInc","burstSkillDmgInc","passiveHeal_","passiveCritRate_","c2SkillHeal","c2BurstHeal","c4AtkSpd_","c6Hydro_","spin","wheelDmg","eleWheelDmg","kickPressDmg","kickHoldDmg","eleKickDmg","cdMin","cdMax","pressBaseHeal","pressAtkHeal","darumaDmg","darumaBaseHeal","darumaAtkHeal","darumaHits","baseHeal","emHeal","nearHeal","ener","darumaDmgInc","darumaHealInc","condActiveSwirlPath","condActiveSwirl","condC2SkillStackPath","condC2SkillStack","c2_kickPressDmg_","c2_kickDmg_","stack","c6_daruma_dmg_inc","c6_daruma_heal_inc","darumaHeal","pressHeal","extraHeal","activeSwirl","dmgAtk_","durationHold","trigger","triggerHold","res_","press_dmg_","durationPress","hold_dmg_","condQuillPath","condQuill","nodeSkill","enemyRes_","nodeBurstCryo_enemyRes_","nodeBurstPhysical_enemyRes_","condAsc1Path","condAsc1","nodeAsc4Press_skill_dmg_","nodeAsc4Press_burst_dmg_","nodeAsc4Hold","nodeAsc4Hold_normal_dmg_","nodeAsc4Hold_charged_dmg_","nodeAsc4Hold_plunging_dmg_","nodeC2Disp","c4Inc","quillDmg","cryo_dmgInc","cryo_critDMG_","quill","toString","field","declension_dmg_","conviction_dmg_","declension_duration","slugger_dmg","iris_dmg","atkSpd_","baseEnergy","addlEnergy","hsCritRate_","hsCritDmg_","stacksArr","condDeclensionStacksPath","condDeclensionStacks","totalStacks_dmg_","condSkillHitPath","condSkillHit","a4_eleMasDisp","a4_eleMas","condTakeFieldPath","condTakeField","c1_atkSpd_","c6_skill_critRate_","c6_skill_critDMG_","skill_critRate_","skill_critDMG_","eleMas_","ele_dmg_","condAbsorptionPath","condAbsorption","condSwirlReactionPath","condSwirlReaction","condSkillHitOpponentPath","condSkillHitOpponent","asc1Disp","asc1","asc4Disp","c6Base","c6Bonus","slice","riptide","flashDmg","riptideDuration","stanceDmg","normal1","normal2","normal3","normal4","normal5","normal61","normal62","riptideSlash","chargedStamina","preemptiveCd1","preemptiveCd2","maxCd","meleeDmg","riptideBlastDmg","rangedDmg","enerReturned","durationExt","auto_boost","nodePassive","hpShield_","baseShield","maxHpShield_","maxBaseShield","collapseDmg","scorchingDuration","shield_","collapse_dmgInc","burstDuration","auto_dmg","condP1BarrierStacksPath","condP1BarrierStacks","p1_shield_","p2Collapse_dmgInc","condC6AfterBarrierPath","condC6AfterBarrier","c6_normal_dmg_","c6_charged_dmg_","c6_plunging_dmg_","minShield","minPyroShield","maxShield","maxPyroShield","pyroShield","wreathArrow","clusterArrow","penetratorDuration","primaryDmg","secondaryDmg","charged_burst_dmg_","maxDmg_","dendro_dmg_","chargeTimeRed","condA1AfterWreathPath","condA1AfterWreath","a1AfterWreath_eleMas","a4_charged_dmg_","a4_burst_dmg_","chargedShaftAddl","c1_charged_critRate_","condC2EnemyFieldPath","condC2EnemyField","c2EnemyField_dendro_dmg_","c4_eleMas","after","react","wreath","cluster","skillAssets","strKey","Translate","ns","key18","initial_dmg","initial_max","storm_dmg","storm_max","absorbDmg","nodesC6","objectKeyValueMap","absorb","talentSheet","lampDmg","unknown1","unknown2","lampDuration","condA1StacksPath","condA1Stacks","a1StacksArr","a1_eleMas_disp","a1_eleMas","a4_skill_dmg_","condC6BurstEffectPath","condC6BurstEffect","condC6BurstElePath","condC6BurstEle","c6_dendro_dmg_disp","c6_dendro_dmg_","c6_ele_dmg_disp","c6_ele_dmg_","amulets","amuletDuration","enerRech_duration","thunderDmg","thunderCd","addlAmulets","electro_enemyRes","numAttacks","thunder_dmg_","condSkillAmuletPath","condSkillAmulet","p2_enerRech_","skillAmulet_enerRech_Disp","skillAmulet_enerRech_","burstEnergyRestore","condC2ThunderPath","condC2Thunder","c2Thunder_electro_enemyRes_","condC6After2ThunderPath","condC6After2Thunder","c6_thunder_dmg_","numShockwaves","skill_cdRed","geoDmg","maxTriggers","skillDuration","condC1BurstAreaPath","condC1BurstArea","c1BurstArea_critRate_Disp","c1BurstArea_critRate_","condC4BurstHitPath","condC4BurstHit","c4Burst_energyRestore","talents","anemo","geo","electro","dendro","anemoData","geoData","electroData","dendroData","holdDmg","baseTicks","absorbTicks","stam_","dmgRatio","anemo_dmg_","p3_staminaGlidingDec_","c2Hit_anemo_enemyRes_","c2Hit_phys_enemyRes__","c4_anemo_dmg_","c6_anemo_enemyRes_","c6_ele_enemyRes_arr","base","full7","reactions","full14","staminaGlidingDec_","launched","takeDmg","pickup","dmg3","dmgNado","pyroRes","duration1","duration2","pyroDmg","condAfterChiliPath","condAfterChili","afterChili","condAfterGuobaHitPath","condAfterGuobaHit","afterGuobaHit","condDuringPyronadoPath","condDuringPyronado","duringPyronado","antiC6","pyro_enemyRes_","drain","skillDmgBonus","staminaClimbingDec_","condInBurstPath","condInBurst","auto_dmg_","lifeDrain","condA1BurstStackPath","condA1BurstStack","a1BurstStackArr","condA4SkillStackPath","condA4SkillStack","a4SkillStackArr","c2Inactive","c2Inactive_enerRech_","condC4BelowHPPath","condC4BelowHP","c4BelowHP_def_","inBurst","c4BelowHP","hydro_enemyRes_","skill_duration","nodeA4","nodeC4","nodeSkillDmgRed_","nodeA4Heal","press1","one","press2","healing","shieldArr","defShield_","lvl3Dmg","pressPhysDmg","dotPyroDmg","burstphysical_critRate_","charged_atkBonus","condSkillHitNumPath","condSkillHitNum","condP2ShieldPath","condP2Shield","p2Shield_physical_dmg_Disp","p2Shield_physical_dmg_","condC1CritPath","condC1Crit","c1Crit_atkSPD_","c2BurstPhysical_critRate_","condC4SkillHitPath","condC4SkillHit","c4SkillHit_physical_enemyRes_","c6_staminaChargedDec_","condC6ChargedPath","condC6Charged","c6_chargedAtkBonus","lvl","flatMap","type","dmg4","tenkoDmg","eleMas_dmg_","defIgn_","sealStaminaRed_","maxSeals","sealDuration","sealInterval","seal_pyro_dmg_","extraSeals","afterBurst_charged_dmg_","condP1SealsPath","condP1Seals","p1_pyro_dmg_","seals","condP2ChargedCritPath","condP2ChargedCrit","condC2EnemyHpPath","condC2EnemyHp","c2EnemyHp_critRate_","pyro_shield","customShieldNode","norm_shield","barb","resetChance","maxDuration","throwDmg","hp_Arr","baseDmg_","stackDmg_","addlCharge","arrowDmg_","bonusHp_","maxHp_","charges","a1_hp_","condA4StacksPath","condA4Stacks","a4Stacks","a4Dmg_Disp","a4Dmg","condC4StacksPath","condC4Stacks","c4Stacks","c4Hp_","condC6ActivePath","condC6Active","c6Active","hitEle","arrowDmg","barbDmg","characterKey","full","kindling","exp","fixed_atk_","var_atk_","burst_durationInc","const3TalentInc","const5TalentInc","normal_dmgMult","a1Stacks","c1atk_","c2pyro_dmg_","normalEntries","kindlingEntries","dataObj","includes","uiData","triggerNum","normalInc","toFixed","stele","resonance","holdDMG","shileDuration","skill_","burst_","nodesSkill","k","nodeP1","p4AutoDmgInc","p4normalDmgInc","p4ChargedDmgInc","p4PlungingDmgInc","p4SKillDmgInc","p4BurstDmgInc","plunging_dmgInc","Albedo","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Chongyun","Collei","Diluc","Diona","Dori","Eula","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Lisa","Mona","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Sucrose","Tartaglia","Thoma","Tighnari","Traveler","Venti","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yelan","Yoimiya","YunJin","Zhongli"],"sourceRoot":""}