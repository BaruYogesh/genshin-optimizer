{"version":3,"sources":["Components/CustomFormControl.tsx","Util/UIUtil.ts","Components/CharacterSelection.tsx","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Character/CharacterUtil.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Components/DocumentDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","className","disabled","float","placeholder","allowEmpty","max","min","useState","state","setState","sendChange","useCallback","undefined","parseFunc","parseFloat","parseInt","useEffect","toString","aria-label","type","e","target","onBlur","onKeyDown","key","valueStringWithUnit","unit","toFixed","valueString","CharacterSelectionDropdownList","onSelect","database","_getCharKeys","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","nameWIthIcon","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","icon","faQuestionCircle","style","cursor","variant","allSubstatFilter","Set","allSubstats","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","t","useTranslation","databaseArtifact","updateDatabaseArtifact","followArt","sheet","ArtifactSheet","_getArt","setKey","equipOnChar","charKey","setLocation","editable","art","location","slotKey","numStars","level","mainStatKey","substats","lock","mainStatLevel","Math","mainStatVal","Artifact","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maxEfficiency","artifactValid","locationName","name","faBriefcase","slotName","getSlotName","slotDesc","getSlotDesc","slotDescEle","faInfoCircle","setEffects","setDesc","Object","keys","setNumKey","setNum","setEffectDesc","setDescEle","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","stars","Body","Title","getStatName","stat","i","numRolls","rolls","length","efficiency","effOpacity","statName","opacity","has","valid","Footer","Toggle","size","Menu","Divider","lockArtifact","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","sheets","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","useForceUpdate","updateArt","followAnyArt","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setToSlots","setNumKeyArr","SetEffectDisplay","find","CharacterOverviewPane","weaponSheet","constellation","ascension","build","tlvl","elementKey","characterEle","weaponTypeKey","Img","cardImg","StatIcon","Image","Assets","weaponTypes","star","colored","getLevelString","tKey","getTalentOfKey","img","roundedCircle","Badge","position","bottom","right","constellationName","Array","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","fields","statsToFields","ListGroup","WeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","Dropdown","as","ButtonGroup","allRarities","arr","Fragment","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","conditionalValues","setLevel","newLevel","clamp","ascensionMaxLevel","findIndex","ascenML","ambiguousLevel","setAscension","lowerAscension","substatKey","getSubStatKey","weaponDisplayMainVal","getMainStatValue","weaponDisplaySubVal","getSubStatValue","weaponPassiveName","passiveName","weaponBonusStats","document","InputGroup","Prepend","refineIndex","Text","Append","milestoneLevels","lv","lvlstr","description","passiveDescription","atk","DocumentDisplay","sections","editing","SetEditing","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","getSpecializedStat","specializedStatVal","getSpecializedStatVal","specializedStatUnit","displayNewBuildProps","faSave","statKey","StatInput","prependEle","getStatNameWithPercent","getStatValueWithOverride","percent","onValueChange","defaultValue","getBaseStatValue","StatDisplay","fixedUnit","getStatNameRaw","xl","CharacterTalentPane","props","skillDisplayProps","ReactionDisplay","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","DropdownButton","element","shattered_hit","information","OverlayTrigger","Tooltip","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","talentSheet","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","buildSettings","initialBuildSettings","auto","skill","burst","infusionAura","characterReducer","action","_getChar","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","updateChar","possibleWeapons","weaponKey","ws1","ws2","talents","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","DamageOptionsAndCalculation","CharSelectDropdown","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","ElementalData","eleKey","DropdownItem","getFormulaTargetsDisplayHeading","startsWith","subkey","split","num","ConditionalSelector","conditional","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","evalIfFunc","maxStack","badge","whiteSpace","stateKey","condial","v","stack","faCheckSquare","faSquare","ConditionalDisplay","fieldClassName","Conditional","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","section","talentText","setEffectText","setStats","setNumStats","setStatsFields","setEffectDocument","cardbg","sectionKey","sectionValues","JSON","stringify","DisplayStatDiff","label","val","oldVal","oldText","diffText","isArray","Formula","invalid","characterHP","characterDEF","characterATK","weaponATK","labelVariant","hasOverride","restProps","pointerEvents","faUndo","infusionVals","uncoloredEleIcons","InfusionAuraDropdown","isMelee","ReactionToggle","s","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","reverse","printStat","Collapse","subKey","expand","formulaField","fieldFixed","fieldUnit","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.773004ed.chunk.js","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\ntype props = {\r\n  value: number | undefined,\r\n  onChange: (newValue: number | undefined) => void,\r\n  className?: string\r\n  disabled?: boolean\r\n  float?: boolean,\r\n  placeholder?: string,\r\n  allowEmpty?: boolean,\r\n  max?: string | number,\r\n  min?: string | number,\r\n}\r\nexport default function CustomFormControl({ value, onChange, className = \"\", disabled = false, float = false, placeholder, allowEmpty = false, max, min }: props) {\r\n  const [state, setState] = useState(\"\")\r\n  const sendChange = useCallback(\r\n    () => {\r\n      if (allowEmpty && state === \"\") return onChange(undefined)\r\n      if (state === \"\") return onChange(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state))\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setState(value?.toString() ?? \"\"), [value, setState]) // update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className={`hide-appearance ${className}`}\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={(e: any) => setState(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={(e: any) => e.key === \"Enter\" && sendChange()}\r\n    max={max}\r\n    min={min}\r\n  />\r\n}","export function valueStringWithUnit(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return value.toFixed(1) + \"%\"\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return value.toFixed(0)\r\n  }\r\n}\r\n\r\nexport function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return value.toFixed(1)\r\n    case \"eff\": return value.toFixed(2)\r\n    default: return value.toFixed(0)\r\n  }\r\n}\r\n","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport { database } from \"../Database/Database\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nexport function CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{database._getCharKeys().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>{characterSheet.nameWIthIcon}</Dropdown.Item>\r\n}\r\n\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\nimport { ICalculatedStats } from \"../Types/stats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }: { field: IFieldDisplay, index: number, equippedBuild?: ICalculatedStats, newBuild?: ICalculatedStats, className?: string }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const canShow = useMemo(() => stats ? field?.canShow?.(stats) : false, [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faBriefcase, faEdit, faInfoCircle, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect, useState } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport { useTranslation } from 'react-i18next';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport { database } from '../Database/Database';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { CharacterKey } from '../Types/consts';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { valueStringWithUnit } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const { t } = useTranslation([\"artifact\"]);\r\n  const [databaseArtifact, updateDatabaseArtifact] = useState(undefined as IArtifact | undefined)\r\n  useEffect(() =>\r\n    artifactId ? database.followArt(artifactId, updateDatabaseArtifact) : undefined,\r\n    [artifactId, updateDatabaseArtifact])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? database._getArt(artifactId) : undefined))?.setKey), [artifactObj, artifactId])\r\n  const equipOnChar = (charKey: CharacterKey | \"\") => database.setLocation(artifactId!, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? databaseArtifact\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"), [art?.location])\r\n  if (!art) return null\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{valueStringWithUnit(Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? 0, Stat.getStatUnit(mainStatKey))}</span>\r\n  const { currentEfficiency, maxEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maxEfficiency !== 0\r\n  const locationName = characterSheet?.name ? characterSheet.nameWIthIcon : <span><FontAwesomeIcon icon={faBriefcase} /> {t`filterLocation.inventory`}</span>\r\n  const slotName = sheet?.getSlotName(slotKey) || \"Unknown Piece Name\"\r\n  const slotDesc = sheet?.getSlotDesc(slotKey)\r\n  const slotDescEle = slotDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"slotdesc-tooltip\">{slotDesc}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n  const setEffects = sheet?.setEffects\r\n  const setDesc = sheet && setEffects && <Tooltip id=\"setdesc-tooltop\">\r\n    {Object.keys(setEffects).map(setNumKey => <span key={setNumKey} className=\"text-left\">\r\n      <h6 className=\"mb-0\"><Badge variant=\"success\">{t(`setEffectNum`, { setNum: setNumKey })}</Badge></h6>\r\n      <p>{sheet.setEffectDesc(setNumKey as any)}</p>\r\n    </span>)}\r\n  </Tooltip>\r\n  const setDescEle = setDesc ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={setDesc}\r\n  >\r\n    <FontAwesomeIcon icon={faInfoCircle} />\r\n  </OverlayTrigger> : null\r\n\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-2\">\r\n          <h6><strong>{slotName} {slotDescEle}</strong></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} /><strong>{` +${level}`}</strong></div>\r\n          <div><small><Stars stars={numStars} /></small></div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"} {setDescEle}</div>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueStringWithUnit(stat.value, Stat.getStatUnit(stat.key))}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueStringWithUnit(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <div className=\"mt-auto\">\r\n        <Row>\r\n          <Col ><small>{t`editor.curSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={currentEfficiency} valid={artifactValid} /></Col>\r\n        </Row>\r\n        {currentEfficiency !== maxEfficiency && <Row>\r\n          <Col ><small>{t`editor.maxSubEff`}</small></Col>\r\n          <Col xs=\"auto\"><PercentBadge value={maxEfficiency} valid={artifactValid} /></Col>\r\n        </Row>}\r\n      </div>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}><FontAwesomeIcon icon={faBriefcase} /> Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">{t`lockArtifactTip`}</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => database.lockArtifact(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card >)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { database } from '../../Database/Database';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, ArtifactSetKey, SlotKey } from '../../Types/consts';\r\nimport { ICalculatedStats } from '../../Types/stats';\r\nimport { useForceUpdate, usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ sheets, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild)\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => stats && Character.getDisplayStatKeys(stats, sheets), [stats, sheets])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  // TODO: We can also listen only to equipped artifacts\r\n  const [, updateArt] = useForceUpdate()\r\n  useEffect(() => database.followAnyArt(updateArt))\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && database.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    database.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  if (!stats) return null\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ sheets, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faSave } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport { Badge, Button, ButtonGroup, Card, Col, Dropdown, Image, InputGroup, ListGroup, Row } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport CustomFormControl from '../../Components/CustomFormControl';\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport { Stars } from \"../../Components/StarDisplay\";\r\nimport StatDisplay from \"../../Components/StatDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport { ascensionMaxLevel, milestoneLevels } from \"../../Data/CharacterData\";\r\nimport Stat from \"../../Stat\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements, allRarities } from \"../../Types/consts\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport { clamp } from \"../../Util/Util\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { constellation, level, ascension }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const { tlvl } = build\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <h3>{characterSheet.name} {StatIcon[elementKey]} <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n          <h6><Stars stars={characterSheet.star} colored /></h6>\r\n          <h5>Level: {Character.getLevelString(character)}</h5>\r\n          <Row className=\"px-2 mb-2\">\r\n            {[\"auto\", \"skill\", \"burst\"].map(tKey =>\r\n              <Col xs={4} className=\"p-1\" key={tKey}>\r\n                <Image src={characterSheet.getTalentOfKey(tKey, build.characterEle)?.img} className=\"w-100 h-auto\" roundedCircle />\r\n                <h5 className=\"mb-0\"><Badge variant=\"info\" style={{ position: \"absolute\", bottom: \"0\", right: \"0\" }}><strong>{tlvl[tKey] + 1}</strong></Badge></h5>\r\n              </Col>)}\r\n          </Row>\r\n          <div className=\"text-center\"><h6>{characterSheet.constellationName}</h6></div>\r\n          <Row className=\"px-2\">\r\n            {[...Array(6).keys()].map(i =>\r\n              <Col xs={4} className=\"p-1\" key={i}>\r\n                <Image src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                  roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\nfunction WeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  if (!weaponSheets) return null\r\n\r\n  return <Dropdown as={ButtonGroup}>\r\n    <Dropdown.Toggle as={Button}>\r\n      {weaponSheet.name}\r\n    </Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {allRarities.map((stars, i, arr) => <React.Fragment key={stars}>\r\n        <Dropdown.ItemText key={\"star\" + stars}><Stars stars={stars} /></Dropdown.ItemText>\r\n        {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === stars).map(([key, weaponObj]: any) =>\r\n          <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n            {weaponObj.name}\r\n          </Dropdown.Item>\r\n        )}\r\n        {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n      </React.Fragment>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const { level, ascension } = weapon\r\n  const setStateWeapon = useCallback((key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    weapon[key] = value\r\n    characterDispatch({ weapon: weapon })\r\n  }, [character, weapon, characterDispatch])\r\n\r\n  const setLevel = useCallback((newLevel) => {\r\n    newLevel = clamp(newLevel, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => newLevel <= ascenML)\r\n    setStateWeapon(\"level\", newLevel)\r\n    setStateWeapon(\"ascension\", ascension)\r\n  }, [setStateWeapon])\r\n\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) setStateWeapon(\"ascension\", ascension + 1)\r\n    else setStateWeapon(\"ascension\", lowerAscension)\r\n  }, [setStateWeapon, ascension, level])\r\n\r\n  if (!build) return null\r\n\r\n  const substatKey = weaponSheet.getSubStatKey()\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weaponSheet.getMainStatValue(level, ascension)\r\n  const weaponDisplaySubVal = weaponSheet.getSubStatValue(level, ascension)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          {editable ? <InputGroup >\r\n            <ButtonGroup as={InputGroup.Prepend}>\r\n              <WeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Refinement {weapon.refineIndex + 1}</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.ItemText>\r\n                    <span>Select Weapon Refinement</span>\r\n                  </Dropdown.ItemText>\r\n                  <Dropdown.Divider />\r\n                  {[...Array(5).keys()].map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                      {`Refinement ${key + 1}`}\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <InputGroup.Append>\r\n              <CustomFormControl placeholder={undefined} onChange={setLevel} value={level} min={1} max={90} />\r\n            </InputGroup.Append>\r\n            <InputGroup.Append>\r\n              <Button disabled={!ambiguousLevel} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n            </InputGroup.Append>\r\n            <ButtonGroup as={InputGroup.Append}>\r\n              <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle as={Button}>Select Level</Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                  {milestoneLevels.map(([lv, as]) => {\r\n                    const sameLevel = lv === ascensionMaxLevel[as]\r\n                    const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n                    return <Dropdown.Item key={`${lv}/${as}`} onClick={() => { setStateWeapon(\"level\", lv); setStateWeapon(\"ascension\", as) }}>{lvlstr}</Dropdown.Item>\r\n                  })}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </ButtonGroup>\r\n          </InputGroup> : <span>Weapon</span>}\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n          <small>{weaponSheet.description}</small>\r\n        </Col>\r\n        <Col>\r\n          <h5 className=\"mb-0\">{weaponSheet.name} Lv. {WeaponSheet.getLevelString(weapon)} {weaponPassiveName && <Badge variant=\"info\">Refinement {weapon.refineIndex + 1}</Badge>}</h5>\r\n          <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n          <h6>{weaponPassiveName}</h6>\r\n          <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n          <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: substatKey ? weaponDisplaySubVal : undefined }} stats={build} />\r\n          <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n          {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n        </Col>\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"hp\", \"hp_\", \"def\", \"def_\", \"atk\", \"atk_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\", \"cdRed_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"plunging_dmg_\", \"plunging_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = characterSheet.getSpecializedStat(character.ascension)\r\n  const specializedStatVal = characterSheet.getSpecializedStatVal(character.ascension)\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIcon[statKey]} {Stat.getStatNameWithPercent(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span>{specializedStatKey && StatIcon[specializedStatKey]} {Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right`}>{`${specializedStatVal.toFixed(Stat.fixedUnit(specializedStatKey))}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport StatIcon from \"../../Components/StatIcon\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { ascension, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.cryo} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.hydro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} {StatIcon.electro}+{StatIcon.pyro} <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} {StatIcon.pyro}+{StatIcon.anemo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} {StatIcon.electro}+{StatIcon.anemo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} {StatIcon.cryo}+{StatIcon.anemo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} {StatIcon.hydro}+{StatIcon.anemo}</span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} {StatIcon.hydro}+{StatIcon.cryo}+ <small className=\"text-physical\">Heavy Attack{information} </small> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} {StatIcon.electro}/{StatIcon.hydro}/{StatIcon.pyro}/{StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} {StatIcon.pyro}+{StatIcon.geo}</span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} {StatIcon.electro}+{StatIcon.geo}</span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} {StatIcon.cryo}+{StatIcon.geo}</span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} {StatIcon.hydro}+{StatIcon.geo}</span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> <strong>{stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</strong></span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { elementKey, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={talentSheet?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{talentSheet?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, ButtonGroup, Dropdown, Image, InputGroup, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownItem from 'react-bootstrap/esm/DropdownItem';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport { initialBuildSettings } from '../Build/BuildSetting';\r\nimport CustomFormControl from '../Components/CustomFormControl';\r\nimport { ascensionMaxLevel, milestoneLevels } from '../Data/CharacterData';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { database } from '../Database/Database';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys, CharacterKey } from '../Types/consts';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { clamp, deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  level: 1,\r\n  ascension: 0,\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as any,\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  buildSettings: initialBuildSettings(),\r\n  weapon: {\r\n    key: \"\" as any,\r\n    level: 1,\r\n    ascension: 0,\r\n    refineIndex: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\": // for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...database._getChar(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: CharacterKey | \"\",\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey = \"\", character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  const weaponSheets = usePromise(WeaponSheet.getAll(), [])\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key), [character.weapon.key])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll(), [])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...database._getChar(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && database.updateChar(character)\r\n  }, [character, editable])\r\n\r\n  //callback for when switching to a new character, and need to initiate a weapon.\r\n  useEffect(() => {\r\n    if (!character.weapon.key && weaponSheets && characterSheet) {\r\n      const possibleWeapons = WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey)\r\n      //sort the weapons to get the lowest rarity weapon.\r\n      const [weaponKey] = Object.entries(possibleWeapons).sort(([k1, ws1], [k2, ws2]) => ws1.rarity - ws2.rarity)[0]\r\n      character.weapon.key = weaponKey\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets])// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  useEffect(() => {//check for default value for traveler\r\n    if (characterSheet && \"talents\" in characterSheet.sheet && !character.elementKey)\r\n      characterDispatch({ elementKey: Object.keys(characterSheet.sheet.talents)[0] })\r\n  }, [character.elementKey, characterSheet])\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = database._getChar(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n  const sheets = useMemo(() => characterSheet && weaponSheet && artifactSheets && { characterSheet, weaponSheet, artifactSheets }, [characterSheet, weaponSheet, artifactSheets])\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = sheets && <DamageOptionsAndCalculation {...{ sheets, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && sheets && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane sheets={sheets} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane sheets={sheets} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\n\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, character: { elementKey = \"anemo\", level = 1, ascension = 0 }, editable, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  const setLevel = useCallback((level) => {\r\n    level = clamp(level, 1, 90)\r\n    const ascension = ascensionMaxLevel.findIndex(ascenML => level <= ascenML)\r\n    characterDispatch({ level, ascension })\r\n  }, [characterDispatch])\r\n  const ambiguousLevel = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML) > 0\r\n  const setAscension = useCallback(() => {\r\n    const lowerAscension = ascensionMaxLevel.findIndex(ascenML => level !== 90 && level === ascenML)\r\n    if (ascension === lowerAscension) characterDispatch({ ascension: ascension + 1 })\r\n    else characterDispatch({ ascension: lowerAscension })\r\n  }, [characterDispatch, ascension, level])\r\n  return <>{editable ? <InputGroup >\r\n    <ButtonGroup as={InputGroup.Prepend}>\r\n      <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button}>\r\n          {HeaderIconDisplay}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu as={CustomMenu}>\r\n          {[...new Set(allCharacterKeys)].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n      {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <Dropdown as={ButtonGroup}>\r\n        <Dropdown.Toggle as={Button} className={`text-${elementKey}`}>\r\n          <strong>{ElementalData[elementKey].name}</strong>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu >\r\n          {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n            <Dropdown.Item key={eleKey} className={`text-${eleKey}`} onClick={() => characterDispatch({ elementKey: eleKey })}><strong>{ElementalData[eleKey].name}</strong></Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>}\r\n    </ButtonGroup>\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text><strong>Lvl. </strong></InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n\r\n    <InputGroup.Append>\r\n      <CustomFormControl placeholder={undefined} className=\"h-100\" onChange={setLevel} value={level} min={1} max={90} disabled={!characterSheet} />\r\n    </InputGroup.Append>\r\n    <InputGroup.Append>\r\n      <Button disabled={!ambiguousLevel || !characterSheet} onClick={setAscension}><strong>/ {ascensionMaxLevel[ascension]}</strong></Button>\r\n    </InputGroup.Append>\r\n    <ButtonGroup as={InputGroup.Append}>\r\n      <Dropdown as={ButtonGroup} >\r\n        <Dropdown.Toggle as={Button} disabled={!characterSheet}>Select Level</Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {milestoneLevels.map(([lv, as]) => {\r\n            const sameLevel = lv === ascensionMaxLevel[as]\r\n            const lvlstr = sameLevel ? `Lv. ${lv}` : `Lv. ${lv}/${ascensionMaxLevel[as]}`\r\n            return <DropdownItem key={`${lv}/${as}`} onClick={() => characterDispatch({ level: lv, ascension: as })}>{lvlstr}</DropdownItem>\r\n          })}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </ButtonGroup>\r\n  </InputGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey), [characterKey])\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { Badge } from \"react-bootstrap\"\r\nimport { ArtifactSheet } from \"../Artifact/ArtifactSheet\"\r\nimport { ArtifactSetKey, ElementKey } from \"../Types/consts\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport CharacterSheet from \"./CharacterSheet\"\r\n\r\nexport function getFormulaTargetsDisplayHeading(key: string, { characterSheet, weaponSheet, artifactSheets }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet> }, eleKey: ElementKey = \"anemo\") {\r\n  if (key === \"basicKeys\") return \"Basic Stats\"\r\n  else if (key === \"genericAvgHit\") return \"Generic Optimization Values\"\r\n  else if (key === \"transReactions\") return \"Transformation Reaction\"\r\n  else if (key.startsWith(\"talentKey_\")) {\r\n    const subkey = key.split(\"talentKey_\")[1]\r\n    return (characterSheet?.getTalentOfKey(subkey, eleKey)?.name ?? subkey)\r\n  } else if (key.startsWith(\"weapon_\")) {\r\n    const subkey = key.split(\"weapon_\")[1]\r\n    return (weaponSheet?.name ?? subkey)\r\n  } else if (key.startsWith(\"artifact_\")) {\r\n    const [, setKey, num] = key.split('_')\r\n    return <span>{artifactSheets[setKey]?.name} <Badge variant=\"success\">{num}-Set</Badge></span>\r\n  }\r\n  return \"\"\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { ICalculatedStats } from '../Types/stats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    if (!stats) return\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else if (conditional.keys)\r\n      layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats, characterDispatch])\r\n\r\n  if (!canShow || !stats) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  return <div className=\"w-100\">{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey), [setKey])\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectDesc(setNumKey)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const document = sheet.setEffectDocument(setNumKey)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n  </>\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport { ICalculatedStats } from \"../../Types/stats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport { ArtifactSetKey } from \"../../Types/consts\"\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\"\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ sheets, sheets: { characterSheet, weaponSheet }, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { ICalculatedStats } from \"../Types/stats\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport StatIcon from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined, [statKey])\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\" //can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey) ?? invalid\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (build) {\r\n          if (statKey === \"finalHP\")\r\n            oldVal = build.characterHP\r\n          else if (statKey === \"finalDEF\")\r\n            oldVal = build.characterDEF\r\n          else if (statKey === \"finalATK\")\r\n            oldVal = build.characterATK + build.weaponATK\r\n        }\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIcon[statKey]} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\ntype StatInputInput = {\r\n  name: Displayable,\r\n  prependEle?: Displayable,\r\n  value: number,\r\n  placeholder: string,\r\n  defaultValue: number,\r\n  onValueChange: (newValue: number | undefined) => void,\r\n  percent?: boolean,\r\n  disabled?: boolean,\r\n  className?: any,\r\n}\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent = false, disabled = false, ...restProps }: StatInputInput) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport { ArtifactSheet } from \"../../Artifact/ArtifactSheet\";\r\nimport StatIcon, { uncoloredEleIcons } from \"../../Components/StatIcon\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat, { FormulaDisplay } from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements, ArtifactSetKey } from \"../../Types/consts\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { ICalculatedStats } from \"../../Types/stats\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport { getFormulaTargetsDisplayHeading } from \"../CharacterUtil\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >{uncoloredEleIcons.pyro} Pyro Infusion</span>,\r\n  \"cryo\": <span >{uncoloredEleIcons.cryo} Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = null, infusionAura }, build, characterDispatch, className }: ReactionToggleProps) {\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={v(!reactionMode)}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={v(reactionMode === \"pyro_vaporize\")}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) {StatIcon.hydro}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={v(reactionMode === \"pyro_melt\")}>\r\n      <span className=\"text-melt\">Melt(Pyro) {StatIcon.cryo}+{StatIcon.pyro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={v(reactionMode === \"hydro_vaporize\")}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) {StatIcon.pyro}+{StatIcon.hydro}</span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={v(reactionMode === \"cryo_melt\")}>\r\n      <span className=\"text-melt\">Melt(Cryo) {StatIcon.pyro}+{StatIcon.cryo}</span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  const v = s => s ? \"success\" : \"secondary\"\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={v(hitMode === \"avgHit\")}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={v(hitMode === \"hit\")}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={v(hitMode === \"critHit\")}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ sheets, build }: {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  },\r\n  build: ICalculatedStats\r\n}) {\r\n  const displayStatKeys = useMemo(() => build && Character.getDisplayStatKeys(build, sheets), [build, sheets])\r\n  if (!build) return null\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = getFormulaTargetsDisplayHeading(sectionKey, sheets, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys), [fieldKeys])\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const fieldFixed = Character.getTalentFieldValue(formulaField, \"fixed\", build) ?? 0\r\n  const fieldUnit = Character.getTalentFieldValue(formulaField, \"unit\", build) ?? \"\"\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.(fieldFixed)\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build, build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}{fieldUnit}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small><FormulaDisplay statKey={subKey} stats={build} modifiers={build.modifiers} expand={false} /></small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  sheets: {\r\n    characterSheet: CharacterSheet\r\n    weaponSheet: WeaponSheet,\r\n    artifactSheets: StrictDict<ArtifactSetKey, ArtifactSheet>\r\n  }\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ sheets, sheets: { characterSheet, weaponSheet }, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                        </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay sheets={sheets} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}