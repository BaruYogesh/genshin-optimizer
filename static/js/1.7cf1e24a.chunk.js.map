{"version":3,"sources":["Components/CustomFormControl.tsx","Types/artifact.ts","Artifact/Component/SlotNameWIthIcon.tsx","Components/CharacterSelection.tsx","Util/UIUtil.ts","Components/FieldDisplay.tsx","Artifact/ArtifactCard.tsx","Artifact/PercentBadge.tsx","Character/CharacterDisplay/CharacterArtifactPane.tsx","Components/DocumentDisplay.tsx","Character/CharacterDisplay/CharacterOverviewPane.tsx","Character/CharacterDisplay/CharacterTalentPane.tsx","Character/CharacterDisplayCard.tsx","Conditional/ConditionalSelector.tsx","Components/ConditionalDisplay.tsx","Artifact/Component/SetEffectDisplay.tsx","Character/CharacterDisplay/StatDisplayComponent.tsx","Components/StatDisplay.tsx","Character/StatInput.tsx","Character/CharacterDisplay/DamageOptionsAndCalculation.tsx"],"names":["CustomFormControl","value","onChange","disabled","float","placeholder","allowEmpty","useState","state","setstate","stateDirty","setstateDirty","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","aria-label","className","type","e","target","onBlur","onKeyDown","key","allMainStatKeys","allSubstats","SlotIcon","flower","faBahai","plume","faFeatherAlt","sands","faHourglass","goblet","faWineGlass","circlet","faCrown","artifactSlotIcon","slotKey","icon","SlotNameWithIcon","t","useTranslation","CharacterSelectionDropdownList","onSelect","CharacterDatabase","getCharacterKeyList","sort","a","b","map","characterKey","DropDownItem","characterSheet","usePromise","CharacterSheet","get","Item","onClick","name","valueString","unit","Math","round","toFixed","FieldDisplay","field","index","equippedBuild","newBuild","compareAgainstEquipped","useContext","compareAgainstEquippedContext","stats","canShow","useMemo","fixedVal","fixed","fieldVal","Character","getTalentFieldValue","formula","retVal","fieldEquippedVal","diff","fieldText","fieldVariant","formulaTextOverlay","fieldFormulaText","placement","overlay","id","faQuestionCircle","style","cursor","variant","allSubstatFilter","Set","ArtifactCard","artifactId","artifactObj","onEdit","onDelete","mainStatAssumptionLevel","effFilter","useForceUpdate","forceUpdateHook","ArtifactDatabase","registerArtListener","unregisterArtListener","sheet","ArtifactSheet","undefined","setKey","equipOnChar","charKey","Artifact","equipArtifactOnChar","editable","art","location","substats","rolls","substatsValidation","numStars","level","mainStatKey","lock","mainStatLevel","max","min","mainStatVal","mainStatValue","Stat","getStatUnit","getArtifactEfficiency","currentEfficiency","maximumEfficiency","artifactValid","locationName","border","bg","text","Header","xs","md","src","slotIcons","thumbnail","slotNames","Body","Title","stars","getStatName","stat","i","numRolls","length","efficiency","effOpacity","statName","opacity","has","valid","Footer","Toggle","size","Menu","Divider","setLocked","faLock","faLockOpen","faEdit","faTrashAlt","PercentBadge","floor","badgeColor","artLayoutSize","lg","CharacterArtifactPane","weaponSheet","character","characterDispatch","artifacts","history","useHistory","statKeys","getDisplayStatKeys","edit","artid","push","pathname","artToEditId","artifactSheets","getAll","equipArts","window","confirm","equippedArtifacts","equipArtifacts","unequipArts","Object","fromEntries","allSlotKeys","sKey","Card","StatDisplayComponent","statsDisplayKeys","Button","Boolean","Alert","Row","Col","entries","setEffects","setToSlots","setNumKeyArr","setNumKey","SetEffectDisplay","find","DocumentDisplay","sections","build","section","talentText","evalIfFunc","fields","ListGroup","conditional","ConditionalDisplay","CharacterOverviewPane","constellation","editLevel","setEditLevel","elementKey","characterEle","weaponTypeKey","getStatValueWithOverride","Img","cardImg","Image","Assets","elements","weaponTypes","star","colored","InputGroup","Prepend","Text","val","statKey","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","constellationName","Array","keys","getTalentOfKey","img","roundedCircle","WeaponStatsEditorCard","MainStatsCards","WeaponStatsCard","title","statsVals","statsToFields","WeaponStatsEditorCardWeaponDropdown","setStateWeapon","weaponSheets","WeaponSheet","DropdownButton","reverse","arr","Fragment","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","weapon","editing","SetEditing","showDescription","setShowDescription","conditionalValues","substatKey","Weapon","getWeaponSubstatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubstatVal","weaponPassiveName","passiveName","weaponBonusStats","conditionals","Conditional","document","faQuoteLeft","getLevelName","LevelNameData","refineIndex","StatInput","prependEle","faGavel","percent","onValueChange","defaultValue","StatIconEle","passiveDescription","atk","stateKey","fieldClassName","description","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","editStatKeys","otherStatKeys","allElements","forEach","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","hasOverride","StatDisplay","getStatNameRaw","xl","CharacterTalentPane","props","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","electro","cryo","fixedUnit","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","crystalize_hit","crystalizeEleToDisplay","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","geo","talentLimits","talentLevelKeys","header","talentLvlKey","talentLvlKeyRaw","levelBoost","newTalentLevelKey","talentStats","getTalentStats","statsEle","talentSheet","Subtitle","createContext","CustomMenu","React","forwardRef","ref","children","labeledBy","minWidth","aria-labelledby","Children","toArray","child","initialCharacter","hitMode","reactionMode","baseStatOverrides","WeaponLevelKeys","auto","skill","burst","infusionAura","buildSettings","characterReducer","action","CharacterDisplayCard","propCharacterKey","propCharacter","propSetCharacterKey","setCharacterKey","footer","propNewBuild","onClose","tabName","useReducer","setcompareAgainstEquipped","firstUpdate","useRef","char","current","update","possibleWeapons","weaponKey","ws1","ws2","talents","newCKey","deepClone","flexArts","calculateBuild","commonPaneProps","DamageOptionsAndCalculationEle","DamageOptionsAndCalculation","CharSelectDropdown","ButtonGroup","faTimes","Provider","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","fill","Link","eventKey","Content","Pane","HeaderIconDisplay","thumbImg","allCharacterKeys","CharDropdownItem","ElementalData","eleKey","getlevelTemplateName","getlevelKeys","lvlKey","getLevelString","ConditionalSelector","conditionalValue","setConditional","conditionalNum","conditionalStateKey","states","values","maxStack","badge","Badge","whiteSpace","condial","v","stack","faCheckSquare","faSquare","resolve","conditionalStats","conditionalFields","displayFields","condV","layeredAssignment","deletePropPath","objClearEmpties","setEffectText","setEffectTexts","setStats","setNumStats","setStatsFields","setEffectConditionals","ckey","cardbg","sectionKey","sectionValues","getDisplayHeading","JSON","stringify","DisplayStatDiff","label","oldVal","oldText","diffText","isArray","Formula","invalid","labelVariant","restProps","pointerEvents","infusionVals","InfusionAuraDropdown","isMelee","ReactionToggle","HitModeToggle","m","CalculationDisplay","fieldIndex","FormulaCalculationField","fieldKeys","subFormulaKeys","getPrintableFormulaStatKeyList","GetDependencies","modifiers","printStat","Collapse","subKey","printFormula","formulaField","fieldFormula","fieldFormulaDependency","fieldValue","ContextAwareToggle","callback","currentEventKey","AccordionContext","decoratedOnClick","useAccordionToggle","expanded","faWindowMinimize","faWindowMaximize","href","rel","immunityStatKey","elementImmunity"],"mappings":"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","file":"static/js/1.7cf1e24a.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nexport default function CustomFormControl({ value, onChange, disabled = false, float = false, placeholder, allowEmpty = false }) {\r\n  const [state, setstate] = useState(value ?? \"\")\r\n  const [stateDirty, setstateDirty] = useState({})\r\n  const sendChange = useCallback(\r\n    () => {\r\n      setstateDirty({})\r\n      if (allowEmpty && state === \"\") return onChange(null)\r\n      if (state === \"\") setstate(0)\r\n      const parseFunc = float ? parseFloat : parseInt\r\n      onChange(parseFunc(state) || 0)\r\n    },\r\n    [onChange, state, float, allowEmpty],\r\n  )\r\n  useEffect(() => setstate(value ?? \"\"), [value, setstate, stateDirty])//update value on value change\r\n\r\n  return <FormControl\r\n    value={state}\r\n    aria-label=\"custom-input\"\r\n    className=\"hide-appearance\"\r\n    type=\"number\"\r\n    placeholder={placeholder}\r\n    onChange={e => setstate(e.target.value)}\r\n    onBlur={sendChange}\r\n    disabled={disabled}\r\n    onKeyDown={e => e.key === \"Enter\" && sendChange()}\r\n  />\r\n}","import { ArtifactSetKey, CharacterKey, Rarity, SetNum, SlotKey } from \"./consts\";\r\nimport ICalculatedStats from \"./ICalculatedStats\";\r\nimport IConditional, { IConditionalComplex, IConditionals } from \"./IConditional\";\r\n\r\nexport type IArtifactSheets = StrictDict<ArtifactSetKey, IArtifactSheet>\r\n\r\nexport interface IArtifactSheet {\r\n  name: string,\r\n  rarity: readonly Rarity[],\r\n  pieces: Dict<SlotKey, string>,\r\n  icons: Dict<SlotKey, string>,\r\n  conditionals?: IConditionals,\r\n  setEffects: Dict<SetNum, SetEffectEntry>\r\n}\r\nexport interface SetEffectEntry {\r\n  text: (Displayable | ((stats: ICalculatedStats) => Displayable)),\r\n  stats?: StatDict | ((arg0: ICalculatedStats) => (StatDict | false))\r\n  conditional?: (IConditional | IConditionalComplex),\r\n  conditionals?: IConditionals,\r\n}\r\n\r\nexport type StatArr = { key: StatKey, value: number }[]\r\nexport type StatDict = Dict<StatKey, number>\r\n\r\nexport interface IArtifact {\r\n  id?: string,\r\n  setKey: ArtifactSetKey,\r\n  numStars: Rarity,\r\n  level: number,\r\n  slotKey: SlotKey,\r\n  mainStatKey: MainStatKey,\r\n  mainStatVal?: number,\r\n  substats: Substat[],\r\n  location: CharacterKey | \"\",\r\n\r\n  lock: boolean,\r\n}\r\n\r\nexport interface Substat {\r\n  key: SubstatKey | \"\",\r\n  value: number,\r\n\r\n  rolls?: number[],\r\n  efficiency?: number,\r\n}\r\nexport type StatKey = MainStatKey | SubstatKey | ReactionDMGStatKey | MoveDMGStatKey | ElementalRESStatKey | SpecializedStatKey\r\n\r\ntype ElementalRESStatKey = \"physical_res_\" | \"anemo_res_\" | \"geo_res_\" | \"electro_res_\" | \"hydro_res_\" | \"pyro_res_\" | \"cryo_res_\"\r\ntype ReactionDMGStatKey = \"overloaded_dmg_\" | \"shattered_dmg_\" | \"electrocharged_dmg_\" | \"superconduct_dmg_\" | \"swirl_dmg_\" | \"vaporize_dmg_\" | \"melt_dmg_\" | \"burning_dmg_\" | \"crystalize_dmg_\"\r\ntype MoveDMGStatKey = \"normal_dmg_\" | \"charged_dmg_\" | \"skill_dmg_\" | \"burst_dmg_\"\r\n\r\nexport const allMainStatKeys = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\", \"physical_dmg_\", \"anemo_dmg_\", \"geo_dmg_\", \"electro_dmg_\", \"hydro_dmg_\", \"pyro_dmg_\", \"cryo_dmg_\", \"heal_\"] as const\r\nexport const allSubstats = [\"hp\", \"hp_\", \"atk\", \"atk_\", \"def_\", \"def\", \"eleMas\", \"enerRech_\", \"critRate_\", \"critDMG_\",] as const\r\n\r\n// TODO: Check if these actually applies\r\ntype SpecializedStatKey = \"charged_critRate_\" | \"powShield_\" | \"incHeal_\"\r\n\r\nexport type MainStatKey = typeof allMainStatKeys[number]\r\nexport type CompressMainStatKey = \"hp\" | \"hp_\" | \"atk\" | \"atk_\" | \"def_\" | \"eleMas\" | \"enerRech_\" | \"critRate_\" | \"critDMG_\" | \"physical_dmg_\" | \"ele_dmg_\" | \"heal_\"\r\nexport type SubstatKey = typeof allSubstats[number]\r\n","import { faBahai, faCrown, faFeatherAlt, faHourglass, faWineGlass, IconDefinition } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { useTranslation } from \"react-i18next\"\r\nimport { SlotKey } from \"../../Types/consts\"\r\n\r\nconst SlotIcon: StrictDict<SlotKey, IconDefinition> = {\r\n  flower: faBahai,\r\n  plume: faFeatherAlt,\r\n  sands: faHourglass,\r\n  goblet: faWineGlass,\r\n  circlet: faCrown\r\n}\r\n\r\nexport function artifactSlotIcon(slotKey: SlotKey) {\r\n  return <FontAwesomeIcon icon={SlotIcon[slotKey]} key={slotKey} className=\"fa-fw\" />\r\n}\r\nexport default function SlotNameWithIcon({ slotKey }: { slotKey: SlotKey }) {\r\n  const { t } = useTranslation(\"artifact\")\r\n  const icon = artifactSlotIcon(slotKey)\r\n  return <span>{icon} {t(`slotName.${slotKey}`)}</span>\r\n}","import Dropdown from \"react-bootstrap/Dropdown\";\r\nimport CharacterSheet from \"../Character/CharacterSheet\";\r\nimport CharacterDatabase from \"../Database/CharacterDatabase\";\r\nimport { usePromise } from \"../Util/ReactUtil\";\r\n\r\nfunction CharacterSelectionDropdownList({ onSelect }) {\r\n  return <>{CharacterDatabase.getCharacterKeyList().sort(((a, b) => {\r\n    if (a < b) return -1;\r\n    if (a > b) return 1;\r\n    // names must be equal\r\n    return 0;\r\n  })).map(characterKey => <DropDownItem key={characterKey} characterKey={characterKey} onSelect={onSelect} />)}</>\r\n}\r\nfunction DropDownItem({ characterKey, onSelect }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => onSelect(characterKey)}>\r\n    {characterSheet.name}\r\n  </Dropdown.Item>\r\n}\r\nexport {\r\n  CharacterSelectionDropdownList,\r\n};\r\n\r\n","export function valueString(value: number, unit: string): string {\r\n  switch (unit) {\r\n    case \"%\": return (Math.round(value * 10) / 10).toFixed(1)\r\n    case \"eff\": return value.toFixed(2) + \"%\"\r\n    default: return Math.round(value).toFixed(0)\r\n  }\r\n}","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useContext, useMemo } from 'react';\r\nimport { ListGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport Character from \"../Character/Character\";\r\nimport { compareAgainstEquippedContext } from \"../Character/CharacterDisplayCard\";\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\";\r\n\r\nexport default function FieldDisplay({ field, index, equippedBuild, newBuild, className = \"p-2\" }: { field: IFieldDisplay, index: number, equippedBuild?: ICalculatedStats, newBuild?: ICalculatedStats, className?: string }) {\r\n  const compareAgainstEquipped = useContext(compareAgainstEquippedContext)\r\n  const stats = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  const canShow = useMemo(() => field?.canShow?.(stats), [field, stats])\r\n  const fixedVal = field?.fixed || 0\r\n  const fieldVal = useMemo(() => {\r\n    if (field.value) return Character.getTalentFieldValue(field, \"value\", stats)\r\n    else if (field.formula) {\r\n      let retVal = Character.getTalentFieldValue(field, \"formula\", stats)?.[0]?.(stats)\r\n      //compareAgainstEquipped\r\n      if (compareAgainstEquipped && equippedBuild && typeof retVal === \"number\") {\r\n        let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild)?.[0]?.(equippedBuild)\r\n        if (typeof fieldEquippedVal === \"function\")\r\n          fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild)?.toFixed?.(fixedVal))\r\n        let diff = retVal - fieldEquippedVal\r\n        retVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n      }\r\n      return retVal\r\n    }\r\n  }, [compareAgainstEquipped, fixedVal, equippedBuild, field, stats])\r\n\r\n  const fieldText = useMemo(() => Character.getTalentFieldValue(field, \"text\", stats), [field, stats])\r\n  const fieldVariant = useMemo(() => Character.getTalentFieldValue(field, \"variant\", stats), [field, stats])\r\n\r\n  const formulaTextOverlay = useMemo(() => {\r\n    const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", stats)\r\n    return fieldFormulaText ? <OverlayTrigger\r\n      placement=\"top\"\r\n      overlay={<Tooltip id=\"field-formula\">{fieldFormulaText}</Tooltip>}\r\n    >\r\n      <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n    </OverlayTrigger> : null\r\n  }, [field, stats])\r\n\r\n  const unit = useMemo(() => Character.getTalentFieldValue(field, \"unit\", stats), [field, stats])\r\n\r\n  if (!canShow) return null\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className={className}>\r\n    <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n    <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n  </ListGroup.Item>\r\n}\r\n","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport CharacterSheet from '../Character/CharacterSheet';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { allSubstats, IArtifact, Substat, SubstatKey } from '../Types/artifact';\r\nimport { useForceUpdate, usePromise } from '../Util/ReactUtil';\r\nimport { valueString } from '../Util/UIUtil';\r\nimport Artifact from './Artifact';\r\nimport { ArtifactSheet } from './ArtifactSheet';\r\nimport SlotNameWithIcon from './Component/SlotNameWIthIcon';\r\nimport PercentBadge from './PercentBadge';\r\n\r\ntype Data = { artifactId?: string, artifactObj?: IArtifact, onEdit?: () => void, onDelete?: () => void, mainStatAssumptionLevel?: number, effFilter?: Set<SubstatKey> }\r\nconst allSubstatFilter = new Set(allSubstats)\r\n\r\nexport default function ArtifactCard({ artifactId, artifactObj, onEdit, onDelete, mainStatAssumptionLevel = 0, effFilter = allSubstatFilter }: Data): JSX.Element | null {\r\n  const [, forceUpdateHook] = useForceUpdate()\r\n  useEffect(() => {\r\n    artifactId && ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => { artifactId && ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook) }\r\n  }, [artifactId, forceUpdateHook])\r\n  const sheet = usePromise(ArtifactSheet.get((artifactObj ?? (artifactId ? ArtifactDatabase.get(artifactId) : undefined))?.setKey))\r\n  const equipOnChar = (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey)\r\n\r\n  const editable = !artifactObj // dont allow edit for flex artifacts\r\n  const art = artifactObj ?? ArtifactDatabase.get(artifactId);\r\n  const characterSheet = usePromise(CharacterSheet.get(art?.location ?? \"\"))\r\n  if (!art) return null\r\n  if (art.substats[0].rolls === undefined) Artifact.substatsValidation(art)\r\n\r\n  const { id, slotKey, numStars, level, mainStatKey, substats, lock } = art\r\n  const mainStatLevel = Math.max(Math.min(mainStatAssumptionLevel, numStars * 4), level)\r\n  const mainStatVal = <span className={mainStatLevel !== level ? \"text-orange\" : \"\"}>{Artifact.mainStatValue(mainStatKey, numStars, mainStatLevel) ?? \"\"}{Stat.getStatUnit(mainStatKey)}</span>\r\n  const { currentEfficiency, maximumEfficiency } = Artifact.getArtifactEfficiency(art, effFilter)\r\n  const artifactValid = maximumEfficiency !== 0\r\n  const locationName = characterSheet?.name ?? \"Inventory\"\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={sheet?.slotIcons[slotKey] ?? \"\"} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{sheet?.slotNames[slotKey] ?? \"Unknown Piece Name\"}</b></h6>\r\n          <div><SlotNameWithIcon slotKey={slotKey} />{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{sheet?.name ?? \"Artifact Set\"}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat: Substat, i) => {\r\n          if (!stat.value) return null\r\n          let numRolls = stat.rolls?.length ?? 0\r\n          let efficiency = stat.efficiency ?? 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${valueString(stat.value, Stat.getStatUnit(stat.key))}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{stat.key && effFilter.has(stat.key) ? valueString(efficiency, \"eff\") : \"-\"}</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge value={currentEfficiency} valid={artifactValid} {...{ className: \"float-right\" }} /></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge value={maximumEfficiency} valid={artifactValid} /></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{locationName}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={equipOnChar} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{locationName}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip id=\"lock-artifact-tip\">Locking a artifact will prevent the build generator from picking it for builds.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\" onClick={() => ArtifactDatabase.setLocked(id, !lock)}>\r\n                  <FontAwesomeIcon icon={lock ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {!!onEdit && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {!!onDelete && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge({ value, valid }: Data) {\r\n  let [badgeColor, text] = typeof value === 'number' ?\r\n    [`${Math.floor(value * 0.05) + 1}roll`, value.toFixed(2) + \"%\"] : [\"secondary\", value]\r\n  if (!valid) badgeColor = \"danger\"\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{text}</Badge>\r\n}\r\n\r\ntype Data = {\r\n  valid: boolean,\r\n  value: number | string,\r\n}\r\n","import { useCallback, useMemo } from 'react';\r\nimport { Alert, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport { ArtifactSheet } from '../../Artifact/ArtifactSheet';\r\nimport SetEffectDisplay from '../../Artifact/Component/SetEffectDisplay';\r\nimport { ICharacter } from '../../Types/character';\r\nimport { allSlotKeys, SlotKey } from '../../Types/consts';\r\nimport ICalculatedStats from '../../Types/ICalculatedStats';\r\nimport { usePromise } from '../../Util/ReactUtil';\r\nimport WeaponSheet from '../../Weapon/WeaponSheet';\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from '../CharacterSheet';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\nconst artLayoutSize = { xs: 12, md: 6, lg: 4 }\r\n\r\ntype CharacterArtifactPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  artifacts?: any[]\r\n}\r\nfunction CharacterArtifactPane({ characterSheet, weaponSheet, character, character: { characterKey }, equippedBuild, newBuild, editable, characterDispatch, artifacts }: CharacterArtifactPaneProps) {\r\n  const history = useHistory()\r\n  //choose which one to display stats for\r\n  const stats = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  const mainStatAssumptionLevel = stats?.mainStatAssumptionLevel ?? 0\r\n  const statKeys = useMemo(() => Character.getDisplayStatKeys(stats, characterSheet), [stats, characterSheet])\r\n  const edit = useCallback(\r\n    artid => history.push({\r\n      pathname: \"/artifact\",\r\n      artToEditId: artid\r\n    } as any), [history])\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const equipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to equip this artifact build to this character?\")) return\r\n    if (!newBuild) return\r\n    newBuild.equippedArtifacts && Character.equipArtifacts(characterKey, newBuild.equippedArtifacts)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, newBuild, characterDispatch])\r\n\r\n  const unequipArts = useCallback(() => {\r\n    if (!window.confirm(\"Do you want to move all the artifacts equipped to inventory?\")) return\r\n    Character.equipArtifacts(characterKey, Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])) as StrictDict<SlotKey, string>)\r\n    characterDispatch?.({ type: \"fromDB\" })\r\n  }, [characterKey, characterDispatch])\r\n  return <>\r\n    <Card className=\"h-100 mb-2\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n      <Card.Body>\r\n        <StatDisplayComponent {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n      </Card.Body>\r\n      <Card.Footer>\r\n        {newBuild ? <Button onClick={equipArts}>Equip all artifacts to current character</Button> : (editable && <Button onClick={unequipArts}>Unequip all artifacts</Button>)}\r\n        {Boolean(mainStatAssumptionLevel) && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert>}\r\n      </Card.Footer>\r\n    </Card>\r\n    <Row className=\"mb-n2\">\r\n      <Col {...artLayoutSize} className=\"d-flex flex-column\">\r\n        {artifactSheets && Object.entries(ArtifactSheet.setEffects(artifactSheets, stats.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n          <Card key={setKey} className=\"mb-2 flex-grow-1\" bg=\"lightcontent\" text={\"lightfont\" as any}>\r\n            <Card.Header>{artifactSheets?.[setKey].name ?? \"\"}</Card.Header>\r\n            <Card.Body className=\"p-2 mb-n2\">\r\n              {(setNumKeyArr as any).map(setNumKey => <SetEffectDisplay key={setKey + setNumKey} {...{ setKey, setNumKey, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n            </Card.Body>\r\n          </Card>\r\n        )}\r\n      </Col>\r\n      {artifacts ?\r\n        allSlotKeys.map(slotKey => {//from flex\r\n          const art = artifacts.find(art => art.slotKey === slotKey)\r\n          return Boolean(art) && <Col {...artLayoutSize} key={slotKey} className=\"mb-2\">\r\n            <ArtifactCard artifactObj={art} />\r\n          </Col>\r\n        }) : allSlotKeys.map(slotKey =>\r\n          Boolean(stats?.equippedArtifacts?.[slotKey]) && <Col {...artLayoutSize} key={stats?.equippedArtifacts?.[slotKey]} className=\"mb-2\">\r\n            <ArtifactCard artifactId={stats?.equippedArtifacts?.[slotKey]} mainStatAssumptionLevel={mainStatAssumptionLevel} onEdit={() => edit(stats?.equippedArtifacts?.[slotKey])} />\r\n          </Col>\r\n        )}\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"./ConditionalDisplay\"\r\nimport { DocumentSection } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { evalIfFunc } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\n\r\ntype SkillDisplayCardProps = {\r\n  sections: DocumentSection[],\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n}\r\nexport default function DocumentDisplay({ sections, characterDispatch, equippedBuild, newBuild, editable }: SkillDisplayCardProps) {\r\n  const build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  return <div>{sections?.map((section, i) => {\r\n    if (!section.canShow!(build)) return null\r\n    const talentText = evalIfFunc(section.text, build)\r\n    const fields = section.fields ?? []\r\n    return <div className=\"my-2\" key={\"section\" + i}>\r\n      <div {...{ xs: 12 }}>\r\n        <div className=\"mb-2\">{talentText}</div>\r\n        {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n          {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n        </ListGroup>}\r\n      </div>\r\n      {!!section.conditional && <ConditionalDisplay {...{ conditional: section.conditional, equippedBuild, newBuild, characterDispatch, editable }} />}\r\n    </div>\r\n  })}</div>\r\n}\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport Conditional from \"../../Conditional/Conditional\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport { allElements } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport { IConditionals } from \"../../Types/IConditional\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport StatInput from \"../StatInput\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\ntype CharacterOverviewPaneProps = {\r\n  characterSheet: CharacterSheet;\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean;\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterOverviewPane({ characterSheet, weaponSheet, editable, character, character: { constellation }, characterDispatch, equippedBuild, newBuild }: CharacterOverviewPaneProps) {\r\n  const [editLevel, setEditLevel] = useState(false)\r\n  const build = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n  const elementKey = build.characterEle\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const level = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n        <Card.Img src={characterSheet.cardImg} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{characterSheet.name} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={characterSheet.star} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl placeholder={undefined} onChange={val => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: clamp(val, 1, 90), characterSheet, weaponSheet })} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"characterLevel\", value: Character.getLevel(character.levelKey), characterSheet, weaponSheet })} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip id=\"artifact-override-level\">Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"success\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{characterSheet.constellationName}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={characterSheet.getTalentOfKey(`constellation${i + 1}`, build.characterEle)?.img} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n      <MainStatsCards {...{ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }} />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nfunction WeaponStatsCard({ title, statsVals = {}, stats }: { title: Displayable, statsVals?: object, stats: ICalculatedStats }) {\r\n  if ((Object.keys(statsVals ?? {}) as any).length === 0) return null\r\n  const fields = statsToFields(statsVals, stats)\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {fields.map((field, i) => <FieldDisplay newBuild={undefined} key={i} index={i} {...{ field, equippedBuild: stats, className: \"px-3 py-2\" }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}\r\n\r\n\r\nfunction WeaponStatsEditorCardWeaponDropdown({ weaponSheet, weaponTypeKey, setStateWeapon }: { weaponSheet: WeaponSheet, weaponTypeKey: string, setStateWeapon: (key: any, value: any) => void }) {\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  if (!weaponSheets) return null\r\n\r\n  return <DropdownButton title={weaponSheet.name}>\r\n    {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n      <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n      {Object.entries(WeaponSheet.getWeaponsOfType(weaponSheets, weaponTypeKey)).filter(([, weaponObj]: any) => weaponObj.rarity === star).map(([key, weaponObj]: any) =>\r\n        <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n          {weaponObj.name}\r\n        </Dropdown.Item>\r\n      )}\r\n      {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n    </React.Fragment>)}\r\n  </DropdownButton>\r\n}\r\n\r\ntype WeaponStatsEditorCardProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  editable: boolean\r\n  character: ICharacter\r\n  characterDispatch: (any) => void\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction WeaponStatsEditorCard({ characterSheet, weaponSheet, editable, character, character: { weapon }, characterDispatch, equippedBuild, newBuild }: WeaponStatsEditorCardProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [showDescription, setShowDescription] = useState(false)\r\n  //choose which one to display stats for\r\n  const build = (newBuild ? newBuild : equippedBuild) as ICalculatedStats\r\n\r\n  const setStateWeapon = (key, value) => {\r\n    if (key === \"key\") {\r\n      if (value === weapon.key) return\r\n      else {\r\n        //reset the conditionalNum when we switch weapons\r\n        const { conditionalValues } = character\r\n        delete conditionalValues.weapon\r\n        characterDispatch({ conditionalValues })\r\n      }\r\n    }\r\n    character.weapon[key] = value\r\n    characterDispatch({ weapon: character.weapon })\r\n  }\r\n  const substatKey = Weapon.getWeaponSubstatKey(weaponSheet)\r\n  const weaponTypeKey = characterSheet.weaponTypeKey\r\n  const weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)\r\n  const weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)\r\n  const weaponPassiveName = weaponSheet.passiveName\r\n  const weaponBonusStats = weaponSheet.stats(build)\r\n  const conditionals = Conditional.conditionals.weapon[weapon.key] as IConditionals\r\n  const document = weaponSheet.document\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body >\r\n      <Row className=\"mb-n2\">\r\n        <Col xs={12} md={3} lg={4}>\r\n          <Image src={weaponSheet.img} className={`w-100 h-auto grad-${weaponSheet.rarity}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <WeaponStatsEditorCardWeaponDropdown weaponSheet={weaponSheet} weaponTypeKey={weaponTypeKey} setStateWeapon={setStateWeapon} />\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).reverse().map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {substatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                prependEle={undefined}\r\n                disabled={undefined}\r\n                name={<span><span className=\"mr-2\">{StatIconEle(substatKey)}</span>{Stat.getStatName(substatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(substatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubstatVal(weaponSheet, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <h5 className=\"mb-0\">{weaponSheet.name} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n            <div className=\"mb-2\"><Stars stars={weaponSheet.rarity} /></div>\r\n            <h6>{weaponPassiveName}</h6>\r\n            <div className=\"mb-2\">{weaponPassiveName && weaponSheet.passiveDescription(build)}</div>\r\n            <WeaponStatsCard title={\"Main Stats\"} statsVals={{ atk: weaponDisplayMainVal, [substatKey]: weaponDisplaySubVal }} stats={build} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} statsVals={weaponBonusStats} stats={build} />\r\n            {/* TODO: remove conditionals display here in lieu of document once sheets are converted*/}\r\n            {Boolean(conditionals) && Object.entries(conditionals).map(([stateKey, conditional]) =>\r\n              <ConditionalDisplay key={stateKey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} fieldClassName=\"py-2 px-3\" />)}\r\n\r\n            {document ? <DocumentDisplay {...{ sections: document, equippedBuild, newBuild, characterDispatch, editable }} /> : null}\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <small>{weaponSheet.description}</small>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\ntype MainStatsCardsProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet,\r\n  editable: boolean,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats\r\n}\r\nfunction MainStatsCards({ characterSheet, weaponSheet, editable, character, characterDispatch, equippedBuild, newBuild }: MainStatsCardsProps) {\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys: any[] = [];\r\n\r\n  [\"physical\", ...allElements].forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: key, characterSheet, weaponSheet })} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"specializedStatVal\")}\r\n                  onChange={value => characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value, characterSheet, weaponSheet })} />\r\n                <InputGroup.Append>\r\n                  {isPercentSpecialStatSelect && <InputGroup.Text>%</InputGroup.Text>}\r\n                  <Button onClick={() => {\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatKey\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatKey\"), characterSheet, weaponSheet })\r\n                    characterDispatch({ type: \"statOverride\", statKey: \"specializedStatVal\", value: Character.getBaseStatValue(character, characterSheet, weaponSheet, \"specializedStatVal\"), characterSheet, weaponSheet })\r\n                  }}\r\n                    disabled={!Character.hasOverride(character, \"specializedStatKey\") && !Character.hasOverride(character, \"specializedStatVal\")}\r\n                  >\r\n                    <FontAwesomeIcon icon={faUndo} />\r\n                  </Button>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined}\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  prependEle={undefined}\r\n                  disabled={undefined\r\n                  }\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                  defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { useState } from 'react';\r\nimport { Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport DocumentDisplay from \"../../Components/DocumentDisplay\";\r\nimport FieldDisplay from \"../../Components/FieldDisplay\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport statsToFields from \"../../Util/FieldUtil\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\ntype CharacterTalentPaneProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  editable: boolean,\r\n  characterDispatch: (any) => void,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n}\r\nexport default function CharacterTalentPane(props: CharacterTalentPaneProps) {\r\n  const { characterSheet, character: { levelKey, constellation }, editable, characterDispatch, newBuild, equippedBuild } = props\r\n  const ascension = Character.getAscension(levelKey)\r\n  const skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n  const passivesList: Array<[tKey: string, tText: string, asc: number]> = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n  const skillDisplayProps = { ...props, ascension }\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <>\r\n    <Row><Col><ReactionDisplay {...{ characterSheet, newBuild, equippedBuild }} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {!!characterSheet.getTalentOfKey(\"sprint\", build?.characterEle) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        if (!characterSheet.getTalentOfKey(tKey, build?.characterEle)) return null\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={() => editable && characterDispatch({ constellation: (i + 1) === constellation ? i : i + 1 })}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ characterSheet, newBuild, equippedBuild }: { characterSheet: CharacterSheet, newBuild?: ICalculatedStats, equippedBuild?: ICalculatedStats }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  if (!build) return null\r\n  const charEleKey = build.characterEle\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && characterSheet.weaponTypeKey === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip id=\"shatter-tooltip\">Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nconst crystalizeEleToDisplay = {\r\n  \"default\": <span className=\"text-crystalize\">{Stat.getStatName(\"crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_crystalize_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_crystalize_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_crystalize_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_crystalize_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /></span>\r\n} as const\r\nfunction CrystalizeCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(crystalizeEleToDisplay)[0])\r\n  const sKey = ele === \"default\" ? \"crystalize_hit\" : `${ele}_crystalize_hit`\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any}><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={crystalizeEleToDisplay[ele]} className=\"d-inline-block\" variant=\"success\">\r\n      {Object.entries(crystalizeEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\ntype SkillDisplayCardProps = {\r\n  characterSheet: CharacterSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  talentKey: string,\r\n  subtitle: string,\r\n  ascension: number,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  onClickTitle?: (any) => any\r\n}\r\nfunction SkillDisplayCard({ characterSheet, character: { elementKey, talentLevelKeys, }, characterDispatch, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, onClickTitle }: SkillDisplayCardProps) {\r\n  let build = newBuild ? newBuild : equippedBuild as ICalculatedStats //assumes at least one of them is not undefined\r\n  let header: Displayable | null = null\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost: number = build[`${talentKey}Boost`] ?? 0\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => {\r\n        talentLevelKeys[tKey] = newTalentLevelKey\r\n        characterDispatch({ talentLevelKeys })\r\n      }\r\n      header = <Card.Header>\r\n        <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n          {[...Array(talentLimits[ascension] + (talentKey === \"auto\" && !levelBoost ? 1 : 0)).keys()].map(i => //spcial consideration for Tartaglia\r\n            <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n        </DropdownButton>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>{`Talent Level: ${talentLvlKey + 1}`}</Card.Header>\r\n    }\r\n  }\r\n  const talentStats = characterSheet.getTalentStats(talentKey, build)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  const talentSheet = characterSheet.getTalentOfKey(talentKey, build.characterEle)\r\n  const sections = talentSheet?.sections\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"h-100\">\r\n    {header}\r\n    <Card.Body className=\"mb-n2\">\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={talentSheet?.img} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{talentSheet?.name}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {/* Display document sections */}\r\n      {sections ? <DocumentDisplay {...{ sections, characterDispatch, equippedBuild, newBuild, editable }} /> : null}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { createContext, useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react';\r\nimport { Alert, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { ArtifactSheet } from '../Artifact/ArtifactSheet';\r\nimport ElementalData from '../Data/ElementalData';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport { ICharacter } from '../Types/character';\r\nimport { allCharacterKeys, allSlotKeys } from '../Types/consts';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport { usePromise } from '../Util/ReactUtil';\r\nimport { deepClone } from '../Util/Util';\r\nimport WeaponSheet from '../Weapon/WeaponSheet';\r\nimport Character from './Character';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\nimport DamageOptionsAndCalculation from './CharacterDisplay/DamageOptionsAndCalculation';\r\nimport CharacterSheet from './CharacterSheet';\r\n\r\nexport const compareAgainstEquippedContext = createContext(undefined)\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }: any, ref: any) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" } as any}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\nconst initialCharacter = (characterKey): ICharacter => ({\r\n  characterKey: characterKey ?? \"\",//the game character this is based off\r\n  levelKey: \"L1\",//combination of level and ascension\r\n  hitMode: \"avgHit\",\r\n  reactionMode: null,\r\n  equippedArtifacts: Object.fromEntries(allSlotKeys.map(sKey => [sKey, \"\"])),\r\n  conditionalValues: {},\r\n  baseStatOverrides: {},//overriding the baseStat\r\n  weapon: {\r\n    key: \"\",\r\n    levelKey: WeaponLevelKeys[0],\r\n    refineIndex: 0,\r\n    overrideMainVal: 0,\r\n    overrideSubVal: 0,\r\n  },\r\n  talentLevelKeys: {\r\n    auto: 0,\r\n    skill: 0,\r\n    burst: 0,\r\n  },\r\n  infusionAura: \"\",\r\n  constellation: 0,\r\n  buildSettings: {}//use to reset when changing to a new character, so it would not copy from old character.\r\n})\r\n\r\ntype characterReducerOverwrite = {\r\n  type: \"overwrite\",\r\n  character: ICharacter\r\n}\r\ntype characterReducerFromDB = {\r\n  type: \"fromDB\",\r\n}\r\ntype characterReducerStatOverride = {\r\n  type: \"statOverride\",\r\n  statKey: string\r\n  value: number | string\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n}\r\ntype characterReducerOverwriteAction = characterReducerOverwrite | characterReducerFromDB | characterReducerStatOverride | Partial<ICharacter>\r\n\r\nfunction characterReducer(state: ICharacter, action: characterReducerOverwriteAction) {\r\n  if (\"type\" in action) switch (action?.type) {\r\n    case \"overwrite\":\r\n      return { ...state, ...action.character }\r\n    case \"fromDB\"://for equipping artifacts, that makes the changes in DB instead of in state.\r\n      return { ...state, ...CharacterDatabase.get(state.characterKey) ?? {} }\r\n    case \"statOverride\": {\r\n      const { statKey, value, characterSheet, weaponSheet, } = action\r\n      const baseStatOverrides = state.baseStatOverrides\r\n      const baseStatVal = Character.getBaseStatValue(state, characterSheet, weaponSheet, statKey)\r\n      if (baseStatVal === value)\r\n        delete baseStatOverrides[statKey]\r\n      else\r\n        baseStatOverrides[statKey] = value\r\n      return { ...state, baseStatOverrides }\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return { ...state, ...action }\r\n}\r\ntype CharacterDisplayCardProps = {\r\n  characterKey?: string,\r\n  character?: ICharacter,\r\n  setCharacterKey?: (any) => void\r\n  footer?: JSX.Element\r\n  newBuild?: ICalculatedStats,\r\n  editable?: boolean,\r\n  onClose?: (any) => void,\r\n  tabName?: string\r\n}\r\nexport default function CharacterDisplayCard({ characterKey: propCharacterKey, character: propCharacter, setCharacterKey: propSetCharacterKey, footer, newBuild: propNewBuild, editable = false, onClose, tabName }: CharacterDisplayCardProps) {\r\n  const [character, characterDispatch] = useReducer(characterReducer, initialCharacter(propCharacterKey))\r\n  const [compareAgainstEquipped, setcompareAgainstEquipped] = useState(false)\r\n  const firstUpdate = useRef(true)\r\n  useEffect(() => {\r\n    if (!propCharacterKey) return\r\n    const char = { ...initialCharacter(propCharacterKey), ...CharacterDatabase.get(propCharacterKey) ?? {} }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacterKey])\r\n  useEffect(() => {\r\n    if (!propCharacter) return\r\n    const char = { ...initialCharacter(propCharacter.characterKey), ...propCharacter }\r\n    characterDispatch({ type: \"overwrite\", character: char })\r\n  }, [propCharacter])\r\n\r\n  useEffect(() => {\r\n    //skip saving on the first update, since those updates are from loading from DB\r\n    if (firstUpdate.current) {\r\n      firstUpdate.current = false\r\n      return\r\n    }\r\n    //save character to DB\r\n    editable && CharacterDatabase.update(character)\r\n  }, [character, editable])\r\n\r\n  const characterKey = propCharacter?.characterKey ?? character.characterKey\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  const weaponSheets = usePromise(WeaponSheet.getAll())\r\n  useEffect(() => {\r\n    if (weaponSheets && characterSheet && !character.weapon.key) {\r\n      const possibleWeapons = WeaponSheet.getWeaponsOfType(weaponSheets, characterSheet.weaponTypeKey)\r\n      //sort the weapons to get the lowest rarity weapon.\r\n      const [weaponKey] = Object.entries(possibleWeapons).sort(([k1, ws1], [k2, ws2]) => ws1.rarity - ws2.rarity)[0]\r\n      character.weapon.key = weaponKey\r\n      characterDispatch({ weapon: character.weapon })\r\n    }\r\n  }, [characterSheet, weaponSheets, character.weapon])\r\n  useEffect(() => {//check for default value for traveler\r\n    if (characterSheet && \"talents\" in characterSheet.sheet && !character.elementKey)\r\n      characterDispatch({ elementKey: Object.keys(characterSheet.sheet.talents)[0] })\r\n  }, [character.elementKey, characterSheet])\r\n  const weaponSheet = usePromise(WeaponSheet.get(character.weapon.key))\r\n  const artifactSheets = usePromise(ArtifactSheet.getAll())\r\n\r\n  const setCharacterKey = useCallback(\r\n    newCKey => {\r\n      let state = initialCharacter(newCKey)\r\n      const char = CharacterDatabase.get(newCKey)\r\n      if (char) state = { ...state, ...char }\r\n      characterDispatch({ type: \"overwrite\", character: state })\r\n      if (newCKey !== characterKey)\r\n        propSetCharacterKey?.(newCKey)\r\n    }, [characterKey, characterDispatch, propSetCharacterKey])\r\n\r\n  const newBuild = useMemo(() => {\r\n    if (!propNewBuild) return\r\n    const newBuild = propNewBuild && deepClone(propNewBuild);\r\n    newBuild.hitMode = character.hitMode;\r\n    newBuild.reactionMode = character.reactionMode;\r\n    return newBuild\r\n  }, [propNewBuild, character.hitMode, character.reactionMode])\r\n\r\n  const { levelKey, artifacts: flexArts } = character\r\n\r\n  const mainStatAssumptionLevel = newBuild?.mainStatAssumptionLevel ?? 0\r\n  const equippedBuild = useMemo(() => characterSheet && weaponSheet && artifactSheets && Character.calculateBuild(character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel), [character, characterSheet, weaponSheet, artifactSheets, mainStatAssumptionLevel])\r\n\r\n  const commonPaneProps = { character, newBuild, equippedBuild: (!newBuild || compareAgainstEquipped) ? equippedBuild : undefined, editable, characterDispatch, compareAgainstEquipped }\r\n  if (flexArts) (commonPaneProps as any).artifacts = flexArts//from flex\r\n  // main CharacterDisplayCard\r\n  const DamageOptionsAndCalculationEle = characterSheet && weaponSheet && <DamageOptionsAndCalculation {...{ characterSheet, weaponSheet, character, characterDispatch, newBuild, equippedBuild }} className=\"mb-2\" />\r\n  return (<Card bg=\"darkcontent\" text={\"lightfont\" as any} >\r\n    <Card.Header>\r\n      <Row>\r\n        <Col xs={\"auto\"} className=\"mr-auto\">\r\n          {/* character selecter/display */}\r\n          <CharSelectDropdown characterSheet={characterSheet} character={character} weaponSheet={weaponSheet} editable={editable} levelKey={levelKey} characterDispatch={characterDispatch} setCharacterKey={setCharacterKey} />\r\n        </Col>\r\n        {Boolean(mainStatAssumptionLevel) && <Col xs=\"auto\"><Alert className=\"mb-0 py-1 h-100\" variant=\"orange\" ><b>Assume Main Stats are Level {mainStatAssumptionLevel}</b></Alert></Col>}\r\n        {/* Compare against new build toggle */}\r\n        {newBuild ? <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(false)}>\r\n              <small>Show New artifact Stats</small>\r\n            </Button>\r\n            <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => setcompareAgainstEquipped(true)}>\r\n              <small>Compare against equipped artifacts</small>\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Col> : null}\r\n        {Boolean(onClose) && <Col xs=\"auto\" >\r\n          <Button variant=\"danger\" onClick={onClose}>\r\n            <FontAwesomeIcon icon={faTimes} /></Button>\r\n        </Col>}\r\n      </Row>\r\n    </Card.Header>\r\n    {characterKey && characterSheet && weaponSheet && <Card.Body>\r\n      <compareAgainstEquippedContext.Provider value={compareAgainstEquipped as any}>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 mx-0\" fill>\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\"><h5 className=\"mb-0\">Character</h5></Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\"><h5 className=\"mb-0\">New Artifacts</h5></Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\"><h5 className=\"mb-0\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</h5></Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"talent\"><h5 className=\"mb-0\">Talents</h5></Nav.Link>\r\n            </Nav.Item>\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterOverviewPane characterSheet={characterSheet} weaponSheet={weaponSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterArtifactPane characterSheet={characterSheet} weaponSheet={weaponSheet} artifacts={undefined} {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              {DamageOptionsAndCalculationEle}\r\n              <CharacterTalentPane characterSheet={characterSheet} {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </compareAgainstEquippedContext.Provider>\r\n    </Card.Body>}\r\n    {footer && <Card.Footer>\r\n      {footer}\r\n    </Card.Footer>}\r\n  </Card>)\r\n}\r\ntype CharSelectDropdownProps = {\r\n  characterSheet?: CharacterSheet,\r\n  weaponSheet?: WeaponSheet,\r\n  character: ICharacter\r\n  editable: boolean\r\n  levelKey: string\r\n  characterDispatch: (any) => void\r\n  setCharacterKey: (any) => void\r\n}\r\nfunction CharSelectDropdown({ characterSheet, weaponSheet, character, character: { elementKey = \"anemo\" }, editable, levelKey, characterDispatch, setCharacterKey }: CharSelectDropdownProps) {\r\n  const HeaderIconDisplay = characterSheet ? <span >\r\n    <Image src={characterSheet.thumbImg} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n    <h6 className=\"d-inline\"> {characterSheet.name} </h6>\r\n  </span> : <span>Select a Character</span>\r\n  return <>{editable ? <ButtonGroup>\r\n    <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle as={Button}>\r\n        {HeaderIconDisplay}\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu as={CustomMenu}>\r\n        {[...new Set(allCharacterKeys)].sort().map(charKey => <CharDropdownItem key={charKey} characterKey={charKey} setCharacterKey={setCharacterKey} />)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n    {characterSheet?.sheet && \"talents\" in characterSheet?.sheet && <Dropdown as={ButtonGroup}>\r\n      <Dropdown.Toggle as={Button} className={`text-${elementKey}`}>\r\n        <strong>{ElementalData[elementKey].name}</strong>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu >\r\n        {Object.keys(characterSheet.sheet.talents).map(eleKey =>\r\n          <Dropdown.Item key={eleKey} className={`text-${eleKey}`} onClick={() => characterDispatch({ elementKey: eleKey })}><strong>{ElementalData[eleKey].name}</strong></Dropdown.Item>)}\r\n      </Dropdown.Menu>\r\n    </Dropdown>}\r\n    <DropdownButton as={ButtonGroup} disabled={!characterSheet} title={\r\n      <h6 className=\"d-inline\">Stats Template: {Character.getlevelTemplateName(levelKey)} </h6>\r\n    }>\r\n      <Dropdown.ItemText>\r\n        <span>Select Base Stat Template</span>\r\n      </Dropdown.ItemText>\r\n      {Character.getlevelKeys().reverse().map(lvlKey =>\r\n        <Dropdown.Item key={lvlKey} onClick={() => characterDispatch({ levelKey: lvlKey })}>\r\n          <h6 >{Character.getlevelTemplateName(lvlKey)} </h6>\r\n        </Dropdown.Item>)}\r\n    </DropdownButton>\r\n  </ButtonGroup> : <span>{HeaderIconDisplay} {characterSheet && weaponSheet && Character.getLevelString(character, characterSheet, weaponSheet)}</span>}</>\r\n}\r\nfunction CharDropdownItem({ characterKey, setCharacterKey }) {\r\n  const characterSheet = usePromise(CharacterSheet.get(characterKey))\r\n  if (!characterSheet) return null\r\n  return <Dropdown.Item onClick={() => setCharacterKey(characterKey)} className=\"pl-2 pr-0\">\r\n    <Row>\r\n      <Col xs=\"auto\"><Image src={characterSheet.thumbImg} className={`thumb-small p-0 m-n1 grad-${characterSheet.star}star`} thumbnail /></Col>\r\n      <Col>{characterSheet.name}</Col>\r\n    </Row>\r\n  </Dropdown.Item>\r\n}","import { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport ICalculatedStats from '../Types/ICalculatedStats';\r\nimport IConditional, { IConditionalValue } from '../Types/IConditional';\r\nimport { evalIfFunc } from '../Util/Util';\r\n\r\nexport default function ConditionalSelector({ conditional, conditionalValue, setConditional, name, disabled, stats }:\r\n  { conditional: IConditional, conditionalValue: IConditionalValue, setConditional: (newCond: IConditionalValue) => void, name: Displayable, disabled: boolean, stats: ICalculatedStats }) {\r\n  const [conditionalNum = 0, conditionalStateKey] = conditionalValue\r\n  if (!conditional) return name as JSX.Element\r\n  if (\"states\" in conditional) {//complex conditional\r\n    const state = conditionalStateKey ? conditional.states[conditionalStateKey] : Object.values(conditional.states)[0]\r\n    const text = conditionalNum === 0 ? \"Not Active\" : <span>{state.name} {(evalIfFunc(state!.maxStack, stats) as number > 1 ? (`: ${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}`) : \"\")}</span>\r\n    const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{text}</Badge>\r\n    return <Dropdown>\r\n      <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n        <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n      </Dropdown.Toggle>\r\n      <Dropdown.Menu>\r\n        <Dropdown.Item onClick={() => setConditional([0])}>\r\n          <span>Not Active</span>\r\n        </Dropdown.Item>\r\n        {Object.entries(conditional.states).map(([stateKey, condial]: any, i) =>\r\n          <React.Fragment key={i}>\r\n            {[...Array(condial.maxStack).keys()].map(v => v + 1).map((stack, i) =>\r\n              <Dropdown.Item key={stateKey + i} onClick={() => setConditional([stack, stateKey])}>\r\n                {condial.name}{condial.maxStack > 1 ? `: ${stack} stack${stack > 1 ? \"s\" : \"\"}` : \"\"}\r\n              </Dropdown.Item>)}\r\n          </React.Fragment>\r\n        )}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  } else {\r\n    const maxStack = evalIfFunc(conditional!.maxStack, stats) as number\r\n    if (maxStack > 1) {\r\n      //stacking conditional\r\n      const badge = <Badge variant={conditionalNum === 0 ? \"secondary\" : \"success\"}>{conditionalNum > 0 ? `${conditionalNum} stack${conditionalNum > 1 ? \"s\" : \"\"}` : \"Not Active\"}</Badge>\r\n      return <Dropdown>\r\n        <Dropdown.Toggle size=\"sm\" disabled={disabled}>\r\n          <h6 className=\"mb-0 d-inline\" style={{ whiteSpace: \"normal\" }}>{name} {badge}</h6>\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item onClick={() => setConditional([0])}>\r\n            <span>Not Active</span>\r\n          </Dropdown.Item>\r\n          {[...Array(maxStack).keys()].map(v => v + 1).map(stack =>\r\n            <Dropdown.Item key={stack} onClick={() => setConditional([stack])}>\r\n              {`${stack} stack${stack > 1 ? \"s\" : \"\"}`}\r\n            </Dropdown.Item>)}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    } else if (maxStack === 1) {//single boolean conditional\r\n      return <Button size=\"sm\" onClick={() => setConditional([conditionalNum ? 0 : 1])} disabled={disabled}>\r\n        <h6 className=\"mb-0\"><FontAwesomeIcon icon={conditionalNum ? faCheckSquare : faSquare} /> {name}</h6>\r\n      </Button>\r\n    }\r\n  }\r\n  return null\r\n}","import { useCallback, useMemo } from \"react\"\r\nimport { Card, ListGroup } from \"react-bootstrap\"\r\nimport Conditional from \"../Conditional/Conditional\"\r\nimport ConditionalSelector from \"../Conditional/ConditionalSelector\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport IConditional from \"../Types/IConditional\"\r\nimport statsToFields from \"../Util/FieldUtil\"\r\nimport { deletePropPath, layeredAssignment, objClearEmpties } from \"../Util/Util\"\r\nimport FieldDisplay from \"./FieldDisplay\"\r\ntype ConditionalDisplayProps = {\r\n  conditional: IConditional,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  characterDispatch: (any) => void,//TODO: characterDispatch type\r\n  editable: boolean,\r\n  fieldClassName?: string\r\n}\r\n\r\nexport default function ConditionalDisplay({ conditional, equippedBuild, newBuild, characterDispatch, editable, fieldClassName }: ConditionalDisplayProps) {\r\n  const stats = newBuild ? newBuild : equippedBuild as ICalculatedStats\r\n  if (!stats) debugger\r\n  const canShow = useMemo(() => Conditional.canShow(conditional, stats), [conditional, stats])\r\n  const { stats: conditionalStats = {}, fields: conditionalFields = [], conditionalValue } = useMemo(() => canShow && Conditional.resolve(conditional, stats, undefined), [canShow, conditional, stats])\r\n  const displayFields = useMemo(() => canShow && [...statsToFields(conditionalStats, stats), ...conditionalFields], [canShow, conditionalStats, stats, conditionalFields])\r\n  const setConditional = useCallback(condV => {\r\n    const [conditionalNum = 0] = condV\r\n    if (!conditionalNum) {\r\n      deletePropPath(stats.conditionalValues, conditional!.keys)\r\n      objClearEmpties(stats.conditionalValues)\r\n    } else layeredAssignment(stats.conditionalValues, conditional!.keys, condV)\r\n    characterDispatch({ conditionalValues: stats.conditionalValues })\r\n  }, [conditional, stats.conditionalValues, characterDispatch])\r\n\r\n  if (!canShow) return null\r\n  return <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\">\r\n    <Card.Header className=\"p-2\">\r\n      <ConditionalSelector disabled={!editable}\r\n        conditional={conditional}\r\n        conditionalValue={conditionalValue}\r\n        setConditional={setConditional}\r\n        name={conditional.name}\r\n        stats={stats} />\r\n    </Card.Header>\r\n    <ListGroup className=\"text-white\" variant=\"flush\">\r\n      {displayFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild, className: fieldClassName }} />)}\r\n    </ListGroup>\r\n  </Card>\r\n}","import { Badge, Card, ListGroup } from \"react-bootstrap\"\r\nimport ConditionalDisplay from \"../../Components/ConditionalDisplay\"\r\nimport FieldDisplay from \"../../Components/FieldDisplay\"\r\nimport { ArtifactSetKey, SetNum } from \"../../Types/consts\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport statsToFields from \"../../Util/FieldUtil\"\r\nimport { usePromise } from \"../../Util/ReactUtil\"\r\nimport { ArtifactSheet } from \"../ArtifactSheet\"\r\n\r\nexport default function SetEffectDisplay({ setKey, setNumKey, equippedBuild, newBuild, editable, characterDispatch }: Data) {\r\n  const sheet = usePromise(ArtifactSheet.get(setKey))\r\n  if (!sheet) return null\r\n\r\n  const stats = newBuild ?? equippedBuild!\r\n  const setEffectText = sheet.setEffectTexts(setNumKey, stats)\r\n  const setStats = sheet.setNumStats(setNumKey, stats)\r\n  const setStatsFields = statsToFields(setStats, stats)\r\n  const conditionals = sheet.setEffectConditionals(setNumKey, stats)\r\n  return <>\r\n    <Card bg=\"darkcontent\" text={\"lightfont\" as any} className=\"mb-2 w-100\" >\r\n      <Card.Header className=\"p-2\">\r\n        <Badge variant=\"success\">{setNumKey}-Set</Badge> {setEffectText}\r\n      </Card.Header>\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {setStatsFields.map((field, i) => <FieldDisplay key={i} index={i} {...{ field, equippedBuild, newBuild }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n    {Boolean(conditionals) && Object.entries(conditionals!).map(([ckey, conditional]) => <ConditionalDisplay key={ckey as any} {...{ conditional, equippedBuild, newBuild, characterDispatch, editable }} />)}\r\n  </>\r\n}\r\n\r\ntype Data = {\r\n  setKey: ArtifactSetKey,\r\n  setNumKey: SetNum,\r\n  editable: boolean,\r\n  newBuild?: ICalculatedStats,\r\n  equippedBuild?: ICalculatedStats\r\n  characterDispatch: (arg0: any) => void,\r\n}\r\n","\r\n//take the new statsDisplayKeys, and display the stats.\r\n\r\nimport { Card, Col, Row } from \"react-bootstrap\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { ICharacter } from \"../../Types/character\"\r\nimport CharacterSheet from \"../CharacterSheet\"\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\"\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\"\r\nimport Character from \"../Character\"\r\n\r\ntype StatDisplayComponentProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter\r\n  statsDisplayKeys: any,\r\n  editable: boolean,\r\n  cardbg?: string\r\n  equippedBuild?: ICalculatedStats\r\n  newBuild?: ICalculatedStats\r\n}\r\n\r\nexport default function StatDisplayComponent({ characterSheet, weaponSheet, character, equippedBuild, newBuild, statsDisplayKeys, editable, cardbg = \"darkcontent\" }: StatDisplayComponentProps) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  return <Row className=\"mb-n2\">{Object.entries(statsDisplayKeys).map(([sectionKey, sectionValues]: any) => {\r\n    const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build?.characterEle)\r\n    return <Col key={sectionKey} className=\"mb-2\" xs={12} md={6} xl={4}>\r\n      <Card bg={cardbg} text={\"lightfont\" as any} className=\"h-100\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body>\r\n          <Row>{sectionValues.map(statKey => <StatDisplay key={JSON.stringify(statKey)} {...{ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }} />)}</Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  })}</Row>\r\n}","import { useMemo } from \"react\"\r\nimport { Col, Row } from \"react-bootstrap\"\r\nimport Character from \"../Character/Character\"\r\nimport CharacterSheet from \"../Character/CharacterSheet\"\r\nimport Formula from \"../Formula\"\r\nimport Stat from \"../Stat\"\r\nimport { ICharacter } from \"../Types/character\"\r\nimport ICalculatedStats from \"../Types/ICalculatedStats\"\r\nimport { IFieldDisplay } from \"../Types/IFieldDisplay\"\r\nimport { usePromise } from \"../Util/ReactUtil\"\r\nimport WeaponSheet from \"../Weapon/WeaponSheet\"\r\nimport { StatIconEle } from \"./StatIcon\"\r\n\r\nfunction DisplayStatDiff({ label = \"\", val, oldVal, fixed = 0, unit = \"\", variant = \"\" }) {\r\n  if (typeof oldVal === \"undefined\" && typeof val === \"number\") {//if only one value is filled, display that one.\r\n    oldVal = val\r\n    val = undefined\r\n  }\r\n  const diff = val !== undefined ? val - oldVal : 0;\r\n  let oldText: Displayable = \"\", diffText: Displayable = \"\"\r\n  if (oldVal || diff === 0) oldText = oldVal?.toFixed(fixed)\r\n  else if (oldVal === undefined) oldText = val?.toFixed(fixed)//if oldval isnt defined, just display val.\r\n  if (oldText) oldText = <span className={`text-${variant}`}>{oldText}{unit}</span>\r\n  if (diff !== 0) diffText = <span className={`text-${diff > 0 ? \"success\" : \"danger\"}`}>{diff > 0 ? \"+\" : \"\"}{diff?.toFixed(fixed)}{unit}</span>\r\n\r\n  return <Col xs=\"12\"><Row>\r\n    <Col><b>{label}</b></Col>\r\n    <Col xs=\"auto\">{oldText}{diff ? \" \" : \"\"}{diffText}</Col>\r\n  </Row></Col>\r\n}\r\ntype StatDisplayProps = {\r\n  characterSheet: CharacterSheet,\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  editable: boolean,\r\n  statKey: string\r\n}\r\nexport default function StatDisplay({ characterSheet, weaponSheet, character, equippedBuild, newBuild, editable, statKey }: StatDisplayProps) {\r\n  const formula = usePromise(Array.isArray(statKey) ? Formula.get(statKey) : undefined)\r\n\r\n  const { val, oldVal, fixed, unit, variant, label } = useMemo(() => {\r\n    let val, oldVal, fixed, unit, variant, label: Displayable = \"\"\r\n    if (typeof statKey === \"string\") {//basic statKey\r\n      if (newBuild && equippedBuild) {//comparable\r\n        //newbuild -> val\r\n        //equippedbuild ->old\r\n        val = newBuild?.[statKey] ?? 0\r\n        oldVal = equippedBuild?.[statKey] ?? 0\r\n      } else {\r\n        const build = newBuild ? newBuild : equippedBuild\r\n        //build ->val\r\n        val = build?.[statKey] ?? 0\r\n        //statvaluewith override -> old\r\n        const invalid = \"invalid\"//can't use undeinfed as the defVal, since I want undefined for invalid numbers.\r\n        oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey, invalid as any)\r\n        oldVal === invalid && (oldVal = undefined)\r\n        if (statKey === \"finalHP\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterHP\")\r\n        else if (statKey === \"finalDEF\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterDEF\")\r\n        else if (statKey === \"finalATK\")\r\n          oldVal = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"characterATK\") + Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"weaponATK\")\r\n      }\r\n      unit = Stat.getStatUnit(statKey)\r\n      fixed = Stat.fixedUnit(statKey)\r\n      label = <span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>\r\n    } else if (formula) {//Formula\r\n      const build = newBuild ? newBuild : equippedBuild\r\n      const field = (formula as any).field as IFieldDisplay //assume it is attached in post-processing\r\n      const labelVariant = Character.getTalentFieldValue(field, \"variant\", build)\r\n      label = <span className={`text-${labelVariant}`}>{Character.getTalentFieldValue(field, \"text\", build)}</span>\r\n      fixed = Character.getTalentFieldValue(field, \"fixed\", build, 0 as any)\r\n      val = Character.getTalentFieldValue(field, \"formula\", build)?.[0]?.(build)\r\n      if (newBuild && equippedBuild) {//comparable\r\n        oldVal = Character.getTalentFieldValue(field, \"formula\", equippedBuild)?.[0]?.(equippedBuild)\r\n      }\r\n    }\r\n    if (editable && Character.hasOverride(character, statKey)) variant = \"warning\"\r\n    return { val, oldVal, fixed, unit, variant, label }\r\n  }, [character, characterSheet, weaponSheet, equippedBuild, newBuild, editable, statKey, formula])\r\n\r\n  return <DisplayStatDiff {...{ val, oldVal, fixed, unit, variant, label: label as any }} />\r\n}","import { faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Button from \"react-bootstrap/Button\"\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\"\r\nimport Tooltip from \"react-bootstrap/Tooltip\"\r\nimport CustomFormControl from \"../Components/CustomFormControl\"\r\n\r\nconst StatInput = ({ name, prependEle, value, placeholder, defaultValue, onValueChange, percent, disabled, ...restProps }) =>\r\n  <InputGroup {...restProps}>\r\n    {prependEle ? <InputGroup.Prepend>{prependEle}</InputGroup.Prepend> : null}\r\n    <InputGroup.Prepend>\r\n      <InputGroup.Text>{name}</InputGroup.Text>\r\n    </InputGroup.Prepend>\r\n    <CustomFormControl\r\n      float={percent}\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={onValueChange}\r\n      disabled={disabled}\r\n    />\r\n    <InputGroup.Append>\r\n      {Boolean(percent) && <InputGroup.Text>%</InputGroup.Text>}\r\n      {defaultValue !== undefined && <OverlayTrigger placement=\"top\"\r\n        overlay={<Tooltip id=\"reset-tooltip\">Reset this override to the default value.</Tooltip>}>\r\n        <span className=\"d-inline-block\">\r\n          <Button onClick={() => onValueChange(defaultValue)} disabled={disabled || value === defaultValue} style={value === defaultValue ? { pointerEvents: 'none' } : {}}>\r\n            <FontAwesomeIcon icon={faUndo} />\r\n          </Button>\r\n        </span>\r\n      </OverlayTrigger>}\r\n    </InputGroup.Append>\r\n  </InputGroup>\r\nexport default StatInput","import { faCheckSquare, faSquare, faWindowMaximize, faWindowMinimize } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext, useMemo } from 'react';\r\nimport { Accordion, AccordionContext, Button, Card, Col, Dropdown, Image, Row, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Assets from \"../../Assets/Assets\";\r\nimport Formula from \"../../Formula\";\r\nimport Stat from \"../../Stat\";\r\nimport { GetDependencies } from \"../../StatDependency\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { allElements } from \"../../Types/consts\";\r\nimport ICalculatedStats from \"../../Types/ICalculatedStats\";\r\nimport { IFieldDisplay } from \"../../Types/IFieldDisplay\";\r\nimport { usePromise } from \"../../Util/ReactUtil\";\r\nimport WeaponSheet from \"../../Weapon/WeaponSheet\";\r\nimport Character from \"../Character\";\r\nimport CharacterSheet from \"../CharacterSheet\";\r\nimport StatInput from \"../StatInput\";\r\nconst infusionVals = {\r\n  \"\": <span>No External Infusion</span>,\r\n  \"pyro\": <span >Pyro Infusion</span>,\r\n  \"cryo\": <span >Cryo Infusion</span>,\r\n}\r\ntype InfusionAuraDropdownProps = {\r\n  characterSheet: CharacterSheet,\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  className?: string\r\n}\r\nexport function InfusionAuraDropdown({ characterSheet, character: { infusionAura = \"\", characterKey }, characterDispatch, className }: InfusionAuraDropdownProps) {\r\n  if (!characterSheet.isMelee()) return null\r\n  return <Dropdown className={className}>\r\n    <Dropdown.Toggle variant={infusionAura || \"secondary\"}>{infusionVals[infusionAura]}</Dropdown.Toggle>\r\n    <Dropdown.Menu>\r\n      {Object.entries(infusionVals).map(([key, text]) => <Dropdown.Item key={key} className={`text-${key}`} onClick={() => characterDispatch({ infusionAura: key })}>{text}</Dropdown.Item>)}\r\n    </Dropdown.Menu>\r\n  </Dropdown>\r\n}\r\n\r\ntype ReactionToggleProps = {\r\n  character: ICharacter,\r\n  build: ICalculatedStats,\r\n  characterDispatch: (any) => void,\r\n  className: string\r\n}\r\nexport function ReactionToggle({ character: { reactionMode = \"none\", infusionAura }, build, characterDispatch, className }: ReactionToggleProps) {\r\n  if (reactionMode === null) reactionMode = \"none\"\r\n  const charEleKey = build.characterEle\r\n  if (![\"pyro\", \"hydro\", \"cryo\"].includes(charEleKey) && ![\"pyro\", \"hydro\", \"cryo\"].includes(infusionAura)) return null\r\n  return <ToggleButtonGroup className={className} type=\"radio\" name=\"reactionMode\" value={reactionMode} onChange={val => characterDispatch({ reactionMode: val === \"none\" ? null : val })}>\r\n    <ToggleButton value={\"none\"} variant={reactionMode === \"none\" ? \"success\" : \"primary\"}>No Reactions</ToggleButton >\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_vaporize\"} variant={reactionMode === \"pyro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Pyro) <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"pyro\" || infusionAura === \"pyro\") && <ToggleButton value={\"pyro_melt\"} variant={reactionMode === \"pyro_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Pyro) <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"hydro\" || infusionAura === \"hydro\") && <ToggleButton value={\"hydro_vaporize\"} variant={reactionMode === \"hydro_vaporize\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-vaporize\">Vaporize(Hydro) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n    {(charEleKey === \"cryo\" || infusionAura === \"cryo\") && <ToggleButton value={\"cryo_melt\"} variant={reactionMode === \"cryo_melt\" ? \"success\" : \"primary\"}>\r\n      <span className=\"text-melt\">Melt(Cryo) <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /></span>\r\n    </ToggleButton >}\r\n  </ToggleButtonGroup>\r\n}\r\nexport function HitModeToggle({ hitMode, characterDispatch, className }) {\r\n  return <ToggleButtonGroup type=\"radio\" value={hitMode} name=\"hitOptions\" onChange={m => characterDispatch({ hitMode: m })} className={className}>\r\n    <ToggleButton value=\"avgHit\" variant={hitMode === \"avgHit\" ? \"success\" : \"primary\"}>Avg. DMG</ToggleButton>\r\n    <ToggleButton value=\"hit\" variant={hitMode === \"hit\" ? \"success\" : \"primary\"}>Non Crit DMG</ToggleButton>\r\n    <ToggleButton value=\"critHit\" variant={hitMode === \"critHit\" ? \"success\" : \"primary\"}>Crit Hit DMG</ToggleButton>\r\n  </ToggleButtonGroup>\r\n}\r\n\r\nfunction CalculationDisplay({ characterSheet, weaponSheet, build }: { characterSheet: CharacterSheet, weaponSheet: WeaponSheet, build: ICalculatedStats }) {\r\n  const displayStatKeys = useMemo(() => Character.getDisplayStatKeys(build, characterSheet), [build, characterSheet])\r\n  return <div>\r\n    {Object.entries(displayStatKeys).map(([sectionKey, fields]: [string, any]) => {\r\n      const header = Character.getDisplayHeading(sectionKey, characterSheet, weaponSheet, build.characterEle)\r\n      return <Card bg=\"darkcontent\" text={\"lightfont\" as any} key={sectionKey} className=\"w-100 mb-2\">\r\n        <Card.Header>{header}</Card.Header>\r\n        <Card.Body className=\"p-2\">\r\n          <Accordion className=\"mb-n2\">\r\n            {fields.map((field, fieldIndex) => {\r\n              if (Array.isArray(field))\r\n                return <FormulaCalculationField key={fieldIndex} fieldKeys={field} build={build} fieldIndex={fieldIndex} />\r\n              else if (typeof field === \"string\") {//simple statKey field\r\n                const subFormulaKeys: any[] = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, [field]), build?.modifiers).reverse()\r\n                return Boolean(subFormulaKeys.length) && <Card key={fieldIndex} bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n                  <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n                    {Stat.printStat(field, build)}\r\n                  </Accordion.Toggle>\r\n                  <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n                    <Card.Body className=\"p-2\">\r\n                      <div className=\"mb-n2\">\r\n                        {subFormulaKeys.map(subKey =>\r\n                          <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n                        )}\r\n                      </div>\r\n                    </Card.Body>\r\n                  </Accordion.Collapse>\r\n                </Card>\r\n              }\r\n              return null\r\n            })}\r\n          </Accordion>\r\n        </Card.Body>\r\n      </Card>\r\n    })}\r\n  </div>\r\n}\r\nfunction FormulaCalculationField({ fieldKeys, build, fieldIndex }: { fieldKeys: string[], build: ICalculatedStats, fieldIndex: number, }) {\r\n  const formula = usePromise(Formula.get(fieldKeys))\r\n  if (!formula) return null\r\n  const formulaField = (formula as any).field as IFieldDisplay\r\n  const fieldText = Character.getTalentFieldValue(formulaField, \"text\", build)\r\n  const fieldVariant = Character.getTalentFieldValue(formulaField, \"variant\", build)\r\n  const fieldFormulaText = Character.getTalentFieldValue(formulaField, \"formulaText\", build)\r\n  const [fieldFormula, fieldFormulaDependency] = Character.getTalentFieldValue(formulaField, \"formula\", build, [] as any)\r\n  if (!fieldFormula || !fieldFormulaDependency) return null\r\n  const fieldValue = fieldFormula?.(build)?.toFixed?.()\r\n  const subFormulaKeys = Stat.getPrintableFormulaStatKeyList(GetDependencies(build?.modifiers, fieldFormulaDependency), build?.modifiers).reverse()\r\n  return <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n    <Accordion.Toggle as={Card.Header} className=\"p-2 cursor-pointer\" variant=\"link\" eventKey={`field${fieldIndex}`}>\r\n      <b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span>\r\n    </Accordion.Toggle>\r\n    <Accordion.Collapse eventKey={`field${fieldIndex}`}>\r\n      <Card.Body className=\"p-2\">\r\n        <div className=\"mb-n2\">\r\n          <p className=\"mb-2\"><b className={`text-${fieldVariant}`}>{fieldText}</b> <span className=\"text-info\">{fieldValue}</span> = <small>{fieldFormulaText}</small></p>\r\n          {subFormulaKeys.map(subKey =>\r\n            <p className=\"mb-2\" key={subKey}>{Stat.printStat(subKey, build)} = <small>{Stat.printFormula(subKey, build, build.modifiers, false)}</small></p>\r\n          )}\r\n        </div>\r\n      </Card.Body>\r\n    </Accordion.Collapse>\r\n  </Card>\r\n}\r\n\r\nconst ContextAwareToggle = ({ eventKey, callback }) => {\r\n  const currentEventKey = useContext(AccordionContext);\r\n  const decoratedOnClick = useAccordionToggle(\r\n    eventKey,\r\n    () => callback && callback(eventKey),\r\n  );\r\n  const expanded = currentEventKey === eventKey;\r\n  return (\r\n    <Button onClick={decoratedOnClick} variant=\"info\">\r\n      <FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize} className={`fa-fw ${expanded ? \"fa-rotate-180\" : \"\"}`} />\r\n      <span> </span>{expanded ? \"Retract\" : \"Expand\"}\r\n    </Button>\r\n  );\r\n}\r\n\r\ntype DamageOptionsAndCalculationProps = {\r\n  characterSheet: CharacterSheet\r\n  weaponSheet: WeaponSheet\r\n  character: ICharacter,\r\n  characterDispatch: (any) => void,\r\n  equippedBuild?: ICalculatedStats,\r\n  newBuild?: ICalculatedStats,\r\n  className: string\r\n}\r\nexport default function DamageOptionsAndCalculation({ characterSheet, weaponSheet, character, character: { hitMode }, characterDispatch, newBuild, equippedBuild, className }: DamageOptionsAndCalculationProps) {\r\n  //choose which one to display stats for\r\n  const build = newBuild ? newBuild : equippedBuild!\r\n  return <div className={className}>\r\n    <Card bg=\"lightcontent\" text={\"lightfont\" as any} className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row className=\"mb-n2\">\r\n          <Col xs=\"auto\"><InfusionAuraDropdown characterSheet={characterSheet} character={character} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><HitModeToggle hitMode={hitMode} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n          <Col xs=\"auto\"><ReactionToggle character={character} build={build} characterDispatch={characterDispatch} className=\"mb-2\" /></Col>\r\n        </Row>\r\n      </Card.Header>\r\n    </Card>\r\n    <Accordion >\r\n      <Card bg=\"lightcontent\" text={\"lightfont\" as any} >\r\n        <Card.Header>\r\n          <Row>\r\n            <Col>\r\n              <span className=\"d-block\">Damage Calculation Options & Formulas</span>\r\n              <small>Expand below to edit enemy details and view calculation details.</small>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <ContextAwareToggle callback={undefined} {...{ as: Button }} eventKey=\"details\" />\r\n            </Col>\r\n          </Row>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"details\">\r\n          <Card.Body className=\"p-2\">\r\n            <Card className=\"mb-2\" bg=\"darkcontent\" text={\"lightfont\" as any}>\r\n              <Card.Header>\r\n                <Row>\r\n                  <Col>Enemy Editor</Col>\r\n                  <Col xs=\"auto\">\r\n                    <Button variant=\"warning\" size=\"sm\">\r\n                      <a href=\"https://genshin-impact.fandom.com/wiki/Damage#Base_Enemy_Resistances\" target=\"_blank\" rel=\"noreferrer\">To get the specific resistance values of enemies, please visit the wiki.</a>\r\n                    </Button >\r\n                  </Col>\r\n                </Row>\r\n              </Card.Header>\r\n              <Card.Body className=\"p-2\">\r\n                <Row >\r\n                  <Col xs={12} xl={6} className=\"mb-2\">\r\n                    <StatInput\r\n                      prependEle={undefined}\r\n                      disabled={undefined}\r\n                      percent={undefined}\r\n                      name={<b>Enemy Level</b>}\r\n                      value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      placeholder={Stat.getStatNameRaw(\"enemyLevel\")}\r\n                      defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, \"enemyLevel\")}\r\n                      onValueChange={value => characterDispatch({ type: \"statOverride\", statKey: \"enemyLevel\", value, characterSheet, weaponSheet })}\r\n                    />\r\n                  </Col>\r\n                  {[\"physical\", ...allElements].map(eleKey => {\r\n                    let statKey = `${eleKey}_enemyRes_`\r\n                    let immunityStatKey = `${eleKey}_enemyImmunity`\r\n                    let elementImmunity = Character.getStatValueWithOverride(character, characterSheet, weaponSheet, immunityStatKey)\r\n                    return <Col xs={12} xl={6} key={eleKey} className=\"mb-2\">\r\n                      <StatInput\r\n                        prependEle={<Button variant={eleKey} onClick={() => characterDispatch({ type: \"statOverride\", statKey: immunityStatKey, value: !elementImmunity, characterSheet, weaponSheet })} className=\"text-darkcontent\">\r\n                          <FontAwesomeIcon icon={elementImmunity ? faCheckSquare : faSquare} className=\"fa-fw\" /> Immunity\r\n                </Button>}\r\n                        name={<b>{Stat.getStatName(statKey)}</b>}\r\n                        value={Character.getStatValueWithOverride(character, characterSheet, weaponSheet, statKey)}\r\n                        placeholder={Stat.getStatNameRaw(statKey)}\r\n                        defaultValue={Character.getBaseStatValue(character, characterSheet, weaponSheet, statKey)}\r\n                        onValueChange={value => characterDispatch({ type: \"statOverride\", statKey, value, characterSheet, weaponSheet })}\r\n                        disabled={elementImmunity}\r\n                        percent\r\n                      />\r\n                    </Col>\r\n                  })}\r\n                  <Col xs={12}><small>Note: for negative resistances due to resistance shred like Zhongli's shield (e.g. -10%), enter the RAW value (-10). GO will half the value for you in the calculations.</small></Col>\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n            <CalculationDisplay characterSheet={characterSheet} weaponSheet={weaponSheet} build={build} />\r\n          </Card.Body>\r\n        </Accordion.Collapse>\r\n      </Card>\r\n    </Accordion>\r\n  </div>\r\n}\r\n"],"sourceRoot":""}