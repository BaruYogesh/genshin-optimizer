{"version":3,"file":"static/js/89.4468afbb.chunk.js","mappings":"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","sources":["Components/Card/CardDark.tsx","Components/Card/CardLight.tsx","Components/DropdownMenu/DropdownButton.tsx","Components/SqBadge.tsx","GlobalSettings.tsx","Database/exim.ts","Database/exports/good.ts","PageSettings/Components/DownloadCard.tsx","PageSettings/Components/LanguageCard.tsx","PageSettings/Components/TCToggleCard.tsx","../node_modules/@mui/icons-material/esm/Upload.js","Database/imports/good.ts","Database/imports/merge.ts","Database/imports/mona.ts","PageSettings/Components/UploadCard.tsx","PageSettings/SettingsDisplay.tsx","ReactHooks/useDBState.tsx","../node_modules/@mui/icons-material/esm/CheckBox.js","../node_modules/@mui/icons-material/esm/CheckBoxOutlineBlank.js","../node_modules/@mui/icons-material/esm/Download.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardDark = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentDark.main\r\n}));\r\n\r\nexport default CardDark","import { Card, styled } from \"@mui/material\";\r\n\r\nconst CardLight = styled(Card)(({ theme }) => ({\r\n  backgroundColor: theme.palette.contentLight.main\r\n}));\r\n\r\nexport default CardLight","import { KeyboardArrowDown } from \"@mui/icons-material\";\r\nimport { Button, ButtonProps, Menu, Skeleton } from \"@mui/material\";\r\nimport { Suspense, useCallback, useState } from \"react\";\r\n\r\nexport type DropdownButtonProps = Omit<ButtonProps, \"title\"> & {\r\n  title: React.ReactNode,\r\n  id?: string,\r\n  children: React.ReactNode\r\n}\r\nexport default function DropdownButton({ title, children, id = \"dropdownbtn\", ...props }: DropdownButtonProps) {\r\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = useCallback(\r\n    (event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget),\r\n    [setAnchorEl],\r\n  )\r\n  const handleClose = useCallback(\r\n    () => setAnchorEl(null),\r\n    [setAnchorEl],\r\n  )\r\n\r\n  return <Suspense fallback={<Button endIcon={<KeyboardArrowDown />}{...props}><Skeleton width={50} /></Button>} >\r\n    <Button\r\n      {...props}\r\n      id={id}\r\n      aria-controls=\"basic-menu\"\r\n      aria-haspopup=\"true\"\r\n      aria-expanded={open ? 'true' : undefined}\r\n      onClick={handleClick}\r\n      endIcon={<KeyboardArrowDown />}\r\n    >\r\n      {title}\r\n    </Button>\r\n    <Menu\r\n      id=\"basic-menu\"\r\n      anchorEl={anchorEl}\r\n      open={open}\r\n      onClose={handleClose}\r\n      MenuListProps={{\r\n        'aria-labelledby': id,\r\n      }}\r\n      onClick={handleClose}\r\n    >\r\n      {/* set Skeleton to be really high so the taller dropdowns can still be placed properly... */}\r\n      <Suspense fallback={<Skeleton width=\"100%\" height=\"1000\" />}>\r\n        {children}\r\n      </Suspense>\r\n    </Menu>\r\n  </Suspense>\r\n}","import { styled } from \"@mui/material\";\r\n\r\nconst SqBadge = styled(\"span\", {\r\n  name: 'SqBadge',\r\n  slot: 'Root',\r\n})(({ theme, color = \"primary\" }) => ({\r\n  display: \"inline-block\",\r\n  padding: \".25em .4em\",\r\n  fontSize: \"75%\",\r\n  fontWeight: 700,\r\n  lineHeight: 1,\r\n  textAlign: \"center\",\r\n  whiteSpace: \"nowrap\",\r\n  verticalAlign: \"baseline\",\r\n  borderRadius: \".25em\",\r\n  backgroundColor: theme.palette[color]?.main,\r\n  color: theme.palette[color]?.contrastText\r\n}))\r\nexport default SqBadge","\r\nexport function initGlobalSettings() {\r\n  return { tcMode: false }\r\n}\r\n","import type { IArtifact } from \"../Types/artifact\"\r\nimport type { ICharacter } from \"../Types/character\"\r\nimport type { IWeapon } from \"../Types/weapon\"\r\nimport type { DBStorage } from \"./DBStorage\"\r\n\r\nexport const GOSource = \"Genshin Optimizer\" as const\r\n\r\nexport function newCounter<T>(): ImportResultCounter<T> {\r\n  return { total: 0, invalid: [], new: [], updated: [], unchanged: [], removed: [], }\r\n}\r\n\r\nexport type IGOOD = {\r\n  format: \"GOOD\"\r\n  source: string\r\n  version: 1\r\n  characters?: any[]\r\n  artifacts?: any[]\r\n  weapons?: any[]\r\n}\r\nexport type IGO = {\r\n  dbVersion: number\r\n  source: typeof GOSource\r\n  states?: object[]\r\n}\r\n\r\nexport type ImportResultCounter<T> = {\r\n  total: number, // total # in file\r\n  new: T[],\r\n  updated: T[], // Use new object\r\n  unchanged: T[], // Use new object\r\n  removed: T[],\r\n  invalid: T[],\r\n}\r\nexport type ImportResult = {\r\n  type: \"GOOD\",\r\n  storage: DBStorage,\r\n  source: string,\r\n  artifacts?: ImportResultCounter<IArtifact>,\r\n  weapons?: ImportResultCounter<IWeapon>,\r\n  characters?: ImportResultCounter<ICharacter>,\r\n}\r\n","import { DBStorage } from \"../DBStorage\";\r\nimport { GOSource, IGO, IGOOD } from \"../exim\";\r\nimport { currentDBVersion } from \"../imports/migrate\";\r\n\r\nexport function exportGOOD(storage: DBStorage): IGOOD & IGO {\r\n  return {\r\n    format: \"GOOD\",\r\n    dbVersion: currentDBVersion,\r\n    source: GOSource,\r\n    version: 1,\r\n    characters: storage.entries\r\n      .filter(([key]) => key.startsWith(\"char_\"))\r\n      .map(([_, value]) => {\r\n        // Invalidate build results since we won't use it on imports either\r\n        const result = JSON.parse(value)\r\n        if (result.buildSettings) {\r\n          result.buildSettings.builds = []\r\n          result.buildSettings.buildDate = 0\r\n        }\r\n        return result\r\n      }),\r\n    artifacts: storage.entries\r\n      .filter(([key]) => key.startsWith(\"artifact_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n    weapons: storage.entries\r\n      .filter(([key]) => key.startsWith(\"weapon_\"))\r\n      .map(([_, value]) => JSON.parse(value)),\r\n\r\n    states: storage.entries\r\n      .filter(([key]) => key.startsWith(\"state_\"))\r\n      .map(([key, value]) => ({ ...JSON.parse(value), key: key.split(\"state_\")[1] })),\r\n  }\r\n}\r\n","import { faClipboard, faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Download } from '@mui/icons-material'\r\nimport { Button, CardContent, Divider, Grid, Typography } from '@mui/material'\r\nimport { useCallback, useContext } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../../Database/Database\"\r\nimport { exportGOOD } from '../../Database/exports/good'\r\n\r\nexport default function DownloadCard() {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation([\"settings\"]);\r\n  const numChar = database._getCharKeys().length\r\n  const numArt = database._getArts().length\r\n  const numWeapon = database._getWeapons().length\r\n  const downloadValid = Boolean(numChar || numArt)\r\n  const deleteDB = useCallback(() => {\r\n    database.storage.clear()\r\n    setDatabase(new ArtCharDatabase(database.storage))\r\n  }, [database, setDatabase])\r\n  const copyToClipboard = useCallback(\r\n    () => navigator.clipboard.writeText(JSON.stringify(exportGOOD(database.storage)))\r\n      .then(() => alert(\"Copied database to clipboard.\"))\r\n      .catch(console.error),\r\n    [database],\r\n  )\r\n  const download = useCallback(\r\n    () => {\r\n      const date = new Date()\r\n      const JSONStr = JSON.stringify(exportGOOD(database.storage))\r\n      const filename = `go-data-${date.getFullYear()}-${date.getMonth()}-${date.getDay()}-${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}.json`\r\n      const contentType = \"application/json;charset=utf-8\"\r\n      const a = document.createElement('a');\r\n      a.download = filename\r\n      a.href = `data:${contentType},${encodeURIComponent(JSONStr)}`\r\n      a.target = \"_blank\"\r\n      document.body.appendChild(a)\r\n      a.click()\r\n      document.body.removeChild(a)\r\n    },\r\n    [database],\r\n  )\r\n\r\n\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"downloadCard.databaseDownload\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Grid container mb={2} spacing={2}>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.chars\" /> {numChar}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.arts\" /> {numArt}</Typography></Grid>\r\n        <Grid item xs={6} md={4}><Typography><Trans t={t} i18nKey=\"count.weapons\" /> {numWeapon}</Typography></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item><Button disabled={!downloadValid} onClick={download} startIcon={<Download />}><Trans t={t} i18nKey=\"downloadCard.button.download\" /></Button></Grid>\r\n        <Grid item flexGrow={1} ><Button disabled={!downloadValid} color=\"info\" onClick={copyToClipboard} startIcon={<FontAwesomeIcon icon={faClipboard} />}><Trans t={t} i18nKey=\"downloadCard.button.copy\" /></Button></Grid>\r\n        <Grid item><Button disabled={!downloadValid} color=\"error\" onClick={deleteDB} startIcon={<FontAwesomeIcon icon={faTrashAlt} />}><Trans t={t} i18nKey=\"downloadCard.button.delete\" /></Button></Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import { CardContent, Divider, MenuItem } from '@mui/material'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton'\r\nimport SqBadge from '../../Components/SqBadge'\r\nimport { languageCodeList } from \"../../i18n\"\r\nexport default function LanguageCard() {\r\n  const { t } = useTranslation();\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}>\r\n      {t(\"settings:languageCard.selectLanguage\")} <SqBadge color=\"warning\">{t(\"ui:underConstruction\")}</SqBadge>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <LanguageDropdown />\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nconst nativeLanguages = {\r\n  \"chs\": \"中文 正体字\",\r\n  \"cht\": \"中文 繁體字\",\r\n  \"de\": \"Deutsch\",\r\n  \"en\": \"English\",\r\n  \"es\": \"español\",\r\n  \"fr\": \"français\",\r\n  \"id\": \"Bahasa Indonesia\",\r\n  \"ja\": \"日本語\",\r\n  \"ko\": \"한국어\",\r\n  \"pt\": \"Português\",\r\n  \"ru\": \"Русский язык\",\r\n  \"th\": \"ภาษาไทย\",\r\n  \"vi\": \"Tiếng Việt\"\r\n}\r\nexport function LanguageDropdown() {\r\n  const { t, i18n } = useTranslation([\"ui\", \"settings\"]);\r\n  const onSetLanguage = (lang) => () => i18n.changeLanguage(lang);\r\n  const currentLang = i18n.languages[0];\r\n  return <DropdownButton fullWidth title={t('settings:languageCard.languageFormat', { language: t(`languages:${currentLang}`) })}>\r\n    {languageCodeList.map((lang) => <MenuItem key={lang} selected={currentLang === lang} disabled={currentLang === lang} onClick={onSetLanguage(lang)}>\r\n      <Trans i18nKey={`languages:${lang}`} />\r\n      {lang !== currentLang ? ` (${nativeLanguages[lang]})` : \"\"}\r\n    </MenuItem>)}\r\n  </DropdownButton>\r\n}","import { CheckBox, CheckBoxOutlineBlank } from \"@mui/icons-material\";\r\nimport { Button, CardContent, Typography } from \"@mui/material\";\r\nimport CardLight from \"../../Components/Card/CardLight\";\r\nimport { initGlobalSettings } from \"../../GlobalSettings\";\r\nimport useDBState from \"../../ReactHooks/useDBState\";\r\n\r\nexport default function TCToggleCard() {\r\n  const [{ tcMode }, setGlobalSettings] = useDBState(\"GlobalSettings\", initGlobalSettings)\r\n\r\n  return <CardLight>\r\n    <CardContent>\r\n      <Typography gutterBottom color=\"warning.main\">Enabling this toggle will show some features that might be too complex for the average user.</Typography>\r\n      <Button fullWidth\r\n        onClick={() => setGlobalSettings({ tcMode: !tcMode })}\r\n        color={tcMode ? \"success\" : \"primary\"}\r\n        startIcon={tcMode ? <CheckBox /> : <CheckBoxOutlineBlank />}>\r\n        Theorycrafting Mode\r\n      </Button>\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zm0-10h4v6h6v-6h4l-7-7-7 7z\"\n}), 'Upload');","import { ArtCharDatabase } from \"../Database\";\r\nimport { SandboxStorage } from \"../DBStorage\";\r\nimport { GOSource, IGO, IGOOD, ImportResult, newCounter } from \"../exim\";\r\nimport { setDBVersion } from \"../utils\";\r\nimport { merge } from \"./merge\";\r\nimport { migrate } from \"./migrate\";\r\nimport { parseArtifact, parseCharacter, parseWeapon } from \"./parse\";\r\n\r\n// MIGRATION STEP: Always keep parsing in sync with GOODv1 format\r\n\r\nexport function importGOOD(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  switch (data.version) {\r\n    case 1: return importGOOD1(data, oldDatabase)\r\n  }\r\n}\r\n\r\n// TODO: Remove this function or move it somewhere else\r\nfunction importGOOD1(data: IGOOD, oldDatabase: ArtCharDatabase): ImportResult | undefined {\r\n  const result = parseImport(data)\r\n  if (!result) return\r\n  migrate(result.storage)\r\n  merge(result, oldDatabase)\r\n  return result\r\n}\r\n\r\n/** DB file -> internal (old) storage */\r\nfunction parseImport(data: IGOOD): ImportResult | undefined {\r\n  const source = data.source, storage = new SandboxStorage()\r\n  const result: ImportResult = { type: \"GOOD\", storage, source }\r\n\r\n  if (data.artifacts) {\r\n    result.artifacts = newCounter()\r\n    const counter = result.artifacts\r\n    counter.total = data.artifacts.length\r\n\r\n    data.artifacts.forEach((a, i) => {\r\n      const parsed = parseArtifact(a)\r\n      if (!parsed) counter.invalid.push(a)\r\n      else storage.set(`artifact_${i}`, a)\r\n    })\r\n  }\r\n  if (data.weapons) {\r\n    result.weapons = newCounter()\r\n    const counter = result.weapons\r\n    counter.total = data.weapons!.length\r\n\r\n    data.weapons.forEach((w, i) => {\r\n      const parsed = parseWeapon(w)\r\n      if (!parsed) counter.invalid.push(w)\r\n      else storage.set(`weapon_${i}`, w)\r\n      return parsed ? [parsed] : []\r\n    })\r\n\r\n    result.weapons = counter\r\n  }\r\n  if (data.characters) {\r\n    result.characters = newCounter()\r\n    const counter = result.characters\r\n    counter.total = data.characters.length\r\n\r\n    data.characters.forEach(c => {\r\n      const parsed = parseCharacter(c)\r\n      if (!parsed) counter.invalid.push(c)\r\n\r\n      // We invalidate build results here because we need to do\r\n      // it regardless of whether the file has character/art data.\r\n      if (c.buildSettings) {\r\n        c.buildSettings.builds = []\r\n        c.buildSettings.buildDate = 0\r\n      }\r\n\r\n      storage.set(`char_${c.key}`, c);\r\n    })\r\n  }\r\n  if (source === GOSource) {\r\n    const { dbVersion, states } = data as unknown as IGO\r\n    if (dbVersion < 8) return // Something doesn't look right here\r\n    setDBVersion(storage, dbVersion)\r\n    states && states.forEach(s => {\r\n      const { key, ...state } = s as any\r\n      if (!key) return\r\n      storage.set(`state_${key}`, state)\r\n    });\r\n  } else {\r\n    // DO NOT CHANGE THE DB VERSION\r\n    // Update this ONLY when it has been verified that base GOODv1 is a valid GO\r\n    // of that particular version. Any missing/extra keys could crash the system.\r\n    setDBVersion(storage, 8)\r\n  }\r\n  return result\r\n}\r\n","import { IArtifact, ICachedArtifact } from \"../../Types/artifact\";\r\nimport { ICharacter } from \"../../Types/character\";\r\nimport { ICachedWeapon, IWeapon } from \"../../Types/weapon\";\r\nimport { ArtCharDatabase } from \"../Database\";\r\nimport { ImportResult } from \"../exim\";\r\n\r\n/** new prevalidated storage -> new validated storage */\r\nexport function merge(result: ImportResult, base: ArtCharDatabase) {\r\n  const { artifacts: artCounter, weapons: weaponCounter, characters: charCounter, storage } = result\r\n\r\n  // Match artifacts for counter, metadata, and locations\r\n  if (artCounter) {\r\n    const arts = storage.entries.filter(([k]) => k.startsWith(\"artifact_\")).map(([key, v]) => [key, JSON.parse(v) as IArtifact] as const)\r\n    const idsToRemove = new Set(base._getArts().map(a => a.id))\r\n    const hasLocations = arts.some(a => a[1].location)\r\n\r\n    for (const [key, art] of arts) {\r\n      let { duplicated, upgraded } = base.findDuplicates(art)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(a => idsToRemove.has(a.id))\r\n      upgraded = upgraded.filter(a => idsToRemove.has(a.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match: ICachedArtifact | undefined = duplicated[0] ?? upgraded[0]\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in art) && key !== \"location\")\r\n            art[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          art.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) artCounter.unchanged.push(art)\r\n      else if (upgraded.length) artCounter.updated.push(art)\r\n      else artCounter.new.push(art)\r\n      storage.set(key, art)\r\n    }\r\n    artCounter.removed = [...idsToRemove].map(id => base._getArt(id)!)\r\n  } else\r\n    base._getArts().forEach((x, i) => storage.set(`artifact_${i}`, x))\r\n\r\n  // Match weapons for counter, metadata, and locations\r\n  if (weaponCounter) {\r\n    const weapons = storage.entries.filter(([k]) => k.startsWith(\"weapon_\")).map(([key, v]) => [key, JSON.parse(v) as IWeapon] as const)\r\n    const idsToRemove = new Set(base._getWeapons().map(w => w.id))\r\n    const hasLocations = weapons.some(weapon => weapon[1].location)\r\n\r\n    for (const [key, weapon] of weapons) {\r\n      let { duplicated, upgraded } = base.findDuplicateWeapons(weapon)\r\n\r\n      // Don't reuse dups/upgrades\r\n      duplicated = duplicated.filter(w => idsToRemove.has(w.id))\r\n      upgraded = upgraded.filter(w => idsToRemove.has(w.id))\r\n\r\n      // Prefer dups over upgrades\r\n      const match = (duplicated[0] ?? upgraded[0]) as ICachedWeapon | undefined\r\n      if (match) {\r\n        idsToRemove.delete(match.id)\r\n        for (const key in match) {\r\n          if (!(key in weapon) && key !== \"location\")\r\n            weapon[key] = match[key]\r\n        }\r\n        if (!hasLocations)\r\n          weapon.location = match.location\r\n      }\r\n\r\n      if (duplicated.length) weaponCounter.unchanged.push(weapon)\r\n      else if (upgraded.length) weaponCounter.updated.push(weapon)\r\n      else weaponCounter.new.push(weapon)\r\n      storage.set(key, weapon)\r\n    }\r\n    weaponCounter.removed = [...idsToRemove].map(id => base._getWeapon(id)!)\r\n  } else\r\n    base._getWeapons().forEach((x, i) => storage.set(`weapon_${i}`, x))\r\n\r\n  if (charCounter) {\r\n    const newCharEntries = storage.entries.filter(([k]) => k.startsWith(\"char_\")).map(([key, value]) => [key.slice(5), JSON.parse(value) as ICharacter] as const)\r\n    const newCharKeys = new Set(newCharEntries.map(([k]) => k))\r\n    const oldCharKeys = new Set(base._getCharKeys() as string[])\r\n\r\n    charCounter.updated = []\r\n    charCounter.new = []\r\n\r\n    const hasTeamData = newCharEntries.some(([_, char]) => char.team.some(x => x))\r\n\r\n    for (const [key, char] of newCharEntries) {\r\n      const match = base._getChar(key as any)\r\n      if (match) {\r\n        charCounter.updated.push(char)\r\n      } else {\r\n        charCounter.new.push(char)\r\n        continue\r\n      }\r\n\r\n      for (const key in match)\r\n        if (!(key in char))\r\n          char[key] = match[key]\r\n      if (!hasTeamData)\r\n        char.team = match.team\r\n\r\n      storage.set(`char_${key}`, char)\r\n    }\r\n\r\n    charCounter.removed = [...oldCharKeys].filter(([k]) => newCharKeys.has(k)).map(k => base._getChar(k as any)!)\r\n    charCounter.unchanged = []\r\n  } else\r\n    base._getCharKeys().forEach(k => storage.set(`char_${k}`, base._getChar(k)))\r\n}\r\n","import { MainStatKey, SubstatKey } from '../../Types/artifact';\r\nimport { ArtifactSetKey, SlotKey } from \"../../Types/consts\";\r\nimport { ArtCharDatabase } from '../Database';\r\nimport { importGOOD } from './good';\r\n\r\nconst DefaultVersion = \"1\";\r\nconst GetConvertedArtifactsOfVersion: Dict<string, (data: any) => { artifacts: any[] }> = {\r\n  \"1\": importMona1\r\n};\r\n\r\nexport function importMona(dataObj: any, oldDatabase: ArtCharDatabase): ReturnType<typeof importGOOD> {\r\n  const version = dataObj.version ?? DefaultVersion\r\n  const converted = GetConvertedArtifactsOfVersion[version]?.(dataObj)\r\n\r\n  if (!converted)\r\n    return // TODO: Maybe add failure reason, or throws here\r\n\r\n  return importGOOD({\r\n    format: \"GOOD\",\r\n    source: \"mona-uranai\",\r\n    version: 1,\r\n    artifacts: converted.artifacts\r\n  }, oldDatabase)\r\n}\r\n\r\n// backup 0: https://github.com/wormtql/genshin_artifact/blob/main/src/assets/artifacts/data/*/index.js\r\n// backup 1: https://github.com/YuehaiTeam/cocogoat/blob/main/src/App/export/Mona.ts\r\n\r\nfunction importMona1(dataObj: any): { artifacts: any[] } {\r\n  const artifacts: any[] = []\r\n\r\n  for (const property in dataObj) {\r\n    if (!(property in ArtifactSlotKeyMap))\r\n      continue\r\n\r\n    for (const genshinArtArtifact of dataObj[property]) {\r\n      const { setName, star, level, position, mainTag } = genshinArtArtifact\r\n      const raw = {\r\n        setKey: ArtifactSetKeyMap[setName],\r\n        rarity: star,\r\n        level,\r\n        slotKey: ArtifactSlotKeyMap[position],\r\n        mainStatKey: ArtifactMainStatKeyMap[mainTag.name],\r\n        substats: genshinArtArtifact.normalTags.map(({ name, value }) => {\r\n          const key = ArtifactSubStatKeyMap[name]\r\n          return {\r\n            key,\r\n            value: key?.endsWith(\"_\") ?\r\n              Math.round(value * 1000) / 10 : // decimal to percentage\r\n              value,\r\n          }\r\n        }),\r\n      }\r\n      artifacts.push(raw)\r\n    }\r\n  }\r\n\r\n  return { artifacts }\r\n}\r\n\r\n// Referencing https://wormtql.gitbook.io/mona-uranai/ (they don't seem to update this anymore...)\r\n\r\nconst ArtifactSlotKeyMap: Dict<string, SlotKey> = {\r\n  \"flower\": \"flower\",\r\n  \"feather\": \"plume\",\r\n  \"sand\": \"sands\",\r\n  \"cup\": \"goblet\",\r\n  \"head\": \"circlet\",\r\n}\r\n\r\n// Referencing https://github.com/daydreaming666/Amenoma/blob/main/ArtScanner/ArtsInfo.py SetNamesGenshinArt\r\n\r\nconst ArtifactSetKeyMap: Dict<string, ArtifactSetKey> = {\r\n  \"adventurer\": \"Adventurer\",\r\n  \"archaicPetra\": \"ArchaicPetra\",\r\n  \"berserker\": \"Berserker\",\r\n  \"blizzardStrayer\": \"BlizzardStrayer\",\r\n  \"bloodstainedChivalry\": \"BloodstainedChivalry\",\r\n  \"braveHeart\": \"BraveHeart\",\r\n  \"crimsonWitch\": \"CrimsonWitchOfFlames\",\r\n  \"defenderWill\": \"DefendersWill\",\r\n  \"gambler\": \"Gambler\",\r\n  \"gladiatorFinale\": \"GladiatorsFinale\",\r\n  \"heartOfDepth\": \"HeartOfDepth\",\r\n  \"instructor\": \"Instructor\",\r\n  \"lavaWalker\": \"Lavawalker\",\r\n  \"luckyDog\": \"LuckyDog\",\r\n  \"maidenBeloved\": \"MaidenBeloved\",\r\n  \"martialArtist\": \"MartialArtist\",\r\n  \"noblesseOblige\": \"NoblesseOblige\",\r\n  \"prayersForDestiny\": \"PrayersForDestiny\",\r\n  \"prayersForIllumination\": \"PrayersForIllumination\",\r\n  \"prayersForWisdom\": \"PrayersForWisdom\",\r\n  \"prayersToSpringtime\": \"PrayersToSpringtime\",\r\n  \"resolutionOfSojourner\": \"ResolutionOfSojourner\",\r\n  \"retracingBolide\": \"RetracingBolide\",\r\n  \"scholar\": \"Scholar\",\r\n  \"exile\": \"TheExile\",\r\n  \"thunderingFury\": \"ThunderingFury\",\r\n  \"thunderSmoother\": \"Thundersoother\",\r\n  \"tinyMiracle\": \"TinyMiracle\",\r\n  \"travelingDoctor\": \"TravelingDoctor\",\r\n  \"viridescentVenerer\": \"ViridescentVenerer\",\r\n  \"wandererTroupe\": \"WanderersTroupe\",\r\n  \"tenacityOfTheMillelith\": \"TenacityOfTheMillelith\",\r\n  \"paleFlame\": \"PaleFlame\",\r\n  \"emblemOfSeveredFate\": \"EmblemOfSeveredFate\",\r\n  \"shimenawaReminiscence\": \"ShimenawasReminiscence\",\r\n  \"huskOfOpulentDreams\": \"HuskOfOpulentDreams\",\r\n  \"oceanHuedClam\": \"OceanHuedClam\",\r\n  \"EchoesOfAnOffering\": \"EchoesOfAnOffering\",\r\n  \"VermillionHereafter\": \"VermillionHereafter\",\r\n}\r\nconst ArtifactMainStatKeyMap: Dict<string, MainStatKey> = {\r\n  \"cureEffect\": \"heal_\",\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  // \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  // // \"eCritical\": \"\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n  \"thunderBonus\": \"electro_dmg_\",\r\n  \"fireBonus\": \"pyro_dmg_\",\r\n  \"waterBonus\": \"hydro_dmg_\",\r\n  \"iceBonus\": \"cryo_dmg_\",\r\n  \"windBonus\": \"anemo_dmg_\",\r\n  \"rockBonus\": \"geo_dmg_\",\r\n  // \"grassBonus\": \"dendro_dmg_\",  // the day will come...\r\n  \"physicalBonus\": \"physical_dmg_\",\r\n  // \"bonus\": \"\",\r\n  // \"aBonus\": \"\",\r\n  // \"bBonus\": \"\",\r\n  // \"eBonus\": \"\",\r\n  // \"qBonus\": \"\",\r\n}\r\nconst ArtifactSubStatKeyMap: Dict<string, SubstatKey> = {\r\n  \"lifeStatic\": \"hp\",\r\n  \"lifePercentage\": \"hp_\",\r\n  \"attackStatic\": \"atk\",\r\n  \"attackPercentage\": \"atk_\",\r\n  \"defendStatic\": \"def\",\r\n  \"defendPercentage\": \"def_\",\r\n  \"critical\": \"critRate_\",\r\n  \"criticalDamage\": \"critDMG_\",\r\n  \"elementalMastery\": \"eleMas\",\r\n  \"recharge\": \"enerRech_\",\r\n}\r\n","import { faArrowLeft, faFileCode, faFileUpload } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { Upload } from '@mui/icons-material'\r\nimport { Box, Button, CardContent, Divider, Grid, styled, Typography } from '@mui/material'\r\nimport { useContext, useMemo, useState } from \"react\"\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../../Components/Card/CardDark'\r\nimport CardLight from '../../Components/Card/CardLight'\r\nimport { ArtCharDatabase, DatabaseContext } from \"../../Database/Database\"\r\nimport { ImportResult, ImportResultCounter } from '../../Database/exim'\r\nimport { importGOOD } from '../../Database/imports/good'\r\nimport { importMona } from '../../Database/imports/mona'\r\n\r\nconst InvisInput = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadCard() {\r\n  const { database } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\");\r\n  const [data, setdata] = useState(\"\")\r\n  const [filename, setfilename] = useState(\"\")\r\n  const [errorMsg, setErrorMsg] = useState(\"\") // TODO localize error msg\r\n  const dataObj: UploadData | undefined = useMemo(() => {\r\n    if (!data) return\r\n    let parsed: any\r\n    try {\r\n      parsed = JSON.parse(data)\r\n      if (typeof parsed !== \"object\") {\r\n        setErrorMsg(\"uploadCard.error.jsonParse\")\r\n        return\r\n      }\r\n    } catch (e) {\r\n      setErrorMsg(\"uploadCard.error.jsonParse\")\r\n      return\r\n    }\r\n    // Figure out the file format\r\n    if (parsed.version === \"1\" && [\"flower\", \"feather\", \"sand\", \"cup\", \"head\"].some(k => Object.keys(parsed).includes(k))) {\r\n      // Parse as mona format\r\n      const imported = importMona(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.monaInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    } else if (parsed.format === \"GOOD\") {\r\n      // Parse as GOOD format\r\n      const imported = importGOOD(parsed, database)\r\n      if (!imported) {\r\n        setErrorMsg(\"uploadCard.error.goInvalid\")\r\n        return\r\n      }\r\n      return imported\r\n    }\r\n    setErrorMsg(\"uploadCard.error.unknown\")\r\n    return\r\n  }, [data, database])\r\n\r\n  const reset = () => {\r\n    setdata(\"\")\r\n    setfilename(\"\")\r\n  }\r\n  const onUpload = async e => {\r\n    const file = e.target.files[0]\r\n    e.target.value = null // reset the value so the same file can be uploaded again...\r\n    if (file) setfilename(file.name)\r\n    const reader = new FileReader()\r\n    reader.onload = () => setdata(reader.result as string)\r\n    reader.readAsText(file)\r\n  }\r\n  return <CardLight>\r\n    <CardContent sx={{ py: 1 }}><Trans t={t} i18nKey=\"settings:uploadCard.title\" /></CardContent>\r\n    <CardContent>\r\n      <Grid container spacing={2} sx={{ mb: 1 }}>\r\n        <Grid item>\r\n          <label htmlFor=\"icon-button-file\">\r\n            <InvisInput accept=\".json\" id=\"icon-button-file\" type=\"file\" onChange={onUpload} />\r\n            <Button component=\"span\" startIcon={<Upload />}>Upload</Button>\r\n          </label>\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <CardDark sx={{ px: 2, py: 1 }}>\r\n            <Typography>{filename ? <span><FontAwesomeIcon icon={faFileCode} /> {filename}</span> : <span><FontAwesomeIcon icon={faArrowLeft} /> <Trans t={t} i18nKey=\"settings:uploadCard.hint\" /></span>}</Typography>\r\n          </CardDark>\r\n        </Grid>\r\n      </Grid>\r\n      <Typography gutterBottom variant=\"caption\"><Trans t={t} i18nKey=\"settings:uploadCard.hintPaste\" /></Typography>\r\n      <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", mb: 2, resize: \"vertical\" }} value={data} onChange={e => setdata(e.target.value)} />\r\n      {UploadInfo(dataObj) ?? errorMsg}\r\n    </CardContent>\r\n    {UploadAction(dataObj, reset)}\r\n  </CardLight>\r\n}\r\n\r\nfunction UploadInfo(data: UploadData | undefined) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOODUploadInfo data={data} />\r\n  }\r\n}\r\nfunction UploadAction(data: UploadData | undefined, reset: () => void) {\r\n  switch (data?.type) {\r\n    case \"GOOD\": return <GOUploadAction data={data} reset={reset} />\r\n  }\r\n}\r\n\r\nfunction GOODUploadInfo({ data: { source, artifacts, characters, weapons }, data }: { data: ImportResult }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  return <CardDark>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey=\"uploadCard.dbSource\" /><strong> {source}</strong>\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent >\r\n      <Grid container spacing={2}>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={artifacts} type=\"arts\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={weapons} type=\"weapons\" />\r\n        </Grid>\r\n        <Grid item flexGrow={1}>\r\n          <MergeResult result={characters} type=\"chars\" />\r\n        </Grid>\r\n      </Grid>\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\nfunction MergeResult({ result, type }: { result?: ImportResultCounter<any>, type: string }) {\r\n  const { t } = useTranslation(\"settings\")\r\n  if (!result) return null\r\n  return <CardLight >\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography>\r\n        <Trans t={t} i18nKey={`count.${type}`} /> {result.total ?? 0}\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent>\r\n      <Typography><Trans t={t} i18nKey=\"count.new\" /> <strong>{result.new.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.updated\" /> <strong>{result.updated.length}</strong> / {result.total}</Typography>\r\n      <Typography><Trans t={t} i18nKey=\"count.unchanged\" /> <strong>{result.unchanged.length}</strong> / {result.total}</Typography>\r\n      <Typography color=\"warning.main\"><Trans t={t} i18nKey=\"count.removed\" /> <strong>{result.removed.length}</strong></Typography>\r\n      {!!result.invalid?.length && <div>\r\n        <Typography color=\"error.main\"><Trans t={t} i18nKey=\"count.invalid\" /> <strong>{result.invalid.length}</strong> / {result.total}</Typography>\r\n        <Box component=\"textarea\" sx={{ width: \"100%\", fontFamily: \"monospace\", minHeight: \"10em\", resize: \"vertical\" }} value={JSON.stringify(result.invalid, undefined, 2)} disabled />\r\n      </div>}\r\n    </CardContent>\r\n  </CardLight>\r\n}\r\n\r\nfunction GOUploadAction({ data: { storage }, data, reset }: { data: ImportResult, reset: () => void }) {\r\n  const { database, setDatabase } = useContext(DatabaseContext)\r\n  const { t } = useTranslation(\"settings\")\r\n  const dataValid = data.characters?.total || data.artifacts?.total || data.weapons?.total\r\n  const replaceDB = () => {\r\n    database.storage.copyFrom(storage)\r\n    setDatabase(new ArtCharDatabase(database.storage, true))\r\n    reset()\r\n  }\r\n\r\n  return <><Divider /><CardContent sx={{ py: 1 }}>\r\n    <Button color={dataValid ? \"success\" : \"error\"} disabled={!dataValid} onClick={replaceDB} startIcon={<FontAwesomeIcon icon={faFileUpload} />}><Trans t={t} i18nKey=\"settings:uploadCard.replaceDatabase\" /></Button>\r\n  </CardContent></>\r\n}\r\n\r\ntype UploadData = ImportResult\r\n","import { CardContent, Divider, Typography } from '@mui/material'\r\nimport ReactGA from 'react-ga'\r\nimport { Trans, useTranslation } from \"react-i18next\"\r\nimport CardDark from '../Components/Card/CardDark'\r\nimport DownloadCard from './Components/DownloadCard'\r\nimport LanguageCard from './Components/LanguageCard'\r\nimport TCToggleCard from './Components/TCToggleCard'\r\nimport UploadCard from './Components/UploadCard'\r\n\r\nexport default function SettingsDisplay() {\r\n  const { t } = useTranslation([\"settings\"]);\r\n  ReactGA.pageview('/setting')\r\n\r\n  return <CardDark sx={{ my: 1 }}>\r\n    <CardContent sx={{ py: 1 }}>\r\n      <Typography variant=\"subtitle1\">\r\n        <Trans t={t} i18nKey=\"title\" />\r\n      </Typography>\r\n    </CardContent>\r\n    <Divider />\r\n    <CardContent sx={{ display: \"flex\", flexDirection: \"column\", gap: 2 }}>\r\n      <LanguageCard />\r\n      <DownloadCard />\r\n      <UploadCard />\r\n      <TCToggleCard />\r\n    </CardContent>\r\n  </CardDark>\r\n}\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DatabaseContext } from \"../Database/Database\";\r\n\r\nexport default function useDBState<O extends object>(key: string, init: () => O): [O, (value: Partial<O>) => void] {\r\n  const { database } = useContext(DatabaseContext)\r\n  const [state, setState] = useState(database._getState<O>(key, init))\r\n\r\n  useEffect(() => setState(database._getState(key, init)), [database, key, init])\r\n  useEffect(() =>\r\n    key ? database.followState(key, setState) : undefined,\r\n    [key, setState, database])\r\n  const updateState = useCallback(\r\n    value => database.updateState(key, value),\r\n    [database, key],\r\n  )\r\n\r\n  return [state, updateState]\r\n}\r\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7 7-7z\"\n}), 'Download');","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["CardDark","styled","Card","backgroundColor","theme","palette","contentDark","main","CardLight","contentLight","DropdownButton","title","children","id","props","useState","anchorEl","setAnchorEl","open","Boolean","handleClick","useCallback","event","currentTarget","handleClose","Suspense","fallback","endIcon","width","undefined","onClick","onClose","MenuListProps","height","SqBadge","name","slot","color","display","padding","fontSize","fontWeight","lineHeight","textAlign","whiteSpace","verticalAlign","borderRadius","contrastText","initGlobalSettings","tcMode","GOSource","exportGOOD","storage","format","dbVersion","currentDBVersion","source","version","characters","entries","filter","startsWith","map","value","result","JSON","parse","buildSettings","builds","buildDate","artifacts","weapons","states","key","split","DownloadCard","useContext","DatabaseContext","database","setDatabase","t","useTranslation","numChar","_getCharKeys","length","numArt","_getArts","numWeapon","_getWeapons","downloadValid","deleteDB","clear","ArtCharDatabase","copyToClipboard","navigator","clipboard","writeText","stringify","then","alert","catch","console","error","download","date","Date","JSONStr","filename","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","a","document","createElement","href","encodeURIComponent","target","body","appendChild","click","removeChild","CardContent","sx","py","Typography","variant","Trans","i18nKey","Divider","Grid","container","mb","spacing","item","xs","md","Button","disabled","startIcon","Download","flexGrow","icon","faClipboard","faTrashAlt","LanguageCard","LanguageDropdown","nativeLanguages","i18n","onSetLanguage","lang","changeLanguage","currentLang","languages","fullWidth","language","languageCodeList","MenuItem","selected","TCToggleCard","useDBState","setGlobalSettings","gutterBottom","CheckBox","CheckBoxOutlineBlank","createSvgIcon","_jsx","d","importGOOD","data","oldDatabase","SandboxStorage","type","total","invalid","new","updated","unchanged","removed","counter","forEach","i","parseArtifact","set","push","w","parsed","parseWeapon","c","parseCharacter","setDBVersion","s","state","parseImport","migrate","base","artCounter","weaponCounter","charCounter","arts","v","idsToRemove","Set","hasLocations","some","location","art","findDuplicates","duplicated","upgraded","has","match","delete","_getArt","x","weapon","findDuplicateWeapons","_getWeapon","newCharEntries","slice","newCharKeys","oldCharKeys","hasTeamData","team","char","_getChar","k","merge","importGOOD1","GetConvertedArtifactsOfVersion","dataObj","property","ArtifactSlotKeyMap","genshinArtArtifact","setName","star","level","position","mainTag","raw","setKey","ArtifactSetKeyMap","rarity","slotKey","mainStatKey","ArtifactMainStatKeyMap","substats","normalTags","ArtifactSubStatKeyMap","endsWith","Math","round","InvisInput","UploadCard","setdata","setfilename","errorMsg","setErrorMsg","useMemo","e","Object","keys","includes","imported","converted","importMona","onUpload","file","files","reader","FileReader","onload","readAsText","htmlFor","accept","onChange","component","Upload","px","faFileCode","faArrowLeft","Box","fontFamily","minHeight","resize","UploadInfo","UploadAction","GOODUploadInfo","reset","GOUploadAction","MergeResult","dataValid","copyFrom","faFileUpload","SettingsDisplay","ReactGA","my","flexDirection","gap","init","_getState","setState","useEffect","followState","updateState","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err"],"sourceRoot":""}