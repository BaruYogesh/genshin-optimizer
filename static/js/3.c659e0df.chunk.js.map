{"version":3,"sources":["Util/ReactUtil.js","Artifact/ArtifactCard.jsx","Artifact/PercentBadge.jsx","Components/WIPComponent.js","Character/CharacterDisplay/CharacterArtifactPane.js","Character/CharacterDisplay/CharacterOverviewPane.js","Character/CharacterDisplay/CharacterTalentPane.js","Character/CharacterDisplayCard.js"],"names":["useForceUpdate","useState","update","useCallback","ArtifactCard","artifactId","artifactObj","editable","onEdit","onDelete","assumeFull","forceUpdateHook","useEffect","Artifact","getDataImport","then","ArtifactDatabase","registerArtListener","unregisterArtListener","equipOnChar","charKey","equipArtifactOnChar","art","get","maximumEfficiency","substatsValidation","setKey","slotKey","numStars","level","mainStatKey","substats","location","lock","currentEfficiency","mainStatLevel","assFullColor","mainStatVal","className","getMainStatValue","Stat","getStatUnit","artifactValid","every","sstat","key","value","rolls","length","border","bg","text","Header","xs","md","src","getPieceIcon","thumbnail","getPieceName","getSlotNameWithIcon","Body","Title","getSetName","stars","getStatName","map","stat","i","numRolls","efficiency","effOpacity","statName","variant","toFixed","style","opacity","percent","valid","Footer","Toggle","size","Character","getName","Menu","Item","onClick","Divider","onSelect","ckey","placement","overlay","disabled","pointerEvents","icon","faLock","faLockOpen","Boolean","faEdit","faTrashAlt","PercentBadge","props","children","badgeColor","isNaN","Math","floor","WIPComponent","CharacterArtifactPane","character","characterKey","artifactConditionals","equippedBuild","newBuild","forceUpdate","setState","setOverride","artifacts","build","artifactsAssumeFull","finalStats","statKeys","getDisplayStatKeys","hasTalentPage","Row","Col","DamageOptionsAndCalculation","Card","StatDisplayComponent","statsDisplayKeys","Button","equipArtifacts","artifactIds","Alert","sm","lg","Object","entries","getSetEffects","setToSlots","setNumKeyArr","setNumKey","setStats","getArtifactSetNumStats","conditionalNum","conditional","getSetEffectConditional","ConditionalsUtil","getConditionalNum","srcKey","srcKey2","getConditionalStats","forEach","statKey","val","conditionalElement","ConditionalSelector","setConditional","cnum","state","setStateArtifactConditional","defEle","Badge","getSetEffectText","getSlotKeys","find","CharacterOverviewPane","constellation","setConstellation","editLevel","setEditLevel","elementKey","getElementalKey","weaponTypeKey","getWeaponTypeKey","getStatValueWithOverride","Img","getCard","Image","Assets","elements","weaponTypes","getStar","colored","InputGroup","Prepend","Text","CustomFormControl","onValueChange","clamp","Append","faUndo","getLevel","levelKey","OverlayTrigger","Tooltip","faSave","getConstellationName","Array","keys","getConstellationImg","roundedCircle","WeaponStatsEditorCard","MainStatsCards","StatItem","StatIconEle","getStatVariant","fixedUnit","WeaponStatsCard","title","stats","Fragment","mkey","modifier","reduce","accu","multiplier","editing","SetEditing","showDescription","setShowDescription","weapon","setStateWeapon","subStatKey","Weapon","getWeaponSubStatKey","weaponDisplayMainVal","overrideMainVal","getWeaponMainStatVal","weaponDisplaySubVal","overrideSubVal","getWeaponSubStatVal","weaponPassiveName","getWeaponPassiveName","weaponBonusStats","getWeaponBonusStat","refineIndex","undefined","conditionalStats","getWeaponConditionalStat","getWeaponConditional","conditionalEle","faQuoteLeft","getWeaponImg","getWeaponRarity","DropdownButton","getWeaponName","reverse","star","arr","Dropdown","ItemText","getWeaponsOfType","filter","rarity","weaponObj","name","getLevelName","LevelNameData","StatInput","faGavel","placeholder","defaultValue","getWeaponPassiveDescription","atk","getWeaponDescription","editingOther","SetEditingOther","editingMisc","SetEditingMisc","additionalKeys","displayStatKeys","push","editStatKeys","otherStatKeys","getElementalKeys","ele","miscStatkeys","specializedStatKey","specializedStatVal","specializedStatUnit","isPercentSpecialStatSelect","displayNewBuildProps","getStatNamePretty","getBaseStatValue","getStatNameWithPercent","as","CharacterSpecializedStatKey","float","StatDisplay","hasOverride","getStatNameRaw","xl","CharacterTalentPane","ascension","getAscension","skillDisplayProps","ReactionDisplay","tKey","tText","SkillDisplayCard","talentKey","subtitle","getTalent","asc","enabled","onClickTitle","ReactionComponents","superconduct_hit","sKey","electro","cryo","electrocharged_hit","hydro","overloaded_hit","pyro","pyro_swirl_hit","swirlEleToDisplay","setele","element","shattered_hit","information","faQuestionCircle","cursor","crystalize_hit","geo","charEleKey","eleInterArr","ElementToReactionKeys","includes","Ele","anemo","modifiersToFields","modifiers","mStatKey","formulaText","printStat","fixed","unit","statsToFields","statVal","flat","talentLimits","talentLevelKeys","autoInfused","otherProps","header","infuseBtn","isAutoInfusable","eleKey","getElementalName","talentLvlKey","talentLvlKeyRaw","levelBoost","getTalentLevelBoost","newTalentLevelKey","stateTalentLevelKeys","talentStats","getTalentStats","statsEle","ListGroup","field","FieldDisplay","index","getTalentImg","getTalentName","Subtitle","getTalentDocument","section","talentText","fields","talentConditionals","conditionalKey","conditionalFields","getTalentConditionalStats","getTalentConditionalFields","condition","condField","compareAgainstEquipped","fieldText","getTalentFieldValue","fieldVariant","fieldFormulaText","formulaTextOverlay","fieldVal","formula","fixedVal","fieldEquippedVal","parseInt","diff","CustomMenu","React","forwardRef","ref","labeledBy","minWidth","aria-labelledby","Children","toArray","child","CharacterDisplayCard","forceUpdateComponent","CharacterDatabase","setCharacterKey","getInitialState","char","getIntialWeapon","updateCharacter","setLevelKey","baseStatOverrides","Promise","all","getCharacterDataImport","getWeaponDataImport","deepClone","prevProps","this","footer","onClose","tabName","hitMode","reactionMode","flexArts","calculateBuild","HeaderIconDisplay","getThumb","commonPaneProps","u","ButtonGroup","DropdownToggle","getAllCharacterKeys","getlevelNames","getlevelKeys","lvlKey","faTimes","Tab","Container","defaultActiveKey","mountOnEnter","unmountOnExit","Nav","Link","eventKey","Content","Pane","Component","initialState","equippedArtifacts","WeaponLevelKeys","auto","skill","burst"],"mappings":"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","file":"static/js/3.c659e0df.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\"\r\n\r\nexport function useForceUpdate() {\r\n  const [, update] = useState()\r\n  const forceUpdateHook = useCallback(() => update({}), [])\r\n  return forceUpdateHook\r\n}","import { faEdit, faLock, faLockOpen, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport Badge from 'react-bootstrap/Badge';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Image from 'react-bootstrap/Image';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport Character from '../Character/Character';\r\nimport { CharacterSelectionDropdownList } from '../Components/CharacterSelection';\r\nimport { Stars } from '../Components/StarDisplay';\r\nimport ArtifactDatabase from '../Database/ArtifactDatabase';\r\nimport Stat from '../Stat';\r\nimport { useForceUpdate } from '../Util/ReactUtil';\r\nimport Artifact from './Artifact';\r\nimport PercentBadge from './PercentBadge';\r\nexport default function ArtifactCard({ artifactId, artifactObj, editable, onEdit, onDelete, assumeFull = false }) {\r\n  const forceUpdateHook = useForceUpdate()\r\n  useEffect(() => {\r\n    Artifact.getDataImport()?.then(forceUpdateHook)\r\n    if (artifactId) ArtifactDatabase.registerArtListener(artifactId, forceUpdateHook)\r\n    return () => {\r\n      if (artifactId) ArtifactDatabase.unregisterArtListener(artifactId, forceUpdateHook)\r\n    }\r\n  }, [artifactId, forceUpdateHook])\r\n  const equipOnChar = useCallback(\r\n    (charKey) => Artifact.equipArtifactOnChar(artifactId, charKey),\r\n    [artifactId],\r\n  )\r\n  if (!artifactId && !artifactObj) return null;\r\n  const art = artifactObj ? artifactObj : ArtifactDatabase.get(artifactId);\r\n  if (!art) return null;\r\n  if (!art.maximumEfficiency) Artifact.substatsValidation(art)\r\n  const { setKey, slotKey, numStars = 0, level = 0, mainStatKey, substats = [], location = \"\", lock, currentEfficiency = 0, maximumEfficiency = 0 } = art\r\n  let mainStatLevel = assumeFull ? numStars * 4 : level\r\n  let assFullColor = assumeFull && level !== numStars * 4\r\n  let mainStatVal = <span className={assFullColor ? \"text-orange\" : \"\"}>{Artifact.getMainStatValue(mainStatKey, numStars, mainStatLevel, \"\")}{Stat.getStatUnit(mainStatKey)}</span>\r\n  let artifactValid = substats.every(sstat => (!sstat.key || (sstat.key && sstat.value && sstat?.rolls?.length)))\r\n\r\n  return (<Card className=\"h-100\" border={`${numStars}star`} bg=\"lightcontent\" text=\"lightfont\">\r\n    <Card.Header className=\"p-0\">\r\n      <Row>\r\n        <Col xs={2} md={3}>\r\n          <Image src={Artifact.getPieceIcon(setKey, slotKey)} className={`w-100 h-auto grad-${numStars}star m-1`} thumbnail />\r\n        </Col>\r\n        <Col className=\"pt-3\">\r\n          <h6><b>{Artifact.getPieceName(setKey, slotKey, \"Unknown Piece Name\")}</b></h6>\r\n          <div>{Artifact.getSlotNameWithIcon(slotKey)}{` +${level}`}</div>\r\n        </Col>\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body className=\"d-flex flex-column py-2\">\r\n      <Card.Title>\r\n        <div>{Artifact.getSetName(setKey, \"Artifact Set\")}</div>\r\n        <small className=\"text-halfsize\"><Stars stars={numStars} /></small>\r\n      </Card.Title>\r\n      <h5 className=\"mb-1\">\r\n        <b>{Stat.getStatName(mainStatKey)} {mainStatVal}</b>\r\n      </h5>\r\n      <Row className=\"mb-0\">\r\n        {substats.map((stat, i) => {\r\n          if (!stat || !stat.value) return null\r\n          let numRolls = stat?.rolls?.length || 0\r\n          let efficiency = stat?.efficiency || 0\r\n          let effOpacity = 0.3 + efficiency * 0.7\r\n          let statName = Stat.getStatName(stat.key)\r\n          return (<Col key={i} xs={12}>\r\n            <Badge variant={numRolls ? `${numRolls}roll` : \"danger\"} className=\"text-darkcontent\"><b>{numRolls ? numRolls : \"?\"}</b></Badge>{\" \"}\r\n            <span className={`text-${numRolls}roll`}>{statName}{`+${Stat.getStatUnit(stat.key) ? stat.value.toFixed(1) : stat.value}${Stat.getStatUnit(stat.key)}`}</span>\r\n            <span className=\"float-right\" style={{ opacity: effOpacity }}>{efficiency.toFixed(1)}%</span>\r\n          </Col>)\r\n        })}\r\n      </Row>\r\n      <Row className=\"mt-auto\">\r\n        <Col>Current SS Eff.: <PercentBadge percent={currentEfficiency} valid={artifactValid} className=\"float-right\">\r\n          {currentEfficiency?.toFixed(2) ?? currentEfficiency + \"%\"}\r\n        </PercentBadge></Col>\r\n        {currentEfficiency !== maximumEfficiency && <Col className=\"text-right\">Max SS Eff.: <PercentBadge percent={maximumEfficiency} valid={artifactValid}>\r\n          {maximumEfficiency?.toFixed(2) ?? maximumEfficiency + \"%\"}\r\n        </PercentBadge></Col>}\r\n      </Row>\r\n    </Card.Body>\r\n\r\n    <Card.Footer className=\"pr-3\">\r\n      <Row className=\"d-flex justify-content-between no-gutters\">\r\n        {editable ? <Col xs=\"auto\">\r\n          <Dropdown>\r\n            <Dropdown.Toggle size=\"sm\" className=\"text-left\">{Character.getName(location, \"Inventory\")}</Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item onClick={() => equipOnChar(\"\")}>Inventory</Dropdown.Item>\r\n              <Dropdown.Divider />\r\n              <CharacterSelectionDropdownList onSelect={ckey => equipOnChar(ckey)} />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Col> : <Col xs=\"auto\"><b>{Character.getName(location, \"Inventory\")}</b></Col>}\r\n        <Col xs=\"auto\">\r\n          <ButtonGroup>\r\n            {editable ? <OverlayTrigger placement=\"top\"\r\n              overlay={<Tooltip>Locking a artifact will prevent the build generator from picking it for builds. Artifacts on characters are locked by default.</Tooltip>}>\r\n              <span className=\"d-inline-block\">\r\n                <Button size=\"sm\"\r\n                  disabled={location}\r\n                  style={location ? { pointerEvents: 'none' } : {}}\r\n                  onClick={() => {\r\n                    art.lock = !lock\r\n                    ArtifactDatabase.update(art);\r\n                  }}>\r\n                  <FontAwesomeIcon icon={(lock || location) ? faLock : faLockOpen} className=\"fa-fw\" />\r\n                </Button>\r\n              </span>\r\n            </OverlayTrigger> : null}\r\n            {Boolean(onEdit) && <Button variant=\"info\" size=\"sm\"\r\n              onClick={onEdit}>\r\n              <FontAwesomeIcon icon={faEdit} className=\"fa-fw\" />\r\n            </Button>}\r\n            {Boolean(onDelete) && <Button variant=\"danger\" size=\"sm\"\r\n              onClick={onDelete}>\r\n              <FontAwesomeIcon icon={faTrashAlt} className=\"fa-fw\" />\r\n            </Button>}\r\n          </ButtonGroup>\r\n        </Col>\r\n      </Row>\r\n    </Card.Footer>\r\n  </Card>)\r\n}\r\n","import { Badge } from 'react-bootstrap';\r\n\r\nexport default function PercentBadge(props) {\r\n  let { percent, valid, children } = props\r\n  let badgeColor = !valid ? \"danger\" : (isNaN(percent) ? \"secondary\" : `${Math.floor(percent * 0.05) + 1}roll`)\r\n  return <Badge variant={badgeColor} className={badgeColor === \"secondary\" ? \"\" : \"text-darkcontent\"}>{children}</Badge>\r\n}\r\n","import { OverlayTrigger, Tooltip } from \"react-bootstrap\"\r\n\r\nconst WIPComponent = ({ children }) =>\r\n  <OverlayTrigger\r\n    overlay={<Tooltip>Work In Progress</Tooltip>}\r\n  >\r\n    <span>\r\n      {children}\r\n    </span>\r\n  </OverlayTrigger>\r\n\r\nexport default WIPComponent","import React from 'react';\r\nimport { Alert, Badge, Button, Card, Col, Row } from 'react-bootstrap';\r\nimport Artifact from '../../Artifact/Artifact';\r\nimport ArtifactCard from '../../Artifact/ArtifactCard';\r\nimport ConditionalSelector from '../../Components/ConditionalSelector';\r\nimport Stat from \"../../Stat\";\r\nimport ConditionalsUtil from '../../Util/ConditionalsUtil';\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from './DamageOptionsAndCalculation';\r\nimport StatDisplayComponent from './StatDisplayComponent';\r\n\r\nfunction CharacterArtifactPane({ character, character: { characterKey, artifactConditionals }, equippedBuild, newBuild, editable, forceUpdate, setState, setOverride, artifacts }) {\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let artifactsAssumeFull = newBuild ? newBuild.finalStats?.artifactsAssumeFull : character.artifactsAssumeFull\r\n  if (newBuild) artifactConditionals = newBuild.artifactConditionals\r\n  const statKeys = Character.getDisplayStatKeys(build.finalStats)\r\n  const setStateArtifactConditional = (setKey, setNumKey, conditionalNum) => setState?.(state =>\r\n    ({ artifactConditionals: ConditionalsUtil.setConditional(state.artifactConditionals, { srcKey: setKey, srcKey2: setNumKey }, conditionalNum) }))\r\n  return <>\r\n    {Character.hasTalentPage(characterKey) && <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>}\r\n    <Row>\r\n      <Col className=\"mb-2\">\r\n        <Card className=\"h-100\" bg=\"lightcontent\" text=\"lightfont\">\r\n          <Card.Body>\r\n            <StatDisplayComponent {...{ character, equippedBuild, newBuild, statsDisplayKeys: statKeys, editable }} />\r\n          </Card.Body>\r\n          {newBuild ? <Card.Footer>\r\n            <Button onClick={() => {\r\n              Character.equipArtifacts(characterKey, newBuild.artifactIds)\r\n              forceUpdate?.()\r\n            }}>Equip All artifacts to current character</Button>\r\n            {artifactsAssumeFull && <Alert className=\"float-right text-right mb-0 py-2\" variant=\"orange\" ><b>Assume Main Stats are Fully Leveled</b></Alert>}\r\n          </Card.Footer> : null}\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      <Col>\r\n        <Row>\r\n          <Col sm={6} lg={4} className=\"mb-2\">\r\n            <Card className=\"h-100 d-flex flex-column\" bg=\"lightcontent\" text=\"lightfont\">\r\n              <Card.Header>Artifact Set Effects</Card.Header>\r\n              <Card.Body className=\"flex-grow-1\">\r\n                <Row>\r\n                  {Object.entries(Artifact.getSetEffects(build.setToSlots)).map(([setKey, setNumKeyArr]) =>\r\n                    <Col key={setKey} xs={12} className=\"mb-2\">\r\n                      <h5>{Artifact.getSetName(setKey)}</h5>\r\n                      <Row>\r\n                        {setNumKeyArr.map(setNumKey => {\r\n                          let setStats = Artifact.getArtifactSetNumStats(setKey, setNumKey)\r\n                          let conditionalNum = 0;\r\n                          let conditional = Artifact.getSetEffectConditional(setKey, setNumKey)\r\n                          if (conditional) {\r\n                            conditionalNum = ConditionalsUtil.getConditionalNum(artifactConditionals, { srcKey: setKey, srcKey2: setNumKey })\r\n                            Object.entries(Artifact.getConditionalStats(setKey, setNumKey, conditionalNum)).forEach(([statKey, val]) =>\r\n                              setStats[statKey] = (setStats[statKey] || 0) + val)\r\n                          }\r\n                          let conditionalElement = <ConditionalSelector\r\n                            disabled={newBuild ? true : false}\r\n                            conditional={conditional}\r\n                            conditionalNum={conditionalNum}\r\n                            setConditional={(cnum) => setStateArtifactConditional(setKey, setNumKey, cnum)}\r\n                            defEle={<Badge variant=\"success\">{setNumKey}-Set</Badge>}\r\n                          />\r\n                          return <Col key={setNumKey} xs={12} className=\"mb-2\">\r\n                            <h6>{conditionalElement} {Artifact.getSetEffectText(setKey, setNumKey, build.finalStats)}</h6>\r\n                            {setStats ? <Row>\r\n                              {Object.entries(setStats).map(([statKey, val]) =>\r\n                                <Col xs={12} key={statKey}>{Stat.getStatName(statKey)}: {val}{Stat.getStatUnit(statKey)}</Col>)}\r\n                            </Row> : null}\r\n                          </Col>\r\n                        })}\r\n                      </Row>\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n              </Card.Body>\r\n            </Card>\r\n          </Col>\r\n          {artifacts ?\r\n            Artifact.getSlotKeys().map(slotKey => {\r\n              const art = artifacts.find(art => art.slotKey === slotKey)\r\n              return art ? <Col sm={6} lg={4} key={slotKey} className=\"mb-2\">\r\n                <ArtifactCard artifactObj={art} />\r\n              </Col> : null\r\n            }) : Artifact.getSlotKeys().map(slotKey =>\r\n              build.artifactIds[slotKey] ? <Col sm={6} lg={4} key={build.artifactIds[slotKey]} className=\"mb-2\">\r\n                <ArtifactCard artifactId={build.artifactIds[slotKey]} editable={Boolean(forceUpdate)} assumeFull={artifactsAssumeFull} />\r\n              </Col> : null\r\n            )}\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  </>\r\n}\r\nexport default CharacterArtifactPane\r\n","import { faEdit, faGavel, faQuoteLeft, faSave, faUndo } from \"@fortawesome/free-solid-svg-icons\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport React, { useState } from \"react\"\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, InputGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\"\r\nimport Assets from \"../../Assets/Assets\"\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\"\r\nimport CustomFormControl from \"../../Components/CustomFormControl\"\r\nimport { Stars } from \"../../Components/StarDisplay\"\r\nimport StatDisplay from \"../../Components/StatDisplay\"\r\nimport { StatIconEle } from \"../../Components/StatIcon\"\r\nimport { CharacterSpecializedStatKey } from \"../../Data/CharacterData\"\r\nimport { LevelNameData } from \"../../Data/WeaponData\"\r\nimport Stat from \"../../Stat\"\r\nimport { clamp } from \"../../Util/Util\"\r\nimport Weapon from \"../../Weapon/Weapon\"\r\nimport Character from \"../Character\"\r\nimport StatInput from \"../StatInput\"\r\nexport default function CharacterOverviewPane(props) {\r\n  let { character, character: { characterKey, constellation }, editable, setOverride, setConstellation } = props\r\n  let [editLevel, setEditLevel] = useState(false)\r\n  let elementKey = Character.getElementalKey(characterKey)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let level = Character.getStatValueWithOverride(character, \"characterLevel\")\r\n  return <Row>\r\n    <Col xs={12} md={3} >\r\n      {/* Image card with star and name and level */}\r\n      <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n        <Card.Img src={Character.getCard(characterKey)} className=\"w-100 h-auto\" />\r\n        <Card.Body>\r\n          <Row>\r\n            <Col xs={12}>\r\n              <h3>{Character.getName(characterKey)} <Image src={Assets.elements[elementKey]} className=\"inline-icon\" /> <Image src={Assets.weaponTypes?.[weaponTypeKey]} className=\"inline-icon\" /></h3>\r\n              <h6><Stars stars={Character.getStar(characterKey)} colored /></h6>\r\n            </Col>\r\n            <Col>\r\n              {editLevel ? <Row><Col>\r\n                <InputGroup >\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Lvl.</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <CustomFormControl onValueChange={(val) => setOverride(\"characterLevel\", clamp(val, 1, 90))} value={level} />\r\n                  <InputGroup.Append>\r\n                    <Button>\r\n                      <FontAwesomeIcon icon={faUndo} size=\"sm\" onClick={() => setOverride(\"characterLevel\", Character.getLevel(character.levelKey))} />\r\n                    </Button>\r\n                  </InputGroup.Append>\r\n                  <InputGroup.Append>\r\n                    <OverlayTrigger\r\n                      placement=\"bottom\"\r\n                      overlay={<Tooltip>Override the level value for calculations. Does not change Stats.</Tooltip>}\r\n                    >\r\n                      <Button variant=\"danger\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                        <span><FontAwesomeIcon icon={faSave} /></span>\r\n                      </Button>\r\n                    </OverlayTrigger>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n              </Col></Row> :\r\n                <Row>\r\n                  <Col>\r\n                    <h5>Level: {level}</h5>\r\n                  </Col>\r\n                  {editable ? <Col xs=\"auto\" className=\"pr-1 pl-1\">\r\n                    <Button variant=\"info\" onClick={() => setEditLevel(!editLevel)} size=\"sm\">\r\n                      <span><FontAwesomeIcon icon={faEdit} /></span>\r\n                    </Button>\r\n                  </Col> : null}\r\n                </Row>}\r\n            </Col>\r\n            <Col xs={12}>\r\n              <Row>\r\n                <Col xs={12}><h5>{Character.getConstellationName(characterKey)}</h5></Col>\r\n                <Col>\r\n                  <Row className=\"px-2\">\r\n                    {[...Array(6).keys()].map(i =>\r\n                      <Col xs={4} className=\"p-1\" key={i}>\r\n                        <Image src={Character.getConstellationImg(characterKey, i)} className={`w-100 h-auto ${constellation > i ? \"\" : \"overlay-dark\"} cursor-pointer`}\r\n                          roundedCircle onClick={editable ? (() =>\r\n                            setConstellation((i + 1) === constellation ? i : i + 1)) : null} />\r\n                      </Col>)}\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n    <Col xs={12} md={9} >\r\n      <WeaponStatsEditorCard {...props} />\r\n      <MainStatsCards {...props} />\r\n    </Col>\r\n  </Row >\r\n}\r\nfunction StatItem({ statKey, val }) {\r\n  if (!statKey) return null\r\n  return <Col xs={12} lg={6} className=\"px-3\">\r\n    <span><b>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</b></span>\r\n    <span className={`float-right text-right text-${Stat.getStatVariant(statKey)}`} >{val?.toFixed?.(Stat.fixedUnit(statKey)) || val}{Stat.getStatUnit(statKey)}</span>\r\n  </Col>\r\n}\r\nfunction WeaponStatsCard({ title, stats = {}, finalStats = {} }) {\r\n  if (Object.keys(stats ?? {}).length === 0) return null\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header className=\"py-2 px-3\">{title}</Card.Header>\r\n    <Card.Body className=\"py-2 px-0\"><Row>\r\n      {Object.entries(stats).map(([key, val]) => key === \"modifiers\" ? <React.Fragment key={key} >{Object.entries(val ?? {}).map(([mkey, modifier]) =>\r\n        <StatItem key={mkey} statKey={mkey} val={Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0)} />)}</React.Fragment>\r\n        : <StatItem key={key} statKey={key} val={val} />)}\r\n    </Row></Card.Body>\r\n  </Card>\r\n}\r\nfunction WeaponStatsEditorCard(props) {\r\n  let [editing, SetEditing] = useState(false)\r\n  let [showDescription, setShowDescription] = useState(false)\r\n  let { character, character: { characterKey, weapon = {} }, editable, setState, equippedBuild, newBuild } = props\r\n\r\n  //choose which one to display stats for\r\n  let build = newBuild ? newBuild : equippedBuild\r\n\r\n  const setStateWeapon = (key, value) => setState(state => {\r\n    //reset the conditionalNum when we switch weapons\r\n    if (key === \"key\") state.weapon.conditionalNum = 0\r\n    state.weapon[key] = value\r\n    return { weapon: state.weapon }\r\n  })\r\n  let subStatKey = Weapon.getWeaponSubStatKey(weapon.key)\r\n  let weaponTypeKey = Character.getWeaponTypeKey(characterKey)\r\n  let weaponDisplayMainVal = weapon.overrideMainVal || Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)\r\n  let weaponDisplaySubVal = weapon.overrideSubVal || Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)\r\n  let weaponPassiveName = Weapon.getWeaponPassiveName(weapon.key)\r\n  let weaponBonusStats = Weapon.getWeaponBonusStat(weapon.key, weapon.refineIndex, undefined)\r\n  let conditionalStats = Weapon.getWeaponConditionalStat(weapon.key, weapon.refineIndex, weapon.conditionalNum, undefined)\r\n  let conditional = Weapon.getWeaponConditional(weapon.key)\r\n  let conditionalNum = weapon.conditionalNum;\r\n  let conditionalEle = <ConditionalSelector\r\n    conditional={conditional}\r\n    conditionalNum={conditionalNum}\r\n    setConditional={(cnum) => setStateWeapon(\"conditionalNum\", cnum)}\r\n    defEle={<span>{weaponPassiveName}</span>}\r\n  />\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Header>\r\n      <Row>\r\n        <Col>\r\n          <span>Weapon</span>\r\n        </Col>\r\n        <Col xs=\"auto\">\r\n          <Button variant=\"info\" size=\"sm\" onClick={() => setShowDescription(!showDescription)}>\r\n            <span><FontAwesomeIcon icon={faQuoteLeft} /> {showDescription ? \"Hide Desc.\" : \"Show Desc.\"}</span>\r\n          </Button>\r\n        </Col>\r\n        {editable ? <Col xs=\"auto\" >\r\n          <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n            <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n          </Button>\r\n        </Col> : null}\r\n      </Row>\r\n    </Card.Header>\r\n    <Card.Body>\r\n      <Row className=\"mb-2\">\r\n        <Col xs={12} md={3}>\r\n          <Image src={Weapon.getWeaponImg(weapon.key)} className={`w-100 h-auto grad-${Weapon.getWeaponRarity(weapon.key)}star`} thumbnail />\r\n        </Col>\r\n        {editing ? <Col>\r\n          <Row>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getWeaponName(weapon.key)}>\r\n                {[...Array(5).keys()].reverse().map(key => key + 1).map((star, i, arr) => <React.Fragment key={star}>\r\n                  <Dropdown.ItemText key={\"star\" + star}><Stars stars={star} /></Dropdown.ItemText>\r\n                  {Object.entries(Weapon.getWeaponsOfType(weaponTypeKey)).filter(([key, weaponObj]) => weaponObj.rarity === star).map(([key, weaponObj]) =>\r\n                    <Dropdown.Item key={key} onClick={() => setStateWeapon(\"key\", key)}>\r\n                      {weaponObj.name}\r\n                    </Dropdown.Item>\r\n                  )}\r\n                  {(i !== arr.length - 1) && < Dropdown.Divider />}\r\n                </React.Fragment>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            <Col lg=\"auto\" xs={6} className=\"mb-2 pr-0\">\r\n              <DropdownButton title={Weapon.getLevelName(weapon.levelKey)}>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Level</span>\r\n                </Dropdown.ItemText>\r\n                {Object.entries(LevelNameData).map(([key, name]) =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"levelKey\", key)}>\r\n                    {name}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>\r\n            {weaponPassiveName && <Col lg=\"auto\" xs={6} className=\"mb-2\">\r\n              <DropdownButton title={`Refinement ${weapon.refineIndex + 1}`} className=\"w-100\">\r\n                <Dropdown.ItemText>\r\n                  <span>Select Weapon Refinement</span>\r\n                </Dropdown.ItemText>\r\n                <Dropdown.Divider />\r\n                {[...Array(5).keys()].map(key =>\r\n                  <Dropdown.Item key={key} onClick={() => setStateWeapon(\"refineIndex\", key)}>\r\n                    {`Refinement ${key + 1}`}\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </Col>}\r\n            <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><FontAwesomeIcon icon={faGavel} className=\"mr-2\" />ATK</span>}\r\n                placeholder=\"Weapon Attack\"\r\n                value={weaponDisplayMainVal}\r\n                percent={false}\r\n                onValueChange={(value) => setStateWeapon(\"overrideMainVal\", value)}\r\n                defaultValue={Weapon.getWeaponMainStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>\r\n            {subStatKey && <Col xs={12} className=\"mb-2\">\r\n              <StatInput\r\n                name={<span><span className=\"mr-2\">{StatIconEle(subStatKey)}</span>{Stat.getStatName(subStatKey)}</span>}\r\n                placeholder=\"Weapon Substat\"\r\n                value={weaponDisplaySubVal}\r\n                percent={Stat.getStatUnit(subStatKey) === \"%\"}\r\n                onValueChange={(value) => setStateWeapon(\"overrideSubVal\", value)}\r\n                defaultValue={Weapon.getWeaponSubStatVal(weapon.key, weapon.levelKey)}\r\n              />\r\n            </Col>}\r\n          </Row>\r\n        </Col> :\r\n          <Col>\r\n            <Row className=\"mb-2\"><Col>\r\n              <h5 className=\"mb-0\">{Weapon.getWeaponName(weapon.key)} {Weapon.getLevelName(weapon.levelKey)} {weaponPassiveName && `(Refinement ${weapon.refineIndex + 1})`}</h5>\r\n              <small ><Stars stars={Weapon.getWeaponRarity(weapon.key)} /></small>\r\n            </Col></Row>\r\n            <Row>\r\n              <Col>{conditionalEle}</Col>\r\n            </Row>\r\n\r\n            <p>{weaponPassiveName && Weapon.getWeaponPassiveDescription(weapon.key, weapon.refineIndex, build?.finalStats, character)}</p>\r\n            <WeaponStatsCard title={\"Main Stats\"} stats={{ atk: weaponDisplayMainVal, [subStatKey]: weaponDisplaySubVal }} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Bonus Stats\"} stats={weaponBonusStats} finalStats={build?.finalStats} />\r\n            <WeaponStatsCard title={\"Conditional Stats\"} stats={conditionalStats} finalStats={build?.finalStats} />\r\n          </Col>}\r\n      </Row>\r\n      {showDescription && <Row><Col><small>{Weapon.getWeaponDescription(weapon.key)}</small></Col></Row>}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\n\r\nfunction MainStatsCards(props) {\r\n  const { editable, character, setOverride, equippedBuild, newBuild } = props\r\n\r\n  const [editing, SetEditing] = useState(false)\r\n  const [editingOther, SetEditingOther] = useState(false)\r\n  const [editingMisc, SetEditingMisc] = useState(false)\r\n\r\n  const additionalKeys = [\"eleMas\", \"critRate_\", \"critDMG_\", \"enerRech_\", \"heal_\"]\r\n  const displayStatKeys = [\"finalHP\", \"finalATK\", \"finalDEF\"]\r\n  displayStatKeys.push(...additionalKeys)\r\n  const editStatKeys = [\"characterHP\", \"hp\", \"hp_\", \"characterATK\", \"atk\", \"atk_\", \"characterDEF\", \"def\", \"def_\"]\r\n  editStatKeys.push(...additionalKeys)\r\n  const otherStatKeys = []\r\n\r\n  Character.getElementalKeys().forEach(ele => {\r\n    otherStatKeys.push(`${ele}_dmg_`)\r\n    otherStatKeys.push(`${ele}_res_`)\r\n  })\r\n  otherStatKeys.push(\"stamina\", \"incHeal_\", \"powShield_\")\r\n\r\n  const miscStatkeys = [\r\n    \"normal_dmg_\", \"normal_critRate_\",\r\n    \"charged_dmg_\", \"charged_critRate_\",\r\n    \"skill_dmg_\", \"skill_critRate_\",\r\n    \"burst_dmg_\", \"burst_critRate_\",\r\n    \"dmg_\", \"moveSPD_\", \"atkSPD_\", \"weakspotDMG_\"]\r\n\r\n  const specializedStatKey = Character.getStatValueWithOverride(character, \"specializedStatKey\")\r\n  const specializedStatVal = Character.getStatValueWithOverride(character, \"specializedStatVal\");\r\n  const specializedStatUnit = Stat.getStatUnit(specializedStatKey)\r\n\r\n  const isPercentSpecialStatSelect = Stat.getStatUnit(specializedStatKey) === \"%\"\r\n\r\n  const displayNewBuildProps = { character, equippedBuild, newBuild, editable }\r\n  return <>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Main Base Stats</span>\r\n          </Col>\r\n          {editable ? <Col xs=\"auto\" >\r\n            <Button variant={editing ? \"danger\" : \"info\"} onClick={() => SetEditing(!editing)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editing ? faSave : faEdit} /> {editing ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col> : null}\r\n        </Row>\r\n      </Card.Header>\r\n      {editing ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {editStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatNamePretty(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatName(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n\r\n            <Col lg={6} xs={12}>\r\n              <InputGroup>\r\n                <DropdownButton\r\n                  title={Stat.getStatNameWithPercent(specializedStatKey, \"Specialized Stat\")}\r\n                  as={InputGroup.Prepend}\r\n                >\r\n                  <Dropdown.ItemText>Select Specialized Stat </Dropdown.ItemText>\r\n                  {CharacterSpecializedStatKey.map(key =>\r\n                    <Dropdown.Item key={key} onClick={() => setOverride(\"specializedStatKey\", key)} >\r\n                      {Stat.getStatNameWithPercent(key)}\r\n                    </Dropdown.Item>)}\r\n                </DropdownButton>\r\n                <CustomFormControl float={isPercentSpecialStatSelect}\r\n                  placeholder=\"Character Special Stat\"\r\n                  value={Character.getStatValueWithOverride(character, \"specializedStatVal\")}\r\n                  onValueChange={(value) => setOverride(\"specializedStatVal\", value)} />\r\n                {isPercentSpecialStatSelect && (<InputGroup.Append>\r\n                  <InputGroup.Text>%</InputGroup.Text>\r\n                </InputGroup.Append>)}\r\n              </InputGroup>\r\n            </Col>\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {displayStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}\r\n            {specializedStatVal ? <Col lg={6} xs={12}>\r\n              <span><b>Specialized:</b> <span className={Character.hasOverride(character, \"specializedStatKey\") ? \"text-warning\" : \"\"}>{Stat.getStatName(specializedStatKey)}</span></span>\r\n              <span className={`float-right ${Character.hasOverride(character, \"specializedStatVal\") ? \"text-warning\" : \"\"}`}>{`${specializedStatVal}${specializedStatUnit}`}</span>\r\n            </Col> : null}\r\n          </Row>\r\n        </Card.Body>\r\n      }\r\n    </Card >\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Other Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingOther ? \"danger\" : \"info\"} onClick={() => SetEditingOther(!editingOther)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingOther ? faSave : faEdit} /> {editingOther ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingOther ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {otherStatKeys.map(statKey =>\r\n              <Col lg={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{otherStatKeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n    <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n      <Card.Header>\r\n        <Row>\r\n          <Col>\r\n            <span>Misc Stats</span>\r\n          </Col>\r\n          {editable && <Col xs=\"auto\" >\r\n            <Button variant={editingMisc ? \"danger\" : \"info\"} onClick={() => SetEditingMisc(!editingMisc)} size=\"sm\">\r\n              <span><FontAwesomeIcon icon={editingMisc ? faSave : faEdit} /> {editingMisc ? \"EXIT\" : \"EDIT\"}</span>\r\n            </Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {editingMisc ?\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">\r\n            {miscStatkeys.map(statKey =>\r\n              <Col xl={6} xs={12} key={statKey}>\r\n                <StatInput\r\n                  className=\"mb-2\"\r\n                  name={<span>{StatIconEle(statKey)} {Stat.getStatName(statKey)}</span>}\r\n                  placeholder={`Base ${Stat.getStatNameRaw(statKey)}`}\r\n                  value={Character.getStatValueWithOverride(character, statKey)}\r\n                  percent={Stat.getStatUnit(statKey) === \"%\"}\r\n                  onValueChange={(value) => setOverride(statKey, value)}\r\n                  defaultValue={Character.getBaseStatValue(character, statKey)}\r\n                />\r\n              </Col>)}\r\n          </Row>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Row className=\"mb-2\">{miscStatkeys.map(statKey => <Col xs={12} lg={6} key={statKey} ><StatDisplay statKey={statKey} {...displayNewBuildProps} /></Col>)}</Row>\r\n        </Card.Body>\r\n      }\r\n    </Card>\r\n  </>\r\n}\r\n","import { faQuestionCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from 'react';\r\nimport { useState } from \"react\";\r\nimport { Button, Card, Col, Dropdown, DropdownButton, Image, ListGroup, OverlayTrigger, Row, Tooltip } from \"react-bootstrap\";\r\nimport Assets from \"../../Assets/Assets\";\r\nimport ConditionalSelector from \"../../Components/ConditionalSelector\";\r\nimport Stat from \"../../Stat\";\r\nimport { ElementToReactionKeys } from \"../../StatData\";\r\nimport ConditionalsUtil from \"../../Util/ConditionalsUtil\";\r\nimport Character from \"../Character\";\r\nimport DamageOptionsAndCalculation from \"./DamageOptionsAndCalculation\";\r\n\r\nexport default function CharacterTalentPane(props) {\r\n  let { character, character: { characterKey, levelKey, constellation }, editable, setState, setOverride, newBuild, equippedBuild } = props\r\n\r\n  let ascension = Character.getAscension(levelKey)\r\n\r\n  let skillBurstList = [[\"auto\", \"Normal/Charged Attack\"], [\"skill\", \"Elemental Skill\"], [\"burst\", \"Elemental Burst\"]]\r\n\r\n  let passivesList = [[\"passive1\", \"Unlocked at Ascension 1\", 1], [\"passive2\", \"Unlocked at Ascension 4\", 4], [\"passive3\", \"Unlocked by Default\", 0]]\r\n\r\n  let skillDisplayProps = { ...props, ascension }\r\n\r\n  return <>\r\n    <Row><Col xs={12} className=\"mb-2\">\r\n      <DamageOptionsAndCalculation {...{ character, setState, setOverride, newBuild, equippedBuild }} />\r\n    </Col></Row>\r\n    <Row><Col><ReactionDisplay {...props} /></Col></Row>\r\n    <Row>\r\n      {/* auto, skill, burst */}\r\n      {skillBurstList.map(([tKey, tText]) =>\r\n        <Col key={tKey} xs={12} md={6} lg={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>)}\r\n      {Character.getTalent(characterKey, \"sprint\", false) && <Col xs={12} md={6} lg={4} className=\"mb-2\">\r\n        <SkillDisplayCard\r\n          {...skillDisplayProps}\r\n          talentKey=\"sprint\"\r\n          subtitle=\"Alternative Sprint\"\r\n        />\r\n      </Col>}\r\n    </Row>\r\n    <Row>\r\n      {/* passives */}\r\n      {passivesList.map(([tKey, tText, asc]) => {\r\n        let enabled = ascension >= asc\r\n        return <Col key={tKey} style={{ opacity: enabled ? 1 : 0.5 }} xs={12} md={4} className=\"mb-2\">\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={tText}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n    <Row>\r\n      <Col>\r\n        <h5 className=\"text-center\">Constellation Lv. {constellation}</h5>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"mb-n2\">\r\n      {/* constellations */}\r\n      {[...Array(6).keys()].map(i => {\r\n        let tKey = `constellation${i + 1}`\r\n        return <Col key={i} xs={12} md={4} className=\"mb-2\"\r\n          style={{ opacity: constellation > i ? 1 : 0.5 }}>\r\n          <SkillDisplayCard\r\n            {...skillDisplayProps}\r\n            talentKey={tKey}\r\n            subtitle={`Contellation Lv. ${i + 1}`}\r\n            onClickTitle={editable ? (() => setState({ constellation: (i + 1) === constellation ? i : i + 1 })) : undefined}\r\n          />\r\n        </Col>\r\n      })}\r\n    </Row>\r\n  </>\r\n}\r\nconst ReactionComponents = {\r\n  superconduct_hit: SuperConductCard,\r\n  electrocharged_hit: ElectroChargedCard,\r\n  overloaded_hit: OverloadedCard,\r\n  pyro_swirl_hit: SwirlCard,\r\n  shattered_hit: ShatteredCard,\r\n  crystalize_hit: CrystalizeCard,\r\n}\r\nfunction ReactionDisplay({ character: { characterKey }, newBuild, equippedBuild }) {\r\n  const build = newBuild ? newBuild : equippedBuild\r\n  const charEleKey = Character.getElementalKey(characterKey)\r\n  const eleInterArr = [...(ElementToReactionKeys[charEleKey] || [])]\r\n  if (!eleInterArr.includes(\"shattered_hit\") && Character.getWeaponTypeKey(characterKey) === \"claymore\") eleInterArr.push(\"shattered_hit\")\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"mb-2\">\r\n    <Card.Body className=\"px-3 py-2\">\r\n      <Row className=\"mb-n2\">\r\n        {eleInterArr.map(key => {\r\n          const Ele = ReactionComponents[key]\r\n          if (!Ele) return null\r\n          return <Col xs=\"auto\" className=\"mb-2\" key={key}><Ele stats={build?.finalStats} /></Col>\r\n        })}\r\n      </Row>\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction SuperConductCard({ stats }) {\r\n  const sKey = \"superconduct_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-superconduct\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ElectroChargedCard({ stats }) {\r\n  const sKey = \"electrocharged_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-electrocharged\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.hydro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction OverloadedCard({ stats }) {\r\n  const sKey = \"overloaded_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-overloaded\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.pyro} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nconst swirlEleToDisplay = {\r\n  \"pyro\": <span>{Stat.getStatName(\"pyro_swirl_hit\")} <Image src={Assets.elements.pyro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"electro\": <span>{Stat.getStatName(\"electro_swirl_hit\")} <Image src={Assets.elements.electro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"cryo\": <span>{Stat.getStatName(\"cryo_swirl_hit\")} <Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>,\r\n  \"hydro\": <span>{Stat.getStatName(\"hydro_swirl_hit\")} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.anemo} className=\"inline-icon\" /></span>\r\n}\r\nfunction SwirlCard({ stats }) {\r\n  const [ele, setele] = useState(Object.keys(swirlEleToDisplay)[0])\r\n  const sKey = `${ele}_swirl_hit`\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-0\">\r\n    <DropdownButton size=\"sm\" title={swirlEleToDisplay[ele]} className=\"d-inline-block\">\r\n      {Object.entries(swirlEleToDisplay).map(([key, element]) => <Dropdown.Item key={key} onClick={() => setele(key)}>{element}</Dropdown.Item>)}\r\n    </DropdownButton>\r\n    <span className={`text-${ele} p-2`}> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction ShatteredCard({ stats }) {\r\n  const sKey = \"shattered_hit\"\r\n  const information = <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>Claymores, Plunging Attacks and <span className=\"text-geo\">Geo DMG</span></Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger>\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-shattered\">{Stat.getStatName(sKey)} <Image src={Assets.elements.hydro} className=\"inline-icon\" />+<Image src={Assets.elements.cryo} className=\"inline-icon\" />+ <small className=\"text-physical\">Heavy Attack{information} </small> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\nfunction CrystalizeCard({ stats }) {\r\n  const sKey = \"crystalize_hit\"\r\n  return <Card bg=\"darkcontent\" text=\"lightfont\"><Card.Body className=\"p-2\">\r\n    <span className=\"text-crystalize\">{Stat.getStatName(sKey)} <Image src={Assets.elements.electro} className=\"inline-icon\" />/<Image src={Assets.elements.hydro} className=\"inline-icon\" />/<Image src={Assets.elements.pyro} className=\"inline-icon\" />/<Image src={Assets.elements.cryo} className=\"inline-icon\" />+<Image src={Assets.elements.geo} className=\"inline-icon\" /> {stats[sKey]?.toFixed(Stat.fixedUnit(sKey))}</span>\r\n  </Card.Body></Card>\r\n}\r\n\r\nfunction modifiersToFields(modifiers, finalStats = {}) {\r\n  return Object.entries(modifiers).map(([mStatKey, modifier]) => ({\r\n    text: Stat.getStatName(mStatKey),\r\n    variant: Stat.getStatVariant(mStatKey),\r\n    value: Object.entries(modifier ?? {}).reduce((accu, [mkey, multiplier]) => accu + finalStats[mkey] * multiplier, 0),\r\n    formulaText: <span>{Object.entries(modifier ?? {}).map(([mkey, multiplier], i) => <span key={i} >{i !== 0 ? \" + \" : \"\"}{Stat.printStat(mkey, finalStats)} * {multiplier?.toFixed?.(3) ?? multiplier}</span>)}</span>,\r\n    fixed: Stat.fixedUnit(mStatKey),\r\n    unit: Stat.getStatUnit(mStatKey)\r\n  }))\r\n}\r\nfunction statsToFields(stats, finalStats = {}) {\r\n  return Object.entries(stats).map(([statKey, statVal]) =>\r\n    statKey === \"modifiers\" ? modifiersToFields(statVal, finalStats) : {\r\n      text: Stat.getStatName(statKey),\r\n      variant: Stat.getStatVariant(statKey),\r\n      value: statVal,\r\n      fixed: Stat.fixedUnit(statKey),\r\n      unit: Stat.getStatUnit(statKey)\r\n    }\r\n  ).flat()\r\n}\r\n\r\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\r\nfunction SkillDisplayCard(props) {\r\n  let { character, character: { characterKey, constellation, talentLevelKeys, autoInfused = false }, talentKey, subtitle, ascension, equippedBuild, newBuild, editable, setState } = props\r\n  let { onClickTitle = null, ...otherProps } = props\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  let header = null\r\n  let infuseBtn = null\r\n  if (talentKey === \"auto\" && Character.isAutoInfusable(characterKey)) {\r\n    let eleKey = Character.getElementalKey(characterKey)\r\n    infuseBtn = <Col xs=\"auto\">\r\n      <Button variant={autoInfused ? eleKey : \"secondary\"} className=\"text-white\" disabled={!editable} onClick={editable ? (() => setState(state => ({ autoInfused: !state.autoInfused }))) : undefined} size={editable ? null : \"sm\"}>\r\n        {autoInfused ?\r\n          <span>Infused with <b>{Character.getElementalName(eleKey)}</b></span>\r\n          : \"Not Infused\"}\r\n      </Button>\r\n    </Col>\r\n  }\r\n\r\n  let talentLvlKey = 0\r\n  if (talentKey in talentLevelKeys) {\r\n    const talentLvlKeyRaw = talentLevelKeys[talentKey]\r\n    const levelBoost = Character.getTalentLevelBoost(characterKey, talentKey, constellation)\r\n    talentLvlKey = talentLvlKeyRaw + levelBoost\r\n    if (editable) {\r\n      const setTalentLevel = (tKey, newTalentLevelKey) => setState(state => {\r\n        const stateTalentLevelKeys = state.talentLevelKeys || {}\r\n        stateTalentLevelKeys[tKey] = newTalentLevelKey\r\n        return { talentLevelKeys: stateTalentLevelKeys }\r\n      })\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            <DropdownButton title={`Talent Lv. ${talentLvlKey + 1}`}>\r\n              {[...Array(talentLimits[ascension]).keys()].map(i =>\r\n                <Dropdown.Item key={i} onClick={() => setTalentLevel(talentKey, i)}>Talent Lv. {i + levelBoost + 1}</Dropdown.Item>)}\r\n            </DropdownButton>\r\n          </Col>\r\n          {infuseBtn}\r\n        </Row>\r\n      </Card.Header>\r\n    } else {\r\n      header = <Card.Header>\r\n        <Row>\r\n          <Col xs=\"auto\">\r\n            {`Talent Level: ${talentLvlKey + 1}`}\r\n          </Col>\r\n          <Col xs=\"auto\">\r\n            {infuseBtn}\r\n          </Col>\r\n        </Row>\r\n      </Card.Header>\r\n    }\r\n  }\r\n  const talentStats = Character.getTalentStats(characterKey, talentKey, build.finalStats)\r\n  const statsEle = talentStats && <Row><Col>\r\n    <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mt-2 ml-n2 mr-n2\">\r\n      <ListGroup className=\"text-white\" variant=\"flush\">\r\n        {statsToFields(talentStats, build?.finalStats).map((field, i) =>\r\n          <FieldDisplay key={i} index={i} {...{ field, ...otherProps }} />)}\r\n      </ListGroup>\r\n    </Card>\r\n  </Col></Row>\r\n\r\n  return <Card bg=\"lightcontent\" text=\"lightfont\" className=\"h-100\">\r\n    {header}\r\n    <Card.Body>\r\n      <Row className={`d-flex flex-row mb-2 ${(editable && onClickTitle) ? \"cursor-pointer\" : \"\"}`} onClick={onClickTitle} >\r\n        <Col xs=\"auto\" className=\"flex-shrink-1 d-flex flex-column\">\r\n          <Image src={Character.getTalentImg(characterKey, talentKey)} className=\"thumb-mid\" />\r\n        </Col>\r\n        <Col className=\"flex-grow-1\">\r\n          <Card.Title>{Character.getTalentName(characterKey, talentKey)}</Card.Title>\r\n          <Card.Subtitle>{subtitle}</Card.Subtitle>\r\n        </Col>\r\n      </Row>\r\n      {Character.getTalentDocument(characterKey, talentKey).map((section, i) => {\r\n        if (typeof section === \"function\")\r\n          section = section(build.finalStats)\r\n        if (!section) return null\r\n\r\n        let talentText = section.text\r\n        if (typeof talentText === \"function\")\r\n          talentText = talentText(build.finalStats)\r\n        let fields = section.fields ?? []\r\n\r\n        let conditional = section.conditional;\r\n        if (typeof conditional === \"function\")\r\n          conditional = conditional(build.finalStats)\r\n        let conditionalEle = null\r\n        if (conditional) {\r\n          let conditionalNum = ConditionalsUtil.getConditionalNum(character.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey })\r\n          let conditionalFields = []\r\n          if (conditionalNum) {\r\n            let conditionalStats = Character.getTalentConditionalStats(conditional, conditionalNum, {})\r\n            conditionalFields = [...Character.getTalentConditionalFields(conditional, conditionalNum, []), ...statsToFields(conditionalStats, build?.finalStats)]\r\n          }\r\n          let setConditional = (conditionalNum) => setState(state =>\r\n            ({ talentConditionals: ConditionalsUtil.setConditional(state.talentConditionals, { srcKey: talentKey, srcKey2: conditional.conditionalKey }, conditionalNum) }))\r\n          conditionalEle = <Col xs={12}>\r\n            <Card bg=\"darkcontent\" text=\"lightfont\" className=\"mb-2\">\r\n              <Card.Header>\r\n                <ConditionalSelector disabled={!editable}\r\n                  conditional={conditional}\r\n                  conditionalNum={conditionalNum}\r\n                  setConditional={setConditional}\r\n                  defEle={<span>{conditional.condition}</span>} />\r\n              </Card.Header>\r\n              <ListGroup className=\"text-white\" variant=\"flush\">\r\n                {conditionalFields.map((condField, i) => <FieldDisplay key={i} index={i} {...{ field: condField, ...otherProps }} />)}\r\n              </ListGroup>\r\n            </Card>\r\n          </Col>\r\n        }\r\n        return <Row className=\"mt-2 mb-n2\" key={\"section\" + i}><Col xs={12}>\r\n          <div className=\"mb-2\">{talentText}</div>\r\n          {fields.length > 0 && <ListGroup className=\"text-white mb-2\">\r\n            {fields?.map?.((field, i) => <FieldDisplay key={i} index={i} {...{ field, ...otherProps }} />)}\r\n          </ListGroup>}\r\n        </Col>{conditionalEle}</Row>\r\n      })}\r\n      {statsEle}\r\n    </Card.Body>\r\n  </Card>\r\n}\r\nfunction FieldDisplay({ character: { compareAgainstEquipped, }, field, index, equippedBuild, newBuild }) {\r\n  let build = newBuild ? newBuild : equippedBuild\r\n  if (typeof field === \"function\")\r\n    field = field(build.finalStats)\r\n  if (!field) return null\r\n\r\n  const fieldText = Character.getTalentFieldValue(field, \"text\", build.finalStats)\r\n  const fieldVariant = Character.getTalentFieldValue(field, \"variant\", build.finalStats)\r\n\r\n  const fieldFormulaText = Character.getTalentFieldValue(field, \"formulaText\", build.finalStats)\r\n  const formulaTextOverlay = fieldFormulaText ? <OverlayTrigger\r\n    placement=\"top\"\r\n    overlay={<Tooltip>{fieldFormulaText}</Tooltip>}\r\n  >\r\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"ml-2\" style={{ cursor: \"help\" }} />\r\n  </OverlayTrigger> : null\r\n\r\n  let fieldVal = null\r\n  if (field.value)\r\n    fieldVal = Character.getTalentFieldValue(field, \"value\", build.finalStats)\r\n  else if (field.formula)\r\n    fieldVal = Character.getTalentFieldValue(field, \"formula\", build.finalStats)?.[0]?.(build.finalStats)\r\n\r\n  let fixedVal = field.fixed || 0\r\n  const unit = Character.getTalentFieldValue(field, \"unit\", build.finalStats)\r\n  //compareAgainstEquipped\r\n  if (compareAgainstEquipped && equippedBuild && typeof fieldVal === \"number\") {\r\n    let fieldEquippedVal = field.value ? field.value : field.formula?.(equippedBuild.finalStats)?.[0]?.(equippedBuild.finalStats)\r\n\r\n    if (typeof fieldEquippedVal === \"function\")\r\n      fieldEquippedVal = parseInt(fieldEquippedVal?.(equippedBuild.finalStats)?.toFixed?.(fixedVal))\r\n    let diff = fieldVal - fieldEquippedVal\r\n    fieldVal = <span>{fieldEquippedVal?.toFixed(fixedVal) ?? fieldEquippedVal}{diff ? <span className={diff > 0 ? \"text-success\" : \"text-danger\"}> ({diff > 0 ? \"+\" : \"\"}{diff?.toFixed?.(fixedVal) || diff})</span> : \"\"}</span>\r\n  }\r\n\r\n  return <ListGroup.Item variant={index % 2 ? \"customdark\" : \"customdarker\"} className=\"p-2\">\r\n    <div>\r\n      <span><b>{fieldText}</b>{formulaTextOverlay}</span>\r\n      <span className={`float-right text-right text-${fieldVariant}`} >{fieldVal?.toFixed?.(fixedVal) ?? fieldVal}{unit}</span>\r\n    </div>\r\n  </ListGroup.Item>\r\n}\r\n","import { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { Badge, ButtonGroup, Dropdown, DropdownButton, Image, Nav, Tab } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport DropdownToggle from 'react-bootstrap/esm/DropdownToggle';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Artifact from '../Artifact/Artifact';\r\nimport WIPComponent from '../Components/WIPComponent';\r\nimport { WeaponLevelKeys } from '../Data/WeaponData';\r\nimport { deepClone } from '../Util/Util';\r\nimport Weapon from '../Weapon/Weapon';\r\nimport Character from './Character';\r\nimport CharacterDatabase from '../Database/CharacterDatabase';\r\nimport CharacterArtifactPane from './CharacterDisplay/CharacterArtifactPane';\r\nimport CharacterOverviewPane from './CharacterDisplay/CharacterOverviewPane';\r\nimport CharacterTalentPane from './CharacterDisplay/CharacterTalentPane';\r\n\r\nconst CustomMenu = React.forwardRef(\r\n  ({ children, style, className, 'aria-labelledby': labeledBy }, ref) => {\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        style={{ style, minWidth: \"25rem\" }}\r\n        className={className}\r\n        aria-labelledby={labeledBy}\r\n      >\r\n        <Row>\r\n          {React.Children.toArray(children).map((child, i) => <Col key={i} xs={6}>{child}</Col>)}\r\n        </Row>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nexport default class CharacterDisplayCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = CharacterDisplayCard.getInitialState()\r\n    const { characterKey, character } = props\r\n    if (characterKey) {\r\n      const char = CharacterDatabase.get(characterKey) ?? { characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.state = { ...this.state, ...char }\r\n    } else if (character) {\r\n      this.state = { ...this.state, ...character }\r\n    }\r\n  }\r\n\r\n  static initialState = {\r\n    characterKey: \"\",//the game character this is based off\r\n    levelKey: \"L1\",//combination of level and ascension\r\n    hitMode: \"hit\",\r\n    reactionMode: null,\r\n    equippedArtifacts: {},\r\n    artifactConditionals: [],\r\n    baseStatOverrides: {},//overriding the baseStat\r\n    weapon: {\r\n      key: \"\",\r\n      levelKey: WeaponLevelKeys[0],\r\n      refineIndex: 0,\r\n      overrideMainVal: 0,\r\n      overrideSubVal: 0,\r\n      conditionalNum: 0,\r\n    },\r\n    talentLevelKeys: {\r\n      auto: 0,\r\n      skill: 0,\r\n      burst: 0,\r\n    },\r\n    autoInfused: false,\r\n    talentConditionals: [],\r\n    constellation: 0,\r\n    compareAgainstEquipped: false//note: needs to be deleted when saving\r\n  }\r\n  static getIntialWeapon = (characterKey) => {\r\n    let weapon = deepClone(this.initialState.weapon)\r\n    weapon.key = Object.keys(Weapon.getWeaponsOfType(Character.getWeaponTypeKey(characterKey)))[0]\r\n    return weapon\r\n  }\r\n\r\n  static getInitialState = () => deepClone(CharacterDisplayCard.initialState)\r\n  //UI will not update if the character is updated in DB. Components will have to call this to update this UI.\r\n  forceUpdateComponent = () => {\r\n    if (this.state.characterKey)\r\n      this.setState(CharacterDatabase.get(this.state.characterKey))\r\n    this.props.forceUpdate ? this.props.forceUpdate() : this.forceUpdate();\r\n  }\r\n  setCharacterKey = (characterKey) => {\r\n    let state = CharacterDisplayCard.getInitialState()\r\n    let char = CharacterDatabase.get(characterKey)\r\n    if (char) state = { ...state, ...char }\r\n    else {\r\n      state = { ...state, characterKey, weapon: CharacterDisplayCard.getIntialWeapon(characterKey) }\r\n      this.updateCharacter(this.state)\r\n    }\r\n    this.setState(state)\r\n    this.props?.setCharacterKey?.(characterKey)\r\n  }\r\n\r\n  setLevelKey = (levelKey) =>\r\n    this.setState({ levelKey })\r\n\r\n  setOverride = (statKey, value) => this.setState(state => {\r\n    let baseStatOverrides = state.baseStatOverrides\r\n    let baseStatVal = Character.getBaseStatValue(this.state, statKey)\r\n    if (baseStatVal === value) {\r\n      delete baseStatOverrides[statKey]\r\n      return { baseStatOverrides }\r\n    } else {\r\n      baseStatOverrides[statKey] = value\r\n      return { baseStatOverrides }\r\n    }\r\n  })\r\n\r\n  setConstellation = (constellation) => this.setState({ constellation })\r\n  componentDidMount() {\r\n    Promise.all([\r\n      Character.getCharacterDataImport(),\r\n      Weapon.getWeaponDataImport(),\r\n      Artifact.getDataImport(),\r\n    ]).then(() => this.forceUpdate())\r\n  }\r\n  updateCharacter(state) {\r\n    state = deepClone(state)\r\n    delete state.compareAgainstEquipped\r\n    CharacterDatabase.update(state)\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.characterKey !== this.props.characterKey && this.props.characterKey !== this.state.characterKey)\r\n      this.setCharacterKey(this.props.characterKey)\r\n    if (this.props.editable && this.state.characterKey) {\r\n      //save this.state as character to character db.\r\n      this.updateCharacter(this.state)\r\n    }\r\n  }\r\n  render() {\r\n    let { footer, newBuild, editable, onClose, tabName } = this.props\r\n    const character = this.state\r\n    //transfer the hitmode/reactions over \r\n    if (newBuild?.finalStats) {\r\n      newBuild = deepClone(newBuild)\r\n      newBuild.finalStats.hitMode = character.hitMode;\r\n      newBuild.finalStats.reactionMode = character.reactionMode;\r\n    }\r\n\r\n    const { characterKey, levelKey, compareAgainstEquipped, artifacts: flexArts } = character\r\n    const equippedBuild = Character.calculateBuild(character)\r\n    const HeaderIconDisplay = characterKey ? <span >\r\n      <Image src={Character.getThumb(characterKey)} className=\"thumb-small my-n1 ml-n2\" roundedCircle />\r\n      <h6 className=\"d-inline\"> {Character.getName(characterKey)} </h6>\r\n    </span> : <span>Select a Character</span>\r\n    const commonPaneProps = { character, newBuild, equippedBuild: !newBuild || compareAgainstEquipped ? equippedBuild : undefined, editable, setState: u => this.setState(u), setOverride: this.setOverride, forceUpdate: this.forceUpdateComponent }\r\n    if (flexArts) commonPaneProps.artifacts = flexArts//from flex\r\n    // main CharacterDisplayCard\r\n    return (<Card bg=\"darkcontent\" text=\"lightfont\" >\r\n      <Card.Header>\r\n        <Row>\r\n          <Col xs={\"auto\"} className=\"mr-auto\">\r\n            {/* character selecter/display */}\r\n            {editable ? <ButtonGroup>\r\n              <Dropdown as={ButtonGroup}>\r\n                <DropdownToggle as={Button}>\r\n                  {HeaderIconDisplay}\r\n                </DropdownToggle>\r\n                <Dropdown.Menu as={CustomMenu}>\r\n                  {Character.getAllCharacterKeys().map(charKey =>\r\n                    <Dropdown.Item key={charKey} onClick={() => this.setCharacterKey(charKey)}>\r\n                      <span >\r\n                        <Image src={Character.getThumb(charKey)} className={`thumb-small p-0 m-n1 grad-${Character.getStar(charKey)}star`} thumbnail />\r\n                        <h6 className=\"d-inline ml-2\">{Character.getName(charKey)} </h6>\r\n                      </span>\r\n                    </Dropdown.Item>)}\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n              <DropdownButton as={ButtonGroup} disabled={!characterKey} title={\r\n                <h6 className=\"d-inline\">Stats Template: {Character.getlevelNames(levelKey)} </h6>\r\n              }>\r\n                <Dropdown.ItemText>\r\n                  <span>Select Base Stat Template</span>\r\n                </Dropdown.ItemText>\r\n                {Character.getlevelKeys().map(lvlKey =>\r\n                  <Dropdown.Item key={lvlKey} onClick={() => this.setLevelKey(lvlKey)}>\r\n                    <h6 >{Character.getlevelNames(lvlKey)} </h6>\r\n                  </Dropdown.Item>)}\r\n              </DropdownButton>\r\n            </ButtonGroup> : <span>{HeaderIconDisplay} Lvl. {Character.getStatValueWithOverride(character, \"characterLevel\")}</span>}\r\n          </Col>\r\n          {/* Compare against new build toggle */}\r\n          {newBuild ? <Col xs=\"auto\">\r\n            <ButtonGroup>\r\n              <Button variant={compareAgainstEquipped ? \"primary\" : \"success\"} disabled={!compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: false })}>\r\n                <small>Show New artifact Stats</small>\r\n              </Button>\r\n              <Button variant={!compareAgainstEquipped ? \"primary\" : \"success\"} disabled={compareAgainstEquipped} onClick={() => this.setState({ compareAgainstEquipped: true })}>\r\n                <small>Compare against equipped artifact</small>\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Col> : null}\r\n          {Boolean(onClose) && <Col xs=\"auto\" >\r\n            <Button variant=\"danger\" onClick={onClose}>\r\n              <FontAwesomeIcon icon={faTimes} /></Button>\r\n          </Col>}\r\n        </Row>\r\n      </Card.Header>\r\n      {Boolean(characterKey) && <Card.Body>\r\n        <Tab.Container defaultActiveKey={tabName ? tabName : (newBuild ? \"newartifacts\" : \"character\")} mountOnEnter={true} unmountOnExit={true}>\r\n          <Nav variant=\"pills\" className=\"mb-2 ml-2\">\r\n            <Nav.Item >\r\n              <Nav.Link eventKey=\"character\">Character</Nav.Link>\r\n            </Nav.Item>\r\n            {newBuild ? <Nav.Item>\r\n              <Nav.Link eventKey=\"newartifacts\">New Artifacts</Nav.Link>\r\n            </Nav.Item> : null}\r\n            <Nav.Item>\r\n              <Nav.Link eventKey=\"artifacts\">{newBuild ? \"Current Artifacts\" : \"Artifacts\"}</Nav.Link>\r\n            </Nav.Item>\r\n            <Nav.Item>\r\n              {(process.env.NODE_ENV !== \"development\" && !Character.hasTalentPage(characterKey)) ?\r\n                <WIPComponent>\r\n                  <Nav.Link eventKey=\"talent\" disabled>Talents <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n                </WIPComponent> :\r\n                <Nav.Link eventKey=\"talent\">Talents</Nav.Link>\r\n              }\r\n            </Nav.Item>\r\n            {!flexArts && <Nav.Item>\r\n              <WIPComponent>\r\n                <Nav.Link eventKey=\"team\" disabled>Team <Badge variant=\"warning\">WIP</Badge></Nav.Link>\r\n              </WIPComponent>\r\n            </Nav.Item>}\r\n          </Nav>\r\n          <Tab.Content>\r\n            <Tab.Pane eventKey=\"character\">\r\n              <CharacterOverviewPane\r\n                setConstellation={this.setConstellation}\r\n                {...commonPaneProps}\r\n              />\r\n            </Tab.Pane>\r\n            <Tab.Pane eventKey=\"artifacts\" >\r\n              <CharacterArtifactPane {...{ ...commonPaneProps, newBuild: undefined, equippedBuild, }} />\r\n            </Tab.Pane>\r\n            {newBuild ? <Tab.Pane eventKey=\"newartifacts\" >\r\n              <CharacterArtifactPane {...commonPaneProps} />\r\n            </Tab.Pane> : null}\r\n            <Tab.Pane eventKey=\"talent\">\r\n              <CharacterTalentPane {...commonPaneProps} />\r\n            </Tab.Pane>\r\n          </Tab.Content>\r\n        </Tab.Container>\r\n      </Card.Body>}\r\n      {footer && <Card.Footer>\r\n        {footer}\r\n      </Card.Footer>}\r\n    </Card>)\r\n  }\r\n}\r\n"],"sourceRoot":""}